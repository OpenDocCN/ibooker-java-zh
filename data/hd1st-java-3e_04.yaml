- en: 'Chapter 2\. A Trip to Objectville: Classes and Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。去Objectville旅行：类和对象
- en: '![image](Images/f0027-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0027-01.png)'
- en: '**I was told there would be objects.** In [Chapter 1](ch01.xhtml#breaking_the_surface_dive_in_a_quick_dip),
    we put all of our code in the main () method. That’s not exactly object-oriented.
    In fact, that’s not object-oriented at all. Well, we did use a few objects, like
    the String arrays for the Phrase-O-Matic, but we didn’t actually develop any of
    our own object types. So now we’ve got to leave that procedural world behind,
    get the heck out of main(), and start making some objects of our own. We’ll look
    at what makes object-oriented (OO) development in Java so much fun. We’ll look
    at the difference between a class and an object. We’ll look at how objects can
    give you a better life (at least the programming part of your life. Not much we
    can do about your fashion sense). Warning: once you get to Objectville, you might
    never go back. Send us a postcard.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**我听说过会有对象。** 在[第1章](ch01.xhtml#breaking_the_surface_dive_in_a_quick_dip)中，我们把所有的代码都放在了main()方法里。那并不完全是面向对象的。事实上，那根本不是面向对象。好吧，我们确实使用了一些对象，比如短语生成器中的字符串数组，但我们并没有真正开发出自己的对象类型。所以现在我们必须离开那个过程式的世界，摆脱main()，开始创造一些属于我们自己的对象。我们将看看是什么让Java中的面向对象开发如此有趣。我们将看看类和对象的区别。我们将看看对象如何能够改变你的生活（至少是你编程生活的一部分。对于你的时尚品味我们就没有什么办法了）。警告：一旦你到达对象之城，你可能再也不想回去了。给我们寄张明信片吧。'
- en: Chair Wars
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 椅子战争
- en: (or How Objects Can Change Your Life)
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （或者说，对象如何改变你的生活）
- en: '![image](Images/f0028-01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0028-01.png)'
- en: '**O**nce upon a time in a software shop, two programmers were given the same
    spec and told to “build it.” The Really Annoying Project Manager forced the two
    coders to compete, by promising that whoever delivers first gets a cool Aeron™
    chair and adjustable height standing desk like all the Silicon Valley techies
    have. Laura, the procedural programmer, and Brad, the OO developer, both knew
    this would be a piece of cake.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**从前**在一个软件公司里，两个程序员拿到了同样的规格说明书，并被告知“开始吧”。一个非常讨厌的项目经理强迫这两位程序员竞争，承诺谁先交付就能得到一把Aeron™椅子和一个可调节高度的站立式桌子，就像硅谷的技术人员一样。劳拉，程序式程序员，和布拉德，面向对象开发者，都知道这将是小菜一碟。'
- en: Laura, sitting at her (non-adjustable) desk, thought to herself, “What are the
    things this program has to *do*? What ***procedures*** do we need?” And she answered
    herself, “**rotate** and **playSound**.” So off she went to build the procedures.
    After all, what *is* a program if not a pile of procedures?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 坐在她的（不可调节的）桌子前，劳拉自言自语道，“这个程序需要*做*什么？我们需要哪些***过程***？” 她自问自答，“**rotate**和**playSound**。”
    于是她着手构建这些过程。毕竟，一个程序不就是一堆过程吗？
- en: Brad, meanwhile, kicked back at the coffee shop and thought to himself, “What
    are the ***things*** in this program...who are the key *players*?” He first thought
    of **The Shapes**. Of course, there were other things he thought of like the User,
    the Sound, and the Clicking Event. But he already had a library of code for those
    pieces, so he focused on building Shapes. Read on to see how Brad and Laura built
    their programs, and for the answer to your burning question, ***“So, who got the
    Aeron and the desk?”***
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 布拉德与此同时在咖啡店里踱步，心里想着，“这个程序中有哪些***要素***...主要的*参与者*是谁？” 他首先想到了**形状**。当然，还有其他他考虑到的东西，比如用户、声音和点击事件。但是他已经有了这些部分的代码库，所以他把注意力集中在构建形状上。继续阅读，看看布拉德和劳拉是如何构建他们的程序的，并且回答你燃起的问题的答案，“那么，谁得到了Aeron和桌子？”
- en: '![image](Images/f0028-02.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0028-02.png)'
- en: At Laura’s desk
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在劳拉的桌子上
- en: As she had done a gazillion times before, Laura set about writing her **Important
    Procedures**. She wrote **rotate** and **playSound** in no time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前做了无数次一样，劳拉开始编写她的**重要程序**。她很快就写出了**rotate**和**playSound**。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At Brad’s laptop at the cafe
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在咖啡店里的布拉德的笔记本电脑前
- en: Brad wrote a ***class*** for each of the three shapes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 布拉德为每种形状写了一个***类***。
- en: '![image](Images/f0028-03.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0028-03.png)'
- en: Laura thought she’d nailed it. She could almost feel the rolled steel of the
    Aeron beneath her...
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 劳拉觉得她已经做得很好了。她几乎可以感受到Aeron的铁框椅在她下面……
- en: But wait! There’s been a spec change.
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但等等！规格发生了变化。
- en: “OK, *technically* you were first, Laura,” said the Manager, “but we have to
    add just one tiny thing to the program. It’ll be no problem for crack programmers
    like you two.”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，*严格来说*劳拉，你是第一个，”经理说，“但是我们只需要在程序中增加一件小事情。对像你们这样的优秀程序员来说，这不是问题。”
- en: '*“If I had a dime for every time I’ve heard that one,”* thought Laura, knowing
    that spec-change-no-problem was a fantasy. *“And yet Brad looks strangely serene.
    What’s up with that?”* Still, Laura held tight to her core belief that the OO
    way, while cute, was just slow. And that if you wanted to change her mind, you’d
    have to pry it from her cold, dead, carpal-tunnelled hands.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*“如果我每次听到这种话都能得到一角钱，我早就富了，”* Laura 想着，知道规格变更没问题是一个幻想。*“然而 Brad 看起来却奇怪地宁静。怎么回事？”*
    尽管如此，Laura 仍然坚持她的核心信念，即OO的方式虽然可爱，但速度慢。如果你想改变她的想法，你得从她冰冷，死去的，腕管综合征的手中夺走。'
- en: '![image](Images/f0029-01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0029-01.png)'
- en: Back at Laura’s desk
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laura 的办公桌回来了。
- en: The rotate procedure would still work; the code used a lookup table to match
    a shapeNum to an actual shape graphic. But ***playSound would have to change.***
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转过程仍然可以工作；代码使用查找表将 shapeNum 匹配到实际形状图形。但是***playSound 将不得不改变***。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It turned out not to be such a big deal, but ***it still made her queasy to
    touch previously tested code***. Of *all* people, *she* should know that no matter
    what the project manager says, ***the spec always changes***.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明这并不是什么大不了的事情，但是***她依然觉得触碰之前测试过的代码有些不安***。*作为*一个人，*她*应该知道，无论项目经理说什么，***规格总是会变***。
- en: At Brad’s laptop at the beach
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Brad 的便携式电脑上，在海滩上
- en: Brad smiled, sipped his fruit frappe, and *wrote one new class*. Sometimes the
    thing he loved most about OO was that he didn’t have to touch code he’d already
    tested and delivered. “Flexibility, extensibility, ...” he mused, reflecting on
    the benefits of OO.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Brad 笑了笑，啜饮着他的水果冰沙，*编写了一个新类*。有时，他最喜欢的是OO的一点就是他不必再触碰他已经测试和交付过的代码。"灵活性，可扩展性，..."
    他沉思着，回想起OO的好处。
- en: '![image](Images/f0029-02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0029-02.png)'
- en: Laura delivered just moments ahead of Brad
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Laura 在 Brad 之前仅仅几分钟递交了。
- en: (Hah! So much for that foofy OO nonsense.) But the smirk on Laura’s face melted
    when the Really Annoying Project Manager said (with that tone of disappointment),
    “Oh, no, *that’s* not how the amoeba is supposed to rotate...”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: （哈！那些OO废话也就到此为止了。）但是当那位真正让人讨厌的项目经理带着失望的口吻说道：“哦，不，*这*不是分子应该旋转的方式…”时，Laura 脸上的笑容消失了。
- en: 'Turns out, both programmers had written their rotate code like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，两个程序员的旋转代码都写成了这样：
- en: '**1\. determine the rectangle that surrounds the shape.**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 确定围绕形状的矩形。**'
- en: '**2\. calculate the center of that rectangle, and rotate the shape around that
    point.**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 计算该矩形的中心，并围绕该点旋转形状。**'
- en: '![image](Images/f0030-01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0030-01.png)'
- en: But the amoeba shape was supposed to rotate around a point on one *end*, like
    a clock hand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是分子形状应该围绕一个*端点*旋转，就像时钟的指针一样。
- en: “I’m toast,” thought Laura, visualizing charred Wonderbread™. “Although, hmmmm.
    I could just add another if/else to the rotate procedure and then just hard-code
    the rotation point code for the amoeba. That probably won’t break anything.” But
    the little voice at the back of her head said, *“Big Mistake. Do you honestly
    think the spec won’t change again?”*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “我完蛋了，” Laura 想着，想象着烤焦的Wonderbread™。“虽然，嗯嗯嗯。我可以在旋转过程中再添加一个if/else，然后仅仅为分子硬编码旋转点代码。那可能不会造成什么破坏。”
    但是她脑后的小声音说，“大错特错。你真的认为规格不会再次变化？”
- en: '![image](Images/f0030-03.png)![image](Images/f0030-02.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0030-03.png)![image](Images/f0030-02.png)'
- en: Back at Laura’s desk
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laura 的办公桌回来了。
- en: She figured she better add rotation point arguments to the rotate procedure.
    ***A lot of code was affected***. Testing, recompiling, the whole nine yards all
    over again. Things that used to work, didn’t.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 她觉得她最好为旋转过程添加旋转点参数。***很多代码都受到了影响***。测试，重新编译，再从头来过。过去工作正常的事情，现在却不行了。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At Brad’s laptop on his lawn chair at the Telluride Bluegrass Festival
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Brad 的便携式电脑上，在Telluride 蓝草音乐节的草坪椅上
- en: Without missing a beat, Brad modified the rotate **method**, but only in the
    Amoeba class. ***He never touched the tested, working, compiled code*** for the
    other parts of the program. To give the Amoeba a rotation point, he added an **attribute**
    that all Amoebas would have. He modified, tested, and delivered (via free festival
    WiFi) the revised program during a single Bela Fleck set.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Brad 只在分子类中修改了旋转**方法**，但从未触碰过经过测试、工作并编译过的其他部分的代码。为了给分子添加一个旋转点，他添加了一个**属性**，所有的分子都将拥有这个属性。他修改，测试并在一个Bela
    Fleck的表演期间通过免费的音乐节WiFi交付了修订后的程序。
- en: '![image](Images/f0030-04.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0030-04.png)'
- en: So, Brad the OO guy got the chair and desk, right?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所以，OO 男孩 Brad 得到了椅子和办公桌，对吧？
- en: '![image](Images/f0031-01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0031-01.png)'
- en: '***Not so fast.*** Laura found a flaw in Brad’s approach. And, since she was
    sure that if she got the chair and desk, she’d also be next in line for a promotion,
    she had to turn this thing around.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '***不要着急***。Laura 发现了 Brad 方法中的一个缺陷。而且，由于她确信如果她得到椅子和桌子，她也将是下一个晋升的候选人，所以她必须扭转这种局面。'
- en: '**LAURA:** You’ve got duplicated code! The rotate procedure is in all four
    Shape things.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAURA:** 你这里有重复的代码！旋转过程在所有四个 Shape 事物中都有。'
- en: '**BRAD:** It’s a ***method***, not a *procedure*. And they’re ***classes***,
    not *things*.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**BRAD:** 这是一个***方法***，不是*过程*。它们是***类***，不是*事物*。'
- en: '**LAURA:** Whatever. It’s a stupid design. You have to maintain *four* different
    rotate “methods.” How can that ever be good?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAURA:** 随便吧。这是一个愚蠢的设计。你必须维护*四个*不同的旋转“方法”。这怎么可能是好的？'
- en: '**BRAD:** Oh, I guess you didn’t see the final design. Let me show you how
    OO **inheritance** works, Laura.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**BRAD:** 哦，我猜你没看到最终设计。让我向你展示面向对象的**继承**是如何工作的，Laura。'
- en: '![image](Images/f0031-02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0031-02.png)'
- en: You can read this as, **“Square inherits from Shape,” “Circle inherits from
    Shape**,” and so on. I removed rotate() and playSound() from the other shapes,
    so now there’s only one copy to maintain.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以理解为，“Square 继承自 Shape”，“Circle 继承自 Shape”，以此类推。我从其他形状中移除了 rotate() 和 playSound()，所以现在只需维护一个副本。
- en: The Shape class is called the **superclass** of the other four classes. The
    other four are the **subclasses** of Shape. The subclasses inherit the methods
    of the superclass. In other words, *if the Shape class has the functionality,
    then the subclasses automatically get that same functionality.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Shape 类被称为其他四个类的**超类**。其他四个类是 Shape 的**子类**。子类继承超类的方法。换句话说，*如果 Shape 类具有某些功能，那么子类就会自动获得相同的功能*。
- en: What about the Amoeba rotate()?
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变形虫的 rotate() 怎么办？
- en: '**LAURA:** Wasn’t that the whole problem here—that the amoeba shape had a completely
    different rotate and playSound procedure?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAURA:** 这不就是问题所在吗？那个变形虫形状有完全不同的旋转和播放声音的过程？'
- en: '**BRAD:** **Method.**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**BRAD:** **方法。**'
- en: '**LAURA:** Whatever. How can Amoeba do something different if it “inherits”
    its functionality from the Shape class?'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAURA:** 随便吧。如果 Amoeba 从 Shape 类“继承”其功能，它怎么可能做出不同的事情？'
- en: '**BRAD:** That’s the last step. The Amoeba class **overrides** the methods
    of the Shape class. Then at runtime, the JVM knows exactly which rotate() method
    to run when someone tells the Amoeba to rotate.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**BRAD:** 那是最后一步。Amoeba 类**覆盖**了 Shape 类的方法。然后在运行时，JVM 知道当有人告诉 Amoeba 旋转时应该运行哪个
    rotate() 方法。'
- en: '![image](Images/f0032-01.png)![image](Images/f0032-02.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0032-01.png)![image](Images/f0032-02.png)'
- en: '**LAURA:** How do you “tell” an Amoeba to do something? Don’t you have to call
    the procedure, sorry—*method*, and then tell it *which* thing to rotate?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAURA:** 如何“告诉”变形虫做某事？难道你不必调用过程，对不起——*方法*，然后告诉它*要*旋转的东西吗？'
- en: '**BRAD:** That’s the really cool thing about OO. When it’s time for, say, the
    triangle to rotate, the program code invokes (calls) the rotate() method *on the
    triangle object*. The rest of the program really doesn’t know or care *how* the
    triangle does it. And when you need to add something new to the program, you just
    write a new class for the new object type, so the **new objects will have their
    own behavior.**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**BRAD:** 这就是面向对象的很酷的地方。当需要例如让三角形旋转时，程序调用（调用）*三角形对象*上的 rotate() 方法。程序的其余部分实际上并不知道或关心
    *三角形是如何做到的*。而当你需要向程序中添加新内容时，只需为新对象类型编写一个新类，这样**新对象将拥有它们自己的行为**。'
- en: '![image](Images/f0032-03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0032-03.png)'
- en: The suspense is killing me. Who got the chair and desk?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 悬念让我无法忍受。谁得到了椅子和桌子？
- en: '![image](Images/f0033-01.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0033-01.png)'
- en: '**Amy from the second floor.**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**来自二楼的 Amy。**'
- en: (Unbeknownst to all, the Project Manager had given the spec to *three* programmers.
    Amy completed the project faster since she got on with OO programming without
    arguing with her co-workers).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: （众所周知，项目经理把规范交给了*三个*程序员。Amy 因为她在不与同事争论的情况下继续进行面向对象编程而更快地完成了项目）。
- en: 'When you design a class, think about the objects that will be created from
    that class type. Think about:'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当你设计一个类时，考虑将从该类类型创建的对象。考虑：
- en: things the object knows
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象所知道的事情
- en: things the object does
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象所做的事情
- en: '![image](Images/f0034-01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0034-01.png)'
- en: Things an object *knows* about itself are called
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象关于自身*知道*的事情称为
- en: instance variables
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例变量
- en: Things an object can do are called
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象可以做的事情被称为
- en: methods
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法
- en: '![image](Images/f0034-02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0034-02.png)'
- en: Things an object ***knows*** about itself are called **instance variables.**
    They represent an object’s state (the data) and can have unique values for each
    object of that type.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对象了解自身的***内容***称为**实例变量**。它们表示对象的状态（数据），并且可以为该类型的每个对象具有唯一值。
- en: '**Think of instance as another way of saying object.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**将实例视为另一种称呼对象。**'
- en: Things an object can ***do*** are called **methods**. When you design a class,
    you think about the data an object will need to know about itself, and you also
    design the methods that operate on that data. It’s common for an object to have
    methods that read or write the values of the instance variables. For example,
    Alarm objects have an instance variable to hold the alarmTime, and two methods
    for getting and setting the alarmTime.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对象能够***做***的事情称为**方法**。当你设计一个类时，你会考虑对象需要了解的数据，并设计操作该数据的方法。对象通常具有读取或写入实例变量值的方法。例如，闹钟对象具有一个实例变量来存储闹钟时间，以及两个用于获取和设置闹钟时间的方法。
- en: So objects have instance variables and methods, but those instance variables
    and methods are designed as part of the class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对象具有实例变量和方法，但这些实例变量和方法作为类的一部分进行设计。
- en: What’s the difference between a class and an object?
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和对象之间有什么区别？
- en: '![image](Images/f0035-01.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0035-01.png)'
- en: A class is not an object (but it’s used to construct them)
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类不是对象（但它们用于构建对象）
- en: '![image](Images/f0035-02.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0035-02.png)'
- en: '**A class is a *blueprint* for an object**. It tells the virtual machine *how*
    to make an object of that particular type. Each object made from that class can
    have its own values for the instance variables of that class. For example, you
    might use the Button class to make dozens of different buttons, and each button
    might have its own color, size, shape, label, and so on. Each one of these different
    buttons would be a button *object*.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**类是对象的*蓝图***。它告诉虚拟机*如何*创建该特定类型的对象。从该类创建的每个对象可以具有自己的实例变量值。例如，您可以使用Button类制作多个不同的按钮，每个按钮可能具有自己的颜色、大小、形状、标签等。这些不同的按钮中的每一个都将是一个按钮*对象*。'
- en: Making your first object
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作你的第一个对象
- en: 'So what does it take to create and use an object? You need *two* classes. One
    class for the type of object you want to use (Dog, AlarmClock, Television, etc.)
    and another class to *test* your new class. The *tester* class is where you put
    the main method, and in that main() method you create and access objects of your
    new class type. The tester class has only one job: to *try out* the methods and
    variables of your new object.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 那么创建和使用对象需要什么？你需要*两个*类。一个类用于你想要使用的对象类型（狗、闹钟、电视等），另一个类用于*测试*你的新类。*测试器*类是你放置main方法的地方，在main()方法中，你创建和访问你的新类类型的对象。测试器类只有一个任务：尝试你的新对象的方法和变量。
- en: From this point forward in the book, you’ll see two classes in many of our examples.
    One will be the *real* class—the class whose objects we really want to use, and
    the other class will be the *tester* class, which we call *<WhateverYourClassNameIs>*
    `**TestDrive**`. For example, if we make a `**Bungee**` class, we’ll need a `**BungeeTestDrive**`
    class as well. Only the *<SomeClassName>*`**TestDrive**` class will have a main()
    method, and its sole purpose is to create objects of your new class (the not-the-tester
    class), and then use the dot operator (.) to access the methods and variables
    of the new objects. This will all be made stunningly clear by the following examples.
    No, *really.*
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的这一点开始，你将在许多示例中看到两个类。其中一个将是*真正*的类——我们真正想要使用其对象的类，另一个类将是*测试器*类，我们称之为*<WhateverYourClassNameIs>*
    `**TestDrive**`。例如，如果我们创建了一个`**Bungee**`类，我们也需要一个`**BungeeTestDrive**`类。只有*<SomeClassName>*
    `**TestDrive**`类会有一个main()方法，它的唯一目的是创建你的新类（非测试器类）的对象，并使用点运算符（.）访问新对象的方法和变量。以下示例将清楚地展示这一切。不，*真的*。
- en: '![image](Images/f0036-01.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0036-01.png)'
- en: If you already have some OO savvy, you’ll know we’re not using encapsulation.
    We’ll get there in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance),
    How Objects Behave.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经掌握了一些面向对象的知识，你会知道我们没有使用封装。我们将在[第四章](ch04.xhtml#how_objects_behave_methods_use_instance)《对象的行为》中讨论这一点。
- en: Making and testing Movie objects
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作和测试电影对象
- en: '![image](Images/f0037-01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0037-01.png)'
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Quick! Get out of main!
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快！离开主方法！
- en: As long as you’re in main(), you’re not really in Objectville. It’s fine for
    a test program to run within the main method, but in a true OO application, you
    need objects talking to other objects, as opposed to a static main() method creating
    and testing objects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你在main()方法中，你就不是真正的Objectville。测试程序在main方法中运行是可以的，但在真正的面向对象应用程序中，你需要对象之间的交互，而不是一个静态的main()方法创建和测试对象。
- en: 'The two uses of main:'
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: main方法的两种用途：
- en: to **test** your real class
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了**测试**你的真实类
- en: to **launch/start** your **Java application**
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以**启动/开始**你的**Java应用程序**
- en: A real Java application is nothing but objects talking to other objects. In
    this case, *talking* means objects calling methods on one another. On the previous
    page, and in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance),
    *How Objects Behave*, we look at using a main() method from a separate TestDrive
    class to create and test the methods and variables of another class. In [Chapter 6](ch06.xhtml#using_the_java_library_get_to_know_the_j),
    *Using the Java Library*, we look at using a class with a main() method to start
    the ball rolling on a *real* Java application (by making objects and then turning
    those objects loose to interact with other objects, etc.)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的Java应用程序只是对象与其他对象的交流。在这种情况下，“交流”意味着对象相互调用方法。在前一页和[第4章](ch04.xhtml#how_objects_behave_methods_use_instance)中，我们讨论了如何使用一个独立的TestDrive类中的main()方法来创建和测试另一个类的方法和变量。在[第6章](ch06.xhtml#using_the_java_library_get_to_know_the_j)中，我们讨论了如何使用一个带有main()方法的类来启动一个*真正的*Java应用程序（通过创建对象，然后释放这些对象与其他对象交互等）。
- en: As a “sneak preview,” though, of how a real Java application might behave, here’s
    a little example. Because we’re still at the earliest stages of learning Java,
    we’re working with a small toolkit, so you’ll find this program a little clunky
    and inefficient. You might want to think about what you could do to improve it,
    and in later chapters that’s exactly what we’ll do. Don’t worry if some of the
    code is confusing; the key point of this example is that objects talk to objects.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个“窥视”，这是一个真正的Java应用程序可能的行为示例。因为我们仍然处于学习Java的最初阶段，所以我们使用了一个小工具包，因此你可能会觉得这个程序有些笨拙和低效。你可以考虑如何改进它，在后面的章节中我们会具体讨论这个问题。如果有些代码让你感到困惑，不要担心；这个示例的关键是对象之间的交互。
- en: The Guessing Game
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 猜谜游戏
- en: '**Summary:**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结：**'
- en: The Guessing Game involves a game object and three player objects. The game
    generates a random number between 0 and 9, and the three player objects try to
    guess it. (We didn’t say it was a really *exciting* game.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 猜谜游戏包括一个游戏对象和三个玩家对象。游戏生成一个介于0和9之间的随机数，三个玩家对象尝试猜测它。（我们并没有说这是一个非常*激动人心*的游戏。）
- en: '**Classes:**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**类：**'
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**The Logic:**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**逻辑：**'
- en: 1\. The GameLauncher class is where the application starts; it has the main()
    method.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. GameLauncher类是应用程序启动的地方；它有main()方法。
- en: 2\. In the main() method, a GuessGame object is created, and its startGame()
    method is called.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 在main()方法中创建了一个GuessGame对象，并调用了它的startGame()方法。
- en: 3\. The GuessGame object’s startGame() method is where the entire game plays
    out. It creates three players and then “thinks” of a random number (the target
    for the players to guess). It then asks each player to guess, checks the result,
    and either prints out information about the winning player(s) or asks them to
    guess again.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. GuessGame对象的startGame()方法是整个游戏进行的地方。它创建三个玩家，然后“想出”一个随机数（玩家要猜测的目标）。然后它要求每个玩家猜测，检查结果，并打印出关于获胜玩家的信息或要求他们再次猜测。
- en: '![image](Images/f0038-01.png)![image](Images/f0039-01.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0038-01.png)![image](Images/f0039-01.png)'
- en: Running the Guessing Game
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行猜谜游戏
- en: '**Output (it will be different each time you run it)**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出（每次运行时都会有所不同）**'
- en: '![image](Images/f0040-02.png)![image](Images/f0041-01.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0040-02.png)![image](Images/f0041-01.png)'
- en: Exercise
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '![image](Images/common-03.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-03.png)'
- en: BE the Compiler
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为编译器
- en: '![image](Images/common-05.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-05.png)'
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile.
    If they won’t compile, how would you fix them, and if they do compile, what would
    be their output?**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**这一页上的每个Java文件都代表一个完整的源文件。你的任务是扮演编译器，确定这些文件是否会编译通过。如果它们不能编译，你会如何修复它们？如果可以编译，它们的输出会是什么？**'
- en: '**A**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**B**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Images](Images/arr1.png) **Answers in [“BE the Compiler”](#be_the_compiler_left_parenthesisfro-3000).**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案见[“BE the Compiler”](#be_the_compiler_left_parenthesisfro-3000)。**'
- en: Code Magnets
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: '![image](Images/common-02.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-02.png)'
- en: A Java program is all scrambled up on the fridge. Can you reconstruct the code
    snippets to make a working Java program that produces the output listed below?
    Some of the curly braces fell on the floor and they were too small to pick up,
    so feel free to add as many of those as you need.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Java 程序在冰箱上被弄得一团糟。你能重组代码片段，使其成为一个可以编译和运行，并且产生下面列出的输出的工作 Java 程序吗？一些花括号掉到了地板上，它们太小了，没法捡起来，所以你可以自由地添加需要的花括号。
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_4).**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案见 [“代码磁铁”](#code_magnets_left_parenthesisfrom_page_4).**'
- en: '![image](Images/f0043-01a.png)![image](Images/f0043-01.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0043-01a.png)![image](Images/f0043-01.png)'
- en: Pool Puzzle
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池子谜题
- en: '![image](Images/common-04.png)![image](Images/common-06.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)![image](Images/common-06.png)'
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You **may** use the same snippet more than once, and
    you won’t need to use all the snippets. Your ***goal*** is to make classes that
    will compile and run and produce the output listed below. Some of the exercises
    and puzzles in this book might have more than one correct answer. If you find
    another correct answer, give yourself bonus points!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 ***任务*** 是从池中取出代码片段，放置到代码的空白行中。你**可以**多次使用同一个片段，并且不需要使用所有的片段。你的 ***目标***
    是创建能够编译和运行，并且产生下面列出的输出的类。本书中的一些练习和谜题可能有多个正确答案。如果你找到了另一个正确答案，请给自己加分！
- en: '**Output**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '![image](Images/f0044-01.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0044-01.png)'
- en: '**Bonus Question !**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励问题！**'
- en: If the last line of output was **24** instead of **10**, how would you complete
    the puzzle?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出的最后一行是 **24** 而不是 **10**，你将如何完成这个谜题？
- en: '![image](Images/f0044-02.png)![image](Images/f0044-03.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0044-02.png)![image](Images/f0044-03.png)'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note: Each snippet from the pool can be used more than once!**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**注：可以多次使用池中的每个片段！**'
- en: '![image](Images/f0044-04.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0044-04.png)'
- en: '![Images](Images/arr1.png) **Answers in [“Puzzle Solutions”](#puzzle_solutions-id5000).**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案见 [“谜题解决方案”](#puzzle_solutions-id5000).**'
- en: '![image](Images/common-04.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)'
- en: Who Am I?
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是谁？
- en: '![image](Images/f0045-01.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0045-01.png)'
- en: A bunch of Java components, in full costume, are playing a party game, “Who
    am I?” They give you a clue, and you try to guess who they are, based on what
    they say. Assume they always tell the truth about themselves. If they happen to
    say something that could be true for more than one of them, choose all for whom
    that sentence can apply. Fill in the blanks next to the sentence with the names
    of one or more attendees. The first one’s on us.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一群穿着全副武装的 Java 组件正在玩一个派对游戏，“我是谁？”他们给你一个线索，你根据他们说的话猜猜他们是谁。假设他们总是诚实地说出自己的情况。如果他们碰巧说的话对多个人都适用，你可以选择所有适用于这句话的人。在句子旁边的空白处填上一个或多个与句子相对应的名字。第一个给你提示了。
- en: '**Tonight’s attendees:**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**今晚的参与者：**'
- en: '**Class Method Object Instance variable**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**类 方法 对象 实例变量**'
- en: '| **I am compiled from a .java file.** | **class** |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **我是从 .java 文件编译而来。** | **class** |'
- en: '| **My instance variable values can be different from my buddy’s values.**
    | ________________________________ |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **我的实例变量值可以与我的朋友的值不同。** | ________________________________ |'
- en: '| **I behave like a template.** | ________________________________ |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **我像一个模板一样表现。** | ________________________________ |'
- en: '| **I like to do stuff.** | ________________________________ |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| **我喜欢做事情。** | ________________________________ |'
- en: '| **I can have many methods.** | ________________________________ |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **我可以有很多方法。** | ________________________________ |'
- en: '| **I represent “state.”** | ________________________________ |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **我代表“状态”。** | ________________________________ |'
- en: '| **I have behaviors.** | ________________________________ |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **我有行为。** | ________________________________ |'
- en: '| **I am located in objects.** | ________________________________ |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| **我位于对象中。** | ________________________________ |'
- en: '| **I live on the heap.** | ________________________________ |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **我存在于堆上。** | ________________________________ |'
- en: '| **I am used to create object instances.** | ________________________________
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| **我用来创建对象实例。** | ________________________________ |'
- en: '| **My state can change.** | ________________________________ |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| **我的状态可以改变。** | ________________________________ |'
- en: '| **I declare methods.** | ________________________________ |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **我声明方法。** | ________________________________ |'
- en: '| **I can change at runtime.** | ________________________________ |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **我可以在运行时改变。** | ________________________________ |'
- en: '![Images](Images/arr1.png) **Answers in [“Who Am I?”](#who_am_iquestion_mark_left_parenthes-100).**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案见 [“我是谁？”](#who_am_iquestion_mark_left_parenthes-100).**'
- en: Exercise Solutions
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解决方案
- en: '![image](Images/common-03.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-03.png)'
- en: Code Magnets
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: (from [“Code Magnets”](#code_magnets))
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“代码磁铁”](#code_magnets))
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![image](Images/f0046-01.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0046-01.png)'
- en: BE the Compiler
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为编译器
- en: (from [“BE the Compiler”](#be_the_compiler))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“成为编译器”](#be_the_compiler))
- en: '**A**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '![image](Images/f0046-02.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0046-02.png)'
- en: '**B**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '![image](Images/f0046-03.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0046-03.png)'
- en: Puzzle Solutions
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拼图解答
- en: '![image](Images/common-04.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: Pool Puzzle
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游泳池谜题
- en: (from [“Pool Puzzle”](#pool_puzzle))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“游泳池谜题”](#pool_puzzle))
- en: '[PRE8]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![image](Images/f0047-01.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0047-01.png)'
- en: Who Am I?
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是谁？
- en: (from [“Who Am I?”](#who_am_iquestion_mark))
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“我是谁？”](#who_am_iquestion_mark))
- en: '| **I am compiled from a .java file.** | class |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| **我从 .java 文件编译而来。** | 类 |'
- en: '| **My instance variable values can be different from my buddy’s values.**
    | object |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **我的实例变量值可以与我的伙伴的值不同。** | 对象 |'
- en: '| **I behave like a template.** | class |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| **我表现为模板。** | 类 |'
- en: '| **I like to do stuff.** | object, method |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| **我喜欢做事情。** | 对象，方法 |'
- en: '| **I can have many methods.** | class, object |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| **我可以有很多方法。** | 类，对象 |'
- en: '| **I represent “state.”** | instance variable |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| **我代表“状态”。** | 实例变量 |'
- en: '| **I have behaviors.** | object, class |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **我有行为。** | 对象，类 |'
- en: '| **I am located in objects.** | method, instance variable |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| **我位于对象中。** | 方法，实例变量 |'
- en: '| **I live on the heap.** | object |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **我存在于堆中。** | 对象 |'
- en: '| **I am used to create object instances.** | class |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| **我用于创建对象实例。** | 类 |'
- en: '| **My state can change.** | object, instance variable |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| **我的状态可以改变。** | 对象，实例变量 |'
- en: '| **I declare methods.** | class |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| **我声明方法。** | 类 |'
- en: '| **I can change at runtime.** | object, instance variable |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| **我可以在运行时改变。** | 对象，实例变量 |'
- en: Note
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: both classes and objects are said to have state and behavior. They’re
    defined in the class, but the object is also said to “have” them. Right now, we
    don’t care where they technically live.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：类和对象都被认为有状态和行为。它们在类中定义，但是对象也被认为“拥有”它们。现在我们不关心它们技术上属于哪里。
