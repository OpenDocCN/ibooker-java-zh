- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: When O’Reilly first approached me about writing a book on Java performance tuning,
    I was unsure. Java performance, I thought—aren’t we done with that? Yes, I still
    work on improving the performance of Java (and other) applications on a daily
    basis, but I like to think that I spend most of my time dealing with algorithmic
    inefficiencies and external system bottlenecks rather than on anything directly
    related to Java tuning.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当O'Reilly首次找我写一本关于Java性能调优的书时，我有些犹豫。我想，Java性能调优？这不是早就完成了吗？是的，我仍然每天都在努力改进Java（以及其他）应用程序的性能，但我更愿意认为，我大部分时间都在处理算法效率低下和外部系统瓶颈，而不是直接与Java调优相关的内容。
- en: A moment’s reflection convinced me that I was (as usual) kidding myself. It
    is certainly true that end-to-end system performance takes up a lot of my time,
    and that I sometimes come across code that uses an <math alttext="upper O left-parenthesis
    n squared right-parenthesis"><mrow><mi>O</mi> <mo>(</mo> <msup><mrow><mi>n</mi></mrow>
    <mn>2</mn></msup> <mo>)</mo></mrow></math> algorithm when it could use one with
    *O(logN)* performance. Still, it turns out that every day I think about garbage
    collection (GC) performance, or the performance of the JVM compiler, or how to
    get the best performance from Java APIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一瞬间的反思让我确信，我又一次在自欺欺人。无疑，整体系统性能占据了我大部分时间，有时我会遇到使用**O(n^2)** 算法而本可以使用*O(logN)*
    性能的代码。尽管如此，事实证明，每天我都会思考垃圾收集（GC）性能，或者JVM编译器的性能，或者如何从Java APIs中获得最佳性能。
- en: That is not to minimize the enormous progress that has been made in the performance
    of Java and JVMs over the past 20-plus years. When I was a Java evangelist at
    Sun during the late 1990s, the only real “benchmark” available was CaffeineMark
    2.0 from Pendragon software. For a variety of reasons, the design of that benchmark
    quickly limited its value; yet in its day, we were fond of telling everyone that
    Java 1.1.8 performance was eight times faster than Java 1.0 performance based
    on that benchmark. And that was true—Java 1.1.8 had an actual just-in-time compiler,
    whereas Java 1.0 was pretty much completely interpreted.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是为了贬低过去20多年来在Java和JVM性能方面取得的巨大进展。当我在上世纪90年代末担任Sun的Java传道士时，唯一真正的“基准测试”是来自Pendragon软件的CaffeineMark
    2.0。由于各种原因，那个基准测试的设计很快就限制了其价值；然而在当时，我们喜欢告诉大家，基于那个基准测试，Java 1.1.8的性能比Java 1.0的性能快了八倍。而这是真实的——Java
    1.1.8拥有一个真正的即时编译器，而Java 1.0基本完全是解释执行的。
- en: Then standards committees began to develop more rigorous benchmarks, and Java
    performance began to be centered around them. The result was a continuous improvement
    in all areas of the JVM—garbage collection, compilations, and within the APIs.
    That process continues today, of course, but one of the interesting facts about
    performance work is that it gets successively harder. Achieving an eightfold increase
    in performance by introducing a just-in-time compiler was a straightforward matter
    of engineering, and even though the compiler continues to improve, we’re not going
    to see an improvement like that again. Parallelizing the garbage collector was
    a huge performance improvement, but more recent changes have been more incremental.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，标准委员会开始制定更严格的基准测试，Java性能开始围绕这些测试展开。结果是JVM的所有领域——垃圾收集、编译和API内部——都在持续改进。当然，这个过程至今仍在进行中，但关于性能工作的一个有趣事实是，它变得越来越困难。通过引入即时编译器实现性能增长八倍是一件直截了当的工程问题，尽管编译器继续改进，但我们不会再见到类似的改进了。并行化垃圾收集器是一个巨大的性能改进，但近年来的变化更多地是渐进的。
- en: 'This is a typical process for applications (and the JVM itself is just another
    application): in the beginning of a project, it’s easy enough to find architectural
    changes (or code bugs) that, when addressed, yield huge performance improvements.
    In a mature application, finding such performance improvements is rare.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的典型过程（而JVM本身只是另一个应用程序）：在项目开始阶段，很容易找到可以带来巨大性能改进的架构变更（或代码缺陷）。在成熟的应用程序中，找到这样的性能改进是很少见的。
- en: That precept was behind my original concern that, to a large extent, the engineering
    world might be done with Java performance. A few things convinced me I was wrong.
    First is the number of questions I see daily about how this or that aspect of
    the JVM performs under certain circumstances. New engineers come to Java all the
    time, and JVM behavior remains complex enough in certain areas that a guide to
    its operation is still beneficial. Second is that environmental changes in computing
    seem to have altered the performance concerns that engineers face today.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则是我最初关心的基础，很大程度上，工程界可能已经完成了关于Java性能的讨论。有几件事让我改变了看法。首先是我每天看到关于JVM在特定情况下的表现如何的问题数量。新工程师们一直在学习Java，并且在某些领域，JVM的行为仍然足够复杂，因此操作指南仍然有益。其次是计算环境的变化似乎改变了工程师们今天面临的性能问题。
- en: 'Over the past few years, performance concerns have become bifurcated. On the
    one hand, very large machines capable of running JVMs with very large heaps are
    now commonplace. The JVM has moved to address those concerns with a new garbage
    collector (G1), which—as a new technology—requires a little more hand-tuning than
    traditional collectors. At the same time, cloud computing has renewed the importance
    of small, single-CPU machines: you can go to Oracle or Amazon or a host of other
    companies and cheaply rent a single CPU machine to run a small application server.
    (You’re not actually getting a single-CPU machine: you’re getting a virtual OS
    image on a very large machine, but the virtual OS is limited to using a single
    CPU. From the perspective of Java, that turns out to be the same as a single-CPU
    machine.) In those environments, correctly managing small amounts of memory turns
    out to be quite important.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年来，性能问题已经变得复杂多样。一方面，现在很普遍使用能够运行具有非常大堆内存的JVM的超大机器。JVM已经采取措施来解决这些问题，引入了新的垃圾收集器（G1），作为一种新技术，需要比传统的收集器更多的手动调优。与此同时，云计算重新强调了小型、单CPU机器的重要性：你可以去Oracle、Amazon或其他许多公司，廉价租用一个单CPU机器来运行小型应用服务器。（实际上你并没有获得一个单CPU机器：你得到的是一个虚拟操作系统镜像在一个非常大的机器上运行，但虚拟操作系统限制了使用单CPU。从Java的角度来看，这与单CPU机器是相同的。）在这些环境中，正确管理少量内存变得非常重要。
- en: 'The Java platform also continues to evolve. Each new edition of Java provides
    new language features and new APIs that improve the productivity of developers—if
    not always the performance of their applications. Best practice use of these language
    features can help differentiate between an application that sizzles and one that
    plods along. And the evolution of the platform brings up interesting performance
    questions: there is no question that using JSON to exchange information between
    two programs is much simpler than coming up with a highly optimized proprietary
    protocol. Saving time for developers is a big win—but making sure that productivity
    win comes with a performance win (or at least breaks even) is the real goal.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台也在不断发展。每个新版Java都提供新的语言特性和新的API，以提高开发者的生产力——尽管不总是提高应用程序的性能。合理使用这些语言特性的最佳实践可以帮助区分一个优秀的应用程序和一个平庸的应用程序。平台的演进也带来了有趣的性能问题：使用JSON在两个程序之间交换信息要比设计高度优化的专有协议简单得多。为开发者节省时间是一个重大的胜利——但确保这种生产力的提升伴随着性能的提升（或至少不下降）才是真正的目标。
- en: Who Should (and Shouldn’t) Read This Book
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该（和不应该）阅读本书
- en: This book is designed for performance engineers and developers who are looking
    to understand how various aspects of the JVM and the Java APIs impact performance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助性能工程师和开发人员了解JVM和Java API各方面对性能的影响。
- en: If it is late Sunday night, your site is going live Monday morning, and you’re
    looking for a quick fix for performance issues, this is not the book for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在是星期天深夜，你的网站将在星期一上线，而你正在寻找快速解决性能问题的方法，那这本书不适合你。
- en: If you are new to performance analysis and are starting that analysis in Java,
    this book can help you. Certainly my goal is to provide enough information and
    context that novice engineers can understand how to apply basic tuning and performance
    principles to a Java application. However, system analysis is a broad field. There
    are a number of excellent resources for system analysis in general (and those
    principles, of course, apply to Java), and in that sense, this book will ideally
    be a useful companion to those texts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是性能分析新手，并在 Java 中开始分析，本书可以帮助您。当然，我的目标是提供足够的信息和背景，使初学者工程师能够理解如何将基本的调优和性能原则应用于
    Java 应用程序。然而，系统分析是一个广泛的领域。有许多关于系统分析的优秀资源（当然，这些原则也适用于 Java），从这个意义上讲，本书理想情况下将是这些文本的有用伴侣。
- en: At a fundamental level, though, making Java go really fast requires a deep understanding
    of how the JVM (and Java APIs) actually work. Hundreds of Java tuning flags exist,
    and tuning the JVM has to be more than an approach of blindly trying them and
    seeing what works. Instead, my goal is to provide detailed knowledge about what
    the JVM and APIs are doing, with the hope that if you understand how those things
    work, you’ll be able to look at the specific behavior of an application and understand
    *why* it is performing badly. Understanding that, it becomes a simple (or at least
    simpler) task to get rid of undesirable (badly performing) behavior.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在根本层面上，使 Java 运行速度真正快需要深入理解 JVM（和 Java API）的实际工作方式。存在数百个 Java 调优标志，并且调优 JVM
    不应该只是盲目尝试它们并查看哪个有效。相反，我的目标是提供关于 JVM 和 API 正在做什么的详细知识，希望如果你理解了这些东西是如何工作的，你就能够查看应用程序的具体行为并理解为什么它表现糟糕。理解了这一点，消除不良（性能不佳）行为变得简单（或者至少更简单）起来。
- en: One interesting aspect to Java performance work is that developers often have
    a very different background than engineers in a performance or QA group. I know
    developers who can remember thousands of obscure method signatures on little-used
    Java APIs but who have no idea what the flag `-Xmn` means. And I know testing
    engineers who can get every last ounce of performance from setting various flags
    for the garbage collector but who can barely write a suitable “Hello, World” program
    in Java.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Java 性能工作的一个有趣方面是，开发人员通常与性能或质量保证组的工程师背景大不相同。我知道有些开发人员可以记住成千上万个不常用的 Java API
    方法签名，但却不知道 `-Xmn` 标志的含义。我也知道测试工程师可以通过设置垃圾收集器的各种标志来获得最后一丝性能，但是在 Java 中几乎无法编写一个合适的“Hello,
    World”程序。
- en: 'Java performance covers both of these areas: tuning flags for the compiler
    and garbage collector and so on, and best-practice uses of the APIs. So I assume
    that you have a good understanding of how to write programs in Java. Even if your
    primary interest is not in the programming aspects of Java, I do spend a fair
    amount of time discussing programs, including the sample programs used to provide
    a lot of the data points in the examples.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java 的性能涵盖了这两个方面：调优编译器和垃圾收集器等标志，以及最佳实践中 API 的使用。因此，我假设你已经很好地理解了如何在 Java 中编写程序。即使你的主要兴趣不在
    Java 的编程方面，我也花了大量时间讨论程序，包括用于示例中许多数据点的示例程序。
- en: Still, if your primary interest is in the performance of the JVM itself—meaning
    how to alter the behavior of the JVM without any coding—then large sections of
    this book should still be beneficial to you. Feel free to skip over the coding
    parts and focus on the areas that interest you. And maybe along the way, you’ll
    pick up some insight into how Java applications can affect JVM performance and
    start to suggest changes to developers so they can make your performance-testing
    life easier.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果你主要关注的是 JVM 本身的性能——即如何在不进行任何编码的情况下改变 JVM 的行为——那么本书的大部分内容仍然对你有益。请随意跳过编码部分，专注于你感兴趣的领域。也许在这个过程中，你会对
    Java 应用程序如何影响 JVM 性能有所了解，并开始建议开发人员进行更改，以便让你的性能测试工作更轻松。
- en: What’s New in the Second Edition
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二版的新内容
- en: Since the first edition, Java has adopted a six-month release cycle with periodic
    long-term releases; that means the current supported releases that coincide with
    publication are Java 8 and Java 11\. Although the first edition covered Java 8,
    it was quite new at the time. This edition focuses on a much more mature Java
    8 and Java 11, with major updates to the G1 garbage collector and Java Flight
    Recorder. Attention is also given to changes in the way Java behaves in containerized
    environments.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自第一版以来，Java采用了每六个月发布一次的周期，定期进行长期支持发布；这意味着与出版同时支持的当前版本是Java 8和Java 11。虽然第一版覆盖了Java
    8，在当时还是非常新的。本版侧重于更加成熟的Java 8和Java 11，重点更新了G1垃圾收集器和Java Flight Recorder。还关注Java在容器化环境中行为变化的变化。
- en: This edition covers new features of the Java platform, including a new microbenchmarking
    harness (`jmh`), new just-in-time compilers, application class data sharing, and
    new performance tools—as well as coverage of new Java 11 features like compact
    strings and string concatenation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本版涵盖了Java平台的新功能，包括新的微基准测试工具（`jmh`）、新的即时编译器、应用程序类数据共享和新的性能工具，以及对Java 11新功能（如紧凑字符串和字符串连接）的覆盖。
- en: Conventions Used in This Book
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了以下排版约定：
- en: '*Italic*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、URL、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`固定宽度`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及在段落内引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**`固定宽度粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*`固定宽度斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应替换为用户提供的值或由上下文确定的值的文本。
- en: This element signifies a summary of main points.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示主要点的摘要。
- en: Using Code Examples
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/ScottOaks/JavaPerformanceTuning*](https://github.com/ScottOaks/JavaPerformanceTuning).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 补充材料（代码示例、练习等）可从[*https://github.com/ScottOaks/JavaPerformanceTuning*](https://github.com/ScottOaks/JavaPerformanceTuning)下载。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。通常情况下，如果本书提供示例代码，您可以在您的程序和文档中使用它。除非您复制了代码的大部分，否则无需联系我们以获得许可。例如，编写使用本书中几个代码片段的程序不需要许可。出售或分发O’Reilly书籍的示例代码需要许可。通过引用本书并引用示例代码回答问题不需要许可。将本书大量示例代码整合到产品文档中需要许可。
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Java Performance* by Scott
    Oaks (O’Reilly). Copyright 2020 Scott Oaks, 978-1-492-05611-9.”'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢，但不要求归属。归属通常包括标题、作者、出版商和ISBN。例如：“*Java性能* by Scott Oaks (O’Reilly)。版权2020
    Scott Oaks，978-1-492-05611-9。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*http://oreilly.com*](http://oreilly.com).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得您使用的代码示例超出了合理使用范围或上述许可，请随时通过[*http://oreilly.com*](http://oreilly.com)与我们联系。
- en: O’Reilly Online Learning
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly在线学习
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 超过40年来，[*O’Reilly Media*](http://oreilly.com)提供技术和商业培训、知识和洞察力，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章、会议和我们的在线学习平台分享他们的知识和专业知识。O’Reilly的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境以及来自O’Reilly和其他200多家出版商的大量文本和视频。欲了解更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本书的评论和问题，请联系出版商：
- en: O’Reilly Media, Inc.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gravenstein Highway North 1005
- en: Sebastopol, CA 95472
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA 95472, Sebastopol
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/java-performance-2e*](https://oreil.ly/java-performance-2e).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设立了一个网页，列出了勘误、示例和任何额外信息。您可以访问此页面：[*https://oreil.ly/java-performance-2e*](https://oreil.ly/java-performance-2e)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) 发表评论或提出关于本书的技术问题。
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 获取有关我们的书籍、课程、会议和新闻的更多信息，请访问我们的网站[*http://www.oreilly.com*](http://www.oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I would like to thank everyone who helped me as I worked on this book. In many
    ways, this book is an accumulation of knowledge gained over my past 20 years in
    the Java Performance Group and other engineering groups at Sun Microsystems and
    Oracle, so the list of people who have provided positive input into this book
    is quite broad. To all the engineers I have worked with during that time, and
    particularly to those who patiently answered my random questions over the past
    year, thank you!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢在我写作这本书的过程中帮助过我的每一个人。在很多方面，这本书积累了我在Java性能组及其他Sun Microsystems和Oracle工程组工作的20年知识，因此提供积极反馈的人员名单相当广泛。感谢在这段时间内与我合作的所有工程师，特别是那些耐心回答我随机问题的人，谢谢你们！
- en: I would especially like to thank Stanley Guan, Azeem Jiva, Kim LiChong, Deep
    Singh, Martijn Verburg, and Edward Yue Shung Wong for their time reviewing draft
    copies and providing valuable feedback. I am sure that they were unable to find
    all my errors, though the material here is greatly improved by their input. The
    second edition was improved greatly by the thorough and thoughtful help offered
    by Ben Evans, Rod Hilton, and Michael Hunger. My colleagues Eric Caspole, Charlie
    Hunt, and Robert Strout in the Oracle HotSpot performance group patiently helped
    me with a variety of issues in the second edition as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我特别要感谢Stanley Guan、Azeem Jiva、Kim LiChong、Deep Singh、Martijn Verburg和Edward
    Yue Shung Wong，他们花时间审阅草稿并提供宝贵的反馈。尽管这里的材料得到了他们的帮助而显著改进，但我确信他们无法找出所有我的错误。第二版得到了Ben
    Evans、Rod Hilton和Michael Hunger全面和周到的帮助，极大地改进了这本书。我的同事Eric Caspole、Charlie Hunt和Robert
    Strout在Oracle HotSpot性能组中耐心地帮助我解决了各种问题。
- en: The production staff at O’Reilly was, as always, very helpful. I was privileged
    to work with editor Meg Blanchette on the first edition, and Amelia Blevins thoughtfully
    and carefully guided the second edition. Thanks for all your encouragement during
    the process! Finally, I must thank my husband, James, for putting up with the
    long nights and those weekend dinners where I was in a continual state of distraction.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 O’Reilly 的制作人员一如既往地非常乐于助人。我很荣幸能与编辑 Meg Blanchette 共同完成第一版，而 Amelia Blevins
    则细致而仔细地指导了第二版。在整个过程中，感谢你们的鼓励！最后，我必须感谢我的丈夫 James，忍受了漫长的夜晚以及那些周末晚餐，而我总是心不在焉。
