- en: Chapter 5\. Browser-Specific Manipulation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章\. 浏览器特定操作
- en: As you have seen so far, many features of the Selenium WebDriver API are compatible
    across browsers, i.e., we can use Selenium WebDriver to control different types
    of browsers programmatically. Other parts of the Selenium WebDriver API are not
    interoperable among browsers. In other words, there are some WebDriver characteristics
    available for some browsers (e.g., Chrome or Edge) that are unavailable (or different)
    for others (e.g., Firefox). This chapter reviews these browser-specific features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，Selenium WebDriver API的许多特性在各种浏览器中是兼容的，即我们可以使用Selenium WebDriver以编程方式控制不同类型的浏览器。Selenium
    WebDriver API的其他部分在浏览器之间是不可互操作的。换句话说，一些WebDriver特性对于某些浏览器（如Chrome或Edge）是可用的，而对于其他浏览器（如Firefox）则不可用（或不同）。本章回顾了这些特定于浏览器的特性。
- en: Browser Capabilities
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器Capabilities
- en: Selenium WebDriver allows specifying browser-specific aspects by using *capabilities*.
    Examples of capabilities are headless mode, page loading strategies, use of web
    extensions, or push notifications management, among many others. As [Figure 5-1](#capabilities-hierarchy)
    shows, the Selenium WebDriver API provides a set of Java classes to define these
    capabilities. The `Capabilities` interface is at the top of this hierarchy. Internally,
    the capabilities interface handles data using key-value pairs that encapsulate
    specific aspects of a browser. Then, different Java classes implement this interface
    to specify capabilities for web browsers (Chrome, Edge, Firefox, etc.). [Table 5-1](#capabilities-hierarchy-description)
    summarizes the main classes of the `Capabilities` hierarchy and their corresponding
    target browsers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 允许通过*capabilities*来指定特定于浏览器的方面。例如，无头模式、页面加载策略、使用网页扩展或推送通知管理等功能。正如[图 5-1](#capabilities-hierarchy)所示，Selenium
    WebDriver API 提供了一组Java类来定义这些capabilities。`Capabilities`接口位于这个层次结构的顶部。在内部，capabilities接口使用键-值对处理数据，封装浏览器的特定方面。然后，不同的Java类实现此接口，为Web浏览器（如Chrome、Edge、Firefox等）指定capabilities。[表 5-1](#capabilities-hierarchy-description)总结了`Capabilities`层次结构的主要类及其对应的目标浏览器。
- en: '![hosw 0501](assets/hosw_0501.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0501](assets/hosw_0501.png)'
- en: Figure 5-1\. Capabilities hierarchy
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. Capabilities层次结构
- en: Table 5-1\. Description of the Capabilities hierarchy
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-1\. Capabilities层次结构描述
- en: '| Package | Class | Browser |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 类 | 浏览器 |'
- en: '| --- | --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Generic (cross-browser) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 通用（跨浏览器） |'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| Chrome |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| Chrome |'
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Edge |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Edge |'
- en: '|'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Firefox |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Firefox |'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| Safari |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Safari |'
- en: '|'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| Opera |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| Opera |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| Internet Explorer |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Internet Explorer |'
- en: '|'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| Remote browsers (see [Chapter 6](ch06.html#ch06)) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 远程浏览器（参见[第6章](ch06.html#ch06)） |'
- en: The following subsections review the most relevant capabilities for the major
    web browsers discussed in this book, i.e., Chrome, Edge, and Firefox. As Chrome
    and Edge are both Chromium-based browsers, the capabilities available for both
    browsers are equivalent. This fact is reflected in [Figure 5-1](#capabilities-hierarchy),
    showing that capability classes `ChromeOptions` and `EdgeOptions` both inherit
    from the same parent (called `ChromiumOptions`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节将回顾本书讨论的主要Web浏览器（如Chrome、Edge和Firefox）的最重要capabilities。由于Chrome和Edge都是基于Chromium的浏览器，因此两者可用的capabilities是等效的。这一事实反映在[图 5-1](#capabilities-hierarchy)中，显示了`ChromeOptions`和`EdgeOptions`这两个capability类都继承自同一个父类（称为`ChromiumOptions`）。
- en: Headless Browser
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无头浏览器
- en: Browsers that do not require a GUI to interact with web applications are known
    as *headless* browsers. One of the primary uses of these browsers is end-to-end
    testing, i.e., automated interaction with web applications. Current web browsers
    such as Chrome, Edge, or Firefox can operate as headless browsers. The Selenium
    WebDriver API allows starting these browsers in headless mode using capabilities.
    To that aim, first, you need to create an instance of the browser capabilities.
    In the major browsers, these objects are instances of `ChromeOptions`, `EdgeOptions`,
    or `FirefoxOptions`, respectively. Then, you need to enable the headless mode
    by invoking the method `setHeadless(true)` in the browser capabilities object.
    Finally, you need to set these capabilities when creating a `WebDriver` object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要图形界面与 Web 应用程序进行交互的浏览器称为 *无头* 浏览器。这些浏览器的主要用途之一是端到端测试，即自动化与 Web 应用程序的交互。目前的
    Web 浏览器如 Chrome、Edge 或 Firefox 都可以作为无头浏览器运行。Selenium WebDriver API 允许使用能力（capabilities）在无头模式下启动这些浏览器。为此，首先需要创建一个浏览器能力（capabilities）的实例。在主要浏览器中，这些对象分别是
    `ChromeOptions`、`EdgeOptions` 或 `FirefoxOptions` 的实例。然后，通过调用浏览器能力对象中的 `setHeadless(true)`
    方法来启用无头模式。最后，在创建 `WebDriver` 对象时设置这些能力。
- en: 'As [“WebDriver Creation”](ch03.html#webdriver-creation) explained, we have
    different ways to create `WebDriver` objects. First, we can use a `WebDriver`
    constructor (e.g., `new ChromeDriver()`). Also, we can use a builder provided
    by the Selenium WebDriver API (i.e., `RemoteWebDriver.builder()`). Finally, we
    can use the WebDriverManager builder to resolve the driver and create the `WebDriver`
    instance in a single line of code. The following examples show these alternatives,
    used in conjunction with browser capabilities to enable the headless browser mode,
    namely:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 [“WebDriver 创建”](ch03.html#webdriver-creation) 所解释的，我们有不同的方法来创建 `WebDriver`
    对象。首先，我们可以使用 `WebDriver` 构造函数（例如 `new ChromeDriver()`）。此外，我们可以使用 Selenium WebDriver
    API 提供的构建器（即 `RemoteWebDriver.builder()`）。最后，我们可以使用 WebDriverManager 构建器解析驱动程序，并在一行代码中创建
    `WebDriver` 实例。以下示例展示了这些替代方法，与浏览器能力结合使用，以启用无头浏览器模式，即：
- en: '[Example 5-1](#caps_chrome_headless) uses Chrome in headless mode. This example
    creates a `WebDriver` instance using the required constructor (`ChromeDriver`
    in this case).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 5-1](#caps_chrome_headless) 使用 Chrome 无头模式。此示例使用所需的构造函数（在本例中为 `ChromeDriver`）创建一个
    `WebDriver` 实例。'
- en: '[Example 5-2](#caps_edge_headless) uses Edge in headless mode. This example
    creates a `WebDriver` instance using the builder available in the Selenium WebDriver
    API.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 5-2](#caps_edge_headless) 使用 Edge 无头模式。此示例使用 Selenium WebDriver API 中提供的构建器创建一个
    `WebDriver` 实例。'
- en: '[Example 5-3](#caps_firefox_headless) uses Firefox in headless mode. This example
    creates a `WebDriver` instance using WebDriverManager. Notice that the setup method
    is not required in this case since WebDriverManager resolves the driver in the
    same line as the WebDriver instantiation.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 5-3](#caps_firefox_headless) 使用 Firefox 无头模式。此示例使用 WebDriverManager 创建一个
    `WebDriver` 实例。请注意，在这种情况下，不需要设置方法，因为 WebDriverManager 在 WebDriver 实例化的同一行解析了驱动程序。'
- en: '[Example 5-4](#caps_chrome_headless_seljup) uses Chrome in headless mode through
    Selenium-Jupiter. This example uses the parameter resolution mechanism provided
    by Selenium-Jupiter, and so we simply declare a `ChromeDriver` parameter in the
    test method. Then, we decorate this parameter using the annotation `@Arguments`
    to specify the headless mode for this browser.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 5-4](#caps_chrome_headless_seljup) 通过 Selenium-Jupiter 使用 Chrome 无头模式。此示例使用
    Selenium-Jupiter 提供的参数解析机制，因此我们只需在测试方法中声明一个 `ChromeDriver` 参数。然后，我们使用注解 `@Arguments`
    对这个参数进行修饰，以指定该浏览器的无头模式。'
- en: Example 5-1\. Test using Chrome in headless mode
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-1\. 使用 Chrome 无头模式进行测试
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO1-1)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO1-1)'
- en: We resolve the required driver (chromedriver in this case).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解析所需的驱动程序（在本例中为 chromedriver）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO1-2)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO1-2)'
- en: We create the browser capabilities using the `ChromeOptions` constructor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `ChromeOptions` 构造函数创建浏览器能力。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO1-3)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO1-3)'
- en: We enable the headless mode. This line is equivalent to `options.add​Arguments("--headless");`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用无头模式。这一行相当于 `options.add​Arguments("--headless");`。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO1-4)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO1-4)'
- en: We set up the browser capabilities by passing the options as a constructor parameter
    in the `ChromeDriver` constructor.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`ChromeDriver`构造函数中将选项作为参数来设置浏览器能力。
- en: Example 5-2\. Test using Edge in headless mode
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-2\. 使用Edge浏览器的无头模式测试
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO2-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO2-1)'
- en: As usual, we need to resolve the required driver (msedgedriver in this case).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，我们需要解析所需的驱动程序（本例中是msedgedriver）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO2-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO2-2)'
- en: Since we aim to use Edge, we need to create an `EdgeOptions` instance to specify
    capabilities.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们打算使用Edge，因此我们需要创建一个`EdgeOptions`实例来指定能力。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO2-3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO2-3)'
- en: We enable the headless mode. Again, this line is equivalent to `options.add​Arguments("--headless");`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用无头模式。同样，这行等同于`options.addArguments("--headless");`。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO2-4)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO2-4)'
- en: We use the WebDriver builder to create the `WebDriver` object, passing the options
    as a parameter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用WebDriver构建器来创建`WebDriver`对象，并将选项作为参数传递。
- en: Example 5-3\. Test using Firefox in headless mode
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-3\. 使用Firefox无头模式测试
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO3-1)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO3-1)'
- en: We use Firefox in this test, and therefore, we create a `FirefoxOptions` object
    to specify capabilities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们使用Firefox，因此我们创建一个`FirefoxOptions`对象来指定能力。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO3-2)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO3-2)'
- en: In the same way as in the previous examples, we enable the headless mode.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例相同，我们启用了无头模式。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO3-3)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO3-3)'
- en: In this example, we use WebDriverManager to resolve the required driver and
    create the `WebDriver` object while specifying the previously created browser
    capabilities.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用WebDriverManager来解析所需的驱动程序，并创建`WebDriver`对象，同时指定先前创建的浏览器能力。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The strategy used to create the `WebDriver` objects in these examples is interchangeable.
    In other words, for example, we can also use the WebDriverManager builder for
    each browser in headless mode.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，创建`WebDriver`对象的策略是可以互换的。换句话说，例如，我们也可以为每个浏览器的无头模式使用WebDriverManager构建器。
- en: Example 5-4\. Test using Chrome in headless mode with Selenium-Jupiter
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-4\. 使用Selenium-Jupiter中的Chrome无头模式测试
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO4-1)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO4-1)'
- en: We use the annotation `@Arguments` to specify the headless mode in the browser
    (Chrome in this case).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用注解`@Arguments`来指定浏览器（本例中为Chrome）中的无头模式。
- en: Page Loading Strategies
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面加载策略
- en: Selenium WebDriver allows configuring different approaches for loading web pages.
    For that, the Selenium WebDriver API provides the `PageLoadStrategy` enumeration.
    [Table 5-2](#page-loading-enum) describes the possible values of this enumeration
    and their purposes. Selenium WebDriver internally uses the property `document.readyState`
    of the DOM API to check the web page loading state.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver允许配置不同的页面加载方式。为此，Selenium WebDriver API提供了`PageLoadStrategy`枚举。[表 5-2](#page-loading-enum)描述了该枚举的可能值及其目的。Selenium
    WebDriver内部使用DOM API的`document.readyState`属性来检查网页加载状态。
- en: Table 5-2\. PageLoadStrategy values
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-2\. PageLoadStrategy值
- en: '| Loading strategy | Description | Readiness state |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 加载策略 | 描述 | 准备状态 |'
- en: '| --- | --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| Default mode. Selenium WebDriver waits until the entire page is loaded (i.e.,
    the HTML content and subresources, such as stylesheets, images, JavaScript files,
    etc.). |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 默认模式。Selenium WebDriver等待整个页面加载完成（即HTML内容和子资源，如样式表、图像、JavaScript文件等）。 |'
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| Selenium WebDriver waits until the HTML document has finished loading and
    parsing, but subresources (scripts, images, stylesheets, etc.) are still loading.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| Selenium WebDriver等待HTML文档完成加载和解析，但子资源（脚本、图像、样式表等）仍在加载中。 |'
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '| Selenium WebDriver waits only until the HTML document is downloaded. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Selenium WebDriver仅等待HTML文档下载完成。 |'
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We need to invoke the method `setPageLoadStrategy()` of the browser capabilities
    (e.g., `ChromeOptions`, `FirefoxOptions`, etc.) to set up these strategies (`NORMAL`,
    `EAGER`, or `NONE`). [Example 5-5](#caps_chrome_load) shows a test using Chrome
    and the `NORMAL` strategy. In the examples repository, you can find equivalent
    examples for Edge and Firefox using the other strategies (`EAGER` and `NONE`).
    In these examples, in addition to specifying a loading strategy in the test setup,
    the test logic calculates the required time to load the page, displaying this
    value in the standard output.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要调用浏览器能力（例如`ChromeOptions`，`FirefoxOptions`等）的`setPageLoadStrategy()`方法来设置这些策略（`NORMAL`，`EAGER`或`NONE`）。[示例 5-5](#caps_chrome_load)展示了使用Chrome和`NORMAL`策略的测试。在示例库中，您可以找到使用其他策略（`EAGER`和`NONE`）的Edge和Firefox的等效示例。在这些示例中，除了在测试设置中指定加载策略外，测试逻辑还计算加载页面所需的时间，并在标准输出中显示此值。
- en: Example 5-5\. Test using a normal page loading strategy in Chrome
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-5\. 在Chrome中使用正常页面加载策略的测试
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO5-1)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO5-1)'
- en: Since we use Chrome in this test, we instantiate `ChromeOptions` to specify
    capabilities.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在此测试中使用Chrome，我们实例化`ChromeOptions`以指定能力。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO5-2)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO5-2)'
- en: We set up the page loading strategy to `NORMAL`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置页面加载策略为`NORMAL`。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO5-3)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO5-3)'
- en: We use WebDriverManager to resolve the driver, create the `WebDriver` instance,
    and specify the capabilities.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用WebDriverManager解析驱动程序，创建`WebDriver`实例并指定能力。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO5-4)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO5-4)'
- en: We get the system timestamp before loading the page.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载页面之前获取系统时间戳。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO5-5)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO5-5)'
- en: We get the system timestamp after loading the page.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载页面后获取系统时间戳。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO5-6)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO5-6)'
- en: We read the `WebDriver` object capabilities.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取`WebDriver`对象的能力。
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO5-7)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO5-7)'
- en: We read the used page loading strategy.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取了所用的页面加载策略。
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO5-8)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO5-8)'
- en: We trace the time required to load the web page.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们追踪加载网页所需的时间。
- en: '[![9](assets/9.png)](#co_browser_specific_manipulation_CO5-9)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_browser_specific_manipulation_CO5-9)'
- en: We verify that the loading strategy is as initially configured.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证加载策略是否如最初配置的那样。
- en: Device Emulation
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备仿真
- en: 'Major web browsers use development tools (i.e., DevTools in Chromium-based
    browsers and Developer Tools in Firefox) to simulate mobile devices in these ways:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的网页浏览器使用开发工具（即Chromium基浏览器中的DevTools和Firefox中的Developer Tools）以以下方式模拟移动设备：
- en: Simulating a mobile viewport
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟移动视窗
- en: To reduce user visible area of a web page using the width and height of a given
    mobile device
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定移动设备的宽度和高度减少网页的用户可见区域
- en: Throttling the network
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 限制网络带宽
- en: To slow the connectivity speed to simulate mobile networks (e.g., 3G)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟移动网络（例如3G），需要降低连接速度。
- en: Throttling the CPU
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 限制CPU速度
- en: To slow processing performance
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 减慢处理性能
- en: Simulating geolocation
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟地理位置
- en: To set custom Global Positioning System (GPS) coordinates
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 设置自定义全球定位系统（GPS）坐标
- en: Setting orientation
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 设置方向
- en: To rotate the screen
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转屏幕
- en: '[Figure 5-2](#chrome-devtools-mobile-emulation) shows a screenshot of Chrome
    using mobile emulation through DevTools.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-2](#chrome-devtools-mobile-emulation)展示了通过DevTools在Chrome中使用移动仿真的屏幕截图。'
- en: '![hosw 0502](assets/hosw_0502.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0502](assets/hosw_0502.png)'
- en: Figure 5-2\. Mobile emulation in Chrome using DevTools
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-2\. 使用Chrome开发工具进行移动仿真
- en: At the time of this writing, this mobile device emulation can be automated through
    the Selenium WebDriver API in Chromium-based browsers (Chrome and Edge) but not
    Firefox (since it is not implemented in geckodriver). For that, we need to set
    the experimental option `mobileEmulation` in `ChromeOptions` or `EdgeOptions`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，这种移动设备仿真可以通过Selenium WebDriver API在基于Chromium的浏览器（Chrome和Edge）中自动化，但在Firefox中不能（因为geckodriver中未实现）。为此，我们需要在`ChromeOptions`或`EdgeOptions`中设置实验性选项`mobileEmulation`。
- en: Then, there are two alternatives to specify the mobile device to be emulated.
    First, we can specify a particular mobile device (e.g., Pixel 2, iPad Pro, or
    Galaxy Fold, to name a few). Since this list is updated in each Chromium release,
    the best way to check the possibilities is to inspect the available devices in
    DevTools (e.g., iPhone X is selected in [Figure 5-2](#chrome-devtools-mobile-emulation)).
    [Example 5-6](#caps_chrome_device_emulation_1) shows a test setup in which we
    specify a given mobile device using the label `iPhone 6/7/8`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有两种方法来指定要模拟的移动设备。首先，我们可以指定特定的移动设备（例如，Pixel 2、iPad Pro 或 Galaxy Fold 等）。由于此列表在每个
    Chromium 发布版中更新，检查可能性的最佳方法是检查 DevTools 中可用设备（例如，[图 5-2](#chrome-devtools-mobile-emulation)
    中选择了 iPhone X）。[示例 5-6](#caps_chrome_device_emulation_1) 展示了一个测试设置，其中我们使用标签 `iPhone
    6/7/8` 指定了特定的移动设备。
- en: Example 5-6\. Test setup using mobile emulation by specifying a device
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-6\. 通过指定设备进行移动模拟的测试设置
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO6-1)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO6-1)'
- en: We need to create a `HashMap` object to specify the mobile emulation options.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个 `HashMap` 对象来指定移动模拟选项。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO6-2)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO6-2)'
- en: Then, we only need to select the device name (iPhone 6/7/8 in this case).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需要选择设备名称（在本例中为 iPhone 6/7/8）。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO6-3)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO6-3)'
- en: We set up device emulation using experimental options.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用实验选项设置设备模拟。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO6-4)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO6-4)'
- en: As usual, we create a `WebDriver` object specifying these options.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们创建一个指定这些选项的 `WebDriver` 对象。
- en: 'The second alternative to set up mobile emulation is to specify the individual
    attributes of the emulated device. These attributes are:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 设置移动模拟的第二种选择是指定模拟设备的各个属性。这些属性包括：
- en: '`width`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`'
- en: Device screen width (in pixels)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 设备屏幕宽度（以像素为单位）
- en: '`height`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`'
- en: Device screen height (in pixels)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 设备屏幕高度（以像素为单位）
- en: '`pixelRatio`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixelRatio`'
- en: Ratio between physical pixels and logical pixels
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 物理像素与逻辑像素之间的比率
- en: '`touch`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch`'
- en: Whether to emulate touch events; the default value is `true`
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 是否模拟触摸事件；默认值为 `true`
- en: In addition to these attributes, we can specify the *user agent* of the emulated
    device. In HTTP, the user agent is a string specified in request headers that
    univocally identifies the type of web browser. It contains the development code
    name, version, platform, and other information. [Example 5-7](#caps_chrome_device_emulation_2)
    shows a test setup illustrating the use of this feature.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些属性之外，我们还可以指定模拟设备的 *用户代理*。在 HTTP 中，用户代理是指定在请求标头中的字符串，唯一地标识 Web 浏览器的类型。它包含开发代号、版本、平台和其他信息。[示例 5-7](#caps_chrome_device_emulation_2)
    展示了一个测试设置，说明了此功能的使用。
- en: Example 5-7\. Test setup using device emulation by specifying individual attributes
  id: totrans-169
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-7\. 通过指定各个属性进行设备模拟的测试设置
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO7-1)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO7-1)'
- en: We create a hashmap to store the individual attributes of an emulated mobile,
    namely, `width`, `height`, `pixelRatio`, and `touch`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个哈希映射来存储模拟移动设备的各个属性，即，`width`、`height`、`pixelRatio` 和 `touch`。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO7-2)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO7-2)'
- en: We set these attributes by setting the label `deviceMetrics` in the mobile emulation
    map.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在移动模拟映射中设置标签 `deviceMetrics` 来设置这些属性。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO7-3)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO7-3)'
- en: We set a custom user agent for a Chrome Mobile 18 in a Nexus 5 device.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 Nexus 5 设备中的 Chrome Mobile 18 设置了自定义用户代理。
- en: Web Extensions
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页扩展
- en: Web extensions (also called *add-ons* or *plug-ins*) are programs that can modify
    or enhance the default operation of a web browser. Users typically install web
    extensions using web stores. These stores are web applications supported by browser
    maintainers for hosting public web extensions. [Table 5-3](#web-stores) summarizes
    the web stores for Chrome, Edge, and Firefox.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 网页扩展（也称为 *插件* 或 *附加组件*）是可以修改或增强 Web 浏览器默认操作的程序。用户通常使用 Web 商店安装网页扩展。这些商店是由浏览器维护者支持的
    Web 应用程序，用于托管公共 Web 扩展。[表 5-3](#web-stores) 总结了 Chrome、Edge 和 Firefox 的 Web 商店。
- en: Table 5-3\. Web stores for the major browsers
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5-3\. 主要浏览器的网络商店
- en: '| Web Store | Browser | URL |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 网络商店 | 浏览器 | 网址 |'
- en: '| --- | --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Chrome web store | Chrome | [*https://chrome.google.com/webstore/category/extensions*](https://chrome.google.com/webstore/category/extensions)
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| Chrome 网上应用店 | Chrome | [*https://chrome.google.com/webstore/category/extensions*](https://chrome.google.com/webstore/category/extensions)
    |'
- en: '| Edge add-ons | Edge | [*https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home*](https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home)
    |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| Edge 插件 | Edge | [*https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home*](https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home)
    |'
- en: '| Firefox browser add-ons | Firefox | [*https://addons.mozilla.org/en-US/firefox*](https://addons.mozilla.org/en-US/firefox)
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| Firefox 浏览器插件 | Firefox | [*https://addons.mozilla.org/zh-CN/firefox*](https://addons.mozilla.org/zh-CN/firefox)
    |'
- en: We can install web extensions in a WebDriver session using capabilities. For
    that, in Chromium-based browsers, like Chrome and Edge, we use the method `addExtensions()`
    of a `ChromeOptions` or `EdgeOptions` object. [Example 5-8](#caps_chrome_ext)
    shows a test setup to install a local extension in Chrome.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 WebDriver 会话中使用功能来安装网页扩展。在基于 Chromium 的浏览器中，如 Chrome 和 Edge，我们使用 `ChromeOptions`
    或 `EdgeOptions` 对象的 `addExtensions()` 方法。[示例 5-8](#caps_chrome_ext) 展示了在 Chrome
    中安装本地扩展的测试设置。
- en: Example 5-8\. Test setup installing a web extension in Chrome
  id: totrans-186
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-8\. 在 Chrome 中安装网页扩展的测试设置
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO8-1)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO8-1)'
- en: We install a web extension packed as a Chrome Extension (CRX) file. This file
    is a test resource (located in the folder `src\test\resources` of the Java project).
    This extension changes the website look and feel to use light text on a dark background.
    [Figure 5-3](#dark-bg) shows a screenshot of the practice website when loaded
    by a WebDriver test using this extension.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装一个打包为 Chrome 扩展（CRX）文件的网页扩展。这个文件是测试资源（位于 Java 项目的 `src\test\resources` 文件夹中）。该扩展会改变网站的外观和感觉，以在黑色背景上使用浅色文本。[图 5-3](#dark-bg)
    展示了使用 WebDriver 测试加载此扩展时的实践网站的截图。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO8-2)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO8-2)'
- en: We add the extension in the Chrome options, passing the extension as a Java
    `File`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Chrome 选项中添加扩展，将扩展作为 Java `File` 传递。
- en: '![hosw 0503](assets/hosw_0503.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0503](assets/hosw_0503.png)'
- en: Figure 5-3\. Practice site when it is loaded using the dark-bg.crx extension
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-3\. 使用 dark-bg.crx 扩展加载时的实践站点
- en: Firefox also allows loading web extensions when it is controlled with WebDriver.
    Nevertheless, the syntax is different. [Example 5-9](#caps_firefox_ext) illustrates
    this.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Firefox 由 WebDriver 控制时，也允许加载网页扩展。然而，语法有所不同。[示例 5-9](#caps_firefox_ext) 说明了这一点。
- en: Example 5-9\. Test setup installing a web extension in Firefox
  id: totrans-195
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-9\. 在 Firefox 中安装网页扩展的测试设置
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO9-1)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO9-1)'
- en: We use the same extension as in Chrome/Edge, but in this case, the packaging
    is specific for Firefox. Notice that the file is different. This time, it is packaged
    as an *XPInstall* file, i.e., a zipped archive containing the web extension source
    code, resources (e.g., images), and metadata.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Firefox 中使用与 Chrome/Edge 相同的扩展，但在这种情况下，打包是专门针对 Firefox 的。请注意文件是不同的。这次，它被打包为
    *XPInstall* 文件，即包含网页扩展源代码、资源（例如图像）和元数据的压缩归档。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO9-2)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO9-2)'
- en: We need to create a custom Firefox profile (i.e., the store where custom settings
    are configured).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个自定义的 Firefox 配置文件（即存储自定义设置的地方）。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO9-3)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO9-3)'
- en: We add the extension as a Java `File` to the Firefox profile.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展作为 Java `File` 添加到 Firefox 配置文件中。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO9-4)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO9-4)'
- en: We set the profile in the Firefox options.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Firefox 选项中设置配置文件。
- en: Chromium-based browsers (e.g., Chrome, Edge) also allow loading an extension
    from its source code (i.e., not packaged as a CRX file). This feature can be very
    convenient for automated testing of web extensions during their development. [Example 5-10](#caps_edge_ext)
    shows a test setup that illustrates this feature.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Chromium 的浏览器（例如 Chrome、Edge）还允许从源代码加载扩展（即未打包为 CRX 文件）。这个功能在开发期间自动测试网页扩展非常方便。[示例 5-10](#caps_edge_ext)
    展示了说明此功能的测试设置。
- en: Example 5-10\. Test setup installing a web extension from its source code in
    Edge
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-10\. 从源代码中安装 Edge 中的网页扩展的测试设置
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO10-1)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO10-1)'
- en: The extension used in this example is located in the folder `web-extension`;
    it is a test resource folder (stored in `src\test\resources` of the Java project).
    This extension follows the [Browser Extensions API](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions).
    It uses JavaScript to change the content of first-level headers (`h1` tags) with
    a custom message. [Figure 5-4](#load-ext) shows a screenshot of the practice website
    when using this extension.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用的扩展位于`web-extension`文件夹中；这是一个测试资源文件夹（存储在Java项目的`src\test\resources`中）。此扩展遵循[浏览器扩展
    API](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions)。它使用
    JavaScript 来更改一级标题（`h1` 标签）的内容为自定义消息。[图 5-4](#load-ext) 显示了使用此扩展时练习网站的屏幕截图。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO10-2)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO10-2)'
- en: We specify the extension path using the `--load-extension` argument.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `--load-extension` 参数指定扩展路径。
- en: Note
  id: totrans-212
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Selenium WebDriver creates a new browser profile in each execution. For this
    reason, the installation of web extensions through Selenium WebDriver is not permanent
    in the target browsers.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 每次执行时都会创建一个新的浏览器配置文件。因此，通过 Selenium WebDriver 安装的 Web 扩展在目标浏览器中不是永久性的。
- en: '![hosw 0504](assets/hosw_0504.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0504](assets/hosw_0504.png)'
- en: Figure 5-4\. Practice site when it is loaded using the local extension
  id: totrans-215
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-4\. 使用本地扩展加载练习网站时的情况
- en: As of Selenium 4.1, Firefox also allows installing web extensions from its source
    code. To that aim, `FirefoxDriver` extends the interface `HasExtensions`, providing
    the method `installExtension`. [Example 5-11](#caps_firefox_ext_src) shows a test
    setup using this feature.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Selenium 4.1 起，Firefox 也允许从其源代码安装 Web 扩展。为此，`FirefoxDriver` 扩展了接口 `HasExtensions`，提供了方法
    `installExtension`。[示例 5-11](#caps_firefox_ext_src) 展示了使用此功能的测试设置。
- en: Example 5-11\. Test setup installing a web extension from its source code in
    Firefox
  id: totrans-217
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-11\. 在Firefox中安装Web扩展的测试设置
- en: '[PRE32]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO11-1)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO11-1)'
- en: We use the source code (located in the project classpath) of a web extension.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用位于项目类路径中的 Web 扩展源代码。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO11-2)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO11-2)'
- en: The method `installExtension` requires that the extension installed from its
    source code is zipped. WebDriverManager provides the static helper method called
    `zipFolder(Path)` to ease this process.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `installExtension` 要求从其源代码安装的扩展是压缩的。WebDriverManager 提供了名为 `zipFolder(Path)`
    的静态辅助方法来简化此过程。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO11-3)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO11-3)'
- en: We install the zipped extension as a temporal add-on in Firefox.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将压缩的扩展作为临时附加组件安装到 Firefox 中。
- en: Geolocation
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理位置
- en: The [Geolocation API](https://www.w3.org/TR/geolocation) is a W3C specification
    that allows access to the geographical location information associated with the
    hosting device (e.g., laptop or mobile) of the web browser. Usual geolocation
    data sources include GPS data and the location inferred from the network, such
    as the IP address. The Geolocation API is available in a web browser calling the
    JavaScript object `navigator.geolocation`. When using this statement, and for
    privacy reasons, a pop-up prompts the user for permission to report location data.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[地理位置 API](https://www.w3.org/TR/geolocation) 是一个 W3C 规范，允许访问与 Web 浏览器的主机设备（如笔记本电脑或移动设备）关联的地理位置信息。通常的地理位置数据源包括
    GPS 数据和从网络推断的位置，例如 IP 地址。地理位置 API 可通过调用 JavaScript 对象 `navigator.geolocation`
    在 Web 浏览器中使用。出于隐私原因，使用此语句时，会弹出提示用户允许报告位置数据。'
- en: The practice site contains a web page using geolocation. [Figure 5-5](#geolocation)
    shows a screenshot of this page. This figure shows the permission pop-up shown
    to the user when clicking the button “Get coordinates.” To handle this dialog
    using the Selenium WebDriver API, we use capabilities. Like other occasions, the
    required capabilities to grant access to the geolocation data are different in
    Chrome/Edge than in Firefox. The following code snippets show the difference.
    First, [Example 5-12](#caps_chrome_geo) shows a test setup where geolocation access
    is granted in Chrome. The same experimental preference (`profile.default_content_setting_values.geolocation`)
    would be used in Edge (as usual, you can find the complete test in the examples
    repository). Then, [Example 5-13](#caps_firefox_geo) shows the equivalent test
    setup, but using Firefox.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 实践站点包含一个使用地理位置的网页。[图 5-5](#geolocation) 展示了此页面的屏幕截图。该图显示了用户点击“获取坐标”按钮时显示给用户的权限弹出窗口。为了使用
    Selenium WebDriver API 处理此对话框，我们使用功能。与其他情况一样，Chrome/Edge 中授予访问地理位置数据所需的功能不同于 Firefox。以下代码片段展示了这种差异。首先，[示例 5-12](#caps_chrome_geo)
    展示了在 Chrome 中授予地理位置访问权限的测试设置。Edge 中将使用相同的实验性偏好（`profile.default_content_setting_values.geolocation`），你可以在示例存储库中找到完整的测试。接下来，[示例 5-13](#caps_firefox_geo)
    展示了等效的 Firefox 测试设置。
- en: '![hosw 0505](assets/hosw_0505.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0505](assets/hosw_0505.png)'
- en: Figure 5-5\. Practice site showing the geolocation permission pop-up
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-5\. 显示地理位置权限弹出窗口的实践站点
- en: Example 5-12\. Test setup to allow geolocation in Chrome
  id: totrans-230
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-12\. 在 Chrome 中允许地理位置的测试设置
- en: '[PRE33]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO12-1)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO12-1)'
- en: We create a hashmap for experimental options.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为实验选项创建一个哈希映射。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO12-2)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO12-2)'
- en: 'We set to `1` the experimental option `profile.default_content_setting_​val⁠ues.geolocation`
    to allow accessing the geolocation position. The other possible values are: `0`
    for the default behavior and `2` for blocking access to the geolocation data.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实验选项 `profile.default_content_setting_​val⁠ues.geolocation` 设置为 `1`，以允许访问地理位置。其他可能的值包括：默认行为的
    `0` 和阻止访问地理位置数据的 `2`。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO12-3)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO12-3)'
- en: We set the experimental options using the label `prefs` in the Chrome options.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Chrome 选项中的 `prefs` 标签设置实验选项。
- en: Note
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Suppose you need to access the geolocation coordinates using Chrome or Edge
    in a macOS machine. In that case, you will also need to enable the location services
    for these browsers in the macOS preferences (System Preferences → Security & Privacy
    → Location Services). [Figure 5-6](#geolocation-macos) shows this configuration.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要在 macOS 设备的 Chrome 或 Edge 中访问地理位置坐标。那么，你还需要在 macOS 的偏好设置（系统偏好设置 → 安全性与隐私
    → 位置服务）中启用这些浏览器的位置服务。[图 5-6](#geolocation-macos) 展示了这个配置。
- en: '![hosw 0506](assets/hosw_0506.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0506](assets/hosw_0506.png)'
- en: Figure 5-6\. Enabling location services for Chrome and Edge in macOS
  id: totrans-241
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-6\. 在 macOS 中为 Chrome 和 Edge 启用位置服务
- en: Example 5-13\. Test setup to allow geolocation in Firefox
  id: totrans-242
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-13\. 在 Firefox 中允许地理位置的测试设置
- en: '[PRE34]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO13-1)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO13-1)'
- en: To enable the Geolocation API
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用地理位置 API
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO13-2)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO13-2)'
- en: To grant access to the geolocation data (i.e., click on `allow` in the access
    pop-up)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许访问地理位置数据（即点击访问弹出窗口中的 `allow`）
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO13-3)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO13-3)'
- en: To gather data using all the available components in the device, such as GPS,
    WiFi, or Bluetooth
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用设备中所有可用组件（如 GPS、WiFi 或蓝牙）收集数据
- en: Notifications
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知
- en: The [Notifications API](https://notifications.spec.whatwg.org) is a standard
    web API that allows websites to send notifications displayed at the operating
    system desktop. This API is available through the JavaScript object `Notification`.
    Before a website can send notifications, the user must grant permission. This
    consent is prompted to the user in a dialog pop-up similar to geolocation data.
    The practice site contains a web page using the Notification API. [Figure 5-7](#notifications)
    shows a screenshot of the notification permission pop-up for this page. [Figure 5-8](#notification-fullscreen)
    shows the message sent by this web page on a Linux host.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[通知API](https://notifications.spec.whatwg.org)是一个标准的Web API，允许网站发送显示在操作系统桌面上的通知。该API通过JavaScript对象`Notification`提供。在网站能够发送通知之前，用户必须授予权限。此授权类似于地理位置数据，在对话框弹出中提示用户同意。练习站点包含一个使用通知API的网页。[图 5-7](#notifications)
    显示了此页面的通知权限弹出窗口的屏幕截图。[图 5-8](#notification-fullscreen) 显示了此网页在Linux主机上发送的消息。'
- en: '![hosw 0507](assets/hosw_0507.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0507](assets/hosw_0507.png)'
- en: Figure 5-7\. Practice site showing the notification permission pop-up
  id: totrans-253
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-7\. 练习站点显示通知权限弹出窗口
- en: '![hosw 0508](assets/hosw_0508.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0508](assets/hosw_0508.png)'
- en: Figure 5-8\. Practice site showing a notification in a Linux desktop
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-8\. 练习站点在Linux桌面上显示通知
- en: The Selenium WebDriver API allows granting notifications by using capabilities.
    Like in other features, the syntax of these capabilities is different in Chrome/Edge
    and Firefox. [Example 5-14](#caps_chrome_notifications) shows the test setup to
    enable notifications as Chrome options. We use the same preference (`profile.default_content_setting_values.notifications`)
    to allow notifications in Edge. [Example 5-15](#caps_firefox_notifications) shows
    the equivalent test setup for Firefox. The preference label (`permissions.default.desktop-notification`)
    is different in this case, although its value (`1`) is the same for allowing notifications.
    The other possible value is `2`, which is used to block notifications (both in
    Chrome/Edge and Firefox).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API允许通过使用能力来授予通知。与其他功能一样，这些能力的语法在Chrome/Edge和Firefox中有所不同。[示例 5-14](#caps_chrome_notifications)
    展示了启用Chrome选项中通知的测试设置。我们在Edge中使用相同的偏好设置（`profile.default_content_setting_values.notifications`）来允许通知。[示例 5-15](#caps_firefox_notifications)
    展示了Firefox的等效测试设置。在这种情况下，偏好标签（`permissions.default.desktop-notification`）不同，尽管其值（`1`）用于允许通知。另一个可能的值是`2`，用于阻止通知（在Chrome/Edge和Firefox中均适用）。
- en: Example 5-14\. Test setup to allow notifications in Chrome
  id: totrans-257
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-14\. 在Chrome中允许通知的测试设置
- en: '[PRE35]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Example 5-15\. Test setup to allow notifications in Firefox
  id: totrans-259
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-15\. 在Firefox中允许通知的测试设置
- en: '[PRE36]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[Example 5-16](#test_notifications) shows the test logic used with the previous
    setup. As usual, you can find the complete test case in the examples repository.
    This test is an example of asynchronous script execution. This script overrides
    the original `Notification` JavaScript object. The new implementation of this
    object gets the title of the notification message, which is returned in the script
    callback to the WebDriver test.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5-16](#test_notifications) 展示了与之前设置一起使用的测试逻辑。通常情况下，您可以在示例存储库中找到完整的测试用例。这个测试是异步脚本执行的一个例子。此脚本覆盖了原始的`Notification`
    JavaScript对象。此对象的新实现获取通知消息的标题，该标题在脚本回调中返回给WebDriver测试。'
- en: Example 5-16\. Test handling notifications
  id: totrans-262
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-16\. 测试处理通知
- en: '[PRE37]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO14-1)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO14-1)'
- en: As usual in asynchronous script execution, the last argument is the callback
    function used to signal the script termination.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如在异步脚本执行中通常的那样，最后一个参数是用于信号化脚本终止的回调函数。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO14-2)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO14-2)'
- en: We store a copy of the original `Notification` constructor.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们存储原始`Notification`构造函数的副本。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO14-3)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO14-3)'
- en: We create a new constructor for notifications.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为通知创建一个新的构造函数。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO14-4)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO14-4)'
- en: We pass the message title as an argument in the callback. As a result, the title
    is returned to the WebDriver call (Java in this case).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将消息标题作为回调的一个参数传递。因此，标题将返回给WebDriver调用（在本例中为Java）。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO14-5)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO14-5)'
- en: We use the old constructor to create an original `Notification` object.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用旧构造函数创建一个原始的`Notification`对象。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO14-6)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO14-6)'
- en: We click on the button that triggers the notification on the web page.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击触发网页上通知的按钮。
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO14-7)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO14-7)'
- en: We get the returned object after the script execution.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取脚本执行后返回的对象。
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO14-8)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO14-8)'
- en: We verify the notification title is as expected.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证通知标题是否符合预期。
- en: Browser Binary
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器二进制
- en: Selenium WebDriver detects the path of controlled web browsers (Chrome, Firefox,
    etc.) out of the box. Nevertheless, we can specify a custom path for the browser
    executable file using capabilities. This feature can be helpful when the installation
    path of the browser is not standard (for instance, in the case of beta/development/canary
    browsers).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 可以自动检测控制的网络浏览器（例如 Chrome、Firefox 等）的路径。尽管如此，我们可以使用 capabilities
    指定浏览器可执行文件的自定义路径。当浏览器安装路径不是标准路径时（例如 beta/development/canary 浏览器的情况），这一功能非常有用。
- en: We use the same capabilities syntax to specify the binary path for Chrome, Edge,
    and Firefox. [Example 5-17](#caps_chrome_binary) shows a test setup using Chrome
    beta.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的 capabilities 语法来指定 Chrome、Edge 和 Firefox 的二进制路径。[示例 5-17](#caps_chrome_binary)
    展示了使用 Chrome beta 的测试设置。
- en: Example 5-17\. Test setup setting a custom binary path for Chrome
  id: totrans-283
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-17\. 设置 Chrome 自定义二进制路径的测试设置
- en: '[PRE38]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO15-1)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO15-1)'
- en: We use a Java `Path` to get the browser binary path (in this case, Chrome beta
    in Linux).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Java 的 `Path` 来获取浏览器二进制路径（例如 Linux 下的 Chrome beta）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO15-2)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO15-2)'
- en: We use assumptions to conditionally skip this test when the previous path does
    not exist (e.g., in the CI server).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用假设条件，在前述路径不存在时条件性地跳过这个测试（例如在 CI 服务器上）。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO15-3)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO15-3)'
- en: We use the method `setBinary` of the Chrome options to set the binary path (as
    a Java `File`).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Chrome options 的 `setBinary` 方法来设置二进制路径（作为 Java `File`）。
- en: Web Proxies
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页代理
- en: 'In computer networking, a *proxy* is a server that acts as an intermediary
    between a client and a server. A web proxy is a proxy between a browser and a
    web server, and it can serve multiple purposes, such as:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机网络中，*代理* 是充当客户端和服务器之间中介的服务器。网页代理是浏览器和 Web 服务器之间的代理，可以用于多种目的，例如：
- en: Access region-specific information
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 访问特定区域的信息
- en: The proxy is typically located in a different region than the client, and the
    server consequently replies to that region.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 代理通常位于不同于客户端的区域，因此服务器相应地响应该区域。
- en: Avoiding restrictions
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 避免限制
- en: A proxy can help access blocked websites, for example, by an intermediate firewall.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 代理可以帮助访问被中间防火墙阻断的网站。
- en: Capture network traffic
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获网络流量
- en: A proxy can gather HTTP requests and responses.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 代理可以收集 HTTP 请求和响应。
- en: Caching
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存
- en: A proxy can allow faster website retrieval.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 代理可以加速网站检索速度。
- en: '[Figure 5-9](#proxy-arch) represents the location of a web proxy in the Selenium
    WebDriver architecture compared to the typical scenario in which a web proxy is
    not used. As you can see, the web proxy is placed in the middle of the browser
    and the web application under test, and it works at the HTTP level. This way,
    the web proxy allows implementing the previously mentioned purposes (e.g., capturing
    HTTP network traffic) in Selenium WebDriver tests.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-9](#proxy-arch) 展示了 Selenium WebDriver 架构中网页代理的位置，与不使用网页代理的典型场景进行了比较。可以看到，网页代理位于浏览器和测试中的网页应用程序之间，并且在
    HTTP 层面上起作用。这样，网页代理允许在 Selenium WebDriver 测试中实现前面提到的目的（例如捕获 HTTP 网络流量）。'
- en: '![hosw 0509](assets/hosw_0509.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0509](assets/hosw_0509.png)'
- en: Figure 5-9\. Selenium WebDriver architecture with and without a web proxy
  id: totrans-303
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-9\. Selenium WebDriver 架构，包括和不包括网页代理
- en: The Selenium WebDriver API provides a `Proxy` class to configure a web proxy.
    This class is configured into a `WebDriver` object using capabilities. [Example 5-18](#http_proxies)
    illustrates how.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 提供了一个 `Proxy` 类来配置网页代理。这个类通过 capabilities 配置到 `WebDriver`
    对象中。[示例 5-18](#http_proxies) 展示了具体用法。
- en: Example 5-18\. Test setup to configure a web proxy
  id: totrans-305
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-18\. 配置网页代理的测试设置
- en: '[PRE39]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO16-1)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO16-1)'
- en: We create an instance of the class `Proxy`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个 `Proxy` 类的实例。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO16-2)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO16-2)'
- en: The syntax required to specify a proxy is `host:port`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 指定代理的语法是`host:port`。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO16-3)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO16-3)'
- en: We specify the proxy is used for HTTP connections.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定代理用于HTTP连接。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO16-4)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO16-4)'
- en: We also specify the proxy is used for HTTPS connections.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指定代理用于HTTPS连接。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO16-5)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO16-5)'
- en: Although not mandatory, it is typically required to accept insecure certificates.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是强制要求，但通常需要接受不安全的证书。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO16-6)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO16-6)'
- en: We set the proxy as a capability. This line is equivalent to `options.setCapability(CapabilityType.PROXY,
    proxy);`.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将代理设置为一个能力。这一行等同于`options.setCapability(CapabilityType.PROXY, proxy);`。
- en: Tip
  id: totrans-319
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[“Capture Network Traffic”](ch09.html#capture_network_traffic) shows how to
    use a third-party library to capture network traffic by using a web proxy in a
    Selenium WebDriver test.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[“捕获网络流量”](ch09.html#capture_network_traffic) 展示了如何使用第三方库在Selenium WebDriver测试中通过使用Web代理来捕获网络流量。'
- en: Log Gathering
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志收集
- en: The Selenium WebDriver API allows gathering different log sources. This feature
    is enabled using capabilities, although it is supported only in Chromium-based
    browsers at the time of this writing. [Example 5-19](#log_gather) presents a test
    setup that enables gathering browser logs (i.e., console messages). This snippet
    also contains the test logic, in which we need to invoke `driver.manage().logs()`
    to gather the log list.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 允许收集不同的日志来源。这一功能通过能力来启用，尽管目前仅在基于Chromium的浏览器中支持。[示例 5-19](#log_gather)
    展示了一个测试设置，用于收集浏览器日志（即控制台消息）。这段代码还包含了测试逻辑，在其中我们需要调用`driver.manage().logs()`来收集日志列表。
- en: Example 5-19\. Test gathering browser log using Chrome
  id: totrans-323
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-19\. 使用Chrome测试收集浏览器日志
- en: '[PRE40]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO17-1)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO17-1)'
- en: We enable gathering all levels of browser logs.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用收集所有级别的浏览器日志。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO17-2)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO17-2)'
- en: We set the `loggingPrefs` capability.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置`loggingPrefs`能力。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO17-3)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO17-3)'
- en: We open a practice page that logs several traces in the browser console.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个练习页面，在浏览器控制台中记录几条迹象。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO17-4)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO17-4)'
- en: We gather all the logs and filter them by browser (console traces).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收集所有日志，并按浏览器（控制台追踪）进行过滤。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO17-5)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO17-5)'
- en: We verify the number of traces is not zero.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证追踪数量不为零。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO17-6)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO17-6)'
- en: We display each log in the standard output.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个日志显示在标准输出中。
- en: Warning
  id: totrans-337
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Log gathering is not available in the W3C WebDriver specification at the time
    of writing. Nevertheless, it has been implemented in some drivers such as chromedriver
    or msedgedriver (i.e., Chrome and Edge), but it is unavailable in others, such
    as geckodriver (i.e., Firefox).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时，W3C WebDriver规范中不支持日志收集。尽管如此，某些驱动程序已经实现了这一功能，如chromedriver或msedgedriver（即Chrome和Edge），但在其他驱动程序如geckodriver（即Firefox）中不可用。
- en: Get User Media
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户媒体
- en: '[WebRTC](https://webrtc.org) is a set of standard technologies that allow exchanging
    real-time media using web browsers. This technology allows the creation of audio-
    and video conferencing web applications using JavaScript APIs on the client side.
    The practice site contains a web page that gets user media (microphone and webcam)
    using the *getUserMedia* JavaScript API. Like in other APIs, and for the sake
    of security and privacy, a browser pop-up asks for permission before accessing
    the user media. [Figure 5-10](#get-user-media-popup) shows the sample web page
    when prompting this dialog.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[WebRTC](https://webrtc.org) 是一组标准技术，允许使用Web浏览器交换实时媒体。这项技术允许使用客户端JavaScript
    API创建音频和视频会议的Web应用程序。实践站点包含一个网页，使用*getUserMedia* JavaScript API获取用户媒体（麦克风和摄像头）。与其他API类似，出于安全和隐私考虑，浏览器弹出窗口在访问用户媒体前请求权限。[图 5-10](#get-user-media-popup)
    展示了提示此对话框时的示例网页。'
- en: '![hosw 0510](assets/hosw_0510.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0510](assets/hosw_0510.png)'
- en: Figure 5-10\. Practice site prompting the user media permission pop-up
  id: totrans-342
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-10\. 弹出用户媒体权限的实践网站
- en: We use capabilities to grant access to the user media in the Selenium WebDriver
    API. The syntax of these capabilities is the same in Chrome and Edge (see [Example 5-20](#caps_chrome_get_user_media))
    but different in Firefox (see [Example 5-21](#caps_firefox_get_user_media)).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用能力来在Selenium WebDriver API中授予用户媒体访问权限。这些能力在Chrome和Edge中的语法相同（参见[示例 5-20](#caps_chrome_get_user_media)），但在Firefox中不同（参见[示例 5-21](#caps_firefox_get_user_media)）。
- en: Example 5-20\. Test setup granting synthetic user media in Chrome
  id: totrans-344
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-20\. 在Chrome中设置合成用户媒体的测试
- en: '[PRE41]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO18-1)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO18-1)'
- en: Argument to allow accessing user media (audio and video).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 允许访问用户媒体（音频和视频）的参数。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO18-2)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO18-2)'
- en: Argument to fake user media using a synthetic video (green spinner) and audio
    (a beep per second). You can see this video in [Figure 5-11](#get-user-media-chrome).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 通过合成视频（绿色旋转器）和音频（每秒钟一声蜂鸣）来伪造用户媒体的参数。您可以在[图 5-11](#get-user-media-chrome)中看到这个视频。
- en: '![hosw 0511](assets/hosw_0511.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0511](assets/hosw_0511.png)'
- en: Figure 5-11\. Practice site using synthetic user media in Chrome
  id: totrans-351
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-11\. 在Chrome中使用合成用户媒体的实践网站
- en: Example 5-21\. Test setup granting synthetic user media in Firefox
  id: totrans-352
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-21\. 在Firefox中设置合成用户媒体的测试
- en: '[PRE42]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO19-1)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO19-1)'
- en: Preference to access the user media.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 优先访问用户媒体。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO19-2)'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO19-2)'
- en: Preference to fake the user media using a synthetic video (with changing color
    background) and audio (constant beep). You can see this video in [Figure 5-12](#get-user-media-firefox).
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 偏好于使用合成视频（背景颜色变化）和音频（恒定蜂鸣声）来伪造用户媒体。您可以在[图 5-12](#get-user-media-firefox)中看到这个视频。
- en: '![hosw 0512](assets/hosw_0512.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0512](assets/hosw_0512.png)'
- en: Figure 5-12\. Practice site using synthetic user media in Firefox
  id: totrans-359
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-12\. 在Firefox中使用合成用户媒体的实践网站
- en: Loading Insecure Pages
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载不安全页面
- en: When web browsers try to load a web page using HTTPS (Hypertext Transfer Protocol
    Secure) but the certificate on the server side is invalid, the browser warns the
    user about it. Examples of invalid certificates are self-signed, revoked, or cryptographically
    unsafe certificates. [Figure 5-13](#insecure-cert) shows a screenshot of this
    warning in Chrome.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 当Web浏览器尝试加载使用HTTPS（安全超文本传输协议）的网页，但服务器端的证书无效时，浏览器会向用户发出警告。无效证书的示例包括自签名、吊销或密码学上不安全的证书。[图 5-13](#insecure-cert)展示了Chrome中此警告的截图。
- en: '![hosw 0513](assets/hosw_0513.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0513](assets/hosw_0513.png)'
- en: Figure 5-13\. Web page using an insecure certificate
  id: totrans-363
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-13\. 使用不安全证书的网页
- en: This issue does not necessarily imply a security concern. It might happen during
    the development of a website, for example, when using a self-signed certificate.
    For this reason, the Selenium WebDriver API allows disabling the certificate checks
    using the `acceptInsecureCerts` capability. This capability is the same in Chrome,
    Edge, and Firefox. [Example 5-22](#caps_chrome_insecure) shows a test setup in
    which this capability is enabled using Chrome. This snippet also contains a test
    opening an insecure website.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题并不一定意味着安全问题。例如，在开发网站时使用自签名证书可能会发生这种情况。因此，Selenium WebDriver API允许使用`acceptInsecureCerts`能力禁用证书检查。该能力在Chrome、Edge和Firefox中都相同。[示例 5-22](#caps_chrome_insecure)展示了在Chrome中使用此能力的测试设置。此代码片段还包含一个打开不安全网站的测试。
- en: Example 5-22\. Test of a web application that uses an insecure certificate
  id: totrans-365
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-22\. 测试使用不安全证书的Web应用程序
- en: '[PRE43]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO20-1)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO20-1)'
- en: We enable the capability to allow insecure certificates.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用了允许不安全证书的能力。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO20-2)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO20-2)'
- en: We open a website using an insecure certificate (self-signed in this case).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开了一个使用不安全证书（本例中为自签名证书）的网站。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO20-3)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO20-3)'
- en: If the website is loaded, the body background should be red.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站已加载，则页面背景应为红色。
- en: Localization
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化
- en: In software engineering, *localization* refers to the process of adapting an
    application to meet the culture and the language (called *locale*) of its end
    users. Localization is sometimes written as *l10n* (10 is the number of letters
    between *l* and *n* in the English word localization). The most usual localization
    activity is translating the text displayed in an application UI to different languages.
    In addition, other UI aspects can be adjusted depending on the locale, such as
    the currencies (euros, dollars, etc.), systems of measurement (e.g., metric or
    imperial systems), or number and date format.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，*本地化* 指的是将应用程序调整为满足其最终用户文化和语言（称为*语言环境*）的过程。本地化有时被写作 *l10n*（10 是英语单词本地化中
    *l* 和 *n* 之间的字母数）。最常见的本地化活动是将应用程序 UI 中显示的文本翻译成不同的语言。此外，根据语言环境，还可以调整其他 UI 方面，如货币（欧元、美元等）、度量系统（例如，公制或英制）、或数字和日期格式。
- en: L10n is part of a broader concept called *internationalization* (i18n), which
    is the process of designing and developing an application that enables easy l10n
    for heterogeneous target audiences. Common practices to enable i18n are using
    Unicode for text encoding or adding CSS support for vertical text or non-Latin
    typographies.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化是 *国际化*（i18n）的一部分，国际化是设计和开发支持异构目标受众轻松进行本地化的应用程序的过程。启用 i18n 的常见实践包括使用 Unicode
    进行文本编码或为垂直文本或非拉丁文字体添加 CSS 支持。
- en: '*Localization testing* is a form of nonfunctional testing where a SUT is verified
    for specific locale settings. The Selenium WebDriver API allows us to make localization
    testing based on the browser language by setting the capability `intl.accept_languages`.
    This capability allows you to specify the locale identifier, such as *en_US* for
    American English or *es_ES* for European Spanish, to name a few. [Example 5-23](#caps_chrome_accept_lang)
    shows a test setup that configures this capability in Chrome. We can use the same
    syntax in Edge, although we specify this capability as a preference in Firefox
    (see [Example 5-24](#caps_firefox_accept_lang)).'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '*本地化测试* 是一种非功能性测试形式，用于验证特定语言环境设置下的 SUT。Selenium WebDriver API 允许我们根据浏览器语言进行本地化测试，通过设置
    `intl.accept_languages` 能力。此能力允许您指定语言环境标识符，如 *en_US* 表示美式英语或 *es_ES* 表示西班牙语（欧洲），等等。[示例 5-23](#caps_chrome_accept_lang)
    展示了在 Chrome 中配置此能力的测试设置。在 Edge 中可以使用相同的语法，尽管我们在 Firefox 中将此能力作为首选项进行配置（参见 [示例 5-24](#caps_firefox_accept_lang)）。'
- en: Example 5-23\. Test that uses a preferred locale for Chrome
  id: totrans-377
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-23\. 使用 Chrome 首选语言的测试
- en: '[PRE44]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO21-1)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO21-1)'
- en: We specify European Spanish as the preferred language in Chrome.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Chrome 中指定西班牙语（欧洲）作为首选语言。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO21-2)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO21-2)'
- en: We open a practice page that supports multilanguage (English and Spanish).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个支持多语言（英语和西班牙语）的练习页面。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO21-3)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO21-3)'
- en: We read the text translations using a resource bundle. You can find these strings
    in the file `strings_es.properties` (and `strings_en.properties`) in the project
    folder `src/test/resources`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用资源包读取文本翻译。您可以在项目文件夹 `src/test/resources` 中的 `strings_es.properties`（以及 `strings_en.properties`）文件中找到这些字符串。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO21-4)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO21-4)'
- en: We assert that the document body contains all the expected strings.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言文档正文包含所有预期的字符串。
- en: Example 5-24\. Test setup that specifies a preferred locale for Firefox
  id: totrans-387
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-24\. 指定Firefox的首选语言环境测试设置
- en: '[PRE45]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: There is a second alternative to practice localization testing with Selenium
    WebDriver. Instead of changing the preferred language (which determines the HTTP
    header `accept-language`), we can change the default language of the web browser.
    If that HTTP header is not present, multilanguage applications will use the browser
    language alternatively. The Selenium WebDriver API allows changing the browser
    language with a simple argument called `--lang`, specified as browser capability.
    This argument is interoperable in Chrome, Edge, and Firefox. [Example 5-25](#caps_chrome_lang)
    shows how to set the browser language to American English using WebDriver capabilities.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种使用Selenium WebDriver进行本地化测试的选择。我们可以更改浏览器的默认语言，而不是更改首选语言（确定HTTP头`accept-language`）。如果该HTTP头不存在，多语言应用程序将交替使用浏览器语言。Selenium
    WebDriver API允许使用一个简单的参数`--lang`来更改浏览器语言，该参数被指定为浏览器能力。这个参数在Chrome、Edge和Firefox中是可互操作的。[示例 5-25](#caps_chrome_lang)展示了如何使用WebDriver能力将浏览器语言设置为美式英语。
- en: Example 5-25\. Test setup that changes the browser language in Chrome
  id: totrans-390
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-25\. 在Chrome中更改浏览器语言的测试设置
- en: '[PRE46]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Incognito
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐身
- en: Incognito mode ensures that browsers run in a clean state. This mode allows
    private browsing, i.e., running isolated from the main session and user data.
    The Selenium WebDriver API enables the execution of browsers in incognito mode
    using capabilities. For Chrome and Edge, this mode is activated using the `--incognito`
    argument (see [Example 5-26](#caps_chrome_incognito)), while in Firefox, we use
    the `-private` preference (see [Example 5-27](#caps_firefox_incognito)).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 隐身模式确保浏览器以干净的状态运行。这种模式允许私密浏览，即与主会话和用户数据隔离运行。Selenium WebDriver API通过能力启用了在隐身模式下执行浏览器的功能。对于Chrome和Edge，这种模式是通过使用`--incognito`参数激活的（参见[示例 5-26](#caps_chrome_incognito)），而对于Firefox，则使用`-private`偏好设置（参见[示例 5-27](#caps_firefox_incognito)）。
- en: Example 5-26\. Test setup for using Chrome in incognito mode
  id: totrans-394
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-26\. 使用Chrome在隐身模式下的测试设置
- en: '[PRE47]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Example 5-27\. Test setup for using Firefox in incognito mode
  id: totrans-396
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-27\. 使用Firefox在隐身模式下的测试设置
- en: '[PRE48]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Edge in Internet Explorer Mode
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IE模式中的Edge
- en: Edge offers built-in support for the Microsoft legacy browser, i.e., Internet
    Explorer (IE). This way, to create a Selenium WebDriver test that uses Edge in
    IE mode, we need first to enable the IE mode in Edge. As shown in [Figure 5-14](#edge-iemode-config),
    this option is enabled in Edge settings → Default browser → Allow sites to be
    reloaded in Internet Explorer mode. Then, we can use the Selenium WebDriver API
    as illustrated in [Example 5-28](#setup_edge_iemode).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: Edge为微软传统浏览器即Internet Explorer（IE）提供了内置支持。因此，要创建一个使用IE模式中的Edge的Selenium WebDriver测试，我们需要先在Edge中启用IE模式。如[图 5-14](#edge-iemode-config)所示，这个选项是在Edge设置→默认浏览器→允许在Internet
    Explorer模式下重新加载网站中启用的。然后，我们可以使用Selenium WebDriver API，如[示例 5-28](#setup_edge_iemode)所示。
- en: '![hosw 0514](assets/hosw_0514.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0514](assets/hosw_0514.png)'
- en: Figure 5-14\. Browser setup to enable Edge in IE mode
  id: totrans-401
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-14\. 启用IE模式中Edge的浏览器设置
- en: Example 5-28\. Test setup to use Edge in IE mode
  id: totrans-402
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例5-28\. 使用IE模式中的Edge进行测试设置
- en: '[PRE49]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO22-1)'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO22-1)'
- en: We assume that the test is executed in Windows since IE mode is not supported
    on other operating systems.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设测试在Windows中执行，因为IE模式不支持其他操作系统。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO22-2)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO22-2)'
- en: We use WebDriverManager to manage IEDriver (the driver required by Internet
    Explorer).
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用WebDriverManager来管理IEDriver（Internet Explorer所需的驱动程序）。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO22-3)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO22-3)'
- en: We use WebDriverManager to discover the path of Edge.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用WebDriverManager来发现Edge的路径。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO22-4)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO22-4)'
- en: We use IE options to specify that we use Edge in IE mode.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用IE选项来指定我们使用IE模式中的Edge。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO22-5)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO22-5)'
- en: We set the previously discovered Edge path on the IE options.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在IE选项中设置了先前发现的Edge路径。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO22-6)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO22-6)'
- en: We create the driver instance to use Internet Explorer (which will actually
    be Edge in IE mode).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建驱动程序实例来使用Internet Explorer（实际上将是IE模式中的Edge）。
- en: The Chrome DevTools Protocol
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome开发者工具协议
- en: '[Chrome DevTools](https://developer.chrome.com/docs/devtools) is a set of web
    developer tools for Chromium-based web browsers, such as Chrome and Edge. These
    tools allow inspecting, debugging, or profiling these browsers, among other functions.
    The [Chrome DevTools Protocol (CDP)](https://chromedevtools.github.io/devtools-protocol)
    is a communication protocol that allows the manipulation of the Chrome DevTools
    by external clients. Firefox implements a subset of the CDP to support automation
    tools like Selenium WebDriver.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '[Chrome DevTools](https://developer.chrome.com/docs/devtools) 是一组针对基于 Chromium
    的浏览器（如 Chrome 和 Edge）的 web 开发工具。这些工具允许检查、调试或分析这些浏览器，以及其他功能。[Chrome DevTools Protocol
    (CDP)](https://chromedevtools.github.io/devtools-protocol) 是一种通信协议，允许外部客户端操作 Chrome
    DevTools。Firefox 实现了 CDP 的子集，以支持像 Selenium WebDriver 这样的自动化工具。'
- en: There are two ways to use CDP in Selenium WebDriver. As of version 4, Selenium
    WebDriver provides the interface `HasDevTools` for sending CDP commands to the
    browser. This interface is implemented by `ChromiumDriver` (used for Chrome and
    Edge) and `FirefoxDriver` (for Firefox). This mechanism is quite powerful since
    it provides direct access to the CDP with Selenium WebDriver. Nevertheless, it
    has a relevant limitation since it is tied to both the browser type and version.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Selenium WebDriver 中使用 CDP 有两种方式。从版本 4 开始，Selenium WebDriver 提供了 `HasDevTools`
    接口，用于向浏览器发送 CDP 命令。这个接口由 `ChromiumDriver`（用于 Chrome 和 Edge）和 `FirefoxDriver`（用于
    Firefox）实现。这种机制非常强大，因为它直接提供了与 Selenium WebDriver 结合使用 CDP 的访问权限。然而，它也有一个重要的限制，即与浏览器类型和版本紧密耦合。
- en: For this reason, the Selenium WebDriver API provides a second way to use the
    CDP, based on a set of wrapper classes built on top of CDP for advanced manipulation
    of the browsers. These wrappers allow different operations, such as network traffic
    interception or basic and digest authentication. The following subsection explains
    these wrappers. After that, I present several examples for using the CDP commands
    directly.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Selenium WebDriver API 提供了第二种使用 Chrome DevTools 协议（CDP）的方式，基于一组在浏览器上构建的包装类，用于高级浏览器操作。这些包装类允许执行不同的操作，如网络流量拦截或基本和摘要认证。下面的子节解释了这些包装类。之后，我会展示几个直接使用
    CDP 命令的例子。
- en: CDP Selenium Wrappers
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CDP Selenium 包装类
- en: The Selenium WebDriver API contains a group of helper classes that wraps some
    of the CDP commands. These classes aim to provide a friendly API enabling advanced
    features for Selenium WebDriver tests.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 包含一组辅助类，包装了部分 CDP 命令。这些类旨在为 Selenium WebDriver 测试提供友好的
    API，支持高级功能。
- en: Network interceptor
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络拦截器
- en: 'The first wrapper class built on top of CDP is called `NetworkInterceptor`.
    This class allows stubbing the backend requests, intercepting network traffic,
    and returning pre-canned responses. This feature might help to simplify complex
    end-to-end tests by mocking external calls with fast, straightforward responses.
    To instantiate `Network ​In⁠terceptor`, we need to specify parameters in its constructor
    (see [Example 5-29](#network_interceptor)):'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个构建在 CDP 之上的包装类称为 `NetworkInterceptor`。这个类允许桩后端请求、拦截网络流量并返回预先准备好的响应。这个特性可能通过使用快速、直接的响应来模拟外部调用，简化复杂的端到端测试。要实例化
    `NetworkInterceptor`，需要在其构造函数中指定参数（参见 [示例 5-29](#network_interceptor)）：
- en: A `WebDriver` object that implements the CDP (i.e., `ChromeDriver` or `EdgeDriver`)
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了 CDP 的 `WebDriver` 对象（例如 `ChromeDriver` 或 `EdgeDriver`）
- en: A `Route` object to map the network requests to responses
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Route` 对象用于将网络请求映射到响应'
- en: Example 5-29\. Test intercepting network traffic using NetworkInterceptor
  id: totrans-426
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-29\. 使用 NetworkInterceptor 测试拦截网络流量
- en: '[PRE50]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO23-1)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO23-1)'
- en: We load a local image stored as a test resource in the Java project.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载一个存储在 Java 项目中作为测试资源的本地图像。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO23-2)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO23-2)'
- en: We create a network interceptor instance, creating a route for all the requests
    ending in `.png`, and stubbing this request with a new response, in this case
    sending the content of the previous picture.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个网络拦截器实例，为所有以 `.png` 结尾的请求创建一个路由，并通过新的响应打桩这个请求，在这种情况下发送前一张图片的内容。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO23-3)'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO23-3)'
- en: We open the practice site.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开实践站点。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO23-4)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO23-4)'
- en: If the interception works as expected, the image on the page should have a width
    higher than the original logo.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拦截正常工作，页面上的图片应该比原始的徽标宽。
- en: Note
  id: totrans-436
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A `DevToolsException` will be thrown if a browser different than Chrome or Edge
    (such as Firefox) is used with previous code.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用与前述代码不同的浏览器（如 Firefox），将抛出`DevToolsException`异常。
- en: Basic and digest authentication
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本认证和摘要认证
- en: 'HTTP provides two built-in mechanisms for recognizing a user’s identity, called
    *basic* and *digest* authentication. Both methods allow specifying the user’s
    credential using a pair of values: username and password. The difference between
    them is how they communicate the credentials. On the one hand, the digest authentication
    method sends encrypted credentials by applying a hash function to username and
    password. On the other hand, basic authentication uses Base64 to encode (not encrypt)
    the credentials.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 提供了两种内置机制来识别用户身份，称为*基本*和*摘要*认证。这两种方法允许使用一对值（用户名和密码）来指定用户的凭据。它们之间的区别在于它们如何传递凭据。一方面，摘要认证方法通过将用户名和密码应用哈希函数发送加密的凭据。另一方面，基本认证使用Base64编码（而非加密）凭据。
- en: Selenium WebDriver provides the interface `HasAuthentication` to seamlessly
    implement basic and digest authentication. [Example 5-30](#basic_auth) shows a
    test using Chrome and basic authentication. You can use the exact mechanism with
    Edge and digest authentication (see the complete test in the [example repository](https://github.com/bonigarcia/selenium-webdriver-java)).
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 提供了`HasAuthentication`接口以无缝实现基本和摘要认证。[示例 5-30](#basic_auth)展示了使用
    Chrome 和基本认证的测试。您可以在 Edge 和摘要认证中使用相同的机制（详见[示例库](https://github.com/bonigarcia/selenium-webdriver-java)的完整测试）。
- en: Example 5-30\. Test using basic authentication with Chrome
  id: totrans-441
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-30\. 使用 Chrome 进行基本认证测试
- en: '[PRE51]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO24-1)'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO24-1)'
- en: We cast the driver object to `HasAuthentication` and register the credentials
    (username and password).
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为`HasAuthentication`并注册凭据（用户名和密码）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO24-2)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO24-2)'
- en: We open a website protected with basic authentication.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开了一个使用基本认证保护的网站。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO24-3)'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO24-3)'
- en: We verify the page content is available.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证页面内容是否可用。
- en: When using other browsers (such as Firefox), we cannot cast the driver object
    to `HasAuthentication`. Nevertheless, there is a general way to send the credentials
    in the URL using the syntax `protocol://username:password@domain`. [Example 5-31](#basic_auth_generic)
    demonstrates this use.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用其他浏览器（如 Firefox）时，我们无法将驱动对象转换为`HasAuthentication`。尽管如此，可以使用URL中的语法`protocol://username:password@domain`来发送凭据。[示例 5-31](#basic_auth_generic)展示了此用法。
- en: Example 5-31\. Test using basic authentication and Firefox
  id: totrans-450
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-31\. 使用基本认证和 Firefox 进行测试
- en: '[PRE52]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: CDP Raw Commands
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CDP 原始命令
- en: As of version 4, Selenium WebDriver provides the interface `HasDevTools` for
    using the CDP directly. This interface is implemented by `ChromiumDriver` (used
    for Chrome and Edge) and `FirefoxDriver` (for Firefox). To use this feature, we
    first need to open a CDP session (i.e., a WebSocket connection between the client
    and the browser) using the method `createSession()` of a `DevTools` instance.
    [Example 5-32](#cdp_open_close) shows the recommended structure for using CDP
    in Selenium WebDriver tests. As you can see, the CDP session is created in the
    test setup and closed in the teardown. Each test will use the class attribute
    `devTools` to interact with the Chrome DevTools.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本4起，Selenium WebDriver 提供了`HasDevTools`接口来直接使用CDP。该接口由`ChromiumDriver`（用于
    Chrome 和 Edge）和`FirefoxDriver`（用于 Firefox）实现。要使用此功能，我们首先需要使用`DevTools`实例的`createSession()`方法打开CDP会话（即客户端与浏览器之间的WebSocket连接）。[示例 5-32](#cdp_open_close)展示了在Selenium
    WebDriver测试中使用CDP的推荐结构。正如您所见，CDP会话在测试设置中创建，并在拆卸时关闭。每个测试将使用类属性`devTools`与Chrome
    DevTools交互。
- en: Example 5-32\. Test structure to use Chrome DevTools
  id: totrans-454
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-32\. 使用 Chrome DevTools 进行测试结构
- en: '[PRE53]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO25-1)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO25-1)'
- en: We declare a `DevTools` class attribute.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个`DevTools`类属性。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO25-2)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO25-2)'
- en: We get the `DevTools` instance from the driver object. In this example (and
    the rest), I use `ChromeDriver` (although `EdgeDriver` instances would also be
    valid).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从驱动对象中获取`DevTools`实例。在本示例（以及其他示例中），我使用`ChromeDriver`（尽管`EdgeDriver`实例也是有效的）。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO25-3)'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO25-3)'
- en: We create a CDP session to interact with Chrome DevTools in the test logic.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 CDP 会话以在测试逻辑中与 Chrome DevTools 交互。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO25-4)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO25-4)'
- en: After each test and before quitting the WebDriver session, we terminate the
    CDP session.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 每次测试结束并退出 WebDriver 会话之前，我们终止 CDP 会话。
- en: The following subsections present several examples that illustrate the potential
    of DevTools in WebDriver tests. In these examples, we use an instance of `DevTools`
    for sending CDP commands using the method `send()`. The Selenium WebDriver API
    provides various commands that allow different operations for testing web applications,
    such as emulating network conditions, handling HTTP headers, blocking URLs, etc.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的小节展示了几个示例，说明了 WebDriver 测试中 DevTools 的潜力。在这些示例中，我们使用 `DevTools` 实例通过 `send()`
    方法发送 CDP 命令。Selenium WebDriver API 提供了各种命令，允许进行不同的操作，如模拟网络条件、处理 HTTP 标头、阻止 URL
    等。
- en: Warning
  id: totrans-465
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The Selenium WebDriver tests using the raw CDP commands (as explained in the
    following subsections) are tied to a given browser version. You can see this version
    by inspecting the import clauses (e.g., `import org.openqa.selenium.devtools.v96.*;`)
    in the complete tests available in the examples repository.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始 CDP 命令的 Selenium WebDriver 测试（如下一节中所述）与特定的浏览器版本相关联。您可以通过检查导入子句（例如 `import
    org.openqa.selenium.devtools.v96.*;`）来查看此版本，在示例存储库中提供了完整的测试。
- en: Emulate network conditions
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟网络条件。
- en: 'The CDP allows the emulation of different networks (such as mobile 2G/3G/4G,
    WiFi, or Bluetooth, among others) and conditions (e.g., latency or throughput).
    This feature can be helpful to test the behavior of web applications under specific
    connectivity parameters. [Example 5-33](#cdp_emulate_network) shows a test using
    this feature. As you can see, this test sends two CDP commands:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 允许模拟不同网络（如移动 2G/3G/4G、WiFi 或蓝牙等）和条件（例如延迟或吞吐量）。这个功能对于测试特定连接参数下的 Web 应用行为非常有用。[示例 5-33](#cdp_emulate_network)
    展示了使用此功能的测试。如您所见，此测试发送了两个 CDP 命令：
- en: '`Network.enable()`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`Network.enable()`'
- en: 'To activate network tracking. This command has three optional arguments:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活网络跟踪。此命令有三个可选参数：
- en: '`Optional<Integer> maxTotalBufferSize`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional<Integer> maxTotalBufferSize`'
- en: Maximum buffer size (in bytes) for network payloads.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 网络有效载荷的最大缓冲区大小（以字节为单位）。
- en: '`Optional<Integer> maxResourceBufferSize`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional<Integer> maxResourceBufferSize`'
- en: Maximum buffer size (in bytes) for single resources.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 单个资源的最大缓冲区大小（以字节为单位）。
- en: '`Optional<Integer> maxPostDataSize`'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional<Integer> maxPostDataSize`'
- en: Longest post body size (in bytes).
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 最长的请求正文大小（以字节为单位）。
- en: '`Network.emulateNetworkConditions()`'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`Network.emulateNetworkConditions()`'
- en: 'To activate network emulation. The emulated conditions are specified using
    the following parameters:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活网络仿真。使用以下参数指定仿真条件：
- en: '`Boolean offline`'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`Boolean offline`'
- en: 'To emulate no connection to the internet. `Number latency`: Minimum latency
    (in ms) from request to response.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟无互联网连接。 `Number latency`：请求到响应的最小延迟（以毫秒为单位）。
- en: '`Number downloadThroughput`'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`Number downloadThroughput`'
- en: Maximal download throughput (in bytes/sec). `-1` disables download throttling.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 最大下载吞吐量（以字节/秒为单位）。`-1` 禁用下载限制。
- en: '`Number uploadThroughput`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`Number uploadThroughput`'
- en: Maximal upload throughput (in bytes/sec). `-1` disables upload throttling.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 最大上传吞吐量（以字节/秒为单位）。`-1` 禁用上传限制。
- en: '`Optional<ConnectionType> connectionType`'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`Optional<ConnectionType> connectionType`'
- en: 'Emulated connection technology. The enumeration `ConnectionType` accepts the
    following options: `NONE`, `CELLULAR2G`, `CELLULAR3G`, `CELLULAR4G`, `BLUETOOTH`,
    `ETHERNET`, `WIFI`, `WIMAX`, and `OTHER`.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟连接技术。枚举 `ConnectionType` 接受以下选项：`NONE`、`CELLULAR2G`、`CELLULAR3G`、`CELLULAR4G`、`BLUETOOTH`、`ETHERNET`、`WIFI`、`WIMAX`
    和 `OTHER`。
- en: Example 5-33\. Test emulating network conditions
  id: totrans-487
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-33\. 测试模拟网络条件
- en: '[PRE54]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO26-1)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO26-1)'
- en: We activate network tracking (without tuning any network parameter).
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 我们激活网络跟踪（无需调整任何网络参数）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO26-2)'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO26-2)'
- en: We emulate a mobile 3G network with 50 KBps as download and upload bandwidth.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 50 KBps 的移动 3G 网络模拟下载和上传带宽。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO26-3)'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO26-3)'
- en: We get a system timestamp before loading a web page.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在加载网页之前获取系统时间戳。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO26-4)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO26-4)'
- en: We load the index page of the practice site.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载实践站点的索引页面。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO26-5)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO26-5)'
- en: We calculate the required time to load this page.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算加载此页面所需的时间。
- en: Network monitoring
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络监控
- en: We can also use the CDP to monitor network traffic when interacting with web
    pages. [Example 5-34](#cdp_network_monitoring) shows a test using this feature.
    This test uses the method `add​Lis⁠tener()` of a `DevTools` object to trace HTTP
    requests and responses.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 CDP 在与网页交互时监控网络流量。[示例 5-34](#cdp_network_monitoring) 展示了使用此功能的测试。此测试使用
    `DevTools` 对象的 `add​Lis⁠tener()` 方法来跟踪 HTTP 请求和响应。
- en: Example 5-34\. Test monitoring HTTP requests and responses
  id: totrans-501
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-34\. 监控 HTTP 请求和响应的测试
- en: '[PRE55]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO27-1)'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO27-1)'
- en: We create a listener for HTTP requests and log the captured data in the console.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 HTTP 请求监听器，并在控制台中记录捕获的数据。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO27-2)'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO27-2)'
- en: We create a listener for HTTP responses and log the captured data in the console.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 HTTP 响应监听器，并在控制台中记录捕获的数据。
- en: Full-page screenshot
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整页截图
- en: Another possible use of the CDP is making screenshots of a full page (i.e.,
    capture the content page beyond the viewport). [Example 5-35](#fullpage-screenshot-chrome)
    demonstrates this feature in Chrome.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 的另一个可能用途是制作整页截图（即捕获超出视口的内容页面）。[示例 5-35](#fullpage-screenshot-chrome) 在 Chrome
    中展示了此功能。
- en: Example 5-35\. Test making a full-page screenshot using CDP in Chrome
  id: totrans-509
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-35\. 在 Chrome 中使用 CDP 制作整页截图的测试
- en: '[PRE56]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO28-1)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO28-1)'
- en: We load the practice page containing a long text (and therefore, its content
    goes beyond the standard viewport).
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载包含长文本的练习页面（因此其内容超出标准视口）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO28-2)'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO28-2)'
- en: We wait until the paragraphs are loaded.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等待段落加载完成。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO28-3)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO28-3)'
- en: We get the page layout metrics (to calculate the page dimensions).
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取页面布局指标（以计算页面尺寸）。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO28-4)'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO28-4)'
- en: We send the CDP command to make a screenshot beyond the page viewport. As a
    result, we obtain the screenshot as a string in Base64.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发送 CDP 命令以截取超出页面视口的屏幕截图。结果，我们将截图以 Base64 字符串形式获取。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO28-5)'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO28-5)'
- en: We decode the Base64 content into a PNG file.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 Base64 内容解码为 PNG 文件。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO28-6)'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO28-6)'
- en: We assert the PNG file exists at the end of the test.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言测试结束时 PNG 文件存在。
- en: This feature is available in other browsers with a full implementation of the
    CDP, such as Chrome or Edge. Nevertheless, it might not be available in others
    like Firefox. Luckily, Firefox supports the same characteristic through the method
    `getFullPageScreenshotAs()` available in `FirefoxDriver` objects. [Example 5-36](#fullpage-screenshot-firefox)
    shows a test using this method and Firefox.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能在其他完全实现了 CDP 的浏览器（如 Chrome 或 Edge）中可用。然而，在 Firefox 等其他浏览器中可能不可用。幸运的是，Firefox
    通过 `FirefoxDriver` 对象中可用的 `getFullPageScreenshotAs()` 方法支持相同的特性。[示例 5-36](#fullpage-screenshot-firefox)
    展示了使用此方法和 Firefox 进行的测试。
- en: Example 5-36\. Test making a full-page screenshot using Firefox
  id: totrans-524
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-36\. 在 Firefox 中制作整页截图的测试
- en: '[PRE57]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO29-1)'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO29-1)'
- en: We make the whole page screenshot. As with the regular screenshots (see [Table 4-2](ch04.html#output-types-for-screenshots)
    in [Chapter 4](ch04.html#ch04)), the output type can be `FILE`, `BASE64`, or `BYTES`.
    We use the latter to get the screenshot as a byte array.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作整个页面的截图。与常规截图一样（见[第 4 章](ch04.html#ch04)中的[表 4-2](ch04.html#output-types-for-screenshots)），输出类型可以是
    `FILE`、`BASE64` 或 `BYTES`。我们使用后者将截图获取为字节数组。
- en: Performance metrics
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能指标
- en: CDP allows gathering runtime performance metrics, such as number of documents
    loaded, number of DOM nodes, time to load DOM, and script duration, among many
    others. [Example 5-37](#cdp_performance_metrics) shows a test gathering these
    metrics and showing them in the standard output.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 允许收集运行时性能指标，例如加载的文档数、DOM 节点数、加载 DOM 的时间以及脚本持续时间等，[示例 5-37](#cdp_performance_metrics)
    展示了一个收集这些指标并在标准输出中显示的测试。
- en: Example 5-37\. Test gathering performance metrics
  id: totrans-530
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 5-37\. 测试收集性能指标
- en: '[PRE58]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO30-1)'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO30-1)'
- en: We enable collecting metrics.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用收集指标。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO30-2)'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO30-2)'
- en: We gather all metrics.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收集所有指标。
- en: Extra headers
  id: totrans-536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的头部
- en: CDP allows additional headers at the HTTP level. To that aim, we need to send
    the command `Network.setExtraHTTPHeaders()` in a CDP session. [Example 5-38](#cdp_extra_headers)
    shows a test that uses this command to add the HTTP header `Authorization`, for
    sending credentials (username and password) in a web page that requires basic
    authentication to log in.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 允许在 HTTP 层面添加额外的头部。为此，我们需要在 CDP 会话中发送命令 `Network.setExtraHTTPHeaders()`。[例子 5-38](#cdp_extra_headers)
    展示了一个使用该命令来添加 HTTP 头部 `Authorization` 的测试，用于在需要基本认证登录的网页中发送凭据（用户名和密码）。
- en: Example 5-38\. Test adding extra HTTP headers
  id: totrans-538
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 5-38\. 测试添加额外的 HTTP 头部
- en: '[PRE59]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO31-1)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO31-1)'
- en: We encode the username and password in Base64.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用户名和密码进行 Base64 编码。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO31-2)'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO31-2)'
- en: We create the authorization header.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建授权头部。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO31-3)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO31-3)'
- en: We open a web page protected with basic authentication.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个使用基本认证保护的网页。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO31-4)'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO31-4)'
- en: We verify that the page is correctly displayed.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证页面是否正确显示。
- en: Block URLs
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阻止 URL
- en: CDP provides the ability to block given URLs in a session. [Example 5-39](#cdp_block_urls)
    provides a test blocking the practice web page logo URL. If you run this test
    and inspect the browser during the execution, you will discover that this logo
    is not displayed on the page.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 提供了在会话中阻止给定 URL 的能力。[例子 5-39](#cdp_block_urls) 提供了一个测试，阻止练习网页的 logo URL。如果你运行这个测试并在执行期间检查浏览器，你会发现该
    logo 不会显示在页面上。
- en: Example 5-39\. Test blocking a URL
  id: totrans-550
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 5-39\. 测试阻止 URL
- en: '[PRE60]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO32-1)'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO32-1)'
- en: We block a given URL.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 我们阻止给定的 URL。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO32-2)'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO32-2)'
- en: We create a listener to trace the failed events.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个监听器以追踪失败的事件。
- en: Device emulation
  id: totrans-556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设备模拟
- en: Another feature provided by CDP is the ability to emulate mobile devices (e.g.,
    smartphones, tablets). [Example 5-40](#cdp_device_emulation) illustrates this
    usage. This test first overrides the user agent by sending the command `Network.setUserAgentOverride()`.
    Then, it emulates the device metrics sending the command `Emulation.setDeviceMetrics​O⁠verride`.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 提供的另一个功能是模拟移动设备（例如智能手机、平板电脑）的能力。[例子 5-40](#cdp_device_emulation) 说明了这个用法。该测试首先通过发送命令
    `Network.setUserAgentOverride()` 来覆盖用户代理，然后通过发送命令 `Emulation.setDeviceMetricsOverride`
    来模拟设备指标。
- en: Example 5-40\. Test emulating a mobile device
  id: totrans-558
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 5-40\. 测试模拟移动设备
- en: '[PRE61]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO33-1)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO33-1)'
- en: We override the user agent for emulating an Apple iPhone 6.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 我们覆盖用户代理以模拟苹果 iPhone 6。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO33-2)'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO33-2)'
- en: We override the device screen parameters.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们覆盖设备屏幕参数。
- en: Console listeners
  id: totrans-564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台监听器
- en: CDP allows you to implement listeners to monitor console events, i.e., a web
    page JavaScript log and error traces. [Example 5-41](#cdp_console_listener) shows
    the test. This test uses a web page in the practice site that intentionally traces
    several JavaScript messages (using the commands `console.log()`, `console.error()`,
    etc.) and also throws a JavaScript exception.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 允许您实现监听器以监视控制台事件，即网页 JavaScript 的日志和错误追踪。[例子 5-41](#cdp_console_listener)
    展示了这个测试。该测试使用了一个在练习站点中意图追踪多个 JavaScript 消息（使用命令 `console.log()`、`console.error()`
    等）并抛出 JavaScript 异常的网页。
- en: Example 5-41\. Test listening to console events
  id: totrans-566
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子 5-41\. 测试监听控制台事件
- en: '[PRE62]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO34-1)'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO34-1)'
- en: We create a listener for console events.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个控制台事件监听器。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO34-2)'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO34-2)'
- en: We create another listener for JavaScript errors.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 JavaScript 错误创建另一个监听器。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO34-3)'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO34-3)'
- en: We open the practice page that writes messages in the browser console.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个在浏览器控制台中写入消息的练习页面。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO34-4)'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO34-4)'
- en: We wait a maximum of five seconds until a console event is received.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等待最多五秒，直到收到一个控制台事件。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO34-5)'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO34-5)'
- en: We write the information on the received console event in the standard output.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在标准输出中写入接收到的控制台事件的信息。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO34-6)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO34-6)'
- en: We repeat the same procedure for the JavaScript exceptions.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 JavaScript 异常重复相同的过程。
- en: Geolocation override
  id: totrans-580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地理位置覆盖
- en: 'Another feature provided by CDP is the ability to override the geolocation
    coordinates handled by the hosting device. [Example 5-42](#cdp_geolocation_override)
    demonstrates how to do it. This test sends the command `Emulation.setGeolocationOverride()`,
    which accepts three optional arguments: latitude, longitude, and accuracy.'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 提供的另一个功能是能够覆盖主机设备处理的地理位置坐标。示例 5-42 展示了如何做到这一点。此测试发送命令 `Emulation.setGeolocationOverride()`，接受三个可选参数：纬度、经度和准确度。
- en: Example 5-42\. Test overriding location coordinates
  id: totrans-582
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-42。覆盖位置坐标的测试
- en: '[PRE63]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO35-1)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO35-1)'
- en: We override the geographical location using the coordinates of the Eiffel Tower
    (Paris, France).
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用埃菲尔铁塔的坐标（法国巴黎）覆盖地理位置。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO35-2)'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO35-2)'
- en: We open a practice web page that accesses the device location and displays the
    coordinates to the user.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个访问设备位置并向用户显示坐标的练习网页。
- en: Manage cookies
  id: totrans-588
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理 cookies
- en: CDP also allows managing web cookies. [Example 5-43](#cdp_cookies) shows a test
    reading the cookies of a practice page that manages some cookies.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 还允许管理 Web cookies。示例 5-43 显示了读取管理一些 cookies 的练习页面的测试。
- en: Example 5-43\. Test managing cookies
  id: totrans-590
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-43。管理 cookies 的测试
- en: '[PRE64]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO36-1)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO36-1)'
- en: We read all the cookies of a web page.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取网页的所有 cookies。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO36-2)'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO36-2)'
- en: We verify that the cookies read using the CDP command and the cookies read with
    the Selenium WebDriver API (using `getCookies();`) are the same.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证使用 CDP 命令读取的 cookies 和使用 Selenium WebDriver API（使用 `getCookies();`）读取的 cookies
    是否相同。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO36-3)'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO36-3)'
- en: We remove all cookies.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除所有 cookies。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO36-4)'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO36-4)'
- en: We verify there are no cookies at this point.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证此时没有任何 cookies。
- en: Load insecure pages
  id: totrans-600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载不安全的页面
- en: CDP also allows you to load unsafe web pages (i.e., web pages that use HTTPS,
    but whose certificate is not valid). [Example 5-44](#cdp_insecure) illustrates
    this feature.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: CDP 还允许您加载不安全的网页（即，使用 HTTPS 的网页，但其证书无效）。示例 5-44 说明了这个功能。
- en: Example 5-44\. Test loading an insecure web page
  id: totrans-602
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-44。测试加载不安全的网页
- en: '[PRE65]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO37-1)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO37-1)'
- en: We enable tracking security.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启用跟踪安全性。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO37-2)'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO37-2)'
- en: We ignore certificate errors.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忽略证书错误。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO37-3)'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO37-3)'
- en: We verify the page is correctly loaded.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证页面是否正确加载。
- en: Location Context
  id: totrans-610
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置上下文
- en: The Selenium WebDriver API provides the interface `LocationContext` for mocking
    the geolocation coordinates of the user device. This interface is implemented
    by `ChromeDriver`, `EdgeDriver`, and `OperaDriver`. Therefore, these drivers can
    invoke the method `setLocation()` to specify custom coordinates (latitude, longitude,
    and altitude). [Example 5-45](#location_context) shows a basic test using this
    feature.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 为模拟用户设备地理位置坐标提供了接口 `LocationContext`。此接口由 `ChromeDriver`、`EdgeDriver`
    和 `OperaDriver` 实现。因此，这些驱动程序可以调用方法 `setLocation()` 来指定自定义坐标（纬度、经度和高度）。示例 5-45
    展示了使用此功能的基本测试。
- en: Example 5-45\. Test setting custom geolocation coordinates through LocationContext
  id: totrans-612
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-45。通过 LocationContext 设置自定义地理位置坐标的测试
- en: '[PRE66]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO38-1)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO38-1)'
- en: We cast the driver object to `LocationContext` (only possible for Chrome, Edge,
    or Opera).
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为`LocationContext`（仅适用于Chrome、Edge或Opera）。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO38-2)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO38-2)'
- en: We open a practice page where the geolocation coordinates are displayed to the
    end user.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个实践页面，显示地理位置坐标给最终用户。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO38-3)'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO38-3)'
- en: We set a custom location, in this case, the coordinates of Mount Everest (on
    the Nepal-China border).
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置自定义位置，即珠穆朗玛峰的坐标（位于尼泊尔与中国边境上）。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO38-4)'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO38-4)'
- en: We assert the coordinates are visible on the page.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言页面上可见坐标。
- en: Web Authentication
  id: totrans-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web认证
- en: The Web Authentication API (also known as *WebAuthn*) is a [W3C specification](https://www.w3.org/TR/webauthn-2)
    that allows servers to register and authenticate users using public key cryptography
    instead of passwords. Major browsers (Chrome, Firefox, Edge, and Safari) have
    supported WebAuthn since January 2019\. These browsers allow credential creation
    and assertion using U2F (Universal 2nd Factor) tokens, which are Universal Serial
    Bus (USB) or Near-Field Communication (NFC) secure devices.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: Web认证API（也称为*WebAuthn*）是一项[W3C规范](https://www.w3.org/TR/webauthn-2)，允许服务器使用公钥加密而不是密码来注册和认证用户。自2019年1月起，主要浏览器（Chrome、Firefox、Edge和Safari）已支持WebAuthn。这些浏览器允许使用U2F（Universal
    2nd Factor）令牌进行凭据创建和断言，这些令牌是通用串行总线（USB）或近场通信（NFC）安全设备。
- en: In the classic web authentication approach, users send their username and password
    to the server using a web form. In WebAuthn, the web server uses the Web Authentication
    API to prompt the user to create a private-public key pair (known as a *credential*).
    The private key is stored securely on the user’s device, and the public key is
    sent to the server. Then, the server can use that public key to validate user
    identity.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的Web认证方法中，用户通过Web表单将其用户名和密码发送到服务器。在WebAuthn中，Web服务器使用Web认证API提示用户创建私钥-公钥对（称为*凭据*）。私钥安全存储在用户设备上，而公钥则发送到服务器。然后，服务器可以使用该公钥验证用户身份。
- en: As of version 4, Selenium WebDriver supports *WebAuthn* out of the box. To that
    aim, the Selenium WebDriver API provides the interface `HasVirtualAuthenticator`.
    Instead of using secure physical devices, this interface allows us to use virtual
    authenticators. Although the `RemoteWebDriver` class implements this interface,
    at the time of this writing, this mechanism is supported only in Chromium-based
    browsers, i.e., Chrome and Edge. [Example 5-46](#webauthn_test) shows a test using
    the Web Authentication API.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本4开始，Selenium WebDriver直接支持*WebAuthn*。为此，Selenium WebDriver API提供了`HasVirtualAuthenticator`接口。这个接口允许我们使用虚拟认证器，而不是使用安全物理设备。虽然`RemoteWebDriver`类实现了这个接口，在撰写本文时，这种机制仅在基于Chromium的浏览器（例如Chrome和Edge）中受支持。[示例 5-46](#webauthn_test)展示了使用Web认证API的测试。
- en: Example 5-46\. Test using WebAuthn
  id: totrans-626
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-46\. 使用WebAuthn进行测试
- en: '[PRE67]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO39-1)'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO39-1)'
- en: We open a website protected with the Web Authentication API.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个使用Web认证API保护的网站。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO39-2)'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO39-2)'
- en: We cast the driver object to `HasVirtualAuthenticator`.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为`HasVirtualAuthenticator`。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO39-3)'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO39-3)'
- en: We create and register a new virtual authenticator.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并注册一个新的虚拟认证器。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO39-4)'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO39-4)'
- en: We send a random identifier in the web form.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Web表单中发送一个随机标识符。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO39-5)'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO39-5)'
- en: We submit that identifier and wait until it is received.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提交该标识符并等待接收。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO39-6)'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO39-6)'
- en: We click the button to log in.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击按钮登录。
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO39-7)'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO39-7)'
- en: We verify the authentication has been correctly performed.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证认证已正确执行。
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO39-8)'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO39-8)'
- en: We remove the virtual authenticator.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除虚拟认证器。
- en: Print Page
  id: totrans-644
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印页面
- en: Selenium WebDriver allows printing web pages to PDF documents. To do that, the
    Selenium WebDriver API provides the interface `PrintsPage`. This interface is
    inherited by the class `RemoteWebDriver`, and therefore, it is available for all
    browsers supported by Selenium WebDriver. Nevertheless, there are slight differences
    when using one or another browser. For instance, printing pages is possible when
    using Chrome and Edge only if the browser is started in headless mode. For Firefox,
    this restriction is not required, and we can use Firefox as usual. [Example 5-47](#print_page)
    shows the test logic for printing a web page to PDF. You can find the complete
    tests for Firefox and headless Chrome/Edge in the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java).
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 允许将网页打印为 PDF 文档。为此，Selenium WebDriver API 提供了`PrintsPage`接口。这个接口由类`RemoteWebDriver`继承，因此，它适用于
    Selenium WebDriver 支持的所有浏览器。然而，当使用不同浏览器时存在细微差异。例如，只有在 Chrome 和 Edge 中以无头模式启动浏览器时才能打印页面。对于
    Firefox，则不需要此限制，我们可以像平常一样使用 Firefox。[示例 5-47](#print_page) 展示了将网页打印为 PDF 的测试逻辑。您可以在[示例存储库](https://github.com/bonigarcia/selenium-webdriver-java)中找到
    Firefox 和无头 Chrome/Edge 的完整测试。
- en: Example 5-47\. Test printing a web page to PDF
  id: totrans-646
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-47\. 测试将网页打印为 PDF
- en: '[PRE68]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO40-1)'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO40-1)'
- en: We cast the driver object to `PrintsPage`.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为`PrintsPage`。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO40-2)'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO40-2)'
- en: We print the current web page to PDF using the default configuration.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用默认配置将当前网页打印为 PDF。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO40-3)'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO40-3)'
- en: We get the content of the PDF in Base64.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取 PDF 的内容并转换为 Base64。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO40-4)'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO40-4)'
- en: We verify this content contains the file signature (the “magic word” `JVBER`).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证这个内容是否包含文件签名（“魔术词”`JVBER`）。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO40-5)'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO40-5)'
- en: We convert the Base64 to a raw byte array.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 Base64 转换为原始字节数组。
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO40-6)'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO40-6)'
- en: We write the PDF content (byte array) to a local file.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 PDF 内容（字节数组）写入本地文件。
- en: WebDriver BiDi
  id: totrans-660
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebDriver BiDi
- en: The [WebDriver BiDi](https://w3c.github.io/webdriver-bidi) is a W3C draft that
    defines the bidirectional WebDriver protocol. Instead of the strict command/response
    format of the WebDriver protocol, BiDi introduces a WebSocket connection between
    driver and browser to enable bidirectional communication. This way, WebDriver
    BiDi will allow different operations using a fast bidirectional transport (i.e.,
    without polling the browser to get responses).
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '[WebDriver BiDi](https://w3c.github.io/webdriver-bidi) 是一个 W3C 草案，定义了双向 WebDriver
    协议。BiDi 引入了一个 WebSocket 连接，使驱动程序和浏览器之间可以进行双向通信，而不是 WebDriver 协议的严格命令/响应格式。这样，WebDriver
    BiDi 将允许使用快速的双向传输执行不同的操作（即，无需轮询浏览器以获取响应）。'
- en: 'In Selenium WebDriver, the aim is that BiDi will be a standardized replacement
    in the long run for advanced operations currently supported by CDP. For example,
    the Selenium WebDriver API supports implementing event listeners through the `HasLog​E⁠vents`
    interface. This interface works on top of CDP at the time of this writing. Nevertheless,
    it will use BiDi internally in future Selenium WebDriver releases, providing more
    robust cross-browser compatibility. `HasLogEvents` allows implementing listeners
    for the following events:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Selenium WebDriver 中，BiDi 的目标是长期替代目前由 CDP 支持的高级操作。例如，Selenium WebDriver API
    支持通过`HasLog​E⁠vents`接口实现事件监听器。在撰写本文时，该接口在 CDP 之上运行。然而，未来的 Selenium WebDriver 版本将在内部使用
    BiDi，提供更强大的跨浏览器兼容性。`HasLogEvents`允许实现以下事件的监听器：
- en: '`domMutation`'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '`domMutation`'
- en: To capture events about changes in the DOM. [Example 5-48](#webdriver_bidi_1)
    shows a test implementing a listener for these events.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获 DOM 中的变化事件。[示例 5-48](#webdriver_bidi_1) 展示了一个实现此类事件监听器的测试。
- en: '`consoleEvent`'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '`consoleEvent`'
- en: To capture events about changes in the browser console, such as JavaScript traces.
    [Example 5-49](#webdriver_bidi_2) shows a second test implementing this type of
    listener.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获浏览器控制台的变化事件，比如 JavaScript 的跟踪。[示例 5-49](#webdriver_bidi_2) 展示了第二个实现这种类型监听器的测试。
- en: Example 5-48\. Test implementing a listener for DOM mutation events
  id: totrans-667
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-48\. 测试实现 DOM 变异事件的监听器
- en: '[PRE69]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO41-1)'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO41-1)'
- en: We cast the driver object to `HasLogEvents`. This cast is only possible for
    Chrome and Edge.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为`HasLogEvents`。此转换仅适用于Chrome和Edge浏览器。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO41-2)'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO41-2)'
- en: We create a listener for DOM mutation events. This test expects to capture only
    one event, synchronized using a countdown latch.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个监听器以捕获DOM变化事件。这个测试期望仅捕获一个事件，使用倒计时锁定来同步。
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO41-3)'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO41-3)'
- en: We force a DOM mutation by executing JavaScript to change an image source.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过执行JavaScript强制DOM变化来改变图像来源。
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO41-4)'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO41-4)'
- en: We verify the event occurs at most in 10 seconds.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证事件最多在10秒内发生。
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO41-5)'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO41-5)'
- en: We check the image source has changed.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查了图片来源已经改变。
- en: Example 5-49\. Test implementing a listener for console events
  id: totrans-679
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 5-49\. 实现一个监听器以捕获控制台事件
- en: '[PRE70]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO42-1)'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO42-1)'
- en: We create a listener for console events. This test expects to capture four events
    synchronized using a countdown latch.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个监听器来捕获控制台事件。这个测试期望使用倒计时锁定来同步捕获四个事件。
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO42-2)'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO42-2)'
- en: We open the practice web page, which logs several messages in the JavaScript
    console.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开了实践网页，该网页在JavaScript控制台中记录了几条消息。
- en: Summary and Outlook
  id: totrans-685
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要与展望
- en: This chapter presented a practical overview of the Selenium WebDriver API features
    that are not interoperable among browsers. First, you discovered how to use capabilities
    to run browsers in headless mode, change the page loading strategy, use web extensions,
    or manage browser pop-ups (e.g., geolocation, notifications, or getting user media),
    among other capabilities. Then, you learned that Selenium WebDriver provides different
    ways to interact with web browsers using the CDP. This mechanism allows incorporating
    a lot of powerful features in our Selenium WebDriver tests, such as emulating
    network conditions, basic and digest authentication, network monitoring, handling
    HTTP headers, or blocking URLs, to name a few. Then, you discovered other browser-specific
    features, such as location context, web authentication (WebAuthn), and printing
    web pages to PDF documents. Finally, you learned about WebDriver BiDi, a draft
    standardization that defines bidirectional communication with browsers for automation
    purposes. BiDi is in an early stage at the time of this writing. The aim is that
    Selenium WebDriver will support different standard features on top of BiDi in
    future releases.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Selenium WebDriver API的实际概述，这些功能在各种浏览器之间不兼容。首先，您了解到如何使用能力在无头模式下运行浏览器，更改页面加载策略，使用Web扩展或管理浏览器弹出窗口（例如地理位置、通知或获取用户媒体等），以及其他能力。然后，您了解到Selenium
    WebDriver提供了使用CDP与Web浏览器交互的不同方式。这种机制允许在Selenium WebDriver测试中集成许多强大的功能，如模拟网络条件、基本和摘要身份验证、网络监控、处理HTTP头部或阻止URL等。然后，您了解到其他浏览器特定的功能，如位置上下文、Web认证（WebAuthn）和将网页打印成PDF文档。最后，您了解到WebDriver
    BiDi，这是一个草案标准化，用于定义与浏览器的双向通信，用于自动化目的。在撰写本文时，BiDi处于早期阶段。目标是在未来版本中，Selenium WebDriver将在BiDi之上支持不同的标准功能。
- en: The next chapter concludes our journey with the Selenium WebDriver API. The
    chapter explains how to use this API to control remote browsers. These browsers
    can be hosted on Selenium Grid, a cloud provider (e.g., Sauce Labs, BrowserStack,
    or CrossBrowserTesting), or executed in Docker containers.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章总结了我们与Selenium WebDriver API的旅程。该章节解释了如何使用这个API来控制远程浏览器。这些浏览器可以托管在Selenium
    Grid上，云提供商（例如Sauce Labs、BrowserStack或CrossBrowserTesting），或者在Docker容器中执行。
