- en: 'Chapter 3\. Know Your Variables: Primitives and References'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。了解你的变量：原始类型和引用
- en: '![image](Images/f0049-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0049-01.png)'
- en: 'Variables can store two types of things: primitives and references. So far
    you’ve used variables in two places—as object **state** (instance variables) and
    as **local** variables (variables declared within a *method*). Later, we’ll use
    variables as **arguments** (values sent to a method by the calling code), and
    as **return types** (values sent back to the caller of the method). You’ve seen
    variables declared as simple **primitive** integer values (type `int`). You’ve
    seen variables declared as something more **complex** like a String or an array.
    But **there’s gotta be more to life** than integers, Strings, and arrays. What
    if you have a PetOwner object with a Dog instance variable? Or a Car with an Engine?
    In this chapter we’ll unwrap the mysteries of Java types (like the difference
    between primited and references) and look at what you can *declare* as a variable,
    what you can *put* in a variable, and what you can *do* with a variable. And we’ll
    finally see what life is *truly* like on the garbage-collectible heap.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以存储两种类型的东西：原始类型和引用。到目前为止，你已经在两个地方使用变量——作为对象**状态**（实例变量）和作为**局部**变量（在*方法*中声明的变量）。稍后，我们将使用变量作为**参数**（由调用代码发送给方法的值），以及作为**返回类型**（发送回方法调用者的值）。你已经看到变量声明为简单的**原始**整数值（类型`int`）。你已经看到变量声明为更复杂的东西，比如一个String或一个数组。但**生活肯定还有更多**，不仅仅是整数、字符串和数组。如果你有一个PetOwner对象，其中有一个Dog实例变量呢？或者一个Car有一个Engine？在本章中，我们将揭开Java类型的神秘之处（比如原始类型和引用之间的区别），看看你可以*声明*为变量的内容，你可以*放入*变量的内容，以及你可以*对*变量做什么。最后，我们将看到在可回收堆上生活是*真正*的样子。
- en: Declaring a variable
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明一个变量
- en: '![image](Images/f0050-01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0050-01.png)'
- en: '**Java cares about type.** It won’t let you do something bizarre and dangerous
    like stuff a Giraffe reference into a Rabbit variable—what happens when someone
    tries to ask the so-called *Rabbit* to `hop()`? And it won’t let you put a floating-point
    number into an integer variable, unless you *tell the compiler* that you know
    you might lose precision (like, everything after the decimal point).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java关心类型。**它不会让你做一些奇怪和危险的事情，比如把长颈鹿引用塞进兔子变量中——当有人试图要求所谓的*兔子*去`hop()`时会发生什么？它也不会让你把浮点数放入整数变量中，除非你*告诉编译器*你知道可能会失去精度（比如，小数点后的一切）。'
- en: 'The compiler can spot most problems:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器可以发现大多数问题：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don’t expect that to compile. *Thankfully*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不要指望它能编译。*幸好*。
- en: 'For all this type-safety to work, you must declare the type of your variable.
    Is it an integer? a Dog? A single character? Variables come in two flavors: ***primitive***
    and ***object reference***. Primitives hold fundamental values (think: simple
    bit patterns) including integers, booleans, and floating-point numbers. Object
    references hold, well, *references* to *objects* (gee, didn’t *that* clear it
    up).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使所有这些类型安全起作用，你必须声明变量的类型。它是一个整数吗？一只狗？一个单个字符？变量有两种类型：***原始***和***对象引用***。原始类型保存基本值（想想：简单的位模式），包括整数、布尔值和浮点数。对象引用保存，嗯，*对象*的*引用*（哎呀，这难道不是解释清楚了吗）。
- en: 'We’ll look at primitives first and then move on to what an object reference
    really means. But regardless of the type, you must follow two declaration rules:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先看原始类型，然后再讨论对象引用的真正含义。但无论类型如何，你必须遵循两个声明规则：
- en: Besides a type, a variable needs a name so that you can use that name in code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了类型，变量需要一个名称，这样你可以在代码中使用该名称。
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**variables must have a type**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量必须有一个类型**'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Besides a type, a variable needs a name so that you can use that name in code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了类型，变量需要一个名称，这样你可以在代码中使用该名称。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**variables must have a name**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量必须有一个名称**'
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![image](Images/f0050-02.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0050-02.png)'
- en: 'Note: When you see a statement like: “an object of **type** X,” think of *type*
    and *class* as synonyms. (We’ll refine that a little more in later chapters.)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：当你看到类似于：“一个**类型**为X的对象”这样的陈述时，将*类型*和*类*视为同义词。（我们将在后面的章节中进一步细化这一点。）
- en: “I’d like a double mocha, no, make it an int.”
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “我想要一杯双份摩卡，不，把它变成一个整数。”
- en: When you think of Java variables, think of cups. Coffee cups, tea cups, giant
    cups that hold lots and lots of your favorite drink, those big cups the popcorn
    comes in at the movies, cups with wonderful tactile handles, and cups with metallic
    trim that you learned can never, ever go in the microwave.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到Java变量时，想象杯子。咖啡杯，茶杯，能装下很多你喜欢的饮料的巨大杯子，电影院里装爆米花的大杯子，带有美妙触感把手的杯子，以及你学会永远不能把金属装饰放进微波炉的杯子。
- en: '**A variable is just a cup. A container. It *holds* something.**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个变量只是一个杯子。一个容器。它 *容纳* 一些东西。**'
- en: 'It has a size and a type. In this chapter, we’re going to look first at the
    variables (cups) that hold **primitives**: then a little later we’ll look at cups
    that hold *references to objects*. Stay with us here on the whole cup analogy—as
    simple as it is right now, it’ll give us a common way to look at things when the
    discussion gets more complex. And that’ll happen soon.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个大小和一个类型。在这一章中，我们首先看看**原始类型**的变量（杯子），稍后我们将看看持有*对象引用*的杯子。请跟随我们继续使用整个杯子类比——尽管现在它很简单，但当讨论变得更复杂时，它会给我们提供一个共同的看待事物的方式。这很快就会发生。
- en: Primitives are like the cups they have at the coffee shop. If you’ve been to
    a Starbucks, you know what we’re talking about here. They come in different sizes,
    and each has a name like “short,” “tall,” and, “I’d like a ‘grande’ mocha half-caff
    with extra whipped cream.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本数据类型就像咖啡店里的杯子一样。如果你去过星巴克，你就知道我们在这里说什么。它们有不同的大小，并且每个都有一个名称，如“short”、“tall”，以及，“我想要一个‘grande’摩卡半加因为加了奶油。”
- en: 'You might see the cups displayed on the counter so you can order appropriately:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在柜台上展示的杯子可能会让你可以适当地下订单：
- en: '![image](Images/f0051-03.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0051-03.png)'
- en: And in Java, primitives come in different sizes, and those sizes have names.
    When you declare any variable in Java, you must declare it with a specific type.
    The four containers here are for the four integer primitives in Java.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 而在 Java 中，基本数据类型有不同的大小，这些大小有名称。当你在 Java 中声明任何变量时，必须使用特定的类型进行声明。这里的四个容器是 Java
    中的四种整数基本类型。
- en: '![image](Images/f0051-04.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0051-04.png)'
- en: 'Each cup holds a value, so for Java primitives, rather than saying, “I’d like
    a tall french roast,” you say to the compiler, “I’d like an int variable with
    the number 90 please.” Except for one tiny difference...in Java you also have
    to give your cup a *name*. So it’s actually, “I’d like an int please, with the
    value of 2486, and name the variable ***height***.” Each primitive variable has
    a fixed number of bits (cup size). The sizes for the six numeric primitives in
    Java are shown below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个杯子都包含一个值，所以对于 Java 的基本数据类型，与其说，“我想要一杯高法式浓缩”，不如对编译器说，“我想要一个带有数字 90 的 int 变量”。除了一个微小的区别……在
    Java 中，你还需要给你的杯子起个 *名字*。所以实际上是，“请给我一个 int，值为 2486，并且给这个变量起名为 ***height***。” 每个基本数据类型变量都有固定数量的位（杯子大小）。Java
    中六种数值基本类型的大小如下所示：
- en: '![image](Images/f0051-05.png)![image](Images/f0051-01.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0051-05.png)![image](Images/f0051-01.png)'
- en: Primitive Types
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始类型
- en: '| Type | Bit Depth | Value Range |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 位深度 | 值范围 |'
- en: '**boolean and char**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔和 char**'
- en: '| boolean | (JVM-specific) | ***true*** or ***false*** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| boolean | (特定于 JVM) | ***true*** 或 ***false*** |'
- en: '| char 16 | bits | 0 to 65535 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| char 16 | 位 | 0 到 65535 |'
- en: '**numeric (all are signed)**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**数值（所有都是有符号的）**'
- en: '***integer***'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '***整数***'
- en: '| byte | 8 bits | -128 to 127 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| byte | 8 位 | -128 到 127 |'
- en: '| short | 16 bits | -32768 to 32767 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| short | 16 位 | -32768 到 32767 |'
- en: '| int | 32 bits | -2147483648 to 2147483647 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| int | 32 位 | -2147483648 到 2147483647 |'
- en: '| long | 64 bits | -huge to huge |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| long | 64 位 | -huge 到 huge |'
- en: '***floating point***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '***浮点数***'
- en: '| float | 32 bits | varies |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| float | 32 位 | 变化 |'
- en: '| double | 64 bits | varies |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| double | 64 位 | 变化 |'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Primitive declarations with assignments:**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**具有赋值的原始声明：**'
- en: '![image](Images/f0051-02.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0051-02.png)'
- en: You really don’t want to spill that...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你真的不想把那个……
- en: '**Be sure the value can fit into the variable.**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**确保值能够适合变量。**'
- en: '![image](Images/f0052-01.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0052-01.png)'
- en: You can’t put a large value into a small cup.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能把一个大的值放进一个小杯子里。
- en: Well, OK, you can, but you’ll lose some. You’ll get, as we say, *spillage*.
    The compiler tries to help prevent this if it can tell from your code that something’s
    not going to fit in the container (variable/cup) you’re using.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，可以，但会有一些损失。你会得到一些，正如我们所说的，*溢出*。如果编译器能够从你的代码中判断出某些东西不适合放在你正在使用的容器（变量/杯子）中，它会尽力帮助防止这种情况。
- en: 'For example, you can’t pour an int-full of stuff into a byte-sized container,
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你不能把一个 int 的东西倒进一个 byte 大小的容器中，如下所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Why doesn’t this work, you ask? After all, the value of *x* is 24, and 24 is
    definitely small enough to fit into a byte. *You* know that, and *we* know that,
    but all the compiler cares about is that you’re trying to put a big thing into
    a small thing, and there’s the *possibility* of spilling. Don’t expect the compiler
    to know what the value of *x* is, even if you happen to be able to see it literally
    in your code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这不起作用，你会问？毕竟，*x*的值是24，而24绝对小得足以放入一个字节中。*你*知道，*我们*也知道，但编译器关心的只是你试图把大东西放到小东西里，并且可能溢出。不要指望编译器知道*x*的值，即使你在代码中能看到它的确切值。
- en: '**You can assign a value to a variable in one of several ways including:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '-   **你可以通过多种方式给变量赋值，包括：**'
- en: type a *literal* value after the equals sign (x=*12*, isGood = ***true***, etc.)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在等号后面输入一个*文字*值（x=*12*，isGood = ***true***，等等）
- en: assign the value of one variable to another (x = y)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个变量的值赋给另一个变量（x = y）
- en: use an expression combining the two (x = y + ***43***)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用结合两者的表达式（x = y + ***43***）
- en: 'In the examples below, the literal values are in bold italics:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，文字值以***粗体斜体***显示：
- en: '| int size = ***32***; | declare an int named *size*, assign it the value *32*
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| int size = ***32***; | 声明一个名为*size*的整数，将其赋值为*32*。'
- en: '| `char initial = ***''j'';***` | declare a char named *initial*, assign it
    the value *‘j’* |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `char initial = ***''j'';***` | 声明一个名为*initial*的字符，将其赋值为*‘j’*。'
- en: '| `double d = ***456.709;***` | declare a double named *d*, assign it the value
    *456.709* |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `double d = ***456.709;***` | 声明一个名为*d*的双精度数，将其赋值为*456.709*。'
- en: '| `boolean isLearning;` | declare a boolean named *isCrazy* (no assignment)
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `boolean isLearning;` | 声明一个名为*isCrazy*的布尔型（未赋值） |'
- en: '| `isLearning = ***true;***` | assign the value *true* to the previously declared
    *isCrazy* |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `isLearning = ***true;***` | 将值*true*赋给之前声明的*isCrazy* |'
- en: '| `int y = x + ***456***;` | declare an int named *y*, assign it the value
    that is the sum of whatever *x* is now plus *456* |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `int y = x + ***456***;` | 声明一个名为*y*的整数，将其赋值为当前*x*的值加*456*。'
- en: Back away from that keyword!
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远离关键字！
- en: '![image](Images/f0053-01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0053-01.png)'
- en: You know you need a name and a type for your variables.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道你的变量需要一个名称和一个类型。
- en: You already know the primitive types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了基本类型。
- en: '***But what can you use as names?*** The rules are simple. You can name a class,
    method, or variable according to the following rules (the real rules are slightly
    more flexible, but these will keep you safe):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '***那么你可以用什么作为名称呢？*** 规则很简单。你可以根据以下规则为类、方法或变量命名（实际规则略微灵活，但这些规则能保证你的安全）：'
- en: '**It must start with a letter, underscore (_), or dollar sign ($). You can’t
    start a name with a number.**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它必须以字母、下划线（_）或美元符号（$）开头。你不能以数字开头。**'
- en: '**After the first character, you can use numbers as well. Just don’t start
    it with a number.**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   **在第一个字符之后，你也可以使用数字。只是别以数字开头。**'
- en: '**It can be anything you like, subject to those two rules, just so long as
    it isn’t one of Java’s reserved words.**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它可以是任何你喜欢的东西，只要遵守这两条规则，只要不是Java的保留字。**'
- en: Reserved words are keywords (and other things) that the compiler recognizes.
    And if you really want to play confuse-a-compiler, then just *try* using a reserved
    word as a name.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 保留字是编译器识别的关键字（和其他东西）。如果你真的想搞乱编译器，那就*试*着用保留字作为名称。
- en: 'You’ve already seen some reserved words:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了一些保留字：
- en: '![image](Images/f0053-02.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0053-02.png)'
- en: But there are a lot more we haven’t discussed yet. Even if you don’t need to
    know what they mean, you still need to know you can’t use ’em yourself. ***Do
    not—****under any circumstances*—***try to memorize these now.*** To make room
    for these in your head, you’d probably have to lose something else. Like where
    your car is parked. Don’t worry, by the end of the book you’ll have most of them
    down cold.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有很多我们还没有讨论过的。即使你不需要知道它们的含义，你仍然需要知道自己不能自行使用它们。***绝对不要——****任何情况下*——***试图现在就记住这些***。为了在你的脑袋中为它们腾出空间，你可能得把其他东西忘了。比如你停车的地方。别担心，到这本书结束时，你会对它们大部分了如指掌的。
- en: '![image](Images/f0053-03.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0053-03.png)'
- en: This table reserved
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 此表格保留
- en: '| _ | catch | double | float | int | private | super | true |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| _ | 捕获 | 双精度 | 浮点 | 整数 | 私有 | 超级 | 真 |'
- en: '| abstract | char | else | for | interface | protected | switch | try |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 抽象 | 字符 | 否则 | 为 | 接口 | 受保护 | 开关 | 尝试 |'
- en: '| assert | class | enum | goto | long | public | synchronized | void |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 断言 | 类 | 枚举 | 跳转到 | 长 | 公共 | 同步 | 空 |'
- en: '| boolean | const | extends | if | native | return | this | volatile |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 | 常量 | 扩展 | 如果 | 本地 | 返回 | 这 | 易挥发性 |'
- en: '| break | continue | false | implements | new | short | throw | while |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| break | continue | false | implements | new | short | throw | while |'
- en: '| byte | default | final | import | null | static | throws |  |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| byte | default | final | import | null | static | throws |  |'
- en: '| case | do | finally | instanceof | package | strictfp | transient |  |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| case | do | finally | instanceof | package | strictfp | transient |  |'
- en: Java’s keywords, reserved words, and special identifiers. If you use these for
    names, the compiler will probably be very, *very* upset.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Java的关键字、保留字和特殊标识符。如果你用这些作为名称，编译器可能会非常，*非常*不高兴。
- en: Controlling your Dog object
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制你的Dog对象
- en: '![image](Images/f0054-01.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0054-01.png)'
- en: You know how to declare a primitive variable and assign it a value. But now
    what about non-primitive variables? In other words, *what about objects?*
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道如何声明一个原始变量并给它赋值。但是现在怎么处理非原始变量呢？换句话说，*对象呢？*
- en: '* * *'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: There is actually no such thing as an object variable.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上并不存在对象变量。
- en: There’s only an object reference variable.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有一个对象引用变量。
- en: An object reference variable holds bits that represent a way to *access* an
    object.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个对象引用变量保存代表*访问*对象的位。
- en: It doesn’t hold the object itself, but it holds something like a pointer. Or
    an address. Except, in Java we don’t really know *what* is inside a reference
    variable. We *do* know that whatever it is, it represents one and only one object.
    And the JVM knows how to use the reference to get to the object.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不保存对象本身，而是保存类似指针或地址的东西。不过，在Java中，我们并不真正知道*引用变量*里面是什么。我们*知道*它代表一个且仅一个对象。而JVM知道如何使用引用来访问对象。
- en: '* * *'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can’t stuff an object into a variable. We often think of it that way...we
    say things like, “I passed the String to the System.out.println() method.” Or,
    “The method returns a Dog” or, “I put a new Foo object into the variable named
    myFoo.”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能把一个对象塞进一个变量里。我们经常这样想...我们会说，“我把String传递给System.out.println()方法。”或者，“该方法返回一个Dog”，或者，“我把一个新的Foo对象放入名为myFoo的变量中。”
- en: But that’s not what happens. There aren’t giant expandable cups that can grow
    to the size of any object. Objects live in one place and one place only—the garbage-collectible
    heap! (You’ll learn more about that later in this chapter.)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实并非如此。并不存在可以随着对象大小增长的巨大可扩展杯子。对象只存在于一个地方——可垃圾回收的堆中！（你将在本章后面了解更多。）
- en: Although a primitive variable is full of bits representing the actual ***value***
    of the variable, an object reference variable is full of bits representing ***a
    way to get to the object.***
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然原始变量充满了代表变量实际***值***的位，但对象引用变量充满了代表***访问对象的方式***的位。
- en: 'You use the dot operator (.) on a reference variable to say, “use the thing
    *before* the dot to get me the thing *after* the dot.” For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在引用变量上使用点运算符（.）来表示，“使用点之前的东西*获取*点之后的东西。”例如：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: means, “use the object referenced by the variable myDog to invoke the bark()
    method.” When you use the dot operator on an object reference variable, think
    of it like pressing a button on the remote control for that object.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 意思是，“使用变量myDog引用的对象来调用bark()方法。”当你在对象引用变量上使用点运算符时，可以将其视为按下该对象的遥控器上的按钮。
- en: '![image](Images/f0055-01.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-01.png)'
- en: An object reference is just another variable value
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个对象引用只是另一个变量值
- en: '**Something that goes in a cup.**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**放入杯子里的东西。**'
- en: '**Only this time, the value is a remote control.**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**只是这一次，这个值是一个遥控器。**'
- en: '* * *'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Primitive Variable**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**原始变量**'
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The bits representing 7 go into the variable (00000111).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 代表7的位进入变量（00000111）。
- en: '![image](Images/f0055-02.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-02.png)'
- en: '* * *'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Reference Variable**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**引用变量**'
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The bits representing a way to get to the Dog object go into the variable.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 代表访问Dog对象的位进入变量。
- en: '***The Dog object itself does not go into the variable!***'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '***Dog对象本身并不进入变量！***'
- en: '![image](Images/f0055-03.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-03.png)'
- en: We don’t care how many 1s and 0s there are in a reference variable. It’s up
    to each JVM and the phase of the moon.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不关心引用变量中有多少个1和0。这取决于每个JVM和月相。
- en: '**The 3 steps of object declaration, creation and assignment**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象声明、创建和赋值的3个步骤**'
- en: '![image](Images/f0055-01a.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-01a.png)'
- en: '![Images](Images/1circlea.png) **Declare a reference variable**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlea.png) **声明一个引用变量**'
- en: '![image](Images/f0055-04.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-04.png)'
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tells the JVM to allocate space for a reference variable, and names that variable
    *myDog*. The reference variable is, forever, of type Dog. In other words, a remote
    control that has buttons to control a Dog, but not a Cat or a Button or a Socket.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉JVM为一个引用变量分配空间，并将该变量命名为*myDog*。这个引用变量永远是Dog类型。换句话说，这是一个有按钮可以控制一只狗的遥控器，但不能是猫、按钮或插座。
- en: '![Images](Images/1circleb.png) **Create an object**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circleb.png) **创建一个对象**'
- en: '![image](Images/f0055-05.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-05.png)'
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tells the JVM to allocate space for a new Dog object on the heap (we’ll learn
    a lot more about that process, especially in [Chapter 9](ch09.xhtml#life_and_death_of_an_object_constructors),
    *Life and Death of an Object*).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉JVM在堆上为一个新的狗对象分配空间（我们会在[第9章](ch09.xhtml#life_and_death_of_an_object_constructors)详细学习这个过程，*对象的生与死*）。
- en: '![Images](Images/1circlec.png) **Link the object and the reference**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlec.png) **链接对象和引用**'
- en: '![image](Images/f0055-06.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0055-06.png)'
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Assigns the new Dog to the reference variable myDog. In other words, ***programs
    the remote control.***
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 分配一个新的狗给引用变量`myDog`。换句话说，***编程这个遥控器***。
- en: Java Exposed
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java暴露
- en: '![image](Images/f0081-01.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0081-01.png)'
- en: '**This week’s interview: Object Reference**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**本周的采访：对象引用**'
- en: '**HeadFirst:** So, tell us, what’s life like for an object reference?'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 那么告诉我们，作为一个对象引用，生活是什么样子的？'
- en: '**Reference:** Pretty simple, really. I’m a remote control, and I can be programmed
    to control different objects.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 相当简单，实际上。我是一个遥控器，可以被编程来控制不同的对象。'
- en: '**HeadFirst:** Do you mean different objects even while you’re running? Like,
    can you refer to a Dog and then five minutes later refer to a Car?'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 你是说在运行时即使你在引用不同的对象？比如，你可以先引用一个狗，然后五分钟后引用一个车吗？'
- en: '**Reference:** Of course not. Once I’m declared, that’s it. If I’m a Dog remote
    control, then I’ll never be able to point (oops—my bad, we’re not supposed to
    say *point*), I mean, *refer* to anything but a Dog.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 当然不行。一旦我声明了，就是这样了。如果我是一个狗的遥控器，那么我永远不能指向（哦，不好意思，我们不应该说*指向*），我的意思是，*引用*除了狗以外的任何东西。'
- en: '**HeadFirst:** Does that mean you can refer to only one Dog?'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 这意味着你只能参考一个狗吗？'
- en: '**Reference:** No. I can be referring to one Dog, and then five minutes later
    I can refer to some *other* Dog. As long as it’s a Dog, I can be redirected (like
    reprogramming your remote to a different TV) to it. Unless...no never mind.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 不是的。我可以参考一个狗，然后五分钟后参考另一个*不同*的狗。只要它是狗，我就可以被重定向（就像重新编程你的遥控器换一个不同的电视）。除非...不，算了。'
- en: '**HeadFirst:** No, tell me. What were you gonna say?'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 不，告诉我。你刚才想说什么？'
- en: '**Reference:** I don’t think you want to get into this now, but I’ll just give
    you the short version—if I’m marked as *final*, then once I am assigned a Dog,
    I can never be reprogrammed to anything else but *that* one and only Dog. In other
    words, no other object can be assigned to me.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 我觉得现在你不想深入讨论这个，但我简单告诉你——如果我被标记为*final*，那么一旦我被分配了一个狗，我就永远不能被重新编程为其他东西，只能永远是*那个*狗。换句话说，没有其他对象可以分配给我。'
- en: '**HeadFirst:** You’re right, we don’t want to talk about that now. OK, so unless
    you’re *final*, then you can refer to one Dog and then refer to a different Dog
    later. Can you ever refer to *nothing at all*? Is it possible to not be programmed
    to anything?'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 你说得对，现在我们不想谈论这个。好的，除非你是*final*，那么你可以先引用一个狗，然后后来引用一个不同的狗。你能否完全不引用任何东西？是不是可能什么都不被编程？'
- en: '**Reference:** Yes, but it disturbs me to talk about it.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 是的，但是谈到这个让我感到不安。'
- en: '**HeadFirst:** Why is that?'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 为什么会这样？'
- en: '**Reference:** Because it means I’m `null`, and that’s upsetting to me.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reference:** 因为这意味着我是`null`，而这让我感到不安。'
- en: '**HeadFirst:** You mean, because then you have no value?'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 你是说，因为这样你就没有价值了？'
- en: '**Reference:** Oh, `null` *is* a value. I’m still a remote control, but it’s
    like you brought home a new universal remote control and you don’t have a TV.
    I’m not programmed to control anything. They can press my buttons all day long,
    but nothing good happens. I just feel so...useless. A waste of bits. Granted,
    not that many bits, but still. And that’s not the worst part. If I am the only
    reference to a particular object and then I’m set to `null` (deprogrammed), it
    means that now *nobody* can get to that object I had been referring to.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考：** 哦，`null` *是*一个值。我仍然是一个遥控器，但这就像你带回了一个新的通用遥控器，却没有电视。我没有被程序化去控制任何东西。他们可以整天按我的按钮，但什么好事都不会发生。我感觉如此……无用。浪费位。虽然不是那么多位，但仍然如此。而且这不是最糟糕的部分。如果我是对特定对象唯一的引用，然后我被设置为`null`（去程序化），这意味着现在*没有人*能够访问我曾经引用的那个对象。'
- en: '**HeadFirst:** And that’s bad because...'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst:** 这是不好的因为……'
- en: '**Reference:** You have to *ask*? Here I’ve developed a relationship with this
    object, an intimate connection, and then the tie is suddenly, cruelly, severed.
    And I will never see that object again, because now it’s eligible for [producer,
    cue tragic music] *garbage collection*. Sniff. But do you think programmers ever
    consider *that*? Snif. Why, *why* can’t I be a primitive? *I hate being a reference.*
    The responsibility, all the broken attachments...'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考：** 你必须*问*吗？在这里，我已经与这个对象建立了关系，一种亲密的连接，然后这种联系突然残酷地被切断了。我再也见不到那个对象，因为现在它有资格进行[制作人，请奏悲伤的音乐]*垃圾回收*。哭泣。但程序员是否曾经考虑过*那*？哭泣。为什么，*为什么*我不能成为原始类型？*我讨厌成为一个引用。*
    责任，所有破碎的附件……'
- en: Life on the garbage-collectible heap
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垃圾收集堆上的生活
- en: '![image](Images/f0057-01.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0057-01.png)'
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Declare two Book reference variables. Create two new Book objects. Assign the
    Book objects to the reference variables.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 声明两个Book引用变量。创建两个新的Book对象。将Book对象分配给引用变量。
- en: The two Book objects are now living on the heap.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个Book对象现在存活在堆上。
- en: 'References: 2'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：2
- en: 'Objects: 2'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对象：2
- en: '* * *'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![image](Images/f0057-02.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0057-02.png)'
- en: '* * *'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Declare a new Book reference variable. Rather than creating a new, third Book
    object, assign the value of variable ***c*** to variable ***d.*** But what does
    this mean? It’s like saying “Take the bits in c, make a copy of them, and stick
    that copy into ***d.”***
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 声明一个新的Book引用变量。而不是创建一个新的第三个Book对象，将变量***c***的值分配给变量***d***。但这是什么意思？这就像说“拿c中的位，复制它们，然后把那个副本放入d中。”
- en: '**Both *c* and *d* refer to the same object.**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量*c*和*d*都指向同一个对象。**'
- en: '**The *c* and *d* variables hold two different copies of the same value. Two
    remotes programmed to one TV.**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量*c*和*d*持有同一个值的两个不同副本。两个遥控器程序控制同一台电视。**'
- en: 'References: 3'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：3
- en: 'Objects: 2'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对象：2
- en: '* * *'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![image](Images/f0057-03.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0057-03.png)'
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Assign the value of variable *b* to variable *c*. By now you know what this
    means. The bits inside variable *b* are copied, and that new copy is stuffed into
    variable *c.*
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量*b*的值分配给变量*c*。到现在为止，你知道这意味着什么。变量*b*内的位被复制，然后这个新的副本被放入变量*c*中。
- en: '**Both b and c refer to the same object.**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**b和c都指向同一个对象。**'
- en: '**The c variable no longer refers to its old Book object.**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量*c*不再引用其旧的Book对象。**'
- en: 'References: 3'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献：3
- en: 'Objects: 2'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对象：2
- en: Life and death on the heap
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命与死亡在堆上
- en: '![image](Images/f0058-01.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0058-01.png)'
- en: '[PRE11]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Declare two Book reference variables. Create two new Book objects. Assign the
    Book objects to the reference variables.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 声明两个Book引用变量。创建两个新的Book对象。
- en: The two book objects are now living on the heap.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个Book对象现在存活在堆上。
- en: 'Active References: 2'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃引用：2
- en: 'Reachable Objects: 2'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可达对象：2
- en: '* * *'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![image](Images/f0058-02.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0058-02.png)'
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Assign the value of variable ***c*** to variable ***b.*** The bits inside variable
    ***c*** are copied, and that new copy is stuffed into variable ***b.*** Both variables
    hold identical values.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量***c***的值分配给变量***b***。变量***c***内的位被复制，然后这个新的副本被放入变量***b***中。两个变量持有相同的值。
- en: '**Both b and c refer to the same object. Object 1 is abandoned and eligible
    for Garbage Collection (GC).**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**b和c都指向同一个对象。对象1被抛弃，可以进行垃圾回收（GC）。**'
- en: 'Active References: 2'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃引用：2
- en: 'Reachable Objects: 1'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 可达对象：1
- en: 'Abandoned Objects: 1'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 被抛弃的对象：1
- en: The first object that ***b*** referenced, Object 1, has no more references.
    It’s *unreachable.*
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 变量*b*引用的第一个对象，对象1，再没有引用。它是*不可达*的。
- en: '![image](Images/f0058-03.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0058-03.png)'
- en: '* * *'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE13]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Assign the value `null` to variable ***c.*** This makes ***c*** a *null reference*,
    meaning it doesn’t refer to anything. But it’s still a reference variable, and
    another Book object can still be assigned to it.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 将值 `null` 赋给变量 ***c***。这使得 ***c*** 成为一个*null 引用*，意味着它不引用任何东西。但它仍然是一个引用变量，另一个
    Book 对象仍然可以分配给它。
- en: '**Object 2 still has an active reference (b), and as long as it does, the object
    is not eligible for GC.**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象 2 仍然有一个活动引用（b），只要它有引用，对象就不会被垃圾回收。**'
- en: 'Active References: 1'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 活动引用：1
- en: '*null* References: 1'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*null* 引用：1'
- en: 'Reachable Objects: 1'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可达对象：1
- en: 'Abandoned Objects: 1'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 废弃对象：1
- en: An array is like a tray of cups
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组就像一个杯盘
- en: The Java standard library includes lots of sophisticated data structures including
    maps, trees, and sets (see [Appendix B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d)),
    but arrays are great when you just want a quick, ordered, efficient list of things.
    Arrays give you fast random access by letting you use an index position to get
    to any element in the array.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Java 标准库包含许多复杂的数据结构，包括映射、树和集合（请参见[附录 B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d)），但在您只想要一个快速、有序、高效的事物列表时，数组是非常好的选择。通过使用索引位置，数组使您能够快速随机访问任何元素。
- en: 'Every element in an array is just a variable. In other words, one of the eight
    primitive variable types (think: Large Furry Dog) or a reference variable. Anything
    you would put in a *variable* of that type can be assigned to an *array element*
    of that type. So in an array of type int (int[]), each element can hold an int.
    In a Dog array (Dog[]) each element can hold...a Dog? No, remember that a reference
    variable just holds a reference (a remote control), not the object itself. So
    in a Dog array, each element can hold a *remote control* to a Dog. Of course,
    we still have to make the Dog objects...and you’ll see all that on the next page.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的每个元素都只是一个变量。换句话说，八种原始变量类型中的一种（考虑：大毛狗）或引用变量。您可以将该类型的 *变量* 中的任何内容分配给该类型的 *数组元素*。因此，在
    int 类型的数组（int[]）中，每个元素可以保存一个 int。在 Dog 数组（Dog[]）中，每个元素可以保存……一个 Dog 吗？不，记住引用变量只保存一个引用（一个遥控器），而不是对象本身。因此，在
    Dog 数组中，每个元素可以保存指向 Dog 的*遥控器*。当然，我们仍然需要创建 Dog 对象……您将在下一页看到所有这些内容。
- en: Be sure to notice one key thing in the picture—***the array is an object, even
    though it’s an array of primitives.***
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在图片中注意一件重要的事情——***数组是一个对象，即使它是一个原始类型的数组。***
- en: '![Images](Images/1circlea.png) Declare an int array variable. An array variable
    is a remote control to an array object.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlea.png) 声明一个 int 数组变量。数组变量是数组对象的遥控器。'
- en: '[PRE14]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Images](Images/1circleb.png) Create a new int array with a length of 7, and
    assign it to the previously declared `int[]` variable `nums`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circleb.png) 创建一个长度为 7 的新 int 数组，并将其分配给先前声明的 `int[]` 变量 `nums`'
- en: '[PRE15]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Images](Images/1circlec.png) Give each element in the array some int value.
    Remember, elements in an int array are just int *variables.*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlec.png) 为数组中的每个元素赋予一些整数值。记住，整数数组中的元素只是整数 *变量*。'
- en: '![image](Images/f0059-01.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0059-01.png)'
- en: Arrays are always objects, whether they’re declared to hold primitives or object
    references.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 无论它们声明为持有原始类型还是对象引用，数组始终是对象。
- en: '![image](Images/f0059-02.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0059-02.png)'
- en: Arrays are objects too
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组也是对象
- en: You can have an array object that’s declared to *hold* primitive values. In
    other words, the array object can have *elements* that are primitives, but the
    array itself is *never* a primitive. **Regardless of what the array holds, the
    array itself is always an object!**
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以有一个声明为*持有*基本值的数组对象。换句话说，数组对象可以有*原始类型* 的 *元素*，但数组本身永远不是原始类型。**无论数组包含什么，数组本身始终是一个对象！**
- en: Make an array of Dogs
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一组 Dogs
- en: '![Images](Images/1circlea.png) Declare a Dog array variable'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlea.png) 声明一个 Dog 数组变量'
- en: '[PRE16]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Images](Images/1circleb.png) Create a new Dog array with a length of 7, and
    assign it to the previously declared `Dog[]` variable `pets`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circleb.png) 创建一个长度为 7 的新 Dog 数组，并将其分配给先前声明的 `Dog[]` 变量 `pets`'
- en: '[PRE17]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**What’s missing?**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是缺失的？**'
- en: '![image](Images/f0060-01.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0060-01.png)'
- en: '**Dogs! We have an array of Dog references, but no actual Dog *objects!***'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dogs！我们有一个 Dog 引用数组，但没有实际的 Dog *对象*！**'
- en: '* * *'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![Images](Images/1circlec.png) Create new Dog objects, and assign them to the
    array elements.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlec.png) 创建新的 Dog 对象，并将它们分配给数组元素。'
- en: Remember, elements in a Dog array are just Dog reference *variables.* We still
    need Dogs!
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Dog 数组中的元素只是 Dog 引用 *变量*。我们仍然需要 Dogs！
- en: '[PRE18]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![image](Images/f0060-02.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0060-02.png)'
- en: Control your Dog (with a reference variable)
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制你的狗（使用引用变量）
- en: '![image](Images/f0061-01.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0061-01.png)'
- en: '[PRE19]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We created a Dog object and used String the dot operator on the reference variable
    ***fido*** to access the name variable.*
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个狗对象，并使用字符串点运算符在引用变量***fido***上访问名称变量。
- en: We can use the ***fido*** reference to get the dog to bark() or eat() or chaseCat().
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用***fido***引用来让狗叫()或吃()或追猫()。
- en: '![image](Images/f0061-02.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0061-02.png)'
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What happens if the Dog is in a Dog array?
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果狗在一个狗数组中会发生什么？
- en: We know we can access the Dog’s instance variables and methods using the dot
    operator, but *on what?*
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以使用点运算符访问狗的实例变量和方法，但是在什么上面呢？
- en: 'When the Dog is in an array, we don’t have an actual variable name (like ***fido***).
    Instead we use array notation and push the remote control button (dot operator)
    on an object at a particular index (position) in the array:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当狗在数组中时，我们没有实际的变量名（比如***fido***）。相反，我们使用数组表示法，并在数组中特定索引（位置）上的对象上按下遥控器按钮（点运算符）：
- en: '[PRE21]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Yes we know we’re not demonstrating encapsulation here, but we’re trying to
    keep it simple. For now. We’ll do encapsulation in [Chapter 4](ch04.xhtml#how_objects_behave_methods_use_instance).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '*是的，我们知道我们这里没有展示封装，但我们试图保持简单。暂时而言。我们将在[第4章](ch04.xhtml#how_objects_behave_methods_use_instance)中进行封装。'
- en: A Dog example
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个狗的例子
- en: '![image](Images/f0062-02.png)![image](Images/f0062-01.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0062-02.png)![image](Images/f0062-01.png)'
- en: '**Output**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '![image](Images/f0062-03.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0062-03.png)'
- en: Exercise
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '![image](Images/common-03.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-03.png)'
- en: BE the Compiler
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为编译器
- en: '![image](Images/common-05.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-05.png)'
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile
    and run without exception. If they won’t, how would you fix them?**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**这页上的每个Java文件代表一个完整的源文件。你的任务是扮演编译器的角色，确定这些文件是否会编译和运行而不出现异常。如果不能，你将如何修复它们？**'
- en: '**A**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '[PRE22]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**B**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '[PRE23]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercisesolutions).**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案在[“练习解答”](#exercisesolutions)。**'
- en: Code Magnets
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: '![image](Images/common-02.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-02.png)'
- en: A working Java program is all scrambled up on the fridge. Can you reconstruct
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一个工作的Java程序在冰箱上搅乱了。你能重构代码片段，使其成为一个能产生以下输出的工作的Java程序吗？一些花括号掉到地板上了，太小了，没法捡起来，所以你可以随意添加你需要的数量！
- en: '![image](Images/f0064-01a.png)![image](Images/f0064-01.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0064-01a.png)![image](Images/f0064-01.png)'
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_6).**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案在[“代码磁铁”](#code_magnets_left_parenthesisfrom_page_6)。**'
- en: Pool Puzzle
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池谜题
- en: '![image](Images/common-04.png)![image](Images/common-06.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)![image](Images/common-06.png)'
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You **may** use the same snippet more than once, and
    you won’t need to use all the snippets. Your ***goal*** is to make a class that
    will compile and run and produce the output listed.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你的***工作***是从池中取出代码片段，并将它们放入代码的空白行中。你**可以**多次使用相同的片段，并且你不需要使用所有的片段。你的***目标***是制作一个能编译和运行并产生列出的输出的类。
- en: '**Output**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '![image](Images/f0065-01.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0065-01.png)'
- en: '**Bonus Question!**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外问题！**'
- en: For extra bonus points, use snippets from the pool to fill in the missing output
    (above).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了额外的奖励分数，使用池中的片段填补上面缺失的输出。
- en: '![image](Images/f0065-02.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0065-02.png)'
- en: '**Note: Each snippet from the pool can be used more than once!**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：池中的每个片段都可以多次使用！**'
- en: '![image](Images/f0065-03.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0065-03.png)'
- en: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_65).**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **答案在[“池谜题”](#pool_puzzle_left_parenthesisfrom_page_65)。**'
- en: A Heap o’ Trouble
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一堆麻烦
- en: '![image](Images/common-04.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)'
- en: A short Java program is listed to the right. When “// do stuff” is reached,
    some objects and some reference variables will have been created. Your task is
    to determine which of the reference variables refer to which objects. Not all
    the reference variables will be used, and some objects might be referred to more
    than once. Draw lines connecting the reference variables with their matching objects.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧列出了一个简短的Java程序。当达到“//做一些事情”时，一些对象和一些引用变量将被创建。你的任务是确定哪些引用变量指向哪些对象。并非所有引用变量都会被使用，有些对象可能会被多次引用。画线连接引用变量与其匹配的对象。
- en: '***Tip:*** Unless you’re way smarter than we are, you probably need to draw
    diagrams like the ones in [“Life on the garbage-collectible heap”](#life_on_the_garbage-collectible_heap)–60
    of this chapter. Use a pencil so you can draw and then erase reference links (the
    arrows going from a reference remote control to an object).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '***提示:*** 除非你比我们聪明得多，否则你可能需要画出[“垃圾回收堆上的生活”](#life_on_the_garbage-collectible_heap)这一章中的图表–本章的60页。使用铅笔，这样你就可以画出然后擦除参考链接（从参考遥控器指向对象的箭头）。'
- en: '![image](Images/f0066-01.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0066-01.png)'
- en: '| Reference Variables: | HeapQuiz Objects: |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 引用变量: | HeapQuiz对象: |'
- en: '| --- | --- |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![image](Images/f0066-02.png) | ![image](Images/f0066-03.png) |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| ![图片](Images/f0066-02.png) | ![图片](Images/f0066-03.png) |'
- en: Note
  id: totrans-280
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Match each reference variable with matching object(s).**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**将每个引用变量与匹配的对象进行匹配。**'
- en: '**You might not have to use every reference.**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**你可能不需要使用每个参考。**'
- en: '![Images](Images/arr1.png) **Answers in [“A Heap o’ Trouble”](#a_heap_oapostrophe_trouble_left_parenthe).**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“一堆麻烦”](#a_heap_oapostrophe_trouble_left_parenthe)中。**'
- en: The case of the pilfered references
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 被盗参考案
- en: '![image](Images/common-04.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: It was a dark and stormy night. Tawny strolled into the programmers’ bullpen
    like she owned the place. She knew that all the programmers would still be hard
    at work, and she wanted help. She needed a new method added to the pivotal class
    that was to be loaded into the client’s new top-secret Java-enabled cell phone.
    Heap space in the cell phone’s memory was tight, and everyone knew it. The normally
    raucous buzz in the bullpen fell to silence as Tawny eased her way to the white
    board. She sketched a quick overview of the new method’s functionality and slowly
    scanned the room. “Well folks, it’s crunch time,” she purred. “Whoever creates
    the most memory efficient version of this method is coming with me to the client’s
    launch party on Maui tomorrow...to help me install the new software.”
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个漆黑而风雨交加的夜晚。Tawny悠然走进程序员的牛棚，就像她拥有这个地方一样。她知道所有程序员仍在努力工作，她需要帮助。她需要在关键类中添加一个新方法，该类将被加载到客户的新秘密Java手机中。手机内存中的堆空间很紧张，每个人都知道。牛棚里通常喧闹的嗡嗡声突然安静下来，当Tawny缓缓走向白板时。她草草勾画了新方法功能的简要概述，然后缓慢地扫视了房间。“好了，伙计们，现在是紧要关头，”她轻声说道。“谁能创建出最节省内存的版本这个方法，明天就跟我一起去客户的发布派对上，帮我安装新软件。”
- en: Five-Minute Mystery
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五分钟推理
- en: '![image](Images/f0067-01.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0067-01.png)'
- en: 'The next morning Tawny glided into the bullpen. “Ladies and Gentlemen,” she
    smiled, “the plane leaves in a few hours, show me what you’ve got!” Bob went first;
    as he began to sketch his design on the white board, Tawny said, “Let’s get to
    the point Bob, show me how you handled updating the list of contact objects.”
    Bob quickly drew a code fragment on the board:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 第二天早上，Tawny滑入牛棚。“女士们先生们，”她微笑着说，“飞机几个小时后就要起飞了，让我看看你们有什么！” Bob第一个上场；当他开始在白板上勾画设计时，Tawny说，“Bob，让我们直奔主题，告诉我你是如何处理更新联系对象列表的。”
    Bob迅速在白板上画了一段代码片段：
- en: '[PRE24]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '“Tawny, I know we’re tight on memory, but your spec said that we had to be
    able to access individual contact information for all ten allowable contacts;
    this was the best scheme I could cook up,” said Bob. Kate was next, already imagining
    coconut cocktails at the party, “Bob,” she said, “your solution’s a bit kludgy,
    don’t you think?” Kate smirked, “Take a look at this baby”:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: “Tawny，我知道我们的内存很紧张，但你的规格书说我们必须能够访问所有十个可允许的联系人的个人信息；这是我能想到的最好的方案，”Bob说。接下来是Kate，已经想象着派对上的椰子鸡尾酒，“Bob，”她说，“你的解决方案有点笨拙，你不觉得吗？”
    Kate咧嘴笑道，“看看这个宝贝”：
- en: '[PRE25]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: “I saved a bunch of reference variables worth of memory, Bob-o-rino, so put
    away your sunscreen,” mocked Kate. “Not so fast Kate!” said Tawny, “you’ve saved
    a little memory, but Bob’s coming with me.”
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: “我节省了一堆值得记忆的引用变量，Bob-o-rino，所以收起你的防晒霜吧，”Kate嘲笑道。“不要那么快，Kate！”Tawny说，“你节省了一点内存，但Bob跟我走。”
- en: '***Why did Tawny choose Bob’s method over Kate’s, when Kate’s used less memory?***'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '***为什么 Tawny 在 Kate 的方法使用更少内存时选择了 Bob 的方法？***'
- en: '![Images](Images/arr1.png) **Answers in [“Five-Minute Mystery”](#five_minute_mystery_left_parenthesis-10).**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在 [“五分钟推理”](#five_minute_mystery_left_parenthesis-10)
    中。**'
- en: Exercise Solutions
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解答
- en: '![image](Images/common-03.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-03.png)'
- en: Sharpen your pencil
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锻炼你的铅笔
- en: (from [“Sharpen your pencil”](#sharpen_your_pencil-id00003))
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“锻炼你的铅笔”](#sharpen_your_pencil-id00003))
- en: '![image](Images/f0068-01.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0068-01.png)'
- en: Code Magnets
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: (from [“Code Magnets”](#code_magnets-id000001))
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“代码磁铁”](#code_magnets-id000001))
- en: '[PRE26]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![image](Images/f0068-03.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0068-03.png)'
- en: BE the Compiler
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为编译器
- en: (from [“BE the Compiler”](#be_the_compiler-id00001))
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“成为编译器”](#be_the_compiler-id00001))
- en: '**A**'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '![image](Images/f0068-04.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0068-04.png)'
- en: '**B**'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '![image](Images/f0068-05.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0068-05.png)'
- en: Puzzle Solutions
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拼图解答
- en: '![image](Images/common-04.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: Pool Puzzle
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 池谜题
- en: (from [“Pool Puzzle”](#pool_puzzle-id00001))
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“池谜题”](#pool_puzzle-id00001))
- en: '[PRE27]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![image](Images/f0069-01.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0069-01.png)'
- en: Five-Minute Mystery
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 五分钟推理
- en: (from [“Five-Minute Mystery”](#five_minute_mystery))
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“五分钟推理”](#five_minute_mystery))
- en: '**The case of the pilfered references**'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**被偷窃的引用案件**'
- en: Tawny could see that Kate’s method had a serious flaw. It’s true that she didn’t
    use as many reference variables as Bob, but there was no way to access any but
    the last of the Contact objects that her method created. With each trip through
    the loop, she was assigning a new object to the one reference variable, so the
    previously referenced object was abandoned on the heap—*unreachable*. Without
    access to nine of the ten objects created, Kate’s method was useless.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Tawny 发现 Kate 的方法有一个严重缺陷。虽然她没有像 Bob 那样使用许多引用变量，但无法访问她方法创建的除最后一个 Contact 对象以外的任何对象。每次循环结束时，她都会将一个新对象赋给唯一的引用变量，因此之前引用的对象会被遗弃在堆中——*无法访问*。由于无法访问创建的十个对象中的九个，Kate
    的方法变得毫无用处。
- en: (The software was a huge success, and the client gave Tawny and Bob an extra
    week in Hawaii. We’d like to tell you that by finishing this book you too will
    get stuff like that.)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: （这款软件大获成功，客户给了 Tawny 和 Bob 额外的一周夏威夷的时间。我们想告诉你，通过完成这本书，你也会得到这样的好处。）
- en: A Heap o’ Trouble
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一堆麻烦
- en: (from [“A Heap o’ Trouble”](#a_heap_oapostrophe_trouble))
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: (来源于 [“一堆麻烦”](#a_heap_oapostrophe_trouble))
- en: '| **Reference Variables:** | **HeapQuiz Objects:** |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| **引用变量:** | **堆谜题对象:** |'
- en: '| ![image](Images/f0069-02.png) |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| ![图片](Images/f0069-02.png) |'
