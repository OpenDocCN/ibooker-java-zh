- en: Chapter 7\. The Page Object Model (POM)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。页面对象模型（POM）
- en: A *design pattern* is a reusable solution to a recurring problem in software
    engineering. This chapter presents the Page Object Model (POM), a popular design
    pattern used to develop Selenium WebDriver tests. The use of POM has different
    benefits, such as improving reusability and avoiding code duplication. POM is
    based on creating *page classes* for modeling the SUT UI in a single repository,
    which is later used from the test logic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*设计模式* 是软件工程中解决重复问题的可重用解决方案。本章介绍了页面对象模型（Page Object Model，POM），这是一种常用的设计模式，用于开发
    Selenium WebDriver 测试。使用 POM 有不同的好处，例如提高可重用性和避免代码重复。POM 基于为单个存储库建模 SUT UI 的 *页面类*，稍后从测试逻辑中使用。'
- en: Motivation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: Some of the biggest challenges of developing end-to-end tests with Selenium
    WebDriver are *maintainability* and *flakiness*. Regarding the former, the problem
    might happen during the development or evolution of the SUT. The changes made
    in the UI can cause existing end-to-end tests to break. The maintenance costs
    for fixing these tests can be relevant when having a large test suite in which
    code duplication exists in several tests cases (e.g., when the same locators are
    used repeatedly in different tests).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Selenium WebDriver 开发端到端测试的一些最大挑战是 *可维护性* 和 *不可靠性*。关于前者，问题可能发生在 SUT 的开发或演变过程中。对
    UI 进行的更改可能导致现有的端到端测试失败。在具有大量测试用例且存在代码重复的大型测试套件中修复这些测试的维护成本可能是相关的（例如，在不同测试中重复使用相同的定位器时）。
- en: Concerning flakiness (i.e., lack of reliability), a test is *flaky* when it
    has inconsistent behavior, i.e., it both passes and fails periodically under the
    same conditions (test logic, input data, setup, etc.). There are two major causes
    of test flakiness in Selenium WebDriver tests. First, the root of the problem
    might be the SUT. For instance, a bug in the server-side logic (e.g., a race condition)
    can expose erratic behavior in end-to-end tests. In this case, developers and
    testers should work together to detect and solve the problem, typically fixing
    server-side bugs. Second, the cause could be in the test itself. This is an undesirable
    situation that testers should avoid. There are different strategies to prevent
    flakiness in Selenium WebDriver tests, such as implementing a robust locator strategy
    (to avoid brittle tests due to responsiveness or viewport changes) or using a
    waiting strategy (to handle the distributed and asynchronous nature of web applications,
    as explained in [“Waiting Strategies”](ch03.html#waiting_strategies)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 关于不可靠性（即 flakiness），当测试在相同条件下（测试逻辑、输入数据、设置等）周期性地既通过又失败时，测试就是 *flaky* 的。在 Selenium
    WebDriver 测试中，测试不可靠性的两个主要原因是什么？首先，问题的根源可能是 SUT。例如，服务器端逻辑中的错误（例如，竞争条件）可能会在端到端测试中暴露出不稳定的行为。在这种情况下，开发人员和测试人员应该共同努力检测和解决问题，通常是修复服务器端错误。其次，问题可能出现在测试本身。这是测试人员应该避免的不良情况。有不同的策略可以预防
    Selenium WebDriver 测试中的不可靠性，例如实施强大的定位器策略（以避免由于响应性或视口更改而导致的脆弱测试）或使用等待策略（以处理 Web
    应用程序的分布式和异步特性，如 [“等待策略”](ch03.html#waiting_strategies) 中所解释的）。
- en: Utilizing a design pattern like POM can help reduce code duplication and enhance
    maintainability issues. Moreover, we can use POM for including reusable robust
    locating and waiting strategies. The following section describes how to carry
    out the POM design pattern.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 利用像 POM 这样的设计模式可以帮助减少代码重复并增强可维护性问题。此外，我们可以使用 POM 来包含可重用的强大定位和等待策略。以下部分描述了如何执行
    POM 设计模式。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The POM design pattern itself is not strictly a solution for test flakiness.
    However, as explained in the following sections, it enables the encapsulation
    of reusable code that prevents test unreliability.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: POM 设计模式本身并不严格是测试不可靠性的解决方案。然而，如下文所述，它使得能够封装可重用的代码，从而防止测试的不可靠性。
- en: The POM Design Pattern
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POM 设计模式
- en: The principle of the POM design pattern is to separate the logic for handling
    UI elements in separate classes (called *page classes*) from the test logic. In
    other words, we model the appearance and behavior of our SUT following an object-oriented
    paradigm, i.e., as *page objects*. Then, these page objects are used by Selenium
    WebDriver tests.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: POM 设计模式的原则是将处理 UI 元素的逻辑与测试逻辑分离在单独的类（称为 *页面类*）中。换句话说，我们按照面向对象的范式对 SUT 的外观和行为进行建模，即
    *页面对象*。然后，这些页面对象由 Selenium WebDriver 测试使用。
- en: Let’s look at a simple example to illustrate POM. Consider [Figure 7-1](#login-form),
    which contains a login form. As usual, this page is contained on the practice
    site. [Example 7-1](#vanilla_basic_login) shows a test case using *vanilla* Selenium
    WebDriver. In programming, we use the term “vanilla” to refer to technology used
    without customization from the original form. In this case, we use the standard
    Selenium WebDriver API, explained in [Part II](part02.html#part02) of this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子来说明POM。考虑包含登录表单的[图 7-1](#login-form)，这个页面通常包含在练习站点上。[示例 7-1](#vanilla_basic_login)
    展示了使用*普通* Selenium WebDriver 的测试用例。在编程中，我们使用“普通”一词来指代未经定制的原始形式技术。在这种情况下，我们使用标准的
    Selenium WebDriver API，本书的[第二部分](part02.html#part02)有详细解释。
- en: '![hosw 0701](assets/hosw_0701.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0701](assets/hosw_0701.png)'
- en: Figure 7-1\. Practice web page with a login form
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 带有登录表单的练习网页
- en: Example 7-1\. Test using vanilla Selenium WebDriver to implement a successful
    login
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 使用普通 Selenium WebDriver 实现成功登录的测试
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO1-1)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO1-1)'
- en: We type the word `user` as username in the web form.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在网页表单中将单词`user`输入为用户名。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO1-2)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO1-2)'
- en: We type the same word as password in the web form.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在网页表单中将相同的单词输入为密码。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO1-3)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO1-3)'
- en: We click on the Submit button.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击提交按钮。
- en: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO1-4)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO1-4)'
- en: We verify the success box is displayed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证成功框是否显示。
- en: 'This test is perfectly correct, but a potential problem might occur if we implement
    additional tests using the same web page. For instance, [Example 7-2](#vanilla_basic_login_2)
    shows another test case using vanilla Selenium WebDriver to implement a negative
    test (a failed login) using the same web form. This test is again sound, but together
    with [Example 7-1](#vanilla_basic_login), we duplicate most of the logic for locating
    web elements, only using different input data and the expected outcome. This way
    of proceeding violates one of the most relevant principles in software design:
    Don’t Repeat Yourself (DRY). This is problematic since using the same code in
    different places makes maintainability harder.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试是完全正确的，但是如果我们使用相同的网页实现额外的测试，可能会出现潜在的问题。例如，[示例 7-2](#vanilla_basic_login_2)
    展示了另一个使用普通 Selenium WebDriver 实现的测试用例，用于使用相同的网页表单执行负面测试（登录失败）。这个测试再次是正确的，但是与 [示例 7-1](#vanilla_basic_login)
    一起，我们重复了大部分定位网页元素的逻辑，只是使用了不同的输入数据和预期结果。这种做法违反了软件设计中最重要的原则之一：不要重复自己（DRY）。这是有问题的，因为在不同的地方使用相同的代码会使可维护性变得更加困难。
- en: Example 7-2\. Test using vanilla Selenium WebDriver to implement a failed login
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2\. 使用普通 Selenium WebDriver 实现失败登录的测试
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Page Objects
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面对象
- en: Page object classes enable the separation of the code devoted to the UI, such
    as locators and page layout, from the test logic. We can see page classes as a
    single repository that encapsulates the operations or services provided by the
    application under test. These classes are instantiated as *page objects* in different
    test cases. We can implement end-to-end tests using the method exposed in these
    objects while avoiding code repetition.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 页面对象类允许将专注于UI的代码（如定位器和页面布局）与测试逻辑分离。我们可以将页面类视为一个单一的存储库，封装了被测试应用程序提供的操作或服务。这些类在不同的测试用例中作为*页面对象*实例化。我们可以使用这些对象中公开的方法来实现端到端测试，同时避免代码重复。
- en: Here is a basic example using page objects. In the following example, we refactor
    the test explained in the previous section (i.e., using the login form) using
    a page object instead of vanilla Selenium WebDriver. The first step is to create
    a Java class that models the login page. [Example 7-3](#basic_login_page) shows
    a very basic implementation of this page class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用页面对象的基本示例。在下面的示例中，我们重构了上一节中解释的测试（即使用登录表单），使用页面对象而不是普通的 Selenium WebDriver。第一步是创建一个Java类来模拟登录页面。[示例 7-3](#basic_login_page)
    展示了这个页面类的一个非常基本的实现。
- en: Example 7-3\. Basic page class to model the practice login form
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3\. 基本页面类，用于模拟练习登录表单
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO2-1)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO2-1)'
- en: We declare a `WebDriver` class attribute. This variable is used in the page
    object to implement the interaction with the web page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个`WebDriver`类属性。这个变量用于在页面对象中实现与网页的交互。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO2-2)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO2-2)'
- en: We declare all the required locators as additional attributes. In this case,
    we locate the text input for the username and password, the Submit button, and
    the success box.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有必需的定位器声明为额外的属性。在这种情况下，我们定位用户名和密码的文本输入框、提交按钮以及成功框。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO2-3)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO2-3)'
- en: The constructor defined by this page class accepts the `WebDriver` object. We
    use the constructor to load the page under test.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面类定义的构造函数接受`WebDriver`对象。我们使用构造函数加载测试中的页面。
- en: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO2-4)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO2-4)'
- en: We declare a method to model the required interaction to log in, i.e., type
    the username and password, and click on the Submit button.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个方法来模拟进行登录所需的交互，即输入用户名和密码，然后点击提交按钮。
- en: '[![5](assets/5.png)](#co_the_page_object_model__pom__CO2-5)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_the_page_object_model__pom__CO2-5)'
- en: We declare another method to check if the success box is visible.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 声明另一个方法来检查成功框是否可见。
- en: Now, we can use this page class in a test case. [Example 7-4](#basic_login_test)
    illustrates how. Notice that we create a `WebDriver` instance, as usual before
    each test, and quit it after each test. We use this driver as an argument in the
    page class constructor.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在测试用例中使用这个页面类。[示例 7-4](#basic_login_test) 展示了如何使用。请注意，在每个测试之前，像往常一样创建`WebDriver`实例，并在每个测试结束后退出它。我们将这个驱动程序作为页面类构造函数的参数使用。
- en: Example 7-4\. Test using the basic page class to implement a succesful login
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-4\. 使用基本页面类实现成功的登录
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO3-1)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO3-1)'
- en: We declare the page class as an attribute in the test class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在测试类中将页面类声明为一个属性。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO3-2)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO3-2)'
- en: We create the page object, passing the `WebDriver` instance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建页面对象，传递`WebDriver`实例。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO3-3)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO3-3)'
- en: We invoke the method `with` defined by the page class to make the login operation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用页面类定义的方法`with`来执行登录操作。
- en: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO3-4)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO3-4)'
- en: We verify the success box is available on the resulting web page using a method
    provided by the page object.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用页面对象提供的方法验证结果网页上的成功框是否可用。
- en: This approach is a handy start for improving the maintainability of our tests
    because now, all the logic related to the login web page is centralized as a reusable
    class. Nevertheless, the code in the page classes is still brittle. For instance,
    imagine we need to implement a negative test for the login page, i.e., a login
    attempt using incorrect credentials. [Example 7-5](#basic_login_test_2) seems
    a reasonable way to do that, given the current implementation of the page class.
    However, if you run this test, you will discover that the test fails due to a
    `NoSuchElementException` exception. The next section explains how to solve this
    potential problem by creating more robust page objects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是改进测试可维护性的一个方便的起点，因为现在登录网页相关的所有逻辑都集中在一个可重用的类中。然而，页面类中的代码仍然很脆弱。例如，假设我们需要为登录页面实现一个负面测试，即使用错误的凭据进行登录尝试。给定页面类的当前实现，[示例 7-5](#basic_login_test_2)
    似乎是一个合理的方法。然而，如果你运行这个测试，你会发现由于`NoSuchElementException`异常而导致测试失败。下一节将解释如何通过创建更健壮的页面对象来解决这个潜在问题。
- en: Example 7-5\. Test using the basic page class to implement a failed login
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-5\. 使用基本页面类实现失败的登录
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Robust Page Objects
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健壮的页面对象
- en: The example presented in the previous sections improves code maintainability
    since the page operations are encapsulated in a single class instead of having
    them scattered throughout the test suite. That said, there are different ways
    to enhance the previous page classes implementation. First of all, our SUT is
    likely to have several web pages, not only one. For this reason, a common strategy
    is to follow an object-oriented approach and create a *base page* class that encapsulates
    the common logic for all the page classes. [Example 7-6](#base_page) shows a Java
    class implementing a typical base for page classes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前文提到的示例提升了代码可维护性，因为页面操作封装在一个单独的类中，而不是散布在整个测试套件中。话虽如此，有多种方法可以增强之前的页面类实现。首先，我们的系统可能有多个网页，而不仅仅是一个。因此，一个常见的策略是采用面向对象的方法，创建一个*基础页面*类，封装所有页面类的通用逻辑。[示例 7-6](#base_page)展示了一个实现页面类典型基础的Java类。
- en: Example 7-6\. Example of a base class for page classes
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-6\. 页面类的基础类示例
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO4-1)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO4-1)'
- en: We define an explicit wait (`WebDriverWait`) attribute in the base class. We
    instantiate this attribute in the constructor using a default timeout value (five
    seconds in this example).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在基础类中定义了一个显式等待（`WebDriverWait`）属性。我们在构造函数中使用默认的超时值（例如本例中的五秒）实例化此属性。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO4-2)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO4-2)'
- en: We create a setter method to change the default value for the wait timeout.
    For instance, we might need to adjust this timeout depending on the system response
    time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个setter方法来更改等待超时的默认值。例如，根据系统响应时间，我们可能需要调整此超时。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO4-3)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO4-3)'
- en: We create several common methods that page classes can reuse, such as `visit()`
    (to open a web page), `find()` (to locate a web element), or `type()` (to send
    data to a writable element, such as an input field).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了几个常用方法，页面类可以重用，例如`visit()`（打开网页）、`find()`（定位网页元素）或`type()`（向可写元素发送数据，例如输入字段）。
- en: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO4-4)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO4-4)'
- en: We implement a method to check if a web element is displayed or not. Notice
    that this method hides the complexity of waiting for this element, returning a
    simple boolean value that tests can use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个方法来检查网页元素是否显示。请注意，此方法隐藏了等待此元素的复杂性，返回一个简单的布尔值，测试可以使用该值。
- en: We use the previous base class as the parent of specific page classes. For instance,
    [Example 7-7](#login_page) shows a Java class that extends this base to implement
    the page class, using the login sample page in the practice site.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用之前的基础类作为特定页面类的父类。例如，[示例 7-7](#login_page)展示了一个Java类，它扩展了这个基础类以实现页面类，使用练习站点中的登录示例页面。
- en: Example 7-7\. Login page class using the previous base
  id: totrans-68
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-7\. 使用前述基础类的登录页面类
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO5-1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO5-1)'
- en: We define the page locators as class attributes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将页面定位器定义为类属性。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO5-2)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO5-2)'
- en: 'We define a constructor with two parameters: the `WebDriver` object and the
    timeout value (in seconds).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个构造函数，带有两个参数：`WebDriver`对象和超时值（以秒为单位）。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO5-3)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO5-3)'
- en: We define another constructor that opens the web page under test.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义另一个构造函数，用于打开测试中的网页。
- en: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO5-4)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_page_object_model__pom__CO5-4)'
- en: We include a method to log in using username and password as credentials. This
    uses the methods defined in the parent (`type()` and `click()`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包括了一个方法，使用用户名和密码作为凭证进行登录。此方法使用了父类中定义的`type()`和`click()`方法。
- en: '[![5](assets/5.png)](#co_the_page_object_model__pom__CO5-5)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_the_page_object_model__pom__CO5-5)'
- en: We include another method to check if the success box is visible or not (using
    the method `isDisplayed()` defined in the base class).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还包括了另一个方法来检查成功框是否可见（使用基础类中定义的`isDisplayed()`方法）。
- en: Finally, we can use the page class to implement a Selenium WebDriver test. [Example 7-8](#test_login_page)
    shows a test using JUnit 5 (as usual, you can find the JUnit 4, TestNG, and Selenium-Jupiter
    flavors in the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用页面类来实现一个 Selenium WebDriver 测试。[示例 7-8](#test_login_page) 展示了使用 JUnit
    5 进行的测试（通常情况下，你可以在 [示例库](https://github.com/bonigarcia/selenium-webdriver-java)
    中找到 JUnit 4、TestNG 和 Selenium-Jupiter 版本）。
- en: Example 7-8\. Test using the page class to implement a successful and failed
    login
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-8\. 使用页面类实现成功和失败登录的测试
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO6-1)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO6-1)'
- en: We instantiate the page object before each test.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在每个测试之前实例化页面对象。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO6-2)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO6-2)'
- en: Since the page class logic is robust, we can invoke `successBoxPresent()` to
    implement a negative test. This method internally implements an explicit wait
    for the web element, which eventually returns `false` when the success box is
    not displayed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页面类逻辑健壮，我们可以调用 `successBoxPresent()` 来实现一个负面测试。此方法在内部实现了对网页元素的显式等待，当成功框未显示时最终返回
    `false`。
- en: Creating a Domain Specific Language (DSL)
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个领域特定语言（DSL）
- en: We can push things a little more in our journey of modeling our SUT and create
    a complete Domain Specific Language (DSL) using the page classes. In computing,
    a DSL is a specialized language for a particular domain. When using the POM and
    Selenium WebDriver, we can see a DSL as the encapsulation of all the SUT operations
    and services in the methods provided by the page classes. This way, test cases
    use a simple, readable API provided by the page classes. These classes encapsulate
    all the calls to the Selenium WebDriver API to interact with the SUT.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们模拟 SUT 的过程中，我们可以通过使用页面类创建一个完整的领域特定语言（DSL）。在计算中，DSL 是针对特定领域的专门语言。当使用 POM 和
    Selenium WebDriver 时，我们可以将 DSL 视为封装所有 SUT 操作和服务的方法在页面类提供的简单易读的 API 中。这些类封装了与 SUT
    交互的所有调用 Selenium WebDriver API 的操作。
- en: Continuing with the example shown in the previous sections, [Example 7-9](#dsl_base)
    shows a base page class for the login page following a DSL approach. This base
    class is quite similar to [Example 7-6](#base_page), but in this case, this class
    also encapsulates the required logic to create a `WebDriver` instance.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面章节展示的示例继续进行，[示例 7-9](#dsl_base) 展示了一个基于 DSL 方法的登录页面基础页面类。这个基础类与 [示例 7-6](#base_page)
    非常相似，但在这种情况下，该类还封装了创建 `WebDriver` 实例所需的逻辑。
- en: Example 7-9\. Example of base class following a DSL approach
  id: totrans-90
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-9\. 遵循 DSL 方法的基础类示例
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO7-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO7-1)'
- en: We declare a `String` parameter in the base constructor. This string will be
    the browser name (specified in the tests).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在基础构造函数中声明了一个 `String` 参数。这个字符串将是测试中指定的浏览器名称。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO7-2)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO7-2)'
- en: We use WebDriverManager to resolve the required driver and create the `WebDriver`
    instance. As explained in [“Generic Manager”](app02.html#generic_manager), WebDriverManager
    allows the use of a parameterized manager by invoking the method `getInstance()`.
    In this case, we use the browser name (e.g., `chrome,` `firefox,` etc.) to select
    the manager.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 WebDriverManager 解析所需的驱动程序并创建 `WebDriver` 实例。如 [“通用管理器”](app02.html#generic_manager)
    所述，WebDriverManager 允许通过调用 `getInstance()` 方法使用参数化管理器。在这种情况下，我们使用浏览器名称（例如 `chrome,`
    `firefox,` 等）来选择管理器。
- en: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO7-3)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_page_object_model__pom__CO7-3)'
- en: We also encapsulate the method to terminate the session and close the browser.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还封装了一个用于结束会话和关闭浏览器的方法。
- en: '[Example 7-10](#dsl_page) shows the page class that extends this base. As you
    can see, the only difference from [Example 7-7](#login_page) is that this page
    class uses a string parameter (the browser name) in the constructor.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-10](#dsl_page) 展示了扩展此基类的页面类。如你所见，与 [示例 7-7](#login_page) 的唯一区别是，此页面类在构造函数中使用了一个字符串参数（浏览器名称）。'
- en: Example 7-10\. Login page class following a DSL approach
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-10\. 遵循 DSL 方法的登录页面类
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Finally, [Example 7-11](#dsl_test) shows the resulting test. Notice that this
    test does not contain any single call to Selenium WebDriver or WebDriverManager.
    The page class encapsulates all the low-level details of the interaction with
    the browser, exposing a high-level, readable API used in the test.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[示例 7-11](#dsl_test)展示了结果测试。请注意，此测试不包含任何对Selenium WebDriver或WebDriverManager的单个调用。页面类封装了与浏览器交互的所有低级细节，并公开了测试中使用的高级可读API。
- en: Example 7-11\. Test case using POM and following a DSL approach
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-11\. 使用POM并遵循DSL方法的测试用例
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO8-1)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO8-1)'
- en: We instantiate the page object, simply specifying the browser type to be used
    (`chrome` in this case).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化页面对象，只需指定要使用的浏览器类型（在本例中为`chrome`）。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO8-2)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO8-2)'
- en: As usual, we terminate the browser session after each test, but this time using
    a method provided by the page object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每次测试后，我们通常会终止浏览器会话，但这次是使用页面对象提供的一个方法。
- en: Page Factory
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面工厂
- en: 'Page Factory is the name given to several support classes provided by the Selenium
    WebDriver API to ease the implementation of page object classes. The most relevant
    of these support classes are:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Page Factory是Selenium WebDriver API提供的几个支持类的名称，以便于实现页面对象类。其中最相关的支持类包括：
- en: '`FindBy`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`FindBy`'
- en: Annotation used at the attribute level to identify web elements in a page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性级别使用的注解，用于识别页面中的网页元素。
- en: '`FindAll`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`FindAll`'
- en: Annotation that allows composing different `@FindBy` locators.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 允许组合不同`@FindBy`定位器的注解。
- en: '`PageFactory`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageFactory`'
- en: Class used to initialize all the previously declared web elements with `@FindBy`
    (and `@FindAll`).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用于使用`@FindBy`（和`@FindAll`）初始化之前声明的所有网页元素的类。
- en: '`CacheLookup`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`CacheLookup`'
- en: One downside of using the `@FindBy` annotation to locate web elements is that
    as each locator is used, the driver will try to find it on the current page. This
    feature is helpful in dynamic web applications. However, it would be desirable
    to cache the web elements in static web applications. For this reason, the annotation
    `@CacheLookup` allows caching the web elements once they are located, improving
    the performance of the resulting tests.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@FindBy`注解来定位网页元素的一个缺点是，每次使用定位器时，驱动程序都会尝试在当前页面上找到它。这个特性在动态网页应用程序中非常有用。但是，在静态网页应用程序中缓存网页元素将是有帮助的。因此，`@CacheLookup`注解允许在定位到网页元素后对其进行缓存，提高生成测试的性能。
- en: '[Example 7-12](#factory_page) shows a page class that uses these Selenium WebDriver
    support classes. You can find the resulting test using this page class in the
    repository object. This test is equivalent to [Example 7-11](#dsl_test), but uses
    `FactoryLoginPage` instead of `ExtendedLoginPage` for interaction with the login
    page.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-12](#factory_page)展示了一个使用这些Selenium WebDriver支持类的页面类。您可以在存储库对象中找到使用这个页面类的结果测试。这个测试等同于[示例 7-11](#dsl_test)，但使用`FactoryLoginPage`而不是`ExtendedLoginPage`与登录页面进行交互。'
- en: Example 7-12\. Class using the Page Factory provided by Selenium WebDriver
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-12\. 使用Selenium WebDriver提供的Page Factory的类
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO9-1)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_page_object_model__pom__CO9-1)'
- en: 'We declare the web elements in the page using the `WebElement` type decorated
    with two annotations:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`WebElement`类型声明页面上的网页元素，并用两个注解修饰：
- en: '`@FindBy`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`@FindBy`'
- en: To specify the locator (by `id` and `css` in this example).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以指定的定位器（例如`id`和`css`）来说明。
- en: '`@CacheLookup`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`@CacheLookup`'
- en: To cache the web element location results (since the web page is static and
    its content will not change in different calls).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 用于缓存网页元素位置结果（因为网页是静态的，在不同调用中其内容不会改变）。
- en: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO9-2)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_page_object_model__pom__CO9-2)'
- en: We invoke the `initElements` method to locate the web elements using the `WebDriver`
    instance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`initElements`方法，使用`WebDriver`实例来定位网页元素。
- en: Warning
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The Page Factory approach is only recommended when the web page tested with
    Selenium WebDriver is static. This approach can lead to undesirable effects such
    as stale web elements (i.e., old or no-longer-available elements) when using dynamic
    web pages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Selenium WebDriver测试的网页是静态的时，只建议使用Page Factory方法。当使用动态网页时，此方法可能会导致不良影响，如过时的网页元素（即旧的或不再可用的元素）。
- en: Summary and Outlook
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要与展望
- en: This chapter provided a comprehensive overview of the Page Object Model (POM)
    in Selenium WebDriver tests. POM is a design pattern in which we separate the
    logic to interact with web pages and the test code. This way, *page classes* contain
    the logic related to web locators and page layout, and test classes determine
    how to exercise and verify the SUT. The POM pattern improves the maintainability
    of test suites based on Selenium WebDriver since the page classes are stored in
    a single repository that models the SUT. This repository is used later in different
    test cases. We can create robust web pages using proper location and waiting strategies.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了在Selenium WebDriver测试中使用的页面对象模型（Page Object Model，POM）。POM是一种设计模式，通过它我们将与网页交互的逻辑和测试代码分开。这样，*页面类*
    包含了与网页定位和页面布局相关的逻辑，而测试类则确定如何执行和验证系统的被测单元（SUT）。POM模式提升了基于Selenium WebDriver的测试套件的可维护性，因为页面类存储在一个单一的库中，模拟了SUT。这个库稍后可以在不同的测试用例中使用。我们可以通过适当的定位和等待策略创建健壮的网页。
- en: The next chapter presents specific aspects of the used unit testing frameworks
    (JUnit, TestNG, and Selenium-Jupiter) to improve the overall testing process with
    Selenium WebDriver. These features allow creating parameterized tests (for cross-browser
    testing), categorizing tests (for test filtering), ordering and retrying tests,
    or executing tests in parallel.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了使用的单元测试框架（JUnit、TestNG和Selenium-Jupiter）的具体方面，以改进Selenium WebDriver的整体测试流程。这些特性允许创建参数化测试（用于跨浏览器测试）、对测试进行分类（用于测试过滤）、对测试进行排序和重试，或者并行执行测试。
