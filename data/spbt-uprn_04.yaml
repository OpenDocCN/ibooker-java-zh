- en: Chapter 4\. Adding Database Access to Your Spring Boot App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。将数据库访问添加到您的 Spring Boot 应用程序
- en: As discussed in the previous chapter, applications often expose stateless APIs
    for many very good reasons. Behind the scenes, however, very few useful applications
    are entirely ephemeral; state of some kind is usually stored for *something*.
    For example, every request to an online store’s shopping cart may well include
    its state, but once the order is placed, that order’s data is kept. There are
    many ways to do this, and many ways to share or route this data, but invariably
    there are one or more databases involved within nearly all systems of sufficient
    size.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章所讨论的，出于许多非常好的原因，应用程序通常会暴露无状态的 API。然而，在幕后，很少有有用的应用程序是完全短暂的；某种状态通常是为了*某事*而存储的。例如，每次对在线商店购物车的请求可能都会包含其状态，但一旦下订单，订单的数据就会被保留。有许多方法可以做到这一点，以及共享或路由这些数据的方法，但几乎所有足够大的系统中都会涉及一种或多种数据库。
- en: In this chapter, I’ll demonstrate how to add database access to the Spring Boot
    application created in the previous chapter. This chapter is meant to be a short
    primer on Spring Boot’s data capabilities, and subsequent chapters will dive much
    deeper. But in many cases, the basics covered here still apply well and provide
    a fully sufficient solution. Let’s dig in.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将演示如何将数据库访问添加到前一章中创建的 Spring Boot 应用程序中。本章旨在简要介绍 Spring Boot 的数据功能，并且后续章节将深入探讨。但在许多情况下，这里介绍的基础仍然适用并提供完全足够的解决方案。让我们深入了解吧。
- en: Code Checkout Checkup
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检查
- en: Please check out branch *chapter4begin* from the code repository to begin.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请从代码仓库的分支*chapter4begin*检出以开始。
- en: Priming Autoconfig for Database Access
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为数据库访问设置自动配置
- en: 'As demonstrated earlier, Spring Boot aims to simplify to the maximum extent
    possible the so-called 80–90% use case: the patterns of code and process that
    developers do over and over and over again. Once patterns are identified, Boot
    springs into action to initialize the required beans automatically, with sensible
    default configurations. Customizing a capability is as simple as providing one
    or more property values or creating a tailored version of one or more beans; once
    autoconfig detects the changes, it backs off and follows the developer’s guidance.
    Database access is a perfect example.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，Spring Boot 旨在尽可能简化所谓的 80–90% 使用案例：开发人员一遍又一遍地执行的代码和过程模式。一旦识别出模式，Boot 会自动初始化所需的
    Bean，使用合理的默认配置。定制一个能力就像提供一个或多个属性值或创建一个定制版本的一个或多个 Bean 一样简单；一旦自动配置检测到变化，它就会退出并遵循开发人员的指导。数据库访问就是一个完美的例子。
- en: What Do We Hope to Gain?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们希望获得什么？
- en: In our earlier example application, I used an `ArrayList` to store and maintain
    our list of coffees. This approach is straightforward enough for a single application,
    but it does have its drawbacks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例应用程序中，我使用了一个`ArrayList`来存储和维护我们的咖啡列表。这种方法对于单个应用程序来说足够简单，但它确实有其缺点。
- en: First, it isn’t resilient at all. If your application or the platform running
    it fails, all changes made to the list while the app was running—whether for seconds
    or months—disappear.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它根本不具备弹性。如果您的应用程序或运行该应用程序的平台失败，所有在应用程序运行期间对列表所做的更改——不论持续了几秒钟还是几个月——都会消失。
- en: Second, it doesn’t scale. Starting another instance of the application results
    in that second (or subsequent) app instance having its own distinct list of coffees
    it maintains. Data isn’t shared between the multiple instances, so changes to
    coffees made by one instance—new coffees, deletions, update—aren’t visible to
    anyone accessing a different app instance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它不具备可伸缩性。启动应用程序的另一个实例会导致第二个（或后续）应用实例具有其自己独特的咖啡列表。数据不会在多个实例之间共享，因此一个实例对咖啡所做的更改——添加新的咖啡、删除、更新——对于访问不同应用实例的任何人都是不可见的。
- en: Clearly this is no way to run a railroad.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 显然这不是运行铁路的方式。
- en: I cover a few different ways to fully solve these very real problems in upcoming
    chapters. But for now, let’s lay some groundwork that will serve as useful steps
    on the path there.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在接下来的章节中探讨几种不同的方法来完全解决这些非常现实的问题。但现在，让我们奠定一些基础，这些步骤将在未来的道路上非常有用。
- en: Adding a Database Dependency
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加数据库依赖
- en: 'In order to access a database from your Spring Boot application, you need a
    few things:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要从您的 Spring Boot 应用程序访问数据库，您需要一些东西：
- en: A running database, whether initiated by/embedded within your application or
    simply accessible to your application
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行中的数据库，无论是由您的应用程序启动/嵌入，还是仅对您的应用程序可访问
- en: Database drivers enabling programmatic access, usually provided by the database
    vendor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库驱动程序启用程序化访问，通常由数据库供应商提供。
- en: A Spring Data module for accessing the target database
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于访问目标数据库的Spring Data模块
- en: Certain Spring Data modules include the appropriate database drivers as a single
    selectable dependency from within the Spring Initializr. In other cases, such
    as when Spring uses the Java Persistence API (JPA) to access JPA-compliant datastores,
    it’s necessary to choose the Spring Data JPA dependency *and* a dependency for
    the target database’s specific driver, e.g., PostgreSQL.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 某些Spring Data模块将适当的数据库驱动程序作为Spring Initializr内的单个可选择依赖项包括在内。在其他情况下，例如当Spring使用Java持久化API（JPA）访问符合JPA的数据存储时，需要选择Spring
    Data JPA依赖项*和*目标数据库的特定驱动程序依赖项，例如PostgreSQL。
- en: To take the first step forward from memory constructs to persistent database,
    I’ll begin by adding dependencies, and thus capabilities, to our project’s build
    file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从内存构造迈出第一步到持久性数据库，我将从向我们项目的构建文件中添加依赖项和因此的功能开始。
- en: 'H2 is a fast database written completely in Java that has some interesting
    and useful features. For one thing, it’s JPA-compliant, so we can connect our
    application to it in the same manner we would to any other JPA database like Microsoft
    SQL, MySQL, Oracle, or PostgreSQL. It also has in-memory and disk-based modes.
    This allows us some useful options after we convert from our in-memory `ArrayList`
    to an in-memory database: we can either change H2 to disk-based persistence or—since
    we’re now using a JPA database—change to a different JPA database. Either option
    becomes much simpler at that point.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: H2是一个完全用Java编写的快速数据库，具有一些有趣且有用的特性。首先，它符合JPA标准，因此我们可以像连接任何其他JPA数据库（如Microsoft
    SQL、MySQL、Oracle或PostgreSQL）一样连接我们的应用程序到它上面。它还具有内存和基于磁盘的模式。这使得在我们从内存中的`ArrayList`转换到内存数据库之后，我们可以选择一些有用的选项：要么将H2更改为基于磁盘的持久化，要么（因为我们现在使用的是JPA数据库）切换到另一个JPA数据库。在那一点上，任何选项都变得简单得多。
- en: 'To enable our application to interact with the H2 database, I’ll add the following
    two dependencies to the `<dependencies>` section of our project’s *pom.xml*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用程序能够与H2数据库交互，我将在我们项目的*pom.xml*的`<dependencies>`部分添加以下两个依赖项：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The H2 database driver dependency’s scope of `runtime` indicates that it will
    be present in the runtime and test classpath but not in the compile classpath.
    This is a good practice to adopt for libraries that are not required for compilation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: H2数据库驱动程序依赖项的`runtime`范围表示它将出现在运行时和测试类路径中，但不会出现在编译类路径中。这是对于不需要编译的库采用的良好做法。
- en: Once you save your updated *pom.xml* and (if necessary) reimport/refresh your
    Maven dependencies, you have access to the functionality included within the added
    dependencies. Next, it’s time to write a bit of code to use it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了更新的*pom.xml*文件并且（如果必要的话）重新导入/刷新了Maven依赖项，您就可以访问所添加依赖项中包含的功能。接下来，是时候写一些代码来使用它了。
- en: Adding Code
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加代码
- en: Since we already have code in place to manage coffees in some fashion, we’ll
    need to refactor a bit while we add our new database capabilities. I find the
    best place to begin is with the domain class(es), in this case, `Coffee`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经有了一些管理咖啡的代码，我们需要在添加新的数据库功能时进行一些重构。我发现最好的开始地方是领域类（们），在这种情况下是`Coffee`。
- en: The @Entity
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '@Entity'
- en: As mentioned earlier, H2 is a JPA-compliant database, so I’ll add JPA annotations
    to connect the dots. To the `Coffee` class itself I add an `@Entity` annotation
    from `javax.persistence` that indicates `Coffee` is a persistable entity, and
    to the existing `id` member variable, I add the `@Id` annotation (also from `javax.persistence`)
    to mark it as the database table’s ID field.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，H2是一个符合JPA标准的数据库，因此我将添加JPA注解来连接这些点。对于`Coffee`类本身，我将添加来自`javax.persistence`的`@Entity`注解，表示`Coffee`是一个可持久化的实体，并且对现有的`id`成员变量，我将添加`@Id`注解（也来自`javax.persistence`）来标记它作为数据库表的ID字段。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If the class name—`Coffee` in this case—doesn’t match the desired database table
    name, the `@Entity` annotation accepts a `name` parameter for specifying the data
    table name to match the annotated entity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类名——在本例中是`Coffee`——不与期望的数据库表名匹配，`@Entity`注解接受一个`name`参数来指定匹配带注解实体的数据表名。
- en: If your IDE is helpful enough, it may provide you feedback that something is
    still missing in the `Coffee` class. For example, IntelliJ underlines the class
    name in red and provides the helpful pop-up upon mouseover shown in [Figure 4-1](#missing_constructor_in_the_jpa_coffee_class).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的集成开发环境足够智能，它可能会提示你在`Coffee`类中仍然缺少某些内容。例如，IntelliJ会用红色下划线标出类名，并在鼠标悬停时显示有用的弹出窗口，如[图 4-1](#missing_constructor_in_the_jpa_coffee_class)所示。
- en: '![sbur 0401](Images/sbur_0401.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0401](Images/sbur_0401.png)'
- en: Figure 4-1\. Missing constructor in the JPA `Coffee` class
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-1\. JPA `Coffee`类中缺少的构造函数
- en: 'Java Persistence API requires a no-argument constructor for use when creating
    objects from database table rows, so I’ll add that next. This results in our next
    IDE warning, as displayed in [Figure 4-2](#with_a_no_arg_constructor_id_can_no_longer_be_final):
    in order to have a no-arg constructor, we must make all member variables mutable,
    i.e., nonfinal.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Java持久化API要求在从数据库表行创建对象时使用无参数构造函数，因此接下来我将添加这个构造函数。这导致我们的IDE显示下一个警告，如[图 4-2](#with_a_no_arg_constructor_id_can_no_longer_be_final)所示：为了有一个无参数构造函数，我们必须使所有成员变量可变，即非final。
- en: '![sbur 0402](Images/sbur_0402.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0402](Images/sbur_0402.png)'
- en: Figure 4-2\. With a no-arg constructor, `id` cannot be final
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-2\. 有了无参数构造函数，`id`不能是final
- en: Removing the `final` keyword from the declaration for the `id` member variable
    solves that. Making `id` mutable also requires our `Coffee` class to have a mutator
    method for `id` for JPA to be able to assign a value to that member, so I add
    the `setId()` method as well, as shown in [Figure 4-3](#the_new_setid_method).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从声明`id`成员变量中删除`final`关键字解决了这个问题。为了使`id`可变，我们的`Coffee`类还需要为`id`添加一个mutator方法，以便JPA能够为该成员变量分配一个值，因此我也添加了`setId()`方法，如[图 4-3](#the_new_setid_method)所示。
- en: '![sbur 0403](Images/sbur_0403.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0403](Images/sbur_0403.png)'
- en: Figure 4-3\. The new `setId()` method
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-3\. 新的`setId()`方法
- en: The Repository
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库（Repository）
- en: With `Coffee` now defined as a valid JPA entity able to be stored and retrieved,
    it’s time to make the connection to the database
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将`Coffee`定义为有效的JPA实体，可以进行存储和检索，是时候与数据库建立连接了。
- en: For such a simple concept, configuring and establishing a database connection
    in the Java ecosystem has long been a rather cumbersome affair. As mentioned in
    [Chapter 1](ch01.xhtml#sbur-01), using an application server to host a Java application
    required developers to perform several tedious steps just to get things ready.
    Once you started interacting with the database, or if you were accessing a datastore
    directly from a Java utility or client application, you would be expected to perform
    additional steps involving `PersistenceUnit`, `EntityManagerFactory`, and `EntityManager`
    APIs (and possibly `DataSource` objects), open and close the database, and more.
    It’s a lot of repetitive ceremony for something developers do so often.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个如此简单的概念，在Java生态系统中配置和建立数据库连接长期以来一直是一件相当繁琐的事情。正如在[第1章](ch01.xhtml#sbur-01)中提到的，使用应用服务器托管Java应用程序需要开发人员执行多个繁琐的步骤才能做好准备工作。一旦开始与数据库交互，或者如果直接从Java实用程序或客户端应用程序访问数据存储，则需要执行涉及`PersistenceUnit`、`EntityManagerFactory`和`EntityManager`
    API（以及可能的`DataSource`对象）、打开和关闭数据库等额外步骤。对于开发人员如此频繁地进行的操作来说，这些仪式感很多。
- en: Spring Data introduces the concept of repositories. A `Repository` is an interface
    defined in Spring Data as a useful abstraction above various databases. There
    are other mechanisms for accessing databases from Spring Data that will be explained
    in subsequent chapters, but the various flavors of `Repository` are arguably the
    most useful in the most cases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data引入了仓库（repositories）的概念。`Repository`是Spring Data中定义的一个接口，作为对各种数据库的有用抽象。Spring
    Data中还有其他访问数据库的机制，将在后续章节中详细解释，但各种类型的`Repository`可以说是最常用的。
- en: '`Repository` itself is a mere placeholder for the following types:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Repository`本身只是以下类型的一个占位符：'
- en: The object stored in the database
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在数据库中的对象
- en: The object’s unique ID/primary key field
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的唯一ID/主键字段
- en: 'There is a lot more to repositories, of course, and I cover a great deal of
    that in [Chapter 6](ch06.xhtml#sbur-06). For now, let’s focus on two that are
    directly relevant to our current example: `CrudRepository` and `JpaRepository`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，关于仓库还有很多内容，这些内容我会在[第6章](ch06.xhtml#sbur-06)中详细介绍。现在，让我们专注于当前示例中直接相关的两个：`CrudRepository`和`JpaRepository`。
- en: Recall my earlier mention of the preferred practice of writing code to use the
    highest-level interface suited to purpose? While `JpaRepository` extends a handful
    of interfaces and thus incorporates broader functionality, `CrudRepository` covers
    all of the key CRUD capabilities and is sufficient for our (so far) simple application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我之前提到的使用最高级别接口来编写代码的首选实践吗？虽然`JpaRepository`扩展了几个接口，并因此包含了更广泛的功能，但`CrudRepository`涵盖了所有关键的CRUD功能，对于我们（到目前为止）简单的应用程序已经足够了。
- en: 'The first thing to do to enable repository support for our application is to
    define an interface specific to our application by extending a Spring Data `Repository`
    interface: .interfaceCoffeeRepo'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用我们应用程序的仓库支持，首先需要通过扩展Spring Data的`Repository`接口来定义一个特定于我们应用程序的接口：`.interfaceCoffeeRepo`
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The two types defined are the object type to store and the type of its unique
    ID.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的两种类型是存储对象类型及其唯一ID的类型。
- en: 'This represents the simplest expression of repository creation within a Spring
    Boot app. It’s possible, and very useful at times, to define queries for a repository;
    I’ll dive into that in a future chapter as well. But here is the “magical” part:
    Spring Boot’s autoconfiguration takes into account the database driver on the
    classpath (in this case, H2), the repository interface defined in our application,
    and the JPA entity `Coffee` class definition and creates a database proxy bean
    *on our behalf*. No need to write lines of nearly identical boilerplate for every
    application when the patterns are this clear and consistent, which frees the developer
    to work on new, requested functionality.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表了在Spring Boot应用程序中创建仓库的最简表达方式。在某些情况下，定义仓库的查询是可能的，也是非常有用的；在未来的章节中我将深入讨论。但这里有一个“神奇”的部分：Spring
    Boot的自动配置考虑了类路径上的数据库驱动（在本例中是H2）、我们应用程序中定义的仓库接口，以及JPA实体`Coffee`类定义，并为我们创建了一个数据库代理bean
    *on our behalf*。当模式如此明确和一致时，无需为每个应用程序编写几乎相同的样板代码，这使开发人员能够专注于新的、被请求的功能。
- en: The utility, aka “Springing” into action
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实用程序，即“Springing”进入行动
- en: Now to put that repository to work. I’ll approach this step by step as in previous
    chapters, introducing functionality first and polishing afterward.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候让那个仓库投入运行了。我会像前几章一样，分步骤地介绍功能，先引入功能，然后再进行完善。
- en: First, I’ll autowire/inject the repository bean into `RestApiDemoController`
    so the controller can access it when receiving requests via the external API,
    as shown in [Figure 4-4](#autowire_repository_into_restapidemocontrollder).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将仓库bean自动装配/注入到`RestApiDemoController`中，以便控制器可以在通过外部API接收请求时访问它，如[图 4-4](#autowire_repository_into_restapidemocontrollder)所示。
- en: 'First I declare the member variable with:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我声明了成员变量：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, I add it as a parameter to the constructor with:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我通过以下方式将其作为构造函数的参数添加：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to Spring Framework 4.3, it was necessary in all cases to add the `@Autowired`
    annotation above the method to indicate when a parameter represented a Spring
    bean to be autowired/injected. From 4.3 onward, a class with a single constructor
    doesn’t require the annotation for autowired parameters, a useful time-saver.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Framework 4.3之前，必须在所有情况下在方法上方添加`@Autowired`注解，以指示参数表示Spring bean应自动装配/注入。从4.3开始，具有单个构造函数的类不需要为自动装配的参数添加注解，这是一个有用的时间节省功能。
- en: '![sbur 0404](Images/sbur_0404.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0404](Images/sbur_0404.png)'
- en: Figure 4-4\. Autowire repository into `RestApiDemoController`
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. 将仓库自动装配到`RestApiDemoController`
- en: With the repository in place, I delete the `List<Coffee>` member variable and
    change the initial population of that list in the constructor to instead save
    the same coffees to the repository, as in [Figure 4-4](#autowire_repository_into_restapidemocontrollder).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当仓库设置完成后，我删除了`List<Coffee>`成员变量，并在构造函数中将该列表的初始填充更改为将相同的咖啡保存到仓库中，如[图 4-4](#autowire_repository_into_restapidemocontrollder)中所示。
- en: Per [Figure 4-5](#replacing_the_removed_coffees_member_variable), removing the
    `coffees` variable immediately flags all references to it as unresolvable symbols,
    so the next task is replacing those with appropriate repository interactions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[图 4-5](#replacing_the_removed_coffees_member_variable)，立即删除`coffees`变量会立即标记所有对它的引用为不可解析的符号，因此下一个任务是用适当的仓库交互替换这些引用。
- en: '![sbur 0405](Images/sbur_0405.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0405](Images/sbur_0405.png)'
- en: Figure 4-5\. Replacing the removed `coffees` member variable
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. 替换已移除的`coffees`成员变量
- en: 'As a simple retrieval of all coffees with no parameters, the `getCoffees()`
    method is a great place to begin. Using the `findAll()` method built into `CrudRepository`,
    it isn’t even necessary to change the return type of `getCoffees()` as it also
    returns an `Iterable` type; simply calling `coffeeRepository.findAll()` and returning
    its result does the job, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为没有参数的简单检索所有咖啡的方法，`getCoffees()`方法是一个很好的起点。使用内置在`CrudRepository`中的`findAll()`方法，甚至不需要更改`getCoffees()`的返回类型，因为它还返回一个`Iterable`类型；只需调用`coffeeRepository.findAll()`并返回其结果即可完成任务，如下所示：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Refactoring the `getCoffeeById()` method presents some insights into how much
    simpler your code can be, thanks to the functionality that repositories bring
    to the mix. We no longer have to manually search the list of coffees for a matching
    `id`; `CrudRepository`’s `findById()` method handles it for us, as demonstrated
    in the following code snippet. And since `findById()` returns an `Optional` type,
    no changes whatsoever are required for our method signature:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重构`getCoffeeById()`方法为我们的代码带来了一些洞见，感谢存储库为混合带来的功能。我们不再需要手动搜索匹配的`id`咖啡列表了；`CrudRepository`的`findById()`方法为我们处理了，如下代码片段所示。由于`findById()`返回一个`Optional`类型，因此我们的方法签名不需要任何更改：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Converting the `postCoffee()` method to use the repository is also a fairly
    straightforward endeavor, as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将`postCoffee()`方法转换为使用存储库也是一个相当简单的尝试，如下所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the `putCoffee()` method, we again see some of the substantial time- and
    code-saving functionality of the `CrudRepository` on display. I use the built-in
    `existsById()` repository method to determine if this is a new or existing `Coffee`
    and return the appropriate HTTP status code along with the saved `Coffee`, as
    shown in this listing:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`putCoffee()`方法，我们再次看到了`CrudRepository`所展示的大量节省时间和代码的功能。我使用内置的`existsById()`存储库方法来确定这是新的还是现有的`Coffee`，并返回适当的HTTP状态代码以及保存的`Coffee`，如此清单所示：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, I update the `deleteCoffee()` method to use `CrudRepository`’s built-in
    `deleteById()` method, as shown here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我更新了`deleteCoffee()`方法以使用`CrudRepository`内置的`deleteById()`方法，如下所示：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Leveraging a repository bean created using the fluent API of `CrudRepository`
    streamlines the code for the `RestApiDemoController` and makes it much clearer,
    in terms of both readability and understandability, as evidenced by the complete
    code listing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 利用使用`CrudRepository`的流畅API创建的存储库bean简化了`RestApiDemoController`的代码，并使其更加清晰，无论是从可读性还是可理解性方面，都能清晰表达，如完整代码清单所示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now all that remains is to verify that our application works as expected and
    external functionality remains the same.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，唯一剩下的就是验证我们的应用程序按预期工作并且外部功能保持不变。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: An alternative approach to testing functionality—and a recommended practice—is
    to create unit tests first, a la Test Driven Development (TDD). I strongly recommend
    this approach in real-world software development environments, but I’ve found
    that when the goal is to demonstrate and explain discrete software development
    concepts, less is better; showing as little as possible to clearly communicate
    key concepts increases signal and decreases noise, even if the noise is useful
    later. As such, I cover testing in a dedicated chapter later in this book.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 测试功能的另一种方法——也是推荐的实践方法——是首先创建单元测试，类似于测试驱动开发（TDD）。我强烈推荐这种方法在真实的软件开发环境中，但我发现当目标是演示和解释离散的软件开发概念时，越少越好；尽可能少地显示以清晰传达关键概念会增加信号，减少噪音，即使噪音后来也很有用。因此，我在本书的后面的一个专门章节中介绍了测试。
- en: Saving and Retrieving Data
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和检索数据
- en: 'Once more unto the breach, dear friends, once more: accessing the API from
    the command line using HTTPie. Querying the *coffees* endpoint results in the
    same four coffees being returned from our H2 database as before, as shown in [Figure 4-6](#get_all_coffees).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 再次进入领域，亲爱的朋友们，再次：使用HTTPie从命令行访问API。查询*咖啡*端点会从我们的H2数据库中返回与之前相同的四种咖啡，如[图 4-6](#get_all_coffees)所示。
- en: Copying the `id` field for one of the coffees just listed and pasting it into
    a coffee-specific `GET` request produces the output shown in [Figure 4-7](#get_a_coffee_4).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 复制刚列出的其中一种咖啡的`id`字段，并将其粘贴到特定于咖啡的`GET`请求中，将产生如[图 4-7](#get_a_coffee_4)所示的输出。
- en: '![sbur 0406](Images/sbur_0406.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0406](Images/sbur_0406.png)'
- en: Figure 4-6\. `GET`-ting all coffees
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6\. 获得所有咖啡
- en: '![sbur 0407](Images/sbur_0407.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0407](Images/sbur_0407.png)'
- en: Figure 4-7\. `GET`-ting a coffee
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. 获得一杯咖啡
- en: In [Figure 4-8](#post_a_new_coffee_to_the_list_4), I `POST` a new coffee to
    the application and its database.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 4-8](#post_a_new_coffee_to_the_list_4)中，我向应用程序和其数据库`POST`了一个新的咖啡。
- en: '![sbur 0408](Images/sbur_0408.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0408](Images/sbur_0408.png)'
- en: Figure 4-8\. `POST`-ing a new coffee to the list
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-8。向列表中`POST`一个新的咖啡
- en: As discussed in the previous chapter, a `PUT` command should allow for updating
    an existing resource or adding a new one if the requested resource doesn’t already
    exist. In [Figure 4-9](#put_an_update_to_an_existing_coffee), I specify the `id`
    of the coffee just added and pass to the command a JSON object with a change to
    that coffee’s name. After the update, the coffee with the `id` of “99999” now
    has a `name` of “Caribou Coffee” instead of “Kaldi’s Coffee”, and the return code
    is 200 (OK), as expected.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所讨论的，`PUT`命令应允许更新现有资源或如果请求的资源尚不存在则添加一个新的资源。在[图 4-9](#put_an_update_to_an_existing_coffee)中，我指定了刚刚添加的咖啡的`id`，并传递给命令一个修改该咖啡名称的JSON对象。更新后，`id`为“99999”的咖啡现在的`name`是“Caribou
    Coffee”，而不是“Kaldi's Coffee”，返回码是200（OK），如预期的那样。
- en: '![sbur 0409](Images/sbur_0409.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0409](Images/sbur_0409.png)'
- en: Figure 4-9\. `PUT`-ting an update to an existing coffee
  id: totrans-97
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-9。对现有咖啡进行`PUT`更新
- en: Next I initiate a similar `PUT` request but specify an `id` in the URI that
    doesn’t exist. The application adds a new coffee to the database in compliance
    with IETF-specified behavior and correctly returns an HTTP status of 201 (Created),
    as shown in [Figure 4-10](#put_a_new_coffee_4).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我发起了类似的`PUT`请求，但在URI中指定了一个不存在的`id`。应用程序根据IETF指定的行为向数据库添加了一个新的咖啡，并正确返回了HTTP状态码201（已创建），如[图 4-10](#put_a_new_coffee_4)所示。
- en: '![sbur 0410](Images/sbur_0410.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0410](Images/sbur_0410.png)'
- en: Figure 4-10\. `PUT`-ting a new coffee
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-10。`PUT`一个新的咖啡
- en: Finally, I test deletion of a specified coffee by issuing a `DELETE` request,
    which returns only an HTTP status code of 200 (OK), indicating the resource was
    successfully deleted and nothing else, since the resource no longer exists, per
    [Figure 4-11](#delete_a_coffee_4). To check our end state, we once again query
    the full list of coffees ([Figure 4-12](#get_all_coffees_now_in_the_list_4)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我通过发出`DELETE`请求来测试删除指定的咖啡，该请求仅返回HTTP状态码200（OK），表示资源已成功删除，因为资源不再存在，根据[图 4-11](#delete_a_coffee_4)。为了检查我们的最终状态，我们再次查询所有咖啡的完整列表（参见[图 4-12](#get_all_coffees_now_in_the_list_4)）。
- en: '![sbur 0411](Images/sbur_0411.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0411](Images/sbur_0411.png)'
- en: Figure 4-11\. `DELETE`-ing a coffee
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-11。`DELETE`一个咖啡
- en: '![sbur 0412](Images/sbur_0412.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0412](Images/sbur_0412.png)'
- en: Figure 4-12\. `GET`-ting all coffees now in the list
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-12。现在在列表中`GET`所有的咖啡
- en: 'As before, we now have one additional coffee that wasn’t initially in our repository:
    Mötor Oil Coffee.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与以往一样，我们现在有一个额外的咖啡，最初不在我们的存储库中：Mötor Oil Coffee。
- en: A Bit of Polishing
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点打磨
- en: 'As always, there are many areas that could benefit from additional attention,
    but I’ll confine the focus to two: extracting the initial population of sample
    data to a separate component and a bit of condition reordering for clarity.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，有许多地方可以从额外的关注中受益，但我将专注于两个方面：将示例数据的初始填充提取到单独的组件中，并进行一些条件重排序以提高清晰度。
- en: Last chapter I populated the list of coffees with some initial values in the
    `RestApiDemoController` class, so I maintained that same structure—until now—in
    this chapter after converting to a database with repository access. A better practice
    is to extract that functionality to a separate component that can be enabled or
    disabled quickly and easily.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章我在`RestApiDemoController`类中填充了咖啡列表的一些初始值，因此在将其转换为具有存储库访问权限的数据库后，在本章中我保持了同样的结构。更好的做法是将该功能提取到一个可以快速轻松启用或禁用的单独组件中。
- en: 'There are many ways to execute code automatically upon application startup,
    including using a `CommandLineRunner` or `ApplicationRunner` and specifying a
    lambda to accomplish the desired goal: in this case, creating and saving sample
    data. But I prefer using an `@Component` class and an `@PostConstruct` method
    to accomplish the same thing for the following reasons:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以在应用程序启动时自动执行代码，包括使用`CommandLineRunner`或`ApplicationRunner`并指定lambda来实现所需的目标：在这种情况下，创建和保存示例数据。但我更喜欢使用`@Component`类和`@PostConstruct`方法来实现相同的功能，原因如下：
- en: When `CommandLineRunner` and `ApplicationRunner` bean-producing methods autowire
    a repository bean, unit tests that mock the repository bean within the test (as
    is typically the case) break.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`CommandLineRunner`和`ApplicationRunner`生成bean方法自动装配一个存储库bean时，测试单元会打破在测试中（通常情况下是这样）模拟存储库bean。
- en: If you mock the repository bean within the test or wish to run the application
    without creating sample data, it’s quick and easy to disable the actual data-populating
    bean simply by commenting out its `@Component` annotation.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在测试中模拟存储库 bean 或希望在不创建示例数据的情况下运行应用程序，只需注释掉其 `@Component` 注解即可禁用实际数据填充 bean，这样做快捷而简单。
- en: 'I recommend creating a `DataLoader` class similar to the one shown in the following
    code block. Extracting the logic to create sample data to the `DataLoader` class’s
    `loadData()` method and annotating it with `@PostContruct` restores `RestApiDemoController`
    to its intended single purpose of providing an external API and makes the `DataLoader`
    responsible for *its* intended (and obvious) purpose:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议创建一个类似于下面代码块中展示的 `DataLoader` 类。将创建示例数据的逻辑提取到 `DataLoader` 类的 `loadData()`
    方法中，并用 `@PostContruct` 注解进行标注，将 `RestApiDemoController` 恢复到其既定的单一目的，即提供外部 API，并使
    `DataLoader` 负责其既定（和显而易见的）目的：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The other dab of polishing is an admittedly small adjustment to the boolean
    condition of the ternary operator within the `putCoffee()` method. After refactoring
    the method to use a repository, no compelling justification remains for evaluating
    the negative condition first. Removing the not (!) operator from the condition
    slightly improves clarity; swapping the true and false values of the ternary operator
    are of course required to maintain the original outcomes, as reflected in the
    following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个润色的一点是在 `putCoffee()` 方法中三元运算符的布尔条件微调。在重构方法以使用存储库后，不再需要评估否定条件。从条件中去除否定（!）操作符略微提升了清晰度；当然，交换三元运算符的真和假值是必需的，以保持原始结果，如以下代码所示：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Code Checkout Checkup
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code Checkout Checkup
- en: For complete chapter code, please check out branch *chapter4end* from the code
    repository.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取完整的章节代码，请从代码仓库的 *chapter4end* 分支检出。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter demonstrated how to add database access to the Spring Boot application
    created in the last chapter. While it was meant to be a concise introduction to
    Spring Boot’s data capabilities, I provided an overview of the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何将数据库访问添加到上一章创建的 Spring Boot 应用程序中。虽然它旨在简明介绍 Spring Boot 的数据功能，但我提供了以下概述：
- en: Java database access
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 数据库访问
- en: The Java Persistence API (JPA)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 持久化 API（JPA）
- en: The H2 database
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2 数据库
- en: Spring Data JPA
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: Spring Data repositories
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data 存储库
- en: Mechanisms to create sample data via repositories
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过存储库创建示例数据的机制
- en: Subsequent chapters will dive much deeper into Spring Boot database access,
    but the basics covered in this chapter supply a solid foundation upon which to
    build and, in many cases, are sufficient by themselves.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节将深入探讨 Spring Boot 数据库访问的更多细节，但本章涵盖的基础已经为构建提供了坚实的基础，在许多情况下，这些基础已经足够。
- en: In the next chapter, I’ll discuss and demonstrate useful tools Spring Boot provides
    to gain insights into your applications when things aren’t functioning as expected
    or when you need to verify that they are.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将讨论和演示 Spring Boot 提供的有用工具，以便在应用程序不按预期方式运行或需要验证其运行情况时，获取对应用程序的洞察。
