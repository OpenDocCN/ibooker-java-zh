- en: Chapter 8\. Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 结论
- en: If you’ve read this far, you’ve hopefully enjoyed the book. We enjoyed writing
    it as well. In this concluding chapter you’ll learn about where to go next in
    your programming career. We’ll offer some advice on how to evolve your skills
    and push yourself to the next level in your career as a developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直读到这里，希望你已经喜欢这本书了。我们写作的过程也很愉快。在这个结尾章节中，你将了解到如何在你的编程生涯中下一步怎么走。我们将提供一些建议，帮助你如何发展你的技能，并在作为开发者的职业生涯中推动自己进入下一个级别。
- en: Project-Based Structure
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于项目的结构
- en: The project-based structure of the book was designed to help you understand
    software development concepts more easily. You were presented topics within software
    projects in order to understand the context of software engineering decisions.
    Context is critical in software engineering—decisions that may be right in one
    context aren’t so applicable in another. Many developers overuse and abuse subclassing
    due to misunderstanding that it’s a mechanism for code reuse. Hopefully we’ve
    discouraged that idea in your mind in [Chapter 4](ch04.xhtml#chapter_04).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的项目结构旨在帮助你更轻松地理解软件开发的概念。我们在软件项目内讨论的话题旨在帮助你理解软件工程决策的背景。在软件工程中，上下文至关重要——在一个上下文中正确的决策在另一个上下文中可能并不适用。许多开发者由于误解继承是代码复用的机制而过度使用和滥用子类化。希望我们已经在[第4章](ch04.xhtml#chapter_04)中让你对这个想法有所警觉。
- en: But you can’t simply hope to read a book and magically become an expert software
    developer. It takes practice, experience, and patience. This book is just here
    to help optimize and improve the process. That’s why we’ve added an “Iterating
    on You” section to each chapter—they offer suggestions as to how you can take
    the material in this book further and improve your understanding.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你不能简单地希望通过阅读一本书就神奇地成为一名专业的软件开发者。这需要练习、经验和耐心。这本书只是帮助优化和改进这个过程的工具。这就是为什么我们在每一章节中都添加了一个“关于你的迭代”部分——它们提供了关于如何进一步利用本书内容并提高你理解的建议。
- en: Iterating on You
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于你的迭代
- en: As a software developer you probably often approach projects in an iterative
    fashion. That’s to say, slice off the highest priority week or two’s worth of
    work items, implement them, and then use the feedback in order to decide on the
    next set of items. We’ve found that it’s often worth evaluating the progress of
    your own skills in the same way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件开发者，你可能经常以迭代的方式处理项目。也就是说，将最高优先级的一两周工作项划分出来，实施它们，然后利用反馈决定下一组工作项。我们发现，经常评估自己技能的进展是非常值得的。
- en: Taking a regular retrospective on yourself can help you gain focus and direction
    should you need it. Agile software development often involves weekly retrospectives,
    but you don’t personally need to do it so frequently. A quarterly or biannual
    retrospective can be very helpful. One topic we’ve found useful is to evaluate
    what skills would help your current or a future job. In order to ensure that these
    skills are progressed, it’s helpful to set a goal for the next quarter. This could
    be something to learn or something to improve upon. It doesn’t need to a big goal
    like learning a whole new programming language; it could be something simple like
    picking up a new testing framework or a couple of design patterns.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 定期对自己进行回顾可以帮助你在需要时获得焦点和方向。敏捷软件开发通常涉及每周的回顾，但你个人不需要那么频繁地做。每季度或每半年进行一次回顾会非常有帮助。我们发现一个有用的主题是评估哪些技能将有助于你当前或未来的工作。为了确保这些技能得到提升，设定下一个季度的目标是很有帮助的。这可以是学习或改进的事项。这个目标不需要像学习全新的编程语言那样宏大；可以是像掌握一个新的测试框架或几种设计模式这样简单的事情。
- en: We’ve heard pushback from some developers when it comes to skills. A frequently
    asked question is “How can I be constantly expected to learn new technologies,
    practices, and principles?” It’s not easy and everyone is busy. They trick is
    to not worry about trying to learn everything in the technology industry. That’s
    a surefire route to madness! Finding key skills that will serve you over time
    and build upon your existing skillset is what helps you become an excellent developer.
    The key thing is to be always improving yourself and iterating on you.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到技能时，我们听到一些开发者的反对意见。一个经常被问到的问题是“我怎么能不断地学习新技术、实践和原则呢？”这并不容易，每个人都很忙碌。关键在于不要试图在技术行业学习所有东西。那是一条通向疯狂的捷径！找到一些关键技能，这些技能会随着时间的推移为你服务，并建立在你现有的技能基础之上，这才是帮助你成为一名优秀开发者的关键。关键是不断地改进自己，对自己进行迭代。
- en: Deliberate Practice
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刻意练习
- en: While this book has covered a lot of the key concepts and skills that are needed
    to be a good developer, it’s important to practice them. Reading isn’t enough
    on its own—practice helps you internalize these skills and apply them yourself.
    In your day job seeking out situations where different techniques are appropriate
    to apply will help. As every pattern described in the book has places where it
    works and places where it doesn’t work, so it’s also helpful to consider situations
    where a technique isn’t helpful.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书涵盖了许多成为优秀开发者所需的关键概念和技能，但实践是至关重要的。仅仅阅读是不够的——实践可以帮助你内化这些技能并自己应用它们。在日常工作中寻找适合应用不同技术的情境会有所帮助。因为本书描述的每种模式都有适用和不适用的地方，所以考虑那些不适合使用技术的情形也是很有帮助的。
- en: 'Often we think that natural talent and intellect are the most crucial factors
    to success, but a lot of research has established that practice and work are the
    real the key to success. Books such as *Talent is Overrated* by Geoff Colvin (Portfolio,
    2008) and *Outliers: The Story of Success* by Malcolm Gladwell (Penguin, 2009)
    evaluate a number of key factors to being successful in your life, and the most
    effective of all is deliberate practice.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常认为自然天赋和智力是成功的关键因素，但大量研究已经证明，实践和工作才是真正的成功关键。例如，Geoff Colvin的《天才是被高估的》（Portfolio,
    2008）和Malcolm Gladwell的《异类：成功之道》（Penguin, 2009）评估了成功生活的许多关键因素，而刻意练习是其中最有效的一个。
- en: Deliberate practice is a form of practice that has purpose and is systematic.
    Deliberate practice has the goal of trying to improve performance and requires
    focus and attention. Often when people practice their skills to improve them,
    they just engage in repetition. Doing the same thing over and over again expecting
    to get better at it is not the most effective way of doing things.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 刻意练习是一种有目的且系统化的练习形式。刻意练习的目标是试图提高表现，需要专注和注意力。通常，当人们练习他们的技能以提高它们时，他们只是在重复。一遍又一遍地做同样的事情，期望在它上面变得更好，这并不是做事情的最有效方式。
- en: One good example of this was when we were exploring and learning the [Eclipse
    Collections library](https://www.eclipse.org/collections/). In order to understand
    and learn the library in a systematic way we stepped through the excellent set
    of code Katas that come with the library in question. To ensure that we were getting
    a really good understanding, we stepped through the Katas three times. Each time
    we started from scratch and compared my solution with the one that we had done
    previously, finding cleaner, better, and faster ways of doing them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是当我们在探索和学习[Eclipse Collections库](https://www.eclipse.org/collections/)时。为了系统地理解和学习该库，我们按顺序完成了附带的一套出色的代码Kata。为了确保我们真正理解透彻，我们重复进行了三次Kata。每次都是从头开始，然后将我们之前的解决方案与当前的进行比较，找到更清晰、更好和更快的方法。
- en: The thing is that repeating personal behaviors means that they are automatic.
    So if you pick up bad habits during your career, you can end up teaching them
    to yourself through practicing on the job. Experience reinforces habit. Deliberate
    practice is the way to break out of that cycle. Deliberate practice may involve
    practicing new approaches from books systematically. It may involve taking a small
    problem that you’ve solved before and solving it repeatedly with different approaches.
    It may involve going on training courses that have exercises that have been designed
    to practice. No matter which route you go down, deliberate practice is the key
    to honing your skills over time and going beyond what this book covers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，重复个人行为意味着它们变得自动化。所以，如果你在职业生涯中养成了坏习惯，你可能会通过在工作中实践来教给自己。经验加强习惯。刻意练习是打破这一循环的方法。刻意练习可能包括系统地从书籍中练习新方法。它可能包括多次采用不同方法解决您以前解决过的小问题。它可能包括参加旨在进行练习设计的培训课程。无论选择哪条路，刻意练习都是随着时间磨练技能并超越本书所涵盖内容的关键。
- en: Next Steps and Additional Resources
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步和额外资源
- en: OK, so hopefully you’re convinced that this book isn’t the end of the road in
    terms of learning, but what should you look at next?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，希望你现在相信这本书不是学习的终点，但接下来应该看什么呢？
- en: Getting involved in open source is a great way to learn more about software
    and expand your horizons. Many of the most popular Java open source projects,
    like JUnit and Spring are hosted on [GitHub](https://github.com/). Some projects
    can be more welcoming than others but often open source maintainers are overworked
    and in need of help on their projects. You could take a look at the bug tracker
    and see if there’s anything you can work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 参与开源是学习更多关于软件并拓展视野的好方法。许多最受欢迎的Java开源项目，如JUnit和Spring，都托管在[GitHub](https://github.com/)上。有些项目可能比其他项目更友好，但通常开源维护者工作繁忙，需要在他们的项目上获得帮助。你可以查看Bug追踪器，看看是否有什么可以做的。
- en: Formal training courses and online learning are another practical and popular
    way of improving your skills. Online training courses are increasingly popular
    and both [Pluralsight](http://pluralsight.com/) and [the O’Reilly Learning Platform](http://safaribooksonline.com/)
    have a great selection of Java training courses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正式的培训课程和在线学习是提升技能的另一种实用和流行方式。在线培训课程越来越受欢迎，[Pluralsight](http://pluralsight.com/)和[O'Reilly学习平台](http://safaribooksonline.com/)都有大量优秀的Java培训课程可供选择。
- en: Another fantastic source of information for developers are blogs and Twitter.
    Both [Richard](http://twitter.com/richardwarburto) and [Raoul](https://twitter.com/raouluk)
    are on Twitter and often post links on software development. The [Programming
    Reddit](http://reddit.com/r/programming) often acts as a strong link aggregator,
    as does [Hacker News](http://news.ycombinator.com/). Finally, the training company
    that the book authors run (Iteratr Learning) also provides a series of free [articles](http://iteratrlearning.com/articles)
    for anyone to read.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者获取信息的另一个绝佳来源是博客和推特。[理查德](http://twitter.com/richardwarburto)和[拉乌尔](https://twitter.com/raouluk)都在推特上，并经常发布关于软件开发的链接。[编程
    Reddit](http://reddit.com/r/programming)经常作为一个强大的链接聚合器，就像[Hacker News](http://news.ycombinator.com/)一样。最后，本书作者运营的培训公司（Iteratr
    Learning）还提供一系列免费的[文章](http://iteratrlearning.com/articles)，供任何人阅读。
- en: Thank you for reading this book. We appreciate your thoughts and feedback and
    wish you the best in your journey as a Java developer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读本书。我们感谢您的想法和反馈，并祝愿您作为Java开发者的旅程一切顺利。
