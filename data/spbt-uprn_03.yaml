- en: Chapter 3\. Creating Your First Spring Boot REST API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建您的第一个Spring Boot REST API
- en: In this chapter, I explain and demonstrate how to develop a basic working application
    using Spring Boot. Since most applications involve exposing backend cloud resources
    to users, usually via a frontend UI, an Application Programming Interface (API)
    is an excellent starting point for both understanding and practicality. Let’s
    get started.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将解释并演示如何使用Spring Boot开发一个基本的工作应用程序。由于大多数应用程序涉及将后端云资源暴露给用户，通常通过前端UI，因此应用程序编程接口（API）是理解和实践的绝佳起点。让我们开始吧。
- en: The Hows and Whys of APIs
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API的作用与原因
- en: The age of the monolithic application that does everything is over.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 能够做所有事情的单体应用程序的时代已经结束了。
- en: 'This isn’t to say that monoliths no longer exist or that they won’t still be
    created for ages to come. Under various circumstances, a monolithic application
    that provides numerous capabilities in one package still makes sense, especially
    in the following settings:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着单体应用程序不再存在，或者它们不会继续存在很长时间。在各种情况下，一个将众多功能打包到一个包中的单体应用程序仍然是有意义的，尤其是在以下环境中：
- en: The domain and thus domain boundaries are largely unknown.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域及其边界在很大程度上是未知的。
- en: Provided capabilities are tightly coupled, and absolute performance of module
    interactions takes precedence over flexibility.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供的功能是紧密耦合的，模块交互的绝对性能优先于灵活性。
- en: Scaling requirements for all related capabilities are known and consistent.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有相关能力的扩展要求是已知的和一致的。
- en: Functionality isn’t volatile; change is slow, limited in scope, or both.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能不是易变的；变化是缓慢的，范围有限，或者两者兼有。
- en: For everything else, there are microservices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他一切，都有微服务。
- en: This is a gross oversimplification, of course, but I believe it to be a useful
    summary. By splitting capabilities into smaller, cohesive “chunks,” we can decouple
    them, resulting in the potential for more flexible and robust systems that can
    be more rapidly deployed and more easily maintained.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个极度简化的说法，但我认为这是一个有用的总结。通过将功能分成更小、更有凝聚力的“块”，我们可以解耦它们，从而有可能实现更灵活、更强大的系统，这些系统可以更快地部署和更容易地维护。
- en: 'In any distributed system—and make no mistake, a system comprising microservices
    is exactly that—communication is key. No service is an island. And while there
    are numerous mechanisms for connecting applications/microservices, we often begin
    our journey by emulating the very fabric of our daily lives: the internet.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何分布式系统中——毫无疑问，一个由微服务组成的系统就是这样的——通信至关重要。没有服务是孤立的。虽然有许多连接应用程序/微服务的机制，但我们通常通过模拟我们日常生活的基本结构——互联网——来开始我们的旅程。
- en: The internet was built for communication. In fact, the designers of its precursor,
    the Advanced Research Projects Agency Network (ARPANET), anticipated a need to
    maintain intersystem communication even in the event of “significant interruption.”
    It is reasonable to conclude that an HTTP-based approach similar to the one we
    use to conduct a great deal of our daily lives could also ably allow us to create,
    retrieve, update, and delete various resources “over the wire.”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网是为通信而建立的。事实上，其前身的设计者，高级研究计划局网络（ARPANET），预见到了即使在“重大中断”事件发生时也需要保持系统间通信的需求。可以合理地推断，一种类似于我们日常生活中使用的一种HTTP方法，同样能够让我们通过“过程”创建、检索、更新和删除各种资源。
- en: As much as I love history, I won’t dive deeper into the history of REST APIs
    other than to say that Roy Fielding laid out their principles in his 2000 PhD
    dissertation, which built upon the *HTTP object model* from 1994.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我很喜欢历史，但我不会深入研究REST API的历史，除了说罗伊·菲尔丁在他2000年的博士论文中阐述了它们的原则，该原则是建立在1994年的*HTTP对象模型*之上的。
- en: What Is REST, and Why Does It Matter?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST是什么，为什么它很重要？
- en: 'As mentioned earlier, an API is the specification/interface that we developers
    *write to* so our code can use other code: libraries, other applications, or services.
    But what does the *REST* in *REST API* represent?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，API是我们开发人员用来*编写*以便我们的代码可以使用其他代码的规范/接口：库、其他应用程序或服务。但*REST*在*REST API*中代表什么？
- en: REST is an acronym for *representational state transfer*, which is a somewhat
    cryptic way of saying that when one application communicates with another, Application
    A brings its current state with it; it doesn’t expect Application B to maintain
    state— current and cumulative, process-based information—between communication
    calls. Application A supplies a representation of its relevant state with each
    request to Application B. You can easily see why this increases survivability
    and resilience, because if there is a communication issue or Application B crashes
    and is restarted, it doesn’t lose the current state of its interactions with Application
    A; Application A can simply reissue the request and pick up where the two applications
    left off.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: REST是*表述性状态转移*的首字母缩写，这是一种有点神秘的方式，它表明当一个应用程序与另一个应用程序通信时，应用程序A将其当前状态带入，而不是期望应用程序B在通信调用之间维护状态——当前和累积的、基于进程的信息。应用程序A在每个对应用程序B的请求中提供其相关状态的表示。您可以很容易地看出，这为应用程序的生存能力和弹性增加了，因为如果存在通信问题或者应用程序B崩溃并重新启动，它不会丢失与应用程序A的交互的当前状态；应用程序A可以简单地重新发出请求并继续两个应用程序之间停下的地方。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This general concept is often referred to as *stateless* applications/services,
    because each service maintains its own current state, even within a sequence of
    interactions, and doesn’t expect others to do so on its behalf.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通用概念通常被称为*无状态*应用/服务，因为每个服务在一系列交互中都保持自己的当前状态，而不期望其他服务代表其执行这种操作。
- en: Your API, HTTP Verb Style
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的API，HTTP动词风格
- en: Now, about that REST API—sometimes called a RESTful API, which is a nice, relaxing
    take on things, isn’t it?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于那个REST API——有时称为RESTful API，这是一种很好、令人放松的方式，不是吗？
- en: 'There are a number of standardized HTTP verbs defined within a handful of Internet
    Engineering Task Force (IETF) requests for comments (RFCs). Of these, a small
    number are typically used consistently for building APIs, with a couple more that
    find occasional use. REST APIs are primarily built upon the following HTTP verbs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些互联网工程任务组（IETF）的请求评论（RFCs）中定义了许多标准化的HTTP动词。其中，少数几个通常被一致地用于构建API，还有几个偶尔会被使用。REST
    API主要建立在以下HTTP动词之上：
- en: '`POST`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`'
- en: '`GET`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`'
- en: '`PUT`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`'
- en: '`PATCH`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`'
- en: '`DELETE`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`'
- en: 'These verbs correspond with typical operations we perform on resources: create
    (`POST`), read (`GET`), update (`PUT` and `PATCH`), and delete (`DELETE`).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些动词对应我们在资源上执行的典型操作：创建（`POST`）、读取（`GET`）、更新（`PUT`和`PATCH`）和删除（`DELETE`）。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I’m admittedly blurring the lines somewhat by loosely equating `PUT` with updating
    a resource, and a bit less so by equating `POST` with creating a resource. I would
    ask the reader to bear with me as I step through the implementation and provide
    clarifications.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认通过将`PUT`大致等同于更新资源，稍微模糊了界限，并且通过将`POST`等同于创建资源的方式稍微减少了一些。我请求读者在我实施并提供澄清的过程中给予理解。
- en: 'Occasionally, the following two verbs are employed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔会使用以下两个动词：
- en: '`OPTIONS`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`'
- en: '`HEAD`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`'
- en: These can be used to retrieve the communication options available for request/response
    pairs (`OPTIONS`) and retrieve a response header minus its body (`HEAD`).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以用来获取请求/响应对可用的通信选项（`OPTIONS`）以及获取响应头部分的响应，不包括其主体（`HEAD`）。
- en: For this book, and indeed for most production use, I will focus on the first,
    heavily utilized group. To get (no pun intended) started, let’s create a simple
    microservice that implements a very basic REST API.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书以及大多数实际生产中的使用，我将专注于第一组，即大量使用的组。为了开始（没有双关意味），让我们创建一个实现非常基本的REST API的简单微服务。
- en: Back to the Initializr
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到Initializr
- en: We begin as usual with the Spring Initializr, as shown in [Figure 3-1](#creating_a_spring_boot_project_to_build_a_rest_api).
    I’ve changed the Group and Artifact fields to reflect the details I use (please
    feel free to use your preferred nomenclature), selected Java 11 under Options
    (optional, any listed version will do nicely), and selected only the Spring Web
    dependency. As it indicates in the displayed description, this dependency brings
    with it several capabilities, including that of “[building] web, *including RESTful*,
    applications using Spring MVC” (emphasis added). This is exactly what we require
    for the task at hand.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像往常一样从Spring Initializr开始，如[图 3-1](#creating_a_spring_boot_project_to_build_a_rest_api)所示。我已经更改了Group和Artifact字段以反映我使用的详细信息（请随意使用您喜欢的命名方式），在选项（可选的，任何列出的版本都可以很好地完成）下选择了Java
    11，并且仅选择了Spring Web依赖项。正如显示的描述中所示，此依赖项带有多种功能，包括“[构建]使用Spring MVC构建Web，*包括RESTful*应用程序”（强调添加）。这正是我们当前任务所需的。
- en: '![sbur 0301](Images/sbur_0301.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0301](Images/sbur_0301.png)'
- en: Figure 3-1\. Creating a Spring Boot project to build a REST API
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-1\. 创建一个Spring Boot项目以构建REST API
- en: Once we’ve generated the project in the Initializr and saved the resultant *.zip*
    file locally, we’ll extract the compressed project files—typically by double-clicking
    the *sbur-rest-demo.zip* file that was downloaded in your file browser or by using
    *unzip* from a shell/terminal window—and then open the now-extracted project in
    your chosen IDE or text editor for a view similar to [Figure 3-2](#our_new_spring_boot_project_just_waiting_for_us_to_begin).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在Initializr中生成了项目并将结果*.zip*文件保存在本地，我们将提取压缩的项目文件——通常通过双击在文件浏览器中下载的*sbur-rest-demo.zip*文件或通过从shell/终端窗口使用*unzip*——然后在您选择的IDE或文本编辑器中打开现在已提取的项目，以查看类似于[图3-2](#our_new_spring_boot_project_just_waiting_for_us_to_begin)的视图。
- en: '![sbur 0302](Images/sbur_0302.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0302](Images/sbur_0302.png)'
- en: Figure 3-2\. Our new Spring Boot project, just waiting for us to begin
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-2\. 我们的新Spring Boot项目，正等待我们开始
- en: Creating a Simple Domain
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单的领域
- en: In order to *work with* resources, we’ll need to write some code to *accommodate
    some* resources. Let’s start by creating a very simple domain class that represents
    a resource we want to manage.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了*处理*资源，我们需要编写一些代码来*适应*一些资源。让我们首先创建一个非常简单的领域类，表示我们想要管理的资源。
- en: I’m somewhat of a coffee aficionado, as my good friends—this now includes you—know.
    With that in mind, I’ll be using a coffee domain, with a class representing a
    particular type of coffee, as the domain for this example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我有点咖啡爱好者，正如我的好朋友们——现在包括你——所知道的。考虑到这一点，我将使用一个咖啡领域，其中一个类代表一种特定类型的咖啡，作为本例的领域。
- en: 'Let’s begin by creating the `Coffee` class. This is essential to the example,
    as we need a resource of some kind to demonstrate how to manage resources via
    a REST API. But the domain simplicity or complexity is incidental to the example,
    so I’ll keep it simple to focus on the objective: the resultant REST API.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建`Coffee`类。这对例子至关重要，因为我们需要一个某种资源来演示如何通过REST API管理资源。但领域的简单或复杂对于本例来说不重要，所以我会保持简单，专注于目标：最终的REST
    API。
- en: 'As shown in [Figure 3-3](#the_coffee_class_our_domain_class), the `Coffee`
    class has two member variables:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图3-3](#the_coffee_class_our_domain_class)所示，`Coffee`类有两个成员变量：
- en: An `id` field used to uniquely identify a particular kind of coffee
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`id`字段用于唯一标识特定类型的咖啡
- en: A `name` field that describes the coffee by name
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`name`字段，描述咖啡的名称
- en: '![sbur 0303](Images/sbur_0303.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0303](Images/sbur_0303.png)'
- en: 'Figure 3-3\. The Coffee class: our domain class'
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-3\. 咖啡类：我们的领域类
- en: I declare the `id` field as `final` so that it can be assigned only once and
    never modified; as such, this also requires that it is assigned when creating
    an instance of class `Coffee` and implies that it has no mutator method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我将`id`字段声明为`final`，这样它只能被分配一次且不能修改；因此，在创建`Coffee`类的实例时必须分配它，这也意味着它没有修改器方法。
- en: 'I create two constructors: one that takes both parameters and another that
    provides a unique identifier if none is provided upon creation of a `Coffee`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了两个构造函数：一个接受两个参数，另一个在创建`Coffee`时如果没有提供唯一标识符则提供一个。
- en: Next, I create accessor and mutator methods—or getter and setter methods, if
    you prefer to call them that—for the `name` field, which is not declared `final`
    and is thus mutable. This is a debatable design decision, but it serves our upcoming
    needs for this example well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我创建了访问器和修改器方法——或者您更愿意称之为获取器和设置器方法——用于`name`字段，该字段未声明为`final`，因此可变。这是一个有争议的设计决策，但对于本例子的即将到来的需求非常合适。
- en: With that, we now have a basic domain in place. Next it’s time for a REST.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们现在有了一个基本的领域。接下来是REST的时候了。
- en: GET-ting
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行GET请求
- en: Perhaps the most-used of the most-used verbs is `GET`. So let’s *get* (pun intended)
    started.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最常用的最常用的动词是`GET`。所以让我们*开始*吧（双关语）。
- en: '@RestController in a Nutshell'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@RestController简介'
- en: Without going too deep down the rabbit hole, Spring MVC (Model-View-Controller)
    was created to separate concerns between data, its delivery, and its presentation,
    assuming the views would be provided as a server-rendered web page. The `@Controller`
    annotation helps tie the various pieces together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不要陷得太深，Spring MVC（模型-视图-控制器）的创建是为了在数据、其传递和呈现之间分离关注点，假设视图将作为服务器呈现的网页提供。`@Controller`注解帮助将各个部分联系在一起。
- en: '`@Controller` is a stereotype/alias for the `@Component` annotation, meaning
    that upon application startup, a Spring Bean—an object created and managed by
    the Spring inversion of control (IoC) container within the app—is created from
    that class. `@Controller`-annotated classes accommodate a `Model` object to provide
    model-based data to the presentation layer and work with a `ViewResolver` to direct
    the application to display a particular view, as rendered by a view technology.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Controller`是`@Component`注释的一种别名，这意味着在应用启动时，Spring Bean——由Spring控制反转（IoC）容器在应用程序中创建和管理的对象——从该类中创建。带有`@Controller`注释的类可以容纳一个`Model`对象，以向表示层提供基于模型的数据，并使用`ViewResolver`来指示应用程序显示特定视图，由视图技术渲染。'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Spring supports several view technologies and templating engines, covered in
    a later chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Spring支持多种视图技术和模板引擎，这些将在后续章节中介绍。
- en: It’s also possible to instruct a `Controller` class to return a formatted response
    as JavaScript Object Notation (JSON) or as another data-oriented format such as
    XML simply by adding an `@ResponseBody` annotation to the class or method (JSON
    by default). This results in the Object/Iterable return value of a method being
    the *entire body* of the response to a web request, instead of being returned
    as a part of the `Model`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以指示`Controller`类通过将`@ResponseBody`注释添加到类或方法（默认为JSON）来返回格式化的响应。这将导致方法的对象/可迭代返回值成为web请求响应的*整个主体*，而不是作为`Model`的一部分返回。
- en: The `@RestController` annotation is a convenience notation that combines `@Controller`
    with `@ResponseBody` into a single descriptive annotation, simplifying your code
    and making intent more obvious. Once we’ve annotated a class as an `@RestController`,
    we can begin creating our REST API.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RestController`注释是一个方便的标注，将`@Controller`与`@ResponseBody`结合成一个描述性注释，简化您的代码并使意图更加明显。一旦我们将类标记为`@RestController`，我们就可以开始创建我们的REST
    API。'
- en: Let’s `GET` Busy
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们`GET`忙碌起来
- en: REST APIs deal with objects, and objects can come alone or as a group of related
    objects. To leverage our coffee scenario, you may want to retrieve a particular
    coffee; you may instead wish to retrieve all coffees, or all that are considered
    dark roast, fall within a range of identifiers, or include “Colombian” in the
    description, for example. To accommodate the need to retrieve one instance or
    more than one instance of an object, it is a good practice to create multiple
    methods in our code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: REST API处理对象，对象可以单独出现，也可以作为一组相关对象出现。为了利用我们的咖啡场景，您可能希望检索特定的咖啡；或者您可能希望检索所有咖啡，或者所有被视为深烘焙的咖啡，或者在描述中包含“哥伦比亚”等。为了满足检索一个实例或多个实例的需求，在我们的代码中创建多个方法是一个良好的做法。
- en: 'I’ll begin by creating a list of `Coffee` objects to support the method returning
    multiple `Coffee` objects, as shown in the rudimentary class definition that follows.
    I define the variable holding this group of coffees as a `List` of `Coffee` objects.
    I choose `List` as the higher-level interface for my member variable type, but
    I’ll actually assign an empty `ArrayList` for use within the `RestApiDemoController`
    class:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我将首先创建一个`Coffee`对象列表，以支持方法返回多个`Coffee`对象，如以下基本类定义所示。我将定义变量，用于保存这组咖啡，作为`Coffee`对象列表。我选择`List`作为成员变量类型的高级接口，但实际上将在`RestApiDemoController`类中分配一个空的`ArrayList`以供使用：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: It’s a recommended practice to adopt the highest level of type (class, interface)
    that can cleanly satisfy internal and external APIs. These may not match in all
    cases, as they don’t here. Internally, `List` provides the level of API that enables
    me to create the cleanest implementation based on my criteria; externally, we
    can define an even higher-level abstraction, as I’ll demonstrate shortly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接受以最高级别类型（类、接口）作为可以清洁地满足内部和外部API的实践是一种推荐做法。这些可能在所有情况下都不匹配，正如这里不匹配。在内部，`List`提供了使我能够基于我的标准创建最清晰实现的API级别；在外部，我们可以定义一个更高级别的抽象，我很快会演示。
- en: 'It’s always a good idea to have some data to retrieve in order to confirm that
    everything is working as expected. In the following code, I create a constructor
    for the `RestApiDemoController` class, adding code to populate the list of coffees
    upon object creation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 始终有一些数据可以检索，以确认一切是否按预期工作。在以下代码中，我为`RestApiDemoController`类创建一个构造函数，并添加代码以在对象创建时填充咖啡列表：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As shown in the following code, I create a method in the `RestApiDemoController`
    class that returns an iterable group of coffees represented by our member variable
    `coffees`. I choose to use an `Iterable<Coffee>` because any iterable type will
    satisfactorily provide this API’s desired functionality:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如下代码所示，我在`RestApiDemoController`类中创建了一个方法，该方法返回一个由我们的成员变量`coffees`表示的可迭代咖啡组。我选择使用`Iterable<Coffee>`，因为任何可迭代类型都能满足此
    API 所需的功能：
- en: .Using `@RequestMapping` to `GET` the list of coffees
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@RequestMapping` 获取咖啡列表的`GET`
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To the `@RequestMapping` annotation, I add a path specification of `/coffees`
    and a method type of `RequestMethod.GET`, indicating that the method will respond
    to requests with the path of `/coffees` and restrict requests to only `HTTP GET`
    requests. Retrieval of data is handled by this method, but updates of any kind
    are not. Spring Boot, via the Jackson dependencies included in Spring Web, performs
    the marshalling and unmarshalling of objects to JSON or other formats automatically.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `@RequestMapping` 注解，我添加了路径规范为 `/coffees`，方法类型为 `RequestMethod.GET`，表示该方法将响应路径为
    `/coffees` 的请求，并且限制请求仅为 `HTTP GET` 请求。数据的检索由该方法处理，但不处理任何更新。Spring Boot 通过包含在 Spring
    Web 中的 Jackson 依赖自动执行对象到 JSON 或其他格式的编组和解组操作。
- en: 'We can streamline this even further using another convenience annotation. Using
    `@GetMapping` incorporates the direction to allow only `GET` requests, reducing
    boilerplate and requiring only the path to be specified, even omitting the `path
    =` since no parameter deconfliction is required. The following code clearly demonstrates
    the readability benefits of this annotation swap:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步简化使用另一个便利的注解。使用 `@GetMapping` 整合指令以仅允许 `GET` 请求，减少样板代码，只需指定路径，甚至省略 `path
    =`，因为不需要参数解决冲突。下面的代码清楚地展示了此注解替换带来的可读性好处：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: POST-ing
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行`POST`
- en: To create resources, an `HTTP POST` method is the preferred option.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源时，首选的方法是使用 `HTTP POST` 方法。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A `POST` supplies details of a resource, typically in JSON format, and requests
    that the destination service creates that resource *under* the specified URI.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST` 提供资源的详细信息，通常以 JSON 格式，请求目标服务在指定的 URI 下创建该资源。'
- en: 'As shown in the next code fragment, a `POST` is a relatively simple affair:
    our service receives the specified coffee details as a `Coffee` object—thanks
    to Spring Boot’s automatic marshalling—and adds it to our list of coffees. It
    then returns the `Coffee` object—automatically unmarshalled by Spring Boot to
    JSON by default—to the requesting application or service:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如下代码片段所示，`POST` 是一个相对简单的操作：我们的服务接收指定的咖啡详情作为 `Coffee` 对象（得益于 Spring Boot 的自动编组），并将其添加到我们的咖啡列表中。然后返回请求的应用程序或服务的
    `Coffee` 对象（默认情况下由 Spring Boot 自动解组为 JSON）：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: PUT-ting
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`PUT` 操作'
- en: Generally speaking, `PUT` requests are used to update existing resources with
    known URIs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`PUT` 请求用于更新已知 URI 的现有资源。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Per the IETF’s document titled [Hypertext Transfer Protocol (HTTP/1.1): Semantics
    and Content](https://tools.ietf.org/html/rfc7231), `PUT` requests should update
    the specified resource if present; if the resource doesn’t already exist, it should
    be created.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 IETF 的文档《[超文本传输协议（HTTP/1.1）：语义和内容](https://tools.ietf.org/html/rfc7231)》，`PUT`
    请求应更新指定的资源（如果存在）；如果资源不存在，则应创建它。
- en: 'The following code operates in accordance with the specification: search for
    the coffee with the specified identifier, and if found, update it. If no such
    coffee is contained within the list, create it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码符合规范：搜索具有指定标识符的咖啡，如果找到，则更新它。如果列表中没有这样的咖啡，则创建它：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: DELETE-ing
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`DELETE` 操作'
- en: 'To delete a resource, we use an `HTTP DELETE` request. As shown in the next
    code fragment, we create a method that accepts a coffee’s identifier as an `@PathVariable`
    and removes the applicable coffee from our list using the `removeIf` `Collection`
    method. `removeIf` accepts a `Predicate`, meaning we can provide a lambda to evaluate
    that will return a boolean value of `true` for the desired coffee to remove. Nice
    and tidy:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除资源，我们使用 `HTTP DELETE` 请求。如下代码片段所示，我们创建了一个方法，接受咖啡标识符作为 `@PathVariable` 并使用
    `removeIf` `Collection` 方法从我们的列表中删除适用的咖啡。`removeIf` 接受一个 `Predicate`，意味着我们可以提供一个
    lambda 表达式来评估是否返回要删除的目标咖啡的布尔值。整洁而简便：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And More
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等等
- en: 'While there are many more things that could be done to improve this scenario,
    I’m going to focus on two in particular: reducing repetition and returning HTTP
    status codes where required by the specification.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个场景有许多改进的地方，但我将重点放在两个特定的方面上：减少重复和根据规范返回必要的 HTTP 状态码。
- en: 'To reduce repetition in the code, I’ll elevate the portion of the URI mapping
    that is common to all methods within the `RestApiDemoController` class to the
    class-level `@RequestMapping` annotation, `"/coffees".` We can then remove that
    same portion of the URI from each method’s mapping URI specification, reducing
    the textual noise level a bit, as the following code shows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少代码中的重复，我将在 `RestApiDemoController` 类中将通用于该类内所有方法的 URI 映射部分提升到类级别的 `@RequestMapping`
    注解中，即 `"/coffees"`。然后，我们可以从每个方法的映射 URI 规范中删除相同的 URI 部分，减少文本噪音，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, I consult the IETF document referenced earlier and note that while HTTP
    status codes are not specified for `GET` and suggested for `POST` and `DELETE`
    methods, they are required for `PUT` method responses. To accomplish this, I modify
    the `putCoffee` method as shown in the following code segment. Instead of returning
    only the updated or created `Coffee` object, the `putCoffee` method will now return
    a `ResponseEntity` containing said `Coffee` and the appropriate HTTP status code:
    201 (Created) if the `PUT` coffee didn’t already exist, and 200 (OK) if it existed
    and was updated. We could do more, of course, but the current application code
    fulfills requirements and represents straightforward and clean internal and external
    APIs:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我查阅了早前提到的 IETF 文档，并注意到虽然 `GET` 方法未指定 HTTP 状态码，但建议 `POST` 和 `DELETE` 方法，但要求
    `PUT` 方法响应状态码。为了实现这一点，我修改了 `putCoffee` 方法，如下面的代码段所示。现在，`putCoffee` 方法将不仅返回更新或创建的
    `Coffee` 对象，还将返回一个包含该 `Coffee` 和适当 HTTP 状态码的 `ResponseEntity`：如果 `PUT` 的咖啡尚不存在，则返回
    201（已创建），如果存在并已更新，则返回 2000（成功）。当然，我们还可以做更多，但当前应用程序代码满足要求，并表示简单且清晰的内部和外部 API：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Trust, but Verify
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信任，但要验证
- en: With all of the code in place, let’s put this API through its paces.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已经就绪，让我们来测试这个 API。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I use the [HTTPie](https://httpie.org) command line HTTP client for nearly all
    of my HTTP-based chores. Occasionally I will also use [curl](https://curl.haxx.se)
    or [Postman](https://www.postman.com), but I find HTTPie to be a versatile client
    with a streamlined command-line interface and superb utility.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 [HTTPie](https://httpie.org) 命令行 HTTP 客户端处理几乎所有基于 HTTP 的任务。偶尔也会使用 [curl](https://curl.haxx.se)
    或 [Postman](https://www.postman.com)，但我发现 HTTPie 是一个功能强大且具有简洁命令行界面的多用途客户端。
- en: As shown in [Figure 3-4](#get_all_the_coffees), I query the *coffees* endpoint
    for all coffees currently in our list. HTTPie defaults to a `GET` request and
    assumes *localhost* if no hostname is provided, reducing unnecessary typing. As
    expected, we see all four coffees with which we prepopulated our list.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 3-4](#get_all_the_coffees) 所示，我查询 *coffees* 端点以获取当前列表中的所有咖啡。如果没有提供主机名，HTTPie
    默认为 `GET` 请求并假定 *localhost*，减少了不必要的输入。正如预期的那样，我们看到了我们预填充列表中的所有四种咖啡。
- en: '![sbur 0304](Images/sbur_0304.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0304](Images/sbur_0304.png)'
- en: Figure 3-4\. `GET`-ting all coffees
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图   图 3-4\. 获取所有咖啡
- en: Next, I copy the `id` field for one of the coffees just listed and paste it
    into another `GET` request. [Figure 3-5](#get_a_coffee) displays the correct response.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我复制了列表中一种咖啡的 `id` 字段，并将其粘贴到另一个 `GET` 请求中。[图 3-5](#get_a_coffee) 显示了正确的响应。
- en: '![sbur 0305](Images/sbur_0305.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0305](Images/sbur_0305.png)'
- en: Figure 3-5\. `GET`-ting a coffee
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. 获取一种咖啡
- en: 'To execute a `POST` request with HTTPie is simple: just pipe a plaintext file
    containing a JSON representation of a `Coffee` object with `id` and `name` fields,
    and HTTPie assumes that a `POST` operation is in order. [Figure 3-6](#post_a_new_coffee_to_the_list)
    shows the command and its successful outcome.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTTPie 执行 `POST` 请求非常简单：只需将包含 `id` 和 `name` 字段的 JSON 表示形式的纯文本文件传输，HTTPie
    将会执行 `POST` 操作。[图 3-6](#post_a_new_coffee_to_the_list) 显示了命令及其成功的结果。
- en: '![sbur 0306](Images/sbur_0306.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0306](Images/sbur_0306.png)'
- en: Figure 3-6\. `POST`-ing a new coffee to the list
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-6\. 向列表中添加新咖啡的 `POST` 操作
- en: As mentioned earlier, a `PUT` command should allow for updating an existing
    resource or adding a new one if the requested resource doesn’t already exist.
    In [Figure 3-7](#put_an_updated_to_an_existing_coffee), I specify the `id` of
    the coffee I just added and pass another JSON object with a different name to
    the command. The result is that the coffee with `id` of “99999” now has a `name`
    of “Caribou Coffee” instead of “Kaldi’s Coffee” as before. The return code is
    200 (OK), as expected as well.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，`PUT` 命令应允许更新现有资源或在请求的资源不存在时添加新资源。在 [图 3-7](#put_an_updated_to_an_existing_coffee)
    中，我指定了我刚添加的咖啡的 `id` 并向命令传递了另一个具有不同名称的JSON对象。结果是，具有 `id` “99999”的咖啡现在的 `name` 是
    “Caribou Coffee”，而不是之前的 “Kaldi’s Coffee”。返回码也符合预期，为200（OK）。
- en: '![sbur 0307](Images/sbur_0307.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0307](Images/sbur_0307.png)'
- en: Figure 3-7\. `PUT`-ting an update to an existing coffee
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-7\. `PUT` 更新现有咖啡
- en: In [Figure 3-8](#put_a_new_coffee) I initiate a `PUT` request in the same manner
    but reference an `id` in the URI that doesn’t exist. The application dutifully
    adds it in compliance with IETF-specified behavior and correctly returns an HTTP
    status of 201 (Created).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 3-8](#put_a_new_coffee) 中，我以相同方式发起了 `PUT` 请求，但引用了URI中不存在的 `id`。应用程序遵循IETF指定的行为添加了它，并正确返回了HTTP状态码201（Created）。
- en: '![sbur 0308](Images/sbur_0308.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0308](Images/sbur_0308.png)'
- en: Figure 3-8\. `PUT`-ting a new coffee
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-8\. `PUT` 添加新咖啡
- en: 'Creating a `DELETE` request with HTTPie is very similar to creating a `PUT`
    request: the HTTP verb must be specified, and the resource’s URI must be complete.
    [Figure 3-9](#delete_a_coffee) shows the result: an HTTP status code of 200 (OK),
    indicating the resource was successfully deleted and with no shown value, since
    the resource no longer exists.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTPie创建 `DELETE` 请求与创建 `PUT` 请求非常相似：必须指定HTTP动词，并且资源的URI必须完整。 [图 3-9](#delete_a_coffee)
    显示了结果：HTTP状态码为200（OK），表明资源已成功删除，并且没有显示值，因为资源已不存在。
- en: '![sbur 0309](Images/sbur_0309.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0309](Images/sbur_0309.png)'
- en: Figure 3-9\. `DELETE`-ing a coffee
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-9\. 删除咖啡
- en: 'Finally, we re-query our full list of coffees to confirm the expected final
    state. As [Figure 3-10](#get_all_coffees_now_in_the_list) demonstrates, we now
    have one additional coffee that wasn’t in our list before, as expected: Mötor
    Oil Coffee. API validation is a success.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重新查询我们的咖啡全列表以确认预期的最终状态。如 [图 3-10](#get_all_coffees_now_in_the_list) 所示，我们现在有了一个之前列表中没有的额外咖啡：Mötor
    Oil Coffee。API验证成功。
- en: '![sbur 0310](Images/sbur_0310.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0310](Images/sbur_0310.png)'
- en: Figure 3-10\. `GET`-ting all coffees now in the list
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-10\. 获取当前列表中的所有咖啡
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter demonstrated how to develop a basic working application using Spring
    Boot. Since most applications involve exposing backend cloud resources to users,
    usually via a frontend user interface, I showed how to create and evolve a useful
    REST API that can be consumed in numerous, consistent ways to provide needed functionality
    for creating, reading, updating, and deleting resources central to nearly every
    critical system.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了如何使用Spring Boot开发基本的工作应用程序。由于大多数应用程序涉及将后端云资源暴露给用户，通常通过前端用户界面，我展示了如何创建和发展一个有用的REST
    API，可以以多种一致的方式消费，以提供创建、读取、更新和删除几乎每个关键系统中心资源所需的功能。
- en: 'I examined and explained the `@RequestMapping` annotation and its various convenience
    annotation specializations that align with defined HTTP verbs:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我检查并解释了 `@RequestMapping` 注解及其各种便捷注解特化，这些特化与定义的HTTP动词相一致：
- en: '`@GetMapping`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@GetMapping`'
- en: '`@PostMapping`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PostMapping`'
- en: '`@PutMapping`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PutMapping`'
- en: '`@PatchMapping`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PatchMapping`'
- en: '`@DeleteMapping`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@DeleteMapping`'
- en: After creating methods that addressed many of these annotations and their associated
    actions, I then refactored the code a bit to streamline it and provide HTTP response
    codes where required. Validating the API confirmed its correct operation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了处理许多这些注释及其关联操作的方法后，我稍微重构了代码以简化它，并在需要时提供了HTTP响应代码。验证API确认其正确操作。
- en: In the next chapter, I discuss and demonstrate how to add database access to
    our Spring Boot application to make it increasingly useful and ready for production.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将讨论并演示如何将数据库访问添加到我们的Spring Boot应用程序中，使其变得更加实用并且为生产准备好。
