- en: 'Chapter 6\. Using the Java Library: Get to Know the Java API'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用 Java 库：了解 Java API
- en: '![image](Images/f0125-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0125-01.png)'
- en: '**Java ships with hundreds of prebuilt classes.** You don’t have to reinvent
    the wheel if you know how to find what you need in the Java library, known as
    the **Java API**. *You’ve got better things to do*. If you’re going to write code,
    you might as well write *only* the parts that are truly custom for your application.
    You know those programmers who walk out the door each night at 5 PM? The ones
    who don’t even show *up* until 10 AM? They use the Java API. And about eight pages
    from now, so will you. The core Java library is a giant pile of classes just waiting
    for you to use like building blocks, to assemble your own program out of largely
    prebuilt code. The Ready-Bake Java we use in this book is code you don’t have
    to create from scratch, but you still have to type it. The Java API is full of
    code you don’t even have to *type*. All you need to do is learn to use it.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 自带数百个预先构建的类。** 如果你知道如何在 Java 库中找到所需的内容，就无需重复造轮子，这就是**Java API**的用途。
    *你有更重要的事情要做*。 如果你要编写代码，最好只编写对你的应用程序真正定制的部分。 你知道每天下午 5 点准时下班的程序员吗？那些早上 10 点才露面的？他们在使用
    Java API。 大约再过八页，你也将会如此。 Java 核心库是一个巨大的类堆积，等待你像积木一样使用，从中组合出自己的程序。 本书中使用的现成 Java
    代码不需要从头开始创建，但你仍然需要输入它。 Java API 充满了你甚至不需要*输入*的代码。 你只需学会如何使用它。'
- en: 'In our last chapter, we left you with the cliff-hanger: a bug'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的上一章中，我们给你留下了一个悬念：一个错误
- en: How it’s supposed to look
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应该是什么样子的
- en: Here’s what happens when we run it and enter the numbers 1,2,3,4,5,6\. Lookin’
    good.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行它并输入数字 1, 2, 3, 4, 5, 6 时会发生什么。看起来不错。
- en: '**A complete game interaction** (your mileage may vary)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整的游戏交互**（结果可能有所不同）'
- en: '![image](Images/f0126-01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0126-01.png)'
- en: How the bug looks
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个 bug 的外观
- en: Here’s what happens when we enter 2,2,2.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入 2, 2, 2 时会发生什么
- en: '**A different game interaction** (yikes)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**另一种游戏交互方式**（哎呀）'
- en: '![image](Images/f0126-02.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0126-02.png)'
- en: '**In the current version, once you get a hit, you can simply repeat that hit
    two more times for the kill!**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**在当前版本中，一旦你击中，你可以简单地再重复两次来击毁目标！**'
- en: So what happened?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么到底发生了什么？
- en: '![image](Images/f0127-01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0127-01.png)'
- en: How do we fix it?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何修复它？
- en: We need a way to know whether a cell has already been hit. Let’s run through
    some possibilities, but first, we’ll look at what we kno w so far...
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来知道单元格是否已经被命中。让我们先看看我们目前所知道的...
- en: We have a virtual row of seven cells, and a Startup will occupy three consecutive
    cells somewhere in that row. This virtual row shows a Startup placed at cell locations
    4, 5, and 6.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个虚拟的七个单元格的行，并且一个启动程序将占据该行的三个连续单元格中的某个位置。 这个虚拟行显示一个在单元格位置 4、5 和 6 放置的启动程序。
- en: '![image](Images/f0128-01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0128-01.png)'
- en: The Startup has an instance variable—an int array —that holds that Startup object’s
    cell locations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 启动程序有一个实例变量 —— 一个 int 数组 —— 用于保存该启动程序对象的单元格位置。
- en: '![image](Images/f0128-02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0128-02.png)'
- en: Option one is too clunky
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项一太笨重了
- en: Option one seems like more work than y ou’d expect. It means that each time
    the user makes a hit, y ou have to change the state of the second array (the hitCells
    array), oh—but first you have to CHECK the hitCells array to see if that cell
    has already been hit anyway. It would work, but there’s got to be something better...
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选项一似乎比你预期的要多些工作。这意味着每当用户进行一次命中时，你都必须更改第二个数组（命中单元格数组）的状态，噢——但首先你必须检查命中单元格数组，看看那个单元格是否已经被命中过。它可以工作，但肯定还有更好的方法...
- en: Option two is a little better, but still pretty clunky
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项二稍微好一些，但仍然相当笨重
- en: Option two is a little less clunky than option one, but it’s not very efficient.
    You’d still have to loop through all three slots (index positions) in the array,
    even if one or more are already invalid because they’ve been “hit” (and have a
    -1 value). There has to be something better...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选项二比选项一少一些笨重，但效率不是很高。 即使一个或多个位置已经无效（因为它们已经被“击中”并有一个 -1 的值），你仍然必须循环遍历数组中的所有三个插槽（索引位置）。必须有更好的方法...
- en: '| The original prep code for part of the checkYourself() method: | Life would
    be good if only we could change it to: |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 用于 checkYourself() 方法的原始准备代码： | 如果我们能把它改成： |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![image](Images/f0130-02.png) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ![image](Images/f0130-02.png) |'
- en: '![image](Images/f0131-01.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0131-01.png)'
- en: Wake up and smell the library
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 醒来，闻闻图书馆的味道
- en: '**As if by magic, there really is such a thing.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**仿佛魔术一般，真的有这样的事情。**'
- en: '**But it’s not an *array*, it’s *an ArrayList.***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**但它不是一个*数组*，而是*一个 ArrayList。***'
- en: '**A class in the core Java library (the API).**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心 Java 库中的一个类（API）。**'
- en: The Java Platform, Standard Edition (Java SE) ships with hundreds of prebuilt
    classes. Just like our Ready-Bake Code. Except that these built-in classes are
    already compiled.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Java 平台标准版（Java SE）附带数百个预构建的类。就像我们的 Ready-Bake Code 一样。不同之处在于这些内置类已经编译过了。
- en: '***That means no typing.***'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '***这意味着不需要打字。***'
- en: Just use ’em.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用它们。
- en: '![image](Images/f0132-01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0132-01.png)'
- en: Some things you can do with ArrayList
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些你可以用 ArrayList 做的事情
- en: '![image](Images/f0133-01.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0133-01.png)'
- en: Java Exposed
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 暴露
- en: '![image](Images/common-01.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-01.png)'
- en: '**This week’s interview: ArrayList, on arrays**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**本周的采访对象：ArrayList，关于数组**'
- en: '**HeadFirst:** So, ArrayLists are like arrays, right?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 所以，ArrayList 就像数组，对吧？'
- en: '**ArrayList:** In their dreams! ***I*** am an *object*, thank you very much.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList：** 在他们的梦中！***我***是一个*对象*，非常感谢。'
- en: '**HeadFirst:** If I’m not mistaken, arrays are objects too. They live on the
    heap right there with all the other objects.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 如果我没有弄错，数组也是对象。它们和其他对象一样都存放在堆上。'
- en: '**ArrayList:** Sure arrays go on the heap, ***duh***, but an array is still
    a wanna-be ArrayList. A poser. Objects have state *and* behavior, right? We’re
    clear on that. But have you actually tried calling a method on an array?'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList：** 当然，数组放在堆上，***嗯***，但是数组仍然是一个想成为 ArrayList 的东西。一个冒充者。对象有状态*和*行为，对吧？这一点我们很清楚。但是你真的尝试过在数组上调用方法吗？'
- en: '**HeadFirst:** Now that you mention it, can’t say I have. But what method would
    I call, anyway? I only care about calling methods on the stuff I put *in* the
    array, not the array itself. And I can use array syntax when I want to put things
    in and take things out of the array.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 既然你提到了，我不能说我试过。但是我要调用什么方法呢？我只关心在数组中放入东西和取出东西时调用的方法。而且我可以在想要放入和取出数组时使用数组语法。'
- en: '**ArrayList:** Is that so? You mean to tell me you actually *removed* something
    from an array? (Sheesh, where do they train you guys?)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList：** 是这样吗？你的意思是你真的从数组中*移除*了某些东西吗？（天哪，他们是在哪里培训你们的？）'
- en: '**HeadFirst:** Of *course* I take something out of the array. I say Dog d =
    dogArray[1], and I get the Dog object at index 1 out of the array.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 当然我从数组中取出东西。我说 Dog d = dogArray[1]，然后我从数组中的索引 1 处得到 Dog 对象。'
- en: '**ArrayList:** Alright, I’ll try to speak slowly so you can follow along. You
    were *not*, I repeat *not*, removing that Dog from the array. All you did was
    make a copy of the *reference to the Dog* and assign it to another Dog variable.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList：** 好吧，我会尽量说得慢些，这样你就能跟上了。你*并没有*，我重申*没有*，从数组中移除那只 Dog。你所做的只是复制了*对
    Dog 的引用*，并将其赋给另一个 Dog 变量。'
- en: '**HeadFirst:** Oh, I see what you’re saying. No, I didn’t actually remove the
    Dog object from the array. It’s still there. But I can just set its reference
    to null, I guess.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 哦，我明白你的意思了。不，我确实没有从数组中移除 Dog 对象。它仍然在那里。但我可以将其引用设置为 null，我猜。'
- en: '**ArrayList:** But I’m a first-class object, so I have methods, and I can actually,
    you know, *do* things like remove the Dog’s reference from myself, not just set
    it to null. And I can change my size, *dynamically* (look it up). Just try to
    get an *array* to do that!'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList：** 但我是一个一流的对象，所以我有方法，我实际上可以做事情，比如从自己身上移除 Dog 的引用，而不只是将其设置为 null。而且我可以*动态*地改变我的大小（查一下）。试试看如何让一个*数组*做到这一点！'
- en: '**HeadFirst:** Gee, hate to bring this up, but the rumor is that you’re nothing
    more than a glorified but less-efficient array. That in fact you’re just a wrapper
    for an array, adding extra methods for things like resizing that I would have
    had to write myself. And while we’re at it, *you can’t even hold primitives*!
    Isn’t that a big limitation?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**HeadFirst：** 哎呀，真不想提起这个，但谣言说你只不过是一个被夸大但效率低下的数组。实际上，你只是数组的包装器，为像我自己这样的人添加了额外的方法，比如调整大小，我本来要自己写。而且说到这里，*你甚至不能容纳原始类型*！这不是一个很大的限制吗？'
- en: '**ArrayList:** I can’t *believe* you buy into that urban legend. No, I am *not*
    just a less-efficient array. I will admit that there are a few *extremely* rare
    situations where an array might be just a tad, I repeat, *tad* bit faster for
    certain things. But is it worth the *miniscule* performance gain to give up all
    this *power*? Still, look at all this *flexibility*. And as for the primitives,
    of *course* you can put a primitive in an ArrayList, as long as it’s wrapped in
    a primitive wrapper class (you’ll see a lot more on that in [Chapter 10](ch10.xhtml#numbers_matter_numbers_and_statics)).
    And if you’re using Java 5 or above, that wrapping (and unwrapping when you take
    the primitive out again) happens automatically. And alright, I’ll *acknowledge*
    that yes, if you’re using an ArrayList of *primitives*, it probably is faster
    with an array, because of all the wrapping and unwrapping, but still...who really
    uses primitives *these* days?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**ArrayList:** 我简直*不敢相信*你相信这种城市传说。不，我*不仅仅*是一个效率低下的数组。我承认可能有*极其*罕见的情况，数组在某些特定事情上可能会稍微，我重申，*稍微*快一点点。但是放弃所有这些*强大*功能来换取*微小*的性能提升值得吗？再看看这些*灵活性*。至于基本类型，*当然*可以将基本类型放入
    ArrayList 中，只要它被包装在基本类型包装类中（在 [第10章](ch10.xhtml#numbers_matter_numbers_and_statics)
    中会有更多介绍）。如果你使用的是 Java 5 或以上版本，这个包装（以及再次取出基本类型时的解包）会自动发生。好吧，我*承认*，是的，如果你使用的是基本类型的
    ArrayList，可能使用数组会更快，因为涉及到所有的包装和解包，但是还是...这些*天*谁真的还使用基本类型？'
- en: Oh, look at the time! *I’m late for Pilates.* We’ll have to do this again sometime.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，看看时间！*我要迟到上普拉提课了。* 我们下次再做。
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: Sharpen your pencil
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 磨练你的铅笔
- en: (from [“Sharpen your pencil”](#sharpen_your_pencil-id00009))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (来自 [“磨练你的铅笔”](#sharpen_your_pencil-id00009))
- en: '![image](Images/pencil.png)![image](Images/f0136-01.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/pencil.png)![图片](Images/f0136-01.png)'
- en: Notice how with ArrayList, you’re working with an object of type ArrayList,
    so you’re just invoking regular old methods on a regular old object, using the
    regular old dot operator.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ArrayList 时，你在操作一个类型为 ArrayList 的对象，所以你只是在一个普通的对象上调用普通的老方法，使用普通的点运算符。
- en: With an *array*, you use *special array syntax* (like myList[0] = foo) that
    you won’t use anywhere else except with arrays. Even though an array is an object,
    it lives in its own special world, and you can’t invoke any methods on it, although
    you can access its one and only instance variable, *length.*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *数组*，你使用 *特殊的数组语法*（例如 myList[0] = foo），这种语法除了数组之外你不会在其他地方使用。尽管数组是一个对象，它生活在自己的特殊世界中，你不能对其调用任何方法，尽管可以访问它唯一的实例变量
    *length*。
- en: Comparing ArrayList to a regular array
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 ArrayList 与普通数组进行比较
- en: '![Images](Images/1.png) **A plain old array has to know its size at the time
    it’s created.**'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1.png) **一个普通的数组在创建时必须知道其大小。**'
- en: But for ArrayList, you just make an object of type ArrayList. Every time. It
    never needs to know how big it should be, because it grows and shrinks as objects
    are added or removed.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是对于 ArrayList，你只需创建一个类型为 ArrayList 的对象。每次都是如此。它永远不需要知道它应该有多大，因为它会随着对象的添加或删除而增长或缩小。
- en: '![image](Images/f0137-01.png)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0137-01.png)'
- en: '![Images](Images/2.png) **To put an object in a regular array, you must assign
    it to a specific location.**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/2.png) **要将对象放入普通数组中，必须将其分配给特定位置。**'
- en: (An index from 0 to one less than the length of the array.)
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （索引从0到数组长度减1。）
- en: '![image](Images/f0137-02.png)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0137-02.png)'
- en: If that index is outside the boundaries of the array (like the array was declared
    with a size of 2, and now you’re trying to assign something to index 3), it blows
    up at runtime.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果索引超出数组的边界（例如数组声明大小为2，现在尝试对索引3赋值），它会在运行时崩溃。
- en: With ArrayList, you can specify an index using the *add(anInt, anObject)* method,
    or you can just keep saying *add(anObject)* and the ArrayList will keep growing
    to make room for the new thing.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 ArrayList，你可以使用 *add(anInt, anObject)* 方法指定索引，或者只需不断使用 *add(anObject)*，ArrayList
    会自动增长以腾出空间来存放新元素。
- en: '![image](Images/f0137-03.png)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0137-03.png)'
- en: '![Images](Images/3.png) **Arrays use array syntax that’s not used anywhere
    else in Java.**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/3.png) **数组使用 Java 中其他地方不使用的数组语法。**'
- en: But ArrayLists are plain old Java objects, so they have no special syntax.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是 ArrayList 是普通的 Java 对象，因此它们没有特殊的语法。
- en: '![image](Images/f0137-04.png)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0137-04.png)'
- en: '![Images](Images/4.png) **ArrayLists are parameterized.**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/4.png) **ArrayList 是参数化的。**'
- en: We just said that unlike arrays, ArrayLists have no special syntax. But they
    *do* use something special—***parameterized types.****
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚说过，与数组不同，ArrayList 没有特殊的语法。但是它们确实使用了一些特殊的东西——***参数化类型***。
- en: '![image](Images/f0137-05.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图像](Images/f0137-05.png)'
- en: Using the <TypeGoesHere> syntax, we can declare and create an ArrayList that
    knows (and restricts) the types of objects it can hold. We’ll look at the details
    of parameterized types in ArrayLists in [Chapter 11](ch11.xhtml#data_structures_collections_and_generics),
    *Data Structures*, so for now, don’t think too much about the angle bracket <>
    syntax you see when we use ArrayLists. Just know that it’s a way to force the
    compiler to allow only a specific type of object *(the type in angle brackets)*
    in the ArrayList.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 <TypeGoesHere> 语法，我们可以声明并创建一个ArrayList，它知道（并限制）可以保存的对象类型。我们将在[第11章](ch11.xhtml#data_structures_collections_and_generics)的*数据结构*中详细讨论ArrayLists中参数化类型的细节，所以现在不要太过深思熟虑看到尖括号<>语法时，只需知道这是一种强制编译器只允许ArrayList中特定类型对象的方法即可。
- en: '**Parameterized types were added to Java in Java 5, which came out so long
    ago that you are almost definitely using a version that supports them!*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 5中添加了参数化类型，这是很久以前的事情，你几乎肯定在使用支持它们的版本！**'
- en: '![image](Images/inline1.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图像](Images/inline1.png)'
- en: Let’s fix the Startup code
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们修复启动代码
- en: 'Remember, this is how the buggy version looks:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这就是有错误版本的样子：
- en: '![image](Images/f0138-01.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图像](Images/f0138-01.png)'
- en: New and improved Startup class
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的改进的Startup类
- en: '![image](Images/f0139-01.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图像](Images/f0139-01.png)'
- en: 'Let’s build the REAL game: “Sink a Startup”'
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们构建真正的游戏：“击沉一个启动”
- en: We’ve been working on the “simple” version, but now let’s build the real one.
    Instead of a single row, we’ll use a grid. And instead of one Startup, we’ll use
    three.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在工作的是“简化”版本，但现在让我们构建真正的版本。我们将不再使用单行，而是使用一个网格。而不是一个启动，我们将使用三个。
- en: '**Goal:** Sink all of the computer’s Startups in the fewest number of guesses.
    You’re given a rating level based on how well you perform.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：** 以尽可能少的猜测数击沉计算机的所有启动。根据您的表现，您将获得一个评级水平。'
- en: '**Setup:** When the game program is launched, the computer places three Startups,
    randomly, on the **virtual 7 x 7 grid**. When that’s complete, the game asks for
    your first guess.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置：** 当游戏程序启动时，计算机会将三个启动随机放置在 **虚拟的 7 x 7 网格** 上。完成后，游戏会询问您的第一个猜测。'
- en: '**How you play:** We haven’t learned to build a GUI yet, so this version works
    at the command line. The computer will prompt you to enter a guess (a cell), which
    you’ll type at the command line (as “A3,” “C5,” etc.). In response to your guess,
    you’ll see a result at the command-line, either “hit,” “miss,” or “You sunk poniez”
    (or whatever the lucky Startup of the day is). When you’ve sent all three Startups
    to that big 404 in the sky, the game ends by printing out your rating.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何游戏：** 我们还没有学习如何构建GUI，因此这个版本在命令行上工作。计算机将提示您输入一个猜测（一个单元格），您将在命令行中输入它（如“A3”，“C5”等）。作为对您的猜测的响应，您将在命令行看到一个结果，要么是“命中”，要么是“未命中”，要么是“您击沉了poniez”（或者今天的幸运启动）。当您把所有三个启动送上天堂大404时，游戏将打印出您的评级结束。'
- en: '![image](Images/f0140-01.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图像](Images/f0140-01.png)'
- en: '**You’re going to build the Sink a Startup game, with a 7 x 7 grid and three
    Startups. Each Startup takes up three cells.**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**您将要建立的是“击沉一个启动”的游戏，使用7 x 7的网格和三个启动。每个启动占据三个单元格。**'
- en: '**part of a game interaction**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏互动的一部分**'
- en: '![image](Images/f0140-02.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图像](Images/f0140-02.png)'
- en: What needs to change?
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要做出什么改变？
- en: 'We have three classes that need to change: the Startup class (which is now
    called Startup instead of SimpleStartup), the game class (StartupBust), and the
    game helper class (which we won’t worry about now).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改三个类：启动类（现在称为Startup而不是SimpleStartup）、游戏类（StartupBust）和游戏助手类（我们现在不担心）。
- en: '![Images](Images/acirclea.png) **Startup class**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图像](Images/acirclea.png) **Startup类**'
- en: '**A Add a *name* variable** to hold the name of the Startup (“poniez,” “cabista,”
    etc.) so each Startup can print its name when it’s killed (see the output screen
    on the opposite page).'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加一个 *名称* 变量** 来保存启动的名称（“poniez”，“cabista”等），这样每个启动在被击败时都可以打印出其名称（请参见对面屏幕上的输出）。'
- en: '![Images](Images/acircleb.png) **StartupBust class (the game)**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图像](Images/acircleb.png) **StartupBust类（游戏）**'
- en: '**Create *three* Startups instead of one.**'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 *三个* 启动而不是一个。**'
- en: '**Give each of the three Startups a *name.*** Call a setter method on each
    Startup instance so that the Startup can assign the name to its name instance
    variable.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**给这三个启动每个一个 *名称*。** 在每个启动实例上调用一个setter方法，以便启动可以将名称分配给其名称实例变量。'
- en: '**Put the Startups on a grid rather than just a single row, and do it for all
    three Startups.**'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将启动放在网格上，而不仅仅是一行，对所有三个启动都是如此。**'
- en: This step is now way more complex than before, if we’re going to place the Startups
    randomly. Since we’re not here to mess with the math, we put the algorithm for
    giving the Startups a location into the GameHelper (Ready-Bake Code) class.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们要随机放置Startups，那么现在这一步比以前复杂得多。因为我们不想搞砸数学，所以我们将为给Startups分配位置的算法放入GameHelper（即食代码）类中。
- en: '**Check each user guess *with all three Startups*, instead of just one.**'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查每个用户猜测*与所有三个Startups*，而不仅仅是一个。**'
- en: '**Keep playing the game** (i.e., accepting user guesses and checking them with
    the remaining Startups) ***until there are no more live Startups.***'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继续玩游戏**（即接受用户的猜测并与剩余的Startups进行检查）***直到没有更多的活跃Startups为止。***'
- en: '**Get out of main.** We kept the simple one in main just to...keep it simple.
    But that’s not what we want for the *real* game.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出主程序。** 我们保留了主程序中的简单代码，只是为了…保持简单。但这不是我们想要的*真正*游戏。'
- en: '**3 Classes:**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**3个类：**'
- en: '![image](Images/f0141-01.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0141-01.png)'
- en: '**5 Objects:**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**5个对象：**'
- en: '![image](Images/f0141-02.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0141-02.png)'
- en: Who does what in the StartupBust game (and when)
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StartupBust游戏中的参与者及其活动时机
- en: '![Images](Images/1circlea.png)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circlea.png)'
- en: '![image](Images/f0142-01.png)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0142-01.png)'
- en: '![Images](Images/1circleb.png)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circleb.png)'
- en: '![image](Images/f0142-02.png)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0142-02.png)'
- en: '![Images](Images/1circlec.png)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circlec.png)'
- en: '![image](Images/f0142-03.png)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0142-03.png)'
- en: '![Images](Images/1circled.png)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circled.png)'
- en: '![image](Images/f0143-01.png)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0143-01.png)'
- en: '![Images](Images/1circlee.png)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circlee.png)'
- en: '![image](Images/f0143-02.png)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0143-02.png)'
- en: '![Images](Images/1circlef.png)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1circlef.png)'
- en: '![image](Images/f0143-03.png)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0143-03.png)'
- en: Prep code for the real StartupBust class
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好实际的StartupBust类的代码
- en: '![image](Images/f0144-01.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0144-01.png)'
- en: 'The StartupBust class has three main jobs: set up the game, play the game until
    the Startups are dead, and end the game. Although we could map those three jobs
    directly into three methods, we split the middle job (play the game) into *two*
    methods to keep the granularity smaller. Smaller methods (meaning smaller chunks
    of functionality) help us test, debug, and modify the code more easily.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: StartupBust类有三个主要任务：设置游戏，玩游戏直到所有Startups死亡，并结束游戏。尽管我们可以直接将这三个任务映射为三个方法，但我们将中间任务（玩游戏）分成*两*个方法，以保持粒度较小。较小的方法（意味着更小的功能块）有助于我们更轻松地测试、调试和修改代码。
- en: '**Variable Declarations**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量声明**'
- en: '**DECLARE** and instantiate the *GameHelper* instance variable, named *helper.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**并实例化*GameHelper*实例变量，命名为*helper*。'
- en: '**DECLARE** and instantiate an *ArrayList* to hold the list of Startups (initially
    three) Call it *startups.*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**并实例化一个*ArrayList*来保存Startup的列表（最初为三个）。命名为*startups*。'
- en: '**DECLARE** an int variable to hold the number of user guesses (so that we
    can give the user a score at the end of the game). Name it *numOfGuesses* and
    set it to 0.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**一个int变量来保存用户猜测的次数（这样我们可以在游戏结束时给用户一个得分）。将其命名为*numOfGuesses*并将其设置为0。'
- en: '* * *'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Method Declarations**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法声明**'
- en: '**DECLARE** a *setUpGame()* method to create and initialize the Startup objects
    with names and locations. Display brief instructions to the user.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**一个*setUpGame()*方法来创建并初始化具有名称和位置的Startup对象。向用户显示简要说明。'
- en: '**DECLARE** a *startPlaying()* method that asks the player for guesses and
    calls the checkUserGuess() method until all the Startup objects are removed from
    play.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**一个*startPlaying()*方法，询问玩家猜测并调用checkUserGuess()方法，直到所有Startup对象从游戏中移除。'
- en: '**DECLARE** a *checkUserGuess()* method that loops through all remaining Startup
    objects and calls each Startup object’s checkYourself() method.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**一个*checkUserGuess()*方法，该方法循环遍历所有剩余的Startup对象，并调用每个Startup对象的checkYourself()方法。'
- en: '**DECLARE** a *finishGame()* method that prints a message about the user’s
    performance, based on how many guesses it took to sink all of the Startup objects.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明**一个*finishGame()*方法，根据用户击沉所有Startup对象所需的猜测次数打印用户表现的消息。'
- en: '* * *'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Method Implementations**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法实现**'
- en: '**METHOD: *void setUpGame()***'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法：*void setUpGame()***'
- en: // make three Startup objects and name them
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建三个Startup对象并为它们命名
- en: '**CREATE** three Startup objects.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建**三个Startup对象。'
- en: '**SET** a name for each Startup.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**每个Startup的名称。'
- en: '**ADD** the Startups to *startups* (the ArrayList).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加**Startups到*startups*（ArrayList）中。'
- en: '**REPEAT** with each of the Startup objects in the *startups* List:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于*startups*列表中的每个Startup对象重复以下操作：**'
- en: '**CALL** the *placeStartup()* method on the helper object, to get a randomly-selected'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用**helper对象上的*placeStartup()*方法，以获取随机选择的'
- en: location for this Startup (three cells, vertically or horizontally aligned,
    on a 7 X 7 grid).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在7 X 7的网格上，为该Startup设置位置（垂直或水平三个单元格）。
- en: '**SET** the location for each Startup based on the result of the *placeStartup()*
    call.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*placeStartup()*调用的结果为每个Startup设置位置。
- en: END REPEAT
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 结束重复
- en: END METHOD
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 结束方法
- en: '**METHOD: *void startPlaying()***'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法：*void startPlaying()***'
- en: '**REPEAT** while any Startups exist.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何Startups存在时**重复**。
- en: '**GET** user input by calling the helper *getUserInput()* method.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用助手*getUserInput()*方法**获取**用户输入。
- en: '**EVALUATE** the user’s guess by *checkUserGuess()* method.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过*checkUserGuess()*方法**评估**用户的猜测。
- en: END REPEAT
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 结束重复
- en: END METHOD
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 结束方法
- en: '**METHOD: *void checkUserGuess(String userGuess)***'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法：*void checkUserGuess(String userGuess)***'
- en: // find out if there’s a hit (and kill) on any Startup
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: // 查找是否有任何Startup上的击中（和击毁）
- en: '**INCREMENT** the number of user guesses in the *numOfGuesses* variable.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在*numOfGuesses*变量中**增加**用户猜测的次数。
- en: '**SET** the local *result* variable (a *String*) to “miss”, assuming that the
    user’s guess will be a miss.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地*result*变量（一个*String*）设置为“miss”，假设用户的猜测会失败。
- en: '**REPEAT** with each of the Startup objects in the *startups* List.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在*startups*列表中**重复**每个Startup对象。
- en: '**EVALUATE** the user’s guess by calling the Startup object’s *checkYourself()*
    method.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用Startup对象的*checkYourself()*方法**评估**用户的猜测。
- en: '**SET** the result variable to “hit” or “kill” if appropriate.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 根据情况将结果变量设置为“hit”或“kill”。
- en: '**IF** the result is “kill”, **REMOVE** the Startup from the *startups* List.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果**结果是“kill”，则从*startups*列表中**移除**该Startup。'
- en: END REPEAT
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 结束重复
- en: '**DISPLAY** the result value to the user.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示**结果值给用户。'
- en: END METHOD
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结束方法
- en: '**METHOD: *void finishGame()***'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**方法：*void finishGame()***'
- en: '**DISPLAY** a generic “game over” message, then:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示**一个通用的“游戏结束”消息，然后：'
- en: '**IF** number of user guesses is small,'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果**用户猜测的次数很少，'
- en: '**DISPLAY** a congratulations message.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示**祝贺消息。'
- en: '**ELSE**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**否则**'
- en: '**DISPLAY** an insulting one.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示**一个侮辱性的消息。'
- en: END IF
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结束如果
- en: END METHOD
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 结束方法
- en: '![Images](Images/arr1.png) **Yours to solve.**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **由您解决。**'
- en: '![image](Images/f0146-01.png)![image](Images/f0146-02.png)![image](Images/f0147-01.png)![image](Images/f0147-02.png)![image](Images/f0148-01.png)![image](Images/f0149-01.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0146-01.png)![图片](Images/f0146-02.png)![图片](Images/f0147-01.png)![图片](Images/f0147-02.png)![图片](Images/f0148-01.png)![图片](Images/f0149-01.png)'
- en: The final version of the Startup class
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Startup类的最终版本
- en: '![image](Images/f0150-01.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0150-01.png)'
- en: Super powerful Boolean expressions
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级强大的布尔表达式
- en: So far, when we’ve used Boolean expressions for our loops or `if` tests, they’ve
    been pretty simple. We will be using more powerful boolean expressions in some
    of the Ready-Bake Code you’re about to see, and even though we know you wouldn’t
    peek, we thought this would be a good time to discuss how to energize your expressions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，当我们在循环或*if*测试中使用布尔表达式时，它们通常很简单。在接下来要看到的一些现成的代码中，我们将使用更强大的布尔表达式，尽管我们知道您不会偷看，但现在正是讨论如何激活您的表达式的好时机。
- en: '**“And” and “Or” Operators** `( &&, || )`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**“与”和“或”运算符** `( &&, || )`'
- en: 'Let’s say you’re writing a chooseCamera( ) method, with lots of rules about
    which camera to select. Maybe you can choose cameras ranging from $50 to $1000,
    but in some cases you want to limit the price range more precisely. You want to
    say something like:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在编写一个chooseCamera()方法，其中有很多关于选择相机的规则。也许你可以选择价格在$50到$1000之间的相机，但在某些情况下，你想更精确地限制价格范围。你想表达的可能是：
- en: “If the price range is between $300 ***and*** $400, then choose X.”
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “如果价格范围在$300 ***到*** $400之间，则选择X。”
- en: '[PRE0]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s say that of the ten camera brands available, you have some logic that
    applies to only a *few* of the list:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在十个可用的相机品牌中，你有一些逻辑只适用于列表中的*少数*品牌：
- en: '[PRE1]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Boolean expressions can get really big and complicated:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式可能会变得非常庞大和复杂：
- en: '[PRE2]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to get *really* technical, you might wonder about the precedence
    of these operators. Instead of becoming an expert in the arcane world of precedence,
    we recommend that you ***use parentheses*** to make your code clear.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想*真正*技术性地去探讨，你可能会对这些运算符的优先级感到疑惑。与其成为优先级神秘世界的专家，我们建议您***使用括号***来使您的代码更清晰。
- en: '**Not equals ( != and ! )**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**不等于（!=和!）**'
- en: Let’s say that you have a logic like “of the ten available camera models, a
    certain thing is *true for all but one. “*
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有这样一个逻辑：“在十种可用的相机型号中，某个特定的事情对除了一种之外的所有相机型号都*成立*。”
- en: '[PRE3]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: or for comparing objects like strings...
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 或者用于比较对象如字符串...
- en: '[PRE4]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Short-Circuit Operators ( && , || )**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**短路操作符（&&，||）**'
- en: The operators we’ve looked at so far, && and ||, are known as ***short-circuit***
    operators. In the case of &&, the expression will be true only if both sides of
    the && are true. So if the JVM sees that the left side of a && expression is false,
    it stops right there! Doesn’t even bother to look at the right side.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看过的操作符 && 和 || 被称为***短路***操作符。对于 &&，只有在 && 的两边都为真时，表达式才为真。所以，如果JVM发现
    && 表达式的左侧为假，它就会立即停止！甚至不去看右侧。
- en: Similarly, with ||, the expression will be true if *either* side is true, so
    if the JVM sees that the left side is true, it declares the entire statement to
    be true and doesn’t bother to check the right side.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于 ||，如果*任一*侧为真，表达式就为真，所以如果JVM发现左侧为真，它就宣布整个语句为真，并且不会去检查右侧。
- en: 'Why is this great? Let’s say that you have a reference variable and you’re
    not sure whether it’s been assigned to an object. If you try to call a method
    using this null reference variable (i.e., no object has been assigned), you’ll
    get a NullPointerException. So, try this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？假设您有一个引用变量，但不确定它是否已分配给一个对象。如果您尝试使用这个空引用变量调用方法（即未分配对象），您将会得到一个NullPointerException。所以，请尝试这样做：
- en: '[PRE5]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Non-Short-Circuit Operators ( &, | )**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**非短路操作符（ &，| ）**'
- en: When used in boolean expressions, the & and | operators act like their && and
    || counterparts, except that they force the JVM to *always* check *both* sides
    of the expression. Typically, & and | are used in another context, for manipulating
    bits.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在布尔表达式中使用时，& 和 | 操作符的作用类似于它们的 && 和 || 对应物，但它们强制JVM始终检查表达式*两*边。通常情况下，& 和 | 用于另一个上下文，用于位操作。
- en: Ready-Bake Code
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现成代码
- en: '![image](Images/f0152-02a.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0152-02a.png)'
- en: This is the helper class for the game. Besides the user input method (that prompts
    the user and reads input from the command line), the helper’s Big Service is to
    create the cell locations for the Startups. We tried to keep it fairly small so
    you wouldn’t have to type so much. And remember, you won’t be able to compile
    the StartupBust game class until you have *this* class.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是游戏的辅助类。除了用户输入方法（提示用户并从命令行读取输入）之外，辅助类的大服务是为StartupBust创建单元位置。我们尽量保持它相对较小，这样您就不必输入太多内容。请记住，在您拥有*这个*类之前，您将无法编译StartupBust游戏类。
- en: '![image](Images/f0152-01.png)![image](Images/f0153-01.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0152-01.png)![image](Images/f0153-01.png)'
- en: Using the Library (the Java API)
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用库（Java API）
- en: You made it all the way through the StartupBust game, thanks to the help of
    ArrayList. And now, as promised, it’s time to learn how to fool around in the
    Java library.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArrayList的帮助下，您成功完成了StartupBust游戏的全部过程。现在，正如承诺的那样，是时候学习如何在Java库中操作了。
- en: '**In the Java API, classes are grouped into packages.**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Java API中，类被分组到包中。**'
- en: '![image](Images/f0154-01.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0154-01.png)'
- en: '**To use a class in the API, you have to know which package the class is in.**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**要使用API中的类，您必须知道类属于哪个包。**'
- en: Every class in the Java library belongs to a package. The package has a name,
    like `**javax.swing**` (a package that holds some of the Swing GUI classes you’ll
    learn about soon). ArrayList is in the package called `**java.util**`, which surprise
    surprise, holds a pile of *utility* classes. You’ll learn a lot more about packages
    in [Appendix B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d), including
    how to put your *own* classes into your *own* packages. For now, though, we’re
    just looking to *use* some of the classes that come with Java.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Java库中的每个类都属于一个包。包有一个名称，例如`**javax.swing**`（包含一些即将学习的Swing GUI类的包）。ArrayList位于名为`**java.util**`的包中，这个包意外地包含了一堆*实用*类。您将在[附录 B](app02.xhtml#appendix_b_the_top_ten-ish_topics_that_d)中学到更多关于包的内容，包括如何将*您自己*的类放入*您自己*的包中。不过，目前我们只是希望*使用*Java提供的一些类。
- en: 'Using a class from the API, in your own code, is simple. You just treat the
    class as though you wrote it yourself...as though you compiled it, and there it
    sits, waiting for you to use it. With one big difference: somewhere in your code
    you have to indicate the *full* name of the library class you want to use, and
    that means package name + class name.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的代码中使用API中的类很简单。您只需将这个类视为您自己编写的一样……就像您已经编译了它，它就坐在那里，等待您使用。只有一个很大的不同：在您的代码中的某处，您必须指示您要使用的库类的*完整*名称，这意味着包名
    + 类名。
- en: Even if you didn’t know it, ***you’ve already been using classes from a package.***
    System (System.out.println), String, and Math (Math.random()) all belong to the
    `**java.lang**` package.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不知道，***你已经在使用来自包的类。*** System（System.out.println）、String 和 Math（Math.random()）都属于`**java.lang**`包。
- en: You have to know the full name* of the class you want to use in your code.
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你必须知道你想在代码中使用的类的完整名称。
- en: 'ArrayList is not the *full* name of ArrayList, just as Kathy isn’t a full name
    (unless it’s like Madonna or Cher, but we won’t go there). The full name of ArrayList
    is actually:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayList 不是 ArrayList 的*全名*，就像 Kathy 不是全名（除非像麦当娜或雪儿那样，但我们不去那里）。ArrayList 的全名实际上是：
- en: '![image](Images/f0155-01.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0155-01.png)'
- en: '**You have to tell Java which ArrayList you want to use. You have two options:**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**你必须告诉 Java 你想使用哪个 ArrayList。你有两个选择：**'
- en: '![Images](Images/acirclea.png) **IMPORT**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/acirclea.png) **导入**'
- en: 'Put an import statement at the top of your source code file:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的源代码文件顶部放置一个导入语句：
- en: '[PRE6]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**OR**'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**或者**'
- en: '![Images](Images/acircleb.png) **TYPE**'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/acircleb.png) **类型**'
- en: Type the full name everywhere in your code. Each time you use it. *Everywhere*
    you use it.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的代码中到处输入完整的名称。每次使用它。*无处不在*你使用它。
- en: 'When you declare and/or instantiate it:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你声明和/或实例化它时：
- en: '[PRE7]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you use it as an argument type:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你将其用作参数类型时：
- en: '[PRE8]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you use it as a return type:'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你将其用作返回类型时：
- en: '[PRE9]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Unless the class is in the java.lang package.*'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**除非该类在 java.lang 包中。*'
- en: '**One more time, in the unlikely event that you don’t already have this down:**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**再说一次，如果你还没有完全掌握：**'
- en: '![image](Images/f0157-01.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0157-01.png)'
- en: '*“Good to know there’s an ArrayList in the java. util package. But by myself,
    how would I have figured that out?”*'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*“知道有 java.util 包中的 ArrayList 很好。但是自己，我怎么可能找出这一点呢？”*'
- en: '- Julia, 31, hand model'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '- 朱莉娅，31岁，手模特'
- en: '![image](Images/f0158-01.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0158-01.png)'
- en: How to discover the API
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何发现 API
- en: '**Two things you want to know:**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**你想知道的两件事情：**'
- en: '![Images](Images/1circle.png) **What features are available in the library?
    (Which classes?)**'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circle.png) **图书馆中有哪些功能？（哪些类？）**'
- en: '![Images](Images/2circle.png) **How do you use these features? (Once you find
    a class, how do you know what it can do?)**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/2circle.png) **你如何使用这些功能？（一旦找到一个类，你如何知道它能做什么？）**'
- en: '![Images](Images/1circlea.png) **Browse a book**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circlea.png) **浏览一本书**'
- en: '![image](Images/f0158-02.png)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0158-02.png)'
- en: '![Images](Images/1circleb.png) **Use the HTML API docs**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circleb.png) **使用 HTML API 文档**'
- en: '![image](Images/f0158-03.png)'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0158-03.png)'
- en: '***[https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)***'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '***[https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)***'
- en: '![Images](Images/1circlea.png) Browse a book'
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/1circlea.png) 浏览一本书'
- en: '![image](Images/f0159-01.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0159-01.png)'
- en: Flipping through a reference book is a good way to find out what’s in the Java
    library. You can easily stumble on to a package or class that looks useful just
    by browsing pages.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 翻阅参考书是发现 Java 库中内容的好方法。通过浏览页面，你可以轻松地找到看起来有用的包或类。
- en: '![image](Images/f0159-02.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0159-02.png)'
- en: '![Images](Images/1circleb.png) Use the HTML API docs'
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图片](Images/1circleb.png) 使用 HTML API 文档'
- en: Java comes with a fabulous set of online docs called, strangely, the Java API.
    You (or your IDE) can also download the docs to have on your hard drive just in
    case your internet connection fails at the Worst Possible Moment.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Java 自带了一个名为 Java API 的绝妙在线文档集。你（或你的 IDE）也可以下载这些文档以备不时之需，以防你的互联网连接在最糟糕的时刻失效。
- en: The API docs are the best reference for getting more details about what’s in
    a package, and what the classes and interfaces in the package provide (e.g., in
    terms of methods and functionality).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: API 文档是获取有关包中内容更多细节的最佳参考，并且包括包中的类和接口提供的方法和功能。
- en: The docs look different depending upon the version of Java you’re using Make
    sure you’re looking at the docs for your version of Java!
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的外观取决于你使用的 Java 版本。确保你查看的是你 Java 版本的文档！
- en: '**Java 8 and earlier**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 8及更早版本**'
- en: '***[https://docs.oracle.com/javase/8/docs/api/index.html](https://docs.oracle.com/javase/8/docs/api/index.html)***'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '***[https://docs.oracle.com/javase/8/docs/api/index.html](https://docs.oracle.com/javase/8/docs/api/index.html)***'
- en: '![image](Images/f0160-01.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0160-01.png)'
- en: 'You can navigate these docs:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以浏览这些文档：
- en: '**Top down:** find a package you’re interested in from the list in the top
    left and drill down.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自上而下：** 从左上角的列表中找到你感兴趣的包，并深入研究。'
- en: '**Class-first:** find the class you want to know more about in the list in
    the bottom left, and click it.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以类为首：** 在左下方的列表中找到你想要了解更多的类，并点击它。'
- en: The main panel will show you the details of whatever you’re looking at. If you
    select a package, it will give summary information about that package and a list
    of the classes and interfaces.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 主面板会展示你正在查看的内容的详细信息。如果你选择了一个包，它会给出关于该包的摘要信息以及类和接口的列表。
- en: If you select a class, it will show you a description of the class, and details
    of all the methods in the class, what they do, and how to use them.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择一个类，它会显示该类的描述以及所有方法的详细信息，包括它们的功能和使用方法。
- en: '**Java 9 and later**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 9 及更高版本**'
- en: Java 9 introduced the Java Module System, which we’re not going to cover in
    this book. What you do need to know to understand the docs is that the JDK is
    now split into *modules.* These modules group together related packages. This
    can make it easier to find the classes that interest you, because they’re grouped
    by function. All of the classes we’ve covered in this book so far are in the **java.base**
    module; this contains core Java packages like java.lang and java.util.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 引入了 Java 模块系统，我们在本书中不会涉及。但你需要了解的是，为了理解文档，JDK 现在被划分为 *模块*。这些模块将相关的包组合在一起。这样做可以更轻松地找到你感兴趣的类，因为它们按功能分组。到目前为止，我们在本书中讨论过的所有类都在
    **java.base** 模块中；这包括核心 Java 包如 java.lang 和 java.util。
- en: '![image](Images/f0161-01.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0161-01.png)'
- en: 'You can navigate these docs:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以浏览这些文档：
- en: '**Top down:** find a module that looks like it covers the functionality you
    want, see its packages, and drill down from a package into its classes.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自顶向下：** 找到一个看起来涵盖你想要的功能的模块，查看其包，并从包中的类中进一步深入。'
- en: '**Search:** Use the search in the top right to go directly to the method, class,
    package, or module you want to read about.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索：** 使用右上角的搜索功能直接跳转到你想了解的方法、类、包或模块。'
- en: '![image](Images/f0161-02.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0161-02.png)'
- en: Using the class documentation
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类文档
- en: Whichever version of the Java docs you’re using, they all have a similar layout
    for showing information about a specific class. This is where the juicy details
    are.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用的是哪个版本的 Java 文档，它们都有类似的布局来显示关于特定类的信息。这里有详细的细节信息。
- en: 'Let’s say you were browsing through the reference book and found a class called
    ArrayList, in java.util. The book tells you a little about it, enough to know
    that this is indeed what you want to use, but you still need to know more about
    the methods. In the reference book, you’ll find the method indexOf(). But if all
    you knew is that there is a method called indexOf() that takes an object and returns
    the index (an int) of that object, you still need to know one crucial thing: what
    happens if the object is not in the ArrayList? Looking at the method signature
    alone won’t tell you how that works. But the API docs will (most of the time,
    anyway). The API docs tell you that the indexOf() method returns a -1 if the object
    parameter is not in the ArrayList. So now we know we can use it both as a way
    to check if an object is even in the ArrayList, and to get its index at the same
    time, if the object was there. But without the API docs, we might have thought
    that the indexOf() method would blow up if the object wasn’t in the ArrayList.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在浏览参考书，并找到了一个名为 ArrayList 的类，在 java.util 包中。书上介绍了一些信息，足够让你知道这正是你想要使用的，但你仍然需要了解更多关于方法的信息。在参考书中，你会找到
    indexOf() 方法。但如果你只知道有一个叫做 indexOf() 的方法，它接受一个对象并返回该对象的索引（一个 int 值），那么你仍然需要知道一个关键信息：如果该对象不在
    ArrayList 中会发生什么？仅仅看方法签名是无法告诉你这个问题的。但 API 文档会告诉你（大部分情况下）。API 文档告诉你，如果对象参数不在 ArrayList
    中，indexOf() 方法会返回 -1。所以现在我们知道，它既可以用作检查对象是否在 ArrayList 中的方法，也可以同时获取其索引（如果对象存在的话）。但如果没有
    API 文档，我们可能会认为 indexOf() 方法会在对象不在 ArrayList 中时出现错误。
- en: '![image](Images/f0162-01.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0162-01.png)'
- en: '**In [Chapter 11](ch11.xhtml#data_structures_collections_and_generics) and
    [Chapter 12](ch12.xhtml#lambdas_and_streams_whatcomma_not_how_la), you’ll see
    how we use the API docs to figure out how to use the Java Libraries.**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 [第11章](ch11.xhtml#data_structures_collections_and_generics) 和 [第12章](ch12.xhtml#lambdas_and_streams_whatcomma_not_how_la)
    中，你会看到我们如何使用 API 文档来学习如何使用 Java 库。**'
- en: Exercise
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '![image](Images/common-03.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-03.png)'
- en: Code Magnets
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: '![image](Images/common-02.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-02.png)'
- en: 'Can you reconstruct the code snippets to make a working Java program that produces
    the output listed below? **NOTE:** To do this exercise, you need one NEW piece
    of info—if you look in the API for ArrayList, you’ll find a second add method
    that takes two arguments:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你能重新构建代码片段以创建一个能生成以下输出的工作 Java 程序吗？ **注意：** 要完成这个练习，你需要一条新的信息——如果你查看 ArrayList
    的 API，你会发现第二个接受两个参数的 add 方法：
- en: '**add(int index, Object o)**'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**add(int index, Object o)**'
- en: It lets you specify to the ArrayList *where* to put the object you’re adding.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 它让你指定向 ArrayList *中* 放置正在添加的对象的位置。
- en: '![image](Images/f0163-01.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0163-01.png)'
- en: '![Images](Images/arr1.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_pag-id).**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“Code Magnets”](#code_magnets_left_parenthesisfrom_pag-id).**'
- en: JavaCross
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: '![image](Images/common-04.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: How does this crossword puzzle help you learn Java? Well, all of the words **are**
    Java related (except one red herring).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这个填字游戏如何帮助你学习 Java？嗯，所有的词都**与** Java 相关（除了一个误导性的）。
- en: '**Hint:** When in doubt, remember ArrayList.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** 当你怀疑时，记住 ArrayList。'
- en: '![image](Images/f0164-01.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0164-01.png)'
- en: '**Across**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 1\. I can’t behave
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 我不能表现得像
- en: 6\. Or, in the courtroom
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 或者，在法庭上
- en: 7\. Where it’s at baby
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 它在哪，宝贝
- en: 9\. A fork’s origin
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 叉子的起源
- en: 12\. Grow an ArrayList
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 增长一个 ArrayList
- en: 13\. Wholly massive
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 完全巨大
- en: 14\. Value copy
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 值复制
- en: 16\. Not an object
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 不是一个对象
- en: 17\. An array on steroids
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. 一个增强版的数组
- en: 19\. Extent
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 19\. 范围
- en: 21\. 19’s counterpart
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 19 的对应物
- en: '22\. Spanish geek snacks (Note: This has nothing to do with Java.)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 22\. 西班牙极客小吃（注：这与 Java 没有关系。）
- en: 23\. For lazy fingers
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 23\. 给懒惰的手指
- en: 24\. Where packages roam
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 24\. 包的漫游地
- en: '**Down**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**下降**'
- en: 2\. Where the Java action is
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. Java 行动的地方
- en: 3\. Addressable unit
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 可寻址的单位
- en: 4\. 2nd smallest
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 第二小的
- en: 5\. Fractional default
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 分数默认
- en: 8\. Library’s grandest
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 图书馆的最伟大
- en: 10\. Must be low density
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 必须是低密度的
- en: 11\. He’s in there somewhere
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 他就在那里
- en: 15\. As if
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 如同
- en: 16\. dearth method
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 匮乏方法
- en: 18\. What shopping and arrays have in common
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 购物和数组有什么共同点
- en: 20\. Library acronym
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 20\. 图书馆的缩写
- en: 21\. What goes around
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 事物循环
- en: '**More Hints:**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多提示：**'
- en: Across
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 横向
- en: 1\. 8 varieties
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 8 种类
- en: 7\. Think ArrayList
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 想想 ArrayList
- en: 16\. Common primitive
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 常见的原始类型
- en: 21\. Array’s extent
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 数组的范围
- en: 22\. Not about Java—Spanish appetizers
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 22\. 不是关于 Java 的——西班牙开胃小吃
- en: Down
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 下降
- en: 2\. What’s overridable?
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 可重写的是什么？
- en: 3\. Think ArrayList
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 想想 ArrayList
- en: 4\. & 10\. Primitive
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. & 10\. 原始类型
- en: 16\. Think ArrayList
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 想想 ArrayList
- en: 18\. He’s making a ______
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 他在制造一个 ______
- en: '![Images](Images/arr1.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_164r).**'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“JavaCross”](#javacross_left_parenthesisfrom_page_164r).**'
- en: Exercise Solutions
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解决方案
- en: '![image](Images/common-03.png)![image](Images/f0165-01.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-03.png)![图片](Images/f0165-01.png)'
- en: Code Magnets
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Code Magnets
- en: (from [“Code Magnets”](#code_magnets-id000003))
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“Code Magnets”](#code_magnets-id000003))
- en: '[PRE10]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: JavaCross
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: (from [“JavaCross”](#javacross-id00002))
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“JavaCross”](#javacross-id00002))
- en: '![image](Images/common-04.png)![image](Images/f0166-01.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)![图片](Images/f0166-01.png)'
