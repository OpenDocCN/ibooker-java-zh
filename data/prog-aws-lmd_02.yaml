- en: Chapter 2\. Getting Started with AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 开始使用 AWS Lambda
- en: '[Chapter 1](ch01.html#ch01) provided you with the background for the rest of
    this book: the cloud, serverless, AWS, and an introduction to what Lambda is,
    how it works, and what it can be used for. But this is a practical book, for practical
    people, so in this chapter we’re going to roll up our sleeves and deploy some
    working functions to the cloud.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html#ch01)为你提供了这本书其余部分的背景：云端、无服务器、AWS，以及对 Lambda 的介绍，它的工作原理及其用途。但这是一本实用的书籍，面向实际的人，所以在本章中，我们将卷起袖子，在云端部署一些工作函数。'
- en: We’ll start by getting you a little more acclimated with the AWS Console, and
    then we’ll deploy and run our first Lambda function. After that we’ll get a local
    development environment ready, and finally we’ll build and deploy a locally developed
    function to Lambda.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使你更熟悉 AWS 控制台开始，然后部署和运行我们的第一个 Lambda 函数。之后，我们将准备一个本地开发环境，最后我们将构建并部署一个本地开发的函数到
    Lambda。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re already experienced with AWS, please feel free to skip ahead to [“Lambda
    Hello World (as Quickly as Possible)”](#lambda-hello-wrld-sec).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经对 AWS 很有经验，请随时跳到[“Lambda Hello World (尽快)”](#lambda-hello-wrld-sec)。
- en: Quick Guide to the AWS Console
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 控制台快速指南
- en: The first two exercises in [Chapter 1](ch01.html#ch01) involved acquiring AWS
    credentials and then logging into the [AWS Web Console](https://console.aws.amazon.com).
    If you haven’t done that already, you should do that now.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html#ch01)的前两个练习涉及获取 AWS 凭证，然后登录到[AWS Web 控制台](https://console.aws.amazon.com)。如果你还没有这样做，现在应该去做。'
- en: 'Slightly confusingly, there are three different types of credential that you
    may have used to log in:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有点令人困惑的是，你可能使用了三种不同类型的凭据来登录：
- en: You may have used the account “root” user, using an email address and password.
    This is equivalent to using the root user in a Linux system.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能使用过账户“root”用户，使用电子邮件地址和密码登录。这相当于在 Linux 系统中使用 root 用户。
- en: You may have used an “IAM user” and password. In this case you will have also
    needed to have provided the numeric AWS account ID (or an AWS account alias).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能使用了一个“IAM 用户”和密码。在这种情况下，你还需要提供数值 AWS 账户 ID（或 AWS 账户别名）。
- en: Finally, you might have used a single sign-on method (e.g., via a Google Apps
    account).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你可能使用了单一登录方法（例如通过 Google Apps 账户）。
- en: Are you signed in successfully now? Great! Let’s go on a little tour of the
    AWS world.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你成功登录了吗？太棒了！让我们来一场关于 AWS 世界的小旅行。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: First of all, a quick word of warning/explanation. The AWS Web Console has frequent
    UX changes, and by the time you read this book, some of the UI may look different
    than what you see here in the book. We’ll do what we can to explain the intent
    of an example, not just the interactions, so that you’ll still be able to follow
    along when Amazon changes its UI.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我要简要警告和解释一下。AWS Web 控制台经常进行用户体验（UX）改进，所以当你阅读这本书时，UI 可能与书中所示有所不同。我们会尽量解释示例的意图，而不仅仅是操作方式，这样当亚马逊改变其
    UI 时，你仍然能够跟上。
- en: Regions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域
- en: Let’s dive in. First let’s talk regions. At the top right you’ll see the currently
    selected region ([Figure 2-1](#currently-selected-region)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。首先让我们谈谈区域。在右上角，你会看到当前选择的区域（见图 2-1](#currently-selected-region)）。
- en: '![images/ch02_image01.png](assets/awsl_0201.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image01.png](assets/awsl_0201.png)'
- en: Figure 2-1\. Currently selected region
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1\. 当前选择的区域
- en: As you learned in [Chapter 1](ch01.html#ch01), AWS organizes its infrastructure
    into data centers called *Availability Zones* (AZs) and then clusters AZs into
    a closely located group known as a *region*. Each region operates semi-autonomously.
    Right now you’re looking at the web console home page for a specific region—in
    our previous example that’s Oregon, otherwise known as the us-west-2 region.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[第1章](ch01.html#ch01)学到的，AWS 将其基础设施组织成称为*可用区*（AZs）的数据中心，然后将 AZs 集成到一个称为*区域*的紧密位于一起的组中。每个区域都是半自治的。现在你正在查看特定区域的
    Web 控制台首页——在我们之前的例子中，那是俄勒冈州，也被称为 us-west-2 区域。
- en: You don’t have to use the default region that was selected when you log in—you’re
    free to traverse the globe in search of the right region for you. Click the region
    name and see the list of regions available to you ([Figure 2-2](#pick-a-region)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你登录时，不一定要使用默认选择的区域——你可以自由地环游世界，寻找适合你的正确区域。点击区域名称，查看可用区域的列表（见图 2-2](#pick-a-region)）。
- en: '![images/ch02_image02.png](assets/awsl_0202.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image02.png](assets/awsl_0202.png)'
- en: Figure 2-2\. Pick a region
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. 选择一个区域
- en: For what we’re going to be covering in this book, any region should be sufficient.
    We’re going to be defaulting to US West (Oregon) for everything we do, and you
    may want to use that too as a fallback choice, but feel free to use a region closer
    to your home if you’d like.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中要涵盖的内容，任何区域都应该足够。我们将在所有操作中都默认使用美国西部（俄勒冈州），如果你愿意，也可以选择更接近你家的区域作为备用选择。
- en: Identity and Access Management
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份和访问管理
- en: Now let’s pick our first service. On the web console home page, either expand
    all services and find the one named *IAM* or search for *IAM* in the search box,
    and select it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们选择我们的第一个服务。在Web控制台首页上，展开所有服务，找到名为*IAM*的服务，或者在搜索框中搜索*IAM*，然后选择它。
- en: IAM stands for *Identity and Access Management*—it’s the most fundamental security
    service within AWS. It’s also one of the few AWS services that is not tied to
    any one region (note the reference to *Global* where your region used to be defined).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 是*身份和访问管理*的缩写——它是AWS中最基础的安全服务之一。它也是少数几个不绑定到任何特定区域的AWS服务之一（注意引用*全球*，以前用于定义你的区域）。
- en: IAM lets you create “IAM users,” groups, roles, policies, and more. If you’re
    using the AWS account you created for this book (and therefore used the “root”
    email address user to log in), we recommend creating an IAM user for future work.
    We’ll describe how to do this in [“Acquiring credentials for the AWS CLI”](#aws-cli-credentials).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 允许你创建“IAM用户”、组、角色、策略等等。如果你使用为本书创建的AWS帐户（因此使用“根”电子邮件地址用户登录），我们建议为将来的工作创建一个IAM用户。我们将在[“获取AWS
    CLI的凭证”](#aws-cli-credentials)中描述如何做到这一点。
- en: '*Roles* are like users, in that they can be used to allow a human, or process,
    to acquire certain privileges in order to fulfill a task. Unlike users, they don’t
    have a username or password, and instead a role must be *assumed* in order to
    be used.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*角色*类似于用户，可以用来允许人或过程获取特定的权限以完成任务。与用户不同的是，它们没有用户名或密码，而是必须*承担*角色才能使用。'
- en: One of the things you’ll quickly discover is that AWS are sticklers for security.
    When you create Lambda functions, you *must* specify a role that it is to assume
    when it is executing. AWS will *not* give it a default role if one isn’t specified.
    We’ll see this when we create our first function in a moment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 是安全性的坚定支持者，这一点你很快就会发现。当你创建 Lambda 函数时，*必须*指定它执行时要承担的角色。如果没有指定角色，AWS *不会*为其提供默认角色。我们稍后将在创建第一个函数时看到这一点。
- en: It’s crucial that you have a fundamental understanding of IAM, since aspects
    like roles and policies are ubiquitous in Lambda development. We give you a thorough
    grounding of IAM in [“Identity and Access Management”](ch04.html#IAM).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须对IAM有基本的理解，因为在Lambda开发中，像角色和策略这样的方面是无处不在的。我们会在[“身份和访问管理”](ch04.html#IAM)章节中为你提供IAM的全面基础知识。
- en: Lambda Hello World (as Quickly as Possible)
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda Hello World（尽快上手）
- en: In this section we’re going to deploy and run our first Lambda function. We’ll
    let you in on a little secret—we’re going to do this with JavaScript. Shhh—don’t
    tell our editors—we promised this would be a Java book!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将部署和运行我们的第一个Lambda函数。我们会告诉你一个小秘密——我们将使用JavaScript完成这个任务。嘘——别告诉我们的编辑——我们曾承诺这将是一本Java书籍！
- en: The reason for doing this first example in JavaScript is that we can do the
    whole exercise purely in the web browser, giving us a taste of what’s possible
    in Lambda in just a few minutes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以选择JavaScript作为第一个示例，是因为我们可以在Web浏览器中完全进行整个练习，让我们在几分钟内尝试Lambda的潜力。
- en: First, go back to the AWS Web Console home screen, and pick Lambda. If you’ve
    never used Lambda in this account before, you’ll get a screen that looks something
    like [Figure 2-3](#lambda-welcome).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，返回AWS Web控制台主屏幕，选择Lambda。如果你以前没有在此帐户中使用Lambda，你将看到类似于[图2-3](#lambda-welcome)的屏幕。
- en: '![images/ch02_image03.png](assets/awsl_0203.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image03.png](assets/awsl_0203.png)'
- en: Figure 2-3\. Lambda welcome screen
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-3 Lambda欢迎屏幕
- en: If Lambda has been used in this account before, the web console will look more
    like [Figure 2-4](#lambda-function-list).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在此帐户中之前使用过Lambda，Web控制台的外观会更像[图2-4](#lambda-function-list)。
- en: '![images/ch02_image04.png](assets/awsl_0204.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image04.png](assets/awsl_0204.png)'
- en: Figure 2-4\. Lambda function list
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-4 Lambda函数列表
- en: Again, it might look different depending on when you read this due to Amazon’s
    ever-changing UI designs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于亚马逊不断变化的UI设计，你阅读时可能会看到不同的外观。
- en: Either way, click *Create function*, and then choose *Author from scratch*—there
    are some other options here for getting started with more complicated functions,
    but we’re going to be doing something very simple right now.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，点击*创建函数*，然后选择*从头开始编写*—这里有一些其他选项可供您开始使用更复杂的函数，但我们现在将做一些非常简单的事情。
- en: In the name box (see [Figure 2-5](#create-function)), type **`HelloWorld`**,
    and under *Runtime* click *Node.js 10.x*. Don’t worry, we’ll be working with Java
    soon! Now click *Create function*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在名称框中（参见[图2-5](#create-function)），输入**`HelloWorld`**，在*运行时*下点击*Node.js 10.x*。别担心，我们很快就会开始使用Java！现在点击*创建函数*。
- en: '![images/ch02_image05.png](assets/awsl_0205.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image05.png](assets/awsl_0205.png)'
- en: Figure 2-5\. Create HelloWorld function
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-5\. 创建HelloWorld函数
- en: If after doing this the console expands the Permissions section, select *Create
    a new role with basic Lambda permissions* in the *Execution role* drop-down, and
    then click *Create function* again (see [Figure 2-6](#create-function-with-role)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此后控制台扩展了权限部分，请在*执行角色*下拉菜单中选择*使用基本Lambda权限创建新角色*，然后再次点击*创建函数*（参见[图2-6](#create-function-with-role)）。
- en: '![images/ch02_image06.png](assets/awsl_0206.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image06.png](assets/awsl_0206.png)'
- en: Figure 2-6\. Create HelloWorld function, specifying to create a new role
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-6\. 创建HelloWorld函数，指定创建一个新角色
- en: Lambda will create a Lambda function configuration within the Lambda platform
    and bring you to the main console page for the Lambda function after a short wait.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda将在Lambda平台内创建一个Lambda函数配置，并在短暂等待后将您带到Lambda函数的主控制台页面。
- en: If you scroll down, you’ll see that it’s even given the function some default
    code—that code is perfectly fine for us for now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您向下滚动，您会看到它甚至已经为函数提供了一些默认代码—对我们来说，现在这些代码完全合适。
- en: Scroll back to the top, and click the *Test* button. This will open a dialog
    named *Configure test event*—enter **`HelloWorldTest`** in the *Event name* box,
    and click *Create*. This will take you back to the Lambda function screen. Now
    click *Test* again.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动回顶部，点击*测试*按钮。这将打开一个名为*配置测试事件*的对话框—在*事件名称*框中输入**`HelloWorldTest`**，然后点击*创建*。这将带您回到Lambda函数屏幕。现在再次点击*测试*。
- en: This time Lambda will actually execute your function, and there will be a short
    delay as it instantiates an environment for the code. Then you’ll see a box with
    *Execution result*—it should say that the function succeeded!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这次Lambda将实际执行您的函数，并且会有一个短暂的延迟，因为它正在为代码实例化一个环境。然后您将看到一个*执行结果*的框—应该会显示函数执行成功！
- en: Expand the *Details* control, and you’ll see the value returned from your function,
    plus some other diagnostics (see [Figure 2-7](#hello-world-executed)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 展开*详细信息*控件，您将看到从函数返回的值，以及一些其他诊断信息（参见[图2-7](#hello-world-executed)）。
- en: '![images/ch02_image07.png](assets/awsl_0207.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image07.png](assets/awsl_0207.png)'
- en: Figure 2-7\. HelloWorld executed
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-7\. HelloWorld执行
- en: Congratulations—you’ve created and run your first Lambda function!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您—您已经创建并运行了您的第一个Lambda函数！
- en: Setting Up Your Development Environment
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Now that you have a little taste of running functions (no servers!), we’ll turn
    to actually building and deploying Java Lambda functions in a way more suited
    to rapid iteration and automation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经尝试了运行函数的一点（无服务器！），我们将转而实际构建和部署Java Lambda函数，这种方式更适合快速迭代和自动化。
- en: First you need to set up a local development environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要设置一个本地开发环境。
- en: AWS Command Line Interface
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS命令行界面
- en: If you’ve used the AWS CLI before and already have it configured on your machine
    you can skip ahead.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前使用过AWS CLI并且已在您的计算机上配置了它，您可以跳过这一步。
- en: Installing the AWS CLI
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装AWS CLI
- en: Amazon and AWS are built on APIs. In [this classic story of Amazon’s API mandate](https://oreil.ly/AixTf),
    we see that “All teams will henceforth expose their data and functionality through
    service interfaces” and “All service interfaces, without exception, must be designed
    from the ground up to be externalizable.” What this means is that almost anything
    that we can do through the AWS Web Console UI we can also do using the AWS API
    and CLI.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon和AWS都建立在API之上。在[Amazon API命令的经典故事](https://oreil.ly/AixTf)中，我们看到“所有团队从现在开始都将通过服务接口公开其数据和功能”，以及“所有服务接口必须从头开始设计，以便能够外部化”。这意味着几乎我们可以通过AWS
    Web控制台UI做的任何事情，我们也可以通过AWS API和CLI完成。
- en: The AWS API is a large collection of HTTP endpoints that we can call to perform
    actions within AWS. While calling the API directly is perfectly supported, it’s
    also a little laborious due to things like authentication/request signing, correct
    serialization, etc. For this reason, AWS gives us two tools to make things easier—SDKs
    and the CLI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: AWS API 是一个大集合的 HTTP 终端点，我们可以调用它们在 AWS 内执行操作。虽然直接调用 API 得到了完全的支持，但由于诸如身份验证/请求签名、正确的序列化等问题，这也显得有些繁琐。因此，AWS
    为我们提供了两个工具来简化操作 —— SDK 和 CLI。
- en: 'Software development kits (SDKs) are libraries that AWS provides that we can
    use within our code to call the AWS APIs, smoothing some of the tricky or repetitive
    points of doing so, for example authentication. We use the SDKs later in the book—[“Example:
    Building a Serverless API”](ch05.html#serverless-api-example) looks at this subject
    in depth.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发工具包（SDK）是 AWS 提供的库，我们可以在代码中使用它们调用 AWS API，从而简化一些复杂或重复的工作，例如身份验证。我们稍后在本书中使用这些
    SDK —— [“示例：构建无服务器 API”](ch05.html#serverless-api-example)深入探讨了这个主题。
- en: For now though, we’re going to use the AWS CLI. The CLI is a tool you can use
    from a terminal—it wraps the AWS API, so almost anything available through the
    API is also accessible via the CLI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 AWS CLI。CLI 是一个可以从终端使用的工具 —— 它包装了 AWS API，因此几乎可以通过 CLI 访问 API 提供的所有内容。
- en: You can use the CLI on macOS, Windows, and Linux; however, all the examples
    and suggestions we give are for macOS. If you use a different operating system
    for your development machine, then you should combine the instructions here with
    whatever is specified in the AWS CLI documentation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 macOS、Windows 和 Linux 上使用 CLI；但是，我们在这里给出的所有示例和建议都是针对 macOS 的。如果您的开发机器使用不同的操作系统，则应将此处的说明与
    AWS CLI 文档中指定的内容结合使用。
- en: Follow these instructions to [install the CLI](https://oreil.ly/84dGt). If you
    use a Mac and [Homebrew](https://brew.sh), installing the CLI is as simple as
    running `brew install awscli`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明来 [安装 CLI](https://oreil.ly/84dGt)。如果您使用 Mac 和 [Homebrew](https://brew.sh)，安装
    CLI 就像运行 `brew install awscli` 一样简单。
- en: 'To validate your install of the CLI, run **`aws --version`** from a terminal
    prompt. It should return something similar to the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证 CLI 安装的有效性，请从终端提示符下运行**`aws --version`**。它应该返回类似以下的内容：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The precise output will depend on your operating system, among other factors.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 准确的输出将取决于您的操作系统，以及其他因素。
- en: Acquiring credentials for the AWS CLI
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取 AWS CLI 的凭证
- en: 'The credentials that you use with the AWS CLI are *different* from those that
    you used to log in to the AWS Web Console. For the CLI, you need two values: an
    *Access Key ID* along with its *Secret Access Key*. If you already have these
    values, feel free to skip ahead to the next section.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 的凭证与您用于登录 AWS Web 控制台的凭证*不同*。对于 CLI，您需要两个值：一个*访问密钥 ID*及其*密钥访问密钥*。如果您已经有了这些值，可以跳过到下一节。
- en: The Access Key ID and Secret Access Key pair are credentials that are assigned
    to an *IAM user*. It’s also possible to assign a key and secret to the account
    root user associated with an email address, but AWS strongly advises against doing
    this for security reasons, and so do we.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 访问密钥 ID 和密钥访问密钥对是分配给*IAM 用户*的凭证。也可以将密钥和密钥分配给与电子邮件地址关联的帐户根用户，但出于安全原因，AWS 强烈建议不要这样做，我们也一样。
- en: If you don’t already have an IAM user (because you logged in with the root user,
    or because you used SSO), you’ll need to create an IAM user. To do this, go to
    the IAM console in the AWS Web Console that we visited earlier in this chapter.
    Click on *Users* and double-check that there isn’t a user on that screen for you
    (see [Figure 2-8](#iam-user-list)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有 IAM 用户（因为您使用了根用户登录，或者因为您使用了 SSO），您需要创建一个 IAM 用户。要执行此操作，请转到本章前面访问过的 AWS
    Web 控制台中的 IAM 控制台。单击*用户*，并仔细检查屏幕上是否有适合您的用户（参见[图 2-8](#iam-user-list)）。
- en: '![images/ch02_image08.png](assets/awsl_0208.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image08.png](assets/awsl_0208.png)'
- en: Figure 2-8\. IAM user list
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-8\. IAM 用户列表
- en: 'If you do in fact need to create a user, click *Add user*. On the first screen,
    give your user a name and select both *Programmatic access* and *AWS Management
    Console access*. Then select *Custom password* and enter a new password—this will
    be the password for logging in to the AWS Web Console with this new user, should
    you wish to do so. Deselect *Password reset* (see [Figure 2-9](#add-user)). Then
    click *Next: Permissions*.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实需要创建用户，请点击 *添加用户*。在第一个屏幕上，为您的用户取一个名称，并选择 *程序访问* 和 *AWS 管理控制台访问*。然后选择 *自定义密码*
    并输入新密码 —— 这将是使用此新用户登录 AWS Web 控制台的密码，如果您希望这样做的话。取消选中 *密码重置*（见 [图 2-9](#add-user)）。然后点击
    *下一步：权限*。
- en: '![images/ch02_image09.png](assets/awsl_0209.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image09.png](assets/awsl_0209.png)'
- en: Figure 2-9\. Add IAM user
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-9\. 添加 IAM 用户
- en: On the next screen, select *Attach existing policies directly* and select *Administrator
    Access* (see [Figure 2-10](#add-user-permissions)). For the sake of learning Lambda,
    having a user with full permissions is going to make our lives much easier. You
    should not do this for real production accounts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择 *直接附加现有策略* 并选择 *管理员访问*（见 [图 2-10](#add-user-permissions)）。为了学习 Lambda，拥有具备完整权限的用户将使我们的生活更加轻松。在真实的生产账户中不应执行此操作。
- en: '![images/ch02_image10.png](assets/awsl_0210.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image10.png](assets/awsl_0210.png)'
- en: Figure 2-10\. Add IAM user permissions
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-10\. 添加 IAM 用户权限
- en: 'Click *Next: Tags* and on the screen after that *Next: Review*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 *下一步：标签*，然后在接下来的屏幕上点击 *下一步：审核*。
- en: On the next screen, check that the details correspond to what we just described
    and click *Create user*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，检查详细信息是否与我们刚刚描述的相符，并点击 *创建用户*。
- en: On the final screen you’ll be given the programmatic security credentials for
    your new user! Copy the Access Key ID and the Secret Access Key (after revealing
    it) to a note (keep it secure), or download the provided CSV file. Finally, click
    *Close*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个屏幕上，您将获得新用户的编程安全凭证！将访问密钥 ID 和秘密访问密钥（在显示后）复制到一个备忘录中（保持安全），或下载提供的 CSV 文件。最后，点击
    *关闭*。
- en: If you already had an IAM user, but no programmatic credentials, or you lose
    the credentials for the account you just created, go back to the User list in
    the IAM console, select the user, and then choose the *Security credentials* tab.
    You’ll be able to create a new Access Key (and associated Secret Access Key ID)
    from there.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个 IAM 用户，但没有编程凭证，或者您丢失了刚创建的账户的凭证，请返回 IAM 控制台中的用户列表，选择用户，然后选择 *安全凭证* 选项卡。您可以从那里创建新的访问密钥（及相关的秘密访问密钥
    ID）。
- en: Configuring the AWS CLI
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 AWS CLI
- en: Now it’s time to configure the CLI. From a terminal run **`aws configure`**.
    For the first two fields, paste the values you copied from the previous section.
    For your default region name, type the region code that corresponds to your chosen
    AWS region. You’ll see the region code in the drop-down in the web console (these
    mappings can also be found [in the AWS documentation](https://oreil.ly/sV10t)).
    Because we’ve picked *Oregon* for our examples in the web console, we’ll use us-west-2
    for the examples at our terminal. Finally, for the default output format, type
    **`json`**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候配置 CLI 了。从终端运行 **`aws configure`**。对于前两个字段，请粘贴您从上一节复制的值。对于默认区域名称，请输入与您选择的
    AWS 区域相对应的区域代码。您可以在 Web 控制台的下拉菜单中看到区域代码（这些映射也可以在 [AWS 文档](https://oreil.ly/sV10t)
    中找到）。因为我们在 Web 控制台中选择了 *Oregon* 作为示例，所以在终端的示例中我们将使用 us-west-2。最后，对于默认输出格式，请输入
    **`json`**。
- en: Warning
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: If you’ve already configured a different AWS account in the CLI and are adding
    a new one for this book, you’ll need to create a different profile; otherwise
    the preceding instructions will replace your existing credentials. Use the `--profile`
    option of `aws configure`, and see more details [in the AWS documentation](https://oreil.ly/Aj5y5).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已在 CLI 中配置了不同的 AWS 账户，并为本书添加了新账户，则需要创建一个不同的配置文件；否则，上述说明将替换您现有的凭证。使用 `aws
    configure` 的 `--profile` 选项，并查看更多细节 [在 AWS 文档中](https://oreil.ly/Aj5y5)。
- en: 'To confirm your values, run **`aws configure`** again, and you’ll see your
    settings, something like the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认您的值，请再次运行 **`aws configure`**，您将看到类似以下设置的内容：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A good way to quickly validate your AWS profile is to run the command **`aws
    iam get-user`**, which should result in something that looks like the following,
    where `UserName` is the name of the correct IAM user:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 快速验证 AWS 配置文件的一种好方法是运行命令 **`aws iam get-user`**，其输出应该类似于以下内容，其中 `UserName` 是正确
    IAM 用户的名称：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you need more help, visit [the documentation](https://oreil.ly/JMtUt).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更多帮助，请访问[文档](https://oreil.ly/JMtUt)。
- en: Java Setup
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 设置
- en: Now that you have a local AWS environment, it’s time to get set up with Java.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了本地 AWS 环境，是时候设置 Java 环境了。
- en: AWS Lambda supports Java 8 and Java 11, and it’s strongly recommended that you
    have the same major version of the Java SE Development Kit available locally as
    you are configuring your Lambda functions for. Most operating systems support
    having multiple versions of Java installed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 支持 Java 8 和 Java 11，强烈建议您在本地配置 Lambda 函数时与您使用的 Java SE Development
    Kit 的主要版本保持一致。大多数操作系统支持安装多个版本的 Java。
- en: 'If you don’t already have Java installed, then you have at least a couple of
    options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 Java，则至少有几个选项可供选择：
- en: One is AWS’s own distribution of Java—Corretto. Corretto, in AWS’s words is,
    “a no-cost, multiplatform, production-ready distribution of the Open Java Development
    Kit (OpenJDK).” See [“What Is Amazon Corretto 8?"”](https://oreil.ly/9AYfs) for
    Java 8 or [“What Is Amazon Corretto 11?”](https://oreil.ly/SB2-J) for Java 11
    for details of installing Corretto.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一个是 AWS 自家的 Java 发行版——Corretto。Corretto，根据 AWS 的说法，“是一个无成本、多平台、生产就绪的 Open
    Java Development Kit (OpenJDK) 发行版。”详情请参阅[“Amazon Corretto 8 是什么？”](https://oreil.ly/9AYfs)了解
    Java 8 或者[“Amazon Corretto 11 是什么？”](https://oreil.ly/SB2-J)了解 Java 11 的安装信息。
- en: Another option is [Oracle’s own distribution](https://oreil.ly/WnBD8); however,
    this now comes with licensing caveats that may be an issue for your use.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个选择是[Oracle 自家的发行版](https://oreil.ly/WnBD8)；但是现在这个版本带有许可限制，可能会影响您的使用。
- en: At this time, the difference as far as Lambda developers are concerned between
    these two options is mostly a legal, rather than technical, one. However, we expect
    AWS to transition all of their Java environments to Corretto where they haven’t
    done so already, so if in doubt we recommend Lambda developers pick the Corretto
    Java SDK.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就 Lambda 开发者而言，目前这两个选项的主要区别基本上是法律上的而非技术上的。然而，我们预计 AWS 将会在未来将所有的 Java 环境转移到 Corretto
    上，因此如果有疑问，我们建议 Lambda 开发者选择 Corretto Java SDK。
- en: 'To validate your Java environment, run **`java -version`** from a terminal,
    and you should see something like the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证您的 Java 环境，请从终端运行**`java -version`**，您应该会看到类似以下内容的输出：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The precise build version of Java doesn’t matter (although it’s always prudent
    to keep up-to-date with security patches), but it *is* important that you have
    the correct base version.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Java 的精确构建版本并不重要（尽管保持与安全补丁的最新状态始终是明智的），但重要的是您有正确的基础版本。
- en: We also use Maven—the build and packaging tool. If you’ve already installed
    Maven, make sure it’s somewhat up-to-date. If you haven’t installed Maven and
    use a Mac, then we recommend using Homebrew to install it—run `brew install maven`.
    Otherwise, see the [Maven home page](https://maven.apache.org) for installation
    instructions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 Maven——构建和打包工具。如果您已经安装了 Maven，请确保它是比较更新的版本。如果您还没有安装 Maven 并且使用的是 Mac，那么我们建议使用
    Homebrew 安装它——运行`brew install maven`。否则，请参阅[Maven 官网](https://maven.apache.org)获取安装指南。
- en: 'Open a terminal and run **`mvn -v`** to validate your environment. You should
    see some output that starts with something like the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行**`mvn -v`**来验证您的环境。您应该会看到类似以下内容开头的输出：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Any 3.x version of Maven will be fine for our needs in this book.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的任何 3.x 版本的 Maven 都能够满足我们的需求。
- en: Finally, you should be comfortable creating Java projects that use Maven in
    your development editor of choice. We use the free version of [IntelliJ IDEA](https://oreil.ly/RWtqv),
    but you should feel free to use whatever editor you want.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该能够在您选择的开发编辑器中轻松创建使用 Maven 的 Java 项目。我们使用的是免费版本的[IntelliJ IDEA](https://oreil.ly/RWtqv)，但您可以随意选择其他编辑器。
- en: AWS SAM CLI Installation
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS SAM CLI 安装
- en: The final tool you need to install is the AWS SAM CLI. SAM stands for Serverless
    Application Model, and we explore it later in [“CloudFormation and the Serverless
    Application Model”](ch04.html#cloudformation-and-sam). For now all you need to
    know is that the SAM CLI layers on top of the regular AWS CLI to give us some
    useful extra tools.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装的最后一个工具是 AWS SAM CLI。SAM 代表 Serverless Application Model，我们稍后会探讨它在[“CloudFormation
    和 Serverless Application Model”](ch04.html#cloudformation-and-sam)中的应用。现在您只需要知道
    SAM CLI 是在常规 AWS CLI 的基础上提供一些有用的额外工具。
- en: To install SAM, refer to [the comprehensive instructions](https://oreil.ly/slxxA).
    If you’re in a hurry, you can skip the elements of the documentation that refer
    to Docker since we won’t use those, at least not initially!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 SAM，请参考 [详细说明](https://oreil.ly/slxxA)。如果时间紧迫，可以跳过关于 Docker 的文档部分，因为起初我们不会使用它们！
- en: Warning
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: We use some features of SAM CLI that were introduced in late 2019, so make sure
    to update it if you’re using an earlier version.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 SAM CLI 的一些功能，这些功能在 2019 年末引入，所以如果你使用的是早期版本，请确保更新它。
- en: Lambda Hello World (the Proper Way)
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda Hello World（正确的方式）
- en: With our development environment ready, it’s time to create and deploy a Lambda
    function written in Java.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境准备好后，现在是时候创建和部署一个用 Java 编写的 Lambda 函数了。
- en: Creating Your First Java Lambda Project
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个 Java Lambda 项目
- en: There’s some “boilerplate code” necessary in building and deploying a Lambda
    function in an automated way. We’re going to go through all the complexities over
    the course of this book, but to get you up and running quickly, we’ve created
    a template to speed things up.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建和部署 Lambda 函数的自动化过程中，有一些“样板代码”是必需的。在本书的过程中，我们将详细介绍所有复杂性，但为了让您快速上手，我们已经创建了一个模板来加快速度。
- en: 'First, go to a terminal and run the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，进入终端并运行以下命令：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will ask you for a `project_name` value, and for now just hit Enter to
    use the default.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求你提供一个 `project_name` 值，暂时只需按 Enter 使用默认值即可。
- en: 'The command will then generate a project directory. Change into that directory,
    and take a look. You’ll see the following files:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后命令将生成一个项目目录。切换到该目录并查看。你将看到以下文件：
- en: README.md
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: README.md
- en: Some instructions on how to build and deploy the project
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关于如何构建和部署项目的说明
- en: pom.xml
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: pom.xml
- en: A Maven project file
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Maven 项目文件
- en: template.yaml
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: template.yaml
- en: A SAM template file—used for deploying the project to AWS
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 SAM 模板文件——用于将项目部署到 AWS
- en: src/main/java/book/HelloWorld.java
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: src/main/java/book/HelloWorld.java
- en: The source code for a Lambda function
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Lambda 函数的源代码
- en: 'Now open the project in your IDE/editor of choice. If you’re using Jetbrains
    IntelliJ IDEA, you can do that by running the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开你选择的 IDE/editor 中的项目。如果你使用的是 Jetbrains IntelliJ IDEA，可以通过运行以下命令来打开：
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Within the *pom.xml* file itself, change the `<groupId>` to be more appropriate
    for yourself, if you’d like.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *pom.xml* 文件中，如果你愿意的话，将 `<groupId>` 更改为更适合你自己的值。
- en: Now take a look at [Example 2-1](#EX1), which shows the *src/main/java/book/HelloWorld.java*
    file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看一下 [示例 2-1](#EX1)，显示的是 *src/main/java/book/HelloWorld.java* 文件。
- en: Example 2-1\. Hello World Lambda (in Java)
  id: totrans-135
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. Hello World Lambda（Java 实现）
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This class represents an entire Java Lambda function. Small, isn’t it? Don’t
    worry too much about the whats and whys; we’ll get to them before too long. For
    now, let’s build our Lambda deployment artifact.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类代表了一个完整的 Java Lambda 函数。很小，不是吗？不要太担心它的内容和原因；我们很快就会讲到。现在，让我们来构建我们的 Lambda
    部署工件。
- en: Building Hello World
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Hello World
- en: We deploy code to the Lambda platform by uploading a ZIP file, or in the Java
    world we can also deploy a JAR file (a JAR is just a ZIP with some embedded metadata).
    For now we’re going to create an *uberjar*—a JAR that contains all of our code,
    plus all the classpath dependencies our code needs that aren’t in the JVM environment
    we’ll be running on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过上传一个 ZIP 文件将代码部署到 Lambda 平台，或者在 Java 世界中，我们也可以部署一个 JAR 文件（JAR 文件只是一个包含了一些嵌入式元数据的
    ZIP）。现在我们将创建一个 *uberjar* ——一个包含我们所有代码以及我们的代码需要的所有类路径依赖项的 JAR 文件。
- en: The template project that you’ve just created is set up to create an uberjar
    for you. We’re not going to examine that now because in [Chapter 4](ch04.html#ch04)
    we’ll go much deeper into a better method of producing a Lambda ZIP file ([“Assembling
    a ZIP File”](ch04.html#assembling-a-zip-file)).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚创建的模板项目已设置好为您创建一个 uberjar。我们现在不会检查它，因为在 [第四章](ch04.html#ch04) 中，我们将更深入地探讨一个生成
    Lambda ZIP 文件的更好方法（[“组装 ZIP 文件”](ch04.html#assembling-a-zip-file)）。
- en: 'To build the JAR file, from your project’s working directory, run **`mvn package`**.
    This should complete successfully with the following lines near the end:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 JAR 文件，请从项目的工作目录运行 **`mvn package`**。这应该在结束时成功完成，并显示以下行：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It should also create our uberjar. Run **`jar tf target/lambda.jar`** to list
    the contents of the JAR file. The output should include `book/HelloWorld.class`,
    which is our application code, embedded within the artifact.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这也应该创建我们的 uberjar。运行 **`jar tf target/lambda.jar`** 来列出 JAR 文件的内容。输出应包括 `book/HelloWorld.class`，这是我们应用程序代码，嵌入在工件中。
- en: Creating the Lambda Function
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Lambda 函数
- en: Earlier in the chapter we walked you through creating a Lambda function via
    the web console. Now we’re going to do the same thing from the terminal. We’re
    going to use two further commands using **`sam`** to do this.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本章早些时候，我们通过Web控制台向您展示了如何创建Lambda函数。现在，我们将从终端执行同样的操作。我们将使用**`sam`**命令来完成这两个进一步的操作。
- en: 'Before we do that, however, we need to create or identify a *staging bucket*
    within the *S3* AWS Service where we can store temporary build artifacts. If you
    followed the AWS instructions for installing the SAM CLI or already know that
    you have one of these buckets available from your current AWS account, feel free
    to use it. Otherwise you can create one using the following command, substituting
    your own name for `bucketname`. Note that S3 bucket names need to be globally
    unique, across all AWS accounts, so you may need to try a few to get one that’s
    available:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我们需要在*S3* AWS服务中创建或识别一个*暂存桶*，以存储临时构建构件。如果您按照AWS的SAM CLI安装说明或已知道当前AWS账户中有这样一个存储桶可用，请随意使用。否则，您可以使用以下命令创建一个，将自己的名称替换为`bucketname`。请注意，S3存储桶名称需要在所有AWS账户中全局唯一，因此您可能需要尝试几个名称以找到一个可用的。
- en: '[PRE9]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once you’ve done this successfully, note this bucket name—we’ll be using it
    a lot throughout the rest of the book and will refer to it as `$CF_BUCKET`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，请记录下这个存储桶名称——我们在本书的后续部分会经常使用它，并将其称为`$CF_BUCKET`。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Wherever you see `$CF_BUCKET` from now on, use the bucket name that you just
    created. Why `CF`? That stands for *CloudFormation*, which we’ll explain in [Chapter 4](ch04.html#ch04).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，无论何时看到`$CF_BUCKET`，请使用刚刚创建的存储桶名称。为什么叫`CF`？这代表*CloudFormation*，我们将在[第 4 章](ch04.html#ch04)中详细解释。
- en: Alternatively, if you’re more shell-script-savvy, assign this bucket name to
    a shell variable named `CF_BUCKET`, and then you can verbatim use the references
    to `$CF_BUCKET`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您更熟悉Shell脚本，可以将此存储桶名称分配给名为`CF_BUCKET`的Shell变量，然后您可以直接使用对`$CF_BUCKET`的引用。
- en: 'With the S3 bucket ready, we can create our Lambda function. Run the following
    (after running **`mvn package`**):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好S3存储桶后，我们可以创建Lambda函数。运行以下命令（在运行**`mvn package`**之后）：
- en: '[PRE10]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Again, don’t worry too much for now what this all means—we’ll explain it later.
    If this worked correctly, the console output should end with the following (although
    your region may be different):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不要过多关注这些内容的含义——我们稍后会进行解释。如果操作正确，控制台输出应以以下内容结尾（尽管您的区域可能不同）：
- en: '[PRE11]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This means that your function is deployed and ready to run, so let’s do that.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您的函数已部署并准备就绪，现在让我们运行它。
- en: Running the Lambda function
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行Lambda函数
- en: 'Go back to the Functions list in the Lambda web console, and you should now
    see two functions listed: the original `HelloWorld` and a new one with a name
    that will be something like `HelloWorldLambdaJava-HelloWorldLambda-YF5M2KZHXZF5`.
    If you don’t see the new Java one, make sure you have your regions in sync between
    the terminal and the web console.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Lambda Web控制台中的函数列表，您现在应该可以看到列出了两个函数：原始的`HelloWorld`和一个新的函数，其名称可能类似于`HelloWorldLambdaJava-HelloWorldLambda-YF5M2KZHXZF5`。如果没有看到新的Java函数，请确保您的终端和Web控制台的区域设置是同步的。
- en: Click through to the new function and take a look at the configuration screen.
    You’ll see that the source code is no longer available since the function was
    created with a compiled artifact.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 点击进入新的函数，查看配置屏幕。您会发现，由于函数是使用编译后的构件创建的，因此源代码已不再可用。
- en: 'To test this function, we need to create a new test event. Click *Test* again,
    and on the *Configure test event* screen ([Figure 2-11](#configure-java-lambda-test-event)),
    give the event name `HelloWorldJavaEvent`. In the actual event body section, enter
    the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此函数，我们需要创建一个新的测试事件。再次点击*Test*，在*配置测试事件*屏幕上（[图 2-11](#configure-java-lambda-test-event)），给事件命名为`HelloWorldJavaEvent`。在实际事件主体部分，输入以下内容：
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![images/ch02_image11.png](assets/awsl_0211.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image11.png](assets/awsl_0211.png)'
- en: Figure 2-11\. Configure test event for Java Lambda function
  id: totrans-163
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-11\. 配置Java Lambda函数的测试事件
- en: Click *Create* to save the test event.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*创建*以保存测试事件。
- en: This should take you back to the main Lambda screen, with the new test event
    selected (if it isn’t, select it manually). Click *Test*, and your Lambda function
    will be executed! (See [Figure 2-12](#java-lambda-hello-world-execution-result).)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您回到主要的Lambda屏幕，并选择新的测试事件（如果没有，请手动选择）。点击*Test*，您的Lambda函数将被执行！（参见[图 2-12](#java-lambda-hello-world-execution-result)。）
- en: '![images/ch02_image12.png](assets/awsl_0212.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![images/ch02_image12.png](assets/awsl_0212.png)'
- en: Figure 2-12\. Result for Hello World in Java
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-12. Java中Hello World的结果
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, you learned how to sign in to the AWS Web Console and pick
    a region. Then you created and ran your first Lambda function, via the web console.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何登录AWS Web控制台并选择一个区域。然后，通过Web控制台创建并运行了您的第一个Lambda函数。
- en: You also prepared your local environment for Lambda development by setting up
    the AWS CLI, Java, Maven, and the AWS SAM CLI. You learned the basics of developing
    Lambda functions in Java by creating a project in your development environment,
    building it, and deploying it using Amazon’s SAM tooling. Finally, you now understand
    how to perform simple testing of Lambda functions by simulating events using the
    web console’s test event mechanism.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你还通过设置AWS CLI、Java、Maven和AWS SAM CLI为Lambda开发准备了本地环境。你通过在开发环境中创建项目、构建项目并使用Amazon的SAM工具部署项目，学习了用Java开发Lambda函数的基础知识。最后，你现在了解如何通过模拟事件使用Web控制台的测试事件机制来进行Lambda函数的简单测试。
- en: In the next chapter, we’ll start taking a look at how Lambda works, and the
    ways that impacts how you write Lambda code.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始研究Lambda的工作原理以及这些原理对Lambda代码编写方式的影响。
- en: Exercises
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: If you haven’t run through the step-by-step descriptions in this chapter, then
    it’s worth doing that now since it’s a good way to validate your environment.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有按照本章的逐步说明进行操作，那么现在进行操作是很值得的，因为这是验证您环境的好方法。
- en: Create a new version of the Java Lambda function with slightly different code,
    by using a different `stack-name` value at `sam deploy` time. Note how you can
    select between these functions in the web console.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sam deploy`时，通过使用不同的`stack-name`值，创建一个具有稍微不同代码的新版本Java Lambda函数。注意您如何在Web控制台中选择这些函数之间的区别。
