- en: Chapter 10\. Continuous Deployment Patterns and Antipatterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。持续部署模式和反模式
- en: Stephen Chin
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂芬·钱
- en: Baruch Sadogursky
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 巴鲁克·萨多古尔斯基
- en: Learn from the mistakes of others. You can’t live long enough to make them all
    yourself.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从他人的错误中学习。你活不到足够长的时间来犯所有错误。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Eleanor Roosevelt
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 埃莉诺·罗斯福
- en: In this chapter, we will give you the patterns for continuous deployment that
    you need to be successful with implementing DevOps best practices in your organization.
    It is important to understand the rationale for continuous updates to be able
    to convince others in your organization about the change needed to improve your
    deployment process.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍持续部署的模式，这些模式对于在组织中成功实施 DevOps 最佳实践至关重要。了解持续更新的理由对于能够说服组织中的其他人进行必要的变革以改善部署过程至关重要。
- en: We will also give you plenty of antipatterns from companies that have failed
    to adopt continuous update best practices. It is good to learn from the failures
    of others, and plenty of recent examples exist in the high technology industry
    of what not to do and the consequences of ignoring best practices.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将给您介绍来自未能采纳持续更新最佳实践的公司的大量反模式。从他人的失败中学习是很好的，高科技行业中存在许多最近的例子，告诉我们不应该做什么，以及忽视最佳实践的后果。
- en: After completing this chapter, you will be armed with knowledge of seven best
    practices of continuous updates that you can start using today in order to join
    [the top 26% of DevOps “Elite Performers” of the software industry](https://oreil.ly/9MMwZ).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将掌握七个持续更新的最佳实践，您可以立即开始使用，以加入软件行业的顶级 26% 的 DevOps “精英表现者”。
- en: Why Everyone Needs Continuous Updates
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么每个人都需要持续更新
- en: Continuous updates are no longer an optional part of a software development
    but are a best practice to be adopted by any major project. Planning for continuous
    delivery of updates is just as important as the functional requirements of the
    project and requires a high level of automation to execute on reliably.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 持续更新不再是软件开发的可选部分，而是任何重要项目都应该采纳的最佳实践。规划持续交付更新与项目的功能需求一样重要，并且需要高水平的自动化来可靠执行。
- en: It was not always this way. Historically, software was delivered on a much lower
    cadence and received only critical updates. Also, installation of updates was
    often a manual and error-prone process that involved tweaking of scripts, data
    migration, and significant downtime.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 并不总是这样的。从历史上看，软件交付的频率要低得多，只收到关键更新。此外，更新的安装通常是一个手动且容易出错的过程，涉及脚本调整、数据迁移和显著的停机时间。
- en: This has all changed in the past decade. Now end users expect new features to
    be added constantly, which is driven by their experience with consumer devices
    and continuously updated applications. Also, the business risk associated with
    deferring critical updates is significant, as security researchers constantly
    uncover new exploits that can be used to compromise your system unless it is patched.
    Finally, continually updated software has become a business expectation in the
    cloud age, as the entire infrastructure stack is constantly being updated to improve
    security, often with the requirement that you also update your application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年中，这一切都发生了变化。现在，最终用户期望不断添加新功能，这是由他们对消费设备和持续更新应用程序的体验驱动的。此外，推迟关键更新所带来的业务风险很大，因为安全研究人员不断发现可以用来
    compromise 你的系统的新漏洞，除非进行修补。最后，在云时代，不断更新的软件已经成为业务的期望，因为整个基础设施栈都在不断更新以提高安全性，通常要求你也更新你的应用程序。
- en: Not all software projects have been as quick to adopt continuous update strategies,
    especially in industries that are used to longer technology adoption cycles. However,
    the widespread use of common hardware architectures and open source technologies
    means that these projects are at an equal risk of exposure from critical vulnerabilities.
    When exposed, this can lead to catastrophic failures that are difficult or impossible
    to recover from. Like any other software, open source projects have bugs and security
    vulnerabilities, and those are fixed and patched faster than in proprietary projects,
    but if the organization won’t update, what good will the patches do?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有软件项目都能迅速采纳持续更新策略，特别是在习惯较长技术采纳周期的行业。然而，常见硬件架构和开源技术的广泛使用意味着这些项目同样面临关键漏洞的风险。一旦曝光，这可能导致难以或无法恢复的灾难性故障。像任何其他软件一样，开源项目存在漏洞和安全性问题，这些问题被修复和补丁化速度要比专有项目快，但如果组织不进行更新，这些补丁又有何作用呢？
- en: In the next few sections, we will dig into the motivation for continuous updates
    in more detail. If you do not already have a continuous update strategy, the material
    in this chapter will help you convince others in your organization to adopt one.
    If you have already embraced continuous updates, you will be armed with knowledge
    to reap the business benefits of having infrastructure and DevOps processes superior
    to those of your competitors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将更详细地探讨持续更新的动机。如果您尚未拥有持续更新策略，本章节的内容将帮助您说服组织中的其他人采纳这一策略。如果您已经采用了持续更新，您将具备知识来获得比竞争对手更优越的基础设施和DevOps流程所带来的商业利益。
- en: User Expectations on Continuous Updates
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对持续更新的用户期望
- en: The expectations of end users on release cadence of new features has dramatically
    shifted in the last decade. This is driven by a change in the way features and
    updates are delivered on consumer devices, but translates to similar expectations
    on other software platforms, even in the enterprise. Forcing users to wait for
    a long release cycle or to perform a costly migration to take advantage of new
    features will result in dissatisfied users and put you at a competitive disadvantage.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最近十年间，用户对新功能发布节奏的期望发生了显著变化。这是由消费设备上功能和更新交付方式的改变驱动的，但也反映在其他软件平台上，甚至包括企业级。强迫用户等待漫长的发布周期或进行昂贵的迁移以利用新功能，将导致用户不满，并使您处于竞争劣势。
- en: This change in user expectations can be seen in several consumer industries,
    including cell phones. When mobile communication first started to gain popularity,
    Nokia was one of the dominant hardware manufacturers of 2G cell phones. While
    primitive by today’s standards, the phones had excellent hardware design with
    good voice quality, tactile buttons, and rugged design.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用户期望的变化可以在几个消费行业中看到，包括手机行业。当移动通信开始流行时，诺基亚是2G手机的主要硬件制造商之一。尽管按照今天的标准来看有些原始，这些手机具有出色的硬件设计，声音质量好，有触感按钮和坚固的设计。
- en: Small-form-factor mobile devices such as the Nokia 6110 accelerated adoption
    of cellular technology, but the software on these devices and users’ ability to
    update them were extremely poor. This was a common problem with early consumer
    device companies in that they considered themselves hardware companies first and
    were slow to adopt modern practices in software development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 诺基亚6110等小型移动设备加速了蜂窝技术的采用，但这些设备上的软件及用户更新能力极为不足。这是早期消费设备公司的共同问题，它们首先将自己视为硬件公司，而在软件开发上采用现代实践的步伐较慢。
- en: Like many emerging technologies, the software shipped with Nokia phones was
    bare-bones and buggy, requiring patches and updates to remain usable. While Nokia
    offered a data cable, this was limited to basic operations like transferring contacts
    from the device to a computer, but didn’t allow maintenance features such as performing
    firmware updates. To get a feature update on your phone that contained important
    patches and mission-critical features (like the Snake game), you would need to
    take your phone into a service center to update your device.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多新兴技术一样，诺基亚手机附带的软件非常基础且存在缺陷，需要补丁和更新才能保持可用。虽然诺基亚提供了数据线，但其功能仅限于从设备传输联系人到计算机等基本操作，并不允许像执行固件更新这样的维护特性。要在手机上获得包含重要补丁和关键功能（如“贪吃蛇”游戏）的功能更新，您需要将手机带到服务中心进行设备更新。
- en: It wasn’t until the iPhone came out in 2007 that the phone industry took a software-first
    approach to mobile phone design. With the ability to update the firmware and entire
    operating system from an attached computer and later over-the-air updates, Apple
    could rapidly deploy new features to existing devices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 直到`2007年`iPhone推出，手机行业才开始采用软件优先的移动手机设计方法。有了更新固件和整个操作系统的能力，从附加的计算机和后来的空中更新，Apple能够迅速为现有设备部署新功能。
- en: In 2008, Apple announced the App Store, which created a vibrant app ecosystem
    and laid the foundation for modern store features like security sandboxing and
    automatic application updates, which we will come back to later in this chapter
    with a longer case study. With the release of iOS 5 in 2011, Apple embraced over-the-air
    updates; you no longer even needed a computer to install the latest version of
    the operating system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`2008年`，Apple宣布推出App Store，创建了一个充满活力的应用生态系统，并为现代商店功能如安全沙箱和自动应用程序更新奠定了基础，我们将在本章的后续内容中以更长的案例研究回顾。随着`2011年`iOS
    5的发布，Apple采纳了空中更新；你甚至不再需要计算机来安装操作系统的最新版本。'
- en: Now the process of updating software on your phone is seamless and automated
    to the point where most consumers have no idea which version of the operating
    system or individual applications they are running. As an industry, we have trained
    the general public that continuous updates are not only expected, but required
    for functionality, productivity, and security.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，手机上软件更新的过程已经无缝自动化，以至于大多数消费者都不知道他们运行的操作系统或个别应用程序的版本。作为一个行业，我们已经教育普通大众，连续更新不仅是期望的，而且对功能、生产力和安全性都是必需的。
- en: This model of continuous updates has become the norm for consumer devices of
    all types, including smart TVs, home assistants, and even newer self-updating
    routers. While the car industry has been slow to adopt a continuous update strategy,
    Tesla is pushing the industry with biweekly updates to your vehicle right on your
    home network. No longer do you need to drive to a vehicle service center for a
    recall or critical software update.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 连续更新的这种模式已经成为包括智能电视、家庭助手甚至更新自身的最新路由器在内的所有类型消费设备的标准。尽管汽车行业在采用连续更新策略方面进展缓慢，但特斯拉通过每两周在你家庭网络上更新车辆正在推动这一行业。你再也不需要驾车去车辆服务中心进行召回或关键软件更新。
- en: Security Vulnerabilities Are the New Oil Spills
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全漏洞现在是新的油污泄漏
- en: Oil spills have had a tremendously detrimental effect on the environment over
    the past 50 years and continue to be an ongoing crisis. When running smoothly,
    oil drilling rigs are immensely profitable, but when accidents or natural disasters
    occur (particularly at sea, where environmental damage is amplified), the cost
    can be enormous. For large companies like BP, which can afford to pay or set aside
    tens of billions of dollars for fines, legal settlements, and cleanups, oil spills
    are just a cost of doing business. However, for drilling operations run by smaller
    companies, a single oil spill can spell financial disaster and put companies out
    of business with no means to address the aftermath.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 过去50年来，石油泄漏对环境造成了极大的破坏，并且仍然是持续发生的危机。当油钻平台正常运行时，它们带来巨大的利润，但是当事故或自然灾害发生时（尤其是在海上，环境破坏程度被放大时），成本可能是巨大的。对于像BP这样的大公司来说，他们能够支付或预留数百亿美元用于罚款、法律和清理工作，石油泄漏只是业务成本的一部分。然而，对于由较小公司运营的钻井作业来说，单一的石油泄漏可能意味着财务灾难，并且没有任何手段来解决事后的问题。
- en: This was the case for Taylor Energy, which lost an oil platform off the coast
    of Louisiana to Hurricane Ivan in 2004 and was [leaking 300 to 700 barrels per
    day](https://oreil.ly/3LOtN). This disaster continues to haunt Taylor Energy,
    which is both the recipient and instigator of multiple lawsuits surrounding the
    oil spill and ongoing containment efforts. Taylor Energy has already spent $435
    million to reduce the oil leakage in what has become the longest oil spill in
    US history, with the potential to keep leaking for the next century.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对Taylor Energy来说也是如此，他们在`2004年`由于`Hurricane Ivan`失去了路易斯安那州海岸的一个石油平台，并且每天泄漏[300
    to 700 barrels](https://oreil.ly/3LOtN)。这场灾难继续困扰着Taylor Energy，成为围绕石油泄漏和持续防止努力的多起诉讼的原告和被告。Taylor
    Energy已经花费了4.35亿美元来减少这场已成为美国历史上最长的石油泄漏的石油泄漏，未来一个世纪仍有可能继续泄漏。
- en: This is analogous to the risk that software vulnerabilities pose to the technology
    industry. Software systems have become increasingly complex, which means that
    there are more dependencies on open source software and third-party libraries,
    and it’s a good thing. The problem is, old-school security audit approaches don’t
    work anymore, making it virtually impossible to guarantee that a system is free
    of security vulnerabilities.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于软件漏洞对技术行业构成的风险。软件系统变得日益复杂，这意味着更多依赖于开源软件和第三方库，这本身是件好事。问题在于，老式的安全审计方法已经不再有效，几乎无法保证系统没有安全漏洞。
- en: According to [the 2021 “Open Source Security and Risk Analysis Report” by Synopsis](https://oreil.ly/TFcnJ),
    open source software is used in 99% of enterprise projects, and 84% of those projects
    contained at least one public vulnerability, with an average of 158 vulnerabilities
    found per codebase.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[2021年Synopsis发布的《开源安全与风险分析报告》](https://oreil.ly/TFcnJ)，开源软件在99%的企业项目中被使用，其中84%的项目至少包含一个公共漏洞，平均每个代码库发现158个漏洞。
- en: So how bad are these vulnerabilities that plague commercial codebases? The top
    10 vulnerabilities allow an attacker to obtain sensitive information like authentication
    tokens and user session cookies, execute arbitrary code in the client browser,
    and trigger denial-of-service conditions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这些困扰商业代码库的漏洞到底有多糟糕呢？前十大漏洞使攻击者可以获取敏感信息，如认证令牌和用户会话Cookie，执行客户端浏览器中的任意代码，并触发拒绝服务条件。
- en: 'Organizations’ reactions to security vulnerabilities can be organized into
    three discrete steps that have to occur sequentially in order to respond:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对安全漏洞的组织反应可以分为三个离散的步骤，这些步骤必须按顺序进行以作出响应：
- en: 'Identify: first the organization must realize that a security issue exists
    and is currently or can potentially be exploited by an attacker.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 辨识：首先，组织必须意识到存在安全问题，并且这些问题当前或潜在地可以被攻击者利用。
- en: 'Fix: once a security issue is identified, the development team must come up
    with a software fix to patch the issue.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复：一旦确认存在安全问题，开发团队必须提出软件修复程序来修补问题。
- en: 'Deploy: the final step is to deploy the software fix that addresses the security
    issue, often to a large set of end users or target devices that are affected by
    the vulnerability.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署：最后一步是部署解决安全问题的软件修复程序，通常是针对受漏洞影响的大量终端用户或目标设备。
- en: 'Going back to the Taylor Energy oil spill, you can see how difficult these
    steps are in the physical world:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回到泰勒能源油污泄漏事件，您可以看到这些步骤在现实世界中有多困难：
- en: Identify—six years
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 辨识—六年
- en: The hurricane occurred in 2004, but it wasn’t until six years later in 2010
    that researchers observed a persistent oil slick at the Taylor site and brought
    it to public attention.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 飓风发生在2004年，但直到六年后的2010年，研究人员在泰勒地点观察到持续存在的油污迹象，并引起了公众的关注。
- en: Fix—eight years
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复—八年
- en: The Couvillion Group won a bid for a containment system in 2018.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Couvillion集团在2018年赢得了一个遏制系统的投标。
- en: Deploy—five months
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署—五个月
- en: In April 2019, the Couvillion Group deployed a shallow 200-ton steel box containment
    system. While not a permanent fix, this containment system has been collecting
    about 1,000 gallons of resalable oil per day and reduced the visible pollutants
    on the ocean surface.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2019年4月，Couvillion集团部署了一个浅层200吨钢箱遏制系统。虽然不是永久性解决方案，但这个遏制系统每天收集约1000加仑可以重新销售的油，并减少了海洋表面可见的污染物。
- en: Compared to a physical disaster like an oil spill, you would think that security
    vulnerabilities would be relatively easy to identify, fix, and deploy. However,
    as we will see in the following case studies, software vulnerabilities can be
    just as damaging and economically costly, and are by far much more common.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与物理灾难如油污泄漏相比，您可能认为安全漏洞相对容易识别、修复和部署。然而，正如我们将在以下案例研究中看到的那样，软件漏洞可能同样具有破坏性和经济成本高昂，并且远比物理灾害更为常见。
- en: UK hospital ransomware
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 英国医院勒索软件
- en: Let’s look at another security breach. [In 2017, a worldwide cyberattack](https://oreil.ly/A7sPK)
    was launched that encrypted the hacked computers and required a bitcoin “ransom”
    payment to recover the data. This attack had been exploited via the EternalBlue
    exploit on the Windows Server Message Block (SMB) service that had been previously
    discovered by the US National Security Agency (NSA) and leaked a year prior to
    the attack.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看另一个安全漏洞。[2017年，发生了一次全球性的网络攻击](https://oreil.ly/A7sPK)，这次攻击加密了被黑客攻击的计算机，并要求支付比特币“赎金”以恢复数据。这次攻击利用了美国国家安全局（NSA）一年前泄露的Windows
    Server Message Block（SMB）服务上的EternalBlue漏洞。
- en: Upon infection, the virus attempted to replicate itself on the network and encrypted
    critical files, preventing their access, presenting a ransom screen. Microsoft
    had released patches for older versions of Windows that were affected by this
    exploit, but many systems were not updated because of poor maintenance or a requirement
    for 24/7 operation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦感染，病毒会尝试在网络上复制自身并加密关键文件，阻止其访问，并显示勒索屏幕。微软已经发布了针对此漏洞影响的较旧Windows版本的补丁，但由于维护不当或需要24/7运行的要求，许多系统没有更新。
- en: One organization critically impacted by this ransomware attack was the United
    Kingdom National Health Service (NHS) hospital system. Up to [70,000 devices](https://oreil.ly/J0NLy)
    on its network—including computers, MRI scanners, blood-storage refrigerators,
    and other critical systems—were affected by the virus. This also involved diversion
    of emergency ambulance services to hospitals and at least 139 patients who had
    an urgent referral for cancer that got cancelled.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 受这次勒索软件攻击严重影响的一个组织是英国国家医疗服务体系（NHS）医院系统。其网络上的多达[70,000台设备](https://oreil.ly/J0NLy)，包括计算机、MRI扫描仪、血液存储冰箱和其他关键系统，都受到了病毒的影响。这还涉及将紧急救护服务转移到医院以及至少139名因癌症急诊转诊被取消的患者。
- en: The WannaCry ransomware attack resulted in an estimated [19,000 cancelled appointments
    and cost approximately £19 million in lost output and £73 million in IT costs](https://oreil.ly/hx7OW)
    to restore systems and data in the weeks after the attack. All of the affected
    systems were running an unpatched or unsupported version of Windows that was susceptible
    to the ransomware. The majority were on Windows 7, but many were also on Windows
    XP, which had been unsupported since 2014—a full three years prior to the attack.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: WannaCry勒索软件攻击导致估计[19,000个取消预约，并造成大约1900万英镑的产出损失和7300万英镑的IT成本](https://oreil.ly/hx7OW)，用于在攻击后几周内恢复系统和数据。所有受影响的系统都在运行一个未打补丁或不支持的Windows版本上，这使得这些系统容易受到勒索软件的攻击。大多数受影响的系统在Windows
    7上，但也有很多在2014年停止支持的Windows XP上——比攻击发生前整整三年。
- en: 'If we frame this with our vulnerability mitigation steps, we get the following
    timelines and impacts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用我们的漏洞缓解步骤来框定这个问题，我们可以得到以下的时间表和影响：
- en: Identify—one year
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 辨识——一年
- en: Both the existence of the vulnerability and an available patch were available
    for a year preceding the incident. NHS IT staff didn’t realize its existence until
    the attack was launched on the world and affected the NHS.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 漏洞的存在和可用的补丁在事件发生前一年就已经存在。英国国家医疗服务体系（NHS）的IT工作人员直到世界范围的攻击对NHS造成影响后才意识到其存在。
- en: Fix—existing
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复——现有
- en: Since the fix is simply to upgrade or patch systems with an existing fix, this
    was immediately available by the time the vulnerability was identified.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于修复方法只需升级或打补丁系统以应用现有的修复程序，一旦漏洞被识别出来，修复措施就立即可用。
- en: Deploy—multiple years
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署——多年
- en: While critical systems were brought back online quickly, there were enough affected
    systems that it took several years for the NHS to fully upgrade and patch affected
    systems with multiple failed security audits.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然关键系统很快恢复在线，但受影响的系统足够多，以至于英国国家医疗服务体系（NHS）花了几年时间才完全升级和打补丁受影响的系统，并且进行了多次失败的安全审计。
- en: In this case, the security breach was at the operating system level. Assuming
    you are following industry best practices and keeping your operating system under
    maintenance and continually patched, you might believe you are safe. But what
    about application-level security vulnerabilities? This is by far the most common
    type of security vulnerability and is equally easy to exploit by an attacker—as
    happened to Equifax.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，安全漏洞发生在操作系统层面。假设您遵循行业最佳实践，并保持操作系统的维护和持续打补丁，您可能认为自己是安全的。但是关于应用程序级别的安全漏洞呢？这是目前最常见的安全漏洞类型，同样容易被攻击者利用——正如发生在Equifax的情况一样。
- en: Equifax security breach
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Equifax安全漏洞
- en: The Equifax security breach is a textbook example of an application-level security
    vulnerability causing massive financial damage to a high-tech company. From March
    through July of 2017, hackers had unrestricted access to Equifax’s internal systems
    and were able to extract personal credit information for half of the total US
    population, or 143 million consumers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Equifax安全泄露是一个应用级安全漏洞给高科技公司造成巨大财务损失的典型案例。2017年3月至7月期间，黑客无限制地访问了Equifax的内部系统，并能够提取美国总人口一半，即1.43亿消费者的个人信用信息。
- en: This had the potential for massive identity theft, but none of the stolen Equifax
    personal data appeared on the dark web, which is the most direct monetization
    strategy. It is instead believed the data was used for international espionage
    by the Chinese government. In February 2020, four Chinese-backed military hackers
    were indicted in connection with the Equifax security breach.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能导致大规模身份盗窃，但没有任何被盗的Equifax个人数据出现在暗网上，这是最直接的货币化策略。相反，据信数据被中国政府用于国际间谍活动。2020年2月，四名支持的军事黑客因涉及Equifax安全泄露事件而被起诉。
- en: For a credit agency to have a security vulnerability of this magnitude, the
    damage to its brand and reputation is incalculable. However, it is known that
    Equifax spent $1.4 billion on cleanup costs and an additional $1.38 billion to
    resolve consumer claims. Also, all of the upper executives at Equifax were quickly
    replaced after the incident.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个信用评级机构来说，有这样一个规模的安全漏洞，其品牌和声誉的损害是无法计算的。然而，已知Equifax在清理成本上花费了14亿美元，并额外支付了13.8亿美元来解决消费者索赔。此外，在事件发生后，Equifax的所有高级管理人员都很快被替换。
- en: Multiple compounded security vulnerabilities led to this breach. The first and
    most egregious was an unpatched security vulnerability in Apache Struts that allowed
    hackers to gain access to Equifax’s dispute portal. From here, they moved to multiple
    other internal servers to access databases containing information on hundreds
    of millions of people.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 多个复合安全漏洞导致了这次数据泄露。最初且最为严重的是Apache Struts中一个未打补丁的安全漏洞，允许黑客访问Equifax的争议门户。从这里，他们进入了多个其他内部服务器，访问了包含数亿人信息的数据库。
- en: 'The second major security vulnerability was an expired public-key certificate
    that impeded the internal system that inspects encrypted traffic exiting the Equifax
    network. The certificate had expired about 10 months before the breach occurred
    and was renewed only on July 29, at which time Equifax became immediately aware
    of the obfuscated payloads being used by the attacker to extricate sensitive data.
    Here’s the Equifax timeline:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个重要的安全漏洞是一个已过期的公钥证书，阻碍了内部系统检查Equifax网络出口的加密流量。证书在泄露事件发生前大约10个月已经过期，直到7月29日才更新，Equifax才立即意识到攻击者正在使用混淆的有效载荷提取敏感数据。以下是Equifax的时间轴：
- en: Identify—five months
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别——五个月
- en: The initial security breach occurred on March 10, and while the attackers did
    not actively start exploiting this security breach until May 13, they had access
    to the system for almost five months before Equifax became aware of the data exfiltration.
    It wasn’t until July 29, when Equifax fixed its traffic-monitoring system, that
    it became aware of the breach.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初始安全漏洞发生在3月10日，虽然攻击者直到5月13日才开始积极利用这个安全漏洞，但他们在Equifax察觉数据外泄之前就已经进入了系统，几乎有五个月的时间。直到7月29日，Equifax修复了其流量监控系统，才意识到这次泄露事件。
- en: Fix—existing
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复——现有
- en: The Apache Struts security vulnerability [(CVE-2017-5638)](https://oreil.ly/FiWeh)
    was published on March 10, 2017 and fixed by Apache Struts 2.3.32 that was released
    four days prior to the CVE disclosure on March 6.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Apache Struts安全漏洞 [(CVE-2017-5638)](https://oreil.ly/FiWeh) 于2017年3月10日发布，由Apache
    Struts 2.3.32在CVE公开披露前四天的3月6日发布修复。
- en: Deploy—one day
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署——一天
- en: The vulnerability was patched on July 30, one day after Equifax became aware
    of the breach.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 漏洞修补是在7月30日进行的，即Equifax意识到泄露事件的第二天。
- en: The Equifax breach is particularly scary since it started with a vulnerability
    in a widely used Java library that affects many systems across the web. Even a
    year after the security vulnerability was identified, researchers at the SANS
    Internet Storm Center [found evidence of exploitation attempts](https://oreil.ly/ZCbXe)
    looking for unpatched servers or new deployments that had not been secured. Continuous
    updates can help.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Equifax的数据泄露尤其令人担忧，因为它始于一个广泛使用的Java库中的漏洞，影响了Web上的许多系统。即使在识别出安全漏洞一年后，SANS互联网风暴中心的研究人员
    [发现了针对未打补丁服务器或未进行安全保护的新部署的攻击尝试](https://oreil.ly/ZCbXe)。持续更新可以有所帮助。
- en: Widespread chipset vulnerabilities
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广泛存在的芯片组漏洞
- en: Even if you are keeping up on security vulnerabilities in the application and
    operating system level, another class of vulnerabilities can affect you at the
    chipset and hardware level. The most widespread recent example of this are the
    [Meltdown and Spectre exploits](https://oreil.ly/z6E7i) discovered by Google security
    researchers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您在应用程序和操作系统级别上跟上了安全漏洞，另一类漏洞也可能影响您的芯片组和硬件水平。最近最普遍的例子就是由Google安全研究人员发现的 [Meltdown和Spectre漏洞](https://oreil.ly/z6E7i)。
- en: These flaws are so fundamental to the hardware platforms we use to run everything
    from cloud workloads to mobile devices that security researchers called them catastrophic.
    Both exploits take advantage of the same underlying vulnerabilities in how speculative
    execution and caching interact to get access to data that should be protected.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺陷对我们用来运行从云工作负载到移动设备的硬件平台如此基本，以至于安全研究人员将其称为灾难性。这两种利用都利用了在推测执行和缓存如何交互以获取应该受保护的数据的相同根本漏洞。
- en: In the case of Meltdown, a malicious program can access data across the machine
    that it should not have access to, including processes with administrative privileges.
    This is an easier attack to exploit since it requires no knowledge of the programs
    you are trying to attack, but also it is easier to patch at the operating system
    level.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meltdown的情况下，恶意程序可以访问机器上不应该访问的数据，包括具有管理权限的进程。这是一种更容易利用的攻击，因为它不需要了解您试图攻击的程序，但在操作系统级别进行补丁也更容易。
- en: Upon the announcement of the Meltdown vulnerability, the latest versions of
    Linux, Windows, and Mac OS X all had security patches to prevent Meltdown from
    being exploited with some performance loss. In October 2018, [Intel announced
    hardware fixes for its newer chips](https://oreil.ly/bvCuh) (including Coffee
    Lake Refresh, Cascade Lake, and Whiskey Lake) that address various variants of
    Meltdown.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在公布Meltdown漏洞后，最新版本的Linux、Windows和Mac OS X都发布了安全补丁，以防止Meltdown被利用，但会有一定的性能损失。2018年10月，[英特尔宣布为其更新的芯片](https://oreil.ly/bvCuh)（包括Coffee
    Lake Refresh、Cascade Lake和Whiskey Lake）提供了硬件修复，以解决Meltdown的各种变体。
- en: In contrast, exploiting the Spectre vulnerability requires specific information
    about the process being attacked, making it a more difficult vulnerability to
    leverage. However, it is also much trickier to patch, which means that new exploits
    based on this vulnerability continue to be identified. Also it is more dangerous
    in cloud computing applications that use VMs, since it can be used to induce a
    hypervisor to provide privileged data to a guest operating system running on it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，利用Spectre漏洞需要关于正在攻击的进程的具体信息，使其成为更难以利用的漏洞。然而，补丁也更加棘手，这意味着基于这一漏洞的新攻击持续被发现。它在使用虚拟机的云计算应用中更加危险，因为它可以用来诱使超级管理程序向在其上运行的客户操作系统提供特权数据。
- en: The result is that Meltdown and particularly Spectre have opened up a new class
    of security vulnerabilities that break the principles of software security. It
    was assumed that if you built a system with the proper security protections in
    place and could fully verify the correctness of the source code and dependent
    libraries, that system should be secure. These exploits break this assumption
    by exposing side-channel attacks hiding in the CPU and underlying hardware that
    require further analysis and software and/or hardware fixes to mitigate.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，Meltdown和特别是Spectre打开了一个新的安全漏洞类别，违反了软件安全原则。人们曾经认为，如果您建立了一个拥有适当安全保护措施并且能够完全验证源代码和依赖库正确性的系统，那么该系统应该是安全的。这些利用漏洞通过暴露隐藏在CPU和底层硬件中需要进一步分析和软件和/或硬件修复的侧信道攻击，打破了这一假设。
- en: 'So getting back to our analysis for the general class of chipset side-channel
    attacks, here’s the timeline:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以回到我们对芯片组侧信道攻击一般类别的分析，这是时间线：
- en: Identify—as fast as possible
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽快识别
- en: While there are generalized fixes for Meltdown and Spectre, exploits can occur
    at any time based on the architecture of your application.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然对于Meltdown和Spectre有通用的修复方法，但基于您的应用程序架构，漏洞可能随时发生。
- en: Fix—as fast as possible
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽快修复
- en: A software fix for Spectre often involves specially crafted code to avoid either
    accessing or leaking information in misspeculation.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Spectre的软件修复通常涉及特别设计的代码，以避免在误执行中访问或泄漏信息。
- en: Deploy—as fast as possible
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽快部署
- en: Getting the fix into production quickly is the only way to mitigate damage.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽快将修复措施投入生产是减少损害的唯一方法。
- en: Of these three variables, the one that can most easily be shortened is the deployment
    time. If you do not already have a strategy for continuous updates, creating one
    will hopefully give you the impetus to start planning for faster and more frequent
    deployments.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个变量中，最容易缩短的是部署时间。如果您尚未制定持续更新的策略，创建一个策略将有望促使您开始计划更快速和更频繁的部署。
- en: Getting Users to Update
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导用户进行更新
- en: We have now hopefully convinced you that continuous updates are a good thing,
    from a feature/competitive standpoint as well as for security vulnerability mitigation.
    However, even if you deliver frequent updates, will end users accept and install
    them?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们希望已经说服您，无论从功能/竞争的角度还是从安全漏洞的缓解角度来看，持续更新都是一件好事。然而，即使您进行频繁的更新，最终用户是否会接受并安装它们呢？
- en: '[Figure 10-1](#user_model_for_updates) models the user flow for deciding whether
    to accept or reject an update.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 10-1](#user_model_for_updates) 模拟了决定接受或拒绝更新的用户流程。'
- en: '![Flow diagram showing user update flow](Images/dtjd_1001.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![显示用户更新流程的流程图](Images/dtjd_1001.png)'
- en: Figure 10-1\. User model for update acceptance
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-1\. 更新接受用户模型
- en: 'The first question for a user is whether they really want the update based
    on features and/or security fixes. Sometimes the model for update acceptance is
    not a binary decision, because there is a choice to stay on a maintenance line
    with patches for security, but delay major upgrades that provide larger features
    but are riskier. This is the model that Canonical uses for Ubuntu release: long-term
    support (LTS) releases come out once every two years, with public support for
    five years. If you prefer riskier, but more frequent, updates, interim releases
    occur every six months with shorter support periods.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户来说，第一个问题是基于功能和/或安全修复是否真的需要更新。有时，更新接受的模型不是一个二进制决策，因为可以选择在具有安全补丁的维护线上延迟主要升级，但是延迟提供更大功能但风险更高的主要升级。这是Canonical为Ubuntu发布使用的模型：长期支持（LTS）版本每两年发布一次，并获得五年公共支持。如果您喜欢更频繁但风险更高的更新，则每六个月会有中间版本发布，但支持周期较短。
- en: The second question is, how risky is the update? For security patches or minor
    upgrades, the answer is usually that it is low risk and safe to put in production
    with minimal testing. Typically, these changes are small, specifically designed
    to not touch any external or even internal APIs, and tested to make sure they
    address the security issue and don’t produce undesirable side effects before release.
    Ability to perform local rollbacks (more on them later in the chapter) mitigates
    the risk.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，更新有多大风险？对于安全补丁或小的升级，答案通常是低风险，可以在进行最小测试后放入生产环境。通常这些变更很小，专门设计为不触及任何外部甚至内部API，并经过测试以确保它们解决了安全问题，并且在发布之前不会产生不良副作用。可以执行本地回滚（本章后面将更详细介绍）以减少风险。
- en: Upgrading may also be safe when the party releasing the upgrade verifies that
    it is a safe upgrade, as shown in the third decision box of [Figure 10-1](#user_model_for_updates).
    This is the model for operating system upgrades, such as iOS, where significant
    changes cannot be individually verified to be non-breaking. The OS vendor has
    to spend a significant amount of time testing hardware combinations, working with
    application vendors to fix compatibility issues or helping them upgrade their
    apps, and performing user trials to see what issues happen during an upgrade.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布方验证升级是安全的时，升级也可能是安全的，就像[图 10-1](#user_model_for_updates) 的第三个决策框中所示那样。这是操作系统升级的模型，例如iOS，在这种情况下，不能单独验证重大变更是否不会破坏性地影响系统。操作系统供应商必须花费大量时间测试硬件组合，与应用程序供应商合作解决兼容性问题或帮助他们升级其应用程序，并进行用户试验以查看升级过程中可能出现的问题。
- en: Finally, if it is both risky and the party producing the release cannot verify
    the safety, it is up to the recipient of the upgrade to do verification testing.
    Unless it can be fully automated, this is almost always a difficult and costly
    process to undertake. If the upgrade cannot be proven to be safe and bug free,
    the release may get delayed or simply skipped over in the hopes that a later release
    will be more stable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果它既是有风险的，且发布方无法验证其安全性，那么就由升级的接收方进行验证测试。除非可以完全自动化，否则这几乎总是一个难以实施且昂贵的过程。如果无法证明升级是安全且无错误的，那么发布可能会被延迟或仅仅被跳过，希望稍后的发布版本会更加稳定。
- en: Let’s look at some real-world use cases and see their continuous update strategy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些真实的用例，并了解它们的持续更新策略。
- en: 'Case Study: Java Six-Month Release Cadence'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：Java六个月发布节奏
- en: Java has historically had very long release cycles between major versions, averaging
    from one to three years. However, the release frequency has been erratic and often
    delayed, such as for Java 7, which took almost five years to be released. The
    release cadence has continued to decline as the platform has grown, due to several
    factors such as security issues and the difficulty of running and automating acceptance
    tests.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Java在历史上拥有非常长的主要版本之间的发布周期，平均从一到三年不等。然而，发布频率一直不稳定且经常延迟，例如Java 7几乎花了五年时间才发布。随着平台的增长，发布节奏继续下降，由于诸如安全问题、运行和自动化验收测试的难度等多种因素。
- en: Starting with Java 9 in September of 2017, Oracle made the dramatic move to
    a six-month feature release cycle. These releases can contain new features and
    remove deprecated features, but the general pace of innovation was intended to
    stay constant. This means that each subsequent release should contain fewer features
    and less risk, making it easier to adopt. The actual adoption numbers of each
    JDK release are shown in [Figure 10-2](#java_adoption).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从2017年9月Java 9开始，Oracle进行了戏剧性的转变，转向了六个月的特性发布周期。这些发布可以包含新特性并删除不推荐使用的特性，但总体创新步伐旨在保持恒定。这意味着每个随后的发布应该包含更少的特性和更低的风险，从而更容易被采纳。每个JDK发布的实际采纳数据显示在[图
    10-2](#java_adoption)中。
- en: Given that 67% of Java developers never made it past Java 8, which came out
    in 2014, the new release model clearly has a problem! However, hidden under the
    data are a few issues.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于67%的Java开发者从未超越2014年发布的Java 8，新的发布模型显然存在问题！然而，在这些数据下隐藏着一些问题。
- en: First, the Java ecosystem can’t handle six-month releases. As we learned in
    [Chapter 6](ch06.xhtml#package_management), virtually all Java projects are dependent
    on a large ecosystem of libraries and dependencies. In order to upgrade to a new
    Java release, all of those dependencies need to be updated and tested against
    the new Java release. For large open source libraries and complex application
    servers, this is almost impossible to accomplish in a six-month time frame.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Java生态系统无法应对六个月的发布周期。正如我们在[第6章](ch06.xhtml#package_management)中了解到的那样，几乎所有Java项目都依赖于庞大的库和依赖项生态系统。为了升级到新的Java发布版本，所有这些依赖项都需要更新并针对新的Java发布版本进行测试。对于大型开源库和复杂应用服务器来说，几乎不可能在六个月的时间内完成这项工作。
- en: '![Graph showing percentage adoption of each Java release](Images/dtjd_1002.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![显示每个Java发布采用率的图表](Images/dtjd_1002.png)'
- en: Figure 10-2\. Developer adoption of recent Java releases^([1](ch10.xhtml#idm45310199916160))
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-2\. 开发者对最近的Java发布的采纳情况^([1](ch10.xhtml#idm45310199916160))
- en: To compound this, the OpenJDK support model provides public support for Java
    releases for only six months until the next feature release comes out. Even if
    you could upgrade every six months, you would be left without critical support
    and security patches, as detailed in [Stephen Colebourne’s blog](https://oreil.ly/Axfki).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更甚的是，OpenJDK支持模型仅为每个Java发布提供六个月的公共支持，直到下一个特性发布出现。即使您每六个月升级一次，您仍会缺少关键的支持和安全补丁，详细信息请参阅[Stephen
    Colebourne的博客](https://oreil.ly/Axfki)。
- en: The only exception to this is LTS releases that start with Java 11 and come
    every three years thereafter. These releases will get security patches and support
    from commercial JDK vendors such as Oracle, Red Hat, Azul, BellSoft, SAP, and
    others. Free distributions like AdoptOpenJDK and Amazon Corretto promise to provide
    Java releases and security patches at no cost. This is why Java 11 is the most
    popular release after Java 8 and none of the other six month releases have gained
    any traction.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的例外是从 Java 11 开始每三年发布的 LTS 版本。这些版本将获得来自商业 JDK 供应商（如 Oracle、Red Hat、Azul、BellSoft、SAP
    等）的安全补丁和支持。像 AdoptOpenJDK 和 Amazon Corretto 这样的免费分发承诺提供 Java 发布和安全补丁，无需支付任何费用。这就是为什么
    Java 11 是 Java 8 之后最流行的版本，并且其他六个月发布的版本都没有获得任何市场份额。
- en: However, in comparison to Java 8, Java 11 has not gained significant traction.
    The number of developers using Java 11, roughly two years after its release in
    September 2018, was 25%. In contrast, exactly two years after the release of Java
    8, the adoption was 64%, as shown in [Figure 10-3](#java_8_adoption). This comparison
    is also biased in favor of Java 11, because anyone who adopted Java 9 or 10 would
    likely have upgraded to Java 11, providing three full years of adoption growth.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与 Java 8 相比，Java 11 并未获得显著的市场份额。在 Java 11 自 2018 年 9 月发布两年后，使用 Java 11 的开发者比例为
    25%。相比之下，Java 8 发布两年后的采用率为 64%，如 [Figure 10-3](#java_8_adoption) 所示。这种比较也偏向于 Java
    11，因为任何采用了 Java 9 或 10 的人可能已经升级到 Java 11，并提供了三年的采用增长。
- en: '![Graph showing growth of Java 8 adoption](Images/dtjd_1003.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![显示 Java 8 采用率增长的图表](Images/dtjd_1003.png)'
- en: Figure 10-3\. Developer adoption of Java 8 two years after release^([2](ch10.xhtml#idm45310199906848))
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-3\. Java 8 发布两年后的开发者采用^[2](ch10.xhtml#idm45310199906848)
- en: This brings us to the second reason for the poor adoption of Java 9 and beyond,
    which is a poor value/cost trade-off. The main feature of Java 9 was the introduction
    of a new module system. The idea of a modular Java Platform was first suggested
    by [Mark Reinhold back in 2008](https://oreil.ly/22YFR) and took nine years to
    complete in the release of Java 9.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们带到 Java 9 及以后版本采用率低的第二个原因，即价值成本比较差。Java 9 的主要特性是引入了一个新的模块化系统。Java 平台模块化的想法最早由
    [Mark Reinhold 在 2008 年提出](https://oreil.ly/22YFR)，并在 Java 9 的发布中经历了九年的完善。
- en: Because of the complexity and disruptiveness of this change, it was delayed
    several times, missing both Java 7 and Java 8 as initial targets. Also Java 9
    was highly controversial on release because it was initially incompatible with
    OSGi, a competing module system released by the Eclipse Foundation targeted at
    enterprise applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这一变化的复杂性和颠覆性，它被推迟了多次，错过了 Java 7 和 Java 8 最初的目标。此外，Java 9 在发布时非常有争议，因为它最初与由
    Eclipse Foundation 发布的竞争模块系统 OSGi 不兼容，该系统针对企业应用。
- en: But perhaps the bigger issue with modularity is that no one really was asking
    for it. Modularity has many benefits, including better library encapsulation,
    easier dependency management, and smaller packaged applications. However, to fully
    realize these benefits, you need to spend a lot of work rewriting your application
    to be fully modularized. Second, you need all of your dependencies to be packaged
    as modules, which has taken a while for open source projects to embrace. Finally,
    the practical benefits for most enterprise applications are small, so even after
    upgrading to a module-enabled release, it is common practice to disable modularity
    and go back to the classpath model of Java 8 and prior. [Figure 10-4](#java_8_user_model_for_updates)
    shows the simplified developer thought process on upgrading to Java 9 and beyond.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 但或许模块化的更大问题在于，实际上没有人真正需要它。模块化有许多好处，包括更好的库封装、更容易的依赖管理和更小的打包应用程序。然而，要完全实现这些好处，您需要花费大量的工作来重写您的应用程序以完全模块化。其次，您需要将所有依赖项打包为模块，这在开源项目中采用了一段时间。最后，对于大多数企业应用程序来说，实际好处有限，因此即使在升级到支持模块的版本后，常见的做法是禁用模块化并返回到
    Java 8 和之前的类路径模型。[Figure 10-4](#java_8_user_model_for_updates) 显示了升级至 Java 9 及更高版本时简化的开发者思维过程。
- en: '![Flow diagram showing Java developer update flow](Images/dtjd_1004.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![显示 Java 开发者更新流程的流程图](Images/dtjd_1004.png)'
- en: Figure 10-4\. User model for java release acceptance
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-4\. Java 发布接受用户模型
- en: Clearly, choosing whether to upgrade comes down to comparing the value for you
    in modularity or other newly introduced features versus the cost to upgrade. And
    the upgrade cost is highly dependent on how difficult it is to test your application
    after upgrading, which takes us to our first continuous update best practice.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，选择是否升级最终取决于您在模块化或其他新引入功能中的价值比较，与升级后测试应用程序的难度成本密切相关，这也引出了我们的第一个持续更新最佳实践。
- en: 'Case Study: iOS App Store'
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：iOS App Store
- en: We have had a very different update model for content since 1990, with the creation
    of the first web browser called WorldWideWeb by Tim Berners-Lee. Using a client-server
    model, content could be retrieved dynamically and updated continuously. As JavaScript
    and CSS technologies matured, this turned into a viable app delivery platform
    for continuously updated applications.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 自1990年以来，我们的内容更新模型与Tim Berners-Lee创建的第一个Web浏览器WorldWideWeb有着很大不同。使用客户端-服务器模型，内容可以动态检索并持续更新。随着JavaScript和CSS技术的成熟，这变成了一个可行的应用程序交付平台，用于持续更新的应用程序。
- en: In contrast, while desktop client applications were comparatively complex and
    rich in their user interface, updates were infrequent and manual. This created
    a situation up to the mid-2000s of having to choose between either rich client
    applications that were difficult to update in the field or simpler web applications
    that could be continuously updated to add new features or patch security vulnerabilities.
    If you are a continuous update fan (which you should be by now), you know which
    one wins.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，虽然桌面客户端应用程序在用户界面上相对复杂且丰富，但更新不频繁且手动。这在2000年代中期之前，要么选择难以在现场更新的丰富客户端应用程序，要么选择可以持续更新以添加新功能或修补安全漏洞的简单Web应用程序。如果您现在是一个持续更新的支持者（而你现在应该是），您就知道哪个是赢家。
- en: 'However, Apple changed all of this with the App Store on the iPhone in 2008,
    which was a game changer for deploying rich client applications to phones and
    other devices. Here is what App Store offered:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，2008年iPhone上的App Store彻底改变了这一切，这对于在手机和其他设备上部署丰富客户端应用程序来说是一个重大的变革。以下是App Store提供的功能：
- en: Update in one click
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一键更新
- en: Updating a desktop application requires quitting the running version, following
    some sort of guided wizard to go through a seemingly dizzying array of choices
    for the common case (e.g., desktop shortcut, start menu, optional packages), and
    often rebooting your computer after installation. Apple simplified this to a single-button
    update, and in the case of many updates, a bulk option to update them all at once.
    The app update downloads, your mobile app quits, and the app is installed, all
    in the background with no user interruption.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 更新桌面应用程序需要退出运行的版本，按照某种引导向导浏览众多选择（例如桌面快捷方式、开始菜单、可选包），通常在安装后重新启动计算机。Apple简化了这一过程，只需点击一个按钮进行更新，对于多个更新，还提供了一键批量更新选项。应用程序更新下载完成后，您的移动应用程序退出，并且在后台安装，完全无需用户干预。
- en: 'There is only one version: latest'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个版本：最新版
- en: Do you know what version of Microsoft Office you are running? Up until 2011,
    when Office 365 was released, you had to, and had likely not upgraded in the past
    three to five years (or more). Apple changed all of this by providing only the
    latest version in the app store so the choice of which version to upgrade to is
    entirely removed. Also, you are not even provided a version number to reference,
    so all you know is that you are on the latest with a few notes from the developer
    on what you are getting. Finally, there is no cost to upgrade once you own an
    app, so the financial disincentive to upgrade that was the norm with paid desktop
    apps was entirely removed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道您正在运行哪个版本的Microsoft Office吗？直到2011年Office 365发布之前，您必须知道，并且可能在过去三到五年（或更长时间内）没有进行过升级。Apple通过在应用商店中提供仅有的最新版本来改变了这一切，因此您无需选择升级到哪个版本。此外，您甚至无法提供版本号以供参考，所以您唯一知道的就是您正在使用最新版本，并且开发人员提供了一些关于您将得到什么的笔记。最后，一旦拥有应用程序，升级是没有任何费用的，因此完全消除了有偿桌面应用程序升级的财务劣势。
- en: Security built in
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 内置安全性
- en: While security vulnerabilities are the number one reason to install a patch,
    security concerns are also the number one reason *not* to upgrade. Being the first
    to upgrade puts you at risk if a vulnerability in the new software is discovered,
    which is why corporate IT policies typically forbid end users from upgrading their
    desktop apps for a certain period of time. However, Apple fixed this by integrating
    a sandboxed model in which the installed applications are limited in their ability
    to access data, contacts, photos, location, camera, and many other features without
    explicitly being given permission. This, combined with the rigorous app review
    process Apple instituted on store submissions for developers, reduced malware
    and app viruses to the point where, generally speaking, security is almost not
    a concern for consumers when upgrading their apps.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然安全漏洞是安装补丁的头等大事，但安全问题也是不升级的头等理由。如果新软件中发现了漏洞，第一个升级的风险就会增加，这就是为什么企业IT政策通常禁止终端用户在一定时间内升级他们的桌面应用程序。然而，苹果通过集成一个沙箱模型来解决这个问题，其中安装的应用程序在未经明确许可的情况下受到数据、联系人、照片、位置、相机和许多其他功能的限制。这与苹果为开发者在应用商店提交的应用程序实行的严格审查流程相结合，将恶意软件和应用程序病毒减少到了几乎不再是消费者升级应用程序时的一个问题。
- en: The availability of simple upgrades that are low risk makes the decision to
    update simple. Add to this the fact that releases are verified by a trusted authority,
    and users almost always make the decision to upgrade, as shown in [Figure 10-5](#app_store_user_model_for_updates).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠的简单升级选项使升级决策变得简单。加上发布由可信的机构验证这一事实，用户几乎总是会选择升级，正如[图 10-5](#app_store_user_model_for_updates)所示。
- en: '![Flow diagram showing consumer app update flow](Images/dtjd_1005.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![展示消费者应用更新流程的流程图](Images/dtjd_1005.png)'
- en: Figure 10-5\. User model for iOS app update acceptance
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-5. iOS 应用更新接受的用户模型
- en: The Apple App Store model is ubiquitous for not only mobile devices, but also
    desktop application installation. Google offered a similar model with its Android
    operating system in 2008, and both Apple and Microsoft introduced desktop app
    stores in 2011\. Many of these app stores not only make it simple to upgrade to
    the latest version, but also offer an option to automatically upgrade.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果应用商店模型不仅在移动设备上广泛存在，也在桌面应用程序安装中占据了一席之地。Google在2008年推出了类似的模型，其Android操作系统也提供了类似功能，而苹果和微软则在2011年推出了桌面应用商店。许多这些应用商店不仅使升级到最新版本变得简单，还提供了自动升级的选项。
- en: As a result, self-updating applications are now the norm on mobile devices and
    have seen a resurgence on desktop computers, thanks to a few basic continuous
    update best practices.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，自更新应用程序现在在移动设备上已成为常态，并在桌面计算机上也因为一些基本的连续更新最佳实践而得到复兴。
- en: Continuous Uptime
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连续运行时间
- en: In the cloud age, one of the most important measures for business success is
    service uptime. Rather than just delivering software, many companies are moving
    to a software-as-a-service (SaaS) model, where they are also responsible for the
    infrastructure the software runs on. Unexpected interruptions of service can be
    extremely costly, both in breach of service-level agreements and in customer satisfaction
    and retention.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在云时代，企业成功的一个重要指标是服务的运行时间。许多公司不仅仅提供软件，而是转向软件即服务（SaaS）模型，他们还负责软件运行的基础设施。服务意外中断不仅可能违反服务级别协议，还可能影响客户的满意度和保留率。
- en: While uptime is important for all business-provided internet services, there
    is no place where uptime is more important than in companies that build and support
    the very infrastructure the internet relies upon. Let’s take a deeper look at
    one of the internet giants that runs global infrastructure underlying over 10%
    of the websites in the world and a myriad of applications and services that we
    rely upon on a daily basis.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对于所有企业提供的互联网服务来说，持续运行时间都很重要，但在那些构建和支持互联网所依赖的基础设施的公司中，持续运行时间的重要性无与伦比。让我们深入研究一下全球基础设施中运行的互联网超级巨头之一，该公司支持全球超过10%的网站以及我们日常依赖的大量应用和服务。
- en: 'Case Study: Cloudflare'
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：Cloudflare
- en: As internet usage has exploded, so has the need for highly reliable, globally
    distributed, and centrally managed infrastructure like content delivery networks
    (CDNs). Cloudflare’s business is providing a highly reliable content delivery
    infrastructure to businesses across the world with the promise that it can deliver
    content faster and more reliably than your own infrastructure or cloud computing
    servers can. This also means that Cloudflare has one job, which is *never* to
    go down.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 随着互联网使用量的激增，对于高度可靠、全球分布和集中管理的基础设施，如内容分发网络（CDN）的需求也在增加。Cloudflare的业务是向全球企业提供高度可靠的内容传递基础设施，并承诺可以比您自己的基础设施或云计算服务器更快、更可靠地传递内容。这也意味着Cloudflare有一个任务，就是*永远*不会宕机。
- en: While Cloudflare has had many production issues over the years involving DNS
    outages, buffer overflow data leaks, and security breaches, as its business has
    grown, the scale of the problem and resulting damage has gone up. Five of these
    outages occurred on a global scale, taking out an increasingly large portion of
    the internet. While many may secretly be happy to have a 30-minute break from
    the internet courtesy of continuous update failures (after which we promptly complain
    about them on Twitter), losing access to hundreds of millions of servers across
    the internet can cause major disruptions for businesses and huge financial loss.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Cloudflare多年来出现过许多生产问题，涉及DNS宕机、缓冲区溢出数据泄漏和安全漏洞，但随着其业务的增长，问题的规模和造成的损害也在增加。其中五次宕机发生在全球范围内，导致了互联网的日益大规模中断。虽然许多人可能暗自高兴能够在持续的更新失败中（之后我们迅速在Twitter上抱怨），享受30分钟的互联网休息，但失去对全球数亿台服务器的访问权限可能会对企业造成严重的干扰和巨大的财务损失。
- en: We are going to focus on the three most recent global Cloudflare outages, what
    happened, and how they could have been prevented with continuous update best practices.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关注Cloudflare最近三次全球宕机事件，发生了什么以及如何通过持续更新最佳实践来防止这些事件。
- en: 2013 Cloudflare router rule outage
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2013年Cloudflare路由器规则宕机
- en: In 2013, Cloudflare had 23 data centers across 14 countries serving 785,000
    websites and over 100 billion page views per month. At 9:47 UTC on March 3, Cloudflare
    had a system-wide outage affecting all of its data centers when it effectively
    dropped off the internet.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，Cloudflare在14个国家的23个数据中心为785,000个网站和每月1000亿次页面浏览提供服务。在UTC时间3月3日9:47时，Cloudflare发生了系统范围的宕机，影响了其所有数据中心，使其从互联网上消失。
- en: After the outage commenced, diagnosing the problem took about 30 minutes, and
    a full hour for all services to be restored at 10:49 UTC. The outage was caused
    by a [bad rule](https://oreil.ly/oQ2LF) that was deployed to the Juniper routers
    that sat on the edge of all its data centers, shown in [Example 10-1](#bad_rule).
    It was intended to prevent an ongoing distributed denial-of-service (DDos) attack
    that had unusually large packets in the range of 99,971 to 99,985 bytes. Technically,
    the packets would have been discarded after hitting the network, since the largest
    allowed packet size was 4,470, but this rule was intended to stop the attack at
    the edge before it impacted other services.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 宕机发生后，诊断问题大约需要30分钟，并在UTC时间10:49时全部服务恢复。宕机是由一个部署到所有数据中心边缘的Juniper路由器上的[错误规则](https://oreil.ly/oQ2LF)引起的，如[示例 10-1](#bad_rule)所示。它旨在阻止一个具有异常大数据包范围（99,971到99,985字节）的持续分布式拒绝服务（DDos）攻击。从技术上讲，这些数据包会在击中网络后被丢弃，因为允许的最大数据包大小为4,470，但此规则旨在在影响其他服务之前在边缘停止攻击。
- en: Example 10-1\. The rule that caused Cloudflare’s routers to crash
  id: totrans-136
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-1. 导致Cloudflare路由器崩溃的规则
- en: '[PRE0]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This rule caused the Juniper edge routers to consume all RAM until they crashed.
    Removing the offending rule fixed the problem, but many routers were in a state
    where they could not be automatically rebooted and required manual power cycling.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这一规则导致了Juniper边缘路由器消耗所有RAM直到崩溃。移除有问题的规则解决了问题，但许多路由器处于无法自动重启并需要手动电源循环的状态。
- en: While Cloudflare blamed Juniper networks and their FlowSpec system that deploys
    rules across a large cluster of routers, Cloudflare is the company that deployed
    an untested rule to its hardware with no ability to fail over or roll back in
    the case of failure.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Cloudflare指责Juniper网络及其FlowSpec系统，该系统在大型路由器群集上部署规则，但Cloudflare是一家在硬件上部署未经测试规则的公司，在失败情况下无法进行故障转移或回滚。
- en: 2019 Cloudflare regex outage
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2019年Cloudflare正则表达式宕机
- en: By 2019, Cloudflare had grown to host 16 million internet properties, serve
    1 billion IP addresses, and in totality power 10% of the Fortune 1000 companies.
    The company had a very good run of six years with no global outages until 13:42
    UTC on July 2 when Cloudflare-proxied domains started returning 502 Bad Gateway
    errors and remained down for 27 minutes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 到2019年，Cloudflare已经成长为托管1600万个互联网属性、服务10亿个IP地址，并且总体上支持10%的财富1000强企业。该公司在未出现全球性中断的六年中表现非常出色，直到UTC时间7月2日13:42时，Cloudflare代理的域名开始返回502
    Bad Gateway错误，并持续停机了27分钟。
- en: This time the root cause was a [bad regular expression (regex)](https://oreil.ly/5Myhx),
    shown in [Example 10-2](#regexp). When this new rule was deployed to the Cloudflare
    web application firewall (WAF), it caused the CPU usage to spike on all cores
    handling HTTP/HTTPS traffic worldwide.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这次的根本原因是一个[错误的正则表达式（regex）](https://oreil.ly/5Myhx)，如[例子 10-2](#regexp)所示。当这个新规则被部署到Cloudflare的Web应用防火墙（WAF）时，导致处理全球HTTP/HTTPS流量的所有核心的CPU使用率飙升。
- en: Example 10-2\. The regular expression that caused Cloudflare’s outage
  id: totrans-143
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子10-2\. 导致Cloudflare停机的正则表达式
- en: '[PRE1]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Like any good regular expression, no human is capable of reading and understanding
    the series of unintelligible symbols, and certainly has no chance of verifying
    the correctness visually. In retrospect, it is obvious that the buggy part of
    the regex is `.\\*(?:.*=.\*)`. Since part of this is a noncapturing group, for
    the purposes of this bug, it can be simplified to `.*.\*=.*`. The use of a double,
    non-optional wildcard (``.*``) is known to be a performance issue with regular
    expressions since they must perform backtracking that gets super linearly harder
    as the length of the input to be matched increases.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何一个好的正则表达式一样，没有人能够阅读和理解一系列不可理解的符号，当然也没有机会通过视觉来验证其正确性。回顾起来，明显的是正则表达式中错误的部分是`.\\*(?:.*=.\*)`。由于部分是非捕获组，在这个bug的情况下，它可以简化为`.*.\*=.*`。使用双重、非可选的通配符(``.*``)在正则表达式中被认为是性能问题，因为它们必须执行回溯，而随着要匹配的输入长度的增加，回溯变得超线性地更加困难。
- en: 'Given the difficulty of manually verifying bugs that get deployed to global
    infrastructure, you would think that Cloudflare would have learned from its 2013
    outage and implemented progressive delivery. In fact, it had since implemented
    a complex progressive delivery system that involved three stages:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于手动验证部署到全球基础设施的错误的困难程度，你会认为Cloudflare已经从其2013年的中断中吸取了教训并实施了渐进式交付。事实上，它自那时以来已经实施了一个复杂的渐进式交付系统，涉及三个阶段：
- en: DOG point of presence
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: DOG存在点
- en: The first line of defense on new changes used only by Cloudflare employees.
    Changes get deployed here first so issues can be detected by employees before
    getting into the real world.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 新变更的第一道防线仅由Cloudflare员工使用。变更首先在此处部署，以便员工在其进入真实世界之前能够检测到问题。
- en: PIG point of presence
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: PIG存在点
- en: A Cloudflare environment for a small subset of customer traffic; new code can
    be tested without affecting paying customers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Cloudflare环境，用于一小部分客户流量；可以在不影响付费客户的情况下测试新代码。
- en: Canary point of presence
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀存在点
- en: Three global canary environments that get a subset of worldwide traffic as a
    last line of defense before changes go global.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 作为变更全球部署的最后一道防线，有三个全球性金丝雀环境会收到一个子集的全球流量。
- en: Unfortunately, the WAF was primarily used for fast threat response, and as a
    result it bypassed all of these canary environments (as defined in the Canary
    Releases design pattern) and went straight to production. In this case, the regular
    expression was only run through a series of unit tests that did not check for
    CPU exhaustion before it was pushed to production. This particular change was
    not an emergency fix and thus could have done a staged rollout following the preceding
    process.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，WAF主要用于快速威胁响应，因此绕过了所有这些金丝雀环境（如金丝雀发布设计模式中定义的那样），直接进入了生产环境。在这种情况下，正则表达式仅通过一系列单元测试，这些测试未检查CPU耗尽，然后被推送到了生产环境。这个特定的变更不是紧急修复，因此可以按照前述过程进行分阶段部署。
- en: 'The exact timeline of the problem and subsequent fix was as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 问题及其后续修复的确切时间轴如下：
- en: 13:31—Code check-in of the peer reviewed regex.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 13:31—同行评审的正则表达式代码检查。
- en: 13:37—CI server built the code and ran the tests, which passed. Well, apparently,
    these weren’t great. `¯\_(ツ)_/¯`
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 13:37—CI服务器构建了代码并运行了测试，测试通过了。嗯，显然这些并不怎么样。`¯\_(ツ)_/¯`
- en: 13:42—The erroneous regex was deployed to the WAF in production.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 13:42—错误的正则表达式被部署到了生产环境的WAF中。
- en: 14:00—The possibility of an attacker was dismissed, and the WAF was identified
    as the root cause.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 14:00—排除了攻击者的可能性，WAF被确定为根本原因。
- en: 14:02—It was decided to go to a global WAF kill.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 14:02—决定进行全球WAF关闭。
- en: 14:07—The kill was finally executed after delays accessing the internal systems.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 14:07—在访问内部系统的延迟后，最终执行了关闭操作。
- en: 14:09—Service was restored for customers.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 14:09—为客户恢复了服务。
- en: To recap, let’s review the continuous update best practices that may have helped
    Cloudflare avoid another global outage.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，让我们回顾一下可能帮助Cloudflare避免另一场全球宕机的持续更新最佳实践。
- en: 2020 Cloudflare backbone outage
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2020年Cloudflare骨干网宕机
- en: 'A year after the previous Cloudflare outage, your author, Stephen, was sitting
    down to write about its 2019 outage when two peculiar things happened:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一次Cloudflare宕机一年后，作者Stephen坐下来写关于2019年宕机的文章，这时发生了两件奇怪的事情：
- en: Around 2:12 P.M. PST (21:12 UTC), the family Discord channel stops, going off
    because of a Cloudflare outage, and I become incredibly productive.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大约下午2:12（PST，21:12 UTC），家庭Discord频道因Cloudflare宕机停止，随后我变得非常高效。
- en: A few hours later, all my searches for information on Cloudflare outages start
    turning up information on recent DNS issues instead of the articles from last
    year.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几小时后，我关于Cloudflare宕机的信息搜索开始出现关于最近DNS问题的信息，而不是去年的文章。
- en: The nice folks at Cloudflare clearly recognized that good case studies come
    in threes and provided another antipattern for this chapter. On July 18, 2020,
    Cloudflare had another production outage for 27 minutes that affected 50% of its
    total network.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudflare的好心人显然认识到好的案例研究通常是三的倍数，并为本章提供了另一个反模式。2020年7月18日，Cloudflare又发生了一次27分钟的生产宕机，影响了其总网络的50%。
- en: This time the issue was with the Cloudflare backbone, which is used to route
    the majority of traffic on its network between major geographies. To understand
    how the backbone works, it helps to understand the topology of the internet. The
    internet is not truly point-to-point but instead relies on a complex network of
    interconnected data centers to transmit information.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这次问题出在Cloudflare的骨干网上，用于在其网络中在主要地理位置之间路由大部分流量。要了解骨干网是如何工作的，了解互联网的拓扑结构是有帮助的。互联网不是点对点的，而是依赖于一个复杂的互联数据中心网络来传输信息。
- en: Cloudflare runs multiple centers in San Jose, Atlanta, Frankfurt, Paris, São
    Paulo, and other cities worldwide. These data centers are connected by a global
    backbone of direct, high-speed connections that allow them to bypass internet
    congestion and improve the quality of service between major markets.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudflare在旧金山、亚特兰大、法兰克福、巴黎、圣保罗和世界其他城市运营多个数据中心。这些数据中心通过全球骨干网的直连高速连接相互连接，使其能够绕过互联网拥堵，并提高主要市场之间的服务质量。
- en: It is the Cloudflare backbone that was the cause of the outage this time. The
    backbone is designed to be resilient to failures, such as the one that happened
    between Newark and Chicago at 20:25 UTC. However, this outage resulted in increased
    congestion between Atlanta and D.C. The attempted fix was to remove some of the
    traffic from Atlanta by executing the routing change in [Example 10-3](#routing_change).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这次宕机的原因是Cloudflare的骨干网。该骨干网设计为抗故障，例如20:25 UTC发生在纽瓦克和芝加哥之间的故障。然而，这次宕机导致亚特兰大和华盛顿之间的拥堵加剧。尝试的解决办法是通过在[示例10-3](#routing_change)中执行路由更改，将部分流量从亚特兰大移除。
- en: Example 10-3\. The routing change that caused Cloudflare’s network to go down
  id: totrans-171
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例10-3。导致Cloudflare网络宕机的路由更改
- en: '[PRE2]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This routing change inactivates one line of a term script, shown in [Example 10-4](#term).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此次路由更改使一个术语脚本的线路失效，如[示例10-4](#term)所示。
- en: Example 10-4\. The complete term the change was made on
  id: totrans-174
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例10-4。进行更改的完整术语
- en: '[PRE3]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The correct change would have been to inactivate the entire term. However, by
    removing the `prefix-list` line, the result was to send this route to all other
    backbone routers. This changed the `local-preference` to 200, which gave Atlanta
    priority over the other routes, which were set to 100\. The result was that rather
    than reducing traffic, Atlanta instead started attracting traffic from across
    the backbone, increasing network congestion to the point where internet service
    was disrupted for half of Cloudflare’s network.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的更改应当是使整个术语失效。然而，通过移除`prefix-list`行，结果是将该路由发送到所有其他骨干路由器。这将`local-preference`更改为200，使亚特兰大优先于其他路由，其他路由的优先级设为100。结果是，亚特兰大不仅未减少流量，反而开始吸引骨干网中的流量，增加了网络拥堵，导致Cloudflare网络的互联网服务中断了一半。
- en: There is a lot to say about configuration changes that can destroy your entire
    business. The core of the problem here is that Cloudflare is not treating the
    configuration of backbone routers as code that is properly peer reviewed, unit
    tested, and canary deployed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多关于配置更改可能摧毁整个业务的内容。问题的核心在于 Cloudflare 没有将骨干路由器的配置视为需要进行适当的对等审查、单元测试和金丝雀部署的代码。
- en: The Hidden Cost of Manual Updates
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动更新的隐藏成本
- en: Implementing continuous update best practices is not free, and often it can
    seem more cost-effective to delay automation and continual manual processes. In
    particular, doing automated testing, treating configuration like code, and automating
    deployment are all important, but also costly to implement.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 实施持续更新的最佳实践并不是免费的，而且往往看起来推迟自动化和持续手动流程更具成本效益。特别是，进行自动化测试、将配置视为代码以及自动化部署都很重要，但也很昂贵。
- en: However, what is the hidden cost of *not* automating your deployment? Manual
    deployments are fraught with errors and mistakes that cost time and effort to
    troubleshoot and business loss when they negatively impact customers. What is
    the cost of having production errors that persist for hours as staff is brought
    in to troubleshoot the issue on a live system?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，*不*自动化部署的隐藏成本是什么？手动部署充满错误和失误，需要花费时间和精力来排除故障，并在对客户产生负面影响时造成业务损失。在员工被调去现场系统解决问题的几小时内，生产错误的成本是多少？
- en: In the case of Knight Capital, where the answer turned out to be $10 million
    per minute of system failure, would you trust manual updates?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Knight Capital 的案例中，结果是每分钟系统故障损失 1000 万美元，你会信任手动更新吗？
- en: 'Case Study: Knight Capital'
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：Knight Capital
- en: Knight Capital is an extreme case of a software bug going undetected, causing
    issues in production, and causing a huge amount of financial loss. However, the
    interesting thing about this bug is that the core issue was mistakes made in the
    deployment process, which was both infrequent and manual. If Knight Capital were
    practicing continuous deployment, it would have avoided a mistake that ended up
    costing it $440 million and control of the company.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Knight Capital 是一个软件缺陷未被检测的极端案例，导致生产问题，并造成巨额财务损失。然而，有趣的是，这个错误的核心问题是在部署过程中犯下的错误，这个过程既不频繁也是手动的。如果
    Knight Capital 进行持续部署，就能避免一个错误，这个错误导致了其损失了 4.4 亿美元和对公司的控制。
- en: Knight Capital Group was a market-making trader specializing in high-volume
    transactions, and throughout 2011 and 2012 its trading in US equity securities
    represented approximately 10% of the market volume. The company had several internal
    systems that handled trade processing, one of which was called Smart Market Access
    Routing System (SMARS). SMARS acted as a broker, taking trading requests from
    other internal systems and executing them in the market.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Knight Capital Group 是一家专门从事高交易量交易的做市商，2011年和2012年期间，其美国股票交易占据了市场交易量的约 10%。该公司有几个内部系统来处理交易处理，其中之一称为智能市场访问路由系统（SMARS）。SMARS
    作为经纪商，从其他内部系统接收交易请求，并在市场上执行这些请求。
- en: To support a new Retail Liquidity Program (RLP) that was set to launch on August
    1, 2012, Knight Capital upgraded its SMARS system to add in new trading functionality.
    It decided to reuse the API flag for a deprecated function called Power Peg that
    was meant for internal testing only. This change was thought to have been successfully
    deployed to all eight production servers in the week leading up to the RLP launch.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持于 2012 年 8 月 1 日启动的新零售流动性计划（RLP），Knight Capital 升级了其 SMARS 系统以添加新的交易功能。它决定重用一个废弃的名为
    Power Peg 的函数的 API 标志，该函数仅用于内部测试。据信，在 RLP 推出前的一周，这个变更已成功部署到了所有八台生产服务器上。
- en: At 8:01 A.M. EST, the morning of August 1 started with some suspicious, but
    sadly ignored, email warnings about errors on pre-market trading orders that referenced
    SMARS and warned “Power Peg disabled.” Once trading commenced at 9:30 A.M. EST,
    SMARS immediately started executing a large volume of suspicious trades that would
    repeatedly buy high (at offer) and sell low (at bid), immediately losing on the
    spread. Millions of these transactions were being queued at 10 ms intervals, so
    even though the amounts were small (15 cents on every pair of trades), [the losses
    piled up extremely quickly](https://oreil.ly/w1a6K).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在美东时间上午8:01开始，8月1日早晨以一些可疑但遗憾地被忽略的电子邮件警告开头，这些警告涉及前市交易订单中的错误，引用了SMARS并警告“Power
    Peg已禁用”。一旦美东时间上午9:30开始交易，SMARS立即开始执行大量可疑交易，将重复以高价买入（在报价处）和低价卖出（在买价处），立即在价差上亏损。这些交易以10毫秒的间隔排队，因此即使金额很小（每对交易15美分），[损失也迅速堆积](https://oreil.ly/w1a6K)。
- en: In a business where seconds can be costly, minutes can wipe out weeks of earnings,
    and an hour is a lifetime, Knight Capital lacked an emergency response plan. During
    this 45-minute period, it executed 4 million orders for trading 397 million shares
    of 154 stocks. This gave the company a net long position of 3.4 billion and a
    net short position of 3.15 billion. After getting 6 of the 154 stocks reversed
    and selling the remaining positions, it was left with a net loss of around $468
    million. This was a very tough period for Knight Capital.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个每秒都可能成本高昂，每分钟可能抹去数周收入，每小时都是一生的业务中，Knight Capital缺乏紧急响应计划。在这45分钟内，它执行了400万笔订单，交易了1.54亿股154只股票。这使得公司形成了34亿美元的净多头头寸和31.5亿美元的净空头头寸。在将154只股票中的6只股票逆转并出售剩余头寸后，公司最终遭受了约4.68亿美元的净损失。这对Knight
    Capital来说是一个非常艰难的时期。
- en: Backtracking to the root cause of this problem, only seven of the eight production
    servers were correctly upgraded with the new RLP code. The last server had the
    old Power Peg logic enabled on the same API flag, which explains the warning emails
    earlier in the morning. For every request that hit this eighth server, an algorithm
    designed for internal testing was run that executed millions of inefficient trades
    designed to quickly bump up the price of the stock.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 回溯到问题的根本原因，八台生产服务器中只有七台正确升级了新的RLP代码。最后一台服务器仍然启用了旧的Power Peg逻辑，并且在同一个API标志上，这解释了早上早些时候的警告邮件。每次请求命中这第八台服务器时，都会运行设计用于内部测试的算法，执行数百万次低效交易，旨在迅速提高股票价格。
- en: However, in troubleshooting this problem, the technical team erroneously thought
    that there was a bug on the newly deployed RLP logic and reverted the code on
    the other seven servers, essentially breaking 100% of the transactions and exacerbating
    the problem.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在解决这个问题时，技术团队错误地认为新部署的RLP逻辑存在bug，并将其他七台服务器上的代码还原，实质上破坏了100%的交易，加剧了问题。
- en: While Knight Capital did not go entirely bankrupt from this, it had to give
    up 70% of control of the company for a $400 million bailout of the company’s position.
    Before the end of the year, this turned into an acquisition by a competitor, Getco
    LLC, and the resignation of CEO Thomas Joyce.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Knight Capital并没有因此完全破产，但它不得不出售公司70%的控制权，以获得4亿美元的公司救助。年底之前，这转变为被竞争对手Getco
    LLC收购，并导致CEO托马斯·乔伊斯辞职。
- en: So, what happened to Knight Capital, and how can you avoid a disaster like this?
    See the next sidebar for some additional continuous update best practices.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Knight Capital发生了什么，你又该如何避免这样的灾难？请参阅下一个侧边栏，了解一些额外的持续更新最佳实践。
- en: Continuous Update Best Practices
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续更新最佳实践
- en: Now that you have seen the dangers of not adopting continuous update best practices
    from a variety of companies in different areas of the technology industry, it
    should be obvious why you should start implementing or continue to improve your
    continuous deployment infrastructure.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了不采纳各种技术行业不同领域公司的持续更新最佳实践的危险，显而易见为什么你应该开始实施或继续改进你的持续部署基础设施。
- en: 'The following is a list of all the continuous update best practices along with
    the case studies that go into them in more detail:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所有持续更新最佳实践的列表，以及更详细介绍它们的案例研究：
- en: Frequent updates
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁更新
- en: The only way to get good at updating is to do it a lot.
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要变得擅长更新，唯一的方法就是经常这么做。
- en: 'Case studies: iOS App Store, Knight Capital.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：iOS应用商店，Knight Capital。
- en: Automatic updates
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动更新
- en: And if you are updating a lot, automating becomes cheaper and less error prone.
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你频繁更新，自动化将变得更便宜且错误更少。
- en: 'Case study: iOS App Store.'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：iOS 应用商店。
- en: Automated testing
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: The only way to make sure you are deploying quality is to test everything on
    every change.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保部署质量的唯一方法是在每次更改时对所有内容进行测试。
- en: 'Case studies: Java six-month release cadence, 2020 Cloudflare backbone outage.'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：Java 六个月发布周期，2020 Cloudflare 骨干网络故障。
- en: Progressive delivery
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进式交付
- en: Avoid catastrophic failures by deploying to a small subset of production with
    a rollback plan.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向生产的一小部分部署并制定回滚计划来避免灾难性故障。
- en: 'Case studies: 2013 Cloudflare router rule outage, 2019 Cloudflare regex outage.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：2013 Cloudflare 路由器规则故障，2019 Cloudflare 正则表达式故障。
- en: State awareness
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态感知
- en: Don’t assume that code is the only thing that needs to be tested; state exists
    and can wreak havoc in production.
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要假设只有代码需要测试；状态的存在可能在生产环境中造成严重破坏。
- en: 'Case study: Knight Capital.'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：Knight Capital。
- en: Observability
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观测性
- en: Don’t let your customers be the ones to notify you that you are down!
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让客户成为通知您服务中断的人！
- en: 'Case studies: 2019 Cloudflare regex outage, 2020 Cloudflare backbone outage.'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：2019 Cloudflare 正则表达式故障，2020 Cloudflare 骨干网络故障。
- en: Local rollbacks
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地回滚
- en: Edge devices are typically numerous and hard to fix after a bad update hits,
    so always design for a local rollback.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘设备通常数量众多，一旦受到糟糕更新的影响，难以修复，因此始终设计具备本地回滚能力。
- en: 'Case study: 2013 Cloudflare router rule outage.'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 案例研究：2013 Cloudflare 路由器规则故障。
- en: Now that you are armed with knowledge, it is time to start convincing your coworkers
    to adopt best practices today, before you become the next Knight Capital “Knightmare”
    of the high-tech industry. Making headlines is great, but do it as an elite performer
    of the DevOps industry rather than on the front page of the Register. Don’t try
    to boil the ocean, but small continuous improvement initiatives will, eventually,
    get your organization to continuous updates. Good luck!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经掌握了知识，是时候开始说服您的同事在今天采纳最佳实践，而不是成为高科技行业的下一个 Knight Capital 的“Knightmare”头条新闻。成为
    DevOps 行业的精英表现者，而不是出现在注册表的头版。不要试图一口吃掉整个大海，但小而持续的改进举措最终会使您的组织实现持续更新。祝您好运！
- en: ^([1](ch10.xhtml#idm45310199916160-marker)) Brian Vermeer, “JVM Ecosystem Report
    2020,” Snyk, 2020, [*https://oreil.ly/4fN74*](https://oreil.ly/4fN74).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch10.xhtml#idm45310199916160-marker)) Brian Vermeer，“2020 年 JVM 生态系统报告”，Snyk，2020
    年，[*https://oreil.ly/4fN74*](https://oreil.ly/4fN74)。
- en: ^([2](ch10.xhtml#idm45310199906848-marker)) Eugen Paraschiv, “Java 8 Adoption
    in March 2016,” last modified March 11, 2022, [*https://oreil.ly/ab5Vv*](https://oreil.ly/ab5Vv).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch10.xhtml#idm45310199906848-marker)) Eugen Paraschiv，“2016 年 3 月 Java
    8 采用情况”，最后修改于 2022 年 3 月 11 日，[*https://oreil.ly/ab5Vv*](https://oreil.ly/ab5Vv)。
