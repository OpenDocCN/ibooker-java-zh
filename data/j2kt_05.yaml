- en: Chapter 5\. Beans to Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。从豆到值
- en: Many Java projects have settled on mutable JavaBeans or POJO (plain old Java
    object) conventions for representing data. Mutability brings complications, though.
    Why are immutable values a better choice, and how can we reduce the cost of mutability
    in a codebase?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多Java项目已经采用了可变的JavaBeans或POJO（普通的旧Java对象）约定来表示数据。然而，可变性带来了复杂性。为什么不可变值是一个更好的选择，以及如何在代码库中减少可变性的成本？
- en: Beans
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 豆
- en: As we discussed in [“Bean Style”](ch01.html#bean-java-style), JavaBeans were
    introduced to allow the development of drag-and-drop GUI builders in the Visual
    Basic style. A developer could drop a button onto a form, change its title and
    icon, and then wire in an on-click handler. Behind the scenes, the GUI builder
    would write code to instantiate a button object and then call setters for the
    properties that the developer had changed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[“Bean Style”](ch01.html#bean-java-style)中讨论的那样，JavaBeans的引入是为了允许以Visual
    Basic风格开发拖放式GUI构建器。开发人员可以将按钮拖放到表单上，更改其标题和图标，然后连接一个点击处理程序。在幕后，GUI构建器会编写代码来实例化一个按钮对象，然后调用开发人员更改的属性的setter。
- en: To define a JavaBean, a class needs a default (no-argument) constructor, getters
    for its properties, and setters for its mutable properties. (We’ll gloss over
    the `Serializable` requirement, because even Sun never really took this seriously.)
    This makes sense for objects that have a lot of properties. GUI components typically
    have foreground and background colors, font, label, borders, size, alignments,
    paddings, and so on. Mostly the defaults for these properties are fine, so calling
    setters for just the special values minimizes the amount of code to be generated.
    Even today, a mutable component model is a solid choice for GUI toolkits.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个JavaBean，一个类需要有一个默认（无参数）构造函数，用于其属性的getter，以及用于其可变属性的setter。（我们将忽略`Serializable`要求，因为即使是Sun公司也从未真正认真对待过这一点。）这对于具有许多属性的对象是有意义的。GUI组件通常具有前景色和背景色、字体、标签、边框、大小、对齐方式、填充等等。大多数情况下，这些属性的默认值都很好，因此仅为特定值调用setter可以最大程度地减少生成的代码量。即使在今天，对于GUI工具包来说，可变的组件模型仍然是一个坚实的选择。
- en: When JavaBeans were introduced, though, we thought of most objects as mutable,
    not just UI components. I mean, why not? The point of objects was to encapsulate
    properties and manage the relationships between them. They were *designed* to
    solve problems like updating the width of a component when its bounds are changed,
    or the total of a shopping cart as items are added. Objects were the solution
    to the problem of managing mutable state. Java was quite radical at the time in
    having an immutable `String` class (although it couldn’t help itself and still
    plumped for a mutable `Date`).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当引入JavaBeans时，我们认为大多数对象都是可变的，不仅仅是UI组件。我是说，为什么不呢？对象的目的是封装属性并管理它们之间的关系。它们*被设计*来解决诸如在组件边界更改时更新其宽度或在添加项目时更新购物车总额之类的问题。对象是管理可变状态问题的解决方案。在当时，Java因其具有不可变的`String`类而显得相当激进（尽管它自己也无法抑制，并且仍然选择了可变的`Date`）。
- en: As a profession, we have a more sophisticated understanding these days. We appreciate
    that we can use objects to represent different types of things—values, entities,
    services, actions, transactions, and so on. And yet the default pattern for a
    Java object is still the JavaBean, a mutable object with getters and setters for
    its properties. Although it may be appropriate for a UI toolkit, this is not a
    good default pattern. For most things that we want to represent with objects,
    a value would be better.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个行业，我们如今对此有了更加复杂的理解。我们明白我们可以使用对象来表示不同类型的事物 — 值、实体、服务、操作、事务等等。然而，Java对象的默认模式仍然是JavaBean，一个具有其属性的可变对象，其属性有相应的getter和setter。尽管对于UI工具包可能是合适的，但这不是一个好的默认模式。对于大多数我们想要用对象表示的事物，值会更好。
- en: Values
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 值
- en: '*Value* is a much overloaded term in English. In computing, we say that variables,
    parameters, and fields have values: the primitive or reference that they are bound
    to. When we refer to *a value* in this book, we are referring to a specific type
    of primitive or reference: those with value semantics. An object has value semantics
    if only its value is significant in its interactions, not its identity. Java primitives
    all have value semantics: every `7` is equal to every other `7`. Objects may or
    may not have value semantics though; in particular, mutable objects do not. In
    later chapters we’ll look at finer distinctions, but for now, let’s just define
    a *value* to be an immutable piece of data, and a *value type* to be a type that
    defines the behavior of an immutable piece of data.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*Value* 是英语中一个负载很重的术语。在计算机领域，我们说变量、参数和字段具有值：它们绑定的基本类型或引用。当我们在本书中提到 *a value*
    时，我们指的是一种特定类型的基本类型或引用：那些具有值语义的类型。如果只有它的值在其交互中是显著的，而不是其标识，则对象具有值语义。Java 的原始类型都具有值语义：每个
    `7` 都等于其他每个 `7`。对象可能具有值语义，也可能没有；特别是，可变对象没有。在后面的章节中，我们将探讨更细致的区别，但现在，让我们简单地将 *value*
    定义为一个不可变的数据片段，将 *value type* 定义为定义不可变数据行为的类型。'
- en: So `7` is a value, and the boxed `Integer` is a value type (because boxed types
    are immutable), `banana` is a value (because `String`s are immutable), a `URI`
    is a value (because `URI`s are immutable), but `java.util.Date` is not a value
    type (because we can call `setYear` and others on the date).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`7` 是一个值，而装箱的 `Integer` 是一个值类型（因为装箱类型是不可变的），`banana` 是一个值（因为 `String` 是不可变的），`URI`
    是一个值（因为 `URI` 是不可变的），但 `java.util.Date` 不是一个值类型（因为我们可以调用 `setYear` 等方法来修改日期）。
- en: An instance of an immutable `DBConnectionInfo` is a value, but an instance of
    `Database` is not a value, even if all its properties are immutable. This is because
    it is not a piece of data; it is a means of accessing, and mutating, pieces of
    data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变的 `DBConnectionInfo` 实例是一个值，但 `Database` 的实例不是一个值，即使其所有属性都是不可变的。这是因为它不是一个数据片段；它是一种访问和修改数据片段的手段。
- en: Are JavaBeans values? UI component JavaBeans are not values because UI components
    aren’t just data—two otherwise identical buttons have different identities. In
    the case of beans used to represent plain data, it will depend on whether they
    are immutable. It is possible to create immutable beans, but most developers would
    think of these more as plain old java objects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaBeans 是值吗？UI 组件的 JavaBeans 不是值，因为 UI 组件不仅仅是数据——两个外观相同的按钮有不同的标识。对于用于表示普通数据的
    bean，这将取决于它们是否是不可变的。可以创建不可变的 bean，但大多数开发者更倾向于将它们视为普通的 Java 对象。
- en: Are POJOs values? The term was coined to refer to classes that don’t have to
    extend from framework types to be useful. They usually represent data and conform
    to the JavaBeans conventions for accessor methods. Many POJOs will not have a
    default constructor, but instead define constructors to initialize properties
    that don’t have sensible defaults. Because of this, immutable POJOs are common
    and may have value semantics. Mutable POJOs still seem to be the default though,
    so much so that many people consider that object-oriented programming in Java
    is synonymous with mutable objects. Mutable POJOs are not values.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: POJOs 是值吗？这个术语是用来指代那些不必扩展框架类型就能够有用的类的。它们通常表示数据，并符合 JavaBeans 的访问器方法约定。许多 POJOs
    将不具有默认构造函数，而是定义构造函数来初始化没有明显默认值的属性。由于这个原因，不可变的 POJOs 是常见的，可能具有值语义。但可变的 POJOs 仍然似乎是默认的，以至于许多人认为在
    Java 中的面向对象编程就等同于可变对象。可变的 POJOs 不是值。
- en: In summary, a bean could technically be a value but rarely is. POJOs more often
    have value semantics, especially in the modern Java age. So whereas *Beans to
    Values* is snappy, in this chapter we’re really looking at refactoring from mutable
    objects to immutable data, so maybe we should have called it *Mutable POJOs to
    Values*. We hope you’ll forgive the sloppy title.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，一个 bean 从技术上讲可以是一个值，但很少是。在现代 Java 时代，POJOs 更经常具有值语义。所以虽然 *Beans to Values*
    听起来很简洁，但在这一章中，我们真正关注的是从可变对象到不可变数据的重构，也许我们应该把它称为 *Mutable POJOs to Values*。希望您原谅这个粗糙的标题。
- en: Why Should We Prefer Values?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们应该偏好值？
- en: 'A value is immutable data. Why should we prefer immutable objects to mutable
    objects, and objects that represent data to other types of objects? This is a
    theme that we will visit time and again in this book. For now, let’s just say
    that immutable objects are easier to reason about because they don’t change, and
    so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 值是不可变数据。为什么我们应该更喜欢不可变对象而不是可变对象，以及代表数据的对象而不是其他类型的对象？这是本书中我们将一再讨论的主题。现在，让我们只说不可变对象更容易推理，因为它们不会改变，所以：
- en: We can put them into sets or use them as map keys.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将它们放入集合中或将它们用作映射键。
- en: We never have to worry about an immutable collection changing as we iterate
    over its contents.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们永远不必担心不可变集合在我们迭代其内容时会发生变化。
- en: We can explore different scenarios without having to deep-copy initial states
    (which also makes it easy to implement undo and redo).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在不必深拷贝初始状态的情况下探索不同的场景（这也使得实现撤销和重做变得容易）。
- en: We can safely share immutable objects between different threads.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在不同线程之间安全地共享不可变对象。
- en: Refactoring Beans to Values
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Bean重构为值
- en: Let’s look at refactoring a use of a mutable bean or POJO to a value.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看将可变bean或POJO重构为值的过程。
- en: 'Travelator has a mobile app, and the Android version is written in Java. In
    that code, we represent user preferences with a `UserPreferences` JavaBean:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Travelator有一个移动应用程序，Android版本是用Java编写的。在该代码中，我们使用一个`UserPreferences`JavaBean来表示用户的偏好设置。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 5.1 [beans-to-values.0:src/main/java/travelator/mobile/UserPreferences.java]](https://java-to-kotlin.dev/code.html?ref=5.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.1&show=diff)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.1 [beans-to-values.0:src/main/java/travelator/mobile/UserPreferences.java]](https://java-to-kotlin.dev/code.html?ref=5.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.1&show=diff)'
- en: 'The `Application` has a `preferences` property, which it passes to views that
    need it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application`有一个`preferences`属性，它将其传递给需要它的视图：'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 5.2 [beans-to-values.0:src/main/java/travelator/mobile/Application.java]](https://java-to-kotlin.dev/code.html?ref=5.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.2&show=diff)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.2 [beans-to-values.0:src/main/java/travelator/mobile/Application.java]](https://java-to-kotlin.dev/code.html?ref=5.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.2&show=diff)'
- en: (Any similarity to an actual UI framework, living or dead, is purely coincidental.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: （任何与实际UI框架的相似性，无论是现存还是已故，都是纯属巧合。）
- en: 'Finally, `PreferencesView` updates its `preferences` when the user makes changes.
    We know that there has been a change because `onThingChange()` will be called:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当用户进行更改时，`PreferencesView`会更新其`preferences`。我们知道已经发生了变化，因为将调用`onThingChange()`：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 5.3 [beans-to-values.0:src/main/java/travelator/mobile/PreferencesView.java]](https://java-to-kotlin.dev/code.html?ref=5.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.3&show=diff)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.3 [beans-to-values.0:src/main/java/travelator/mobile/PreferencesView.java]](https://java-to-kotlin.dev/code.html?ref=5.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.3&show=diff)'
- en: 'This design, though simple, is fraught with complications typical of mutable
    data, such as:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管简单，这种设计充满了典型可变数据的复杂性，例如：
- en: If the `PreferencesView` and `WelcomeView` are both active, the `WelcomeView`
    can get out of sync with the current values.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`PreferencesView`和`WelcomeView`都处于活动状态，则`WelcomeView`可能与当前值不同步。
- en: '`UserPreferences` equality and hash-code depend on the values of its properties,
    which may be changed. So we can’t reliably use `UserPreferences` in sets or as
    keys in maps.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserPreferences`的相等性和哈希码取决于其属性的值，这些值可能会改变。因此，我们不能可靠地在集合中使用`UserPreferences`或将其用作映射键。'
- en: There is nothing to indicate that the `WelcomeView` only reads from the preferences.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何迹象表明`WelcomeView`仅从偏好中读取。
- en: If reading and writing occur on different threads, we have to manage synchronization
    at the preference property level.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果读取和写入发生在不同的线程上，我们必须在偏好属性级别管理同步。
- en: 'Before we refactor to using an immutable value, let’s convert `Application`
    and `User​Pre⁠ferences` to Kotlin, which will help us see the nature of our model.
    `Application` is simple:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们重构以使用不可变值之前，让我们将`Application`和`User​Pre⁠ferences`转换为Kotlin，这将帮助我们看到我们模型的本质。
    `Application`很简单：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 5.4 [beans-to-values.1:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.4&show=diff)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.4 [beans-to-values.1:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.4&show=diff)'
- en: '`UserPreferences` is more complicated. “Convert to Kotlin” in IntelliJ yields
    this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserPreferences`更加复杂。在IntelliJ中的“转换为Kotlin”产生了这个：'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 5.5 [beans-to-values.1:src/main/java/travelator/mobile/UserPreferences.kt]](https://java-to-kotlin.dev/code.html?ref=5.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.5&show=diff)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.5 [beans-to-values.1:src/main/java/travelator/mobile/UserPreferences.kt]](https://java-to-kotlin.dev/code.html?ref=5.5&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=5.5&show=diff)'
- en: This is quite a sophisticated conversion. The `@JVMOverloads` annotation tells
    the compiler to generate multiple constructors that allow combinations of `greeting`,
    `locale`, or `currency` to be defaulted. This wasn’t what our original Java did;
    it had just two constructors (one of which was the default, no-argument constructor).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常复杂的转换。`@JVMOverloads` 注解告诉编译器生成多个构造函数，允许默认 `greeting`、`locale` 或 `currency`
    的组合。这不是我们原来的 Java 所做的；它只有两个构造函数（其中一个是默认的无参数构造函数）。
- en: At this stage we haven’t changed the functioning of our application, just simplified
    its expression. Those `var` (as opposed to `val`) properties are the sign that
    we have mutable data. It’s worth reminding ourselves at this point that the Kotlin
    compiler is going to generate a private field, a getter method, and a setter method
    for each property, so that our Java continues to see the data class as a bean.
    Kotlin embraces the beans naming convention, and `var` properties allow us to
    define mutable beans, for better or worse.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们没有改变应用程序的功能，只是简化了其表达方式。那些 `var`（而不是 `val`）属性表明我们有可变数据。值得在此时提醒自己的是 Kotlin
    编译器将为每个属性生成一个私有字段、一个 getter 方法和一个 setter 方法，以便我们的 Java 继续将数据类视为一个 bean。Kotlin
    接受 beans 命名约定，并且 `var` 属性允许我们定义可变 bean，无论好坏。
- en: Assuming worse, how now do we make `UserPreferences` immutable? After all, we
    do need the preferences as seen in the app to reflect any changes the user makes.
    The answer is to move the mutation. In common with many of the refactorings in
    this book, we’re going to move the problematic thing (in this case mutation) up.
    Which is to say, toward the entry point, or into the higher-level, more application-specific
    code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设更糟，现在如何使 `UserPreferences` 不可变？毕竟，我们需要应用中所见的首选项反映用户所做的任何更改。答案是移动突变。与本书中许多重构相似，我们要将问题（在这种情况下是突变）上移。也就是说，朝着入口点，或者说进入更高级别、更应用特定的代码。
- en: Instead of mutating the preferences, we are going to update the reference in
    the `Application`. The reference we’re going to use will be an updated copy returned
    by `PreferencesView`. In short, our strategy is to replace an immutable reference
    to a mutable object with a mutable reference to an immutable value. Why? Well,
    this reduces both the number and visibility of the potentially moving parts, and
    it is visibility of mutation that causes us problems.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会突变首选项，而是将引用更新到 `Application` 中。我们将使用的引用将是 `PreferencesView` 返回的更新副本。简而言之，我们的策略是将对可变对象的不可变引用替换为对不可变值的可变引用。为什么？这样做既减少了潜在移动部件的数量和可见性，也减少了引起问题的突变可见性。
- en: 'We’ll work our way there gradually, starting by converting `PreferencesView`
    to Kotlin:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会逐步进行，首先将 `PreferencesView` 转换为 Kotlin：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 5.6 [beans-to-values.3:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.6&show=diff)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.6 [beans-to-values.3:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.6&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=5.6&show=diff)'
- en: '`show()` overrides a method in `View` that makes the view visible and blocks
    the calling thread until it is dismissed. To avoid mutation, we would like a version
    that returns a copy of the `UserPreferences` with any changes applied, but we
    can’t add a return type to the `View` method. So instead, we’ll rename `show`
    to `showModal`, returning the existing mutable `preferences` property once `super.show()`
    has returned:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`show()` 方法重写了 `View` 中的一个方法，该方法使视图可见并阻塞调用线程直到其被解散。为了避免突变，我们希望有一个版本，该版本返回对应于应用了任何更改的
    `UserPreferences` 的副本，但我们无法给 `View` 方法添加返回类型。因此，我们将把 `show` 重命名为 `showModal`，在
    `super.show()` 返回后返回现有的可变 `preferences` 属性：'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 5.7 [beans-to-values.4:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.7&show=diff)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.7 [beans-to-values.4:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.7&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=5.7&show=diff)'
- en: '`Application.editPreferences()` was calling its `preferencesView.show()` and
    relying on the fact that it and `PreferencesView` shared a reference to a mutable
    object to see any edits. We’ll now make `Application.preferences` a mutable property,
    set from the result of `showModal`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application.editPreferences()` 调用了 `preferencesView.show()`，并依赖于它与 `PreferencesView`
    共享可变对象的事实来查看任何编辑。现在我们将把 `Application.preferences` 改为可变属性，从 `showModal` 的结果设置：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 5.8 [beans-to-values.4:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.8&show=diff)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.8 [beans-to-values.4:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.8&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO4-1)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO4-1)'
- en: Now a `var`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 `var` 了
- en: 'The `showModal` method is currently returning the same object passed to the
    view in the constructor, so this doesn’t change anything really. In fact, we have
    the worst of both worlds: a mutable reference to mutable data.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`showModal` 方法当前返回与构造函数中传递给视图的相同对象，因此实际上这并没有改变任何东西。事实上，我们处于最坏的两个世界：一个可变引用到可变数据。'
- en: 'We haven’t finished though; we can make things even worse by making the `preferences`
    property in `PreferencesView` mutable too, so that we can set it to a new `UserPreferences`
    object when any UI elements are updated:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有完成；我们可以通过使 `PreferencesView` 中的 `preferences` 属性也可变来使情况更糟，以便在更新任何 UI
    元素时将其设置为新的 `UserPreferences` 对象：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 5.9 [beans-to-values.5:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.9&show=diff)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.9 [beans-to-values.5:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.9&show=diff)'
- en: 'Actually, we say “even worse,” but this has now removed all the uses of the
    setters on `UserPreferences`. Without setters, we can make it a proper value,
    initializing its properties in its constructor and never modifying them. In Kotlin
    this means changing the `var` properties to `val` and inlining any use of the
    default constructor. This allows us to reduce `UserPreferences` to:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们说“更糟”，但现在已删除了 `UserPreferences` 上所有 `setters` 的使用。没有 `setters`，我们可以将其变成一个真正的值，通过在其构造函数中初始化其属性并且永不修改它们来实现。在
    Kotlin 中，这意味着将 `var` 属性改为 `val` 并内联任何对默认构造函数的使用。这使我们可以将 `UserPreferences` 简化为：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 5.10 [beans-to-values.6:src/main/java/travelator/mobile/UserPreferences.kt]](https://java-to-kotlin.dev/code.html?ref=5.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.10&show=diff)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.10 [beans-to-values.6:src/main/java/travelator/mobile/UserPreferences.kt]](https://java-to-kotlin.dev/code.html?ref=5.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.10&show=diff)'
- en: The eagle-eyed reader will notice that we sneakily made `UserPreferences` a
    data class. We didn’t do that before now, because it was mutable. While Kotlin
    *allows* mutable data classes, we should be even more wary of them than of other
    mutable classes, because data classes implement `equals` and `hashCode`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的读者会注意到我们偷偷地将 `UserPreferences` 设为数据类。之前我们没有这样做，因为它是可变的。虽然 Kotlin *允许* 可变数据类，但我们对它们应该比对其他可变类更加警惕，因为数据类实现了
    `equals` 和 `hashCode`。
- en: What have we achieved so far? We’ve replaced two immutable references to shared
    mutable data with two mutable references to immutable values. Now we can see at
    a glance which views can update the preferences, and if we had to manage updates
    across threads, we could do that at the application level.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们取得了什么成就呢？我们用两个可变引用替换了共享可变数据的两个不可变引用。现在我们可以一眼看出哪些视图可以更新首选项，如果我们必须在线程之间管理更新，我们可以在应用程序级别进行管理。
- en: 'Having a mutable reference in `PreferencesView` is a bit irritating though.
    We can fix that by not holding a reference at all, but instead passing the preferences
    into `showModal`. `PreferencesView` doesn’t need a `UserPreferences` property;
    it can just distribute its values into the UI before it shows itself and gather
    them back in when it is done:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 `PreferencesView` 中拥有可变引用有点烦人。我们可以通过根本不持有引用，而是在 `showModal` 中将首选项传递进去来修复它。`PreferencesView`
    不需要 `UserPreferences` 属性；它只需在显示自身之前将其值分发到 UI，并在完成时重新收集它们：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 5.11 [beans-to-values.7:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.11&show=diff)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 5.11 [beans-to-values.7:src/main/java/travelator/mobile/PreferencesView.kt]](https://java-to-kotlin.dev/code.html?ref=5.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.11&show=diff)'
- en: 'There is still mutation here, because we are setting values into the pickers,
    but these are UI components and only have default constructors, so this has to
    happen somewhere. To finish the job, we also have to update `Application` to move
    the `preferences` argument from the `PreferencesView` constructor to `showModal`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里仍然存在突变，因为我们正在将值设置到选择器中，但这些是UI组件，并且只有默认构造函数，因此这必须发生在某个地方。为了完成工作，我们还必须更新`Application`，将`PreferencesView`构造函数中的`preferences`参数移动到`showModal`中：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 5.12 [beans-to-values.7:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=5.12&show=diff)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例5.12 [beans-to-values.7:src/main/java/travelator/mobile/Application.kt]](https://java-to-kotlin.dev/code.html?ref=5.12&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=5.12&show=diff)'
- en: Now we have only one place that preferences can change, made clear by the assignment
    in `editPreferences`. It is also clear that `showWelcome` can only read from the
    object. It may seem a bit of a waste to create a new `UserPreferences` to return
    from `showModal` even if nothing has changed. If you’re used to sharing mutable
    objects, it may even seem dangerous. In the world of values, though, two `UserPreferences`
    with the same values are to almost all intents and purposes the same object (see
    [“Object Equality”](#object-equality)), and you would have to be in a very constrained
    environment to detect the extra allocation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只有一个地方可以更改偏好设置，通过`editPreferences`中的赋值来明确。而且`showWelcome`只能从对象中读取是明确的。即使没有任何更改，从`showModal`返回一个新的`UserPreferences`可能看起来有点浪费。如果你习惯于共享可变对象，这甚至可能看起来是危险的。然而，在值的世界里，几乎所有意图相同的两个具有相同值的`UserPreferences`对象都是相同的（参见[“对象相等性”](#object-equality)），你必须在一个非常受限制的环境中才能检测到额外的分配。
- en: Moving On
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前进
- en: In this chapter we’ve seen some advantages of immutable values over mutable
    objects. The refactoring example showed how to migrate mutation toward our application’s
    entry points and event handlers by replacing immutable references to mutable objects
    with mutable references to immutable objects. The result is that less of our code
    has to deal with the consequences and complications of mutability.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了不可变值相对于可变对象的一些优点。重构示例展示了如何通过将对可变对象的不可变引用替换为对不可变对象的可变引用，将突变迁移到我们应用程序的入口点和事件处理程序。结果是，我们的代码不再需要处理可变性的后果和复杂性。
- en: That said, JavaBeans were designed for use in user interface frameworks, and
    UIs are in many ways the last bastion of mutable objects. If we had more exacting
    liveness requirements—for example, updating a `WelcomeView` when the greeting
    preference changed—we might prefer using shared objects with change events rather
    than using immutable values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，JavaBeans设计用于在用户界面框架中使用，并且从许多方面来看，UI是可变对象的最后堡垒。如果我们有更严格的活性需求——例如，在问候偏好更改时更新`WelcomeView`——我们可能更喜欢使用带有更改事件的共享对象，而不是使用不可变值。
- en: Converting mutable objects to values and transformations is a repeating motif.
    [Chapter 6, *Java to Kotlin Collections*](ch06.html#java-to-kotlin-collections),
    continues the discussion with respect to collections. [Chapter 14, *Accumulating
    Objects to Transformations*](ch14.html#accumulating-objects-to-transformations),
    looks at how to translate code that uses accumulating parameters to use higher-order
    functions over collections instead.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将可变对象转换为值和转换是一个重复的主题。[第6章，*Java到Kotlin集合*](ch06.html#java-to-kotlin-collections)，继续讨论与集合相关的内容。[第14章，*积累对象到转换*](ch14.html#accumulating-objects-to-transformations)，探讨了如何将使用累积参数的代码转换为使用集合的高阶函数。
