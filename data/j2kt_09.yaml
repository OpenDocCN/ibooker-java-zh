- en: Chapter 9\. Multi- to Single-Expression Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。多到单个表达式函数
- en: Nat and Duncan both love Kotlin’s single-expression function definitions. When
    should we use this form, why might we prefer it, and what Kotlin features can
    we use to make more functions single expressions?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Nat和Duncan都喜欢Kotlin的单个表达式函数定义。我们什么时候应该使用这种形式，为什么我们可能更喜欢它，并且我们可以使用哪些Kotlin功能使更多函数成为单个表达式？
- en: 'As with Java, the code in a Kotlin function is usually { defined inside braces
    } and uses `return` to define the result of the function (unless it is `Unit`,
    Kotlin’s alias for `void`):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与Java一样，Kotlin函数中的代码通常是{在大括号内定义}，并使用`return`来定义函数的结果（除非是`Unit`，Kotlin对`void`的别名）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the top level of the code is a single expression though, we can optionally
    drop the result type, and define the code with an expression after an equals sign:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果代码的顶层是单个表达式，则可以选择省略结果类型，并使用等号后的表达式定义代码：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can read this as: the result of function `add` equals `a + b`. Which makes
    sense for a single expression, and can also read nicely when that expression is
    itself composed of subexpressions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样阅读：函数`add`的结果等于`a + b`。这在单个表达式中是有意义的，当该表达式本身由子表达式组成时，也可以很好地阅读：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This interpretation makes less sense for functions that have side effects,
    especially those that perform I/O or write to mutable state. For instance:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有副作用的函数，特别是执行I/O或写入可变状态的函数，这种解释则变得不那么合理。例如：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can’t read this as the result of `printTwice` equals `println(..)`, because
    `println` doesn’t have a result, or at least it doesn’t return one. Its function
    is entirely side effects, as we explored in [Chapter 7](ch07.html#actions-to-calculations).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能将这读作`printTwice`的结果等于`println(..)`，因为`println`没有结果，或者至少它不返回结果。它的功能完全是副作用，正如我们在[第7章](ch07.html#actions-to-calculations)中探讨的那样。
- en: Reserve Single-Expression Functions for Calculations
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保留单个表达式函数用于计算
- en: If we adopt a convention of reserving single-expression functions for calculations
    ([“Calculations”](ch07.html#calculations)), then we have a way of communicating
    our intent when we use them. When we see a single-expression function, we will
    know that it isn’t an action ([“Actions”](ch07.html#actions)), and so is much
    safer to refactor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们采用保留单个表达式函数用于计算（[“计算”](ch07.html#calculations)）的惯例，那么当我们使用它们时，我们就有了一种传达意图的方式。当我们看到一个单个表达式函数时，我们会知道它不是一个动作（[“动作”](ch07.html#actions)），因此重构起来更安全。
- en: In practice this means that single-expression functions shouldn’t return `Unit`,
    or read or write from mutable state, including performing I/O.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着单个表达式函数不应返回`Unit`，也不应从可变状态中读取或写入，包括执行I/O。
- en: Your authors have found that attempting to make as many functions as possible
    into single expressions improves our software. For one thing, if we reserve the
    single-expression form for calculations, then this will decrease the proportion
    of our code that is [actions](ch07.html#actions), making it easier to understand
    and modify. Single expressions will also tend to be shorter than the alternative,
    limiting the complexity of each function. When a function does get too large to
    be easily understood, single-expression style lets us more easily refactor for
    clarity, because there is less risk of breaking logic that depends on side effects
    and the order in which actions are performed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作者发现，尝试将尽可能多的函数转换为单个表达式有助于改善我们的软件。首先，如果我们将单个表达式形式保留用于计算，那么这将减少我们的代码中是[动作](ch07.html#actions)的比例，使其更易于理解和修改。单个表达式还往往比替代方案更短，限制了每个函数的复杂性。当函数变得过大以至于难以理解时，单个表达式风格使我们更容易进行重构以提高清晰度，因为减少了依赖副作用和操作执行顺序的逻辑被破坏的风险。
- en: 'We also prefer expressions as opposed to statements. Expressions are *declarative*:
    we declare *what* we want the function to calculate and let the Kotlin compiler
    and runtime decide *how* to compute that calculation. We don’t have to run the
    code in a simulated computer in our heads to figure out what the function does.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也更喜欢表达式而不是语句。表达式是*声明性的*：我们声明我们希望函数计算什么，然后让Kotlin编译器和运行时决定如何计算该计算。我们不必在脑海中运行代码来弄清楚函数的功能。
- en: 'For example, at the end of [Chapter 3](ch03.html#java-to-kotlin-classes) we
    were left with this code for `EmailAddress`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在[第3章](ch03.html#java-to-kotlin-classes)的末尾，我们留下了`EmailAddress`的这段代码：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 9.1 [single-expressions.0:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.1&show=diff)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.1 [single-expressions.0:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.1&show=diff)'
- en: The `toString` method is already a nice simple single expression. As we said
    at the time though, the amount of code required in the `parse` method adds insult
    to the injury of having to declare static methods in a companion object. Maybe
    focusing on making the function into a simple single expression would help?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString`方法已经是一个很好的简单单一表达式。不过，正如我们当时所说的，`parse`方法中所需的代码量对于不得不在伴生对象中声明静态方法这一事实来说更是一种侮辱。也许专注于使函数成为一个简单的单一表达式会有所帮助？'
- en: 'Before we go on, we should say that lots of the refactoring sequences presented
    in this book are of the form “Here’s one I prepared earlier.” We show you the
    successful take. Real-life refactorings, like writing code from scratch, aren’t
    like that. We try things that don’t work at all, or we take a much more circuitous
    route than we show in the final edit. Because this is an otherwise small example,
    we’ve taken this opportunity to show what actually happened when we tried to convert
    `parse` to a single expression. We think that there are valuable lessons in the
    journey, but if you just want the destination, you should skip ahead to [“Take
    4: Stepping Back”](#take-4).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们应该说一下，本书中呈现的许多重构序列都是“这是我之前准备好的一个”。我们向你展示了成功的步骤。而现实生活中的重构，就像从头开始编写代码一样，不会像这样。我们尝试的事情根本行不通，或者我们采取的路线比最终编辑中展示的要绕远得多。因为这只是一个相对较小的例子，我们抓住了这个机会展示了当我们试图将`parse`转换为单一表达式时实际发生的情况。我们认为在这个过程中有宝贵的经验教训，但如果你只想要最终结果，你应该跳到[“第4步：退后一步”](#take-4)。
- en: 'Take 1: Inlining'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1步：内联
- en: 'Let’s analyze the code and see what is preventing this function from being
    a nice single expression:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下代码，看看是什么阻止了这个函数成为一个很好的单一表达式：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 9.2 [single-expressions.1:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.2&show=diff)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.2 [single-expressions.1:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.2&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO16-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO16-1)'
- en: Assigning to `atIndex` is a statement.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对`atIndex`的赋值是一个语句。
- en: '[![2](assets/2.png)](#co_introduction_CO16-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_CO16-2)'
- en: The call to `require` is a statement.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对`require`的调用是一个语句。
- en: '[![3](assets/3.png)](#co_introduction_CO16-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introduction_CO16-3)'
- en: Creating the `EmailAddress` is a single expression, depending on `value` and
    `atIndex`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`EmailAddress`是一个单一表达式，依赖于`value`和`atIndex`。
- en: 'The first statement is the assignment to `atIndex`. In Kotlin, assignment is
    a statement, not an expression (unlike Java, where we can chain assignments).
    Its position in the code also matters—it has to happen here in the code for the
    value of `atIndex` to be available to compile the rest of the function. The expression
    bound to the variable, `value.lastIndexOf(Char)`, is a calculation though, meaning
    that it will always return the same result for the same arguments (`this` is considered
    an argument when we call methods). As a result, we can inline the variable `atIndex`
    without changing the result of the function, giving:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个语句是对`atIndex`的赋值。在 Kotlin 中，赋值是一个语句，而不是一个表达式（不像 Java，我们可以链式赋值）。它在代码中的位置也很重要——它必须在这里发生，以便将`atIndex`的值可用于编译函数的其余部分。然而，绑定到变量的表达式，`value.lastIndexOf(Char)`是一个计算，这意味着对于相同的参数它总是返回相同的结果（当我们调用方法时，`this`被视为一个参数）。因此，我们可以内联变量`atIndex`而不改变函数的结果，得到：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 9.3 [single-expressions.2:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.3&show=diff)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.3 [single-expressions.2:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.3&show=diff)'
- en: This version won’t produce the same bytecode, nor run as fast (probably, it’s
    notoriously difficult to second-guess HotSpot), but it will return the same result.
    We still have that `require` call to deal with, though, and we seem to have made
    everything a bit less understandable already, so let’s revert the change and try
    another tack.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本不会产生相同的字节码，也不会运行得那么快（可能是因为极难预测HotSpot的行为），但它会返回相同的结果。尽管如此，我们仍然需要处理那个`require`调用，并且似乎已经让一切变得更加难懂了，所以让我们撤销这个改动，尝试另一种方法。
- en: 'Take 2: Introduce a Function'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二次尝试：引入一个函数
- en: 'Another way to remove the assignment statement is to have a scope where `atIndex`
    is always defined. We could use a function as such a scope, because a function
    binds a single evaluation of its arguments to its parameters. We can see this
    by selecting all but the code before the assignment and extracting a function
    `emailAddress`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种移除赋值语句的方法是有一个范围，在这个范围内`atIndex`总是被定义的。我们可以使用一个函数作为这样一个范围，因为函数将其参数绑定到其参数的单次评估。通过选择赋值语句之前的所有代码并提取一个函数`emailAddress`，我们可以看到这一点：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 9.4 [single-expressions.3:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.4&show=diff)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.4 [single-expressions.3:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.4&show=diff)'
- en: 'Now we can inline the `atIndex` variable in `parse`, because the `atIndex`
    parameter has captured its value for us:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以内联`parse`中的`atIndex`变量，因为`atIndex`参数已经为我们捕获了它的值：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 9.5 [single-expressions.4:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.5&show=diff)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.5 [single-expressions.4:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.5&show=diff)'
- en: Now `parse` is a single expression, but `emailAddress(...)` isn’t, so we can’t
    declare victory just yet. That `require` is always going to cause us some problems,
    because its job is to prevent evaluation from proceeding. This is the opposite
    of an expression, which needs to evaluate to a value.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`parse`是一个单表达式，但`emailAddress(...)`不是，所以我们还不能宣布胜利。`require`总是会给我们带来一些问题，因为它的工作是阻止评估继续进行。这与表达式相反，表达式需要评估为一个值。
- en: Often when we reach this sort of impasse when refactoring, inlining the cause
    of the problem will let us see the way ahead. So let’s inline `require`. (Suspend
    disbelief for now; things are going to get worse before they get better.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在重构时遇到这种僵局时，经常内联问题的原因会让我们看到前进的道路。所以让我们内联`require`。（暂时搁置怀疑吧；事情会变得更糟再变好。）
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 9.6 [single-expressions.5:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.6&show=diff)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.6 [single-expressions.5:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.6&show=diff)'
- en: 'There’s an awful lot of redundancy that we can remove here. Alt-Enter on the
    `if` condition will remove the double-negation `!!`, and then Alt-Enter on the
    redundant `toString` will remove it. This allows us to inline `message`, yielding:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多冗余，我们可以移除它。在`if`条件上按Alt-Enter将移除双重否定`!!`，然后在多余的`toString`上按Alt-Enter将移除它。这使我们能够内联`message`，产生：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 9.7 [single-expressions.6:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.7&show=diff)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.7 [single-expressions.6:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.7&show=diff)'
- en: 'Now we can introduce an `else` to see the structure:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以引入一个`else`来看结构：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 9.8 [single-expressions.7:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.8&show=diff)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.8 [single-expressions.7:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.8&show=diff)'
- en: 'At this point we have a function with two statements chosen by an `if`. This
    is so tantalizingly close to a single expression that even the IDE can feel it:
    Alt-Enter on the `if`, and IntelliJ offers to “Lift return out of ‘if’”:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们有一个由`if`选择的两个语句的函数。这离单表达式如此诱人，以至于甚至IDE都能感觉到它：在`if`上按Alt-Enter，IntelliJ提供“将返回值从‘if’中提取出来”：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Example 9.9 [single-expressions.8:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.9&show=diff)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.9 [single-expressions.8:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.9&show=diff)'
- en: 'There it is—our single expression. Alt-Enter on the `return` offers “Convert
    to expression body”:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就在那里——我们的单表达式。在`return`上按Alt-Enter提供“转换为表达式体”：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Example 9.10 [single-expressions.9:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.10&show=diff)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.10 [single-expressions.9:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.10&show=diff)'
- en: 'When we’re defining a function as a single expression, `when` is often clearer
    than `if`. IntelliJ will do this for us if we Alt-Enter on the `if`. Here we’ve
    also removed unnecessary braces, inlined `message`, and finally converted `parse`
    to a single expression too:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将函数定义为单个表达式时，使用`when`通常比`if`更清晰。如果我们在`if`上按下Alt-Enter，IntelliJ将为我们执行此操作。在这里，我们还去掉了不必要的大括号，内联了`message`，最后将`parse`也转换为了单个表达式：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 9.11 [single-expressions.10:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.11&show=diff)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.11 [single-expressions.10:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.11&show=diff)'
- en: 'For comparison, here is the original:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 比较一下，这是原始的代码：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Example 9.12 [single-expressions.11:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.12&show=diff)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.12 [single-expressions.11:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.12&show=diff)'
- en: Are we happy with the result?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对结果满意吗？
- en: Not really. We now have *more* code, and that `emailAddress` function doesn’t
    feel like it’s adding any value except for capturing `atIndex`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并非如此。我们现在有了更多代码，而那个`emailAddress`函数似乎除了捕获`atIndex`之外没有增加任何值。
- en: Refactoring is often a process of exploration. We have a goal in mind, but don’t
    always know how it will turn out. It’s our (your authors’) experience that trying
    to find a single-expression form of a function often improves our code, but we
    can’t look you in the eye and say that has happened here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 重构通常是一个探索过程。我们心中有一个目标，但并不总能预见结果。我们（作者）的经验是，尝试找到函数的单个表达式形式通常会改进我们的代码，但我们无法对你说在这里发生了什么。
- en: We could give up on the idea, or we could push on and try to get there from
    here. Instead though, let’s revert and try a third approach, informed by the experience
    we’ve just gained.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以放弃这个想法，或者我们可以继续努力并尝试从这里达到目标。不过，让我们回到原点，尝试第三种方法，这种方法受到我们刚刚获得的经验的启发。
- en: 'Take 3: Let'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Take 3: Let'
- en: 'The reason we extracted the `emailAddress` function was to give us a scope
    where the `atIndex` value is defined throughout the block; rather than having
    to be assigned to a local variable. Where we only have one variable we need to
    replace, a `let` block gives us this facility without having to define a function.
    We can get there in baby steps by first surrounding the code after the assignment
    with a `let`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提取`emailAddress`函数的原因是为了给我们一个范围，在这个范围内`atIndex`的值在整个块中都是定义的，而不必被分配给一个局部变量。当我们只需要替换一个变量时，使用`let`块可以为我们提供这个功能，而不必定义一个函数。我们可以通过先在赋值后的代码周围添加`let`来逐步实现这一点：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 9.13 [single-expressions.12:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.13&show=diff)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.13 [single-expressions.12:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.13&show=diff)'
- en: 'Now we can lift the return out of the `let`; unfortunately IntelliJ doesn’t
    offer to help us this time:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将`let`块外的返回值提取出来；不幸的是，IntelliJ这次没有提供帮助：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 9.14 [single-expressions.13:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.14&show=diff)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.14 [single-expressions.13:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.14&show=diff)'
- en: 'Currently, `atIndex` in the `let` block refers to the local that we are trying
    to remove. If we add a lambda parameter with the same name, it will bind to that
    instead:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，在`let`块中，`atIndex`指的是我们试图删除的本地变量。如果我们添加一个同名的lambda参数，它将绑定到那个参数：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Example 9.15 [single-expressions.14:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.15&show=diff)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.15 [single-expressions.14:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.15&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO17-1)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO17-1)'
- en: '`Warning Name shadowed: atIndex`, which is the point'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`警告名称遮蔽：atIndex`，这就是重点'
- en: 'Inline the `atIndex` variable and we have our single expression:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将`atIndex`变量内联，我们就得到了我们的单个表达式：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[Example 9.16 [single-expressions.15:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.16&show=diff)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.16 [single-expressions.15:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.16&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.16&show=diff)'
- en: 'Now Alt-Enter on the return lets us “Convert to expression body”:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在返回上按下Alt-Enter，让我们“转换为表达式主体”：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Example 9.17 [single-expressions.16:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.17&show=diff)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.17 [single-expressions.16:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.17&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.17&show=diff)'
- en: We’ve reached the point of no return! Are we happy with the result?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了无法回头的地步！我们对结果满意吗？
- en: Duncan is writing this, and he *is* pretty relieved to have made it here after
    15 refactoring steps. The example has certainly served its purpose of showing
    some tricks to allow us to get to single-expression functions. Nevertheless, he
    isn’t convinced that it has demonstrated that seeking single expressions has a
    significant payoff. This still seems to be a lot of code, and none of it feels
    like it is earning its keep.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 邓肯正在写这个，他*确实*在经过15次重构步骤后来到这里感到相当欣慰。这个示例确实达到了展示一些技巧的目的，使我们能够实现单个表达式函数。尽管如此，他并不认为这证明了追求单个表达式会带来显著回报。这仍然似乎是很多代码，而且没有一行代码感觉像是在发挥作用。
- en: Can we make this better by raising the level of abstraction? Let’s try a fourth
    tack.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否可以通过提高抽象级别来改进这一点？让我们尝试第四种方法。
- en: 'Take 4: Stepping Back'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四步：退一步
- en: If we step out from the mechanical refactorings, we can see that what we are
    doing is creating an `EmailAddress` from two nonempty strings separated by a particular
    character, `@` in this case. Finding two nonempty strings separated by a character
    sounds like a higher-level concept that we could refactor toward.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们迈出机械重构的步伐，我们会发现我们正在创建一个`EmailAddress`，它由两个非空字符串组成，这两个字符串由特定字符`@`分隔，本例中为`@`。找到两个由字符分隔的非空字符串听起来像是一个我们可以朝着重构的高级概念。
- en: 'One last revert, then, back to:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后回滚一次，然后返回到：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[Example 9.18 [single-expressions.17:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.18&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.18&show=diff)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.18 [single-expressions.17:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.18&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.18&show=diff)'
- en: 'This time we’ll concentrate not on `atIndex`, but on those `substring` calls.
    We’ll pull them out into variables:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们不集中精力在`atIndex`上，而是集中精力在那些`substring`调用上。我们将它们提取到变量中：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[Example 9.19 [single-expressions.18:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.19&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.19&show=diff)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.19 [single-expressions.18:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.19&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.19&show=diff)'
- en: 'Now, one more time with feeling. We can extract a function of all but the return
    statement:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再来一次，有感觉的一次。我们可以提取除了返回语句以外的所有函数：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[Example 9.20 [single-expressions.19:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.20&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.20&show=diff)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.20 [single-expressions.19:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.20&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.20&show=diff)'
- en: IntelliJ turns out to be really quite clever here, making the result a `Pair`
    because it has two values to return.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ 在这里表现得非常聪明，将结果变为了一个`Pair`，因为它有两个值需要返回。
- en: 'This `split` would be a nice generic function that we might use in other places
    if it was parameterized with the character. “Introduce Parameter” on the `''@''`
    makes that so. We “Convert parameter to receiver” on `value` while we’re there
    to get a little local extension function:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`split`将是一个很好的通用函数，如果它是由字符参数化的话，我们可能会在其他地方使用它。“引入参数”在`'@'`上让这成为可能。我们在那里时“将参数转换为接收者”在`value`上得到一个小的局部扩展函数：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[Example 9.21 [single-expressions.20:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.21&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.21&show=diff)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.21 [single-expressions.20:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.21&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=9.21&show=diff)'
- en: 'Now we can introduce a `let`, as we did previously, to get:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以引入一个`let`，就像之前所做的那样，得到：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[Example 9.22 [single-expressions.21:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.22&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.22&show=diff)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.22 [single-expressions.21:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.22&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.22&show=diff)'
- en: This, finally, is a single-expression function that feels worth the effort!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这确实是一个值得努力的单表达式函数！
- en: 'To finish, we can apply the techniques from this chapter to `split` to make
    it a single expression, too. Here then is the final `EmailAddress.kt`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以应用本章的技术来使 `split` 成为单表达式。因此，这里是最终的 `EmailAddress.kt`：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[Example 9.23 [single-expressions.22:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.23&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.23&show=diff)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9.23 [single-expressions.22:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=9.23&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=9.23&show=diff)'
- en: '`splitAroundLast` felt like a better name that doesn’t clash with the standard
    `String.split`, and hints that both sides of the split must be nonempty. Words
    like *around*, which are unusual in identifiers, should prompt readers of the
    code to suspend their assumptions about what a function does and actually look
    it up.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`splitAroundLast` 感觉像一个更好的名称，不会与标准的 `String.split` 冲突，并且暗示分割的两侧都必须非空。像 *around*
    这样在标识符中不寻常的词语，应该提示代码的读者暂时搁置对函数实际操作的假设，并实际查找它。'
- en: Although `splitAroundLast` does feel like a generally applicable utility function,
    if we want to promote it to be public, we should probably write some unit tests
    for it. We’ve spent enough time for today though, so we’ll make a mental note
    that we have a `String.splitAroundLast` lying around if we ever need one, and
    finally commit the change.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `splitAroundLast` 确实感觉像一个通用的实用函数，如果我们想将其提升为公共函数，我们应该为其编写一些单元测试。尽管今天我们已经花了足够的时间，但我们将心里记下如果将来需要一个
    `String.splitAroundLast`，最后提交这个更改。
- en: Moving On
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前行
- en: Defining our calculations as single-expression functions lets us communicate
    that they are different from side-effecting actions. Trying to express functions
    as a simple single expression is a useful discipline that can lead to well-factored,
    clean code. To achieve single-expression form, we usually have to factor out subexpressions
    into their own functions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的计算定义为单表达式函数可以让我们传达它们与具有副作用的操作不同的信息。试图将函数表达为简单的单表达式是一种有用的纪律，可以导致良好分解的干净代码。要实现单表达式形式，通常需要将子表达式分解为它们自己的函数。
- en: 'Single-expression form is declarative: the expression describes the function’s
    result in terms of its parameters rather than the actions that the computer must
    perform to compute the result. Factoring subexpressions into their own functions
    prompts us to think about what those subexpressions should be denoting, and so
    guides us to write clearer code. For example, `String.splitAroundLast(''@'')`
    better described what we wanted to calculate than `emailAddress(value: String,
    atIndex: Int)`.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '单表达式形式是声明性的：表达式描述了函数的结果，而不是计算结果所需的计算机操作。将子表达式分解为它们自己的函数促使我们考虑这些子表达式应表示什么，因此引导我们编写更清晰的代码。例如，`String.splitAroundLast(''@'')`
    更好地描述了我们想计算的内容，而不是 `emailAddress(value: String, atIndex: Int)`。'
- en: At a deeper level, this chapter is about more than single expressions; it’s
    about how we can rearrange our code without changing its behavior. Many different
    arrangements of statements and expressions will have the same behavior; refactoring
    is the art of finding a better one, and getting there safely. The more arrangements
    we can visualize, and the more safe routes we can plan, the more options we have
    to make our code better.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在更深层次上，本章不仅关于单表达式；它还关于我们如何重新排列代码而不改变其行为。许多不同的语句和表达式排列方式将具有相同的行为；重构是找到更好排列方式的艺术，并安全地达到那里。我们能够可视化的排列方式越多，我们能够规划的安全路径越多，我们就有越多选项来改进我们的代码。
- en: Refactorings don’t always succeed the first, second, or even third time we try
    them. As developers, we don’t always have the luxury of repeated attempts, but
    the more we practice improving our communication in code, the more often we’ll
    get there before we have to give up and move on.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重构并不总是在第一次、第二次甚至第三次尝试时成功。作为开发者，我们并不总能有重复尝试的奢侈，但是我们练习改进代码中的沟通方式的次数越多，我们就越能在放弃之前达到目标。
