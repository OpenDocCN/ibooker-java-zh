- en: Chapter 13\. Platform Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。平台工具
- en: This chapter discusses the tools that ship with the OpenJDK version of the Java
    platform. The tools covered are all command-line tools. If you are using a different
    version of Java, you may find different tools as part of your distribution but
    with similar function.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了Java平台的OpenJDK版本附带的工具。所涵盖的工具都是命令行工具。如果您使用的是其他版本的Java，您可能会发现在您的分发版本中有不同的工具，但功能类似。
- en: 'Later in the chapter, we devote dedicated sections to two tools: `jshell`,
    which introduced interactive development to the Java platform, and Java Flight
    Recorder (JFR) tooling for deep profiling of Java applications.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，我们将专门为两个工具分配专门的部分：`jshell`，它将交互式开发引入了Java平台，以及用于深度分析Java应用程序的Java Flight
    Recorder（JFR）工具。
- en: Command-Line Tools
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行工具
- en: The command-line tools we cover are the most commonly used tools and those of
    greatest utility—they are not a complete description of every available tool.
    In particular, tools concerned with CORBA and the server portion of RMI are not
    covered, as these modules were removed from the platform with the release of Java
    11.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖的命令行工具是最常用的工具和最有用的工具，它们不是每个可用工具的完整描述。特别是与CORBA和RMI服务器部分有关的工具未涵盖，因为这些模块在Java
    11发布时从平台中删除了。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In some cases, we need to discuss switches that take filesystem paths. As elsewhere
    in the book, we use Unix conventions for such cases.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们需要讨论接受文件系统路径的开关。与本书的其他地方一样，我们在这种情况下使用Unix约定。
- en: 'Below we’ll discuss the following tools, including their basic usage, description,
    and common switches:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们将讨论以下工具，包括它们的基本用法、描述和常用开关：
- en: '`javac`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javac`'
- en: '`java`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java`'
- en: '`jar`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jar`'
- en: '`javadoc`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javadoc`'
- en: '`jdeps`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jdeps`'
- en: '`jps`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jps`'
- en: '`jstat`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jstat`'
- en: '`jstatd`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jstatd`'
- en: '`jinfo`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jinfo`'
- en: '`jstack`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jstack`'
- en: '`jmap`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jmap`'
- en: '`javap`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javap`'
- en: '`jlink`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jlink`'
- en: '`jmod`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jmod`'
- en: '`jcmd`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jcmd`'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Options described throughout are targeted at Java 17 and may vary in older Java
    versions. For example, `--class-path` was introduced when `--module-path` became
    an option but won’t work on Java 8 and earlier (which require `-cp` or `--classpath`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 整个描述的选项都针对Java 17，并且在较旧的Java版本中可能会有所不同。例如，`--class-path` 是在 `--module-path`
    成为选项时引入的，但在Java 8及更早版本中不起作用（它们需要 `-cp` 或 `--classpath`）。
- en: javac
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: javac
- en: Basic usage
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`bjavac *some*/*package*/MyClass.java`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`bjavac *some*/*package*/MyClass.java`'
- en: Description
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`javac` is the Java source code  compiler—it produces bytecode (in the form
    of *.class* files) from *.java* source files.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`javac` 是Java源代码编译器——它从 *.java* 源文件生成字节码（以 *.class* 文件的形式）。'
- en: For modern Java projects, `javac` is not often used directly, as it is rather
    low-level and unwieldy, especially for larger codebases. Instead, modern integrated
    development environments (IDEs) either drive `javac` automatically for the developer
    or have built-in compilers for use while code is being written. For deployment,
    most projects will use a separate build tool, most commonly Maven or Gradle. Discussion
    of these tools is outside the scope of this book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现代Java项目，`javac` 不经常直接使用，因为它相当低级且笨重，特别是对于较大的代码库。相反，现代集成开发环境（IDE）要么自动为开发人员驱动
    `javac`，要么在编写代码时具有内置编译器供使用。对于部署，大多数项目将使用单独的构建工具，最常见的是Maven或Gradle。这些工具的讨论超出了本书的范围。
- en: Nevertheless, it is useful for developers to understand how to use `javac`,
    as there are cases when compiling small codebases by hand is preferable to having
    to install and manage a production-grade build tool such as Maven.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，对于开发人员来说，了解如何使用 `javac` 是有用的，因为有些情况下，通过手动编译小型代码库比安装和管理Maven等生产级构建工具更可取。
- en: Common switches
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常用开关
- en: '`-cp`, `--class-path *<path>*`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cp`，`--class-path *<path>*`'
- en: Supply classes we need for compilation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为编译提供我们需要的类。
- en: '`-p`, `--module-path *<path>*`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`，`--module-path *<path>*`'
- en: Supply application modules for compilation. See [Chapter 12](ch12.xhtml#javanut8-CHP-12)
    for a full discussion of Java modules.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为编译提供应用程序模块。请参阅[第12章](ch12.xhtml#javanut8-CHP-12)以了解Java模块的全面讨论。
- en: '`-d *some*/*dir*`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d *some*/*dir*`'
- en: Tell `javac` where to output class files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉 `javac` 输出类文件的位置。
- en: '`@project.list`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`@project.list`'
- en: Load options and source files from the file *project.list*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件 *project.list* 加载选项和源文件。
- en: '`-help`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`-help`'
- en: Help on options.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的帮助。
- en: '`-X`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`-X`'
- en: Help on nonstandard options.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 非标准选项的帮助。
- en: '`-source *<version>*`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`-source *<version>*`'
- en: Control the Java version that `javac` will accept.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 `javac` 将接受的Java版本。
- en: '`-target *<version>*`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`-target *<version>*`'
- en: Control the version of class files that `javac` will output.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 `javac` 将输出的类文件的版本。
- en: '`-profile *<profile>*`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`-profile *<profile>*`'
- en: Control the profile that `javac` will use when compiling the application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 `javac` 编译应用程序时将使用的配置文件。
- en: '`-Xlint`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xlint`'
- en: Enable detail about warnings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 启用有关警告的详细信息。
- en: '`-Xstdout *<path>*`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xstdout *<path>*`'
- en: Redirect output of compilation run to a file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译运行的输出重定向到文件。
- en: '`-g`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`-g`'
- en: Add debug information to class files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 向类文件添加调试信息。
- en: Notes
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 笔记
- en: '`javac` has traditionally accepted switches (`-source` and `-target`) that
    control the version of the source language that the compiler accepts and the version
    of the class file format used for the outputted class files.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`javac` 传统上接受控制编译器接受的源语言版本和用于输出类文件的类文件格式版本的开关（`-source` 和 `-target`）。'
- en: This facility introduces additional compiler complexity (as multiple language
    syntaxes must be supported internally) for some small developer benefit. In Java
    8, this capability was slightly tidied up and placed on a more formal basis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能引入了额外的编译器复杂性（因为必须内部支持多种语言语法），以换取一些小型开发人员的利益。在 Java 8 中，这种能力稍作整理并放置在更加正式的基础上。
- en: From JDK 8 onward, `javac` will only accept source and target options from three
    versions back. That is, only the formats from JDK 5, 6, 7, and 8 will be accepted
    by `javac` version 8\. This does not affect the `java` interpreter—any class file
    from any Java version will still work on the JVM shipped with Java 8.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从 JDK 8 开始，`javac` 只接受来自三个版本之前的源和目标选项。也就是说，`javac` 版本 8 只接受 JDK 5、6、7 和 8 的格式。这不影响
    `java` 解释器——任何 Java 版本的类文件仍将在 Java 8 附带的 JVM 上正常工作。
- en: C and C++ developers may find that the `-g` switch is less helpful to them than
    it is in those other languages. This is largely due to the widespread use of IDEs
    in the Java ecosystem—integrated debugging is simply a lot more useful, and easier
    to use, than additional debug symbols in class files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: C 和 C++ 开发人员可能会发现，与这些其他语言相比，`-g` 开关对他们的帮助较少。这在很大程度上是因为 Java 生态系统中广泛使用的 IDE——集成调试比在类文件中添加额外的调试符号简单得多，也更加有用。
- en: The use of the lint capability remains somewhat controversial among developers.
    Many Java developers produce code that triggers a large number of compilation
    warnings, which they then simply ignore. However, experience on larger codebases
    (especially on the JDK codebase itself) suggests that in a substantial percentage
    of cases, code that triggers warnings is code in which subtle bugs may lurk. Use
    of the lint feature, or static analysis tools (such as SpotBugs), is strongly
    recommended.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发人员中，对于 lint 功能的使用仍然存在一些争议。许多 Java 开发人员生成触发大量编译警告的代码，然后简单地忽略它们。但是，在更大的代码库（特别是
    JDK 代码库本身）中的经验表明，在相当大的比例的情况下，触发警告的代码是隐藏着微妙错误的代码。强烈建议使用 lint 功能或静态分析工具（例如 SpotBugs）。
- en: java
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: java
- en: Basic usage
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: b`java some.package.MyClass`
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`java some.package.MyClass`'
- en: '`java -jar my-packaged.jar`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`java -jar my-packaged.jar`'
- en: Description
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`java` is the executable that starts up a Java Virtual Machine. The initial
    entry point into the program is the `main()` method that exists on the named class
    and that has the signature:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`java` 是启动 Java 虚拟机的可执行文件。程序的初始入口点是存在于指定类上的 `main()` 方法，其签名为：'
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This method is run on the single application thread created by the JVM startup.
    The JVM process will exit once this method returns (and any additional nondaemon
    application threads that were started have terminated).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在由 JVM 启动创建的单个应用程序线程上运行。一旦此方法返回（以及任何额外启动的非守护应用程序线程终止），JVM 进程将退出。
- en: If the form takes a JAR file rather than a class (the executable JAR form),
    the JAR file must contain a piece of metadata that tells the JVM which class to
    start from.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果形式使用 JAR 文件而不是类（可执行的 JAR 形式），则 JAR 文件必须包含一段元数据，告诉 JVM 从哪个类开始启动。
- en: 'This bit of metadata is the `Main-Class`: attribute, and it is contained in
    the *MANIFEST.MF* file in the *META-INF/* directory. See the description of the
    `jar` tool for more details.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段元数据是 `Main-Class` 属性，包含在 *META-INF/* 目录中的 *MANIFEST.MF* 文件中。有关更多详细信息，请参阅 `jar`
    工具的描述。
- en: Common switches
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-cp`, `--class-path *<path>*`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cp`, `--class-path *<path>*`'
- en: Define the classpath to read from.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 定义从中读取的类路径。
- en: '`-p`, `--module-path *<path>*`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`, `--module-path *<path>*`'
- en: Define the path to find modules.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 定义查找模块的路径。
- en: '`--list-modules`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`--list-modules`'
- en: List modules found with current settings and exits.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 找到当前设置中的模块列表并退出。
- en: '`-X`, `-?`, `-help`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`-X`, `-?`, `-help`'
- en: Provide help about the `java` executable and its switches.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提供关于 `java` 可执行文件及其开关的帮助。
- en: '`-D*<property=value>*`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D*<property=value>*`'
- en: Set a Java system property that can be retrieved by the Java program. Any number
    of such properties can be specified this way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个可以被 Java 程序检索的 Java 系统属性。可以通过这种方式指定任意数量的这种属性。
- en: '`-jar`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`-jar`'
- en: Run an executable JAR (see [the entry for `jar`](#refname_jar)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一个可执行的 JAR 文件（参见 [`jar`](#refname_jar) 条目）。
- en: '`-Xbootclasspath(/a or /p)`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xbootclasspath(/a or /p)`'
- en: Run with an alternative system classpath (very rarely used).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用替代的系统类路径运行（极少使用）。
- en: '`-client`, `-server`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`-client`, `-server`'
- en: Select a HotSpot JIT compiler (see [“Notes” for this entry](#_notes_2)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 HotSpot JIT 编译器（参见 [“Notes” for this entry](#_notes_2)）。
- en: '`-Xint`, `-Xcomp`, `-Xmixed`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xint`, `-Xcomp`, `-Xmixed`'
- en: Control JIT compilation (very rarely used).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 JIT 编译（很少使用）。
- en: '`-Xms*<size>*`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xms*<size>*`'
- en: Set the minimum committed heap size for the JVM.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 JVM 的最小已提交堆大小。
- en: '`-Xmx*<size>*`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`-Xmx*<size>*`'
- en: Set the maximum committed heap size for the JVM.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为 JVM 设置最大的已提交堆大小。
- en: '`-agentlib:*<agent>*`, `-agentpath:*<path to agent>*`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`-agentlib:*<agent>*`, `-agentpath:*<path to agent>*`'
- en: Specify a JVM Tooling Interface (JVMTI) agent to attach to the process being
    started. Agents are typically used for instrumentation or monitoring.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 指定一个 JVM 工具接口（JVMTI）代理程序附加到正在启动的进程。代理通常用于仪器化或监控。
- en: '`-verbose`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`-verbose`'
- en: Generate additional output, sometimes useful for debugging.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 生成额外的输出，有时用于调试。
- en: Notes
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Notes
- en: The HotSpot VM contains two separate JIT compilers—known as the client (or C1)
    compiler and the server (or C2) compiler. These were designed for different purposes, with
    the client compiler offering more predictable performance and quicker startup,
    at the expense of not performing aggressive code optimization.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: HotSpot VM 包含两个单独的 JIT 编译器——称为客户端（或 C1）编译器和服务器（或 C2）编译器。它们设计用于不同目的，客户端编译器提供更可预测的性能和更快的启动速度，但牺牲了不执行激进代码优化的性能。
- en: Traditionally, the JIT compiler that a Java process used was chosen at process
    startup via the `-client` or `-server` switch. However, as hardware advances have
    made compilation ever cheaper, a new possibility has become available—to use the
    client compiler early on, while the Java process is warming up, and then to switch
    to the high-performance optimizations available in the server compiler when they
    are available. This scheme is called Tiered Compilation, and it is the default
    in Java 8\. Most processes will no longer need explicit `-client` or `-server`
    switches.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Java 进程使用的 JIT 编译器是通过 `-client` 或 `-server` 开关在进程启动时选择的。然而，随着硬件的进步使得编译成本越来越低，出现了一种新的可能性——在
    Java 进程热身时使用客户端编译器，然后在可用时切换到服务器编译器进行高性能优化。这种方案称为分层编译，它是 Java 8 的默认设置。大多数进程将不再需要显式的
    `-client` 或 `-server` 开关。
- en: On the Windows platform, a slightly different version of the `java` executable
    is often used—`javaw`. This version starts up a Java Virtual Machine, without
    forcing a Windows console window to appear.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 平台上，通常会使用稍微不同版本的 `java` 可执行文件——`javaw`。此版本启动一个 Java 虚拟机，而不会强制出现 Windows
    控制台窗口。
- en: In older Java versions, a number of different legacy interpreters and virtual
    machine modes were supported. These have now mostly been removed and any remaining
    should be regarded as vestigial.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在较旧的 Java 版本中，支持多种不同的遗留解释器和虚拟机模式。现在这些大多数已经被移除，任何剩余的应被视为残留的。
- en: 'Switches that start with `-X` were intended to be nonstandard switches. However,
    the trend has been to standardize a number of these switches (particularly `-Xms`
    and `-Xmx`). In parallel, Java versions have introduced an increasing number of
    `-XX`: switches. These were intended to be experimental and not for production
    use. However, as the implementations have stabilized, some of these switches are
    now suitable for some advanced users (even in production deployments).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `-X` 开头的开关原本是非标准的开关。然而，趋势已经向标准化了一些这些开关（特别是 `-Xms` 和 `-Xmx`）。与此同时，Java 版本引入了越来越多的
    `-XX:` 开关。这些开关原本是实验性的，不适合生产使用。然而，随着实现的稳定，一些这些开关现在适合一些高级用户（甚至在生产部署中使用）。
- en: In general, a full discussion of switches is outside the scope of this book.
    Configuration of the JVM for production use is a specialist subject, and developers
    are urged to take care, especially when modifying any switches related to the
    garbage collection subsystem.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，详细讨论开关超出了本书的范围。为了生产使用配置 JVM 是一个专业的主题，建议开发人员特别注意，尤其是在修改与垃圾收集子系统相关的任何开关时。
- en: jar
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: jar
- en: Basic usage
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jar cvf my.jar *someDir/*`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar cvf my.jar *someDir/*`'
- en: Description
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: The `jar` utility is used to create and manipulate Java Archive (*.jar*) files.
    These are ZIP format files that contain Java classes, additional resources, and
    (usually) metadata. The tool has five major modes of operation—Create, Update,
    Index, List, and Extract—on a JAR file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar`实用程序用于创建和操作Java存档（*.jar*）文件。这些是包含Java类、额外资源和（通常）元数据的ZIP格式文件。该工具在一个JAR文件上有五种主要的操作模式——创建、更新、索引、列出和提取。'
- en: These are controlled by passing a command option character (not a switch) to
    `jar`. Only one command character can be specified, but optional modifier characters
    can also be used.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些由传递给`jar`的命令选项字符（而不是开关）来控制。只能指定一个命令字符，但也可以使用可选的修饰符字符。
- en: Command options
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 命令选项
- en: '`c`: Create a new archive'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`: 创建新存档'
- en: '`u`: Update archive'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u`: 更新存档'
- en: '`i`: Index an archive'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`: 索引存档'
- en: '`t`: List an archive'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t`: 列出一个存档'
- en: '`x`: Extract an archive'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`: 提取存档'
- en: Modifiers
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 修饰符
- en: '`v`: Verbose mode'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 详细模式'
- en: '`f`: Operate on a named file, rather than standard input'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f`: 操作指定的文件，而不是标准输入'
- en: '`0`: Store, but do not compress, files added to the archive'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`: 存储但不压缩添加到存档中的文件'
- en: '`m`: Add the contents of the specified file to the `jar` metadata manifest'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 将指定文件的内容添加到`jar`元数据清单中'
- en: '`e`: Make this `jar` executable, with the specified class as the entry point'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e`: 使此`jar`可执行，并将指定的类作为入口点'
- en: Notes
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The syntax of the `jar` command is intentionally very similar to that of the
    Unix `tar` command. This similarity is the reason `jar` uses command options,
    rather than switches (as the other Java platform commands do). More typical explicit
    switches (e.g. `--create`) are also available and documentation for them can be
    found via `jar --help`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar`命令的语法故意与Unix `tar`命令非常相似。这种相似性是`jar`使用命令选项而不是开关（其他Java平台命令所做的）的原因。更典型的显式开关（例如`--create`）也可用，并且可以通过`jar
    --help`找到它们的文档。'
- en: 'When you create a JAR file, the `jar` tool will automatically add a directory
    called *META-INF* that contains a file called *MANIFEST.MF*—this is metadata in
    the form of headers paired with values. By default, *MANIFEST.MF* contains just
    two headers:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建JAR文件时，`jar`工具将自动添加一个名为*META-INF*的目录，其中包含一个名为*MANIFEST.MF*的文件——这是以头部与值配对的形式的元数据。默认情况下，*MANIFEST.MF*只包含两个头部：
- en: '[PRE1]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using the `m` option allows additional metadata to be added into *MANIFEST.MF*
    at JAR creation time. One frequently added piece is the `Main-Class:` attribute,
    which indicates the entry point into the application contained in the JAR. A JAR
    with a specified `Main-Class:` can be directly executed by the JVM, via `java
    -jar`, or double-clicking the JAR in a graphical file browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`m`选项允许在JAR创建时将附加的元数据添加到*MANIFEST.MF*中。一个经常添加的片段是`Main-Class:`属性，它指示JAR中包含的应用程序的入口点。具有指定`Main-Class:`的JAR可以通过JVM直接执行，通过`java
    -jar`或在图形文件浏览器中双击JAR文件。
- en: The addition of the `Main-Class:` attribute is so common that `jar` has the
    `e` option to create it directly in *MANIFEST.MF*, rather than having to create
    a separate text file for this purpose. Contents of a jar, including the manifest,
    may be inspected easily using the `--extract` option.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`Main-Class:`属性是如此常见，以至于`jar`具有`e`选项直接在*MANIFEST.MF*中创建它，而不必为此创建单独的文本文件。可以使用`--extract`选项轻松检查jar的内容，包括清单。
- en: javadoc
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: javadoc
- en: Basic usage
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`javadoc *some.package*`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`javadoc *some.package*`'
- en: Description
  id: totrans-134
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`javadoc` produces documentation from Java source files. It does so by reading
    a special comment format (known as Javadoc comments) and parsing it into a standard
    documentation format, which can then be output into a variety of document formats
    (although HTML is by far the most common).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`javadoc`从Java源文件生成文档。它通过阅读一种特殊的注释格式（称为Javadoc注释）并将其解析成标准文档格式来实现，然后可以将其输出到各种文档格式中（尽管HTML是最常见的）。'
- en: For a full description of Javadoc syntax, refer to [Chapter 7](ch07.xhtml#javanut8-CHP-7).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Javadoc语法的完整描述，请参阅[第7章](ch07.xhtml#javanut8-CHP-7)。
- en: Common switches
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常用开关
- en: '`-cp`, `--class-path *<path>*`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cp`，`--class-path *<path>*`'
- en: Define the classpath to use.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要使用的类路径。
- en: '`-p`, `--module-path *<path>*`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`，`--module-path *<path>*`'
- en: Define the path to find modules.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要查找模块的路径。
- en: '`-D *<directory>*`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D *<directory>*`'
- en: Tell `javadoc` where to output the generated docs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉`javadoc`生成文档的输出位置。
- en: '`-quiet`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`-quiet`'
- en: Suppress output except for errors and warnings.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了错误和警告之外，抑制输出。
- en: Notes
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The platform API docs are all written in Javadoc.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 平台API文档都是用Javadoc编写的。
- en: '`javadoc` is built on top of the same classes as `javac` and uses some of the
    source compiler infrastructure to implement Javadoc features.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`javadoc` 建立在与 `javac` 相同的类之上，并使用一些源编译器基础设施来实现 Javadoc 的特性。'
- en: The typical way to use `javadoc` is to run it against a whole package, rather
    than just a class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `javadoc` 的典型方式是针对整个包运行，而不仅仅是一个类。
- en: '`javadoc` has a very large number of switches and options that can control
    many aspects of its behavior. Detailed discussion of all the options is outside
    the scope of this book.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`javadoc` 有很多开关和选项，可以控制其行为的许多方面。详细讨论所有选项超出本书范围。'
- en: jdeps
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: jdeps
- en: bThe `jdeps` tool is a static analysis tool for analyzing the dependencies of
    packages or classes. The tool has a number of usages, from identifying developer
    code that makes calls into the internal, undocumented JDK APIs (such as the `sun.misc`
    classes) to helping trace transitive dependencies.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdeps` 工具是一个静态分析工具，用于分析包或类的依赖关系。该工具有许多用途，从识别开发者代码调用内部未文档化的 JDK API（如 `sun.misc`
    类）到帮助跟踪传递依赖关系。'
- en: '`jdeps` can also be used to confirm whether a JAR file can run under a Compact
    Profile (see later in the chapter for more details on Compact Profiles).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdeps` 还可以用来确认一个 JAR 文件是否能在一个紧凑配置文件下运行（更多关于紧凑配置文件的详细信息请参见本章后面）。'
- en: Basic usage
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jdeps com.me.MyClass`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdeps com.me.MyClass`'
- en: Description
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jdeps` reports dependency information for the classes it is asked to analyze.
    The classes can be specified as any class on the classpath, a file path, a directory,
    or a JAR file.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdeps` 报告请求分析的类的依赖信息。可以指定的类包括类路径上的任何类、文件路径、目录或者 JAR 文件。'
- en: Common switches
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-cp`, `--class-path *<path>*`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cp`, `--class-path *<path>*`'
- en: Define the classpath to use.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要使用的类路径。
- en: '`-p`, `--module-path *<path>*`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`, `--module-path *<path>*`'
- en: Define the path to find modules.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 定义查找模块的路径。
- en: '`-s`, `-summary`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s`, `-summary`'
- en: Print dependency summary only.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 仅打印依赖摘要。
- en: '`-m *<module-name>*`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`-m *<module-name>*`'
- en: Target a module for analysis
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 针对一个模块进行分析
- en: '`-v`, `-verbose`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`-v`, `-verbose`'
- en: Print all class-level dependencies.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 打印所有类级别的依赖关系。
- en: '`-verbose:package`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`-verbose:package`'
- en: Print package-level dependencies, excluding dependencies within the same archive.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 打印包级别的依赖关系，排除同一存档内的依赖关系。
- en: '`-verbose:class`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`-verbose:class`'
- en: Print class-level dependencies, excluding dependencies within the same archive.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 打印类级别的依赖关系，排除同一存档内的依赖关系。
- en: '`-p *<pkg name>*, -package *<pkg name>*`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p *<pkg name>*, -package *<pkg name>*`'
- en: Find dependencies in the specified package. You can specify this option multiple
    times for different packages. The `-p` and `-e` options are mutually exclusive.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定的包中查找依赖项。可以多次指定此选项以获取不同的包。`-p` 和 `-e` 选项是互斥的。
- en: '`-e *<regex>*, -regex *<regex>*`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`-e *<regex>*, -regex *<regex>*`'
- en: Find dependencies in packages matching the specified regular expression pattern.
    The `-p` and `-e` options are mutually exclusive.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 查找与指定正则表达式模式匹配的包中的依赖项。`-p` 和 `-e` 选项是互斥的。
- en: '`-include *<regex>*`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`-include *<regex>*`'
- en: Restrict analysis to classes matching pattern. This option filters the list
    of classes to be analyzed. It can be used together with `-p` and `-e`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 限制分析到匹配模式的类。此选项过滤要分析的类列表。可以与 `-p` 和 `-e` 一起使用。
- en: '`-jdkinternals`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`-jdkinternals`'
- en: Find class-level dependencies in JDK internal APIs (which may change or disappear
    in even minor platform releases).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JDK 内部 API 中查找类级别的依赖关系（这些 API 可能在即使是次要平台发布中也会更改或消失）。
- en: '`-apionly`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`-apionly`'
- en: Restrict analysis to APIs—for example, dependencies from the signature of public
    and protected members of public classes including field type, method parameter
    types, returned type, and checked exception types.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 限制分析到 API —— 例如，从公共类的签名中的公共和受保护成员的依赖，包括字段类型、方法参数类型、返回类型和已检查的异常类型。
- en: '`-R`, `-recursive`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`-R`, `-recursive`'
- en: Recursively traverse all dependencies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 递归遍历所有依赖关系。
- en: '`-h`, `-?`, `--help`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h`, `-?`, `--help`'
- en: Print help message for `jdeps`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `jdeps` 的帮助消息。
- en: Notes
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意事项
- en: '`jdeps` is a useful tool for making developers aware of their dependencies
    on the JRE not as a monolithic environment but as something more modular.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`jdeps` 是一个有用的工具，可以让开发者意识到他们对 JRE 的依赖不是作为一个单一的环境，而是作为一个更加模块化的东西。'
- en: jps
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: jps
- en: Basic usage
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jps`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`jps`'
- en: '`jps *<remote URL>*`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`jps *<remote URL>*`'
- en: Description
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jps` provides a list of all active JVM processes on the local machine (or
    a remote machine, if a suitable instance of `jstatd` is running on the remote
    side). Remote URL support requires RMI; this configuration is explained in more
    detail in the `jstatd` section.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`jps`提供了本地机器（或者如果远程端运行了适当的`jstatd`实例，则是远程机器）上所有活动JVM进程的列表。远程URL支持需要RMI；这种配置在`jstatd`部分有更详细的解释。'
- en: Common switches
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-m`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`-m`'
- en: Output the arguments passed to the main method.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 输出传递给主方法的参数。
- en: '`-l`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`'
- en: Output the full package name for the application’s main class (or the full path
    name to the application’s JAR file).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应用程序主类的完整包名称（或应用程序的JAR文件的完整路径名称）。
- en: '`-v`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`-v`'
- en: Output the arguments passed to the JVM.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出传递给JVM的参数。
- en: Notes
  id: totrans-202
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 笔记
- en: This command is not strictly necessary, as the standard Unix `ps` command could
    suffice. However, it does not use the standard Unix mechanism for interrogating
    the process, so there are circumstances in which a Java process stops responding
    (and looks dead to `jps`) but is still listed as alive by the operating system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令并不是严格必需的，因为标准的Unix `ps`命令可能已经足够了。但它不使用标准的Unix进程查询机制，因此在某些情况下，Java进程停止响应（并且在`jps`中看起来已经死掉），但仍然被操作系统列为活动状态。
- en: jstat
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: jstat
- en: Basic usage
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jstat -options`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstat -options`'
- en: '`jstat *<report type such as -class>* *<PID>*`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstat *<report type such as -class>* *<PID>*`'
- en: Description
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: This command displays some basic statistics about a given Java process. This
    is usually a local process but can be located on a remote machine, provided the
    remote side is running a suitable `jstatd` process.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令显示了关于给定Java进程的一些基本统计信息。通常这是一个本地进程，但可以位于远程机器上，只要远程端运行了合适的`jstatd`进程。
- en: Common switches
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-options`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`-options`'
- en: 'List report types that `jstat` can produce. Most common options are:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 列出`jstat`可以生成的报告类型。最常见的选项包括：
- en: '`-class`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`-class`'
- en: Report on classloading activity to date.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 报告迄今为止的类加载活动。
- en: '`-compiler`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`-compiler`'
- en: JIT compilation of the process so far.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的JIT编译过程。
- en: '`-gcutil`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`-gcutil`'
- en: Detailed garbage collection report.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 详细的垃圾回收报告。
- en: '`-printcompilation`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`-printcompilation`'
- en: More detail on compilation.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细的编译信息。
- en: Notes
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 笔记
- en: 'The general syntax `jstat` uses to identify a process (which may be remote)
    is:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstat`用于识别进程（可能是远程的）的一般语法是：'
- en: '[PRE2]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This syntax is used to specify a remote process (which is usually connected
    to via JMX over RMI), but in practice, the more common local syntax simply uses
    the VM ID, which is the operating system process ID (PID) on mainstream platforms
    (Linux, Windows, Unix, macOS, etc.).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此语法用于指定一个远程进程（通常通过JMX通过RMI连接），但实际上，更常见的本地语法仅仅使用VM ID，即主流平台（Linux、Windows、Unix、macOS等）上的操作系统进程ID（PID）。
- en: jstatd
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: jstatd
- en: Basic usage
  id: totrans-226
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jstatd *<options>*`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstatd *<options>*`'
- en: Description
  id: totrans-228
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jstatd` makes information about local JVMs available over the network. It
    achieves this using RMI and can make these otherwise-local capabilities accessible
    to JMX clients. This requires special security settings, which differ from the
    JVM defaults. To start `jstatd`, first we need to create the following file and
    name it *jstatd.policy*:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstatd`通过网络公开了本地JVM的信息。它使用RMI实现，可以使这些本地能力对JMX客户端可访问。这需要特殊的安全设置，与JVM默认设置不同。要启动`jstatd`，首先需要创建以下文件并将其命名为*jstatd.policy*：'
- en: '[PRE3]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This policy file grants all security permissions to any class loaded from the
    JDK modules that implement `jstatd`. The precise policy requirements changed with
    the introduction of modules in JDK 9 and may vary in future JDK versions.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 该策略文件授予加载自实现`jstatd`的JDK模块的任何类所有安全权限。引入JDK 9中的模块后，精确的策略要求已经改变，并且可能会在未来的JDK版本中有所不同。
- en: 'To launch `jstatd` with this policy, use this command line:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此策略启动`jstatd`，请使用以下命令行：
- en: '[PRE4]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Common switches
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-p *<port>*`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p *<port>*`'
- en: Look for an existing RMI registry on that port and create one if not found.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在该端口上查找现有的RMI注册表，如果找不到则创建一个。
- en: Notes
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 笔记
- en: It is recommended that `jstatd` is always switched on in production environments
    but not over the public internet. For most corporate and enterprise environments,
    this is nontrivial to achieve and will require the cooperation of Operations and
    Network Engineering staff. However, the benefits of having telemetry data from
    production JVMs, especially during outages, are difficult to overstate.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在生产环境中始终启用`jstatd`，但不要在公共互联网上使用。对于大多数公司和企业环境来说，这并不容易实现，需要运维和网络工程人员的合作。然而，从生产JVM中获取遥测数据的好处，特别是在故障期间，难以言表。
- en: A full discussion of JMX and monitoring techniques is outside the scope of this
    book.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖完整的 JMX 和监控技术讨论。
- en: jinfo
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: jinfo
- en: Basic usage
  id: totrans-241
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jinfo *<PID>*`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`jinfo *<PID>*`'
- en: '`jinfo *<core file>*`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`jinfo *<core file>*`'
- en: Description
  id: totrans-244
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: This tool displays the system properties and JVM options for a running Java
    process (or a core file).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具显示运行中 Java 进程（或核心文件）的系统属性和 JVM 选项。
- en: Common switches
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-flags`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`-flags`'
- en: Display JVM flags only.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示 JVM 标志。
- en: '`-sysprops`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`-sysprops`'
- en: Display system properties only.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示系统属性。
- en: Notes
  id: totrans-251
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In practice, this is very rarely used—although it can occasionally be helpful
    as a sanity check that the expected program is actually the one that is executing.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这很少被使用，尽管偶尔作为预期程序实际执行的健全性检查可能会有所帮助。
- en: jstack
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: jstack
- en: Basic usage
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jstack *<PID>*`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstack *<PID>*`'
- en: Description
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: The `jstack` utility produces a stack trace for each Java thread in the process.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`jstack` 实用程序为进程中的每个 Java 线程生成堆栈跟踪。'
- en: Common switches
  id: totrans-258
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-e`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`-e`'
- en: Extended mode (contains additional information about threads).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展模式（包含关于线程的额外信息）。
- en: '`-l`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`'
- en: Long mode (contains additional information about locks).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 长模式（包含关于锁的额外信息）。
- en: Notes
  id: totrans-263
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Producing the stack trace does not stop or terminate the Java process. The files
    that `jstack` produces can be very large, and some postprocessing of the file
    is usually necessary.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 生成堆栈跟踪不会停止或终止 Java 进程。`jstack` 生成的文件可能非常大，通常需要对文件进行后处理。
- en: jmap
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: jmap
- en: Basic usage
  id: totrans-266
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jmap *<output option>* *<process>*`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmap *<output option>* *<process>*`'
- en: Description
  id: totrans-268
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jmap` provides a view of memory allocation for a running Java process.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmap` 提供了运行中 Java 进程的内存分配视图。'
- en: Common switches
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '*-dump:<option>,file=<location;>*'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*-dump:<option>,file=<location;>*'
- en: Produce a heap dump from the running process.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 生成运行进程的堆转储。
- en: '*-histo*'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*-histo*'
- en: Produce a histogram of the current state of allocated memory.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 生成当前分配内存状态的直方图。
- en: '*-histo:live*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*-histo:live*'
- en: This version of the histogram displays information only for live objects.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本的直方图仅显示活动对象的信息。
- en: Notes
  id: totrans-277
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The histogram forms walk the JVMs allocation list. This includes both live and
    dead (but not yet collected) objects. The histogram is organized by the type of
    objects using memory and is ordered from greatest to least number of bytes used
    by a particular type. The standard form does not pause the JVM.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图形式遍历 JVM 分配列表。这包括活动对象和未收集的（但尚未收集）对象。直方图按使用内存的对象类型组织，并按特定类型使用的字节数量从多到少排序。标准形式不会暂停
    JVM。
- en: The live form ensures that it is accurate by performing a full, stop-the-world
    (STW) garbage collection before executing. As a result, it should not be used
    on a production system at a time when a full GC would appreciably impact users.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行之前，通过进行完整的停顿式（STW）垃圾回收来确保准确性。因此，在生产系统中，不应在垃圾回收可能显著影响用户的时间使用此工具。
- en: For the `-dump` form, note that the production of a heap dump can be a time-consuming
    process and is STW. The size of the resulting file is proportional to the currently
    allocated heap and hence may be extremely large for some processes.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `-dump` 形式，请注意生成堆转储可能是一个耗时的过程，并且是 STW 的。由于当前分配的堆的大小成比例，因此对于某些进程可能非常大。
- en: javap
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: javap
- en: Basic usage
  id: totrans-282
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`javap *<classname>*`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`javap *<classname>*`'
- en: '`javap *<path/to/ClassFile.class>*`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`javap *<path/to/ClassFile.class>*`'
- en: Description
  id: totrans-285
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`javap` is the Java class disassembler—effectively a tool for peeking inside
    class files. It can show the bytecode that Java methods have been compiled into,
    as well as the constant pool information (which contains information similar to
    that of the symbol table of Unix processes).'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`javap` 是 Java 类反汇编器，实际上是查看类文件内部的工具。它可以显示 Java 方法编译成的字节码，以及常量池信息（类似于 Unix 进程的符号表）。'
- en: By default, `javap` shows signatures of `public`, `protected`, and default methods.
    The `-p` switch will also show `private` methods.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`javap` 显示 `public`、`protected` 和默认方法的签名。`-p` 开关还将显示 `private` 方法。
- en: Common switches
  id: totrans-288
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-c`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`-c`'
- en: Decompile bytecode
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 反编译字节码
- en: '`-v`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`-v`'
- en: Verbose mode (include constant pool information)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长模式（包括常量池信息）
- en: '`-p`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`'
- en: Include `private` methods
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 包括 `private` 方法
- en: '`-cp`, `--class-path`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`-cp`, `--class-path`'
- en: Location of classes if loading by class name
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 类名加载位置
- en: '`-p`, `--module-path`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p`, `--module-path`'
- en: Location of modules if loading by class name
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 模块加载的位置（如果按类名加载）
- en: Notes
  id: totrans-299
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `javap` tool will work with any class file, provided `javap` is from a JDK
    version the same as (or later than) the one that produced the file.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`javap` 工具将与任何类文件一起工作，前提是 `javap` 来自于与生成文件相同或更高版本的 JDK。'
- en: Note
  id: totrans-301
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Some Java language features may have surprising implementations in bytecode.
    For example, as we saw in [Chapter 9](ch09.xhtml#javanut8-CHP-9), Java’s `String`
    class has effectively immutable instances, and the JVM implements the string concatenation
    operator `+` in a different way in Java versions after 8\. This difference is
    clearly visible in the disassembled bytecode shown by `javap`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Java 语言特性在字节码中可能有令人惊讶的实现。例如，正如我们在[第9章](ch09.xhtml#javanut8-CHP-9)中所见，Java
    的 `String` 类具有有效不可变实例，并且 JVM 在 Java 8 版本后通过不同的方式实现字符串连接运算符 `+`。这种差异在`javap`显示的反汇编字节码中清晰可见。
- en: jlink
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: jlink
- en: Basic usage
  id: totrans-304
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jlink *[options]* --module-path modulepath --add-modules module`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`jlink *[options]* --module-path modulepath --add-modules module`'
- en: Description
  id: totrans-306
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jlink` is the custom runtime image linker for the Java platform—a tool for
    linking and packaging Java classes, modules, and their dependencies into a custom
    runtime image. The image created by the `jlink` tool will comprise a linked set
    of modules, along with their transitive dependences.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`jlink` 是 Java 平台的自定义运行时映像链接器工具，用于将 Java 类、模块及其依赖项打包成自定义运行时映像。`jlink` 工具创建的映像将包括一组链接的模块及其传递的依赖关系。'
- en: Common switches
  id: totrans-308
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`--add-modules *<module>* [, *module1*]`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`--add-modules *<module>* [, *module1*]`'
- en: Add modules to the root set of modules to be linked
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 将模块添加到要链接的模块的根集合中
- en: '`--endian {little|big}`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`--endian {little|big}`'
- en: Specify the endianness of the target architecture
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 指定目标体系结构的字节顺序
- en: '`--module-path *<path>*`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`--module-path *<path>*`'
- en: Specify the path where the modules for linking can be found
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 指定链接模块的路径
- en: '`--save-opts *<file>*`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save-opts *<file>*`'
- en: Save the options to the linker in the specified file
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项保存到指定文件的链接器中
- en: '`--help`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`--help`'
- en: Print help information
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 打印帮助信息
- en: '`@filename`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`@filename`'
- en: Read options from filename instead of the command line
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件名而不是命令行读取选项
- en: Notes
  id: totrans-321
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注释
- en: The `jlink` tool will work with any class file or module and linking will require
    the transitive dependencies of the code to be linked.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`jlink` 工具将与任何类文件或模块一起工作，并且链接将需要代码的传递依赖项被链接。'
- en: Note
  id: totrans-323
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Custom runtime images don’t have any support for automatic updates by default.
    This means developers are responsible for rebuilding and updating their own applications
    in the field when necessary. Some Java language features may have restrictions,
    as the runtime image may not include the full JDK; therefore, reflection and other
    dynamic techniques may not be fully supported.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，自定义运行时映像不支持自动更新。这意味着开发人员在必要时需要负责重新构建和更新其应用程序。一些 Java 语言特性可能会有限制，因为运行时映像可能不包含完整的
    JDK；因此，反射和其他动态技术可能不完全受支持。
- en: jmod
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: jmod
- en: Basic usage
  id: totrans-326
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jmod create *[options]* my-new.jmod`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmod create *[options]* my-new.jmod`'
- en: Description
  id: totrans-328
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jmod` prepares Java software components for use by the custom linker (`jlink`).
    The result is a *.jmod* file. This should be considered an intermediate file,
    not a primary artifact for distribution.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmod` 为自定义链接器（`jlink`）准备 Java 软件组件。结果是一个 *.jmod* 文件。这应被视为中间文件，而不是主要的分发工件。'
- en: Basic modes
  id: totrans-330
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本模式
- en: '`create`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`'
- en: Create a new JMOD file
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 JMOD 文件
- en: '`extract`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract`'
- en: Extract all files from a JMOD file (explode it)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 从 JMOD 文件中提取所有文件（展开它）
- en: '`list`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`'
- en: List all files from a JMOD file
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 列出来自 JMOD 文件的所有文件
- en: '`describe`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`'
- en: Print details about a JMOD file
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 打印有关 JMOD 文件的详细信息
- en: Common switches
  id: totrans-339
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`--module-path path`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`--module-path path`'
- en: Specify the module path where the core contents of the module can be found.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 指定模块路径，其中可以找到模块的核心内容。
- en: '`--libs path`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`--libs path`'
- en: Specify the path where native libraries for inclusion can be found.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 指定用于包含的本地库的路径。
- en: '`--help`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`--help`'
- en: Print help information.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 打印帮助信息。
- en: '`@filename`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`@filename`'
- en: Read options from filename instead of the command line.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件名而不是命令行读取选项。
- en: Notes
  id: totrans-348
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注释
- en: '`jmod` reads and writes the JMOD format, but please note that this is different
    from the modular JAR format and is not intended as an immediate replacement for
    it.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmod` 读取和写入 JMOD 格式，但请注意，这与模块化 JAR 格式不同，不打算立即替换它。'
- en: Note
  id: totrans-350
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The `jmod` tool is only currently intended for modules that are to be linked
    into a runtime image (using the `jlink` tool). One other possible use case is
    for packaging modules that have native libraries or other configuration files
    that must be distributed along with the module.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`jmod`工具目前仅用于要链接到运行时映像（使用`jlink`工具）的模块。另一个可能的用例是打包具有必须随模块一起分发的本地库或其他配置文件的模块。'
- en: jcmd
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: jcmd
- en: Basic usage
  id: totrans-353
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 基本用法
- en: '`jcmd *<PID>*`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`jcmd *<PID>*`'
- en: '`jcmd *<PID>* *<command>*`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`jcmd *<PID>* *<command>*`'
- en: Description
  id: totrans-356
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 描述
- en: '`jcmd` issues commands to a running Java process. The precise commands may
    vary between Java versions and may be listed by running `jcmd` with the process
    ID and no command.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`jcmd`向正在运行的Java进程发出命令。精确的命令可能因Java版本而异，并且可以通过使用进程ID和无命令运行`jcmd`来列出。'
- en: Common switches
  id: totrans-358
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见开关
- en: '`-f *<path>*`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f *<path>*`'
- en: Read from commands from a file rather than command-line arguments
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件而不是命令行参数读取命令
- en: '`-l`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`'
- en: List Java processes (similar to `jps`)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 列出Java进程（类似于`jps`）
- en: '`--help`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`--help`'
- en: Print help information
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 打印帮助信息
- en: Common commands
  id: totrans-365
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 常见命令
- en: '`GC.heap_dump *<path>*`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`GC.heap_dump *<path>*`'
- en: Generate a heap dump like `jmap`. Note the path is relative to the Java process,
    *not* where `jcmd` is run!
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 生成类似于`jmap`的堆转储。注意路径是相对于Java进程的，*而不是* `jcmd` 运行的位置！
- en: '`GC.heap_info`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`GC.heap_info`'
- en: Display statistics and sizing information about the Java process heap.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 显示有关Java进程堆的统计和大小信息。
- en: '`JFR.start`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`JFR.start`'
- en: Begin a Java Flight Recorder (JFR) session. JFR is the JVM’s built-in performance
    monitoring and profiling tool.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 开始Java Flight Recorder（JFR）会话。JFR是JVM内置的性能监控和分析工具。
- en: '`JFR.stop name=*<name from start>* filename=*<path>*`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`JFR.stop name=*<name from start>* filename=*<path>*`'
- en: Stop named JFR session and record to a file.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 停止命名的JFR会话并记录到文件中。
- en: '`VM.system_properties`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`VM.system_properties`'
- en: Output Java process system properties.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 输出Java进程的系统属性。
- en: Notes
  id: totrans-376
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意事项
- en: Note
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Commands to `jcmd` are grouped by the subsystem they interact with, for instance
    `GC` or `JFR`. There are many more commands than the examples we’ve given here.
    It’s worth exploring what’s available on your Java installation for help in operating
    the JVM in production.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`jcmd`的命令按其与之交互的子系统分组，例如`GC`或`JFR`。除了我们提供的示例之外，还有许多其他命令。值得探索您的Java安装中可用的内容，以帮助在生产环境中操作JVM。'
- en: Introduction to JShell
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JShell介绍
- en: Java is traditionally understood as a language that is class-oriented and has
    a distinct compile-interpret-evaluate execution model. However, in this section,
    we will discuss a new technology that extends this programming paradigm by providing
    a form of interactive/scripting capability.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Java传统上被理解为一种类导向的语言，并具有明确的编译-解释-评估执行模型。然而，在本节中，我们将讨论一种通过提供一种交互/脚本能力来扩展此编程范例的新技术。
- en: With the advent of Java 9, the Java runtime and JDK bundles a new tool, JShell.
    This is an interactive shell for Java, similar to the REPL seen in languages like
    Python, Scala, or Lisp. The shell is intended for teaching and exploratory use
    and, due to the nature of the Java language, is not expected to be as much use
    to the working programmer as similar shells in other languages.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Java 9的到来，Java运行时和JDK捆绑了一个新工具，JShell。这是一个用于Java的交互式Shell，类似于Python、Scala或Lisp中的REPL。该Shell旨在用于教学和探索使用，并且由于Java语言的性质，不像其他语言中类似的Shell对于工作程序员来说那么有用。
- en: In particular, it is not expected that Java will become an REPL-driven language.
    Instead, this opens up an opportunity to use JShell for a different style of programming,
    one that complements the traditional use case but also provides new perspectives,
    especially for working with a new API.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，预计Java不会成为一个以REPL驱动的语言。相反，这打开了一个机会，可以使用JShell进行一种不同风格的编程，这种风格既补充了传统用例，又提供了新的视角，尤其是用于使用新API的情况。
- en: 'It is very easy to use JShell to explore simple language features, for instance:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JShell非常容易探索简单的语言特性，例如：
- en: Primitive data types
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据类型
- en: Simple numeric operations
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的数值操作
- en: String manipulation basics
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串操作基础
- en: Object types
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象类型
- en: Defining new classes
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义新类
- en: Creating new objects
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新对象
- en: Calling methods
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用方法
- en: 'To start up JShell, we just invoke it from the command line:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动JShell，我们只需从命令行调用它：
- en: '[PRE5]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From here, we can enter small pieces of Java code, which are known as *snippets*:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们可以输入小段的Java代码，称为*片段*：
- en: '[PRE6]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The shell is designed to be a simple working environment, and so it relaxes
    some of the rules that working Java programmers may expect. Some of the differences
    between JShell snippets and regular Java include:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: Shell被设计为一个简单的工作环境，因此放宽了一些工作中的Java程序员可能期望的规则。JShell代码片段与常规Java之间的一些差异包括：
- en: Semicolons are optional in JShell
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JShell中分号是可选的
- en: JShell supports a verbose mode
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JShell支持详细模式
- en: JShell has a wider set of default imports than a regular Java program
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JShell具有比常规Java程序更广泛的默认导入集合
- en: Methods can be declared at top level (outside of a class)
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法可以在顶层声明（不在类内部）
- en: Methods can be redefined within snippets
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法可以在代码片段内重新定义
- en: A snippet may not declare a package or a module—everything is placed in an unnamed
    package controlled by the shell
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码片段不能声明包或模块——所有内容都放在由shell控制的无名称包中
- en: Only public classes may be accessed from JShell
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有公共类可以从JShell访问
- en: Due to package restrictions, it’s advisable to ignore access control when defining
    classes and working within JShell
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于包限制，定义类和在JShell中工作时忽略访问控制是明智的选择
- en: 'It’s simple to create simple class hierarchies (e.g., for exploring Java’s
    inheritance and generics):'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 创建简单的类层次结构很简单（例如，用于探索Java的继承和泛型）：
- en: '[PRE7]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Tab completion within the shell is also possible, such as for autocompletion
    of possible methods:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell内进行的tab自动补全也是可能的，例如用于可能方法的自动补全：
- en: '[PRE8]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Pressing the tab key twice with certain input will display documentation for
    a method:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 按下tab键两次并输入某些内容将显示方法的文档：
- en: '[PRE9]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also create top-level methods, such as:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建顶层方法，比如：
- en: '[PRE10]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Simple exception backtraces are also supported:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 也支持简单的异常回溯：
- en: '[PRE11]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can access classes from the JDK:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问来自JDK的类：
- en: '[PRE12]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or explicitly import classes if necessary:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如有必要，显式导入类：
- en: '[PRE13]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The environment also allows JShell commands, which start with a `/`. It is
    useful to be aware of some of the most common basic commands:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 环境还允许以`/`开头的JShell命令。熟悉一些最常见的基本命令非常有用：
- en: '`/help intro` is the introductory help text'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/help intro` 是介绍性的帮助文本'
- en: '`/help` is a more comprehensive entry point into the help system'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/help` 是进入帮助系统的更全面入口'
- en: '`/vars` shows which variables are in scope'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/vars` 显示当前作用域中的变量'
- en: '`/list` shows the shell history'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/list` 显示shell历史记录'
- en: '`/save` outputs accepted snippet source to a file'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/save` 将接受的代码片段源输出到文件'
- en: '`/open` reads a saved file and brings it into the environment'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/open` 读取保存的文件并将其引入环境'
- en: '`/exit` exits the jshell interface'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/exit` 退出jshell界面'
- en: 'For example, the imports available within JShell include a lot more than just
    `java.lang`. The whole list is loaded by JShell during startup and can be seen
    as the *special imports* visible through the `/list -all` command:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在JShell中可用的导入不仅限于`java.lang`。整个列表在JShell启动时由JShell加载，可以通过`/list -all`命令看到*特殊导入*：
- en: '[PRE14]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The JShell environment is tab-completed, which greatly adds to the tool’s usability.
    The verbose mode is particularly useful when you are getting to know JShell—it
    can be activated by passing the `-v` switch at startup as well as via a shell
    command.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: JShell环境支持tab自动补全，这极大地增加了工具的可用性。详细模式特别适用于了解JShell时——它可以通过在启动时传递`-v`开关或通过shell命令激活。
- en: Introduction to Java Flight Recorder (JFR)
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Flight Recorder (JFR) 简介
- en: Java Flight Record (JFR) is a powerful, low-latency profiling system built directly
    into the JVM. It has existed for years but was available only with a commercial
    license prior to Java 11\. Now this rich source of information is available with
    OpenJDK and worth exploring.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: Java Flight Record (JFR) 是一个强大的、低延迟的分析系统，直接内嵌在JVM中。在Java 11之前，它存在多年，但只能通过商业许可证获得。现在，这个丰富的信息源已经可以通过OpenJDK访问，值得探索。
- en: The typical JFR workflow involves starting a profile against a running JVM,
    downloading the results as a file, and then inspecting that file offline with
    the JDK Mission Control (JMC) GUI application. While JFR is embedded directly
    within OpenJDK, JMC isn’t distributed with the JDK but can be downloaded from
    [*https://oreil.ly/eq4cg*](https://oreil.ly/eq4cg).
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的JFR工作流程涉及对运行中的JVM启动分析，将结果下载为文件，然后通过JDK Mission Control (JMC) GUI应用程序离线检查该文件。虽然JFR直接嵌入在OpenJDK中，但JMC并不随JDK分发，可以从[*https://oreil.ly/eq4cg*](https://oreil.ly/eq4cg)下载。
- en: 'JFR recording can be started either via options at JVM startup or interactively
    with the `jcmd` tool shown earlier in this chapter. The following `java` invocation
    starts with JFR recording for two minutes, writing the results to a file when
    finished:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: JFR（Java Flight Recorder）的录制可以通过JVM启动时的选项或本章前面展示的`jcmd`工具进行交互式启动。以下`java`调用会在两分钟内开始JFR录制，并在完成后将结果写入文件：
- en: '[PRE15]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Options allow for tight control over the volume of data JFR will hold in memory,
    either by specifying how long a recording to generate or by the size of the file
    that will be generated. When combined with its low overhead, it is plausible to
    run JFR persistently in production so data is always ready should you wish to
    capture it (sometimes referred to as “ring buffer” mode). This opens up a world
    of possibilities for debugging in amazing detail with the JFR profiles, even minutes
    to hours after a problem has occurred.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 选项允许紧密控制JFR在内存中保存的数据量，可以通过指定生成录制的持续时间或生成文件的大小来实现。结合其低开销，可以合理地在生产环境中持续运行JFR，以便随时捕获数据（有时称为“环形缓冲”模式）。这为使用JFR分析在问题发生几分钟到几小时后的详细调试开启了可能性。
- en: 'Along with sizing limits, JFR recording can also be configured to gather only
    specific information of interest. Typical areas (but only a few of the things
    JFR measures) include:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 除了大小限制外，JFR录制还可以配置为仅收集感兴趣的特定信息。典型领域（但只是JFR测量的一小部分）包括：
- en: Object allocation
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象分配
- en: Garbage collection
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集
- en: Threads and locks
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程和锁
- en: Method profiling
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法分析
- en: With Java 17, APIs are available in-process to consume JFR events in a streaming
    fashion, evolving away from the file-based profiling approaches. This opens the
    door for monitoring tooling to tap into this rich source of data, without the
    hassle of logging onto servers to ask for a profile to be dumped.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Java 17，API已经提供在进程中以流式方式消费JFR事件，逐步摆脱基于文件的分析方法。这为监控工具无需登录服务器请求转储性能分析数据开辟了新的可能性。
- en: In the future, we may expect JFR to act as a data source for the new generation
    of Observability tools that are being adopted by the Java ecosystem, such as OpenTelemetry.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，我们可以期待JFR作为Java生态系统采用的新一代可观察性工具的数据源。
- en: Summary
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Java has changed a huge amount over the last 15+ years, and yet the platform
    and community remain vibrant. To have achieved this, while retaining a recognizable
    language and platform, is no small accomplishment.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的15年中，Java发生了巨大变化，然而平台和社区仍然充满活力。能够在保留可识别的语言和平台的同时取得这一成就，绝非小事。
- en: Ultimately, Java’s continued existence and viability depend upon the individual
    developer. On that basis, the future looks bright, and we look forward to the
    next wave and beyond.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Java的持续存在和可行性取决于个别开发者。基于这一点，未来看起来光明，我们期待着下一个浪潮及其之后的发展。
