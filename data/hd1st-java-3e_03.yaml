- en: 'Chapter 1\. Breaking the Surface: Dive In: A Quick Dip'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。打破表面：深入了解：快速入门
- en: '![image](Images/f0001-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0001-01.png)'
- en: '**Java takes you to new places.** From its humble release to the public as
    the (wimpy) version 1.02, Java seduced programmers with its friendly syntax, object-oriented
    features, memory management, and best of all—the promise of portability. The lure
    of **write-once/run-anywhere** is just too strong. A devoted following exploded,
    as programmers fought against bugs, limitations, and, oh yeah, the fact that it
    was dog slow. But that was ages ago. If you’re just starting in Java, **you’re
    lucky**. Some of us had to walk five miles in the snow, uphill both ways (barefoot),
    to get even the most trivial application to work. But *you*, why, *you* get to
    ride the **sleeker, faster, easier-to-read-and-write** Java of today.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 带你去新的地方。**从它谦逊的版本 1.02 发布到公众以来，Java 以其友好的语法、面向对象的特性、内存管理，以及最重要的——可移植性的承诺，吸引了程序员们。**一次编写，到处运行**的诱惑力太过强大。程序员们追随着这种承诺疯狂前行，抗击错误、限制，还有，哦对了，那个慢如蜗牛的事实。但那是很久以前的事了。如果你刚开始接触
    Java，**你很幸运**。我们中的一些人不得不在雪地里徒步走五英里，双脚光着（上坡），才能使最微不足道的应用程序运行起来。但是，*你*，为什么，*你*可以骑着今天更**流畅、更快速、更易读易写**的
    Java。'
- en: The way Java works
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 的工作方式
- en: '**The goal is to write one application (in this example, an interactive party
    invitation) and have it work on whatever device your friends have.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标是编写一个应用程序（在这个例子中是一个互动派对邀请），并使它能够在你的朋友所拥有的任何设备上运行。**'
- en: '![image](Images/f0002-01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0002-01.png)'
- en: What you’ll do in Java
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你在 Java 中会做什么
- en: '**You’ll type a source code file, compile it using the javac compiler, and
    then run the compiled bytecode on a Java virtual machine.**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**你将输入源代码文件，使用 javac 编译器编译它，然后在 Java 虚拟机上运行编译后的字节码。**'
- en: '![image](Images/f0003-01.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0003-01.png)'
- en: Note
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '(Note: this is **NOT** meant to be a tutorial... you’ll be writing real code
    in a moment, but for now, we just want you to get a feel for how it all fits together.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：这**不**是教程……片刻后你将开始编写真正的代码，但现在，我们只是希望你能对所有内容如何结合有所感觉。
- en: In other words, the code on this page isn’t quite real; don’t try to compile
    it .)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这页上的代码并不完全真实；不要试图编译它。）
- en: A very brief history of Java
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 的简史
- en: Java was initially released (some would say “escaped”, on January 23, 1996\.
    It’s over 25 years old! In the first 25 years, Java as a language evolved, and
    the Java API grew enormously. The best estimate we have is that over 17 gazillion
    lines of Java code have been written in the last 25 years. As you spend time programming
    in Java, you will most certainly come across Java code that’s quite old, and some
    that’s much newer. Java is famous for its backward compatibility, so old code
    can run quite happily on new JVMs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java 最初发布（有人说是“逃逸”）于 1996 年 1 月 23 日。它已经有超过 25 年的历史了！在前 25 年里，Java 语言不断发展，Java
    API 也显著增长。据我们最好的估计，过去 25 年里编写了超过 17 万亿行的 Java 代码。在编程过程中，你肯定会遇到一些相当古老的 Java 代码，也会碰到一些更新的代码。Java
    以其向后兼容性而闻名，所以旧代码可以在新的 JVM 上完全正常运行。
- en: In this book we’ll generally start off by using older coding styles (remember,
    you’re likely to encounter such code in the “real world”, and then we’ll introduce
    newer-style code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们通常会从使用较旧的编码风格开始（记住，在“现实世界”中你可能会遇到这样的代码），然后我们会介绍新的编码风格。
- en: In a similar fashion, we will sometimes show you older classes in the Java API,
    and then show you newer alternatives.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们有时会展示 Java API 中的旧类，然后再展示更新的替代方案。
- en: '![image](Images/f0004-01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0004-01.png)'
- en: Speed and memory usage
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速度和内存使用
- en: When Java was first released, it was slow. But soon after, the HotSpot VM was
    created, as were other performance enhancers. While it’s true that Java isn’t
    the fastest language out there, it’s considered to be a very fast language—almost
    as fast as languages like C and Rust, and ***much*** faster than most other languages
    out there.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Java 刚发布时，它很慢。但很快，HotSpot VM 和其他性能增强工具应运而生。虽然 Java 不是市面上最快的语言，但它被认为是一种非常快的语言——几乎和像
    C 和 Rust 这样的语言一样快，比大多数其他语言都***快得多***。
- en: Java has a magic super-power—the JVM. The Java Virtual Machine can optimize
    your code *while it’s running*, so it’s possible to create very fast applications
    without having to write specialized high-performance code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Java 有一个神奇的超级能力——JVM。Java 虚拟机可以在代码*运行时*优化你的代码，因此可以创建非常快速的应用程序，而无需编写专门的高性能代码。
- en: But—full disclosure—compared to C and Rust, Java uses a lot of memory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是——完全披露——与 C 和 Rust 相比，Java 使用了大量内存。
- en: '**Q: The naming conventions for Java’s versions are confusing. There was JDK
    1.0, and 1.2, 1.3, 1.4, then a jump to J2SE 5.0, then it changed to Java 6, Java
    7, and last time I checked, Java was up to Java 18\. What’s going on?**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：Java版本的命名约定很令人困惑。有JDK 1.0，1.2，1.3，1.4，然后跳到J2SE 5.0，然后变成Java 6，Java 7，上次我查看时，Java已经到了Java
    18。发生了什么？**'
- en: '**A:** The version numbers have varied a lot over the last 25+ years! We can
    ignore the letters (J2SE/SE) since these are not really used now. The numbers
    are a little more involved.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**答：过去25年来，版本号变化很大！我们可以忽略字母（J2SE/SE），因为现在基本上不再使用。数字稍微复杂一些。'
- en: Technically Java SE 5.0 was actually Java 1.5\. Same for 6 (1.6), 7 (1.7), and
    8 (1.8). In theory, Java is still on version 1.x because new versions are backward
    compatible, all the way back to 1.0.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，Java SE 5.0实际上是Java 1.5。对于6（1.6）、7（1.7）和8（1.8）也是如此。理论上，Java仍然是1.x版本，因为新版本向后兼容，一直回溯到1.0。
- en: However, it was a bit confusing having a version number that was different to
    the name everyone used, so the official version number from Java 9 onward is just
    the number, without the “1” prefix; i.e., Java 9 really is version 9, not version
    1.9.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，版本号与每个人使用的名称不同有点令人困惑，因此从Java 9开始的官方版本号只是数字，没有“1”前缀；即，Java 9实际上是版本9，而不是版本1.9。
- en: In this book we’ll use the common convention of 1.0–1.4, then from 5 onward
    we’ll drop the “1” prefix.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用常见的约定1.0–1.4，然后从5开始，我们将去掉“1”前缀。
- en: Also, since Java 9 was released in September 2017, there’s been a release of
    Java every six months, each with a new “major” version number, so we moved very
    quickly from 9 to 18!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自2017年9月发布Java 9以来，每隔六个月就会发布一个Java版本，每个版本都有一个新的“主要”版本号，所以我们从9迅速跃升到18！
- en: Code structure in Java
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中的代码结构
- en: '![image](Images/f0007-02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0007-02.png)'
- en: '**In a source file, put a class.**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**在源文件中，放置一个类。**'
- en: '**In a class, put methods.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**在一个类中，放置方法。**'
- en: '**In a method, put statements.**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**在一个方法中，放置语句。**'
- en: What goes in a source file?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源文件中应该放什么？
- en: A source code file (with the *.java* extension) typically holds one class definition.
    The ***class*** represents a *piece* of your program, although a very tiny application
    might need just a single class. The class must go within a pair of curly braces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码文件（扩展名为*.java*）通常包含一个类定义。***类***代表程序的一部分，尽管一个非常小的应用程序可能只需要一个类。类必须放在一对大括号内。
- en: '![image](Images/f0007-03.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0007-03.png)'
- en: What goes in a class?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类中应该放什么？
- en: A class has one or more ***methods.*** In the Dog class, the ***bark*** method
    will hold instructions for how the Dog should bark. Your methods must be declared
    *inside* a class (in other words, within the curly braces of the class).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类有一个或多个***方法***。在Dog类中，***bark***方法将包含狗应该吠叫的指令。您的方法必须在一个类内部声明（换句话说，在类的大括号内部）。
- en: '![image](Images/f0007-04.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0007-04.png)'
- en: What goes in a method?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法中应该放什么？
- en: Within the curly braces of a method, write your instructions for how that method
    should be performed. Method *code* is basically a set of statements, and for now
    you can think of a method kind of like a function or procedure.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法的大括号内，编写指示该方法如何执行的指令。方法*代码*基本上是一组语句，目前您可以将方法视为一种函数或过程。
- en: '![image](Images/f0007-01.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0007-01.png)'
- en: Anatomy of a class
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的解剖
- en: 'When the JVM starts running, it looks for the class you give it at the command
    line. Then it starts looking for a specially written method that looks exactly
    like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当JVM开始运行时，它会在命令行中给出的类中查找。然后它开始寻找一个特别编写的方法，看起来像：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, the JVM runs everything between the curly braces { } of your main method.
    Every Java application has to have at least one **class**, and at least one **main**
    method (not one main per *class*; just one main per *application*).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，JVM运行主方法的大括号{ }之间的所有内容。每个Java应用程序至少必须有一个**类**，至少必须有一个**main**方法（不是每个*类*一个main；只是每个*应用程序*一个main）。
- en: '![image](Images/f0008-02.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0008-02.png)'
- en: Don’t worry about memorizing anything right now... this chapter is just to get
    you started.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心记住任何东西...本章只是为了让您入门。
- en: Writing a class with a `main()`
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写带有`main()`的类
- en: In Java, everything goes in a **class**. You’ll type your source code file (with
    a *.java* extension), then compile it into a new class file (with a *.class* extension).
    When you run your program, you’re really running a class.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，所有内容都放在一个**类**中。您将键入源代码文件（扩展名为*.java*），然后将其编译为一个新的类文件（扩展名为*.class*）。当您运行程序时，实际上是在运行一个类。
- en: Running a program means telling the Java Virtual Machine (JVM) to “Load the
    `**MyFirstApp**` class, then start executing its `**main()**` method. Keep running
    ’til all the code in main is finished.”
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序意味着告诉 Java 虚拟机（JVM）“加载 `**MyFirstApp**` 类，然后开始执行它的 `**main()**` 方法。一直运行，直到
    main 中的所有代码都执行完毕。”
- en: In [Chapter 2](ch02.xhtml#a_trip_to_objectville_classes_and_object), *A Trip
    to Objectville*, we go deeper into the whole *class* thing, but for now, the only
    question you need to ask is, ***how do I write Java code so that it will run?***
    And it all begins with **main()**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第2章](ch02.xhtml#a_trip_to_objectville_classes_and_object) 中，《前往对象之城》，我们将深入讨论整个
    *类* 的事情，但目前，你需要问的唯一问题是，***我如何编写 Java 代码以便运行？*** 一切都始于 **main()**。
- en: The **main()** method is where your program starts running.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**main()** 方法是你的程序开始运行的地方。'
- en: No matter how big your program is (in other words, no matter how many *classes*
    your program uses), there’s got to be a **main()** method to get the ball rolling.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的程序有多大（换句话说，你的程序使用了多少 *类*），都必须有一个 **main()** 方法来启动整个过程。
- en: '![image](Images/f0009-01.png)![image](Images/f0009-02.png)![image](Images/f0010-01.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0009-01.png)![image](Images/f0009-02.png)![image](Images/f0010-01.png)'
- en: 'Tonight’s Talk: **The compiler and the JVM battle over the question, “Who’s
    more important?”**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 今晚的讲座：**编译器与 JVM 就“谁更重要？”展开争斗**。
- en: '| The Java Virtual Machine | The Compiler |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Java 虚拟机 | 编译器 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| What, are you kidding? ***HELLO***. I am Java. I’m the one who actually makes
    a program run. The compiler just gives you a file. That’s it. Just a file. You
    can print it out and use it for wallpaper, kindling, lining the bird cage, whatever,
    but the file doesn’t do anything unless I’m there to run it. |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 什么，你在开玩笑？ ***HELLO***。我就是 Java。我才是真正让程序运行起来的人。编译器只是给你一个文件。仅此而已。你可以打印出来用作壁纸、点燃火柴、铺鸟笼，反正这个文件不会做任何事情，除非我在那里运行它。
    |  |'
- en: '|  | I don’t appreciate that tone. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|  | 我不喜欢那种语气。 |'
- en: '| And that’s another thing, the compiler has no sense of humor. Then again,
    if you had to spend all day checking nitpicky little syntax violations... |  |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 还有一件事，编译器没有幽默感。不过，如果你整天都在检查瑕疵一点点的语法错误…… |  |'
- en: '|  | Excuse me, but without *me*, what exactly would you run? There’s a *reason*
    Java was designed to use a bytecode compiler, for your information. If Java were
    a purely interpreted language, where—at runtime—the virtual machine had to translate
    straight-from-a-text-editor source code, a Java program would run at a ludicrously
    glacial pace. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | 不好意思，但没有 *我*，你到底要运行什么？Java 被设计为使用字节码编译器是有原因的。如果 Java 是一种纯解释语言，在运行时虚拟机必须从文本编辑器源代码直接翻译，那么
    Java 程序将运行得极其缓慢。 |'
- en: '| I’m not saying you’re, like, *completely* useless. But really, what is it
    that you do? Seriously. I have no idea. A programmer could just write bytecode
    by hand, and I’d take it. You might be out of a job soon, buddy. |  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 我并不是说你完全没用。但真的，你到底做了什么？说真的。我完全不知道。程序员可以手写字节码，我也能接受。伙计，你可能很快就失业了。 |  |'
- en: '|  | Excuse me, but that’s quite an ignorant (not to mention *arrogant*) perspective.
    While it *is* true that­—*theoretically—*you can run any properly formatted bytecode
    even if it didn’t come out of a Java compiler, in practice that’s absurd. A programmer
    writing bytecode by hand is like painting pictures of your vacation instead of
    taking photos—sure, it’s an art, but most people prefer to use their time differently.
    And I would appreciate it if you would *not* refer to me as “buddy.” |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|  | 不好意思，但那是相当无知（更不用说 *傲慢* 了）的观点。虽然 *理论上* —— *理论上* 你可以运行任何正确格式的字节码，即使它不是由
    Java 编译器生成的，但实际上这是荒谬的。手写字节码的程序员就像画度假照片一样，而不是拍照片 —— 当然，这是一门艺术，但大多数人更喜欢用他们的时间做其他事情。如果你能*不*称呼我为“伙计”，我会很感激的。
    |'
- en: '| (I rest my case on the humor thing.) But you still didn’t answer my question,
    what *do* you actually do? |  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| （关于幽默感的事情我就此结束。）但你还是没有回答我的问题，你到底*能*做什么？ |  |'
- en: '|  | Remember that Java is a strongly typed language, and that means I can’t
    allow variables to hold data of the wrong type. This is a crucial safety feature,
    and I’m able to stop the vast majority of violations before they ever get to you.
    And I also— |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|  | 记住，Java 是一种强类型语言，这意味着我不能允许变量保存错误类型的数据。这是一个关键的安全功能，我能够在它们传递给你之前阻止绝大多数违规行为。而且我也——
    |'
- en: '| But some still get through! I can throw ClassCastExceptions and sometimes
    I get people trying to put the wrong type of thing in an array that was declared
    to hold something else, and— |  |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 但有些问题仍然存在！我可以抛出ClassCastException，有时人们会试图将错误类型的东西放入声明为保存其他内容的数组中，还有... |  |'
- en: '|  | Excuse me, but I wasn’t done. And yes, there *are* some datatype exceptions
    that can emerge at runtime, but some of those have to be allowed to support one
    of Java’s other important features—dynamic binding. At runtime, a Java program
    can include new objects that weren’t even *known* to the original programmer,
    so I have to allow a certain amount of flexibility. But my job is to stop anything
    that would never—*could* never—succeed at runtime. Usually I can tell when something
    won’t work, for example, if a programmer accidentally tried to use a Button object
    as a Socket connection, I would detect that and thus protect them from causing
    harm at runtime. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|  | 对不起，我还没说完呢。是的，运行时可能会出现一些数据类型异常，但其中一些必须允许以支持Java的另一个重要功能——动态绑定。在运行时，Java程序可以包含原始程序员甚至*不知道*的新对象，因此我必须允许一定的灵活性。但我的工作是阻止任何在运行时永远不可能成功的事情。通常情况下，我可以判断某些事情是否会失败，例如，如果程序员意外地尝试将Button对象用作Socket连接，我会检测到并保护他们免受在运行时造成伤害。
    |'
- en: '| OK. Sure. But what about *security*? Look at all the security stuff I do,
    and you’re like, what, checking for *semicolons*? Oooohhh big security risk! Thank
    goodness for you! |  |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 好的。当然。但是安全性呢？看看我做的所有安全措施，而你只是在检查*分号*？哦哦大的安全风险！多亏有你啊！ |  |'
- en: '|  | Excuse me, but I am the first line of defense, as they say. The datatype
    violations I previously described could wreak havoc in a program if they were
    allowed to manifest. I am also the one who prevents access violations, such as
    code trying to invoke a private method, or change a method that—for security reasons—must
    never be changed. I stop people from touching code they’re not meant to see, including
    code trying to access another class’ critical data. It would take hours, perhaps
    days even, to describe the significance of my work. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '|  | 对不起，但正如他们所说的，我是第一道防线。正如我之前描述的数据类型违规可能会在程序中造成严重后果。我也是防止访问违规的人，例如试图调用私有方法或更改从安全角度上讲绝不能更改的方法的人。我阻止人们触及他们不应看到的代码，包括试图访问另一个类的关键数据的代码。要描述我的工作的重要性可能需要数小时，甚至数天。
    |'
- en: '| Whatever. I have to do that same stuff *too*, though, just to make sure nobody
    snuck in after you and changed the bytecode before running it. |  |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 无论如何，我也必须做同样的事情，*仅仅*是为了确保在运行之前没有人偷偷改变了字节码。 |  |'
- en: '|  | Of course, but as I indicated previously, if I didn’t prevent what amounts
    to perhaps 99% of the potential problems, you would grind to a halt. And it looks
    like we’re out of time, so we’ll have to revisit this in a later chat. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|  | 当然，但正如我之前所说，如果我没有防止可能的问题中的99%，你们会完全停摆。看起来我们时间不多了，所以我们得以后再聊这个问题。 |'
- en: '| Oh, you can count on it. *Buddy*. |  |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 哦，你可以指望它。*伙计*。 |  |'
- en: What can you say in the main method?
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主方法中可以说些什么？
- en: Once you’re inside main (or *any* method), the fun begins. You can say all the
    normal things that you say in most programming languages to ***make the computer
    do something.***
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入main（或*任何*方法），就开始有趣了。你可以说大多数编程语言中正常说的话来***让计算机做些什么***。
- en: 'Your code can tell the JVM to:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码可以告诉JVM：
- en: '![image](Images/f0012-01.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0012-01.png)'
- en: '![Images](Images/1circlea.png) **do something**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlea.png) **做一些事情**'
- en: '**Statements:** declarations, assignments, method calls, etc.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**语句:** 声明、赋值、方法调用等。'
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Images](Images/1circleb.png) **do something again and again**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circleb.png) **一遍又一遍地做某事**'
- en: '**Loops:** *for* and *while*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**循环:** *for* 和 *while*'
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Images](Images/1circlec.png) **do something under this condition**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlec.png) **在这种条件下做一些事情**'
- en: '**Branching:** *if/else* tests'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**分支:** *if/else* 测试'
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![image](Images/f0013-01.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0013-01.png)'
- en: Looping and looping and...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环和循环...
- en: 'Java has a lot of looping constructs: while, do-while, and *for*, being the
    oldest. You’ll get the full loop scoop later in the book, but not right now. Let’s
    start with while.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Java有很多循环结构：while、do-while和*for*，最古老的是*for*。你将在本书的后面章节中详细了解循环。现在让我们从while开始。
- en: The syntax (not to mention logic) is so simple you’re probably asleep already.
    As long as some condition is true, you do everything inside the loop *block*.
    The loop block is bounded by a pair of curly braces, so whatever you want to repeat
    needs to be inside that block.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 语法（更不用说逻辑）是如此简单，你可能已经睡着了。只要某个条件为真，你就在循环*块*内执行所有操作。循环块由一对花括号界定，因此你想重复的任何内容都必须在该块内。
- en: The key to a loop is the *conditional test*. In Java, a conditional test is
    an expression that results in a *boolean* value­—in other words, something that
    is either ***true*** or ***false***.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的关键在于*条件测试*。在Java中，条件测试是一个产生布尔值的表达式，换句话说，它要么是***true***，要么是***false***。
- en: If you say something like, “While *iceCreamInTheTub is true*, keep scooping,”
    you have a clear boolean test. There either *is* ice cream in the tub or there
    *isn’t*. But if you were to say, “While *Bob* keep scooping,” you don’t have a
    real test. To make that work, you’d have to change it to something like, “While
    Bob is snoring...” or “While Bob is *not* wearing plaid...”
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你说类似于，“当*冰淇淋在浴缸中为真*时，继续舀取”，你有一个明确的布尔测试。浴缸里要么*有*冰淇淋，要么*没有*。但如果你说，“当*鲍勃*继续舀取时”，你就没有真正的测试。要使其工作，你需要将其更改为类似于，“当鲍勃打呼噜时…”或“当鲍勃*不*穿格子衬衫时…”
- en: Simple boolean tests
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的布尔测试
- en: 'You can do a simple boolean test by checking the value of a variable, using
    a comparison operator like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过检查变量的值来进行简单的布尔测试，使用如下比较运算符：
- en: '**<** (less than)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**<** （小于）'
- en: '**>** (greater than)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**>** （大于）'
- en: '**==** (equality) (yes, that’s *two* equals signs)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**==**（相等）（是的，这是*两个*等号）'
- en: Notice the difference between the *assignment* operator (a *single* equals sign)
    and the *equals* operator (*two* equals signs). Lots of programmers accidentally
    type `=` when they *want* `==`. (But not you.)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意*赋值*运算符（单个等号）和*等于*运算符（两个等号）之间的区别。许多程序员在想要输入`==`时不小心输入了`=`。（但不包括你。）
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Example of a while loop
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: while循环的示例
- en: '![image](Images/f0014-01.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0014-01.png)'
- en: Conditional branching
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件分支
- en: In Java, an *if* test is basically the same as the boolean test in a *while*
    loop—except instead of saying, “***while*** there’s still chocolate,” you’ll say,
    “***if*** there’s still chocolate...”
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，*if*测试基本上与*while*循环中的布尔测试相同——只不过你会说，“***当***还有巧克力时…”而不是“***如果***还有巧克力…”
- en: '![image](Images/f0015-01.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0015-01.png)'
- en: The preceding code executes the line that prints “x must be 3” only if the condition
    (*x* is equal to 3) is true. Regardless of whether it’s true, though, the line
    that prints “This runs no matter what” will run. So depending on the value of
    *x*, either one statement or two will print out.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码只有当条件（*x*等于3）为真时才执行打印“x必须是3”的行。不管条件是否为真，“这将无论如何运行”都会运行。因此，根据*x*的值，要么打印一条语句，要么打印两条语句。
- en: But we can add an *else* to the condition so that we can say something like,
    “*If* there’s still chocolate, keep coding, *else* (otherwise) get more chocolate,
    and then continue on...”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以在条件中添加*else*，这样我们可以说类似于，“*如果*还有巧克力，继续编码，*否则*（否则）获取更多巧克力，然后继续…”
- en: '![image](Images/f0015-02.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0015-02.png)'
- en: Coding a serious business application
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个严肃的业务应用程序
- en: '![image](Images/f0016-01.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0016-01.png)'
- en: Let’s put all your new Java skills to good use with something practical. We
    need a class with a *main()*, an *int* and a *String* variable, a *while* loop,
    and an *if* test. A little more polish, and you’ll be building that business back-end
    in no time. But *before* you look at the code on this page, think for a moment
    about how *you* would code that classic children’s favorite, “10 green bottles.”
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把你新学到的Java技能用于实际。我们需要一个包含*main()*、*int*和*String*变量、一个*while*循环和一个*if*测试的类。稍加改进，你将很快能够构建业务后端。但是在查看本页上的代码之前，想一想如何编写经典的儿童最爱，“10个绿色瓶子”。
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There’s still one little flaw in our code. It compiles and runs, but the output
    isn’t 100% perfect. See if you can spot the flaw and fix it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码还有一个小缺陷。它编译和运行，但输出并不完全完美。看看你能否发现这个缺陷并修复它。
- en: Monday morning at Bob’s Java-enabled house
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 周一早晨，鲍勃的启用Java的房子
- en: '![image](Images/f0017-01.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0017-01.png)'
- en: Bob’s alarm clock rings at 8:30 Monday morning, just like every other weekday.
    But Bob had a wild weekend and reaches for the SNOOZE button. And that’s when
    the action starts, and the Java-enabled appliances come to life...
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 周一早上8:30，鲍勃的闹钟响了，就像每个工作日一样。但鲍勃度过了疯狂的周末，伸手按下了贪睡按钮。那时动作开始了，启用Java的设备开始运行…
- en: '![image](Images/f0017-02.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0017-02.png)'
- en: First, the alarm clock sends a message to the coffee maker “Hey, the geek’s
    sleeping in again, delay the coffee 12 minutes.”
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，闹钟向咖啡机发送消息“嘿，那个极客又睡过头了，咖啡延迟12分钟。”
- en: The coffee maker sends a message to the Motorola^(TM) toaster, “Hold the toast,
    Bob’s snoozing.”
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 咖啡机向Motorola^(TM)烤面包机发送消息，“别烤面包了，鲍勃在睡觉。”
- en: The alarm clock then sends a message to Bob’s Android, “Call Bob’s 9 o’clock
    and tell him we’re running a little late.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 闹钟然后向鲍勃的安卓手机发送消息，“给鲍勃9点打电话，告诉他我们有点晚了。”
- en: '![image](Images/f0017-05.png)![image](Images/f0017-03.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0017-05.png)![图片](Images/f0017-03.png)'
- en: Finally, the alarm clock sends a message to Sam’s (Sam is the dog) wireless
    collar, with the too-familiar signal that means, “Get the paper, but don’t expect
    a walk.”
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，闹钟向山姆（山姆是狗）的无线项圈发送消息，带着太熟悉的信号，意味着“拿报纸，但别指望散步。”
- en: '![image](Images/f0017-04.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0017-04.png)'
- en: A few minutes later, the alarm goes off again. And *again* Bob hits SNOOZE and
    the appliances start chattering. Finally, the alarm rings a third time. But just
    as Bob reaches for the snooze button, the clock sends the “jump and bark” signal
    to Sam’s collar. Shocked to full consciousness, Bob rises, grateful that his Java
    skills, and spontaneous internet shopping purchases, have enhanced the daily routines
    of his life.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，闹钟再次响起。鲍勃再次按下了贪睡按钮，家用电器开始交谈。最后，闹钟第三次响起。但就在鲍勃伸手按贪睡按钮时，时钟向山姆的项圈发送了“跳起来并吠叫”的信号。震惊地完全清醒，鲍勃起床了，感激他的Java技能和即兴的网购增强了他生活中的日常例行事务。
- en: '***His toast is toasted.***'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '***他的吐司被烤了。***'
- en: '***His coffee steams.***'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '***他的咖啡冒着热气。***'
- en: '***His paper awaits.***'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '***他的报纸在等待着。***'
- en: '![image](Images/f0017-06.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0017-06.png)'
- en: Just another wonderful morning in ***The Java-Enabled House***.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 又是一个美好的***Java智能家居***的早晨。
- en: '![image](Images/f0018-01.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0018-01.png)'
- en: OK, so the bottle song wasn’t *really* a serious business application. Still
    need something practical to show the boss? Check out the Phrase-O-Matic code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，瓶子歌曲并不是*真正*的严肃商业应用。还需要一些实际的东西来展示给老板吗？看看词组生成器的代码。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: when you type this into an editor, let the code do its own word/line-wrapping!
    Never hit the return key when you’re typing a String (a thing between “quotes”
    or it won’t compile. So the hyphens you see on this page are real, and you can
    type them, but don’t hit the return key until AFTER you’ve closed a String.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：当你将这些内容输入编辑器时，让代码自己换行！在输入字符串（在“引号”之间的内容）时，永远不要按回车键，否则它无法编译。因此，你在本页看到的连字符是真实的，你可以输入它们，但在关闭字符串之后才按回车键。
- en: '[PRE6]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Phrase-O-Matic
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词组生成器
- en: How it works
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: In a nutshell, the program makes three lists of words, then randomly picks one
    word from each of the three lists, and prints out the result. Don’t worry if you
    don’t understand *exactly* what’s happening in each line. For goodness sake, you’ve
    got the whole book ahead of you, so relax. This is just a quick look from a 30,000-foot
    outside-the-box targeted leveraged paradigm.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，该程序制作了三个单词列表，然后随机从每个列表中选择一个单词，并打印出结果。如果你不完全理解每一行发生了什么，不要担心。天哪，你还有整本书要读，所以放松点。这只是一个从30,000英尺外部瞄准杠杆范式的快速浏览。
- en: '**1.** The first step is to create three String arrays—the containers that
    will hold all the words. Declaring and creating an array is easy; here’s a small
    one:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.** 第一步是创建三个String数组——这些容器将保存所有单词。声明和创建数组很容易；这里是一个小的例子：'
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each word is in quotes (as all good Strings must be) and separated by commas.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单词都用引号括起来（因为所有好的字符串都必须如此），并用逗号分隔。
- en: '**2.** For each of the three lists (arrays), the goal is to pick a random word,
    so we have to know how many words are in each list. If there are 14 words in a
    list, then we need a random number between 0 and 13 (Java arrays are zero-based,
    so the first word is at position 0, the second word position 1, and the last word
    is position 13 in a 14-element array). Quite handily, a Java array is more than
    happy to tell you its length. You just have to ask. In the pets array, we’d say:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.** 对于三个列表（数组）中的每一个，目标是选择一个随机单词，因此我们必须知道每个列表中有多少单词。如果列表中有14个单词，那么我们需要一个介于0和13之间的随机数（Java数组是从零开始的，因此第一个单词位于位置0，第二个单词位于位置1，最后一个单词在一个14元素数组中的位置为13）。非常方便的是，Java数组很乐意告诉你它的长度。你只需要问。在宠物数组中，我们会说：'
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: and **x** would now hold the value 3.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 而**x**现在将保存值3。
- en: '**3.** We need three random numbers. Java ships out of the box with several
    ways to generate random numbers, including java.util.Random (we will see later
    why this class name is prefixed with java.util). The `**nextInt()**` method returns
    a random number between 0 and some-number-we-give-it, *not including* the number
    that we give it. So we’ll give it the number of elements (the array length) in
    the list we’re using. Then we assign each result to a new variable. We could just
    as easily have asked for a random number between 0 and 5, not including 5:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.** 我们需要三个随机数。Java提供了几种生成随机数的方式，包括java.util.Random（稍后我们会看到为什么这个类名前面加了java.util）。`**nextInt()**`方法返回一个介于0和我们指定的某个数之间的随机数，*不包括*我们给定的数。因此，我们将给它列表中的元素个数（数组长度）。然后将每个结果分配给一个新变量。我们也可以要求一个介于0和5之间的随机数，不包括5：'
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**4.** Now we get to build the phrase, by picking a word from each of the three
    lists and smooshing them together (also inserting spaces between words). We use
    the “`+`” operator, which *concatenates* (we prefer the more technical *smooshes*)
    the String objects together. To get an element from an array, you give the array
    the index number (position) of the thing you want by using:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**4.** 现在我们来构建这个短语，从每个列表中选择一个单词并将它们组合在一起（同时在单词之间插入空格）。我们使用“`+`”运算符，它 *连接*（我们更喜欢更技术性的
    *组合*）String对象。要从数组中获取元素，您需要使用该数组的索引号（位置）来指定您想要的东西：'
- en: '[PRE10]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**5.** Finally, we print the phrase to the command line and...voil...! *We’re
    in marketing*.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**5.** 最后，我们将短语打印到命令行，然后...voil...！*我们在市场营销中*。'
- en: Exercise
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '![image](Images/common-03.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-03.png)'
- en: Code Magnets
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 码头磁铁
- en: '![image](Images/f0020-02.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0020-02.png)'
- en: A working Java program is all scrambled up on the fridge. Can you rearrange
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 冰箱上混乱地放置了一个工作中的Java程序。你能重新排列这些代码片段，使其成为一个产生下面列出的输出的工作Java程序吗？有些花括号掉在了地板上，它们太小了，无法捡起，所以你可以随意添加多少个！
- en: '![image](Images/f0020-03a.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0020-03a.png)'
- en: '**Output:**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**Output:**'
- en: '![image](Images/f0020-04.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0020-04.png)'
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercise_solutions).**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“练习解答”](#exercise_solutions)中。**'
- en: BE the Compiler
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为编译器
- en: '![image](Images/f0021-01.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0021-01.png)'
- en: '**Each of the Java files on this page represents a complete source file. Your
    job is to play compiler and determine whether each of these files will compile.
    If they won’t compile, how would you fix them?**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**每个Java文件都代表一个完整的源文件。你的任务是扮演编译器，确定这些文件是否会编译。如果它们不能编译，你会如何修复？**'
- en: '![Images](Images/arr1.png) **Answers in [“Exercise Solutions”](#exercise_solutions).**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“练习解答”](#exercise_solutions)中。**'
- en: '**A**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '[PRE11]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**B**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**C**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**C**'
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![image](Images/f0022-01.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0022-01.png)'
- en: JavaCross
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: Let’s give your right brain something to do.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的右脑也有事情做。
- en: It’s your standard crossword, but almost all of the solution words are from
    [Chapter 1](#breaking_the_surface_dive_in_a_quick_dip). Just to keep you awake,
    we also threw in a few (non-Java) words from the high-tech world.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的标准填字游戏，但几乎所有的解答单词都来自[第1章](#breaking_the_surface_dive_in_a_quick_dip)。为了保持清醒，我们还添加了一些来自高科技世界的（非Java）单词。
- en: '![image](Images/f0022-02.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0022-02.png)'
- en: '**Across**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**Across**'
- en: 4\. Command line invoker
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 命令行调用者
- en: 6\. Back again?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 再次回来？
- en: 8\. Can’t go both ways
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 无法双向运行
- en: 9\. Acronym for your laptop’s power
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 笔记本电脑电源的缩写
- en: 12\. Number variable type
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 数字变量类型
- en: 13\. Acronym for a chip
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 芯片的缩写
- en: 14\. Say something
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 说一些话
- en: 18\. Quite a crew of characters
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 相当一群角色
- en: 19\. Announce a new class or method
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 19\. 宣布一个新类或方法
- en: 21\. What’s a prompt good for?
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 提示作用何在？
- en: '**Down**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**Down**'
- en: 1\. Not an integer (or _____ your boat)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 不是整数（或______你的船）
- en: 2\. Come back empty-handed
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 空手而回
- en: 3\. Open house
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 公开房屋
- en: 5\. ‘Things’ holders
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. '东西'持有者
- en: 7\. Until attitudes improve
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 直到态度改善
- en: 10\. Source code consumer
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 源代码消费者
- en: 11\. Can’t pin it down
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 无法确定
- en: 13\. Department for programmers and operations
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 程序员和运营部门
- en: 15\. Shocking modifier
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 令人震惊的修改器
- en: 16\. Just gotta have one
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 只需要一个
- en: 17\. How to get things done
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. 如何完成任务
- en: 20\. Bytecode consumer
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 20\. 字节码消费者
- en: '![Images](Images/arr1.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_22_r).**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr1.png) **答案在[“JavaCross”](#javacross_left_parenthesisfrom_page_22_r)中。**'
- en: Mixed Messages
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合信息
- en: '![image](Images/common-04.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)'
- en: A short Java program is listed below. One block of the program is missing. Your
    challenge is to **match the candidate block of code** (on the left) **with the
    output** that you’d see if the block were inserted. Not all the lines of output
    will be used, and some of the lines of output might be used more than once. Draw
    lines connecting the candidate blocks of code with their matching command-line
    output.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出了一个简短的Java程序。程序中缺少一个代码块。你的挑战是**将候选代码块**（左侧）**与插入后的输出**进行匹配。不会使用所有输出行，某些输出行可能会重复使用。用线条连接代码块与它们匹配的命令行输出。
- en: '![image](Images/f0023-01.png)![image](Images/f0023-02.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0023-01.png)![image](Images/f0023-02.png)'
- en: Note
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Match each candidate with one of the possible outputs
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个候选者与可能的输出之一匹配
- en: '![Images](Images/arr1.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfrom_200).**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfrom_200)。**'
- en: '![image](Images/common-04.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)'
- en: Pool Puzzle
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pool Puzzle
- en: '![image](Images/f0024-01.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0024-01.png)'
- en: Your ***job*** is to take code snippets from the pool and place them into the
    blank lines in the code. You may **not** use the same snippet more than once,
    and you won’t need to use all the snippets. Your ***goal*** is to make a class
    that will compile and run and produce the output listed. Don’t be fooled—this
    one’s harder than it looks.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你的***工作***是从池中提取代码片段并将它们放入代码中的空行。每个片段只能使用一次，你不需要使用所有的片段。你的***目标***是创建一个能够编译、运行并输出所列结果的类。别被愚弄了——这比看起来要难。
- en: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_24).**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr1.png) **Answers in [“Pool Puzzle”](#pool_puzzle_left_parenthesisfrom_page_24)。**'
- en: '**Output**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '![image](Images/f0024-02.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0024-02.png)'
- en: Note
  id: totrans-209
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note: Each snippet from the pool can be used only once!**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：每个池中的片段只能使用一次！**'
- en: '[PRE14]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![image](Images/f0024-03.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0024-03.png)'
- en: Exercise Solutions
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解答
- en: '![image](Images/common-03.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-03.png)'
- en: Sharpen your pencil
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 磨砺你的铅笔
- en: (from [“there are no Dumb Questions”](#there_are_no_dumb_questions))
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“there are no Dumb Questions”](#there_are_no_dumb_questions)）
- en: '[PRE15]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Code Magnets
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Code Magnets
- en: (from [“Code Magnets”](#code_magnet-id000006))
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“Code Magnets”](#code_magnet-id000006)）
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![image](Images/f0025-01.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0025-01.png)'
- en: BE the Compiler
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BE the Compiler
- en: (from [“BE the Compiler”](#be_the_compiler-id001000))
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“BE the Compiler”](#be_the_compiler-id001000)）
- en: '**A**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**A**'
- en: '![image](Images/f0025-02.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0025-02.png)'
- en: '**B**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**B**'
- en: '![image](Images/f0025-03.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0025-03.png)'
- en: '**C**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**C**'
- en: '![image](Images/f0025-04.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0025-04.png)'
- en: Pool Puzzle
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pool Puzzle
- en: (from [“Pool Puzzle”](#pool_puzzle-id001001))
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“Pool Puzzle”](#pool_puzzle-id001001)）
- en: '![image](Images/common-04.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-04.png)'
- en: '[PRE17]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![image](Images/f0026-01.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0026-01.png)'
- en: JavaCross
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: (from [“JavaCross”](#javacross))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“JavaCross”](#javacross)）
- en: '![image](Images/f0026-02.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0026-02.png)'
- en: Mixed Messages
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mixed Messages
- en: (from [“Mixed Messages”](#mixed_messages))
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: （来自[“Mixed Messages”](#mixed_messages)）
- en: '![image](Images/f0026-03.png)![image](Images/f0026-04.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0026-03.png)![image](Images/f0026-04.png)'
