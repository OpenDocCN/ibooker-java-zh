- en: 'Chapter 15\. Work on Your Swing: Using Swing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。提高你的 Swing：使用 Swing
- en: '![image](Images/f0509-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0509-01.png)'
- en: '**Swing is easy.** Unless you actually *care* where things end up on the screen.
    Swing code *looks* easy, but then you compile it, run it, look at it, and think,
    “hey, *that’s* not supposed to go *there*.” The thing that makes it *easy* to
    *code* is the thing that makes it *hard* to *control*—the **Layout Manager**.
    Layout Manager objects control the size and location of the widgets in a Java
    GUI. They do a ton of work on your behalf, but you won’t always like the results.
    You want two buttons to be the same size, but they aren’t. You want the text field
    to be three inches long, but it’s nine. Or one. And *under* the label instead
    of *next* to it. But with a little work, you can get layout managers to submit
    to your will. Learning a little Swing will give you a head start for most GUI
    programming you’ll ever do. Wanna write an Android app? Working through this chapter
    will give you a head start.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swing 很简单。** 除非你真的*在意*东西在屏幕上的位置。`Swing` 代码看起来*简单*，但编译、运行并查看后，你会觉得，“嘿，*那*不应该放*在那里*”。使编码*容易*的东西也是使控制*困难*的东西——**布局管理器**。布局管理器对象控制
    Java GUI 中小部件的大小和位置。它们代表你做了大量的工作，但你并不总是喜欢结果。你想要两个按钮大小相同，但它们不是。你想要的文本框长度是三英寸，但它是九英寸。或者是一个。而且*在*标签*下*方而不是*在*旁边。但稍加努力，你可以让布局管理器顺从你的意愿。学习一点
    `Swing` 将为你未来大部分 GUI 编程提供一个快速入门。想写一个 Android 应用程序？通过这一章的学习将给你一个快速入门。'
- en: Swing components
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Swing` 组件'
- en: '***Component*** is the more correct term for what we’ve been calling a *widget*.
    The *things* you put in a GUI. *The things a user sees and interacts with*. Text
    fields, buttons, scrollable lists, radio buttons, etc., are all components. In
    fact, they all extend `**javax.swing.JComponent**`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '***组件*** 是我们称之为*部件*的更正式术语。*你*放在 GUI 中的东西。*用户看到并与之交互的东西*。文本框，按钮，可滚动列表，单选按钮等都是组件。事实上，它们都扩展自
    `**javax.swing.JComponent**`。'
- en: Components can be nested
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件可以嵌套
- en: In Swing, virtually *all* components are capable of holding other components.
    In other words, *you can stick just about anything into anything else*. But most
    of the time, you’ll add *user interactive* components such as buttons and lists
    into *background* components (often called containers) such as frames and panels.
    Although it’s *possible* to put, say, a panel inside a button, that’s pretty weird
    and won’t win you any usability awards.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Swing` 中，几乎*所有*组件都能容纳其他组件。换句话说，*你可以把几乎任何东西放到其他东西里*。但大多数情况下，你会将*用户交互*组件（如按钮和列表）添加到*背景*组件（通常称为容器）中，如框架和面板中。虽然*可能*将一个面板放在按钮内部，但这相当奇怪，不会使你获得任何用户友好性奖项。
- en: With the exception of JFrame, though, the distinction between *interactive*
    components and *background* components is artificial. A JPanel, for example, is
    usually used as a background for grouping other components, but even a JPanel
    can be interactive. Just as with other components, you can register for the JPanel’s
    events including mouse clicks and keystrokes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `JFrame` 外，*交互* 组件和*背景* 组件之间的区别是人为的。例如，`JPanel` 通常用作组合其他组件的背景，但即使是 `JPanel`
    也可以是交互式的。就像其他组件一样，你可以注册 `JPanel` 的事件，包括鼠标点击和按键。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**A widget is technically a Swing Component. Almost everything you can stick
    in a GUI extends from javax.swing.JComponent.**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗体是 `Swing` 组件。几乎所有可以放在 GUI 中的东西都是 `javax.swing.JComponent` 的扩展。**'
- en: '**Four steps to making a GUI (review)**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**制作 GUI 的四个步骤（复习）**'
- en: '![Images](Images/1.png) Make a window (a JFrame)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/1.png) 制作一个窗口（一个 JFrame）'
- en: '`**JFrame frame = new JFrame();**`'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`**JFrame frame = new JFrame();**`'
- en: '![Images](Images/2.png) Make a component (button, text field, etc.)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/2.png) 制作一个组件（按钮，文本框等）'
- en: '`**JButton button = new JButton("click me");**`'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`**JButton button = new JButton("点击我");**`'
- en: '![Images](Images/3.png) Add the component to the frame'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/3.png) 将组件添加到窗体中'
- en: '`**frame.getContentPane().add(BorderLayout.EAST, button);**`'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`**frame.getContentPane().add(BorderLayout.EAST, button);**`'
- en: '![Images](Images/4.png) Display it (give it a size and make it visible)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/4.png) 显示它（给它一个大小并使其可见）'
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| Put interactive components: | Into background components: |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 把交互式组件放入： | 放入背景组件中： |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Images](Images/f0510-02.png) | ![Images](Images/f0510-03.png) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| ![图片](Images/f0510-02.png) | ![图片](Images/f0510-03.png) |'
- en: Layout Managers
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局管理器
- en: '![image](Images/f0511-01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0511-01.png)'
- en: A layout manager is a Java object associated with a particular component, almost
    always a *background* component. The layout manager controls the components contained
    *within* the component the layout manager is associated with. In other words,
    if a frame holds a panel, and the panel holds a button, the panel’s layout manager
    controls the size and placement of the button, while the frame’s layout manager
    controls the size and placement of the panel. The button, on the other hand, doesn’t
    need a layout manager because the button isn’t holding other components.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 布局管理器是与特定组件关联的Java对象，几乎总是一个*background*组件。布局管理器控制包含在其关联组件内的组件。换句话说，如果一个框架持有一个面板，面板持有一个按钮，那么面板的布局管理器控制按钮的大小和位置，而框架的布局管理器控制面板的大小和位置。另一方面，按钮不需要布局管理器，因为按钮不持有其他组件。
- en: If a panel holds five things, the size and location of the five things in the
    panel are all controlled by the panel’s layout manager. If those five things,
    in turn, hold *other* things (e.g., if any of those five things are panels or
    other containers that hold other things), then those *other* things are placed
    according to the layout manager of the thing holding them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个面板持有五个东西，那么这五个东西的大小和位置都由面板的布局管理器控制。如果这五个东西反过来持有其他东西（例如，如果这五个东西中的任何一个是面板或其他容器，持有其他东西），那么这些其他东西将根据持有它们的东西的布局管理器进行放置。
- en: 'When we say *hold,* we really mean *add* as in, a panel *holds* a button because
    the button was *added* to the panel using something like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说*hold*时，我们实际上指的是*add*，例如，面板*hold*一个按钮，因为按钮是通过以下方式*add*到面板上的：
- en: '`**myPanel.add(button);**`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`**myPanel.add(button);**`'
- en: 'Layout managers come in several flavors, and each background component can
    have its own layout manager. Layout managers have their own policies to follow
    when building a layout. For example, one layout manager might insist that all
    components in a panel must be the same size, arranged in a grid, while another
    layout manager might let each component choose its own size but stack them vertically.
    Here’s an example of nested layouts:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 布局管理器有几种类型，并且每个background组件可以有自己的布局管理器。布局管理器在构建布局时有自己的策略要遵循。例如，一个布局管理器可能要求面板中的所有组件必须是相同大小，排列在网格中，而另一个布局管理器则允许每个组件选择自己的大小，但垂直堆叠。以下是嵌套布局的示例：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![image](Images/f0511-03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0511-03.png)'
- en: How does the layout manager decide?
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局管理器如何决定？
- en: 'Different layout managers have different policies for arranging components
    (like, arrange in a grid, make them all the same size, stack them vertically,
    etc.), but the components being laid out do get at least some small say in the
    matter. In general, the process of laying out a background component looks something
    like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的布局管理器在排列组件时有不同的策略（例如，按网格排列，使它们全部相同大小，垂直堆叠等），但正在布局的组件至少在某种程度上有所发言权。总体而言，布置background组件的过程大致如下：
- en: '![image](Images/f0512-01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0512-01.png)'
- en: '**A layout scenario**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局场景**'
- en: '![Images](Images/1.png) Make a panel and add three buttons to it.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1.png) 制作一个面板并添加三个按钮到面板上。'
- en: '![Images](Images/2.png) The panel’s layout manager asks each button how big
    that button prefers to be.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/2.png) 面板的布局管理器询问每个按钮希望有多大。'
- en: '![Images](Images/3.png) The panel’s layout manager uses its layout policies
    to decide whether it should respect all, part, or none of the buttons’ preferences.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/3.png) 面板的布局管理器根据其布局策略决定是否应该遵循所有、部分或不遵循按钮的偏好。'
- en: '![Images](Images/4.png) Add the panel to a frame.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/4.png) 将面板添加到框架中。'
- en: '![Images](Images/5.png) The frame’s layout manager asks the panel how big the
    panel prefers to be.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/5.png) 框架的布局管理器询问面板希望有多大。'
- en: '![Images](Images/6.png) The frame’s layout manager uses its layout policies
    to decide whether it should respect all, part, or none of the panel’s preferences.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/6.png) 框架的布局管理器使用其布局策略来决定是否应该尊重面板的所有、部分或不尊重偏好。'
- en: Different layout managers have different policies
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的布局管理器有不同的策略。
- en: Some layout managers respect the size the component wants to be. If the button
    wants to be 30 pixels by 50 pixels, that’s what the layout manager allocates for
    that button. Other layout managers respect only part of the component’s preferred
    size. If the button wants to be 30 pixels by 50 pixels, it’ll be 30 pixels by
    however wide the button’s background *panel* is. Still other layout managers respect
    the preference of only the *largest* of the components being laid out, and the
    rest of the components in that panel are all made that same size. In some cases,
    the work of the layout manager can get very complex, but most of the time you
    can figure out what the layout manager will probably do, once you get to know
    that layout manager’s policies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一些布局管理器尊重组件希望的大小。如果按钮希望是30像素乘以50像素，布局管理器就为该按钮分配这个大小。其他布局管理器只尊重部分组件的首选大小。如果按钮希望是30像素乘以50像素，那么它将是30像素乘以按钮背景
    *面板* 的宽度。还有一些布局管理器只尊重正在布置的组件中*最大*的组件的首选大小，而该面板中的其余组件都被设置为相同的大小。在某些情况下，布局管理器的工作可能变得非常复杂，但大多数情况下，一旦你了解了该布局管理器的策略，你就可以预测布局管理器可能会做什么。
- en: 'The Big Three layout managers: border, flow, and box'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大三种布局管理器：border、flow 和 box
- en: '**BorderLayout**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**BorderLayout**'
- en: A BorderLayout manager divides a background component into five regions. You
    can add only one component per region to a background controlled by a BorderLayout
    manager. Components laid out by this manager usually don’t get to have their preferred
    size. **BorderLayout is the default layout manager for a frame!**
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: BorderLayout 管理器将背景组件分为五个区域。您只能向由 BorderLayout 管理器控制的背景添加一个组件。由此管理器布局的组件通常不会以它们的首选大小呈现。**BorderLayout
    是窗体的默认布局管理器！**
- en: '![image](Images/f0513-01.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0513-01.png)'
- en: '**FlowLayout**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**FlowLayout**'
- en: A FlowLayout manager acts kind of like a word processor, except with components
    instead of words. Each component is the size it wants to be, and they’re laid
    out left to right in the order that they’re added, with “word wrap” turned on.
    So when a component won’t fit horizontally, it drops to the next “line” in the
    layout. **FlowLayout is the default layout manager for a panel!**
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: FlowLayout 管理器有点像文字处理器，但用组件代替文字。每个组件都是它希望的大小，并且它们按添加顺序从左到右布局，类似于打开“自动换行”。因此，当一个组件水平放不下时，它会移到布局中的下一“行”。**FlowLayout
    是面板的默认布局管理器！**
- en: '![image](Images/f0513-02.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0513-02.png)'
- en: '**BoxLayout**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**BoxLayout**'
- en: A BoxLayout manager is like FlowLayout in that each component gets to have its
    own size, and the components are placed in the order in which they’re added. But,
    unlike FlowLayout, a BoxLayout manager can stack the components vertically (or
    arrange them horizontally, but usually we’re just concerned with vertically).
    It’s like a FlowLayout but instead of having automatic “component wrapping,” you
    can insert a sort of “component return key” and **force** the components to start
    a new line.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: BoxLayout 管理器类似于 FlowLayout，每个组件都可以拥有自己的大小，并按添加的顺序放置这些组件。但与 FlowLayout 不同的是，BoxLayout
    管理器可以垂直堆叠组件（或者水平排列它们，但通常我们只关心垂直排列）。它类似于 FlowLayout，但是不像自动进行“组件换行”，你可以插入一种“组件换行键”，**强制**组件换到新行。
- en: '![image](Images/f0513-03.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0513-03.png)'
- en: '**BorderLayout cares about five regions: east, west, north, south, and center**'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**BorderLayout 关心五个区域：东、西、北、南和中心**'
- en: '![image](Images/f0514-01.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0514-01.png)'
- en: '**Let’s add a button to the east region:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们在东部区域添加一个按钮：**'
- en: '![image](Images/f0514-02.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0514-02.png)'
- en: '**Watch what happens when we give the button more characters...**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**看看当我们给按钮增加更多字符时会发生什么……**'
- en: '![image](Images/f0515-01.png)![image](Images/f0515-02.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0515-01.png)![image](Images/f0515-02.png)'
- en: '**Let’s try a button in the NORTH region**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们在北部区域尝试一个按钮**'
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![image](Images/f0516-02.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0516-02.png)'
- en: '**Now let’s make the button ask to be taller**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在让我们让按钮要求更高**'
- en: How do we do that? The button is already as wide as it can ever be—as wide as
    the frame. But we can try to make it taller by giving it a bigger font.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何做到这一点？按钮已经尽可能宽——与窗口一样宽。但我们可以尝试通过增加字体大小来使其更高。
- en: '![image](Images/f0516-03.png)![image](Images/f0516-04.png)![image](Images/f0517-01.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0516-03.png)![image](Images/f0516-04.png)![image](Images/f0517-01.png)'
- en: '**But what happens in the center region?**'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**但是在中心区域会发生什么？**'
- en: '**The center region gets whatever’s left!**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**中心区域获得剩余的内容！**'
- en: (except in one special case we’ll look at later)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: （除了稍后我们将讨论的一个特殊情况）
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![image](Images/f0517-03.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0517-03.png)'
- en: '**FlowLayout cares about the flow of the components: left to right, top to
    bottom, in the order they were added.**'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**FlowLayout 关心组件的流动：从左到右，从上到下，按添加顺序。**'
- en: '![image](Images/f0518-01.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0518-01.png)'
- en: '**Let’s add a panel to the east region:**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们在东部区域添加一个面板：**'
- en: A JPanel’s layout manager is FlowLayout, by default. When we add a panel to
    a frame, the size and placement of the panel are still under the BorderLayout
    manager’s control. But anything *inside* the *panel* (in other words, components
    added to the panel by calling `**panel.add(aComponent)**`) are under the panel’s
    FlowLayout manager’s control. We’ll start by putting an empty panel in the frame’s
    east region, and on the next pages we’ll add things to the panel.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: JPanel 的布局管理器默认为 FlowLayout。当我们将面板添加到框架时，面板的大小和位置仍受 BorderLayout 管理器控制。但是在面板内部的任何内容（换句话说，通过调用
    `**panel.add(aComponent)**` 将组件添加到面板）则受面板的 FlowLayout 管理器控制。我们将从在框架的东区域放置一个空面板开始，然后在接下来的页面上添加内容。
- en: '![image](Images/f0518-02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0518-02.png)'
- en: '**Let’s add a button to the panel**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们向面板添加一个按钮**'
- en: '![image](Images/f0519-01.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0519-01.png)'
- en: '**What happens if we add TWO buttons to the panel?**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果我们在面板上添加两个按钮会发生什么？**'
- en: '![image](Images/f0520-01.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0520-01.png)'
- en: '**BoxLayout to the rescue!'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**BoxLayout 来解救！**'
- en: It keeps components stacked, even if there’s room to put them side by side.**
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它保持组件堆叠，即使有空间可以将它们并排放置。**
- en: '![image](Images/f0521-01.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0521-01.png)'
- en: '**Unlike FlowLayout, BoxLayout can force a “new line” to make the components
    wrap to the next line, even if there’s room for them to fit horizontally.**'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**与 FlowLayout 不同，BoxLayout 可以强制“换行”，即使水平空间足够，也可以使组件换行到下一行。**'
- en: But now you’ll have to change the panel’s layout manager from the default FlowLayout
    to BoxLayout.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在您必须将面板的布局管理器从默认的 FlowLayout 更改为 BoxLayout。
- en: '![image](Images/f0521-02.png)![image](Images/f0521-03.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0521-02.png)![image](Images/f0521-03.png)'
- en: Playing with Swing components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Swing 组件一起玩耍
- en: 'You’ve learned the basics of layout managers, so now let’s try out a few of
    the most common components: a text field, scrolling text area, checkbox, and list.
    We won’t show you the whole darn API for each of these, just a few highlights
    to get you started. If you do want to find out more, read [*Java Swing*](https://www.oreilly.com/library/view/java-swing-2nd/0596004087/)
    by Dave Wood, Marc Loy, and Robert Eckstein.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解了布局管理器的基础知识，现在让我们尝试几个最常见的组件：文本字段、滚动文本区域、复选框和列表。我们不会展示每个组件的整个 API，只是一些重点，让您可以开始。如果您想了解更多信息，请阅读《*Java
    Swing*》（https://www.oreilly.com/library/view/java-swing-2nd/0596004087/）由 Dave
    Wood、Marc Loy 和 Robert Eckstein 编写。
- en: '![image](Images/f0523-01.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0523-01.png)'
- en: '**How to use it**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何使用它**'
- en: '![Images](Images/1.png) Get text out of it'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/1.png) 从中获取文本'
- en: '`System.out.println(field.getText());`'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`System.out.println(field.getText());`'
- en: '![Images](Images/2.png) Put text in it'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/2.png) 在其中放置文本'
- en: '![image](Images/f0523-02.png)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](Images/f0523-02.png)'
- en: '![Images](Images/4.png) Select/Highlight the text in the field'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/4.png) 选择/突出显示字段中的文本'
- en: '[PRE4]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Images](Images/5.png) Put the cursor back in the field (so the user can just
    start typing)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Images](Images/5.png) 将光标放回字段中（这样用户可以直接开始输入）'
- en: '[PRE5]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**JTextArea**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**JTextArea**'
- en: Unlike JTextField, JTextArea can have more than one line of text. It takes a
    little configuration to make one, because it doesn’t come out of the box with
    scroll bars or line wrapping. To make a JTextArea scroll, you have to stick it
    in a JScrollPane. A JScrollPane is an object that really loves to scroll and will
    take care of the text area’s scrolling needs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与 JTextField 不同，JTextArea 可以有多行文本。要使其正常工作，需要进行一些配置，因为它不会默认包含滚动条或自动换行。要使 JTextArea
    滚动，您必须将其放入 JScrollPane 中。JScrollPane 是一个真正喜欢滚动的对象，它将处理文本区域的滚动需求。
- en: '![image](Images/f0524-01.png)![image](Images/f0524-02.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0524-01.png)![image](Images/f0524-02.png)'
- en: '**JTextArea example**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**JTextArea 示例**'
- en: '![image](Images/f0525-02.png)![image](Images/f0525-01.png)![image](Images/f0526-01.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0525-02.png)![image](Images/f0525-01.png)![image](Images/f0526-01.png)'
- en: '**Constructor**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**构造函数**'
- en: '`JCheckBox check = new JCheckBox("Goes to 11");`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`JCheckBox check = new JCheckBox("Goes to 11");`'
- en: '**How to use it**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何使用它**'
- en: '![Images](Images/1.png) Listen for an item event (when it’s selected or deselected)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Images](Images/1.png) 监听项目事件（当选中或取消选中时）'
- en: '`check.addItemListener(this);`'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`check.addItemListener(this);`'
- en: '![Images](Images/2.png) Handle the event (and find out whether or not it’s
    selected)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![Images](Images/2.png) 处理事件（并找出是否已选中）'
- en: '[PRE6]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Images](Images/3.png) Select or deselect it in code'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/3.png) 在代码中选择或取消选择它'
- en: '[PRE7]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![image](Images/f0527-01.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0527-01.png)'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*JList constructor takes an array of any object type. They don’t have to be
    Strings, but a String representation will appear in the list.*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*JList 构造函数接受任何对象类型的数组。它们不一定是字符串，但列表中会显示字符串表示。*'
- en: '**Constructor**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**构造函数**'
- en: '![image](Images/f0527-02.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0527-02.png)'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This is just like with JTextArea—you make a JScrollPane (and give it the list),
    and then add the scroll pane (NOT the list) to the panel.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 JTextArea 类似 —— 你创建一个 JScrollPane（并将列表放入其中），然后将滚动窗格（而不是列表）添加到面板上。
- en: '**How to use it**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何使用**'
- en: '![Images](Images/1.png) Make it have a vertical scrollbar'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1.png) 使其拥有垂直滚动条'
- en: '[PRE8]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Images](Images/2.png) Set the number of lines to show before scrolling'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/2.png) 设置在滚动前显示的行数'
- en: '[PRE9]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Images](Images/3.png) Restrict the user to selecting only ONE thing at a
    time'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/3.png) 限制用户一次只能选择一项'
- en: '[PRE10]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Images](Images/4.png) Register for list selection events'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/4.png) 注册列表选择事件'
- en: '[PRE11]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Images](Images/5.png) Handle events (find out which thing in the list was
    selected)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/5.png) 处理事件（找出列表中选中的项目）'
- en: '![image](Images/f0527-03.png)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0527-03.png)'
- en: Code Kitchen
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code Kitchen
- en: '![image](Images/f0528-01.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0528-01.png)'
- en: '**This part’s optional. We’re making the full BeatBox, GUI and all. In [Chapter 16](ch16.xhtml#saving_objects_left_parenthesisand_textr),
    Saving Objects, we’ll learn how to save and restore drum patterns. Finally, in
    [Chapter 17](ch17.xhtml#make_a_connection_networking_and_threads), Make a Connection,
    we’ll turn the BeatBox into a working chat client.**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**这部分是可选内容。我们正在制作完整的 BeatBox，包括 GUI 界面等等。在 [第16章](ch16.xhtml#saving_objects_left_parenthesisand_textr)，保存对象，我们将学习如何保存和恢复鼓点模式。最后，在
    [第17章](ch17.xhtml#make_a_connection_networking_and_threads)，建立连接，我们将把 BeatBox
    变成一个可用的聊天客户端。**'
- en: Making the BeatBox
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作 BeatBox
- en: 'This is the full code listing for this version of the BeatBox, with buttons
    for starting, stopping, and changing the tempo. The code listing is complete,
    and fully annotated, but here’s the overview:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此版本 BeatBox 的完整代码清单，包含启动、停止和更改节奏的按钮。代码清单完整且有注释，但这是概述：
- en: '![Images](Images/1.png) Build a GUI that has 256 checkboxes (JCheckBox) that
    start out unchecked, 16 labels (JLabel) for the instrument names, and four buttons.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1.png) 构建一个 GUI，其中包含 256 个复选框（JCheckBox），初始状态未选中，16 个标签（JLabel）用于显示乐器名称，以及四个按钮。'
- en: '![Images](Images/2.png) Register an ActionListener for each of the four buttons.
    We don’t need listeners for the individual checkboxes, because we aren’t trying
    to change the pattern sound dynamically (i.e., as soon as the user checks a box).
    Instead, we wait until the user hits the “start” button, and then walk through
    all 256 checkboxes to get their state and make a MIDI track.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/2.png) 为每个四个按钮注册一个 ActionListener。我们不需要为单独的复选框注册监听器，因为我们不试图动态更改模式声音（即，用户勾选复选框后立即更改）。相反，我们等待用户点击“开始”按钮，然后遍历所有
    256 个复选框以获取它们的状态，并创建一个 MIDI 轨道。'
- en: '![Images](Images/3.png) Set up the MIDI system (you’ve done this before) including
    getting a Sequencer, making a Sequence, and creating a track. We are using a sequencer
    method, setLoopCount(), that allows you to specify how many times you want a sequence
    to loop. We’re also using the sequence’s tempo factor to adjust the tempo up or
    down, and maintain the new tempo from one iteration of the loop to the next.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/3.png) 设置 MIDI 系统（这是你以前做过的），包括获取 Sequencer，创建 Sequence 和 Track。我们使用了
    sequencer 的 setLoopCount() 方法来指定序列循环的次数。我们还使用了序列的 tempo factor 来调整节奏，从而在循环的每次迭代中保持新的节奏。'
- en: '![Images](Images/4.png) When the user hits “start,” the real action begins.
    The event-handling method for the “start” button calls the buildTrackAndStart()
    method. In that method, we walk through all 256 checkboxes (one row at a time,
    a single instrument across all 16 beats) to get their state, and then use the
    information to build a MIDI track (using the handy makeEvent() method we used
    in the previous chapter). Once the track is built, we start the sequencer, which
    keeps playing (because we’re looping it) until the user hits “stop.”'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/4.png) 当用户点击“开始”时，真正的操作开始。用于“开始”按钮的事件处理方法调用 buildTrackAndStart()
    方法。在该方法中，我们遍历所有 256 个复选框（按行，每次一个乐器，跨越所有 16 拍），获取它们的状态，然后使用这些信息构建一个 MIDI 轨道（使用我们在前一章节中使用过的便捷方法
    makeEvent()）。一旦轨道构建完成，我们启动 Sequencer，它会持续播放（因为我们正在循环播放），直到用户点击“停止”。'
- en: '![image](Images/f0530-01.png)![image](Images/f0531-01.png)![image](Images/f0532-01.png)![image](Images/f0533-01.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0530-01.png)![图片](Images/f0531-01.png)![图片](Images/f0532-01.png)![图片](Images/f0533-01.png)'
- en: Exercise
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Exercise
- en: '![image](Images/exercise.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/exercise.png)'
- en: Which code goes with which layout?
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪个代码适用于哪个布局？
- en: Five of the six screens below were made from one of the code fragments on the
    opposite page. Match each of the five code fragments with the layout that fragment
    would produce.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的六个屏幕中有五个是根据对面页面上的代码片段制作的。将这五个代码片段与它们产生的布局进行匹配。
- en: '![image](Images/f0534-02.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0534-02.png)'
- en: '**![Images](Images/arr.png) Answers in [“GUI-Cross”](#gui-cross_left_parenthesisfrom_page_536r).**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片](Images/arr.png) 在[“GUI-Cross”](#gui-cross_left_parenthesisfrom_page_536r)中找到答案。**'
- en: Code Fragments
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码片段
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '* * *'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '* * *'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '* * *'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE15]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '* * *'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: GUI-Cross
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GUI-Cross
- en: '![image](Images/f0536-01.png)![image](Images/f0536-02.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0536-01.png)![图片](Images/f0536-02.png)'
- en: You can do it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做到。
- en: '**Across**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 1\. Artist’s sandbox
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 艺术家的沙盒
- en: 4\. Border’s catchall
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 边框的万能
- en: 5\. Java look
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. Java外观
- en: 9\. Generic waiter
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 通用服务员
- en: 11\. A happening
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 一个事件
- en: 12\. Apply a widget
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 应用小部件
- en: 15\. JPanel’s default
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. JPanel的默认
- en: 16\. Polymorphic test
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 多态测试
- en: 17\. Shake it, baby
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. 摇摆，宝贝
- en: 21\. Lots to say
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 有很多话要说
- en: 23\. Choose many
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 23\. 选择多个
- en: 25\. Button’s pal
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 25\. 按钮的伙伴
- en: 26\. Home of actionPerformed
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 26\. actionPerformed的主页
- en: '**Down**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**纵向**'
- en: 2\. Swing’s dad
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. Swing的父亲
- en: 3\. Frame’s purview
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 框架的范围
- en: 5\. Help’s home
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 帮助的主页
- en: 6\. More fun than text
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 比文本更有趣
- en: 7\. Component slang
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 组件俚语
- en: 8\. Romulin command
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 罗穆林指令
- en: 9\. Arrange
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 排列
- en: 10\. Border’s top
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 边框的顶部
- en: 13\. Manager’s rules
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 管理员的规则
- en: 14\. Source’s behavior
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 源代码的行为
- en: 15\. Border by default
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 默认边框
- en: 18\. User’s behavior
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 用户的行为
- en: 19\. Inner’s squeeze
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 19\. 内部的挤压
- en: 20\. Backstage widget
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 20\. 后台小部件
- en: 22\. Classic Mac look
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 22\. 经典的Mac外观
- en: 24\. Border’s right
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 24\. 边框的右侧
- en: '**![Images](Images/arr.png) Answers in [“GUI-Cross”](#gui-cross_left_parenthesisfrom_page_536r).**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片](Images/arr.png) 在[“GUI-Cross”](#gui-cross_left_parenthesisfrom_page_536r)中找到答案。**'
- en: Exercise Solutions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解决方案
- en: '![image](Images/exercise.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/exercise.png)'
- en: Which code goes with which layout?
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪个代码适用于哪个布局？
- en: (from [“Which code goes with which layout?”](#which_code_goes_with_which_layoutquestio))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“哪个代码适用于哪个布局？”](#which_code_goes_with_which_layoutquestio))
- en: '| ![Images](Images/f0537-01.png) | ![Images](Images/c.png)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片](Images/f0537-01.png) | ![图片](Images/c.png)'
- en: '[PRE17]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Images](Images/f0537-03.png) | ![Images](Images/d.png)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片](Images/f0537-03.png) | ![图片](Images/d.png)'
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Images](Images/f0537-05.png) | ![Images](Images/e.png)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片](Images/f0537-05.png) | ![图片](Images/e.png)'
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Images](Images/f0537-07.png) | ![Images](Images/a.png)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片](Images/f0537-07.png) | ![图片](Images/a.png)'
- en: '[PRE20]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Images](Images/f0537-09.png) | ![Images](Images/b.png)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片](Images/f0537-09.png) | ![图片](Images/b.png)'
- en: '[PRE21]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: GUI-Cross
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GUI-Cross
- en: (from [“GUI-Cross”](#gui_cross))
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“GUI-Cross”](#gui_cross))
- en: '![image](Images/f0538-01.png)![image](Images/f0538-02.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0538-01.png)![图片](Images/f0538-02.png)'
