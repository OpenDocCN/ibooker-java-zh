- en: Chapter 1\. Starting the Journey
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。开始之旅
- en: In this chapter, we’ll give you an introduction to the concepts and principles
    of this book. A good way of summarizing the overall approach is *Practices and
    Principles over Technology*. There are already many books about specific technologies,
    and we aren’t seeking to add to that enormous pile. That isn’t to say that the
    detailed knowledge that is specific to a given language, framework, or library
    isn’t useful. It’s just that it has a shorter shelf-life than general practices
    and principles that apply over longer periods of time and across different languages
    and frameworks. That’s where this book can help you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为您介绍本书的概念和原则。总结整体方法的一个好方法是*实践和原则优于技术*。已经有很多关于特定技术的书籍，我们并不打算增加这堆巨大的书籍。这并不是说专门语言、框架或库的详细知识没有用处。只是相对于适用于更长时间和跨不同语言和框架的一般实践和原则，它的保质期更短。这就是本书能帮助您的地方。
- en: Themes
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题
- en: Throughout the book we’ve used a project-based structure to aid learning. It’s
    worth thinking about the different themes that run through the chapters, how they
    link up together, and why we chose them. Following are the four different themes
    that weave through the chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们采用了基于项目的结构来帮助学习。值得思考的是贯穿各章节的不同主题，它们如何联系在一起，以及我们为什么选择它们。以下是贯穿各章节的四种不同主题。
- en: Java Features
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java特性
- en: Structuring code with classes and interfaces is discussed in [Chapter 2](ch02.xhtml#chapter_02).
    We move onto exceptions and packages in [Chapter 3](ch03.xhtml#chapter_03). You
    will also get a short overview of lambda expressions in [Chapter 3](ch03.xhtml#chapter_03).
    Then local variable type inferences and switch expressions are explained in [Chapter 5](ch05.xhtml#chapter_05),
    and finally lambda expressions and method references are covered in detail in
    [Chapter 7](ch07.xhtml#chapter_07). Java language features are important because
    so many software projects are written in Java, so it’s useful language to know
    the workings of it. Many of these language features are useful in other programming
    languages as well, such as C#, C++, Ruby, or Python. Even though those languages
    have differences, understanding the how to use a class and core OOP concepts will
    be valuable across different languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论了使用类和接口来结构化代码，详见[第 2 章](ch02.xhtml#chapter_02)。我们接着讨论了异常和包，在[第 3 章](ch03.xhtml#chapter_03)。您还将简要了解到lambda表达式在[第
    3 章](ch03.xhtml#chapter_03)中的概述。然后在[第 5 章](ch05.xhtml#chapter_05)中解释了局部变量类型推断和switch表达式，最后在[第
    7 章](ch07.xhtml#chapter_07)中详细讨论了lambda表达式和方法引用。Java语言特性非常重要，因为许多软件项目都是用Java编写的，所以了解它的工作原理是有用的。许多这些语言特性在其他编程语言中也很有用，如C＃、C
    ++、Ruby或Python。尽管这些语言有差异，但理解如何使用类和核心面向对象编程概念将在不同语言中都是宝贵的。
- en: Software Design and Architecture
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件设计和架构
- en: Throughout the book a series of design patterns are introduced that help provide
    you with common solutions to common problems that developers encounter. These
    are important to know because even though it may seem like every software project
    is different and comes with its own set of problems, in practice many of these
    have been encountered before. Understanding common problems and solutions that
    have been solved by developers keeps you from reinventing the wheel in a new software
    project and enables you to deliver software faster and more reliably.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，介绍了一系列设计模式，这些模式帮助您提供了开发人员在开发过程中常见问题的常见解决方案。这些模式很重要，因为尽管每个软件项目可能看起来都不同，都有自己的一套问题，但实际上许多问题以前都遇到过。了解开发人员已解决的常见问题和解决方案，可以避免在新软件项目中重新发明轮子，并使您能够更快速、更可靠地交付软件。
- en: The higher-level concepts of coupling and cohesion are introduced early on the
    book in [Chapter 2](ch02.xhtml#chapter_02). The Notification pattern is introduced
    in [Chapter 3](ch03.xhtml#chapter_03). How to design a user-friendly Fluent API
    and the Builder pattern are introduced in [Chapter 5](ch05.xhtml#chapter_05).
    We look at the big-picture concepts of event-driven and hexagonal architectures
    in [Chapter 6](ch06.xhtml#chapter_06) and the Repository pattern in [Chapter 7](ch07.xhtml#chapter_07).
    Finally, you’re also introduced to functional programming in [Chapter 7](ch07.xhtml#chapter_07).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的高级耦合与内聚概念在[第 2 章](ch02.xhtml#chapter_02)中早早地被引入。通知模式在[第 3 章](ch03.xhtml#chapter_03)中被介绍。如何设计用户友好的流畅
    API 和建造者模式在[第 5 章](ch05.xhtml#chapter_05)中被引入。我们将在[第 6 章](ch06.xhtml#chapter_06)中探讨事件驱动和六边形架构的大局观概念，以及在[第
    7 章](ch07.xhtml#chapter_07)中的仓储模式。最后，在[第 7 章](ch07.xhtml#chapter_07)中还介绍了函数式编程。
- en: SOLID
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOLID
- en: 'We cover all the SOLID principles throughout various chapters. These are a
    set of principles designed to help make software easier to maintain. While we
    like to think of writing software as the fun part, if the software that you write
    is successful it will need to evolve, grow, and be maintained. Trying to make
    the software as easy to maintain as possible helps this evolution, maintenance,
    and long-term addition of features. The SOLID principles and the chapters where
    we will discuss them are:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在各章节中涵盖了所有的SOLID原则。这些原则旨在帮助使软件更易于维护。虽然我们喜欢把编写软件看作是一件有趣的事情，但如果您编写的软件成功了，它将需要不断发展、增长和维护。尽可能地使软件易于维护有助于这种演变、维护和长期功能的增加。我们将讨论SOLID原则及其章节：
- en: Single Responsibility Principle (SRP), discussed in [Chapter 2](ch02.xhtml#chapter_02)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一职责原则（SRP），讨论在[第 2 章](ch02.xhtml#chapter_02)
- en: Open/Closed Principle (OCP), discussed in [Chapter 3](ch03.xhtml#chapter_03)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开闭原则（OCP），讨论在[第 3 章](ch03.xhtml#chapter_03)
- en: Liskov Substitution Principle (LSP), discussed in [Chapter 4](ch04.xhtml#chapter_04)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里氏替换原则（LSP），讨论在[第 4 章](ch04.xhtml#chapter_04)
- en: Interface Segregation Principle (ISP), discussed in [Chapter 5](ch05.xhtml#chapter_05)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口隔离原则（ISP），讨论在[第 5 章](ch05.xhtml#chapter_05)
- en: Dependency Inversion Principle (DIP), discussed in [Chapter 7](ch07.xhtml#chapter_07)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖倒置原则（DIP），讨论在[第 7 章](ch07.xhtml#chapter_07)
- en: Testing
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: Writing reliable code that can be easily evolved over time is really important.
    Automated tests are key to this. As the software that you write scales in size
    it becomes increasingly hard to manually test different possible cases. You need
    to automate your testing processes to avoid the days of human effort it would
    take to test your software without it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编写可靠的、随时间易于演变的代码非常重要。自动化测试对此至关重要。随着您编写的软件规模扩大，手动测试不同可能情况变得越来越困难。您需要自动化您的测试流程，以避免在没有自动化的情况下测试软件将需要花费几天人力。
- en: You learn about the basics of writing tests in Chapters [2](ch02.xhtml#chapter_02)
    and [4](ch04.xhtml#chapter_04). This is extended to test-driven development, or
    TDD, in [Chapter 5](ch05.xhtml#chapter_05). In [Chapter 6](ch06.xhtml#chapter_06)
    we cover the use of test doubles, including mocks and stubs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在第[2](ch02.xhtml#chapter_02)和[4](ch04.xhtml#chapter_04)章节中学习编写测试的基础知识。这在[第
    5 章](ch05.xhtml#chapter_05)中扩展为测试驱动开发或TDD。在[第 6 章](ch06.xhtml#chapter_06)中，我们将介绍测试双，包括模拟和存根。
- en: Chapter Summary
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节总结
- en: Here’s the outline of the chapters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是各章的概要。
- en: '[Chapter 2, *The Bank Statements Analyzer*](ch02.xhtml#chapter_02)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 2 章，《银行对账单分析器》](ch02.xhtml#chapter_02)'
- en: You’ll write a program to analyze bank statements in order to help people understand
    their finances better. This will help you to learn more about core object-oriented
    design techniques such as *Single Responsibility Principle* (SRP), coupling, and
    cohesion.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您将编写一个程序来分析银行对账单，以帮助人们更好地了解他们的财务状况。这将帮助您更多地了解核心面向对象设计技术，如*单一职责原则*（SRP）、耦合和内聚。
- en: '[Chapter 3, *Extending the Bank Statements Analyzer*](ch03.xhtml#chapter_03)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 3 章，《扩展银行对账单分析器》](ch03.xhtml#chapter_03)'
- en: In this chapter you learn how to extend the code from [Chapter 2](ch02.xhtml#chapter_02),
    adding more features, using the Strategy Design pattern, the Open/Closed Principle,
    and how to model failures using exceptions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您将学习如何扩展来自[第 2 章](ch02.xhtml#chapter_02)的代码，添加更多功能，使用策略设计模式、开闭原则以及如何使用异常模型故障。
- en: '[Chapter 4, *The Document Management System*](ch04.xhtml#chapter_04)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 4 章，《文档管理系统》](ch04.xhtml#chapter_04)'
- en: In this chapter we help a successful doctor manage her patient records better.
    This introduces concepts such as inheritance within software design, the Liskov
    Substitution Principle, and tradeoffs between composition and inheritance. You
    will also learn how to write more reliable software with automated test code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将帮助一位成功的医生更好地管理她的患者记录。这介绍了软件设计中的继承概念，里斯科夫替换原则以及组合与继承之间的权衡。您还将学习如何通过自动化测试代码编写更可靠的软件。
- en: '[Chapter 5, *The Business Rules Engine*](ch05.xhtml#chapter_05)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章，*业务规则引擎*](ch05.xhtml#chapter_05)'
- en: You’ll learn about building a core business rules engine—a way of defining business
    logic that is flexible and easy to maintain. This chapter introduces the topics
    of test-driven development, developing a Fluent API, and the Interface Segregation
    Principle.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解如何构建核心业务规则引擎 —— 一种定义业务逻辑的灵活且易于维护的方式。本章介绍了测试驱动开发、开发流畅 API 和接口隔离原则的主题。
- en: '[Chapter 6, *Twootr*](ch06.xhtml#chapter_06)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章，*Twootr*](ch06.xhtml#chapter_06)'
- en: '*Twootr* is a messaging platform that enables people to broadcast short messages
    to other users who follow them. This chapter builds out the core of a simple Twootr
    system. You’ll learn how to think outside-in—to go from requirements through to
    the core of your application. You’ll also learn how to use test doubles to isolate
    and test interactions from different components within your codebase.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*Twootr* 是一个消息平台，使用户能够向关注他们的其他用户广播短消息。本章将构建一个简单的 Twootr 系统的核心部分。您将学习如何从需求出发，一直到应用程序的核心。您还将学习如何使用测试替身来隔离和测试代码库中不同组件之间的交互。'
- en: '[Chapter 7, *Extending Twootr*](ch07.xhtml#chapter_07)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章，*扩展 Twootr*](ch07.xhtml#chapter_07)'
- en: The final project-based chapter in the book extends the Twootr implementation
    from the previous chapter. It explains the Dependency Inversion Principle and
    introduces bigger picture architectural choices such as event-driven and hexagonal
    architectures. This chapter can help you extend your knowledge of automated testing
    by covering test doubles, such as stubs and mocks, and also functional programming
    techniques.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的最后一个基于项目的章节扩展了上一章的 Twootr 实现。它解释了依赖反转原则，并介绍了事件驱动和六边形架构等更大的架构选择。本章还通过涵盖桩和模拟等测试替身以及功能编程技术，帮助您扩展自己的自动化测试知识。
- en: '[Chapter 8, *Conclusion*](ch08.xhtml#chapter_08)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章，*结论*](ch08.xhtml#chapter_08)'
- en: This final concluding chapter revisits the major themes and concepts of the
    book and offers additional resources as you continue in your programming career.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最终总结章节重新审视了本书的主要主题和概念，并提供了进一步的资源，帮助您在编程职业中继续前行。
- en: Iterating on You
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代你自己
- en: As a software developer you may well approach projects in an iterative fashion.
    That’s to say, slice off the highest priority week or two’s worth of work items,
    implement them, and then use the feedback in order to decide on the next set of
    items. We’ve found that it’s often worth evaluating the progress of your own skills
    in the same way.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件开发人员，您可能会以迭代方式来处理项目。也就是说，分解最高优先级的一两周工作项目，实施它们，然后利用反馈来决定下一组项目。我们发现，评估自己技能进展的方式通常是值得的。
- en: At the end of every chapter there is a brief “Iterating on You” section with
    a few suggestions on how you improve upon on the learning from the chapter in
    your own time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每章的最后都有一个简短的“迭代自己”部分，提出一些建议，帮助您在自己的时间中进一步学习章节内容。
- en: Now that you know what you can expect from this book, let’s get to work!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道本书能为您带来什么，让我们开始工作吧！
