- en: 'Chapter 5\. Extra-Strength Methods: Writing A Program'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。超强方法：编写一个程序
- en: '![image](Images/f0095-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0095-01.png)'
- en: '**Let’s put some muscle in our methods.** We dabbled with variables, played
    with a few objects, and wrote a little code. But we were weak. We need more tools.
    Like **operators**. We need more operators so we can do something a little more
    interesting than, say, *bark*. And **loops**. We need loops, but what’s with the
    wimpy *while* loops? We need ***for*** loops if we’re really serious. Might be
    useful to **generate random numbers**. Better learn that too. And why don’t we
    learn it all by *building* something real, to see what it’s like to write (and
    test) a program from scratch. **Maybe a game**, like Battleships. That’s a heavy-lifting
    task, so it’ll take *two* chapters to finish. We’ll build a simple version in
    this chapter and then build a more powerful deluxe version in [Chapter 6](ch06.xhtml#using_the_java_library_get_to_know_the_j),
    *Using the Java Library*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们为我们的方法加点力气。** 我们尝试了变量，玩了一些对象，并写了一些代码。但我们还不够强大。我们需要更多的工具。像**运算符**。我们需要更多的运算符，这样我们可以做一些比如说*吠*更有趣的事情。还有**循环**。我们需要循环，但这种弱弱的*while*循环是怎么回事？如果我们真的认真的话，我们需要***for***循环。也许学习**生成随机数**也会有用。还有为什么我们不通过*构建*一个真实的东西来学习所有这些，看看从头编写（和测试）程序是什么感觉。**也许是一个游戏**，像战舰。这是一个需要大力完成的任务，所以需要*两*章来完成。我们将在本章中构建一个简单版本，然后在[第六章](ch06.xhtml#using_the_java_library_get_to_know_the_j)中构建一个更强大的豪华版本。'
- en: 'Let’s build a Battleship-style game: “Sink a Startup”'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们来建立一个类似战舰游戏的游戏：“击沉一个创业公司”
- en: It’s you against the computer, but unlike the real Battleship game, in this
    one you don’t place any ships of your own. Instead, your job is to sink the computer’s
    ships in the fewest number of guesses.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你对抗计算机的游戏，但与真正的战舰游戏不同，你不需要放置自己的船只。相反，你的任务是在尽可能少的猜测中击沉计算机的船只。
- en: Oh, and we aren’t sinking ships. We’re killing ill-advised, Silicon Valley Startups
    (thus establishing business relevancy so you can expense the cost of this book).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我们不是在击沉船只。我们要消灭不明智的硅谷创业公司（从而建立业务相关性，以便你可以报销这本书的费用）。
- en: '**Goal:** Sink all of the computer’s Startups in the fewest number of guesses.
    You’re given a rating or level, based on how well you perform.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：** 在尽可能少的猜测中击沉所有计算机的创业公司。根据你的表现，你将得到一个评级或等级。'
- en: '**Setup:** When the game program is launched, the computer places three Startups
    on a **virtual 7 x 7 grid**. When that’s complete, the game asks for your first
    guess.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置：** 游戏程序启动时，计算机在**虚拟的 7 x 7 网格**上放置了三个创业公司。完成后，游戏会询问你的第一个猜测。'
- en: '**How you play:** We haven’t learned to build a GUI yet, so this version works
    at the command line. The computer will prompt you to enter a guess (a cell) that
    you’ll type at the command line as “A3,” “C5,” etc.). In response to your guess,
    you’ll see a result at the command-line, either “hit,” “miss,” or “You sunk poniez”
    (or whatever the lucky Startup of the day is). When you’ve sent all three Startups
    to that big 404 in the sky, the game ends by printing out your rating.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏玩法：** 我们还没有学会构建 GUI，所以这个版本在命令行上运行。计算机会提示你输入一个猜测（一个单元格），你将在命令行上输入“A3”，“C5”等）。作为对你猜测的回应，你会在命令行上看到一个结果，要么是“命中”，“错过”，或“你击沉了
    poniez”（或者是今天幸运的创业公司名称）。当你将所有三个创业公司送上天堂的 404 时，游戏将打印出你的评级。'
- en: '![image](Images/f0096-01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0096-01.png)'
- en: '**You’re going to build the Sink a Startup game, with a 7 x 7 grid and three
    Startups. Each Startup takes up three cells.**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**你将要建立击沉一个创业公司的游戏，拥有一个 7 x 7 的网格和三个创业公司。每个创业公司占据三个单元格。**'
- en: '**part of a game interaction**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏互动的一部分**'
- en: '![image](Images/f0096-02.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0096-02.png)'
- en: First, a high-level design
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先，一个高级设计。
- en: We know we’ll need classes and methods, but what should they be? To answer that,
    we need more information about what the game should do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们将需要类和方法，但它们应该是什么？为了回答这个问题，我们需要更多关于游戏应该做什么的信息。
- en: 'First, we need to figure out the general flow of the game. Here’s the basic
    idea:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要弄清楚游戏的一般流程。这里是基本想法：
- en: '![image](Images/f0097-02.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0097-02.png)'
- en: Figure 5-1\. Whoa. A real flow chart.
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 哇。一个真正的流程图。
- en: '![Images](Images/1circlea.png) User starts the game.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/1circlea.png) 用户开始游戏。'
- en: '![Images](Images/acirclea.png) Game creates three Startups'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/acirclea.png) 游戏创建三个创业公司。'
- en: '![Images](Images/acircleb.png) Game places the three Startups onto a virtual
    grid'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/acircleb.png) 游戏将三个创业公司放置在虚拟网格上。'
- en: '![Images](Images/1circleb.png) Game play begins.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![Images](Images/1circleb.png) 游戏开始。'
- en: 'Repeat the following until there are no more Startups:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重复以下步骤，直到没有更多的创业公司：
- en: '![image](Images/f0097-01.png)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0097-01.png)'
- en: '![Images](Images/1circlec.png) Game finishes.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circlec.png) 游戏结束。'
- en: Give the user a rating based on the number of guesses.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于猜测次数给用户评级。
- en: Now we have an idea of the kinds of things the program needs to do. The next
    step is figuring out what kind of **objects** we’ll need to do the work. Remember,
    think like Brad rather than Laura (who we met in [Chapter 2](ch02.xhtml#a_trip_to_objectville_classes_and_object),
    *A Trip to Objectville*); focus first on the ***things*** in the program rather
    than the ***procedures.***
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对程序需要做的事情有了一个概念。下一步是弄清楚我们需要哪种**对象**来完成工作。记住，首先要像Brad一样思考，而不是像Laura（我们在[第2章](ch02.xhtml#a_trip_to_objectville_classes_and_object)中遇到的
    *A Trip to Objectville*）；首先专注于程序中的***事物***而不是***过程***。
- en: The “Simple Startup Game” a gentler introduction
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “简单启动游戏”是一个更温和的介绍
- en: It looks like we’re gonna need at least two classes, a Game class and a Startup
    class. But before we build the fullmonty ***Sink a Startup*** game, we’ll start
    with a strippeddown, simplified version, ***Simple Startup Game***. We’ll build
    the simple version in *this* chapter, followed by the deluxe version that we build
    in the *next* chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们至少需要两个类，一个是游戏类，一个是启动类。但在构建完整的***击沉一家初创公司***游戏之前，我们将从简化版本***简单启动游戏***开始。我们将在*本*章节构建简单版本，然后在*下*一章节构建豪华版本。
- en: Everything is simpler in this game. Instead of a 2-D grid, we hide the Startup
    in just a single *row*. And instead of *three* Startups, we use *one*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏中一切都更简单。不使用2D网格，我们只隐藏启动在单个*行*中。而不是*三*个启动，我们使用*一个*。
- en: The goal is the same, though, so the game still needs to make a Startup instance,
    assign it a location somewhere in the row, get user input, and when all of the
    Startup’s cells have been hit, the game is over. This simplified version of the
    game gives us a big head start on building the full game. If we can get this small
    one working, we can scale it up to the more complex one later.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管目标相同，但游戏仍需要创建一个启动实例，将其放置在行中的某个位置，获取用户输入，当所有启动单元格都被击中时，游戏结束。这个简化版本的游戏为我们构建完整游戏奠定了良好的基础。如果我们能够使这个小版本工作，稍后可以将其扩展到更复杂的版本。
- en: In this simple version, the game class has no instance variables, and all the
    game code is in the main() method. In other words, when the program is launched
    and main() begins to run, it will make the one and only Startup instance, pick
    a location for it (three consecutive cells on the single virtual seven-cell row),
    ask the user for a guess, check the guess, and repeat until all three cells have
    been hit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单版本中，游戏类没有实例变量，所有游戏代码都在main()方法中。换句话说，当程序启动并且main()开始运行时，它将创建一个且唯一的启动实例，为其选择一个位置（在单个虚拟七单元格行上的三个连续单元格），询问用户进行猜测，检查猜测并重复，直到所有三个单元格都被击中。
- en: Keep in mind that the virtual row is...*virtual*. In other words, it doesn’t
    exist anywhere in the program. As long as both the game and the user know that
    the Startup is hidden in three consecutive cells out of a possible seven (starting
    at zero), the row itself doesn’t have to be represented in code. You might be
    tempted to build an array of seven ints and then assign the Startup to three of
    the seven elements in the array, but you don’t need to. All we need is an array
    that holds just the three cells the Startup occupies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 记住虚拟行是...*虚拟的*。换句话说，它在程序中不存在。只要游戏和用户都知道启动隐藏在七个可能单元格（从零开始）中的三个连续单元格中，行本身就不需要在代码中表示。您可能会想要构建一个包含七个整数的数组，然后将启动分配给数组中的三个元素，但您不需要这样做。我们只需要一个数组，其中包含启动占据的三个单元格。
- en: '![image](Images/f0098-02.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0098-02.png)'
- en: '![Images](Images/1circlea.png) **Game starts** and creates ONE Startup and
    gives it a location on three cells in the single row of seven cells.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circlea.png) **游戏开始** 并创建一个启动，将其放置在七个单元格中的一个单行上的三个单元格上。'
- en: 'Instead of “A2,” “C4,” and so on, the locations are just integers (for example:
    1,2,3 are the cell locations in this picture):'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 而不是“A2”，“C4”等等，位置只是整数（例如：1,2,3是图片中的单元格位置）：
- en: '![image](Images/f0098-01.png)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](Images/f0098-01.png)'
- en: '![Images](Images/1circleb.png) **Game play begins.** Prompt user for a guess;
    then check to see if it hit any of the Startup’s three cells. If a hit, increment
    the numOfHits variable.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circleb.png) **游戏开始。** 提示用户进行猜测；然后检查是否击中任何启动的三个单元格。如果击中，增加numOfHits变量。'
- en: '![Images](Images/1circlec.png) **Game finishes** when all three cells have
    been hit (the numOfHits variable value is 3), and the user is told how many guesses
    it took to sink the Startup.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/1circlec.png) **游戏完成**当所有三个单元都被击中时（numOfHits变量的值为3），并告诉用户击沉Startup花了多少次猜测。'
- en: '**A complete game interaction**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整的游戏交互**'
- en: '![image](Images/f0098-03.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0098-03.png)'
- en: Developing a Class
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发一个类
- en: 'As a programmer, you probably have a methodology/process/approach to writing
    code. Well, so do we. Our sequence is designed to help you see (and learn) what
    we’re thinking as we work through coding a class. It isn’t necessarily the way
    we (or *you*) write code in the Real World. In the Real World, of course, you’ll
    follow the approach your personal preferences, project, or employer dictate. We,
    however, can do pretty much whatever we want. And when we create a Java class
    as a “learning experience,” we usually do it like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，您可能有一套编写代码的方法论/过程/方法。我们也是如此。我们的顺序旨在帮助您看到（和学习）我们在编写类的过程中的思维方式。在真实世界中，这不一定是我们（或*您*）编写代码的方式。当然，在真实世界中，您将遵循个人喜好、项目或雇主指定的方法。但是，我们可以做几乎任何我们想做的事情。当我们创建一个“学习体验”的Java类时，我们通常是这样做的：
- en: '![Images](Images/box.png) Figure out what the class is supposed to *do*.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) 弄清楚这个类应该*做*什么。'
- en: '![Images](Images/box.png) List the **instance variables and methods.**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) 列出实例变量和方法。'
- en: '![Images](Images/box.png) Write **prep code** for the methods. (You’ll see
    this in just a moment.)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![图片](Images/box.png) 为方法编写**准备代码**。（您很快就会看到这一点。）'
- en: '![Images](Images/box.png) Write **test code** for the methods.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) 为方法编写**测试代码**。'
- en: '![Images](Images/box.png) **Implement** the class.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) **实现**这个类。'
- en: '![Images](Images/box.png) **Test** the methods.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) **测试**方法。'
- en: '![Images](Images/box.png) **Debug** and **reimplement** as needed.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) 根据需要**调试**和**重新实现**。'
- en: '![Images](Images/box.png) Express gratitude that we don’t have to test our
    so-called *learning experience* app on actual live users.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '![图片](Images/box.png) 表达感激之情，因为我们不必在真实的用户上测试我们所谓的*学习体验*应用程序。'
- en: '![image](Images/f0099-03.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0099-03.png)'
- en: 'The three things we’ll write for each class:'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们为每个类写三件事：
- en: '![image](Images/f0099-01.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0099-01.png)'
- en: This bar is displayed on the next set of pages to tell you which part you’re
    working on. For example, if you see this picture at the top of a page, it means
    you’re working on prep code for the SimpleStartup class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此条显示在下一组页面上，告诉您正在处理的部分。例如，如果您在页面顶部看到这张图片，那么意味着您正在处理SimpleStartup类的准备代码。
- en: '![image](Images/f0099-02.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0099-02.png)'
- en: '**prep code**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**准备代码**'
- en: A form of pseudocode, to help you focus on the logic without stressing about
    sy ntax.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一种伪代码形式，帮助您专注于逻辑，而不用担心语法。
- en: '**test code**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试代码**'
- en: A class or methods that will test the real code and validate that it’s doing
    the right thing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类或方法将测试真实代码并验证它是否做正确的事情。
- en: '**real code**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**真实代码**'
- en: The actual implementation of the class. This is where we write real Java code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类的实际实现。这是我们编写真正的Java代码的地方。
- en: '![image](Images/f0100-02.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0100-02.png)'
- en: 'You’ll get the idea of how prep code (our version of pseudocode) works as you
    read through this example. It’s sort of halfway between real Java code and a plain
    English description of the class. Most prep code includes three parts: instance
    variable declarations, method declarations, method logic. The most important part
    of prep code is the method logic, because it defines *what* has to happen, which
    we later translate into *how* when we actually write the method code.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这个例子后，您将会理解到准备代码（我们版本的伪代码）是如何工作的概念。它在真实的Java代码和类的简单英文描述之间处于中间状态。大多数准备代码包括三个部分：实例变量声明，方法声明，方法逻辑。准备代码最重要的部分是方法逻辑，因为它定义了需要发生的事情，这些事情在我们实际编写方法代码时会被翻译成如何发生。
- en: '![image](Images/f0100-01.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0100-01.png)'
- en: Writing the method implementations
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写方法实现
- en: '**Let’s write the real method code now and get this puppy working.**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在让我们写真正的方法代码并让这个程序正常工作。**'
- en: '![image](Images/f0101-01.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0101-01.png)'
- en: Before we start coding the methods, though, let’s back up and write some code
    to *test* the methods. That’s right, we’re writing the test code *before* there’s
    anything to test!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写方法之前，让我们回顾一下并编写一些代码来*测试*这些方法。是的，在有任何需要测试的东西之前，我们先编写测试代码！
- en: The concept of writing the test code first is one of the practices of Test-Driven
    Development (TDD), and it can make it easier (and faster) for you to write your
    code. We’re not necessarily saying you should use TDD, but we do like the part
    about writing tests first. And TDD just *sounds* cool.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 先写测试代码的概念是测试驱动开发（TDD）的实践之一，它可以让您更轻松（更快地）编写代码。我们不一定建议您使用 TDD，但我们确实喜欢先写测试的部分。而
    TDD 听起来就很酷。
- en: Writing test code for the SimpleStartup class
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 SimpleStartup 类编写测试代码
- en: We need to write test code that can make a SimpleStartup object and run its
    methods. For the SimpleStartup class, we really care about only the *checkYourself()*
    method, although we *will* have to implement the *setLocationCells()* method in
    order to get the *checkYourself()* method to run correctly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写测试代码，可以创建 SimpleStartup 对象并运行其方法。对于 SimpleStartup 类，我们真正关心的只有 *checkYourself()*
    方法，尽管我们 *将* 不得不实现 *setLocationCells()* 方法以确保 *checkYourself()* 方法正确运行。
- en: Take a good look at the prep code below for the *checkYourself()* method (the
    *setLocationCells()* method is a no-brainer setter method, so we’re not worried
    about it, but in a “real” application we might want a more robust “setter” method,
    which we *would* want to test).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看下面为 *checkYourself()* 方法准备的准备代码（*setLocationCells()* 方法是一个简单的 setter 方法，所以我们不担心，但在一个“真实”的应用程序中，我们可能需要一个更健壮的“setter”方法来测试）。
- en: Then ask yourself, “If the checkYourself() method were implemented, what test
    code could I write that would prove to me the method is working correctly?”
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后问自己，“如果 checkYourself() 方法被实现了，我能写什么测试代码来证明该方法工作正常？”
- en: 'Based on this prep code:'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据这些准备代码：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s what we should test:'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这里是我们应该测试的内容：
- en: Instantiate a SimpleStartup object.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个 SimpleStartup 对象。
- en: Assign it a location (an array of 3 ints, like {2, 3, 4}).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配一个位置（一个包含 3 个整数的数组，如 {2, 3, 4}）。
- en: Create an int to represent a user guess (2, 0, etc.).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个整数表示用户的猜测（2、0 等）。
- en: Invoke the checkYourself() method passing it the fake user guess.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 checkYourself() 方法并传递一个虚假的用户猜测。
- en: Print out the result to see if it’s correct (“passed” or “failed”).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印结果以查看是否正确（“通过”或“失败”）。
- en: Test code for the SimpleStartup class
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 SimpleStartup 类的代码
- en: '![image](Images/f0103-01.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0103-01.png)'
- en: '![Images](Images/arr.png) **Yours to solve.**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr.png) **请解决。**'
- en: The checkYourself() method
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: checkYourself() 方法
- en: There isn’t a perfect mapping from prep code to Java code; you’ll see a few
    adjustments. The prep code gave us a much better idea of *what* the code needs
    to do, and now we have to figure out the Java code that can do the *how.*
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从准备代码到 Java 代码没有完美的映射；我们会做一些调整。准备代码让我们更清楚代码需要做什么，现在我们必须弄清楚如何编写可以执行 *how* 的 Java
    代码。
- en: In the back of your mind, be thinking about parts of this code you might want
    (or need) to improve. The numbers ![image](Images/1.png) are for things (syntax
    and language features) you haven’t seen yet. They’re explained on the opposite
    page.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在心里想想你可能想要（或需要）改进的代码部分。数字 ![image](Images/1.png) 是你以前没见过的东西（语法和语言特性）。它们在对面页面有解释。
- en: '![image](Images/f0104-01.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0104-01.png)'
- en: Just the new stuff
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只是新的东西
- en: The things we haven’t seen before are on this page. Stop worrying! There are
    more details later in the chapter. This is just enough to get you going.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前没见过的东西都在这一页上。别担心！本章后面还有更多细节。这些内容足以让你开始。
- en: '![image](Images/f0105-01.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0105-01.png)'
- en: Final code for SimpleStartup and SimpleStartupTestDrive
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SimpleStartup 和 SimpleStartupTestDrive 的最终代码
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There’s a little bug lurking here. It compiles and runs, but...don’t worry about
    it for now, but we *will* have to face it a little later.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里潜藏着一个小 bug。它可以编译和运行，但...现在不用担心，但稍后我们 *将* 不得不面对它。
- en: Prep code for the SimpleStartupGame class Everything happens in main()
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SimpleStartupGame 类的准备代码，所有操作都在 main() 中完成。
- en: There are some things you’ll have to take on faith. For example, we have one
    line of prep code that says “GET user input from command line.” Let me tell you,
    that’s a little more than we want to implement from scratch right now. But happily,
    we’re using OO. And that means you get to ask some *other* class/object to do
    something for you, without worrying about ***how*** it does it. When you write
    prep code, you should assume that *somehow* you’ll be able to do whatever you
    need to do, so you can put all your brainpower into working out the logic.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些事情你必须相信。例如，我们有一行准备代码说“从命令行获取用户输入。”让我告诉你，这比我们现在想要从头开始实现的要多一点。但幸运的是，我们正在使用OO。这意味着你可以请求*其他*类/对象为你做一些事情，而不用担心***它是如何***做到的。当你编写准备代码时，你应该假设*某种方式*你将能够做任何你需要做的事情，这样你就可以将所有的脑力投入到解决逻辑问题上。
- en: '[PRE3]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![image](Images/f0109-01.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0109-01.png)'
- en: The game’s main() method
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏的main()方法
- en: Just as you did with the SimpleStartup class, be thinking about parts of this
    code you might want (or need) to improve. The numbered things ![image](Images/1.png)
    are for stuff we want to point out. They’re explained on the opposite page. Oh,
    if you’re wondering why we skipped the test code phase for this class, we don’t
    need a test class for the game. It has only one method, so what would you do in
    your test code? Make a separate class that would call main() on this class? We
    didn’t bother, we’ll just run this to test it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你对SimpleStartup类所做的那样，考虑一下你可能想要（或需要）改进的代码部分。编号的东西![图片](Images/1.png)是我们想要指出的内容。它们在对面的页面上有解释。哦，如果你想知道为什么我们跳过了这个类的测试代码阶段，我们不需要为游戏编写测试类。它只有一个方法，那么在你的测试代码中你会做什么？创建一个单独的类来调用这个类的main()吗？我们没费心，我们只需运行这个来测试它。
- en: '![image](Images/f0110-01.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0110-01.png)'
- en: random() and getUserInput()
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: random()和getUserInput()
- en: Two things that need a bit more explaining are on this page. This is just a
    quick look to keep you going; more details on the GameHelper class are at the
    end of this chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '这页上有两件需要更详细解释的事情。这只是一个快速的查看，以便让你继续前进；有关GameHelper类的更多细节在本章末尾。 '
- en: '![image](Images/f0111-01.png)![image](Images/f0111-02.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0111-01.png)![图片](Images/f0111-02.png)'
- en: 'One last class: GameHelper'
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后一个类：GameHelper
- en: '**We made the *Startup* class.**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们制作了*Startup*类。**'
- en: '**We made the *game* class.**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们制作了*game*类。**'
- en: '**All that’s left is the *helper* class**—the one with the getUserInput() method.
    The code to get command-line input is more than we want to explain right now.
    It opens up topics best left for later. (Later, as in [Chapter 16](ch16.xhtml#saving_objects_left_parenthesisand_textr),
    *Saving Objects.*)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**剩下的只有*helper*类**—具有getUserInput()方法的类。获取命令行输入的代码超出了我们现在想要解释的范围。这会引出最好留到以后讨论的话题。（以后，即[第16章](ch16.xhtml#saving_objects_left_parenthesisand_textr)，*保存对象*。）'
- en: Just copy* the code below and compile it into a class named GameHelper. Drop
    all three class files (SimpleStartup, SimpleStartupGame, GameHelper) into the
    same directory, and make it your working directory.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 只需*复制*下面的代码并将其编译成一个名为GameHelper的类。将所有三个类文件（SimpleStartup、SimpleStartupGame、GameHelper）放入同一个目录，并将其设置为工作目录。
- en: '![image](Images/f0112-01.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0112-01.png)'
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![image](Images/f0112-02.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0112-02.png)'
- en: '* We know how much you enjoy typing, but for those rare moments when you’d
    rather do something else, we’ve made the Ready-Bake Code available on *[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples).*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们知道你有多喜欢打字，但在那些你更愿意做其他事情的罕见时刻，我们已经将Ready-Bake Code提供在*[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples)*上。*'
- en: Let’s play
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们玩吧
- en: Here’s what happens when we run it and enter the numbers 1,2,3,4,5,6\. Lookin’
    good.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行它并输入数字1,2,3,4,5,6时会发生什么。看起来不错。
- en: '**A complete game interaction**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个完整的游戏交互**'
- en: (your mileage may vary)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: （你的情况可能有所不同）
- en: '![image](Images/f0113-01.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0113-01.png)'
- en: What’s this? A bug ?
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是什么？一个bug？
- en: Gasp!
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哇！
- en: Here’s what happens when we enter 1,1,1.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入1,1,1时会发生什么。
- en: '**A different game interaction** (yikes)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**另一个游戏交互**（天啊）'
- en: '![image](Images/f0113-02.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0113-02.png)'
- en: More about for loops
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于for循环的内容
- en: We’ve covered all the game code for *this* chapter (but we’ll pick it up again
    to finish the deluxe version of the game in the next chapter). We didn’t want
    to interrupt your work with some of the details and background info, so we put
    it back here. We’ll start with the details of for loops, and if you’ve seen this
    kind of syntax in another programming language, just skim these last few pages...
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了*本*章节的所有游戏代码（但我们将在下一章节中继续完成游戏的高级版本）。我们不想用一些细节和背景信息打断你的工作，所以我们把它放在这里。我们将从
    for 循环的细节开始，如果你在另一种编程语言中看到了这种语法，只需浏览一下最后几页...
- en: Regular (non-enhanced) for loops
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常规（非增强型）for 循环
- en: '![image](Images/f0114-01.png)![image](Images/f0114-02.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0114-01.png)![image](Images/f0114-02.png)'
- en: '**What it means in plain English:** “Repeat 100 times.”'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**用简单的英语说：** “重复 100 次。”'
- en: '**How the compiler sees it:**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**编译器如何看待它：**'
- en: create a variable *i* and set it to 0.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个变量 *i* 并将其设置为 0。
- en: repeat while *i* is less than 100.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 *i* 小于 100 时重复。
- en: at the end of each loop iteration, add 1 to *i*.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次循环迭代结束时，将 *i* 加 1。
- en: '**Part One: *initialization***'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一部分：*初始化***'
- en: Use this part to declare and initialize a variable to use within the loop body.
    You’ll most often use this variable as a counter. You can actually initialize
    more than one variable here, but it’s much more common to use a single variable.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此部分声明和初始化一个变量，在循环体内使用。你通常会将此变量用作计数器。实际上，你可以在这里初始化多个变量，但更常见的是使用单个变量。
- en: '**Part Two: *boolean test***'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二部分：*布尔测试***'
- en: This is where the conditional test goes. Whatever’s in there, it *must* resolve
    to a boolean value (you know, ***true*** or ***false***). You can have a test,
    like (x >= 4), or you can even invoke a method that returns a boolean.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是条件测试的地方。无论里面放了什么，它*必须*解析为布尔值（你知道的，***true*** 或 ***false***）。你可以有一个测试，比如 (x
    >= 4)，或者甚至可以调用一个返回布尔值的方法。
- en: '**Part Three: *iteration expression***'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三部分：*迭代表达式***'
- en: In this part, put one or more things you want to happen with each trip through
    the loop. Keep in mind that this stuff happens at the *end* of each loop.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部分，放入你希望每次循环都发生的一个或多个事情。请记住，这些内容发生在每次循环的*末尾*。
- en: '**repeat for 100 reps:**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**重复 100 次：**'
- en: Trips through a loop
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环的步骤
- en: '[PRE5]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![image](Images/f0115-01.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0115-01.png)'
- en: Difference between for and while
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for 和 while 的区别
- en: A *while* loop has only the boolean test; it doesn’t have a built-in initialization
    or iteration expression. A *while* loop is good when you don’t know how many times
    to loop and just want to keep going while some condition is true. But if you *know*
    how many times to loop (e.g., the length of an array, 7 times, etc.), a *for*
    loop is cleaner. Here’s the loop above rewritten using *while:*
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '*while* 循环只有布尔测试；它没有内置的初始化或迭代表达式。当你不知道要循环多少次，只想在某些条件为真时继续时，*while* 循环很好用。但如果你*知道*要循环多少次（例如，数组的长度，7
    次等），用 *for* 循环更清晰。以下是上面的循环使用 *while* 重写的示例：'
- en: '![image](Images/f0115-02.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0115-02.png)'
- en: '**output:**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![image](Images/f0115-03.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0115-03.png)'
- en: The enhanced for loop
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强型 for 循环
- en: The Java language added a second kind of *for* loop called the *enhanced for*
    back in Java 5\. This makes it easier to iterate over all the elements in an array
    or other kinds of collections (you’ll learn about *other* collections in the next
    chapter). That’s really all that the enhanced for gives you—a simpler way to walk
    through all the elements in the collection. We’ll see the enhanced for loop in
    the next chapter too, when we talk about collections that *aren’t* arrays.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Java 语言在 Java 5 中添加了另一种称为*增强型 for* 的 *for* 循环。这使得在数组或其他类型的集合中迭代所有元素更加简单（下一章节将介绍*其他*类型的集合）。增强型
    for 循环仅仅提供了一个更简单的方式来遍历集合中的所有元素。我们也会在下一章中看到增强型 for 循环，当我们讨论不是数组的集合时。
- en: '![image](Images/f0116-01.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0116-01.png)'
- en: '**What it means in plain English:** “For each element in nameArray, assign
    the element to the ‘name’ variable, and run the body of the loop.”'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**用简单的英语说：** “对于 nameArray 中的每个元素，将该元素赋给 ''name'' 变量，并运行循环体。”'
- en: '**How the compiler sees it:**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**编译器如何看待它：**'
- en: Create a String variable called *name* and set it to null.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个名为 *name* 的 String 变量并将其设置为 null。
- en: Assign the first value in *nameArray* to name.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 *nameArray* 中的第一个值分配给 name。
- en: Run the body of the loop (the code block bounded by curly braces).
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行循环体（由花括号限定的代码块）。
- en: Assign the next value in *nameArray* to name.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 *nameArray* 中的下一个值分配给 name。
- en: Repeat while *there are still elements* in the array.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当数组中仍然有元素时重复。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: depending on the programming language they’ve used in the past, some
    people refer to the enhanced for as the “for each” or the “for in” loop, because
    that’s how it reads: “for EACH thing IN the collection...”'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：根据他们过去使用的编程语言不同，有些人称增强型 for 循环为“for each”或“for in”循环，因为这就是它的读法：“for EACH
    thing IN the collection…”
- en: '**Part One: *iteration variable declaration***'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一部分：*迭代变量声明***'
- en: Use this part to declare and initialize a variable to use within the loop body.
    With each iteration of the loop, this variable will hold a different element from
    the collection. The type of this variable must be compatible with the elements
    in the array! For example, you can’t declare an *int* iteration variable to use
    with a *String[] array.*
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此部分来声明和初始化一个变量，在循环体内使用。每次循环迭代时，这个变量将保存来自集合的不同元素。这个变量的类型必须与数组中的元素兼容！例如，你不能声明一个*int*类型的迭代变量并用于*String[]数组*。
- en: '**Part Two: *the actual collection***'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二部分：*实际集合***'
- en: This must be a reference to an array or other collection. Again, don’t worry
    about the *other* non-array kinds of collections yet—you’ll see them in the next
    chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须是一个数组或其他集合的引用。同样，暂时不用担心*其他*非数组类型的集合——你将在下一章中看到它们。
- en: Casting primitives
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据类型的类型转换
- en: Before we finish the chapter, we want to tie up a loose end. When we used Math.random(),
    we had to *cast* the result to an int. Casting one numeric type to another can
    change the value itself. It’s important to understand the rules so you’re not
    surprised by this.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，我们想解决一个悬而未决的问题。当我们使用Math.random()时，我们必须将结果转换为int。将一个数值类型转换为另一个可以改变值本身。理解这些规则非常重要，这样你就不会对此感到意外。
- en: '![image](Images/f0117-01.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0117-01.png)'
- en: 'In [Chapter 3](ch03.xhtml#know_your_variables_primitives_and_refer), *Know
    Your Variables*, we talked about the sizes of the various primitives and how you
    can’t shove a big thing directly into a small thing:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第三章](ch03.xhtml#know_your_variables_primitives_and_refer)，*了解你的变量*中，我们讨论了各种原始数据类型的大小以及你不能直接将大数据放入小数据中的问题：
- en: '[PRE6]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A long is bigger than an int, and the compiler can’t be sure where that long
    has been. It might have been out partying with the other longs, and taking on
    really big values. To force the compiler to jam the value of a bigger primitive
    variable into a smaller one, you can use the cast operator. It looks like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: long比int大，编译器不能确定long的值可能是多少。它可能已经与其他long一起参加聚会，并且具有非常大的值。为了强制编译器将较大的原始变量值装入较小的原始变量中，你可以使用类型转换操作符。它看起来像这样：
- en: '[PRE7]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Putting in the cast tells the compiler to take the value of y, chop it down
    to int size, and set x equal to whatever is left. If the value of y was bigger
    than the maximum value of x, then what’s left will be a weird (but calculable*)
    number:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 加入类型转换会告诉编译器将y的值截断为int大小，并将x设置为剩余的值。如果y的值大于x的最大值，那么剩下的将是一个奇怪（但可计算的*）数字：
- en: '[PRE8]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Still, the point is that the compiler lets you do it. And let’s say you have
    a floating-point number and you just want to get at the whole number (int) part
    of it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，重点是编译器允许你这样做。假设你有一个浮点数，你只想获取它的整数（int）部分：
- en: '[PRE9]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And don’t even think about casting anything to a boolean or vice versa—just
    walk away.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 别想把任何东西转换成布尔型或反之——赶紧离开。
- en: '**It involves sign bits, binary, “two’s complement,” and other geekery.*'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**它涉及符号位、二进制、“二进制补码”和其他极客技术。*'
- en: Exercise
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: '![image](Images/exercise.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/exercise.png)'
- en: BE the JVM
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BE the JVM
- en: '![image](Images/common-05.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-05.png)'
- en: '**The Java file on this page represents a complete source file. Your job is
    to play JVM and determine what would be the output when the program runs.**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**本页面上的Java文件表示一个完整的源文件。你的任务是扮演JVM并确定程序运行时的输出结果。**'
- en: '[PRE10]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![image](Images/f0118-01.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0118-01.png)'
- en: '**-or-**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**-或-**'
- en: '![image](Images/f0118-02.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0118-02.png)'
- en: '**-or-**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**-或-**'
- en: '![image](Images/f0118-03.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0118-03.png)'
- en: '![Images](Images/arr.png) **Answers in [“Be the JVM”](#be_the_jvm_left_parenthesisfrom_page_118).**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![Images](Images/arr.png) **答案在[“Be the JVM”](#be_the_jvm_left_parenthesisfrom_page_118)中。**'
- en: Code Magnets
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: '![image](Images/common-02.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common-02.png)'
- en: A working Java program is all scrambled up on the fridge. Can you reconstruct
    the code snippets to make a working Java program that produces the output listed
    below? Some of the curly braces fell on the floor and they were too small to pick
    up, so feel free to add as many of those as you need!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个工作中的Java程序被混在冰箱上。你能重组这些代码片段，使其成为一个能够产生下面列出的输出的工作中的Java程序吗？一些大括号掉到了地板上，而它们太小了，没法捡起来，所以随意添加你需要的大括号！
- en: '![image](Images/f0119-02.png)![image](Images/f0119-01.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0119-02.png)![图片](Images/f0119-01.png)'
- en: '![Images](Images/arr.png) **Answers in [“Code Magnets”](#code_magnets_left_parenthesisfrom_page_1).**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr.png) **答案在[“代码磁铁”](#code_magnets_left_parenthesisfrom_page_1)中。**'
- en: JavaCross
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: '![image](Images/common-04.png)![image](Images/f0120-01.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)![图片](Images/f0120-01.png)'
- en: How does a crossword puzzle help you learn Java? Well, all of the words **are**
    Java related. In addition, the clues provide metaphors, puns, and the like. These
    mental twists and turns burn alternate routes to Java knowledge right into your
    brain!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如何通过填字游戏学习Java？嗯，所有的单词**都**与Java相关。此外，提示提供了隐喻、双关语等，这些心理转折直接刻印在你的大脑中，通向Java知识的替代路径！
- en: '**Across**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**横向**'
- en: 1\. Fancy computer word for build
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 构建的花哨计算机术语
- en: 4\. Multipart loop
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 多部分循环
- en: 6\. Test first
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 先测试
- en: 7\. 32 bits
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 32位
- en: 10\. Method’s answer
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 方法的答案
- en: 11\. Prep code-esque
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 准备代码般
- en: 13\. Change
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. Change
- en: 15\. The big toolkit
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 大工具包
- en: 17\. An array unit
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. 一个数组单元
- en: 18\. Instance or local
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 实例或本地
- en: 20\. Automatic toolkit
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 20\. 自动工具包
- en: 22\. Looks like a primitive, but..
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 22\. 看起来像原始类型，但是..
- en: 25\. Un-castable
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 25\. 无法转换
- en: 26\. Math method
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 26\. 数学方法
- en: 28\. Iterate over me
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 28\. 迭代我
- en: 29\. Leave early
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 29\. 早退
- en: '**Down**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**向下**'
- en: 2\. Increment type
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 增量类型
- en: 3\. Class’s workhorse
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 类的主力工作
- en: 5\. Pre is a type of _____
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. Pre是一种 _____
- en: 6\. For’s iteration ______
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. For循环的迭代 ______
- en: 7\. Establish first value
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 确定第一个值
- en: 8\. While or For
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. While或For
- en: 9\. Update an instance variable
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 更新实例变量
- en: 12\. Toward blastoff
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 走向发射
- en: 14\. A cycle
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 一个周期
- en: 16\. Talkative package
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 健谈的包
- en: 19\. Method messenger (abbrev.)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 19\. 方法信使（简称）
- en: 21\. As if
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 好像
- en: 23\. Add after
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 23\. 在之后添加
- en: 24\. Pi house
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 24\. Pi之家
- en: 26\. Compile it and ____
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 26\. 编译并 ____
- en: 27\. ++ quantity
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 27\. ++ 数量
- en: '![Images](Images/arr.png) **Answers in [“JavaCross”](#javacross_left_parenthesisfrom_page_120r).**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr.png) **答案在[“JavaCross”](#javacross_left_parenthesisfrom_page_120r)中。**'
- en: Mixed Messages
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合信息
- en: '![image](Images/common-04.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: A short Java program is listed below. One block of the program is missing. Your
    challenge is to **match the candidate block of code** (on the left) **with the
    output** that you’d see if the block were inserted. Not all the lines of output
    will be used, and some of the lines of output might be used more than once. Draw
    lines connecting the candidate blocks of code with their matching command-line
    output.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出了一个简短的Java程序。程序中有一个代码块缺失。你的挑战是**将候选代码块**（左侧）**与插入后看到的输出匹配**。不会使用所有输出行，某些输出行可能会重复使用。用线条连接候选代码块和它们匹配的命令行输出。
- en: '![Images](Images/arr.png) **Answers in [“Mixed Messages”](#mixed_messages_left_parenthesisfro-id100).**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](Images/arr.png) **答案在[“混合信息”](#mixed_messages_left_parenthesisfro-id100)中。**'
- en: '![image](Images/f0121-01.png)![image](Images/f0121-02.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0121-01.png)![图片](Images/f0121-02.png)'
- en: Match each candidate with one of the possible outputs
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个候选项与可能的输出匹配
- en: Exercise Solutions
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习解决方案
- en: '![image](Images/common-03.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-03.png)'
- en: Be the JVM
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为JVM
- en: (from [“BE the JVM”](#be_the_jvm-id000008))
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“成为JVM”](#be_the_jvm-id000008))
- en: '[PRE11]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Did you remember to factor in the break statement? How did that affect the
    output?**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**你记得考虑break语句了吗？它如何影响输出？**'
- en: '![image](Images/f0122-01.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0122-01.png)'
- en: Code Magnets
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码磁铁
- en: (from [“Code Magnets”](#code_magnets-id000002))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“代码磁铁”](#code_magnets-id000002))
- en: '[PRE12]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-251
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**What would happen if this code block came before the ‘j’ for loop?**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果这段代码块在‘j’循环之前会发生什么？**'
- en: '![image](Images/f0122-02.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0122-02.png)'
- en: Puzzle Solutions
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谜题解决方案
- en: '![image](Images/common-04.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/common-04.png)'
- en: JavaCross
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaCross
- en: (from [“JavaCross”](#javacross-id00001))
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“JavaCross”](#javacross-id00001))
- en: '![image](Images/f0123-01.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0123-01.png)'
- en: Mixed Messages
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合信息
- en: (from [“Mixed Messages”](#mixed_messages-id00003))
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: (来自[“混合信息”](#mixed_messages-id00003))
- en: '![image](Images/f0123-02.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](Images/f0123-02.png)'
