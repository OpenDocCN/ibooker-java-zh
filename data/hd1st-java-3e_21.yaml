- en: Appendix A. Final Code Kitchen
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 最终代码厨房
- en: '![image](Images/f0673-01.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0673-01.png)'
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '**Finally, the complete version of the BeatBox!**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，完整版的BeatBox！**'
- en: '**It connects to a simple MusicServer so that you can send and receive beat
    patterns with other clients.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**它连接到一个简单的MusicServer，以便您可以与其他客户端发送和接收节拍模式。**'
- en: Final BeatBox client program
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终的BeatBox客户端程序
- en: 'Most of this code is the same as the code from the Code Kitchens in the previous
    chapters, so we don’t annotate the whole thing again. The new parts include:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码与前几章节的代码厨房中的代码相同，因此我们不再重复注释整段代码。新添加的部分包括：
- en: 'GUI: Two new components are added for the text area that displays incoming
    messages (actually a scrolling list) and the text field.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GUI：为显示传入消息的文本区域（实际上是一个滚动列表）和文本字段添加了两个新组件。
- en: 'NETWORKING: Just like the SimpleChatClient in this chapter, the BeatBox now
    connects to the server and gets an input and output stream.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 网络：与本章节中的SimpleChatClient类似，BeatBox现在连接到服务器并获取输入输出流。
- en: 'MULTITHREADED: Again, just like the SimpleChatClient, we start a “reader” job
    that keeps looking for incoming messages from the server. But instead of just
    text, the messages coming in include TWO objects: the String message and the serialized
    array (the thing that holds the state of all the checkboxes).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程：与SimpleChatClient类似，我们启动一个“读取器”任务，持续监视服务器发来的消息。但不同之处在于，接收到的消息包括两个对象：字符串消息和序列化数组（用于保存所有复选框的状态）。
- en: All the code is available at *[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples)*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都可以在*[https://oreil.ly/hfJava_3e_examples](https://oreil.ly/hfJava_3e_examples)*找到。
- en: '![image](Images/f0674-01.png)![image](Images/f0675-01.png)![image](Images/f0676-01.png)![image](Images/f0677-01.png)![image](Images/f0678-01.png)![image](Images/f0679-01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0674-01.png)![image](Images/f0675-01.png)![image](Images/f0676-01.png)![image](Images/f0677-01.png)![image](Images/f0678-01.png)![image](Images/f0679-01.png)'
- en: Final BeatBox server program
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终的BeatBox服务器程序
- en: Most of this code is identical to the SimpleChatServer we made in [Chapter 17](ch17.xhtml#make_a_connection_networking_and_threads),
    *Make a Connection*. The only difference, in fact, is that this server receives,
    and then re-sends, two serialized objects instead of a plain String (although
    one of the serialized objects happens to *be* a String).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码与我们在[第17章](ch17.xhtml#make_a_connection_networking_and_threads)中创建的SimpleChatServer相同，*建立连接*。事实上，唯一的区别在于此服务器接收并重新发送两个序列化对象，而不是一个纯字符串（尽管其中一个序列化对象恰好是一个字符串）。
- en: '![image](Images/f0681-01.png)![image](Images/f0682-01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/f0681-01.png)![image](Images/f0682-01.png)'
