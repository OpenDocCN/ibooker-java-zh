- en: Chapter 1\. Spring Boot in a Nutshell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 简介Spring Boot
- en: This chapter explores the three core features of Spring Boot and how they are
    force multipliers for you as a developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了Spring Boot的三个核心特性以及它们如何作为开发者的增强因子。
- en: Spring Boot’s Three Foundational Features
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot 的三大核心特性
- en: The three core features of Spring Boot upon which everything else builds are
    simplified dependency management, simplified deployment, and autoconfiguration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 的三个核心特性是简化的依赖管理、简化的部署和自动配置，这些是构建一切的基础。
- en: Starters for Simplified Dependency Management
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化依赖管理的起步
- en: One of the genius aspects of Spring Boot is that it makes dependency management…manageable.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 的一个天才之处在于它使依赖管理变得…可管理。
- en: If you’ve been developing software of any import for any length of time, you’ve
    almost certainly had to contend with several headaches surrounding dependency
    management. Any capability you provide in your application typically requires
    a number of “frontline” dependencies. For example, if you want to provide a RESTful
    web API, you must provide a way to expose endpoints over HTTP, listen for requests,
    tie those endpoints to methods/functions that will process those requests, and
    then build and return appropriate responses.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经开发了任何重要的软件一段时间，您几乎肯定不得不应对围绕依赖管理的几个头痛。您在应用程序中提供的任何功能通常都需要一些“前线”依赖项。例如，如果您想提供一个RESTful
    web API，您必须提供一种方法来通过HTTP公开端点，监听请求，将这些端点与处理这些请求的方法/函数绑定，然后构建并返回适当的响应。
- en: Almost invariably, each primary dependency incorporates numerous other secondary
    dependencies in order to fulfill its promised functionality. Continuing with our
    example of providing a RESTful API, we might expect to see a collection of dependencies
    (in some sensible but debatable structure) that includes code to supply responses
    in a particular format, e.g., JSON, XML, HTML; code to marshal/unmarshal objects
    to requested format(s); code to listen for and process requests and return responses
    to same; code to decode complex URIs used to create versatile APIs; code to support
    various wire protocols; and more.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个主要依赖项都包含许多其他次要依赖项，以实现其承诺的功能。继续我们提供RESTful API的示例，我们可能期望看到一组依赖项（在某种合理但有争议的结构中），其中包括提供特定格式（例如JSON、XML、HTML）响应的代码；编组/解编组对象以请求的格式；监听和处理请求并返回相同响应的代码；解码用于创建多功能API的复杂URI的代码；支持各种传输协议的代码；以及更多。
- en: Even for this fairly simple example, we’re already likely to require a large
    number of dependencies in our build file. And we haven’t even considered what
    functionality we may wish to include in our application at this point, only its
    outward interactions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对于这个相当简单的示例，我们在我们的构建文件中已经可能需要大量依赖项。而且在此时，我们甚至还没有考虑我们可能希望在我们的应用程序中包含的功能。
- en: Now, let’s talk versions. Of each and every one of those dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈版本。谈谈每一个依赖项的版本。
- en: Using libraries together requires a certain degree of rigor, as one version
    of a particular dependency may have been tested (or even function correctly) only
    with a specific version of another dependency. When these issues inevitably arise,
    it leads to what I refer to as “Dependency Whack-a-Mole.”
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将库一起使用需要一定的严谨性，因为特定依赖项的一个版本可能仅已与另一个特定依赖项的特定版本一起测试（或者甚至能够正确工作）。当这些问题不可避免地出现时，它导致了我所说的“依赖性打地鼠”。
- en: Like its namesake carnival game, Dependency Whack-a-Mole can be a frustrating
    experience. Unlike its namesake, when it comes to chasing down and bashing bugs
    stemming from mismatches that pop up between dependencies, there are no prizes,
    only elusive conclusive diagnoses and *hours* wasted pursuing them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其同名的嘉年华游戏一样，“依赖性打地鼠”可能是一种令人沮丧的经历。与其同名不同的是，在追逐和解决由于依赖关系之间的不匹配而引起的错误时，没有奖品，只有难以捉摸的结论性诊断和*浪费的小时*。
- en: Enter Spring Boot and its starters. Spring Boot starters are Bills of Materials
    (BOMs) built around the proven premise that the vast majority of times you provide
    a particular capability, you do it in nearly the same way, nearly every time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 及其起步项目登场。Spring Boot 起步项目是围绕一个被证明的前提建立的材料清单（BOM），即您几乎每次提供特定功能时都以几乎相同的方式提供它。
- en: In the previous example, each time we build an API, we expose endpoints, listen
    for requests, process requests, convert to and from objects, exchange information
    in 1+ standard formats, send and receive data over the wire using a particular
    protocol, and more. This design/development/usage pattern doesn’t vary much; it’s
    an approach adopted industry-wide, with few variations. And like other similar
    patterns, it’s handily captured in a Spring Boot starter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，每次我们构建一个API时，我们都会暴露端点，监听请求，处理请求，对象之间的转换，以及使用一个特定协议通过电线发送和接收数据等等。这种设计/开发/使用模式变化不大；它是整个行业广泛采用的方法，几乎没有变化。像其他类似的模式一样，它方便地被Spring
    Boot starter捕获。
- en: Adding a single starter, e.g., `spring-boot-starter-web`, provides all of those
    related functionalities in a *single application dependency*. All dependencies
    encompassed by that single starter are version-synchronized too, meaning that
    they’ve been tested successfully together and the included version of library
    A is proven to function properly with the included version of library B…and C…and
    D…etc. This dramatically simplifies your dependency list and your life, as it
    practically eliminates any chance you’ll have difficult-to-identify version conflicts
    among dependencies you need to provide your application’s critical capabilities.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个单一的starter，例如`spring-boot-starter-web`，提供所有相关功能在*单一应用程序依赖项*中。由该单一starter包含的所有依赖项也是版本同步的，这意味着它们已经成功地一起测试过，包含的库A版本与包含的库B、C、D等版本一起正常运行。这极大地简化了您的依赖列表和您的生活，几乎消除了您需要提供应用程序关键功能时可能遇到的难以识别的版本冲突的可能性。
- en: In those rare cases when you must incorporate functionality provided by a different
    version of an included dependency, you can simply override the tested version.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在那些罕见的情况下，当您必须整合由包含的依赖项的不同版本提供的功能时，您可以简单地覆盖已测试的版本。
- en: Caution
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you must override the default version of a dependency, do so…but you should
    probably increase your level of testing to mitigate risks you introduce by doing
    so.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果必须覆盖依赖项的默认版本，请这样做...但您应该增加测试的级别，以减少因此引入的风险。
- en: You can also exclude dependencies if they are unnecessary for your application,
    but the same cautionary note applies.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于您的应用程序来说，某些依赖项是不必要的，您也可以将它们排除在外，但同样要注意谨慎。
- en: All in all, Spring Boot’s concept of starters greatly streamlines your dependencies
    and reduces the work required to add whole sets of capabilities to your applications.
    It also dramatically diminishes the overhead you incur testing, maintaining, and
    upgrading them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Spring Boot的starter概念大大简化了您的依赖关系，并减少了向应用程序添加整套功能所需的工作。它还显著减少了您测试、维护和升级它们所需的开销。
- en: Executable JARs for Simplified Deployment
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可执行的JAR文件，简化部署过程。
- en: Long ago, in the days when application servers roamed the earth, deployments
    of Java applications were a complex affair.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，在应用服务器漫游地球的日子里，Java应用程序的部署是一件复杂的事情。
- en: 'In order to field a working application with, say, database access—like many
    microservices today and nearly all monoliths then and now—you would need to do
    the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个工作的应用程序，比如具有数据库访问权限的微服务今天和几乎所有的单体应用过去和现在，你需要做以下几点：
- en: Install and configure the Application Server.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并配置应用服务器。
- en: Install database drivers.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装数据库驱动程序。
- en: Create a database connection.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据库连接。
- en: Create a connection pool.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建连接池。
- en: Build and test your application.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并测试你的应用程序。
- en: Deploy your application and its (usually numerous) dependencies to the Application
    Server.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的应用程序及其（通常很多的）依赖项部署到应用服务器。
- en: Note that this list assumes you had administrators to configure the machine/virtual
    machine and that at some point you had created the database independently of this
    process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此列表假定您已由管理员配置了机器/虚拟机，并且在某些时候您独立于此过程创建了数据库。
- en: Spring Boot turned much of this cumbersome deployment process on its head and
    collapsed the previous steps into one, or perhaps two, if you count copying or
    `cf push`-ing a single file to a destination as an actual *step*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot彻底改变了这种繁琐的部署过程，并将以前的步骤合并为一个，或者也许是两个，如果将一个单一文件复制或`cf push`到目标视为一个实际的*步骤*的话。
- en: 'Spring Boot wasn’t the origin of the so-called über JAR, but it revolutionized
    it. Rather than teasing out every file from the application JAR and all dependent
    JARs, then combining them into a single destination JAR—sometimes referred to
    as *shading*—the designers of Spring Boot approached things from a truly novel
    perspective: what if we could *nest JARs*, retaining their intended and delivered
    format?'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot并不是所谓的超级JAR的起源，但它革新了它。与从应用程序JAR文件和所有依赖的JAR文件中分离出每个文件，然后将它们组合成单个目标JAR文件（有时称为*阴影*）不同，Spring
    Boot的设计者们从一个真正新颖的角度来看待问题：如果我们可以*嵌套JAR文件*，保留它们的预期和交付格式呢？
- en: Nesting JARs instead of shading them alleviates *many* potential problems, as
    there are no potential version conflicts to be encountered when dependency JAR
    A and dependency JAR B each use a different version of C; it also removes potential
    legal issues due to repackaging software and combining it with other software
    using a different license. Keeping all dependent JARs in their original format
    cleanly avoids those and other issues.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将JAR文件进行嵌套而不是对它们进行阴影处理可以减轻*许多*潜在问题，因为在依赖JAR A和依赖JAR B使用不同版本的C时，不会遇到潜在的版本冲突问题；它还消除了由于重新打包软件并与其他使用不同许可证的软件组合而导致的潜在法律问题。保持所有依赖的JAR文件以其原始格式干净地避免了这些及其他问题。
- en: It is also trivial to extract the contents of a Spring Boot executable JAR,
    should you wish to do that. There are some good reasons for doing so in some circumstances,
    and I’ll discuss those in this book as well. For now, just know that the Spring
    Boot executable JAR has you covered.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有需要，提取Spring Boot可执行JAR文件的内容也是非常简单的。在某些情况下这样做有一些很好的理由，我在本书中也会讨论这些理由。现在，只需知道Spring
    Boot可执行JAR文件已经为你准备好了。
- en: That single Spring Boot JAR with all dependencies makes deployment a breeze.
    Rather than collecting and verifying all dependencies are deployed, the Spring
    Boot plug-in ensures they’re all zipped into the output JAR. Once you have that,
    the application can be run anywhere there is a Java Virtual Machine (JVM) just
    by executing a command like `java -jar <SpringBootAppName.jar>`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那个单一的Spring Boot JAR文件及其所有依赖使得部署变得轻而易举。与收集和验证所有依赖项是否已部署相比，Spring Boot插件确保它们全部被压缩到输出的JAR文件中。一旦你有了这个，应用程序可以在任何有Java虚拟机（JVM）的地方运行，只需执行类似`java
    -jar <SpringBootAppName.jar>`的命令。
- en: There’s more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多。
- en: By setting a single property in your build file, the Spring Boot build plug-in
    can also make that single JAR entirely (self) executable. Still assuming a JVM
    is present, rather than having to type or script that entire bothersome line of
    `java -jar <SpringBootAppName.jar>`, you could simply type `<SpringBootAppName.jar>`
    (replacing with your filename, of course), and Bob’s your uncle—you’re up and
    running. It doesn’t get any easier than that.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在构建文件中设置一个属性，Spring Boot构建插件还可以使单个JAR完全（自行）可执行。假设JVM存在，而不是必须键入或脚本化整个麻烦的`java
    -jar <SpringBootAppName.jar>`命令行，你只需简单地键入`<SpringBootAppName.jar>`（当然，替换为你的文件名），一切都搞定。没有比这更简单的了。
- en: Autoconfiguration
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动配置
- en: 'Sometimes called “magic” by those new to Spring Boot, autoconfiguration is
    perhaps the greatest “force multiplier” that Spring Boot brings to developers.
    I often refer to it as a developer’s superpower: Spring Boot gives you *insane
    productivity* by bringing opinions to widely used and -repeated use cases.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对Spring Boot还不熟悉的人来说，自动配置有时被称为“魔术”，可能是Spring Boot为开发者带来的最大“乘数效应”。我经常把它称为开发者的超能力：Spring
    Boot通过为广泛使用和重复使用的案例带来观点，*极大地提升了生产力*。
- en: Opinions in software? How does that help?!?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 软件中的观点？这有什么帮助？!?
- en: If you’ve been a developer for very long at all, you’ll doubtless have noticed
    that some patterns repeat themselves frequently. Not perfectly, of course, but
    in the high percentages; perhaps 80–90% of the time things fall within a certain
    range of design, development, or activity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做开发时间很长，无疑会注意到某些模式经常重复出现。当然，不是完全一样，但高达80-90%的时间，事情都在某种设计、开发或活动范围内。
- en: I alluded earlier to this repetition within software, as this is what makes
    Spring Boot’s starters amazingly consistent and useful. The repetition also means
    that these activities, when it comes to the code that must be written to complete
    a particular task, are ripe for streamlining.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我前面提到过软件中的这种重复，这就是使得Spring Boot的启动器惊人一致和有用的原因。这种重复也意味着，当涉及到必须编写的代码以完成特定任务时，这些活动非常适合优化。
- en: To borrow an example from Spring Data, a Spring Boot–related and –enabled project,
    we know that every time we need to access a database, we need to open some manner
    of connection to that database. We also know that when our application completes
    its tasks, that connection must be closed to avoid potential issues. In between,
    we are likely to make numerous requests to the database using queries—simple and
    complex, read-only and write-enabled—and those queries will require some effort
    to create properly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 借用Spring Data的例子，这是一个与Spring Boot相关且启用的项目，我们知道每次访问数据库时，我们需要打开某种类型的连接到该数据库。我们也知道当我们的应用程序完成其任务时，必须关闭该连接以避免潜在问题。在此期间，我们可能会使用查询（简单和复杂、只读和写入使能）向数据库发出许多请求，并且这些查询将需要一些努力来正确创建。
- en: Now imagine we could streamline all of that. Automatically open a connection
    when we specify the database. Automatically close the connection when the application
    terminates. Follow a simple and expected convention to create queries *automatically*
    with minimal effort from you, the developer. Enable easy customization of even
    that minimal code, again by simple convention, to create complex bespoke queries
    that are reliably consistent and efficient.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下我们能够简化所有这些。在我们指定数据库时自动打开连接。在应用程序终止时自动关闭连接。遵循简单而预期的约定，以最小的努力从开发者那里*自动*创建查询。甚至通过简单约定再次轻松定制那些最小代码，创建可靠一致且高效的复杂定制查询。
- en: This approach to code is sometimes referred to as *convention over configuration*,
    and if you’re new to a particular convention, it can appear mildly jarring (no
    pun intended) at first glance. But if you’ve implemented similar features before,
    writing often hundreds of repetitive, mind-numbing lines of setup/teardown/configuration
    code to accomplish even the simplest of tasks, it’s like a gust of fresh air.
    Spring Boot (and most Spring projects) follow the *convention over configuration*
    mantra, providing the assurance that if you follow simple, well-established and
    -documented conventions to do something, the configuration code you must write
    is minimal, or none at all.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编码方式有时被称为*约定优于配置*，如果您对某种约定不熟悉，乍一看可能会有些不适（无论是打算的还是其他）。但如果您以前实现过类似功能，写过数百行重复、令人昏昏欲睡的设置/拆卸/配置代码以完成甚至最简单的任务，那么这就像一股清新的空气。Spring
    Boot（以及大多数Spring项目）遵循*约定优于配置*的口号，确保如果您遵循简单、成熟和详细记录的约定来做某事，您需要编写的配置代码将是最小甚至完全没有。
- en: Another way in which autoconfiguration gives you superpowers is the Spring team’s
    laserlike focus on “developer-first” environment configuration. As developers,
    we are most productive when we can focus on the task at hand and not a million
    setup chores. How does Spring Boot make that happen?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置给你超能力的另一种方式是Spring团队对“开发者优先”环境配置的激烈关注。作为开发者，当我们能够专注于手头的任务而不是无数的设置琐事时，我们的生产力最高。Spring
    Boot是如何实现这一点的呢？
- en: 'Let’s borrow an example from another Spring Boot–related project, Spring Cloud
    Stream: when connecting to a messaging platform like RabbitMQ or Apache Kafka,
    a developer typically must specify certain settings for said messaging platform
    in order to connect to and use it—hostname, port, credentials, and more. Focusing
    on the development experience means that defaults are provided when none are specified
    that *favor the developer working locally*: localhost, default port, etc. This
    makes sense as an *opinion* because it’s nearly 100% consistent for development
    environments, while it isn’t so in production. In prod, you would need to provide
    specific values due to widely varying platform and hosting environments.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们借用另一个与Spring Boot相关的项目Spring Cloud Stream的例子：当连接到消息平台如RabbitMQ或Apache Kafka时，开发者通常必须指定某些设置以连接和使用该平台——主机名、端口、凭据等。专注于开发体验意味着在未指定任何设置时提供默认值，有利于开发者在本地工作：localhost、默认端口等。这在*观点*上是有意义的，因为在开发环境中几乎100%一致，但在生产环境中则不然。在生产环境中，由于平台和托管环境差异很大，您需要提供特定的值。
- en: Shared development projects using those defaults also eliminate a great deal
    of time required for developer environment setup. Win for you, win for your team.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些默认设置的共享开发项目还可以消除开发环境设置所需的大量时间。这对你有利，也对你的团队有利。
- en: There are occasions when your specific use cases don’t exactly match the 80–90%
    of use cases that are typical, when you fall into the other 10–20% of valid use
    cases. In those instances, autoconfiguration can be selectively overridden, or
    even disabled entirely, but you lose all of your superpowers then, of course.
    Overriding certain opinions is typically a matter of setting one or more properties
    as you wish them to be or providing one or more beans to accomplish something
    that Spring Boot would normally autoconfigure on your behalf. In other words,
    this is often a very simple matter to accomplish on those rare occasions when
    you must do so. In the end, autoconfiguration is a powerful tool that silently
    and tirelessly works on your behalf to make your life easier and you insanely
    productive.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些情况下，您的具体用例可能并不完全符合典型用例的80–90%，而是属于另外的10–20%有效用例。在这些情况下，可以有选择地覆盖自动配置，甚至完全禁用它，但当然，您会失去所有的超能力。覆盖某些默认设置通常是通过设置一个或多个属性为您希望的值，或者提供一个或多个Bean来完成Spring
    Boot通常会为您自动配置的某些任务。换句话说，当您必须这样做时，通常这是一个非常简单的事情。总之，自动配置是一个强大的工具，默默无闻地为您工作，使您的生活更轻松，您的生产力更高。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The three core features of Spring Boot upon which everything else builds are
    simplified dependency management, simplified deployment, and autoconfiguration.
    All three are customizable, but you’ll seldom need to do so. And all three work
    hard to make you a better, more productive developer. Spring Boot gives you wings!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的三个核心特性是简化的依赖管理、简化的部署以及自动配置。这三者都是可定制的，但您很少需要这样做。这三者共同努力，让您成为一个更好、更高效的开发者。Spring
    Boot 给您带来飞跃的感觉！
- en: In the next chapter, we’ll take a look at some of the great options you have
    when getting started creating Spring Boot applications. Choices are good!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一些在创建Spring Boot应用程序时可供选择的优秀选项。选择多多益善！
