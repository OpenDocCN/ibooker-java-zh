- en: Chapter 2\. Java to Kotlin Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 Java 到 Kotlin 项目
- en: What is the first step of the journey from pure Java to a mixed and then increasingly
    Kotlin codebase?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从纯 Java 到混合，再到越来越多的 Kotlin 代码库的旅程的第一步是什么？
- en: Strategy
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略
- en: The first time we, Nat and Duncan, introduced Kotlin to a Java codebase, we
    were members of a small team that included six developers, building a relatively
    greenfield project. We had already deployed some web applications with Kotlin,
    but our enterprise architects insisted that we write the new system in Java 8.
    This was shortly after Kotlin 1.0 had been released, but before Google announced
    that Kotlin was an official language for Android, so the architects were understandably
    wary about committing to a language with an uncertain future for a strategic system
    that they expected to be around for decades.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们，Nat 和 Duncan，第一次将 Kotlin 引入 Java 代码库时，我们是一个包括六名开发人员的小团队的成员，正在构建一个相对初期的项目。我们已经用
    Kotlin 部署了一些 Web 应用，但是我们的企业架构师坚持要求我们用 Java 8 编写新系统。那时 Kotlin 1.0 刚发布不久，但在 Google
    宣布 Kotlin 是官方 Android 语言之前，架构师对承诺一个未来不确定语言用于战略系统持谨慎态度，因为他们预计这个系统将在未来几十年内使用。
- en: 'In Java, we leaned toward a functional approach, designing the core application
    domain model as immutable data types transformed by pipelines. However, we kept
    bumping into Java’s limitations: the verbosity required to implement immutable
    value types, the distinction between primitive and reference types, null references,
    and Streams lacking common higher-order functions. Meanwhile, we could see Kotlin
    being adopted at an ever-increasing rate across the industry and even within the
    company. When we saw Google’s announcement, we decided to start converting our
    Java to Kotlin.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，我们倾向于使用函数式方法，将核心应用程序领域模型设计为通过管道转换的不可变数据类型。然而，我们不断碰到 Java 的限制：实现不可变值类型所需的冗长代码、原始类型和引用类型之间的区别、空引用以及
    Streams 缺乏常见的高阶函数。与此同时，我们看到 Kotlin 在行业内和公司内部的采用率不断增加。当我们看到 Google 的公告时，我们决定开始将
    Java 转换为 Kotlin。
- en: Our judgment was that starting in the core domain model would give us the biggest
    bang for our buck. Kotlin’s data classes shrank the code significantly, in some
    cases replacing hundreds of lines of code with a single declaration. We started
    carefully, using IntelliJ to convert a small value class that had no dependencies
    on other classes beyond those in the standard library, and examined how that affected
    the rest of our Java codebase. It had no effect at all! Emboldened by this success,
    we picked up the pace. Whenever a new feature needed changes to a Java domain
    model class, we would first convert it to a Kotlin data class, commit the conversion,
    and then implement the feature.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的判断是从核心领域模型开始会带来最大的效益。Kotlin 的数据类显著减少了代码量，在某些情况下，用单一声明替换了数百行代码。我们开始小心翼翼地使用
    IntelliJ 转换一个没有依赖于标准库之外其他类的小值类，并检查这如何影响我们 Java 代码库的其他部分。结果令人振奋，它完全没有影响！受到这一成功的鼓舞，我们加快了步伐。每当新功能需要更改
    Java 领域模型类时，我们首先将其转换为 Kotlin 数据类，提交转换，然后再实现该功能。
- en: As more of the domain model logic became pure Kotlin, we were able to make better
    use of Kotlin features. For example, we replaced calls to the Stream API with
    Kotlin’s standard functions on collections and sequences. The biggest improvement
    though, was replacing our use of Java’s Optional type with nullable references.
    This simplified our code and gave us greater confidence in its null safety.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的领域模型逻辑变成纯 Kotlin，我们能够更好地利用 Kotlin 的特性。例如，我们用 Kotlin 标准集合和序列的标准函数替换了对
    Stream API 的调用。尽管如此，最大的改进是用可空引用替换了 Java 的 Optional 类型。这简化了我们的代码，并增强了对空安全性的信心。
- en: Another project in the company adopted Kotlin for a different reason. They had
    a mature Java system that was built on a dependency injection framework. The developers
    found that the framework’s use of reflection and annotations made the code difficult
    to understand and navigate in the IDE. Kotlin’s lightweight syntax for closures
    offered a way to define the structure of their application and distinguish between
    object graphs instantiated for the whole application, for each HTTP request, or
    for each database transaction. They gradually refactored the underpinnings of
    their system from a framework that obscured the architecture to a style that composed
    functions and made the architecture visible in the code. This work became the
    [http4k](https://http4k.org) web programming toolkit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 公司的另一个项目出于不同的原因采用了 Kotlin。他们有一个成熟的 Java 系统，建立在依赖注入框架之上。开发人员发现，框架使用反射和注解使得代码在
    IDE 中难以理解和导航。Kotlin 的轻量级闭包语法为定义他们的应用程序结构提供了一种方法，并区分了为整个应用程序、每个 HTTP 请求或每个数据库事务实例化的对象图。他们逐步重构了系统的基础架构，从一个模糊系统架构的框架转向组合函数的风格，并使得架构在代码中可见。这项工作成为了
    [http4k](https://http4k.org) 网络编程工具包。
- en: As these two examples show, your choice of starting point should depend on a
    number of factors, including why your team is adopting Kotlin, how large the codebase
    is, and how frequently it changes. You know your project and can decide what is
    most important to change.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这两个例子所示，您的选择起点应取决于许多因素，包括您的团队采用 Kotlin 的原因，代码库的大小以及其变化频率。您了解您的项目，并可以决定要进行哪些最重要的更改。
- en: If you are choosing Kotlin for its language features, it makes sense to convert
    the classes you are working in most frequently, as we did in our first project.
    If you are choosing Kotlin to use a specific library, then it makes sense to start
    writing Kotlin against the API, annotate it to make your Kotlin code convenient
    to the Java code in the rest of the app, and continue from there.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择 Kotlin 是因为其语言特性，那么将您经常使用的类转换为 Kotlin 是有意义的，就像我们在第一个项目中所做的那样。如果您选择 Kotlin
    是为了使用特定的库，那么从 API 开始编写 Kotlin 并进行注解，使得您的 Kotlin 代码对其余应用程序中的 Java 代码更加方便，然后继续进行。
- en: In a small team it’s easy to establish the Kotlin coding style for your system
    (beyond the standard style guide), for instance, error handling conventions, how
    code is to be organized into files, what should be a top-level declaration and
    what should be in an object, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在小团队中，很容易为您的系统建立 Kotlin 编码风格（超出标准风格指南），例如错误处理约定，代码组织到文件中的方式，什么应该是顶层声明，什么应该在对象中等等。
- en: Above a certain size, you run the risk of Kotlin code becoming inconsistent
    as people establish their own conventions in different parts of the system. So
    it may be worth starting with a small subteam working in one area of the system,
    who establish conventions and build up a body of example code. Once there are
    some established conventions, you can expand the effort to the rest of the team
    and other parts of the system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 超过一定规模，您会发现 Kotlin 代码可能会因为不同部分的人制定自己的约定而变得不一致。因此，值得从系统中的一个小子团队开始，制定约定并建立示例代码库。一旦确立了一些约定，就可以将努力扩展到团队的其他部分和系统的其他部分。
- en: In the rest of this book, we will examine in detail how to progress, how to
    keep your Java code maintainable while you are introducing Kotlin that it depends
    upon, and how to take advantage of Kotlin’s features to simplify the code further
    after IntelliJ has performed its conversion magic. But all that follows the first
    small step.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将详细讨论如何进展，如何在引入 Kotlin 的同时保持 Java 代码的可维护性，以及如何利用 Kotlin 的特性在 IntelliJ
    执行其转换魔法后进一步简化代码。但这一切都源自第一小步。
- en: Adding Kotlin Support to a Java Build
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Java 构建中添加 Kotlin 支持。
- en: If we want to refactor our Java to Kotlin, the first change we must make is
    to give ourselves the ability to write Kotlin code in our codebase. Happily, the
    Kotlin build tools and IDE make this very straightforward. It takes a few additional
    lines in our Gradle build configuration for it to compile Kotlin as well as Java.
    IntelliJ will pick up that configuration when we resync the build file, allowing
    us to navigate, autocomplete, and refactor across both languages almost seamlessly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要重构我们的 Java 到 Kotlin，我们必须首先做的一项更改是使自己能够在代码库中编写 Kotlin 代码。幸运的是，Kotlin 构建工具和
    IDE 让这变得非常简单。在 Gradle 构建配置中增加几行代码就可以使其同时编译 Kotlin 和 Java。当我们重新同步构建文件时，IntelliJ
    将会获取这些配置，允许我们几乎无缝地在两种语言之间导航、自动完成和重构。
- en: To add Kotlin to our Gradle build, we need to add the Kotlin plug-in. There
    is a different plug-in for each target that Kotlin supports (JVM, JavaScript,
    and native code), and a plug-in for building multiplatform projects. Because we
    have a Java project, we can ignore other platforms and use the Kotlin JVM plug-in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Kotlin 添加到我们的 Gradle 构建中，我们需要添加 Kotlin 插件。Kotlin 支持每个目标的不同插件（JVM、JavaScript
    和本地代码），以及用于构建多平台项目的插件。因为我们有一个 Java 项目，所以我们可以忽略其他平台并使用 Kotlin JVM 插件。
- en: We also need to add the Kotlin standard library to our dependencies and specify
    the minimum JVM version that the output bytecode will support. Our project targets
    JDK 11 (the latest LTS at the time of writing). At the time of writing, the Kotlin
    compiler can generate bytecode compatible with JDK 1.6 or JDK 1.8\. JDK 1.8 bytecode
    is more efficient and runs fine on JDK 11, so we will pick that.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将 Kotlin 标准库添加到我们的依赖项中，并指定输出字节码将支持的最低 JVM 版本。我们的项目目标是 JDK 11（在撰写本文时为最新的
    LTS 版本）。在撰写本文时，Kotlin 编译器可以生成与 JDK 1.6 或 JDK 1.8 兼容的字节码。JDK 1.8 的字节码更高效，并且在 JDK
    11 上运行良好，因此我们将选择它。
- en: Kotlin Versions
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 版本
- en: The Kotlin language and standard library are still maturing, but JetBrains policy
    is to provide a clear migration path. The current version of Kotlin was 1.3 when
    we started writing this book. As we finish it, 1.5 has just been released, deprecating
    some standard APIs used in our code examples! We have chosen not to migrate to
    their replacements, so that the code is able to run on Kotlin 1.4 and 1.5.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 语言和标准库仍在不断发展中，但 JetBrains 的政策是提供清晰的迁移路径。当我们开始写这本书时，当前的 Kotlin 版本是 1.3。而我们完成时，1.5
    版本刚刚发布，废弃了一些我们代码示例中使用的标准 API！我们选择不迁移到它们的替代方案，以便代码能在 Kotlin 1.4 和 1.5 上运行。
- en: 'Here are the relevant parts of our `build.gradle` before the changes:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在进行更改之前 `build.gradle` 的相关部分：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 2.1 [projects.0:build.gradle]](https://java-to-kotlin.dev/code.html?ref=2.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.1&show=diff)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2.1 [projects.0:build.gradle]](https://java-to-kotlin.dev/code.html?ref=2.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.1&show=diff)'
- en: 'After we have added the Kotlin plug-in, our build file looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了 Kotlin 插件之后，我们的构建文件如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 2.2 [projects.1:build.gradle]](https://java-to-kotlin.dev/code.html?ref=2.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.2&show=diff)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2.2 [projects.1:build.gradle]](https://java-to-kotlin.dev/code.html?ref=2.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.2&show=diff)'
- en: Given those changes, we can rerun our build, and see that…
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 给出这些更改后，我们可以重新运行构建，并看到…
- en: …the build still works!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: …构建仍然有效！
- en: If we resync the Gradle project in IntelliJ (this may happen automatically on
    saving), we can run our tests and programs within the IDE.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 IntelliJ 中重新同步 Gradle 项目（这可能在保存时自动发生），我们可以在 IDE 中运行我们的测试和程序。
- en: 'Our tests still pass, so we haven’t broken anything, but neither have we proved
    that we can use Kotlin in our project. Let’s test that by writing a “hello world”
    program. We create a file, *HelloWorld.kt*, in the root package of our Java source
    tree, *src/main/java*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试仍然通过，所以我们没有破坏任何东西，但我们也没有证明我们可以在项目中使用 Kotlin。让我们通过编写一个“Hello World”程序来测试一下。我们在
    Java 源代码树的根包 `src/main/java` 下创建一个名为 *HelloWorld.kt* 的文件：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 2.3 [projects.2:src/main/java/HelloWorld.kt]](https://java-to-kotlin.dev/code.html?ref=2.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.3&show=diff)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2.3 [projects.2:src/main/java/HelloWorld.kt]](https://java-to-kotlin.dev/code.html?ref=2.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=2.3&show=diff)'
- en: Where to Put Kotlin Source
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 源代码放置在哪里
- en: The Kotlin build plug-in adds additional source roots, *src/main/kotlin* and
    *src/test/kotlin*, and compiles Kotlin source files found in any of their subdirectories.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 构建插件添加了额外的源根目录 `src/main/kotlin` 和 `src/test/kotlin`，并编译这些目录及其子目录中找到的
    Kotlin 源文件。
- en: It will also compile Kotlin source found in Java source trees, in particular
    *src/main/java* and *src/test/java*. Although you can separate your source files
    by language, putting Java files in the *java* directories and Kotlin into *kotlin*,
    in practice your authors don’t bother. It’s nice to be able to look into a directory
    and see all the source for the corresponding package rather than casting around
    the filesystem. To make this work, though, we keep Kotlin source in directories
    mirroring the package structure rather than taking advantage of Kotlin’s ability
    to have files in a single directory but multiple packages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将编译Java源树中发现的Kotlin源代码，特别是*src/main/java*和*src/test/java*。虽然您可以按语言分隔源文件，将Java文件放在*java*目录中，将Kotlin文件放在*kotlin*目录中，但实际上我们的作者并不在乎。能够查看目录并看到相应包的所有源文件而不是在文件系统中漫游是很好的。然而，为了使其工作，我们将Kotlin源代码保留在反映包结构的目录中，而不是利用Kotlin能够在单个目录中具有多个包的能力。
- en: In a similar vein, while Kotlin does allow multiple public classes to be defined
    in a single class, when we are mixing Java and Kotlin in a project, we tend to
    stick to one class per file for consistency.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，虽然Kotlin确实允许在单个类中定义多个公共类，但是当我们在项目中混合Java和Kotlin时，为了一致性，我们倾向于每个文件一个类。
- en: We can run that within the IDE by clicking the little green arrow in the lefthand
    margin next to `fun main()`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在IDE中单击左侧边栏旁边的小绿箭头来运行它，该箭头位于`fun main()`旁边。
- en: 'We can run our build and then run it from the command line with the `java`
    command. Compiling the source file named *HelloWorld.kt* creates a Java class
    file named `HelloWorldKt`. We’ll look into how Kotlin source gets translated into
    Java class files in more detail later, but for now, we can run our program with
    the `java` command, like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`java`命令在命令行中运行我们的构建，并从中运行它。编译名为*HelloWorld.kt*的源文件将创建一个名为`HelloWorldKt`的Java类文件。稍后我们将更详细地了解Kotlin源代码如何转换为Java类文件，但现在我们可以使用`java`命令运行我们的程序，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It lives!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它活着了！
- en: Let’s delete *HelloWorld.kt*—it’s done its job—commit and push.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除*HelloWorld.kt* ——它已经完成了它的工作——提交并推送。
- en: We now have the *option* to use Kotlin in our project; the first part of this
    chapter gives some pointers to *where* to start using it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在项目中有了使用Kotlin的*选择*；本章的第一部分提供了一些*开始*使用它的指针。
- en: Moving On
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来
- en: We expect the technical information in this chapter to date very quickly, as
    neither Gradle nor its plug-ins have a very stable interface. Your current Java
    build file is also almost certainly incompatible with our example in some crucial
    way. Despite this, though, adding Kotlin to a Java build is generally straightforward.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预计本章中的技术信息会非常快速地过时，因为Gradle及其插件的接口并不是非常稳定的。您当前的Java构建文件几乎肯定也与我们的示例在某些关键方面不兼容。尽管如此，将Kotlin添加到Java构建中通常是直截了当的。
- en: Devising a strategy for moving code from Java to Kotlin is more complicated
    and context specific. Or at least differently complicated and context specific.
    Individual projects should examine where Java is and isn’t working for them, and
    where using Kotlin would alleviate problems and improve the code. You might choose
    to dive in and write some Kotlin from scratch, or to convert an existing Java
    class to Kotlin. In the spirit of this book, the latter is the approach we’ll
    take in [Chapter 3, *Java to Kotlin Classes*](ch03.html#java-to-kotlin-classes).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 制定从Java到Kotlin迁移代码的策略更为复杂且具体。或者至少是不同的复杂性和具体性。个别项目应该检查Java在哪些地方工作，哪些地方不工作，以及在哪些地方使用Kotlin将缓解问题并改进代码。您可以选择深入编写一些Kotlin代码，或者将现有的Java类转换为Kotlin。在本书的精神中，我们将采取后者的方法，在[第3章，*Java到Kotlin类*](ch03.html#java-to-kotlin-classes)中。
