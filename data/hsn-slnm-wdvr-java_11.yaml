- en: Chapter 8\. Testing Framework Specifics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。测试框架具体细节
- en: 'In the examples presented throughout this book, I have recommended embedding
    the calls to the Selenium WebDriver API in Java methods decorated with the annotation
    `@Test` using different unit testing frameworks: JUnit 4, JUnit 5 (alone or extended
    with Selenium-Jupiter), or TestNG. When executing regular tests, the difference
    in using one or another testing framework is minimal. Nevertheless, each testing
    framework has specific features for different use cases. This chapter summarizes
    some of these features to implement Selenium WebDriver tests. As usual, you can
    find the source code for this chapter in the examples repository for this book.
    You can use these examples to compare and choose the most convenient unit testing
    framework for your specific needs.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中提供的示例中，我推荐在使用不同单元测试框架（JUnit 4、JUnit 5（单独或与Selenium-Jupiter扩展一起使用）或TestNG）时，将对Selenium
    WebDriver API 的调用嵌入到使用注解`@Test`装饰的Java方法中。在执行常规测试时，使用一个或另一个测试框架的差异是微小的。然而，每个测试框架都有特定的特性用于不同的用例。本章总结了一些用于实现Selenium
    WebDriver测试的这些特性。像往常一样，你可以在本书示例存储库中找到本章的源代码。你可以使用这些示例来比较和选择最适合你特定需求的单元测试框架。
- en: Parameterized Tests
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数化测试
- en: A widespread feature commonly supported by unit testing frameworks is creating
    *parameterized tests*. This feature enables the execution of tests multiple times
    using different parameters. Although we can implement parameterized tests both
    with JUnit (4 and 5) and TestNG, there are significant differences among each
    implementation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试框架通常支持的一个广泛特性是创建*参数化测试*。这个特性使得可以使用不同的参数多次执行测试。虽然我们可以在JUnit（4和5）和TestNG中都实现参数化测试，但每种实现之间存在显著差异。
- en: JUnit 4
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: 'We need to use a *test runner* called `Parameterized` for implementing parameterized
    tests in JUnit 4\. A test runner in JUnit 4 is a Java class responsible for running
    tests. We decorate a Java class using the JUnit 4 annotation `@RunWith` to specify
    a test runner. Then, we need to use the JUnit 4 annotation `@Parameters` to decorate
    the method that provides the test parameters. There are two ways to inject these
    parameters into the test class: in the test class constructor or as class attributes
    decorated with the annotation `@Parameter`. [Example 8-1](#junit4-parameterized)
    shows a test case where the test parameters are injected using the second technique.
    This example executes the same test for login into the practice site using different
    credentials (username and password). As a result, the message provided by the
    web page is different (login successful or invalid credentials).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在JUnit 4中使用一个名为`Parameterized`的*测试运行器*来实现参数化测试。在JUnit 4中，测试运行器是负责运行测试的Java类。我们使用JUnit
    4注解`@RunWith`来装饰一个Java类来指定测试运行器。然后，我们需要使用JUnit 4注解`@Parameters`来装饰提供测试参数的方法。有两种方法可以将这些参数注入到测试类中：在测试类构造函数中或作为使用注解`@Parameter`装饰的类属性。[示例 8-1](#junit4-parameterized)展示了一个测试用例，其中使用第二种技术注入测试参数。这个示例使用不同的凭据（用户名和密码）执行相同的登录测试。因此，网页提供的消息是不同的（登录成功或无效凭据）。
- en: Example 8-1\. Parameterized test using JUnit 4
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-1。使用JUnit 4进行参数化测试
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO1-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO1-1)'
- en: We specify the `Parameterized` test runner for this Java class.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个Java类指定了`Parameterized`测试运行器。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO1-2)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO1-2)'
- en: 'We inject three test parameters as class attributes: username (index `0`),
    password (index `1`), and expected text (index `2`).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将三个测试参数注入为类属性：用户名（索引`0`）、密码（索引`1`）和预期文本（索引`2`）。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO1-3)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO1-3)'
- en: We specify the test parameter in a method that returns a collection of generic
    parameters (`Collection<Object[]>`).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个返回泛型参数集合（`Collection<Object[]>`）的方法中指定测试参数。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO1-4)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO1-4)'
- en: We return a collection of the three `String` sets to be used as a test parameter.
    The values of each entry will be injected using the previously declared three
    parameters (username, password, and expected text).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回一个包含三个`String`集合的集合，用作测试参数。每个条目的值将使用之前声明的三个参数（用户名、密码和预期文本）注入。
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO1-5)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_testing_framework_specifics_CO1-5)'
- en: In the test logic (that will be executed twice, once per data entry), we try
    to log in to the practice site using the username and password provided as parameters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[![6](assets/6.png)](#co_testing_framework_specifics_CO1-6)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We assert the expected data (which is different depending on the credentials
    provided as a parameter) is available in the page body.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数化测试中，JUnit 4 和 TestNG 之间的一个显著差异是，在 TestNG 中，参数（例如本示例中的用户名、密码和预期测试）作为测试方法参数注入。
- en: Warning
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '|'
- en: One of the most significant limitations of JUnit 4 is that we can use only one
    test runner per Java class. In other words, test runners are not composable in
    JUnit 4\. To overcome this restriction (among others), the JUnit team released
    JUnit 5 in 2017.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: TestNG
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO2-2)'
- en: We can use the annotation `@DataProvider` to decorate the method that provides
    the test parameters in a parameterized TestNG test. As you can see in [Example 8-2](#testng-parameterized),
    this method returns a double array of general Java objects. The annotation `@Data​Pro⁠vider`
    should provide a name as an attribute. This name is later used in the `@Test`
    method to specify the data provider. Finally, the parameters are injected into
    the test method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Example 8-2\. Parameterized test using TestNG
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-2\. 使用 TestNG 进行参数化测试
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO2-1)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO2-1)'
- en: We create a method used as a data provider.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO2-2)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We specify this test will use the previous data provider that we call `loginData`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定此测试将使用之前称为 `loginData` 的数据提供器。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO2-3)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_testing_framework_specifics_CO1-6)'
- en: A notable difference between JUnit 4 and TestNG regarding parameterized tests
    is that the parameters (username, password, and expected test in this example)
    are injected in TestNG as test method parameters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用注解 `@DataProvider` 来装饰提供 TestNG 参数化测试参数的方法。正如您在 [示例 8-2](#testng-parameterized)
    中所看到的，此方法返回一个通用 Java 对象的双数组。注解 `@Data​Pro⁠vider` 应该提供一个名称作为属性。稍后此名称将在 `@Test`
    方法中用于指定数据提供器。最后，参数被注入到测试方法中。
- en: JUnit 5
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们断言预期数据（根据提供的凭据不同而异）在页面正文中是可用的。
- en: 'Jupiter (the programming and extension model of JUnit 5) provides a potent
    mechanism for creating parameterized tests. In a nutshell, we need two elements
    to implement these tests in JUnit 5:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: An argument provider, which is the data source for the parameterized tests.
    [Table 8-1](#argument-providers) provides a comprehensive summary of these argument
    providers.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '|'
- en: The annotation `@ParameterizedTest` (instead of the usual `@Test` annotation),
    which decorates the test method where the parameters are injected.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '|'
- en: Table 8-1\. Argument providers in JUnit 5
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Annotation | Description | Example | Example output |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Java 枚举的常量 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 实现 `ArgumentsProvider` 接口的类 |'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| Array of literal values |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 字面值数组 |'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Constants of a Java enumeration |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: Jupiter（JUnit 5 的编程和扩展模型）为创建参数化测试提供了强大的机制。简言之，要在 JUnit 5 中实现这些测试，我们需要两个元素：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '| 提供一个值流的类的静态方法 |'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试逻辑中（将根据每个数据输入执行两次），我们尝试使用作为参数提供的用户名和密码登录练习站点。
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| 单个 `null` 参数 |'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| A static method of the class that provides a `Stream` of values |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: 注解 `@ParameterizedTest`（而不是通常的 `@Test` 注解），用于装饰注入参数的测试方法。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| Comma-Separated Values (CSV) within the annotation |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 注解内的逗号分隔值（CSV） |'
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-1\. JUnit 5 中的参数提供器
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '| 单个空参数 |'
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| Values in CSV format in a file located in the classpath |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '|'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO2-3)'
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| A class that implements the `ArgumentsProvider` interface |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|'
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个作为数据提供器的方法。
- en: '|'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 参数提供器，用于参数化测试的数据源。[表 8-1](#argument-providers) 提供了这些参数提供器的综合概述。
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| A single `null` argument |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 一个 `null` 加一个空参数 |'
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位于类路径中的文件中以 CSV 格式的值 |'
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 4 的最显著限制之一是每个 Java 类只能使用一个测试运行器。换句话说，JUnit 4 中的测试运行器不可组合。为了克服这一限制（以及其他限制），JUnit
    团队于 2017 年发布了 JUnit 5。
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 5
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| A single empty argument |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|'
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '| --- | --- | --- | --- |'
- en: '|'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '| A `null` plus an empty argument |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 描述 | 示例 | 示例输出 |'
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[Example 8-3](#junit5-parameterized) illustrates the Jupiter version of the
    same parameterized test shown in the previous examples. We can use different argument
    providers to implement this parameterized test. In this case, we use `@MethodSource`
    to return a stream of arguments. An alternative that might fit well for this test
    is using `@CsvSource` to embed the input data and expected outcome as CSV format.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 8-3](#junit5-parameterized)展示了与前面示例相同的参数化测试的 Jupiter 版本。我们可以使用不同的参数提供者来实现此参数化测试。在这种情况下，我们使用`@MethodSource`返回参数流。适合这种测试的另一种选择是使用`@CsvSource`将输入数据和预期结果嵌入为
    CSV 格式。'
- en: Example 8-3\. Parameterized test using JUnit 5
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-3\. 使用 JUnit 5 的参数化测试
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO3-1)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO3-1)'
- en: We define a static method to be used as an argument provider in `@MethodSource`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个静态方法作为`@MethodSource`中的参数提供者。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO3-2)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO3-2)'
- en: Instead of a regular `@Test`, we implement a parameterized test.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是常规的`@Test`，我们实现了一个参数化测试。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO3-3)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO3-3)'
- en: The argument provider is linked to the data provided by the `loginData` method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数提供者与`loginData`方法提供的数据相关联。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO3-4)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO3-4)'
- en: The parameters are injected in the test method.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参数被注入到测试方法中。
- en: Selenium-Jupiter
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: You can use the same approach for implementing JUnit 5 parameterized tests when
    using Selenium-Jupiter. The only difference is that you delegate the creation
    and disposal of `WebDriver` objects with Selenium-Jupiter. [Example 8-4](#seljup-parameterized)
    demonstrates how to implement the same test explained in the previous sections
    (i.e., parameterized login) but using Selenium-Jupiter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Selenium-Jupiter 时，你可以使用相同的方法来实现 JUnit 5 的参数化测试。唯一的区别在于，你通过 Selenium-Jupiter
    委托创建和销毁`WebDriver`对象。[Example 8-4](#seljup-parameterized)演示了如何实现前面章节中解释的相同测试（即参数化登录），但使用
    Selenium-Jupiter。
- en: Example 8-4\. Parameterized test using JUnit 5 with Selenium-Jupiter
  id: totrans-115
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-4\. 使用 JUnit 5 和 Selenium-Jupiter 的参数化测试
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO4-1)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO4-1)'
- en: When using different parameter resolvers in a Jupiter test, by convention, we
    must first declare the parameters injected due to `@ParameterizedTest`, and then
    the parameter injected by extensions (Selenium-Jupiter in this case, for `WebDriver`
    objects).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Jupiter 测试中使用不同的参数解析器时，按照惯例，我们必须首先声明由`@ParameterizedTest`注入的参数，然后是由扩展（在本例中为
    Selenium-Jupiter，用于`WebDriver`对象）注入的参数。
- en: Cross-Browser Testing
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨浏览器测试
- en: Cross-browser testing is a kind of functional testing in which we verify that
    a web application works as expected using different types of web browsers. A possible
    way to implement cross-browser tests is through parameterized tests using the
    browser type (i.e., Chrome, Firefox, Edge, etc.) as the test parameter. The following
    sections describe how to use the unit testing framework capabilities for parameterized
    testing applied to cross-browser testing. We will use local browsers (Chrome,
    Firefox, and Edge) in these examples. An alternative way to carry out cross-browser
    testing is to use remote browsers (from a Selenium Server, cloud provider, or
    Docker), as explained in [Chapter 6](ch06.html#ch06).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 跨浏览器测试是一种功能测试，通过使用不同类型的 Web 浏览器验证 Web 应用程序是否按预期工作。通过使用浏览器类型（例如 Chrome、Firefox、Edge
    等）作为测试参数，可以实现参数化测试的可能方法。接下来的章节描述了如何使用单元测试框架的能力来进行适用于跨浏览器测试的参数化测试。在这些示例中，我们将使用本地浏览器（Chrome、Firefox
    和 Edge）。进行跨浏览器测试的另一种方法是使用远程浏览器（从 Selenium 服务器、云提供商或 Docker 中），详见[第 6 章](ch06.html#ch06)。
- en: JUnit 4
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: '[Example 8-5](#junit4-cbt) shows a cross-browser test implemented with JUnit
    4\. We use WebDriverManager to ease the parameterization. As explained in [“Generic
    Manager”](app02.html#generic_manager), WebDriverManager can use one or another
    manager depending on the value of a parameter. This parameter can be a `WebDriver`
    class, an enumeration, or the browser name. We use the latter in the following
    examples (although you can find the alternative methods in the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java)).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-5](#junit4-cbt) 展示了使用 JUnit 4 实现的跨浏览器测试。 我们使用 WebDriverManager 来简化参数化。
    正如[“通用管理器”](app02.html#generic_manager)中所解释的那样，WebDriverManager 可以根据参数的值使用一个或另一个管理器。
    此参数可以是 `WebDriver` 类、枚举或浏览器名称。 在以下示例中我们使用了后者（虽然您可以在[示例库](https://github.com/bonigarcia/selenium-webdriver-java)中找到替代方法）。'
- en: Example 8-5\. Cross-browser testing using JUnit 4
  id: totrans-123
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-5\. 使用 JUnit 4 进行跨浏览器测试
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO5-1)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO5-1)'
- en: We specify three browsers using their names.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用它们的名称指定了三个浏览器。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO5-2)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO5-2)'
- en: We use the WebDriverManager generic manager, using these browser names as the
    parameters. An alternative way to select one or another browser is using the generic
    manager without parameters (i.e., with the method `.getInstance()`, as explained
    in [“Generic Manager”](app02.html#generic_manager)) and then parameterize the
    test (or the suite) using the Java system property `wdm.defaultBrowser` (for instance,
    when running it with Maven or Gradle).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 WebDriverManager 通用管理器，使用这些浏览器名称作为参数。 选择一种或另一种浏览器的替代方法是使用通用管理器而不带参数（即使用方法
    `.getInstance()`，如[“通用管理器”](app02.html#generic_manager)中所述），然后使用 Java 系统属性 `wdm.defaultBrowser`
    来为测试（或测试套件）参数化（例如，在使用 Maven 或 Gradle 运行时）。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO5-3)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO5-3)'
- en: This test is executed three times, using a different browser (Chrome, Edge,
    and Firefox) each time.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试执行三次，每次使用不同的浏览器（Chrome、Edge 和 Firefox）。
- en: TestNG
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: '[Example 8-6](#testng-cbt) shows the same cross-browser test, this time using
    TestNG. In this case, the test parameter (the browser name) is injected into the
    test method.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-6](#testng-cbt) 展示了相同的跨浏览器测试，这次使用 TestNG。 在这种情况下，测试参数（浏览器名称）被注入到测试方法中。'
- en: Example 8-6\. Cross-browser testing using TestNG
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-6\. 使用 TestNG 进行跨浏览器测试
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO6-1)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO6-1)'
- en: We need to create the `WebDriver` instance in the test logic since the test
    parameters are injected in the test method when using TestNG.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在测试逻辑中创建 `WebDriver` 实例，因为在使用 TestNG 时测试参数被注入到测试方法中。
- en: JUnit 5
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: '[Example 8-7](#junit5-cbt) shows the same cross-browser test following the
    Jupiter model. Again, we use WebDriverManager to create the `WebDriver` instance,
    using the browser name as a parameter. Since these parameters are strings, we
    use `@ValueSource` as an argument provider.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-7](#junit5-cbt) 展示了遵循 Jupiter 模型的同一跨浏览器测试。 再次使用 WebDriverManager 创建 `WebDriver`
    实例，使用浏览器名称作为参数。 由于这些参数是字符串，我们使用 `@ValueSource` 作为参数提供程序。'
- en: Example 8-7\. Cross-browser testing using JUnit 5
  id: totrans-139
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-7\. 使用 JUnit 5 进行跨浏览器测试
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO7-1)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO7-1)'
- en: In Jupiter, the parameters in parameterized tests are injected in the test methods.
    For this reason, we need to create the driver instance in the test logic.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupiter 中，参数化测试中的参数被注入到测试方法中。 因此，我们需要在测试逻辑中创建驱动程序实例。
- en: Selenium-Jupiter
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: Selenium-Jupiter provides a complementary feature for creating cross-browser
    tests, called *test templates*. Test templates are a special kind of parameterized
    test supported by Jupiter in which an extension collects the parameters. Selenium-Jupiter
    uses this feature to provide a comprehensive way to specify different browser
    aspects (such as type, version, arguments, and capabilities) using a custom JSON
    notation called a *browser scenario* in Selenium-Jupiter jargon. You can find
    more details about this feature in the [Selenium-Jupiter documentation](https://bonigarcia.dev/selenium-jupiter/#template-tests).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium-Jupiter 提供了一个补充功能，用于创建跨浏览器测试，称为*测试模板*。 测试模板是 Jupiter 支持的一种特殊的参数化测试，在这种测试中，扩展程序收集参数。
    Selenium-Jupiter 使用这一特性以一种名为*浏览器场景*的自定义 JSON 符号的全面方式来指定不同的浏览器方面（如类型、版本、参数和能力）。
    您可以在[Selenium-Jupiter 文档](https://bonigarcia.dev/selenium-jupiter/#template-tests)中找到更多关于此功能的详细信息。
- en: '[Example 8-8](#seljup-test-templates-json) shows a sample browser scenario.
    This JSON is stored in a file called `browsers.json`, the default name used by
    a template test. [Example 8-9](#seljup-test-templates) shows a template test using
    this browser scenario.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-8](#seljup-test-templates-json)展示了一个样本浏览器场景。这个 JSON 存储在名为`browsers.json`的文件中，这是模板测试使用的默认名称。[示例 8-9](#seljup-test-templates)展示了使用这个浏览器场景的模板测试。'
- en: Example 8-8\. Browser scenario for a test template in Selenium-Jupiter
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-8\. Selenium-Jupiter 中用于测试模板的浏览器场景
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO8-1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO8-1)'
- en: This browser scenario contains three browsers. The first one is a local Chrome.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个浏览器场景包含三个浏览器。第一个是本地的 Chrome 浏览器。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO8-2)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO8-2)'
- en: The second browser is a local Edge in headless mode.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个浏览器是本地的无头 Edge 浏览器。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO8-3)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO8-3)'
- en: The third browser is Firefox 93, executed in a Docker container.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个浏览器是在 Docker 容器中执行的 Firefox 93 版本。
- en: Example 8-9\. Cross-browser testing using test templates in JUnit 5 with Selenium-Jupiter
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-9\. 使用 Selenium-Jupiter 在 JUnit 5 中进行跨浏览器测试模板
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO9-1)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO9-1)'
- en: We use this Selenium-Jupiter annotation to skip the test when Docker is unavailable
    (since one of the browsers defined in the scenario uses Docker).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 不可用时（因为场景中的一个浏览器使用 Docker），我们使用 Selenium-Jupiter 注解来跳过这个测试。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO9-2)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO9-2)'
- en: We need to decorate the test method using `@TestTemplate` instead of the usual
    `@Test` annotation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`@TestTemplate`修饰测试方法，而不是通常的`@Test`注解。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO9-3)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO9-3)'
- en: We use the generic `WebDriver` to inject the driver instances. Alternatively,
    `RemoteWebDriver` is also valid for test templates.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用通用的`WebDriver`来注入驱动实例。另外，`RemoteWebDriver`在测试模板中也是有效的。
- en: Categorizing and Filtering Tests
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试分类和过滤
- en: A common need when basing a test suite on Selenium WebDriver (especially when
    the number of tests is high) is to execute only a group of tests. There are different
    ways to achieve single or group test execution. When using an IDE to run tests,
    we can select the specific test(s) to be executed. When using the command line,
    there are other mechanisms we can use to select these tests.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Selenium WebDriver 构建测试套件时（特别是测试数量很多时），常见的需求是只执行一组测试。有多种方法可以实现单个或组测试的执行。在使用
    IDE 运行测试时，可以选择要执行的具体测试。在使用命令行时，可以使用其他机制来选择这些测试。
- en: At first glance, we can use the filtering mechanisms provided by the build tools.
    For instance, Maven and Gradle allow including or excluding tests based on the
    test classes and method names. The basic syntax for these commands is introduced
    in [Appendix C](app03.html#appendix03). [Table 8-2](#maven_gradle_filtering) shows
    several common examples using these commands. Notice that the wildcard `*` is
    used in these examples to match any character in the test class name.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，我们可以使用构建工具提供的过滤机制。例如，Maven 和 Gradle 允许基于测试类和方法名包含或排除特定测试。这些命令的基本语法在附录 C
    中介绍。表 8-2 展示了使用这些命令的几个常见示例。请注意，通配符`*`在这些示例中用于匹配测试类名中的任意字符。
- en: Table 8-2\. Examples of Maven and Gradle commands for including and excluding
    tests
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-2\. Maven 和 Gradle 命令示例，包括和排除测试
- en: '| Description | Maven | Gradle |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | Maven | Gradle |'
- en: '| --- | --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Run tests starting with the word *Hello* |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 运行以 *Hello* 开头的测试 |'
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Run tests that contain *Basic* or *Timeout* |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 运行包含 *Basic* 或 *Timeout* 的测试 |'
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Run tests except those starting with *Firefox* |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 运行除了以 *Firefox* 开头的测试 |'
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Run tests except those starting with *Docker* or containing *Remote* |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 运行除了以 *Docker* 开头或包含 *Remote* 的测试 |'
- en: '[PRE42]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: In addition to the build tool, we can use built-in features provided by the
    unit testing frameworks for categorizing (also known as grouping or tagging) and
    filtering tests based on those categories. The following subsections explain how.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除了构建工具，我们还可以利用单元测试框架提供的内置功能，对测试进行分类（也称为分组或标记）并基于这些分类进行过滤。下面的子节将详细解释如何操作。
- en: JUnit 4
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: JUnit 4 provides the annotation `@Category` to group tests. We need to specify
    one or more Java classes as attributes in this annotation. Then we can use these
    classes to select and execute the tests belonging to one or more categories. [Example 8-10](#junit4-tag)
    shows a basic class using this feature.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 4 提供了`@Category`注解来对测试进行分组。我们需要在此注解中指定一个或多个 Java 类作为属性。然后，我们可以使用这些类来选择和执行属于一个或多个类别的测试。[示例 8-10](#junit4-tag)展示了使用此功能的基本类。
- en: Example 8-10\. Test using categories and JUnit 4
  id: totrans-191
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-10\. 使用类别和 JUnit 4 进行测试
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO10-1)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO10-1)'
- en: '`WebForm` is an empty interface available in the examples repository.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebForm`是示例库中的一个空接口。'
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO10-2)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO10-2)'
- en: '`HomePage` is another empty interface available in the examples repository.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomePage`是示例库中的另一个空接口。'
- en: Then we can use the command line to execute tests based on their groups. For
    instance, the following commands show the Maven and Gradle command for running
    the tests that belong to the `HomePage` category.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以根据其组执行测试。例如，以下命令展示了运行属于`HomePage`类别的测试的 Maven 和 Gradle 命令。
- en: '[PRE45]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We can combine this filtering with the Maven and Gradle support for selecting
    tests based on the class name. For instance, the following commands execute those
    tests belonging to the `HomePage` category but only in the test class `CategoriesJUnit4Test`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此过滤与 Maven 和 Gradle 支持结合使用，根据类名选择测试。例如，以下命令执行属于`HomePage`类别的测试，但仅在测试类`CategoriesJUnit4Test`中。
- en: '[PRE46]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: TestNG
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: TestNG also allows grouping tests. [Example 8-11](#testng-tag) demonstrates
    a basic use of this feature. In summary, the `@Test` annotation allows specifying
    string labels for these groups.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 也允许对测试进行分组。[示例 8-11](#testng-tag)演示了此功能的基本用法。总之，`@Test`注解允许为这些组指定字符串标签。
- en: Example 8-11\. Test using groups and TestNG
  id: totrans-203
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-11\. 使用组和 TestNG 进行测试
- en: '[PRE47]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO11-1)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO11-1)'
- en: We set to `true` the attribute `alwaysRun` to indicate that the setup and teardown
    methods are not filtered during test execution.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将属性`alwaysRun`设置为`true`，以指示在测试执行期间不过滤设置和拆卸方法。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO11-2)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO11-2)'
- en: We assign the group name `WebForm` to the first test of this class.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将组名`WebForm`分配给该类的第一个测试。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO11-3)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO11-3)'
- en: We set the group name `HomePage` to the second test.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将组名`HomePage`设置为第二个测试。
- en: Then we can use the command line to filter the test execution based on these
    categories. The following snippet first shows how to execute the test that belongs
    to the `HomePage` group. The second illustrates how to combine this grouping with
    the Maven and Gradle filtering mechanism based on the class name.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以根据这些分类使用命令行过滤测试执行。以下片段首先展示了如何执行属于`HomePage`组的测试。第二个示例说明了如何将这种分组与基于类名的
    Maven 和 Gradle 过滤机制结合使用。
- en: '[PRE48]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: JUnit 5
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: The Jupiter programming model provides a way to group tests based on custom
    labels called *tags*. We use the annotation `@Tag` for that purpose. [Example 8-12](#junit5-tag)
    illustrates this feature.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Jupiter 编程模型提供了一种基于自定义标签（称为*标签*）对测试进行分组的方式。我们使用`@Tag`注解来实现这一目的。[示例 8-12](#junit5-tag)说明了此功能。
- en: Example 8-12\. Test using tags and JUnit 5
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-12\. 使用标签和 JUnit 5 进行测试
- en: '[PRE49]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO12-1)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO12-1)'
- en: We mark the first test using the label `WebForm`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标签`WebForm`标记第一个测试。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO12-2)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO12-2)'
- en: We categorize the second test using the `HomePage` tag.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`HomePage`标签对第二个测试进行分类。
- en: 'We can use these tags to include or exclude tests when executing tests using
    the command line. The following commands show several examples for Maven and Gradle:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些标签在命令行执行测试时包含或排除测试。以下命令展示了 Maven 和 Gradle 的几个示例：
- en: '[PRE50]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Ordering Tests
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试排序
- en: The test execution order is unknown beforehand in the unit testing frameworks
    used in this book. Nevertheless, there are mechanisms to select a given execution
    order. One possible use of this feature in the Selenium WebDriver arena is to
    reuse the same browser session (i.e., use the same `WebDriver` instance) by different
    tests, interacting with the SUT in a given order. The following examples demonstrate
    this use case for JUnit 4, TestNG, JUnit 5, and JUnit 5 plus Selenium-Jupiter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中使用的单元测试框架中，测试执行顺序事先是未知的。尽管如此，仍然有机制可以选择给定的执行顺序。在 Selenium WebDriver 领域中使用此功能的一个可能用例是通过不同的测试以给定顺序（即使用相同的
    `WebDriver` 实例）重用同一浏览器会话与 SUT 进行交互。以下示例演示了对 JUnit 4、TestNG、JUnit 5 和 JUnit 5 加
    Selenium-Jupiter 使用此功能的情况。
- en: JUnit 4
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: 'JUnit 4 provides the annotation `@FixMethodOrder` to establish the test execution.
    This annotation accepts an enumeration called `MethodSorters`, which is composed
    of the following values:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 4 提供了注解 `@FixMethodOrder` 来确定测试执行顺序。此注解接受一个名为 `MethodSorters` 的枚举，由以下值组成：
- en: '`NAME_ASCENDING`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAME_ASCENDING`'
- en: Sorts the test methods by the method name in lexicographic order
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 按方法名按字典顺序对测试方法进行排序
- en: '`JVM`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`JVM`'
- en: Leaves the test methods in the order returned by the JVM
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试方法按 JVM 返回的顺序排序。
- en: '`DEFAULT`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEFAULT`'
- en: Sorts the test methods in a deterministic, but not predictable, order
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试方法以确定性但不可预测的顺序排序
- en: '[Example 8-13](#junit4-order) shows a complete test case in which the tests
    are executed using the method name.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 8-13](#junit4-order) 显示了一个完整的测试用例，其中测试使用方法名执行。'
- en: Example 8-13\. Ordering tests using JUnit 4
  id: totrans-234
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-13\. 使用 JUnit 4 对测试进行排序
- en: '[PRE51]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO13-1)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO13-1)'
- en: We use the annotation `@FixMethodOrder` at the class level to fix the order
    of the tests available in this class.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在类级别使用注解 `@FixMethodOrder` 来确定此类中可用测试的顺序。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO13-2)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO13-2)'
- en: We create the driver instance before all tests (since we want to use the `WebDriver`
    session in all the tests).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在所有测试之前创建驱动程序实例（因为我们希望在所有测试中使用 `WebDriver` 会话）。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO13-3)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO13-3)'
- en: We quit the driver instance after all tests. Therefore, we finish the session
    after the last test of this class.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在所有测试完成后退出驱动程序实例。因此，在该类的最后一个测试之后结束会话。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO13-4)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO13-4)'
- en: Since the test names are lexicographically ordered (`testA`, `testB`, and `testC`),
    the test execution will follow this sequence.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试名称按字典顺序排序（`testA`、`testB` 和 `testC`），测试执行将遵循此顺序。
- en: TestNG
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: A simple way to order tests in TestNG is using an incremental priority for each
    test. [Example 8-14](#testng-order) demonstrates this feature, by using the attribute
    `priority` in the `@Test` annotation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TestNG 中按照每个测试使用增量优先级的简单方式对测试进行排序。[Example 8-14](#testng-order) 通过在 `@Test`
    注解中使用 `priority` 属性来演示此功能。
- en: Example 8-14\. Ordering tests using TestNG
  id: totrans-246
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-14\. 使用 TestNG 对测试进行排序
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: JUnit 5
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: 'Jupiter provides the annotation `@TestMethodOrder` for ordering tests. This
    annotation can be configured using the following ordering implementations:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Jupiter 提供了注解 `@TestMethodOrder` 来对测试进行排序。此注解可以使用以下排序实现进行配置：
- en: '`DisplayName`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`DisplayName`'
- en: Sorts test methods alphanumerically based on their display names.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 根据显示名称按字母数字顺序排序测试方法。
- en: '`MethodName`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`MethodName`'
- en: Sorts test methods alphanumerically based on their names.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 根据名称按字母数字顺序对测试方法进行排序。
- en: '`OrderAnnotation`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderAnnotation`'
- en: Sorts test methods based on the numeric values specified using the `@Order`
    annotation. [Example 8-15](#junit5-order) shows a test using this method.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '基于使用 `@Order` 注解指定的数字值对测试方法进行排序。[Example 8-15](#junit5-order) 展示了使用此方法的测试。  '
- en: '`Random`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`Random`'
- en: Orders test methods pseudorandomly.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以伪随机方式对测试方法进行排序。
- en: Example 8-15\. Ordering tests using JUnit 5
  id: totrans-258
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-15\. 使用 JUnit 5 对测试进行排序
- en: '[PRE53]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Selenium-Jupiter
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: As usual, tests using Selenium-Jupiter also use the Jupiter programming model;
    therefore, these features (such as test ordering) also are valid for Selenium-Jupiter
    tests. [Example 8-16](#seljup-order) shows the same test as before, using Selenium-Jupiter
    for the driver instantiation. By default, the driver objects are created before
    each test and terminated after each test. Selenium-Jupiter provides the annotation
    `@SingleSession` to change this behavior, creating the driver instance before
    all tests, and closing the session after all tests.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，使用Selenium-Jupiter的测试也使用Jupiter编程模型；因此，这些特性（如测试排序）对于Selenium-Jupiter测试同样有效。[示例 8-16](#seljup-order)展示了之前相同的测试，使用Selenium-Jupiter进行驱动程序实例化。默认情况下，驱动程序对象在每次测试之前创建，并在每次测试后终止。Selenium-Jupiter提供了`@SingleSession`注解来改变这种行为，创建所有测试之前的驱动程序实例，并在所有测试之后关闭会话。
- en: Example 8-16\. Ordering tests using JUnit 5 with Selenium-Jupiter
  id: totrans-262
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-16\. 使用JUnit 5和Selenium-Jupiter排序测试
- en: '[PRE54]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Failure Analysis
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障分析
- en: '*Failure analysis* (also known as *troubleshooting*) is the process of gathering
    and analyzing data to discover the cause of a failure. This process can be challenging
    for Selenium WebDriver tests because the whole system is tested, and the underlying
    root causes of a failed test can be multiple. For instance, the cause of a failure
    in an end-to-end test might be the client-side (frontend) logic, the server-side
    (backend) logic, or even the integration with other components (e.g., database
    or external services).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*故障分析*（也称为*故障排除*）是收集和分析数据以发现故障原因的过程。对于Selenium WebDriver测试来说，这个过程可能具有挑战性，因为整个系统被测试，导致测试失败的根本原因可能有多个。例如，端到端测试失败的原因可能是客户端（前端）逻辑、服务器端（后端）逻辑，甚至是与其他组件的集成（例如数据库或外部服务）。'
- en: 'We can use different techniques to help developers and testers in the failure
    analysis process. A typical way to do this is to detect when a test has failed
    and, before terminating the driver session, gather some data to discover the cause.
    The following assets can help in this process:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的技术来帮助开发人员和测试人员进行故障分析过程。这样做的典型方式是检测测试失败，并在终止驱动程序会话之前收集一些数据以发现原因。以下资产可以帮助此过程：
- en: Screenshots
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕截图
- en: A picture of the web application UI after a test failure might help determine
    the failure cause. [“Screenshots”](ch04.html#screenshots) explains how to use
    the Selenium WebDriver API to make screenshots.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败后，Web应用程序UI的图片可能有助于确定失败原因。[“屏幕截图”](ch04.html#screenshots)解释了如何使用Selenium
    WebDriver API进行截图。
- en: Browser log
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器日志
- en: The JavaScript console can be another potential source of information when an
    error occurs. [“Log Gathering”](ch05.html#log-gathering) explains how to carry
    out this log gathering.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现错误时，JavaScript控制台可以是另一个潜在的信息来源。[“日志收集”](ch05.html#log-gathering)解释了如何进行这种日志收集。
- en: Session recordings
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 会话记录
- en: We can easily record the browser session when using browsers in Docker containers.
    [“Browsers in Docker Containers”](ch06.html#browsers-in-docker) explains how to
    do this with WebDriverManager and Selenium-Jupiter.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Docker容器中的浏览器时，我们可以轻松记录浏览器会话。[“Docker容器中的浏览器”](ch06.html#browsers-in-docker)解释了如何使用WebDriverManager和Selenium-Jupiter实现这一点。
- en: The following subsections provide basic examples for making browser screenshots
    of failed tests. To that aim, we need to relay in the unit testing specific features
    to detect failed tests.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各小节提供了有关如何在测试失败时制作浏览器截图的基本示例。为此，我们需要依赖单元测试的特定功能来检测失败的测试。
- en: JUnit 4
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: JUnit allows tuning the default behavior of tests by using *rules*. A test class
    defines a rule by decorating a class attribute with the `@Rule` annotation. [Table 8-3](#junit4-rules)
    summarizes the rules provided out of the box by JUnit 4.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit允许通过使用*规则*来调整测试的默认行为。测试类通过使用`@Rule`注解修饰类属性来定义规则。[表 8-3](#junit4-rules)总结了JUnit
    4提供的默认规则。
- en: Table 8-3\. Rules in JUnit 4
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-3\. JUnit 4中的规则
- en: '| Rule | Description | Example |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 规则 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE55]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '| Allows the execution of a test to continue when exceptions happen (while
    collecting these exceptions) |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 允许在发生异常时继续执行测试（同时收集这些异常） |'
- en: '[PRE56]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE57]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '| Provides a base class to set up and tear down an external resource before
    each test |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 提供一个基类，在每次测试之前设置和拆除外部资源 |'
- en: '[PRE58]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '|'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE59]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '| Makes the current test name available for test methods |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 使当前测试方法可用于测试名称 |'
- en: '[PRE60]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '|'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE61]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '| Allows for the creation of temporary files and folders |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 允许创建临时文件和文件夹 |'
- en: '[PRE62]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE63]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '| Applies a timeout to all test methods in a class |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 在类中对所有测试方法应用超时 |'
- en: '[PRE64]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '|'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE65]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '| Allows the capture of several execution phases of a test: `starting`, `succeeded`,
    `failed`, `skipped`, and `finished`. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| 允许捕获测试的多个执行阶段：`starting`、`succeeded`、`failed`、`skipped` 和 `finished`。 |'
- en: '[PRE66]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '|'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: We can use the `TestWatcher` rule to gather data for failure analysis with JUnit
    4\. [Example 8-17](#junit4-failure-1) shows a test that captures a screenshot
    when the test fails. [Example 8-18](#junit4-failure-2) contains the implementation
    for this rule. As noted earlier, we make a browser screenshot. The logic to make
    this screenshot is available in [Example 8-19](#junit4-failure-3).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `TestWatcher` 规则来收集 JUnit 4 失败分析的数据。[Example 8-17](#junit4-failure-1)
    展示了一个在测试失败时捕获截图的测试。[Example 8-18](#junit4-failure-2) 包含了此规则的实现。正如前面提到的，我们制作浏览器截图的逻辑在
    [Example 8-19](#junit4-failure-3) 中。
- en: Example 8-17\. Analyzing failed tests using JUnit 4
  id: totrans-310
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-17\. 使用 JUnit 4 分析失败的测试
- en: '[PRE67]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO14-1)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO14-1)'
- en: We define the rule at the class level, passing the driver instance as a parameter.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在类级别定义规则，并将驱动程序实例作为参数传递。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO14-2)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO14-2)'
- en: We force this test to fail to make the screenshot of the browser using the rule.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强制此测试失败，以便使用规则来截取浏览器的截图。
- en: Example 8-18\. Analyzing failed tests using JUnit 4
  id: totrans-316
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-18\. 使用 JUnit 4 分析失败的测试
- en: '[PRE68]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO15-1)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO15-1)'
- en: We encapsulate the logic for failure analysis in a separate class.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将失败分析的逻辑封装在一个单独的类中。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO15-2)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO15-2)'
- en: We override the method triggered when the test fails. In this case, we simply
    use the failure manager instance to make a screenshot.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写了当测试失败时触发的方法。在这种情况下，我们简单地使用失败管理器实例来截取一张截图。
- en: Example 8-19\. Analyzing failed tests using JUnit 4
  id: totrans-322
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-19\. 使用 JUnit 4 分析失败的测试
- en: '[PRE69]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO16-1)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO16-1)'
- en: We take the screenshot as a PNG file, stored with a file name passed as a parameter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将截图保存为一个 PNG 文件，并以作为参数传递的文件名命名。
- en: TestNG
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: TestNG provides several *listeners* out of the box. These listeners are classes
    that capture different events of the test lifecycle. For instance, the `ITestResult`
    listener allows you to monitor the status and result of a test. As [Example 8-20](#testng-failure)
    shows, we can easily use this listener to implement failure analysis in a Selenium
    WebDriver test.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 提供了几个默认的 *监听器*。这些监听器是捕获测试生命周期中不同事件的类。例如，`ITestResult` 监听器允许您监控测试的状态和结果。如
    [Example 8-20](#testng-failure) 所示，我们可以轻松地在 Selenium WebDriver 测试中使用此监听器来实现失败分析。
- en: Example 8-20\. Analyzing failed tests using TestNG
  id: totrans-328
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 8-20\. 使用 TestNG 分析失败的测试
- en: '[PRE70]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO17-1)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO17-1)'
- en: We declare an `ITestResult` parameter in the method for test teardown.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在测试结束时的方法中声明了一个 `ITestResult` 参数。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO17-2)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO17-2)'
- en: We read the status of the test.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取测试的状态。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO17-3)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO17-3)'
- en: In case of failure, we create an instance of the failure manager (we use the
    same logic described in [Example 8-19](#junit4-failure-3)) for creating a screenshot.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在失败的情况下，我们创建一个失败管理器的实例（我们使用与 [Example 8-19](#junit4-failure-3) 描述的相同逻辑）以创建一个截图。
- en: JUnit 5
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: In JUnit 5, the Jupiter extension model replaced and improved the former test
    lifecycle management of JUnit 4 based on rules. As introduced in [Chapter 2](ch02.html#ch02),
    the extension model provided by Jupiter allows adding new features on the top
    of the Jupiter programming model. This way, a Jupiter extension is a Java class
    that implements one or several *extension points*, which are interfaces that allow
    different types of operations in the Jupiter programming model. [Table 8-4](#junit5-extension-points)
    summarizes the extension points provided by Jupiter.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JUnit 5 中，Jupiter 扩展模型取代并改进了基于规则的 JUnit 4 测试生命周期管理。正如 [Chapter 2](ch02.html#ch02)
    中介绍的，Jupiter 提供的扩展模型允许在 Jupiter 编程模型的基础上添加新功能。这样，Jupiter 扩展是实现一个或多个 *扩展点* 的 Java
    类，这些接口允许在 Jupiter 编程模型中执行不同类型的操作。[Table 8-4](#junit5-extension-points) 总结了 Jupiter
    提供的扩展点。
- en: Table 8-4\. Jupiter extension points
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Table 8-4\. Jupiter 扩展点
- en: '| Category | Description | Extension point(s) |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 描述 | 扩展点(s) |'
- en: '| --- | --- | --- |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Test lifecycle callbacks | To include custom logic during the test lifecycle
    |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| 测试生命周期回调 | 在测试生命周期中包含自定义逻辑 |'
- en: '[PRE71]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '|'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Parameter resolution | To inject parameters in test methods or constructors
    |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| 参数解析 | 在测试方法或构造函数中注入参数 |'
- en: '[PRE72]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '|'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Test templates | To implement tests using `@TestTemplate` |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| 测试模板 | 使用`@TestTemplate`实现测试 |'
- en: '[PRE73]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '|'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Conditional test execution | To enable or disable tests depending on custom
    conditions |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| 条件测试执行 | 根据自定义条件启用或禁用测试 |'
- en: '[PRE74]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '|'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Exception handling | To handle exceptions during the test and its lifecycle
    |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| 异常处理 | 处理测试及其生命周期中的异常 |'
- en: '[PRE75]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Test instance | To create and process test class instances |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 测试实例 | 创建和处理测试类实例 |'
- en: '[PRE76]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '|'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Intercepting invocations | To intercept calls to test code (and decide whether
    or not these calls proceed) |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| 拦截调用 | 拦截对测试代码的调用（并决定这些调用是否继续） |'
- en: '[PRE77]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '|'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: A convenient extension point for implementing failure analysis is `AfterTestExecutionCallback`,
    since it allows including custom logic immediately after an individual test has
    been executed. [Example 8-21](#junit5-failure-1) provides a Jupiter test using
    a custom annotation (see [Example 8-22](#junit5-failure-2)) implementing this
    extension point.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 实施失败分析的一个便捷扩展点是`AfterTestExecutionCallback`，因为它允许在单个测试执行后立即包含自定义逻辑。[示例 8-21](#junit5-failure-1)提供了使用自定义注解的Jupiter测试（参见[示例 8-22](#junit5-failure-2)）来实现此扩展点。
- en: Example 8-21\. Analyzing failed tests using JUnit 5
  id: totrans-363
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-21\. 使用JUnit 5分析失败的测试
- en: '[PRE78]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO18-1)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO18-1)'
- en: We use the `FailureWatcher` extension for the tests available in this class.
    We pass the driver instance as an argument.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用此类中提供的`FailureWatcher`扩展来进行测试。我们将驱动程序实例作为参数传递。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO18-2)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO18-2)'
- en: We force a failure to make the extension take the browser screenshot.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强制失败以使扩展获取浏览器截图。
- en: Example 8-22\. Analyzing failed tests using JUnit 5
  id: totrans-369
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-22\. 使用JUnit 5分析失败的测试
- en: '[PRE79]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO19-1)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO19-1)'
- en: 'This extension implements a single extension point: `AfterTestExecution​Call⁠back`.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展实现了一个单一的扩展点：`AfterTestExecution​Call⁠back`。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO19-2)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO19-2)'
- en: This extension point must override this method, which is executed immediately
    after each test.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展点必须重写此方法，该方法在每个测试后立即执行。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO19-3)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO19-3)'
- en: We check if an execution exception is present.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查执行异常是否存在。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO19-4)'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO19-4)'
- en: If so, we take a screenshot using the `WebDriver` instance.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，我们使用`WebDriver`实例来截图。
- en: Selenium-Jupiter
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: Selenium-Jupiter is a Jupiter extension that, among other features, allows making
    browser screenshots effortlessly. [Example 8-23](#seljup-failure) demonstrates
    this feature.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium-Jupiter是一个Jupiter扩展，除其他功能外，还允许轻松进行浏览器截图。[示例 8-23](#seljup-failure)展示了这一特性。
- en: Example 8-23\. Analyzing failed tests JUnit 5 with Selenium-Jupiter
  id: totrans-381
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-23\. 使用Selenium-Jupiter分析JUnit 5的失败测试
- en: '[PRE80]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO20-1)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO20-1)'
- en: Selenium-Jupiter takes a browser screenshot in the case of failed tests simply
    by using this configuration capability.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium-Jupiter通过使用此配置能力，在测试失败时获取浏览器截图。
- en: Retrying Tests
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重试测试
- en: As explained in [Chapter 7](ch07.html#ch07), test *flakiness* (i.e., lack of
    reliability) is a well-known issue in end-to-end tests. As testers, we sometimes
    need to identify a *flaky* test (i.e., a test that passes or fails under the same
    conditions), and for that, we retry a given test to check whether its result is
    consistent. Thus, we might want a mechanism to retry tests in case of failure.
    This section explains how to carry out this process using the different unit testing
    frameworks.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第7章](ch07.html#ch07)中所述，端到端测试中存在测试*不稳定性*（即可靠性不足）是一个众所周知的问题。作为测试人员，有时我们需要识别*不稳定*的测试（即在相同条件下通过或失败的测试），为此，我们重试给定的测试以检查其结果是否一致。因此，我们可能需要一种机制，在测试失败时重试测试。本节解释了如何使用不同的单元测试框架执行此过程。
- en: JUnit 4
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: We need to use a custom JUnit 4 rule for retrying failed tests. [Example 8-24](#junit4-retry-1)
    shows a test using an example of this kind of rule, and [Example 8-25](#junit4-retry-2)
    contains the source code of that rule.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用自定义的 JUnit 4 规则来重试失败的测试。[示例 8-24](#junit4-retry-1)展示了使用这种规则的测试示例，而[示例 8-25](#junit4-retry-2)包含了该规则的源代码。
- en: Example 8-24\. Retrying tests using JUnit 4
  id: totrans-389
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-24\. 使用 JUnit 4 重试测试
- en: '[PRE81]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO21-1)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO21-1)'
- en: We declare the retrying rule as a test attribute.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重试规则声明为测试属性。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO21-2)'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO21-2)'
- en: We use the same browser for all the repetitions.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有重复使用相同的浏览器。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO21-3)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO21-3)'
- en: We open a practice web page called *random calculator*. This page has been designed
    to produce incorrect results a given percentage of the time (50% by default).
    Then the calculator works perfectly after a configurable number of times (five
    by default).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个名为*随机计算器*的实践网页。该页面被设计为在一定百分比的时间内（默认为50%）生成错误结果。然后，计算器在配置的次数后（默认为五次）正常工作。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO21-4)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO21-4)'
- en: We use the calculator GUI to make an essential arithmetic operation.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用计算器 GUI 进行重要的算术操作。
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO21-5)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_testing_framework_specifics_CO21-5)'
- en: We verify the result. There is a 50% probability of getting an incorrect result
    for the first five attempts.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证结果。前五次尝试有 50% 的概率得到错误结果。
- en: Example 8-25\. JUnit 4 rule for retrying failed tests
  id: totrans-401
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-25\. 使用 JUnit 4 规则重试失败的测试
- en: '[PRE82]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO22-1)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO22-1)'
- en: We implement the generic interface for JUnit 4 rules, i.e., `TestRule`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 JUnit 4 规则实现了通用接口，即`TestRule`。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO22-2)'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO22-2)'
- en: This rule accepts an integer value in its constructor, used to determine the
    maximum number of retries.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 此规则在其构造函数中接受一个整数值，用于确定最大重试次数。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO22-3)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO22-3)'
- en: We need to override the method `apply,` which allows manipulation of the test
    lifecycle.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重写`apply`方法，该方法允许操作测试的生命周期。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO22-4)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO22-4)'
- en: We repeat the test execution in a loop, repeated a maximum number of times equal
    to the number of retries.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在循环中重复执行测试，重复次数最多等于重试次数。
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO22-5)'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_testing_framework_specifics_CO22-5)'
- en: In case of error during test execution, we get the exception object and repeat
    the test execution.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试执行期间发生错误时，我们获取异常对象并重复执行测试。
- en: '[![6](assets/6.png)](#co_testing_framework_specifics_CO22-6)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_testing_framework_specifics_CO22-6)'
- en: If this line is reached, it means the test has been repeated the maximum number
    of times.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果达到此行，表示测试已重试最大次数。
- en: TestNG
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: TestNG provides a custom capability for implementing test retries. As shown
    in [Example 8-26](#testng-retry-1), we use the attribute `retryAnalyzer` of a
    `@Test` annotation to enable this feature. [Example 8-27](#testng-retry-2) shows
    the implementation for that retries analyzer.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 提供了一个自定义功能来实现测试重试。如[示例 8-26](#testng-retry-1)所示，我们使用`@Test`注解的`retryAnalyzer`属性来启用此功能。[示例 8-27](#testng-retry-2)展示了重试分析器的实现。
- en: Example 8-26\. Retrying tests using TestNG
  id: totrans-417
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-26\. 使用 TestNG 重试测试
- en: '[PRE83]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Example 8-27\. Test analyzer for TestNG
  id: totrans-419
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-27\. TestNG 的测试分析器
- en: '[PRE84]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO23-1)'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO23-1)'
- en: We need to implement a TestNG listener called `IRetryAnalyzer` to implement
    a retry analyzer.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现一个称为`IRetryAnalyzer`的 TestNG 监听器以实现重试分析器。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO23-2)'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO23-2)'
- en: We cannot parameterize this class; therefore, we declare the maximum retries
    number within the class (as a constant, in this case).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法为此类参数化；因此，我们在类内声明最大重试次数（在本例中作为常量）。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO23-3)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO23-3)'
- en: We need to override the method `retry`. This method returns a boolean value
    that determines if the test is retried or not in case of failure.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重写方法`retry`。该方法返回一个布尔值，用于确定在失败时是否重试测试。
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO23-4)'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_testing_framework_specifics_CO23-4)'
- en: The logic to determine this value is an accumulator that checks if the retries
    threshold is reached.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 确定此值的逻辑是一个累加器，检查是否达到重试阈值。
- en: JUnit 5
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: 'We need to use the extension model previously explained (see [Table 8-4](#junit5-extension-points))
    for retrying failed tests. Instead of reinventing the wheel, we can use an existing
    open source Jupiter extension for this aim. To retry tests, and as introduced
    in [Chapter 2](ch02.html#ch02), there are various alternatives: [JUnit Pioneer](https://junit-pioneer.org)
    or [rerunner-jupiter](https://github.com/artsok/rerunner-jupiter). [Example 8-28](#junit5-retry)
    shows a test using the latter.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用先前解释的扩展模型（参见[表 8-4](#junit5-extension-points)）来重试失败的测试。我们可以利用现有的开源Jupiter扩展而不是重复造轮子。为了重试测试，正如在[第2章](ch02.html#ch02)中介绍的那样，有多种选择：[JUnit
    Pioneer](https://junit-pioneer.org)或[rerunner-jupiter](https://github.com/artsok/rerunner-jupiter)。[示例 8-28](#junit5-retry)展示了使用后者的测试。
- en: Example 8-28\. Retrying tests using JUnit 5
  id: totrans-431
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-28\. 使用JUnit 5重试测试
- en: '[PRE85]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO24-1)'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO24-1)'
- en: Simply decorating a test with this annotation, we repeat the test a maximum
    number of times (five in this case) in case of failure.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地使用此注解装饰测试，在失败的情况下最多重复测试五次。
- en: Selenium-Jupiter
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: Tests using Selenium-Jupiter can also use other extensions. [Example 8-29](#seljup-retry)
    shows how to use rerunner-jupiter in a Selenium-Jupiter test.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Selenium-Jupiter的测试也可以使用其他扩展。[示例 8-29](#seljup-retry)展示了如何在Selenium-Jupiter测试中使用rerunner-jupiter。
- en: Example 8-29\. Retrying tests JUnit 5 with Selenium-Jupiter
  id: totrans-437
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-29\. 使用JUnit 5和Selenium-Jupiter重试测试
- en: '[PRE86]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO25-1)'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO25-1)'
- en: We reuse the same browser for all the possible repetitions.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重复所有可能的重试中都使用同一个浏览器。
- en: Parallel Test Execution
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行测试执行
- en: The time required to execute a Selenium WebDriver test suite (especially if
    the number of tests is high) can be considerable. The reason for this slowness
    is that a regular Selenium WebDriver test starts a new browser each time, and
    as a result, the overall execution time rises. A possible solution to this problem
    is to execute tests in parallel. There are different ways to achieve this parallelization.
    First, we can use the built-in capabilities for parallel execution provided by
    the build tools (Maven or Gradle). Second, we can use the features provided by
    the unit testing frameworks (JUnit 4 or 5, and TestNG) to that aim. The following
    subsections explain all these options.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Selenium WebDriver测试套件所需的时间可能相当长（特别是如果测试数量很多）。这种缓慢的原因在于，常规的Selenium WebDriver测试每次启动一个新的浏览器，导致整体执行时间增加。解决此问题的一种可能方案是并行执行测试。有多种方法可以实现此并行化。首先，我们可以使用构建工具（如Maven或Gradle）提供的内置并行执行功能。其次，我们可以利用单元测试框架（JUnit
    4或5以及TestNG）提供的功能来实现。以下各小节详细解释了所有这些选项。
- en: Maven
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven
- en: 'Maven offers different mechanisms for parallel execution. First, Maven allows
    building modules of multimodule projects in parallel. For that, we need to invoke
    the Maven command from the command line using the option `-T`. This option accepts
    two types of arguments for parallelization: using a fixed number of threads or
    using a factor multiplied by the number of available CPU cores in your system.
    The following snippet shows an example of each type:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了不同的机制来进行并行执行。首先，Maven允许并行构建多模块项目的模块。为此，我们需要从命令行使用选项`-T`调用Maven命令。此选项接受两种类型的参数进行并行化：使用固定数量的线程或使用系统中可用CPU核心数的乘数因子。以下代码段展示了每种类型的示例：
- en: '[PRE87]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO26-1)'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO26-1)'
- en: It executes the test of a multimodule project (e.g., the examples repository)
    in parallel using four threads.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用四个线程并行执行多模块项目（例如示例仓库）的测试。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO26-2)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO26-2)'
- en: It executes the test of a multimodule project using the same number of threads
    as the CPU cores (for example, four threads in a quad-core system).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用与CPU核心数量相同的线程数（例如，在四核系统中使用四个线程）并行执行多模块项目的测试。
- en: 'In addition, the plug-in used to execute unit tests in Maven (called *Surefire*)
    provides two ways to run tests in parallel. The first is multithreading inside
    a single JVM process. To enable this mode, we need to specify different configuration
    parameters, such as:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用于在 Maven 中执行单元测试的插件（称为 *Surefire*）提供了两种并行运行测试的方法。第一种是在单个 JVM 进程内进行多线程操作。要启用此模式，我们需要指定不同的配置参数，例如：
- en: '`parallel`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`parallel`'
- en: To configure the level of granularity for parallelism. The possible values for
    this parameter are `methods` (to execute test methods in separate threads), `classes`
    (for test classes), `suites` (for test suites), `suitesAndClasses` (for test suites
    and classes), `suitesAndMethods` (for test suites and methods), and `all` (to
    execute every test in separate threads).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 为并行执行配置并行度级别。该参数的可能值包括`methods`（在单独的线程中执行测试方法）、`classes`（测试类）、`suites`（测试套件）、`suitesAndClasses`（测试套件和类）、`suitesAndMethods`（测试套件和方法）以及`all`（在单独的线程中执行每个测试）。
- en: '`threadCount`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`threadCount`'
- en: To define the maximum number of threads for parallelism.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 定义并行性的最大线程数。
- en: '`useUnlimitedThreads`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`useUnlimitedThreads`'
- en: To allow an unlimited number of threads.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 允许无限线程。
- en: 'There are two ways to specify these configuration parameters. First, we can
    configure them directly on the Maven configuration file (i.e., the `pom.xml` file).
    [Example 8-30](#maven-parallel) demonstrates how. In addition, we can specify
    these parameters as system properties when using the command line, for example:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以指定这些配置参数。首先，我们可以直接在 Maven 配置文件（即`pom.xml`文件）中配置它们。[示例 8-30](#maven-parallel)演示了如何进行配置。此外，我们还可以在使用命令行时将这些参数作为系统属性指定，例如：
- en: '[PRE88]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Example 8-30\. Maven Surefire configuration sample for parallel execution
  id: totrans-459
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-30\. Maven Surefire 配置示例，用于并行执行
- en: '[PRE89]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The second way to implement parallelism with Maven Surefire is *forking*, i.e.,
    creating multiple JVM processes. This option can be helpful if we need to prevent
    thread-level concurrency issues since different processes do not share memory
    space, as happens in multithreading. As a drawback, forking consumes more memory
    and has lower performance. To enable forking, we need to use the `forkCount` configuration
    property (again, in the `pom.xml` or as a system property) to a value higher than
    one (i.e., the number of JVM process to be created). For example, the following
    command executes the tests of a Maven project using four JVM processes:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Maven Surefire 实现并行的第二种方式是 *forking*，即创建多个 JVM 进程。如果需要防止线程级并发问题，这种选择很有帮助，因为不同的进程不共享内存空间，这与多线程不同。作为缺点，forking
    消耗更多内存且性能较低。要启用 forking，我们需要将 `forkCount` 配置属性（再次在`pom.xml`或作为系统属性中）设置为大于一的值（即要创建的
    JVM 进程数）。例如，以下命令使用四个 JVM 进程执行 Maven 项目的测试：
- en: '[PRE90]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Gradle
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle
- en: 'Gradle also provides several ways to execute tests in parallel. First, it allows
    executing tasks in parallel in a multimodule project. There are two ways to enable
    this mode. First, by setting the property `org.gradle.parallel=true` in the configuration
    file `gradle.properties`. Second, using the option `--parallel` in the command,
    for example:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 也提供了几种执行测试的并行方式。首先，它允许在多模块项目中并行执行任务。有两种启用此模式的方法。首先，在配置文件`gradle.properties`中设置属性`org.gradle.parallel=true`。其次，使用命令中的选项`--parallel`，例如：
- en: '[PRE91]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'In addition, we can use the configuration property `maxParallelForks` in the
    Gradle configuration file to specify the maximum number of test processes to start
    in parallel. By default, Gradle executes a single test class at a time. We change
    this default behavior by setting a value higher than one for this parameter. In
    addition to a fixed value, we can specify the number of available CPU cores in
    your system:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以在 Gradle 配置文件中使用配置属性 `maxParallelForks` 来指定要并行启动的最大测试进程数。默认情况下，Gradle
    一次只执行一个测试类。通过为此参数设置高于一的值，我们可以更改此默认行为。除了固定值外，我们还可以指定系统中可用 CPU 核心的数量：
- en: '[PRE92]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'In the example repository, this property is enabled conditionally using a profile
    called `parallel` (see [Appendix C](app03.html#appendix03)). Therefore, we can
    use this profile using the command line:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例存储库中，此属性通过名为`parallel`的配置文件条件性启用（见[附录 C](app03.html#appendix03)）。因此，我们可以使用以下命令行来使用此配置文件：
- en: '[PRE93]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: JUnit 4
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: JUnit provides a basic way to execute tests in parallel through the class `Parallel​Com⁠puter`.
    This class accepts two boolean parameters in its constructor to enable parallel
    test execution of classes and methods, respectively. [Example 8-31](#junit4-parallel)
    shows a test using this class.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 通过类 `Parallel​Com⁠puter` 提供了一种基本的方式来并行执行测试。此类在其构造函数中接受两个布尔参数，以分别启用类和方法的并行测试执行。[示例 8-31](#junit4-parallel)
    展示了使用此类进行测试的示例。
- en: Example 8-31\. Parallel test execution using JUnit 4
  id: totrans-472
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-31\. 使用 JUnit 4 进行并行测试执行
- en: '[PRE94]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO27-1)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO27-1)'
- en: We specify which test classes are executed in parallel.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定要并行执行的测试类。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO27-2)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO27-2)'
- en: We enable parallel test execution for test classes and methods.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为测试类和方法启用并行测试执行。
- en: TestNG
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: 'A common way to specify parallel execution for tests in TestNG is through the
    configuration file `testng.xml`. The most relevant attributes to enable this mode
    in TestNG are:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TestNG 中指定测试并行执行的常见方式是通过配置文件 `testng.xml`。在 TestNG 中启用此模式最相关的属性包括：
- en: '`parallel`'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`parallel`'
- en: Specifies the mode for running tests in parallel. The alternatives are `methods`,
    `tests`, and `classes`.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 指定并行运行测试的模式。替代方案为 `methods`、`tests` 和 `classes`。
- en: '`threadcount`'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`threadcount`'
- en: Sets the default maximum number of threads for running tests in parallel.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 设置并行运行测试的默认最大线程数。
- en: '[Example 8-32](#testng-parallel) shows a basic configuration of `testng.xml`
    for test parallelism.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8-32](#testng-parallel) 显示了用于测试并行性的 `testng.xml` 的基本配置。'
- en: Example 8-32\. Parallel test configuration for TestNG
  id: totrans-485
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-32\. TestNG 的并行测试配置
- en: '[PRE95]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'We can use Maven or Gradle in the command line to run the previous parallel
    test suite:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行中使用 Maven 或 Gradle 运行之前的并行测试套件：
- en: '[PRE96]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: JUnit 5
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: 'JUnit 5 allows different ways to execute tests in parallel. The following list
    summarizes the most relevant configuration parameters for this purpose:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 5 允许以不同的方式并行执行测试。以下列表总结了此目的的最相关配置参数：
- en: '`junit.jupiter.execution.parallel.enabled`'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit.jupiter.execution.parallel.enabled`'
- en: Boolean flag to enable test parallelism (`false` by default).
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 启用测试并行性的布尔标志（默认为 `false`）。
- en: '`junit.jupiter.execution.parallel.mode.classes.default`'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit.jupiter.execution.parallel.mode.classes.default`'
- en: To run test classes in parallel. The possible values are `same_thread` for single
    threaded execution (by default) and `concurrent` for parallel execution.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 为了并行运行测试类。可能的值为 `same_thread` 表示单线程执行（默认），`concurrent` 表示并行执行。
- en: '`junit.jupiter.execution.parallel.mode.default`'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit.jupiter.execution.parallel.mode.default`'
- en: To run test methods in parallel. The possible values are the same as before
    (for test classes).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 为了并行运行测试方法。可能的值与之前的测试类相同。
- en: 'There are two ways to specify these parameters. First, in the configuration
    file `junit-platform.properties` (that should be available in the project classpath).
    [Example 8-33](#junit5-parallel-1) shows sample content of this file. Second,
    by using system properties and the command line. The following commands (Maven/Gradle)
    show how:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种指定这些参数的方式。首先，在配置文件 `junit-platform.properties` 中（应该位于项目类路径中可用）。[示例 8-33](#junit5-parallel-1)
    显示了此文件的示例内容。其次，通过使用系统属性和命令行。以下命令（Maven/Gradle）展示了如何操作：
- en: '[PRE97]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Example 8-33\. Parallel test execution using JUnit 5
  id: totrans-499
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-33\. 使用 JUnit 5 进行并行测试执行
- en: '[PRE98]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'In addition, the Jupiter programming model provides the annotation `@Execution`
    to change the parallelization mode for test classes or methods. This annotation
    can be used at the class level or method level and accepts two values: `ExecutionMode.CONCURRENT`
    (for parallel execution) and `ExecutionMode.SAME_THREAD` (for single-thread execution).
    [Example 8-34](#junit5-parallel-2) shows the structure of a test class contained
    in the example repository. Supposing that the parallel test is enabled (as in
    [Example 8-33](#junit5-parallel-1)), this class will be executed in parallel together
    with other tests that allow parallelization.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Jupiter 编程模型提供了注解 `@Execution`，用于更改测试类或方法的并行模式。该注解可以在类级别或方法级别使用，接受两个值：`ExecutionMode.CONCURRENT`（用于并行执行）和
    `ExecutionMode.SAME_THREAD`（用于单线程执行）。[示例 8-34](#junit5-parallel-2) 展示了示例仓库中包含的测试类的结构。假设启用了并行测试（如[示例 8-33](#junit5-parallel-1)），此类将与其他允许并行化的测试一起并行执行。
- en: Example 8-34\. Parallel test execution using JUnit 5
  id: totrans-502
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-34\. 使用 JUnit 5 进行并行测试执行
- en: '[PRE99]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Test Listeners
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试监听器
- en: A common need in the testing process is to keep track of the different stages
    of test execution. Unit testing frameworks thus provide a feature known as a *test
    listener*. Test listeners can be seen as utilities that modify the default test
    behavior by performing custom actions at multiple stages of the test execution
    cycle. As usual, each unit testing framework provides its own implementation for
    these test listeners.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中通常需要跟踪不同阶段的测试执行。单元测试框架因此提供了称为*测试监听器*的功能。测试监听器可以被视为通过在测试执行周期的多个阶段执行自定义操作来修改默认测试行为的实用程序。通常情况下，每个单元测试框架都为这些测试监听器提供了自己的实现。
- en: JUnit 4
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: In JUnit 4, test listeners include custom operations when tests are started,
    passed, finished, failed, skipped, or ignored. The first step for implementing
    a JUnit 4 listener is to create a Java class that extends the `RunListener` class.
    In this class, you can override several methods (e.g., `testRunStarted`, `testIgnored`,
    `testFailure`, etc.) for including additional logic in the different steps of
    the test lifecycle. [Example 8-35](#junit4-listeners-3) shows basic implementation
    of a JUnit 4 test listener. This listener simply displays a message in the standard
    output about the test stage.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JUnit 4 中，测试监听器包括在测试开始、通过、完成、失败、跳过或忽略时执行的自定义操作。实现 JUnit 4 监听器的第一步是创建一个扩展`RunListener`类的
    Java 类。在这个类中，您可以重写几个方法（例如`testRunStarted`、`testIgnored`、`testFailure`等），以在测试生命周期的不同步骤中包含额外的逻辑。[示例 8-35](#junit4-listeners-3)展示了一个基本的
    JUnit 4 测试监听器实现。此监听器简单地在标准输出中显示有关测试阶段的消息。
- en: Example 8-35\. Test listener using JUnit 4
  id: totrans-508
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-35\. 使用 JUnit 4 测试监听器
- en: '[PRE100]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: A common way to register a test listener in JUnit 4 is to create a custom runner
    and use that runner in test classes. [Example 8-36](#junit4-listeners-2) shows
    a custom test runner registering the previous listener. [Example 8-37](#junit4-listeners-1)
    shows a test skeleton using this runner.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JUnit 4 中注册测试监听器的常见方法是创建一个自定义运行器，并在测试类中使用该运行器。[示例 8-36](#junit4-listeners-2)展示了注册前述监听器的自定义测试运行器。[示例 8-37](#junit4-listeners-1)展示了使用此运行器的测试框架。
- en: Example 8-36\. Test listeners using JUnit 4
  id: totrans-511
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-36\. 使用 JUnit 4 测试监听器
- en: '[PRE101]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO28-1)'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO28-1)'
- en: We extend `Blockjunit4classrunner`, the default test runner in JUnit 4.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展`Blockjunit4classrunner`，这是 JUnit 4 中的默认测试运行器。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO28-2)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO28-2)'
- en: We register our custom test listener.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注册我们的自定义测试监听器。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO28-3)'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO28-3)'
- en: We call the parent to continue using the default test runner.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用默认的测试运行程序继续调用父级。
- en: Example 8-37\. Test listeners using JUnit 4
  id: totrans-519
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-37\. 使用 JUnit 4 测试监听器
- en: '[PRE102]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO29-1)'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO29-1)'
- en: We decorate test classes using the JUnit 4 annotation `@RunWith` and our custom
    runner.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 JUnit 4 注解`@RunWith`和我们的自定义运行器装饰测试类。
- en: TestNG
  id: totrans-523
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: TestNG provides the interface `ITestListener` for implementing test listeners.
    The classes implementing this interface can override methods for the different
    stages of the TestNG lifecycle, such as `onTestSuccess`, `onTestFailure`, or `onTestSkipped`,
    among others. [Example 8-38](#testng-listeners-2) shows a sample class implementing
    this interface. In this example, the listener methods log a message in the standard
    output. [Example 8-39](#testng-listeners-1) shows a test using this listener.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 提供了接口`ITestListener`来实现测试监听器。实现此接口的类可以重写各个 TestNG 生命周期阶段的方法，如`onTestSuccess`、`onTestFailure`或`onTestSkipped`等。[示例 8-38](#testng-listeners-2)展示了实现此接口的示例类。在这个示例中，监听器方法在标准输出中记录一条消息。[示例 8-39](#testng-listeners-1)展示了使用此监听器的测试。
- en: Example 8-38\. Test listener using TestNG
  id: totrans-525
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-38\. 使用 TestNG 测试监听器
- en: '[PRE103]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Example 8-39\. Test listeners using TestNG
  id: totrans-527
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-39\. 使用 TestNG 测试监听器
- en: '[PRE104]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO30-1)'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO30-1)'
- en: We use the TestNG annotation `@Listeners` to specify that all the tests in this
    class use our custom test listener.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 TestNG 注解`@Listeners`来指定此类中的所有测试使用我们的自定义测试监听器。
- en: JUnit 5
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: As previously discussed (see [Table 8-4](#junit5-extension-points)), Jupiter
    provides a wide variety of extension points for including custom logic in the
    JUnit 5 test lifecycle. In addition to this extension model, JUnit 5 allows the
    implementation of test listeners to keep track of several test execution stages,
    such as test started, skipped, or finished. This feature is available through
    the JUnit Launcher API, which is the API for discovering, filtering, and executing
    tests in the JUnit Platform (see [Figure 2-4](ch02.html#junit5-arch)).
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面讨论的（见 [表 8-4](#junit5-extension-points)），Jupiter 提供了各种扩展点，用于在 JUnit 5 测试生命周期中包含自定义逻辑。除了这个扩展模型，JUnit
    5 还允许实现测试监听器来跟踪几个测试执行阶段，如测试启动、跳过或完成。此功能通过 JUnit Launcher API 提供，该 API 用于发现、过滤和执行
    JUnit 平台中的测试（见 [图 2-4](ch02.html#junit5-arch)）。
- en: To create a test listener in JUnit 5, we need to implement the `TestExecutionListener`
    interface. A class implementing this interface can override different methods
    to be notified of events that occur during test execution. [Example 8-40](#junit5-listeners-1)
    contains a basic class implementing this interface. These kinds of listeners are
    registered in JUnit 5 using a standard Java service loader mechanism. For that,
    we need to create a file called `/META-INF/services/org.junit.platform.launcher.TestExecutionLis⁠ten​er`
    in the project classpath, and write the fully qualified name of the test listener
    we want to register (e.g., `io.github.bonigarcia.webdriver.jupiter.ch08.listen⁠ers​.MyTestListener`
    for [Example 8-40](#junit5-listeners-1)). Note that this file is not included
    in the examples repository to avoid intruding on the whole test suite.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 JUnit 5 中创建一个测试监听器，我们需要实现 `TestExecutionListener` 接口。实现这个接口的类可以重写不同的方法，以便在测试执行期间被通知发生的事件。[示例 8-40](#junit5-listeners-1)
    包含一个实现此接口的基本类。这类监听器通过标准的 Java 服务加载器机制在 JUnit 5 中注册。为此，我们需要在项目类路径中创建一个名为 `/META-INF/services/org.junit.platform.launcher.TestExecutionListener`
    的文件，并写入要注册的测试监听器的完全限定名称（例如 `io.github.bonigarcia.webdriver.jupiter.ch08.listeners.MyTestListener`
    对应 [示例 8-40](#junit5-listeners-1)）。请注意，这个文件没有包含在示例存储库中，以避免侵入整个测试套件。
- en: Example 8-40\. Test listeners using JUnit 5
  id: totrans-534
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-40\. 使用 JUnit 5 测试监听器
- en: '[PRE105]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Note
  id: totrans-536
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Interface `TestExecutionListener` belongs to the JUnit Platform Launcher API;
    therefore, to use it, we need to include this API as an extra dependency in our
    project. [Appendix C](app03.html#appendix03) explains the required Maven and Gradle
    setup for that.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 接口 `TestExecutionListener` 属于 JUnit 平台启动器 API；因此，要使用它，我们需要在项目中额外包含这个 API 作为依赖项。[附录 C](app03.html#appendix03)
    解释了为此设置所需的 Maven 和 Gradle 配置。
- en: Disabled Tests
  id: totrans-538
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用的测试
- en: Unit testing frameworks allow disabling (i.e., skipping in test execution) entire
    test classes or individual test methods programmatically. The following subsections
    explain the differences between JUnit 4, TestNG, JUnit 5, and Selenium-Jupiter.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试框架允许以编程方式禁用（即在测试执行中跳过）整个测试类或单个测试方法。下面的小节解释了 JUnit 4、TestNG、JUnit 5 和 Selenium-Jupiter
    之间的区别。
- en: JUnit 4
  id: totrans-540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: JUnit 4 provides the annotation `@Ignore` to disable tests. This annotation
    can be used at the class or method level. Optionally, we can include a message
    in the annotation to specify the reason for disabling. [Example 8-41](#junit4-disabled)
    contains a disabled test.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 4 提供了注解 `@Ignore` 来禁用测试。这个注解可以用在类级别或方法级别。可选地，我们可以在注解中包含消息，以说明禁用的原因。[示例 8-41](#junit4-disabled)
    包含一个被禁用的测试。
- en: Example 8-41\. Disabled tests using JUnit 4
  id: totrans-542
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-41\. 使用 JUnit 4 禁用测试
- en: '[PRE106]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: TestNG
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: TestNG allows disabling tests in two ways. First, we can use the annotation
    `@Ignore` for test classes or methods. Second, we can use the `enabled` attribute
    of the `@Test` annotation. [Example 8-42](#testng-disabled) illustrates both methods.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 允许以两种方式禁用测试。首先，我们可以对测试类或方法使用注解 `@Ignore`。其次，我们可以使用 `@Test` 注解的 `enabled`
    属性。[示例 8-42](#testng-disabled) 说明了这两种方法。
- en: Example 8-42\. Disabled tests using TestNG
  id: totrans-546
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-42\. 使用 TestNG 禁用测试
- en: '[PRE107]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: JUnit 5
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: The Jupiter programming model provides various annotations for disabling tests
    based on different conditions. [Table 8-5](#jupiter-disabling) summarizes these
    annotations, and [Example 8-43](#junit5-disabled) provides a basic example using
    some of these annotations.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: Jupiter 编程模型提供了各种注解，用于根据不同条件禁用测试。[表 8-5](#jupiter-disabling) 总结了这些注解，而 [示例 8-43](#junit5-disabled)
    提供了一个使用其中一些注解的基本示例。
- en: Table 8-5\. Jupiter annotations for disabling tests
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8-5\. 用于禁用测试的 Jupiter 注解
- en: '| Annotation(s) | Description |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 描述 |'
- en: '| --- | --- |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE108]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '| To disable test class or method |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| 禁用测试类或方法 |'
- en: '|'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE109]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '| To disable/enable depending on the Java version |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| 根据 Java 版本来禁用/启用测试 |'
- en: '|'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE110]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '| To disable/enable depending on a range of Java versions |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| 根据 Java 版本范围来禁用/启用测试 |'
- en: '|'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE111]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '| To disable/enable depending on the operating system (e.g., Windows, Linux,
    macOS, etc.) |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| 根据操作系统（例如，Windows、Linux、macOS 等）来禁用/启用测试 |'
- en: '|'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE112]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '| To disable/enable depending on the value of system properties |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
  zh: '| 根据系统属性的值来禁用/启用测试 |'
- en: '|'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE113]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '| To disable/enable depending on the value of an environment variable |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| 根据环境变量的值来禁用/启用测试 |'
- en: '|'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE114]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '| To disable/enable based on the boolean return of a custom method |'
  id: totrans-573
  prefs: []
  type: TYPE_TB
  zh: '| 根据自定义方法的布尔返回值来禁用/启用测试 |'
- en: Example 8-43\. Disabled tests using JUnit 5
  id: totrans-574
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-43\. 使用 JUnit 5 禁用的测试
- en: '[PRE115]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO31-1)'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO31-1)'
- en: We skip this test always.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 总是跳过此测试。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO31-2)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO31-2)'
- en: We skip this test in the case of using Java 8.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Java 8 时跳过此测试。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO31-3)'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO31-3)'
- en: We skip this test in any operating system different than macOS.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 除 macOS 外的任何操作系统均跳过此测试。
- en: Selenium-Jupiter
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: Selenium-Jupiter provides additional annotations to disable tests conditionally
    depending on specific conditions of Selenium WebDriver tests. These conditions
    are browser availability, Docker availability, and URL online (i.e., it returns
    a 200 response code when requesting the URL with the `GET` HTTP method). [Example 8-44](#seljup-disabled)
    shows several tests using these annotations.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium-Jupiter 提供了额外的注解，可以根据 Selenium WebDriver 测试的特定条件有条件地禁用测试。这些条件包括浏览器可用性、Docker
    可用性和 URL 在线性（即使用 `GET` HTTP 方法请求 URL 时返回 200 响应代码）。[示例 8-44](#seljup-disabled)
    展示了使用这些注解的几个测试。
- en: Example 8-44\. Disabled tests using JUnit 5 with Selenium-Jupiter
  id: totrans-584
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 8-44\. 使用 JUnit 5 和 Selenium-Jupiter 禁用的测试
- en: '[PRE116]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO32-1)'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_testing_framework_specifics_CO32-1)'
- en: This test is skipped if Safari is unavailable in the system.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统中没有 Safari，则跳过此测试。
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO32-2)'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_testing_framework_specifics_CO32-2)'
- en: This test is skipped if Docker is unavailable in the system.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统中没有安装 Docker，则跳过此测试。
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO32-3)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_testing_framework_specifics_CO32-3)'
- en: This test is skipped if a Selenium Server URL is not online. If so, the test
    is executed, and the previous URL is used to create an instance of `RemoteWebDriver`.
    To specify the required capabilities, we use the annotation `@DriverCapabilities`
    in this test (as explained in [Chapter 6](ch06.html#ch06)).
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Selenium Server URL 不在线，则跳过此测试。如果在线，则执行该测试，并使用前述 URL 创建 `RemoteWebDriver`
    的实例。在此测试中，我们使用 `@DriverCapabilities` 注解指定所需的能力（如 [第 6 章](ch06.html#ch06) 中所解释的）。
- en: Summary and Outlook
  id: totrans-592
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与展望
- en: This chapter presented some of the most relevant specific features of the testing
    framework used in this book (i.e., JUnit 4, TestNG, JUnit 5, and Selenium-Jupiter)
    for developing Selenium WebDriver tests. First, you learned how to implement parameterized
    tests. This feature can be convenient for cross-browser testing (i.e., using different
    browsers for web testing). Then, you learned how to categorize tests and use these
    categories to include or exclude them from test execution. You continued by comprehending
    mechanisms for failure analysis (e.g., make a browser screenshot when a test fails),
    retrying tests, or executing tests in parallel. Finally, you discovered how to
    implement test listeners and the different mechanisms for disabling tests.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了本书中使用的测试框架（即 JUnit 4、TestNG、JUnit 5 和 Selenium-Jupiter）的一些最相关的特定功能，用于开发
    Selenium WebDriver 测试。首先，您学习了如何实现参数化测试。此功能对于跨浏览器测试（即在不同浏览器上进行网页测试）非常方便。然后，您学习了如何对测试进行分类，并使用这些分类来包含或排除它们以进行测试执行。您还学习了测试失败分析的机制（例如，测试失败时制作浏览器截图）、重试测试或并行执行测试。最后，您了解了如何实现测试监听器以及禁用测试的不同机制。
- en: In the next chapter, you will learn how to integrate Selenium WebDriver with
    different third-party utilities for implementing advanced end-to-end tests. You
    will discover how to download files from web applications, capture traffic without
    using CDP (e.g., in Firefox), test nonfunctional requirements (such as performance,
    security, or accessibility), handle different input data, improve test reporting,
    and integrate with existing frameworks such as Spring or Cucumber.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何将 Selenium WebDriver 与不同的第三方工具集成，以实现高级端到端测试。您将了解如何从Web应用程序下载文件，在不使用CDP的情况下捕获流量（例如在Firefox中），测试非功能需求（如性能、安全性或可访问性），处理不同的输入数据，改进测试报告，并与现有框架（如Spring或Cucumber）集成。
