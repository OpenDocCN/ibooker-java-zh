- en: Chapter 7\. Securing Your Binaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章\. 保护您的二进制文件
- en: Sven Ruppert
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Sven Ruppert
- en: Stephen Chin
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Stephen Chin
- en: Data is the pollution problem of the information age, and protecting privacy
    is the environmental challenge.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数据是信息时代的污染问题，保护隐私是环境挑战。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bruce Schneier, *Data and Goliath*
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Bruce Schneier，《数据与歌利亚》
- en: Software security is a critical part of any comprehensive DevOps rollout. New
    breaches uncovered in the past year have called attention to the consequences
    of weak software security, and have prompted the creation of new government security
    regulations. The impact of meeting these new regulations spans across the entire
    software lifecycle, from development through production. As a result, DevSecOps
    is something that every software developer and DevOps professional needs to understand.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安全是全面的DevOps部署中的关键部分。过去一年中揭示的新漏洞引起了对软件安全薄弱后果的关注，并促使了新的政府安全法规的制定。满足这些新法规的影响跨越整个软件生命周期，从开发到生产。因此，DevSecOps是每个软件开发人员和DevOps专业人员都需要理解的内容。
- en: In this chapter, you will learn how to evaluate your product and organizational
    risk for security vulnerabilities. We will also cover static and dynamic techniques
    for security testing, and scoring techniques for risk assessment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何评估产品和组织风险以寻找安全漏洞。我们还将介绍静态和动态的安全测试技术，以及用于风险评估的评分技术。
- en: Regardless of your role, you will be better prepared to help secure your organization’s
    software delivery lifecycle. But first let’s look deeper into what happens if
    you don’t have a focus on security and take steps to secure your software supply
    chain.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的角色如何，您都将更好地准备好帮助保护组织的软件交付生命周期。但首先让我们深入了解如果不专注于安全性会发生什么，并采取措施来保护您的软件供应链。
- en: Supply Chain Security Compromised
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应链安全受损
- en: It started in early December 2020, when FireEye noticed that it had become a
    victim of a cyberattack, which is remarkable because the company itself specializes
    in detecting and fending off cyberattacks. Internal analysis showed that the attackers
    managed to steal FireEye internal tools, which FireEye used to examine its customers’
    IT infrastructure for weak points. This highly specialized toolbox is optimized
    for breaking into networks and IT systems, which in the hands of hackers is a
    tremendous risk. It wasn’t until later that this breach and a massive cyberattack
    known as the *SolarWinds hack* were discovered to be connected. (FireEye has since
    become Trellix, through a merger.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年12月初，FireEye注意到自己成为了网络攻击的受害者，这非常引人注目，因为该公司本身专门从事检测和防范网络攻击。内部分析显示，攻击者成功窃取了FireEye的内部工具，这些工具用于检查客户的IT基础设施中的弱点。这些高度专业化的工具箱被优化用于入侵网络和IT系统，而在黑客手中则构成巨大风险。直到后来才发现这一被称为*SolarWinds攻击*的巨大网络攻击与此次入侵有关联。（FireEye后来通过合并成为Trellix。）
- en: SolarWinds, a company based in the United States, specializes in the management
    of complex IT network structures. For this, the company developed the Orion Platform.
    The company itself has over 300,000 active customers who use this software internally.
    The software for managing network components has to be equipped with generous
    administrative rights within the IT systems in order to be able to carry out its
    tasks, which is one of the critical points the hackers used in their strategy.
    It took some time to recognize the connection between the FireEye hack and the
    later, massive cyberattacks, because the chain of effects was not as direct as
    previous vulnerability breaches.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SolarWinds是一家位于美国的公司，专门管理复杂的IT网络结构。为此，该公司开发了Orion平台。公司本身有超过30万活跃客户在内部使用这款软件。管理网络组件的软件必须在IT系统内部配备充分的管理权限，以执行其任务，这也是黑客在策略中利用的关键点之一。花费了一些时间才意识到FireEye入侵与后来的大规模网络攻击之间的关联，因为效果链并不像以前的漏洞入侵那样直接。
- en: Because of the long gap between exploitation of the SolarWinds vulnerability
    and discovery of the breach, many companies and government organizations ended
    up being affected by this attack. Over a period of a few weeks 20,000 successful
    attacks were launched. Because the pattern of the attacks was similar, security
    researchers were able to identify that these attacks were related. One of the
    common characteristics was that all of the organizations that suffered an attack
    used SolarWinds software to manage their network infrastructure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SolarWinds漏洞被利用和漏洞被发现之间的长时间间隔，许多公司和政府组织最终受到了此次攻击的影响。在几周的时间内发生了20,000次成功攻击。由于攻击模式相似，安全研究人员能够确认这些攻击是相关的。其中一个共同特征是，所有遭受攻击的组织都使用SolarWinds软件管理其网络基础设施。
- en: The attackers used FireEye tools to break into SolarWinds networks. They attacked
    the CI pipeline, which is responsible for creating the binaries for the Orion
    software platform. The software delivery production line was modified so that
    each time a new version was run through, the resulting binary was compromised
    and included a backdoor prepared by the hackers. The Orion Platform was used here
    as a Trojan horse to deliver the compromised binaries to thousands of networks.
    Any recipient who checked the fingerprint would see a valid binary because it
    was signed by SolarWinds, which is a vendor they trust. And this trust relationship
    is the flaw that this cyberattack takes advantage of to attack downstream networks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者利用FireEye工具侵入SolarWinds网络。他们攻击了CI管道，负责为Orion软件平台创建二进制文件。软件交付生产线被修改，以便每次运行新版本时，生成的二进制文件都被黑客篡改并包含后门。Orion平台被用作特洛伊木马，将被篡改的二进制文件传递给成千上万的网络。任何检查指纹的接收者都会看到一个有效的二进制文件，因为它由他们信任的供应商SolarWinds签名。而这种信任关系正是这次网络攻击利用的漏洞。
- en: The precise account of the way this attack was executed is as follows. The company,
    SolarWinds, created an update of its software and made these binaries available
    to all 300,000 customers via an automatic update process. Almost 20,000 customers
    then installed this update in a short period of time. The compromised software
    waited about two weeks after activation and then began to spread in the infected
    systems. As if that wasn’t bad enough, over time, further malware was then dynamically
    loaded, making it impossible to repair the compromised system without a full rebuild.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这次攻击的执行方式如下所述。公司SolarWinds更新了其软件，并通过自动更新过程向所有30万客户提供了这些二进制文件。几乎20,000客户在短时间内安装了此更新。受损软件在激活后约两周后开始在感染系统中传播。更糟糕的是，随着时间的推移，进一步的恶意软件动态加载，使得修复受损系统变得不可能而需要完全重建。
- en: Stepping back a bit, let’s differentiate between the perspective of the SolarWinds
    company and the perspective of the affected customers. Whose responsibility is
    it to mitigate this attack, and what does the procedure look like if you are affected
    yourself? Which tools can you use to identify and address the vulnerability? Who
    can take action against such attacks, and at what point in the vulnerability timeline?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微退后一步，我们来区分SolarWinds公司的视角和受影响客户的视角。谁有责任减轻这种攻击，如果你自己受到影响，程序是什么样的？你可以使用哪些工具来识别和解决这个漏洞？谁可以采取行动来防止此类攻击，以及在漏洞时间轴的哪个时刻？
- en: Security from the Vendor Perspective
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从供应商的视角看安全问题
- en: First, let’s start with the perspective of a software manufacturer (in this
    example, SolarWinds) that distributes software to its customers. When a supply-chain
    attack is carried out, you have to prepare yourself because you will be only the
    carrier of the viral software. Compared to a conventional attack, the damage is
    amplified because you are enabling hackers to open a security hole in thousands
    of your customers. Preventing this requires a stringent approach in your software
    development and distribution process.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从软件制造商的视角开始（在这个例子中是SolarWinds），该制造商将软件分发给其客户。当进行供应链攻击时，你必须做好准备，因为你只是病毒软件的载体。与传统攻击相比，损害被放大，因为你让黑客在成千上万的客户中打开了一个安全漏洞。预防这种情况需要在软件开发和分发过程中采取严格的方法。
- en: Securing the tools used in your software delivery pipeline is one of the most
    important aspects, because they have access to your internal systems and can maliciously
    modify binaries in your software pipeline. However, this is challenging because
    the number of direct and indirect tools used in software delivery lifecycles is
    constantly increasing and expanding the attack surface.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**保护软件交付管道中使用的工具**是最重要的方面之一，因为它们可以访问内部系统，并且可能恶意修改软件管道中的二进制文件。然而，这是一项挑战，因为软件交付生命周期中直接和间接使用的工具数量不断增加，扩大了攻击面。'
- en: Security from the Customer Perspective
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从客户角度看安全性
- en: As a customer of a vendor like SolarWinds, it is essential to consider all elements
    in the value chain, including all of the tools that a software developer uses
    daily. You also have to check the binaries generated from your CI/CD system for
    the possibility of modification or vulnerability injection. It is essential to
    keep an overview of all components used with a secure and traceable bill of materials.
    Ultimately, it helps only if you break your own products into their constituent
    parts and subject each element to a security review.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为SolarWinds等供应商的客户，必须考虑价值链中的所有元素，包括软件开发人员日常使用的所有工具。您还必须检查从CI/CD系统生成的二进制文件，以查看是否存在修改或漏洞注入的可能性。必须保持对所有使用组件的安全和可追溯的清单的概述。最终，只有将自己的产品分解为其组成部分，并对每个元素进行安全审查，才能有所帮助。
- en: How can you protect yourself as a consumer? The approach that all elements in
    the value chain must be subjected to a critical review also applies here. As shown
    in the SolarWinds case, individual fingerprints and the exclusive use of confidential
    sources do not provide the best possible protection. The components used must
    be subjected to a deeper security inspection.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为消费者，如何保护自己？价值链中的所有元素都必须接受严格审查的方法在这里同样适用。正如SolarWinds案例所示，单独的指纹和独占使用机密源并不能提供最佳的保护。使用的组件必须接受更深入的安全检查。
- en: The Full Impact Graph
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全面影响图
- en: A *full impact graph* represents all areas of an application that are affected
    by the known vulnerability. Analyzing a full impact graph requires tools to check
    for known weak points. These tools can develop their full potential only if they
    can recognize and represent the interrelationships across technology boundaries.
    Without considering a full impact graph, it is easy to focus on just one technology,
    which can quickly lead to dangerous pseudosecurity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*全面影响图*代表受已知漏洞影响的应用程序所有领域。分析全面影响图需要工具来检查已知弱点。只有当这些工具能够识别和表示技术边界上的相互关系时，它们才能充分发挥作用。如果不考虑全面影响图，很容易只关注某一项技术，这可能迅速导致危险的伪安全。'
- en: As an example, let’s say we are building a JAR with Maven; this JAR is used
    inside a WAR to be deployed inside a servlet container. Additionally, it is a
    best practice to pack this JAR inside a Docker image to deploy to production.
    The production configuration is also stored in Helm charts that are used to organize
    the Docker deployment. Suppose we can identify this compromised JAR inside the
    WAR that is part of the Docker image deployed by the Helm chart that is part of
    the active production environment. Tracing the vulnerability from a Helm chart
    through to the encapsulated JAR requires knowledge about the full impact graph.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，假设我们正在使用Maven构建一个JAR文件；这个JAR文件在WAR文件中使用，并部署在Servlet容器中。此外，将这个JAR文件打包进Docker镜像以部署到生产环境也是最佳实践。生产配置也存储在Helm图表中，用于组织Docker部署。假设我们可以识别出这个被入侵的JAR文件，它包含在由Helm图表部署的Docker镜像中，并且这个镜像是活跃生产环境的一部分。从Helm图表追溯到封装的JAR文件的漏洞需要了解全面影响图。
- en: The SolarWinds hack demonstrates the need to analyze a full impact graph in
    order to discover vulnerabilities in a supply chain. If you find a vulnerability
    in a binary file, the relevance of this vulnerability depends on how the file
    is used. You need to know where this file is used, and the potential risk caused
    by this weak point if used in an operational environment. If you don’t use this
    binary anywhere, the vulnerability can’t do any harm; however, if the use occurs
    in critical areas within a company, significant risk arises.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SolarWinds黑客事件表明，为了发现供应链中的漏洞，需要分析全面影响图。如果在一个二进制文件中发现漏洞，这个漏洞的重要性取决于文件的使用方式。您需要知道这个文件在哪里使用，以及在操作环境中使用时可能带来的潜在风险。如果您没有在任何地方使用这个二进制文件，漏洞将不会造成任何损害；但是，如果在公司的关键区域中使用，就会产生重大风险。
- en: Assume that we are focusing on scanning Docker images only. We will get the
    information that the Docker image contains vulnerabilities and can mitigate the
    vulnerability in the Docker image. But we are missing information about all other
    places where this infected binary is used as well. We need to know the usage of
    this binary in all different layers and technologies. Just focusing on the usage
    inside Docker images could lead to open security holes in other parts of our environment
    where the binary is used directly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只关注扫描 Docker 镜像。我们将获取 Docker 镜像中包含的漏洞信息，并可以缓解 Docker 镜像中的漏洞。但我们缺少有关此受感染二进制文件在其他所有使用中的信息。我们需要了解此二进制文件在所有不同层和技术中的使用情况。仅关注
    Docker 镜像内部的使用可能会在二进制文件直接用于环境中的其他部分时导致开放的安全漏洞。
- en: In [“The Common Vulnerability Scoring System”](#common-vulnerability-sect),
    we will show you how to use the environmental metric to precisely assess the context
    and use this information to make more-informed risk assessments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [“通用漏洞评分系统”](#common-vulnerability-sect) 中，我们将向您展示如何使用环境指标精确评估上下文，并利用这些信息进行更为详尽的风险评估。
- en: Securing Your DevOps Infrastructure
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的 DevOps 基础设施
- en: Now that you understand the impact of security vulnerabilities, it is time to
    look at countermeasures we can utilize to improve the security of our full software
    development lifecycle. First, let’s shed some light on the procedures and roles
    used in a DevOps environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了安全漏洞的影响，是时候看看我们可以利用的措施来改善完整软件开发生命周期的安全性了。首先，让我们对 DevOps 环境中使用的程序和角色进行一些介绍。
- en: The Rise of DevSecOps
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevSecOps 的兴起
- en: Let’s briefly go over how development and operations merged to become DevOps,
    because it plays a central role in introducing security. DevOps started with the
    basic recognition that the two areas of developers and operations have to work
    closer together in order to improve productivity. The fundamental stages of DevOps
    map directly to the process of building and delivering software to production.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地回顾一下开发和运维如何合并成为 DevOps，因为这在引入安全方面起着核心作用。DevOps 从最基本的认识开始，即开发人员和运维人员必须更紧密地合作以提高生产力。DevOps
    的基本阶段直接映射到构建和交付软件到生产环境的过程中。
- en: Before DevOps, a big split existed in responsibilities, with a release build
    used as the handover point between groups. DevOps changes the roles to be more
    inclusive; developers need to understand the intricacies of doing production deployments,
    and vice versa. This change requires more-advanced automated tooling and repositories,
    as well as shared knowledge and processes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 出现之前，责任分工存在明显的差异，发布构建被用作各组之间的交接点。DevOps 改变了角色分工，使开发人员需要理解如何进行生产部署的复杂性，反之亦然。这种变化需要更先进的自动化工具和仓库，以及共享的知识和流程。
- en: But what about security? Security is not and should never be an explicit step
    in software development. Safety is a crosscutting issue that goes through all
    phases of production through operation. This, in turn, brings the realization
    that no dedicated safety officer can do this work alone. The team as a whole is
    entrusted with the issue of safety, just as they are, for example, with the issue
    of quality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是安全呢？安全不应该也永远不应该成为软件开发中的一个显式步骤。安全是一个贯穿整个生产到运营过程的横切问题。这反过来又带来了这样一个认识，即没有专门的安全官员可以独自完成这项工作。整个团队都要负责安全问题，就像他们对质量问题负责一样。
- en: The outcome of this realization was the creation of the term *DevSecOps*. However,
    some subtleties here cannot be ignored. Not everyone in the production chain can
    do all things equally well. Everyone has their own idiosyncrasies and is more
    efficient in some areas. Accordingly, even in a DevSecOps organization, some team
    members care more about the dev area, and others have their strengths in the ops
    area.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这一认识的结果是创造了 *DevSecOps* 这一术语。然而，这里有些微妙之处不容忽视。在生产链中，并非每个人都能同样出色地完成所有事情。每个人都有自己的特点，在某些领域更有效率。因此，即使在
    DevSecOps 组织中，一些团队成员更关注开发领域，而其他人则在运维领域有自己的优势。
- en: The Role of SREs in Security
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE 在安全中的角色
- en: An exception to the dev and ops specialization is the *site reliability engineer*
    (SRE) role. The term originally comes from Google and describes the people on
    a team who deal with the reliability of services. The metric against which an
    SRE works is called the *failure budget*. It is assumed that the software has
    failures and that this is exactly what leads to downtimes. A service has a specific
    failure budget, or downtime budget. The SRE aims to keep service uptime within
    the defined budget by reducing downtime due to bugs, damage, or cyberattacks.
    To meet these goals, the SRE may choose to invest downtime on upgrades that can
    be used to deploy quality and security improvements to the system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和运维专业化的一个例外是*站点可靠性工程师*（SRE）角色。该术语最初来自Google，用于描述团队中处理服务可靠性的人员。SRE工作的指标称为*故障预算*。假定软件会出现故障，并且这正是导致停机的原因。一个服务有一个特定的故障预算或停机预算。SRE的目标是通过减少由于错误、损坏或网络攻击导致的停机时间来保持服务的正常运行时间在定义的预算范围内。为了实现这些目标，SRE可以选择在升级期间投入停机时间，这可以用来为系统部署质量和安全改进。
- en: 'Therefore, an SRE is a team member whose role is to ensure the balance between
    the robustness of the systems and the introduction of new features. For this purpose,
    the SRE is given up to a maximum of 50% of their working time to focus on the
    operations tasks and responsibilities. This time should be used to automate the
    systems and improve quality and security. The rest of the SRE’s time is spent
    working as a developer and involved in implementing new features. And now we come
    to the exciting question: is an SRE also responsible for security?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，SRE是一个团队成员，其角色是确保系统的稳健性和引入新功能之间的平衡。为此，SRE将最多50%的工作时间用于专注于运维任务和责任。应该利用这段时间自动化系统并提高质量和安全性。其余的SRE时间花在作为开发人员工作并参与实现新功能。现在我们来到一个激动人心的问题：SRE是否也负责安全？
- en: This role of an SRE can be in the middle of a DevSecOps structure since the
    working hours and skills are almost evenly split between the dev and ops areas,
    so both concepts can coexist inside the same organization.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SRE的这种角色可以处于DevSecOps结构的中间，因为工作时间和技能几乎平均分配在开发和运维领域，所以这两个概念可以在同一个组织内共存。
- en: SREs are usually developers with many years of experience who now specialize
    in the ops area, or an administrator with many years of professional experience
    who is now deliberately entering into software development. With this in mind,
    the position of an SRE is a perfect place to merge the dev and ops strategies
    for crosscutting issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SRE（Site Reliability Engineer）通常是具有多年开发经验的开发人员，现在专门从事运维领域，或者是具有多年专业经验的管理员，现在有意进入软件开发领域。考虑到这一点，SRE的位置是融合开发和运维策略以处理交叉问题的理想场所。
- en: Considering the example of SolarWinds again, the question arises of who has
    the most influence within the value chain to take action against vulnerabilities.
    For this purpose, we will look at the two areas dev and ops and the options available
    there.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑SolarWinds的例子，一个问题是在价值链中谁拥有最大的影响力来针对漏洞采取行动。为此，我们将看看开发和运维这两个领域以及其中可用的选项。
- en: Static and Dynamic Security Analysis
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态和动态安全分析
- en: 'Two main types of security analysis exist: static application security testing
    and dynamic application security testing. Let’s examine what these mean and how
    the two approaches differ.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安全分析存在两种主要类型：静态应用程序安全测试和动态应用程序安全测试。让我们看看这两个术语的含义以及这两种方法的区别。
- en: Static Application Security Testing
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态应用程序安全测试
- en: '*Static application security testing* (SAST) analyzes an application at a specific
    point in time. It’s static. The focus is on recognizing and localizing the known
    vulnerabilities.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*静态应用程序安全测试*（SAST）在特定时间点分析应用程序。它是静态的。重点是识别和定位已知的漏洞。'
- en: 'SAST is a so-called clear-testing process in which you look at the system internals
    to do the analysis. For this procedure, you need to have access to the source
    code of the application to be tested. However, an operational runtime environment
    does not have to be available. The application does not have to be executed for
    this procedure, which is why the term *static* is also used. Three types of security
    threats can be identified using SAST:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: SAST是一种所谓的清晰测试过程，在这个过程中，您会查看系统内部来进行分析。为此，您需要访问要测试的应用程序的源代码。但是，不需要可操作的运行时环境。不需要执行应用程序进行此过程，这就是为什么也使用术语*静态*。使用SAST可以识别三种类型的安全威胁：
- en: Does the source code have gaps in the functional area that allow, for example,
    “tainted code” to be smuggled in? These are lines that can later infiltrate malware.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码是否在功能区域存在漏洞，允许例如“被污染的代码”被走私？ 这些行可能会后续渗透恶意软件。
- en: Do any source code lines allow you to connect to files or certain object classes?
    The focus is also on detecting and preventing the introduction of malware.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有源代码行允许您连接到文件或某些对象类？ 重点还在于检测和防止恶意软件的引入。
- en: Do gaps exist on the application level that allow you to interact with other
    programs unnoticed?
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序级别是否存在漏洞，使您可以在不被注意的情况下与其他程序进行交互？
- en: However, it should be noted that the analysis of the source code is itself a
    complex matter. The area of static security analysis also includes the tools that
    enable you to determine and evaluate all contained direct and indirect dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，应注意源代码分析本身是一项复杂的工作。 静态安全分析领域还包括能够确定和评估所有包含的直接和间接依赖关系的工具。
- en: As a rule, various SAST tools should check the source code at regular intervals.
    The SAST source code scanners must also be adapted to your organizational needs
    with an initial implementation to adjust the scanner to your respective domain.
    The Open Web Application Security Project (OWASP) Foundation offers assistance;
    it not only lists typical security vulnerabilities, but also recommends suitable
    SAST tools.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，各种SAST工具应定期检查源代码。 SAST源代码扫描程序还必须根据您的组织需求进行调整，初始实施以调整扫描程序以适应您的各自领域。 开放式Web应用程序安全项目（OWASP）基金会提供帮助；
    它不仅列出了典型的安全漏洞，还推荐了合适的SAST工具。
- en: Advantages of the SAST approach
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SAST方法的优势
- en: 'In comparison with security tests done at later stages in the software delivery
    process, a static security analysis approach offers the following advantages:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与软件交付过程中较晚阶段的安全测试相比，静态安全分析方法提供以下优势：
- en: Because vulnerability detection testing takes place in the development phase,
    removing the weak points can be carried out much more cost-effectively compared
    to detection that takes place only at runtime. By accessing the source code, you
    can also understand how this vulnerability came about and prevent it from recurring
    in the future. These findings cannot be obtained using an opaque-testing process.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为漏洞检测测试是在开发阶段进行的，所以相比仅在运行时进行检测，消除弱点可以更加经济高效地进行。 通过访问源代码，您还可以了解这种漏洞的起因，并防止将来再次发生。
    这些发现无法通过不透明测试过程获得。
- en: Partial analysis can be done, which means that even non-executable source text
    can be analyzed. The static security analysis can be carried out by the developers
    themselves, which significantly reduces the need for security experts.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以进行部分分析，这意味着甚至可以分析非可执行源文本。 开发人员自己可以进行静态安全分析，这显著减少了安全专家的需求。
- en: A 100% analysis of the system at the source code level is also possible, which
    cannot be guaranteed with a dynamic approach. Opaque-testing systems can perform
    only penetration tests, which are an indirect analysis.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码级别进行系统的100%分析也是可能的，这是动态方法无法保证的。 不透明测试系统只能执行渗透测试，这是一种间接分析。
- en: Disadvantages of the SAST approach
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SAST方法的缺点
- en: 'Since you are starting with the source code, SAST seems like it has the potential
    to be the most comprehensive security scanning approach. However, in practice
    it has fundamental problems:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您从源代码开始，因此SAST似乎具有成为最全面的安全扫描方法的潜力。 但是，在实践中存在根本性问题：
- en: The programming work often suffers, which in turn manifests itself in domain-specific
    bugs. The developers focus too much on the security tests and related bug fixes.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程工作经常受到影响，这反过来体现为特定于域的错误。 开发人员过于关注安全测试及相关缺陷修复。
- en: The tools can be problematic. This happens especially if the scanners have not
    been adapted to your entire tech stack. Most systems are polyglot these days.
    To get a complete list of known vulnerabilities, you need a tool that supports
    all direct or indirect technologies.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具可能存在问题。 特别是如果扫描程序未适应整个技术堆栈。 大多数系统如今都是多语言的。 要获得已知漏洞的完整列表，您需要支持所有直接或间接技术的工具。
- en: SAST often replaces the subsequent security tests completely. However, all problems
    that are directly related to an application in operation remain undetected.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAST通常完全取代了后续的安全测试。 但是，所有直接与应用程序运行相关的问题仍然未被检测到。
- en: Focusing on your source code is not enough. The static scan must analyze the
    binaries and additionally the source code if possible.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅关注源代码是不够的。静态扫描必须分析二进制文件，并在可能的情况下额外分析源代码。
- en: In [“How Much Is Enough?”](#how-much-scanning-sect), we will show why you should
    focus on scanning binaries first.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [“How Much Is Enough?”](#how-much-scanning-sect) 中，我们将展示为什么应首先关注扫描二进制文件。
- en: Dynamic Application Security Testing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态应用安全测试
- en: '*Dynamic application security testing* (DAST) is security analysis of a running
    application (usually a running web application). A wide variety of attack scenarios
    are performed in order to identify as many of the weak points as possible in the
    application. The term *dynamic* indicates that a running application must be available
    to carry out the tests. It is critical that the test system behaves the same as
    the production environment. Even minor variations can represent serious differences,
    including different configurations or upstream load balancers and firewalls.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*动态应用安全测试*（DAST）是对运行中应用程序（通常是运行中的 Web 应用程序）进行的安全分析。执行各种攻击场景以尽可能识别应用程序中的弱点。术语
    *动态* 表示必须提供运行中的应用程序来执行测试。测试系统行为必须与生产环境相同至关重要。即使是轻微的变化也可能导致严重差异，包括不同的配置或上游负载均衡器和防火墙。'
- en: DAST is an opaque-testing process in which the application is viewed only from
    the outside. The technologies used do not play a role in the type of security
    check, as the application is accessed only generically and externally. This means
    that all information that could be obtained from the source code is invisible
    for this type of test. It is, therefore, possible for the person testing to test
    for the typical problems with a generic set of tools. The benchmark OWASP project
    offers reasonable assistance for selecting a scanner for your own project. This
    evaluates the performance of the individual tools in relation to the specific
    application background.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 是一种不透明的测试过程，只从外部查看应用程序。所使用的技术在安全检查类型中不起作用，因为只是通用地和外部地访问应用程序。这意味着从源代码可以获得的所有信息对这种类型的测试来说是不可见的。因此，测试人员可以使用通用工具测试典型问题。OWASP
    项目提供了合理的帮助，以选择适合自己项目的扫描器。这评估了各个工具在特定应用背景下的性能。
- en: Advantages of DAST
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DAST 的优点
- en: 'The DAST process has the following advantages:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 过程具有以下优点：
- en: Security analysis works in a technology-neutral manner.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全分析以技术中立的方式进行。
- en: The scanners find errors in the runtime environment in which the test is carried
    out.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描器在运行环境中找到了错误。
- en: The rate of false positives is low.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 误报率低。
- en: The tools find faulty configurations in basically functional applications. For
    example, you can identify performance problems that other scanners cannot.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具可以在基本功能应用程序中找到错误的配置。例如，您可以识别其他扫描器无法识别的性能问题。
- en: The DAST programs can be used in all phases of development and in a later operation.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAST 程序可以在开发的所有阶段以及后续运行中使用。
- en: DAST scanners are based on the same concepts that real attackers use for their
    malware. They, therefore, provide reliable feedback on weaknesses. Tests have
    consistently shown that the majority of DAST tools can identify [the top 10 most
    common threats](https://oreil.ly/3MmBn) listed by the OWASP Foundation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 扫描器基于实际攻击者用于其恶意软件的相同概念。因此，它们能够可靠地反馈出弱点。测试一直显示，大多数 DAST 工具可以识别 OWASP 基金会列出的
    [十大常见威胁](https://oreil.ly/3MmBn)。
- en: Disadvantages of DAST
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DAST 的缺点
- en: 'Using DAST tools has several disadvantages:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DAST 工具存在一些缺点：
- en: The scanners are programmed to carry out specific attacks on functional web
    apps and can usually be adapted only by security experts with the necessary product
    knowledge. They, therefore, offer little space for individual scaling.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描器被设计为对功能性 Web 应用程序进行特定攻击，并且通常只能由具备必要产品知识的安全专家进行调整。因此，它们对个体化扩展提供的空间有限。
- en: DAST tools are slow; they can take several days to complete their analysis.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAST 工具速度慢，可能需要几天来完成分析。
- en: DAST tools find some security gaps very late in the development cycle that could
    have been discovered earlier via SAST. The costs of fixing the related problems
    are therefore higher than they should be.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAST 工具在开发周期的后期发现了一些安全漏洞，这些漏洞本可以通过 SAST 早期发现。因此，修复相关问题的成本比预期的要高。
- en: DAST scans are based on known bugs. Scanning for new types of attacks takes
    a relatively long time. Therefore, modifying the existing tool is often not possible.
    If it is doable, it requires in-depth knowledge about the attack vector itself
    and how to implement it inside the DAST tool.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DAST 扫描基于已知漏洞。扫描新类型攻击需要相对较长的时间。因此，通常无法修改现有工具。如果可以修改，需要深入了解攻击向量本身以及如何在 DAST 工具内部实现它。
- en: Comparing SAST and DAST
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 SAST 和 DAST
- en: '[Table 7-1](#sast_vs_dast) summarizes the differences between the SAST and
    DAST testing approaches.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 7-1](#sast_vs_dast) 总结了静态应用安全测试（SAST）和动态应用安全测试（DAST）之间的差异。'
- en: Table 7-1\. SAST versus DAST
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 7-1\. SAST 对比 DAST
- en: '| SAST | DAST |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| SAST | DAST |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Clear security testing• The tester has access to the underlying framework,
    design, and implementation.• The application is tested from the inside out.• This
    type of testing represents the developer approach. | Opaque security testing•
    The tester has no knowledge of the technologies or framework that the application
    is built on.• The application is tested from the outside in.• This type of testing
    represents the hacker approach. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 透明的安全测试• 测试人员可以访问底层框架、设计和实现。• 应用从内到外进行测试。• 这种测试代表了开发者的方法。 | 不透明的安全测试• 测试人员对应用程序构建的技术和框架一无所知。•
    应用从外到内进行测试。• 这种测试代表了黑客的方法。 |'
- en: '| Requires source code• SAST doesn’t require a deployed application.• It analyzes
    the source code or binary without executing the application. | Requires a running
    application• DAST doesn’t require source code or binaries.• It analyzes by executing
    the application. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 需要源代码• SAST 不需要已部署的应用程序。• 它分析源代码或二进制文件而不执行应用程序。 | 需要运行的应用程序• DAST 不需要源代码或二进制文件。•
    它通过执行应用程序进行分析。 |'
- en: '| Find vulnerabilities earlier in the SDLC• The scan can be executed as soon
    as code is deemed feature complete. | Finds vulnerabilities toward the end of
    the SDLC• Vulnerabilities can be discovered after the development cycle is complete.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 在SDLC早期发现漏洞• 一旦代码被视为功能完成，即可执行扫描。 | 在SDLC末尾发现漏洞• 漏洞可能在开发周期结束后被发现。 |'
- en: '| Less expensive to fix vulnerabilities• Since vulnerabilities are found earlier
    in the SDLC, remediating them is easier and faster.• Finding can often be fixed
    before the code enters the QA cycle. | More expensive to fix vulnerabilities•
    Since vulnerabilities are found toward the end of the SDLC, remediation often
    gets pushed into the next development cycle.• Critical vulnerabilities may be
    fixed as an emergency release. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 更少昂贵的漏洞修复• 由于漏洞在软件开发生命周期（SDLC）的早期被发现，修复起来更加容易和快速。• 发现的漏洞通常可以在代码进入QA周期之前修复。
    | 更昂贵的漏洞修复• 由于漏洞在SDLC末尾被发现，修复往往推迟到下一个开发周期。• 关键漏洞可能需要紧急发布来修复。 |'
- en: '| Can’t discover runtime and environmental issues• Since the tool scans static
    code, it cannot discover runtime vulnerabilities. | Can discover runtime and environmental
    issues• Since the tool uses dynamic analysis on a running application, it is able
    to find runtime vulnerabilities. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 无法发现运行时和环境问题• 由于工具扫描静态代码，无法发现运行时漏洞。 | 能够发现运行时和环境问题• 由于工具对运行中的应用进行动态分析，能够发现运行时漏洞。
    |'
- en: '| Typically supports all kinds of software• Examples include web applications,
    web services, and thick clients. | Typically scans only web apps and web services•
    DAST is not useful for other types of software. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 通常支持各种软件• 例如，Web 应用程序、Web 服务和厚客户端。 | 通常只扫描 Web 应用程序和 Web 服务• DAST 对其他类型的软件无用。
    |'
- en: If you look at the advantages and disadvantages of these two types of security
    testing, you can see that they are not mutually exclusive. On the contrary, these
    approaches complement each other perfectly. SAST can be used to identify known
    vulnerabilities. DAST can be used to identify vulnerabilities that are not yet
    known. This is primarily the case if the new attack is based on the pattern of
    common vulnerabilities. You also gain knowledge about the overall system if you
    carry out these tests on the production system. However, as soon as you run DAST
    on test systems, you lose these last-mentioned capabilities again.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你比较这两种安全测试的优缺点，你会发现它们并不是互斥的。相反，这些方法能够完美地互补。SAST 可用于识别已知漏洞。DAST 则可用于发现尚未知晓的漏洞。这主要是在新攻击基于常见漏洞模式时的情况。如果在生产系统上进行这些测试，你还能获取有关整体系统的知识。但是，一旦在测试系统上运行
    DAST，你将再次失去这些功能。
- en: Interactive Application Security Testing
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式应用安全测试
- en: '*Interactive application security testing* (IAST) uses software tools to evaluate
    application performance and identify vulnerabilities. IAST takes an “agent-like”
    approach; agents and sensors run to continuously analyze application functions
    during automated tests, manual tests, or a mixture of both.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*交互式应用安全测试*（IAST）使用软件工具评估应用程序性能并识别漏洞。IAST采用一种“代理式”方法；代理和传感器运行以持续分析应用程序功能，在自动化测试、手动测试或两者混合测试期间。'
- en: 'The process and feedback occur in real-time in the IDE, CI or QA environment,
    or during production. The sensors have access to the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在集成开发环境（IDE）、持续集成（CI）或质量保证（QA）环境中，或者在生产过程中，过程和反馈是实时发生的。传感器可以访问以下内容：
- en: All source code
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有源代码
- en: Data and control flow
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据和控制流
- en: System configuration data
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统配置数据
- en: Web components
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web组件
- en: Backend connection data
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端连接数据
- en: The main difference between IAST, SAST, and DAST is that IAST runs inside the
    application. Access to all static components as well as the runtime information
    enables a comprehensive picture. It is a combination of static and dynamic analysis.
    However, the part of the dynamic analysis is not a pure opaque test, as it is
    implemented at DAST.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: IAST、SAST和DAST之间的主要区别在于IAST在应用程序内部运行。访问所有静态组件以及运行时信息使得可以获得全面的图像。它是静态和动态分析的结合体。但是，动态分析部分并不是纯粹的不透明测试，因为它是在DAST实施的。
- en: IAST helps identify potential problems earlier, so IAST minimizes the cost of
    eliminating potential costs and delays. This is due to a *shift left* approach,
    meaning it is carried out in the early stages of the project lifecycle. Similar
    to SAST, the IAST analysis provides complete lines of data-rich code so that security
    teams can immediately look out for a specific bug. With the wealth of information
    that the tool has access to, the source of vulnerabilities can be precisely identified.
    Unlike other dynamic software tests, IAST can be easily integrated into CI/CD
    pipelines. The evaluations take place in real time in the production environment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: IAST有助于更早地识别潜在问题，因此减少了消除潜在成本和延迟的成本。这归功于“向左转移”的方法，意味着它在项目生命周期的早期阶段执行。类似于SAST，IAST分析提供了完整的数据丰富的代码行，以便安全团队可以立即查找特定的错误。由于工具可以访问丰富的信息，因此可以精确定位漏洞的来源。与其他动态软件测试不同，IAST可以轻松集成到CI/CD流水线中。评估是在生产环境中实时进行的。
- en: On the other hand, IAST tools can slow the operation of the application. This
    is because the agents change the bytecode themselves. This leads to a lower performance
    of the overall system. The change itself can also lead to problems in the production
    environment. The use of agents represents a potential source of danger since these
    agents can also be compromised as happened in the SolarWinds hack.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，IAST工具可能会减慢应用程序的操作。这是因为代理会修改字节码本身。这导致整个系统性能下降。修改本身也可能导致生产环境中的问题。使用代理代表了潜在的危险源，因为这些代理也可能会像SolarWinds黑客事件中那样受到威胁。
- en: Runtime Application Self-Protection
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时应用自我保护（Runtime Application Self-Protection，RASP）
- en: '*Runtime application self-protection* (RASP) is the approach to secure the
    application from within. The check takes place at runtime and generally consists
    of looking for suspicious commands when they are executed.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行时应用自我保护*（RASP）是从内部保护应用程序的方法。检查是在运行时进行的，通常包括在执行时查找可疑命令。'
- en: With the RASP approach, you can examine the entire application context on the
    production machine in real time. Here all commands that are processed are examined
    for possible attack patterns. Therefore, this procedure aims to identify existing
    security gaps and attack patterns and those that are not yet known. Here it goes
    clearly into the use of AI and machine learning (ML) techniques.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RASP方法，您可以实时检查生产环境中的整个应用程序上下文。这里会检查所有处理的命令，以寻找可能的攻击模式。因此，该过程旨在识别现有的安全漏洞和攻击模式，以及尚未知晓的攻击模式。在这里，明显涉及到AI和机器学习（ML）技术的使用。
- en: RASP tools can usually be used in two operating modes. The first operating mode
    (monitoring) is limited to observing and reporting possible attacks. The second
    operating mode (protection) then includes implementing defensive measures in real
    time and directly on the production environment. RASP aims to fill the gap left
    by application security testing and network perimeter controls. SAST and DAST
    do not have sufficient visibility into real-time data and event flows to prevent
    vulnerabilities from sliding through the verification process or to block new
    threats that were overlooked during development.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: RASP工具通常可以在两种操作模式下使用。第一种操作模式（监控）仅限于观察和报告可能的攻击。第二种操作模式（保护）则包括在实时和直接在生产环境中实施防御措施。RASP旨在弥补应用程序安全测试和网络边界控制留下的空白。SAST和DAST对于实时数据和事件流的可见性不足，无法阻止漏洞在验证过程中被忽视或阻止被忽略的新威胁。
- en: RASP is similar to IAST. The main difference is that IAST focuses on identifying
    vulnerabilities in the applications, and RASP focuses on protecting against cybersecurity
    attacks that can exploit these vulnerabilities or other attack vectors.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: RASP类似于IAST。主要区别在于，IAST专注于识别应用程序中的漏洞，而RASP专注于保护免受利用这些漏洞或其他攻击向量的网络安全攻击。
- en: 'The RASP technology has the following advantages:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: RASP技术具有以下优势：
- en: RASP complements SAST and DAST with an additional layer of protection after
    the application is started (usually in production).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RASP在应用程序启动后（通常在生产中）提供了SAST和DAST之外的额外保护层。
- en: RASP can be easily applied with faster development cycles.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RASP可以在更快的开发周期中轻松应用。
- en: Unexpected entries are checked and identified in RASP.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RASP检查并识别意外的条目。
- en: RASP enables you to react quickly to an attack by providing comprehensive analysis
    and information about the possible vulnerabilities.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RASP使您能够通过提供全面的分析和可能漏洞的信息，快速应对攻击。
- en: However, since RASP tools sit on the application server, they can adversely
    affect application performance. In addition, the RASP technology may not be compliant
    with regulations or internal guidelines, because it allows the installation of
    other software or the automatic blocking of services. The use of this technology
    can also give a false sense of security and is not a substitute for application
    security testing, because it cannot provide comprehensive protection. Finally,
    the application must also be switched offline until the vulnerability is eliminated.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于RASP工具位于应用服务器上，它们可能会对应用程序的性能产生不利影响。此外，RASP技术可能不符合法规或内部指导方针，因为它允许安装其他软件或自动阻止服务。使用这种技术还可能产生一种虚假的安全感，并且不能替代应用程序安全测试，因为它无法提供全面的保护。最后，应用程序在排除漏洞之前也必须切换至脱机状态。
- en: While RASP and IAST have similar methods and uses, RASP does not perform extensive
    scans but instead runs as part of the application to examine traffic and activity.
    Both report attacks as soon as they occur; with IAST, this happens at the time
    of the test, whereas with RASP, it takes place at runtime in production.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然RASP和IAST具有相似的方法和用途，但RASP并不执行广泛的扫描，而是作为应用程序的一部分运行，以检查流量和活动。两者在攻击发生时立即报告；IAST在测试时进行，而RASP则在生产环境的运行时进行。
- en: SAST, DAST, IAST, and RASP Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SAST、DAST、IAST和RASP总结
- en: All approaches result in a wide range of options for arming yourself against
    known and unknown security gaps. Reconciling your own needs and those of the company
    is essential when choosing your approach.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有方法都提供了多种选择，以防范已知和未知的安全漏洞。在选择方法时，调和个人需求和公司需求至关重要。
- en: With RASP, the application can protect itself against attacks at runtime. The
    permanent monitoring of your activities and the data transferred to the application
    enable an analysis based on the runtime environment. Here you can choose between
    pure monitoring or alerting, and active self-protection. However, software components
    are added to the runtime environment with RASP approaches to manipulate the system
    independently. This has an impact on performance. With this approach, RASP concentrates
    on the detection and defense of current cyberattacks. So it analyzes the data
    and user behavior in order to identify suspicious activities.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RASP，应用程序可以在运行时保护自身免受攻击。对活动和传输到应用程序的数据的永久监控使得可以基于运行时环境进行分析。在这里，您可以选择纯监控或警报以及主动自我保护。然而，RASP
    方法将软件组件添加到运行时环境中以独立操纵系统。这会对性能产生影响。采用这种方法，RASP 专注于检测和防御当前的网络攻击。因此，它分析数据和用户行为以识别可疑活动。
- en: The IAST approach combines the SAST and DAST approaches and is already used
    within the SDLC—that is, within the development itself. This means that the IAST
    tools are already further “to the left” compared to the RASP tools. Another difference
    to the RASP tools is that IAST consists of static, dynamic, and manual tests.
    Here it also becomes clear that IAST is more in the development phase. The combination
    of dynamic, static, and manual tests promises a comprehensive security solution.
    However, we should not underestimate the complexity of the manual and dynamic
    security tests at this point.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: IAST 方法结合了 SAST 和 DAST 方法，并已在 SDLC 中使用——即在开发过程中使用。这意味着与 RASP 工具相比，IAST 工具已经更进一步“向左”。与
    RASP 工具的另一个不同之处在于，IAST 包括静态、动态和手动测试。在这里也清楚地表明，IAST 更多地处于开发阶段。动态、静态和手动测试的结合承诺提供全面的安全解决方案。然而，我们不应低估手动和动态安全测试在这一点上的复杂性。
- en: The DAST approach focuses on how a hacker would approach the system. The overall
    system is viewed as opaque, and the attacks occur without knowing the technologies
    used. The point here is to harden the production system against the most common
    vulnerabilities. However, we must not forget at this point that this technology
    can be used only at the end of the production cycle.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 方法侧重于黑客如何接近系统。整个系统被视为不透明，攻击在不知道所使用的技术的情况下进行。关键在于加固生产系统，以抵御最常见的漏洞。然而，我们在这一点上不能忽视的是，这种技术只能在生产周期的最后阶段使用。
- en: If you have access to all system components, the SAST approach can be used effectively
    against known security gaps and license problems. This procedure is the only guarantee
    that the entire tech stack can be subjected to direct control. The focus of the
    SAST approach is on static semantics and, in turn, is completely blind to security
    holes in the dynamic context. A huge advantage is that this approach can be used
    with the first line of source code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以访问所有系统组件，则可以有效地使用 SAST 方法来对抗已知的安全漏洞和许可问题。这种程序是可以直接控制整个技术栈的唯一保证。SAST 方法的重点是静态语义，反过来完全盲目于动态上下文中的安全漏洞。其巨大优势在于，该方法可以与源代码的第一行一起使用。
- en: In my experience, if you start with DevSecOps or security in IT in general,
    the SAST approach makes the most sense. This is where the greatest potential threat
    can be eliminated with minimal effort. It is also a process that can be used in
    all steps of the production line. Only when all components in the system are secured
    against known security gaps do the following methods show their highest potential.
    After introducing SAST, I would use the IAST approach and, finally, the RASP approach.
    This also ensures that the respective teams can grow with the task and that no
    obstacles or delays occur in production.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 依据我的经验，如果您开始进行 DevSecOps 或 IT 安全工作，SAST 方法是最有意义的。在这里，可以用最小的努力消除最大的潜在威胁。这也是一个可以在生产线的所有步骤中使用的过程。只有在系统的所有组件都受到已知安全漏洞的保护之后，接下来的方法才显示出其最高潜力。引入
    SAST 后，我会使用 IAST 方法，最后使用 RASP 方法。这也确保了相应的团队可以与任务一同成长，生产中不会出现障碍或延迟。
- en: The Common Vulnerability Scoring System
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共漏洞评分系统
- en: The basic idea behind the *Common Vulnerability Scoring System* (CVSS) is to
    provide a general classification of the severity of a security vulnerability.
    The weak points found are evaluated from various points of view. These elements
    are weighed against each other to obtain a standardized number from 0 to 10.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*通用漏洞评分系统*（CVSS）背后的基本思想是提供对安全漏洞严重性的通用分类。评估发现的弱点从各种角度进行评估。这些元素相互权衡，以获得从0到10的标准化数字。'
- en: A rating system, like CVSS, allows us to evaluate various weak points abstractly
    and derive follow-up actions from them. The focus is on standardizing the handling
    of these weak points. As a result, you can define actions based on the value ranges.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 评分系统（如CVSS）允许我们抽象评估各种弱点，并从中推导后续操作。重点是标准化处理这些弱点。因此，您可以根据数值范围定义操作。
- en: In principle, CVSS can be described so that the probability and the maximum
    possible damage are related using predefined factors. The basic formula for this
    is risk = probability of occurrence × damage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从原则上讲，CVSS可以描述为使用预定义的因素关联概率和最大可能损害。其基本公式为风险 = 发生概率 × 损害。
- en: These CVSS metrics are divided into three orthogonal areas that are weighted
    differently from one another, called Basic Metrics, Temporal Metrics, and Environmental
    Metrics. Different aspects are queried in each area, which must be assigned a
    single value. The weighting and the subsequent composition of the three group
    values gives the final result. The next section explores these metrics in detail.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些CVSS指标分为三个正交区域，它们的权重不同，称为基本指标、时态指标和环境指标。在每个区域中查询不同的方面，必须分配一个单一值。三个组值的权重和随后的组合形成最终结果。下一节详细探讨了这些指标。
- en: CVSS Basic Metrics
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CVSS基本指标
- en: The *basic metrics* form the foundation of the CVSS rating system. The aim of
    querying aspects in this area is to record technical details of the vulnerability
    that will not change over time, so the assessment is independent of other changing
    elements. Different parties can carry out the calculation of the base value. It
    can be done by the discoverer, the manufacturer of the project or product concerned,
    or by a computer emergency response team (CERT) charged with eliminating this
    weak point. We can imagine that, based on this initial decision, the value itself
    will turn out different since the individual groups pursue different goals.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*基本指标* 构成了CVSS评分系统的基础。在这一领域查询方面的目的是记录漏洞的技术细节，这些细节不会随时间改变，因此评估独立于其他变化的元素。不同的方面可以进行基值的计算。可以由发现者、涉及项目或产品的制造商，或者负责消除这一弱点的计算机应急响应团队（CERT）来执行。我们可以想象，基于这一初步决定，值本身将因各个个体团体追求不同的目标而有所不同。'
- en: The base value evaluates the prerequisites necessary for a successful attack
    via this security gap. This is the distinction between whether a user account
    must be available on the target system or whether the system can be compromised
    without the knowledge about a system user. These prerequisites play a significant
    role in whether a system is vulnerable over the internet or whether physical access
    to the affected component is required.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基础值评估通过此安全漏洞进行成功攻击所需的先决条件。这是区分目标系统上是否必须有用户帐户，还是可以在不了解系统用户的情况下妥协系统。这些先决条件在确定系统是否通过互联网易受攻击或是否需要对受影响组件进行物理访问方面起着重要作用。
- en: The base value should also reflect how complex the attack is to carry out. In
    this case, the complexity relates to the necessary technical steps and includes
    assessing whether the interaction with a regular user is essential. Is it sufficient
    to encourage any user to interact, or does this user have to belong to a specific
    system group (e.g., administrator)? The correct classification is not a trivial
    process; the assessment of a new vulnerability requires exact knowledge of this
    vulnerability and the systems concerned.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击的基础值还应反映出进行攻击的复杂性。在这种情况下，复杂性涉及到必要的技术步骤，并包括评估是否与常规用户的互动至关重要。是否足以鼓励任何用户进行互动，还是这个用户必须属于特定的系统组（例如管理员）？正确的分类并不是一个琐碎的过程；评估新的漏洞需要对漏洞和相关系统的确切知识。
- en: 'The basic metrics also take into account the damage that this attack could
    cause to the affected component. The three areas of concern are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 基本指标还考虑了此攻击可能对受影响组件造成的损害。关注的三个领域如下：
- en: Confidentiality
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 机密性
- en: Possibility of extracting the data from the system
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统中提取数据的可能性
- en: Integrity
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性
- en: Possibility of manipulating the system
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 操纵系统的可能性
- en: Availability
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性
- en: Completely preventing the system’s use
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完全阻止系统使用
- en: However, you have to be careful concerning the weighting of these areas of concern.
    In one case, having stolen data can be worse than changed data. In another case,
    the unusability of a component can be the worst damage to be assumed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您必须注意关注这些关注领域的权重。在一个案例中，窃取数据可能比更改数据更糟糕。在另一种情况下，组件的不可用可能是被假设的最严重的损害。
- en: The *scope metric* has also been available since CVSS version 3.0\. This metric
    looks at the effects of an affected component on other system components. For
    example, a compromised element in a virtualized environment enables access to
    the carrier system. A successful change of this scope represents a greater risk
    for the overall system and is therefore also evaluated using this factor. This
    demonstrates that the interpretation of the values also requires adjusting to
    one’s situation, which brings us to the temporal and environment metrics.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*范围指标* 自 CVSS 3.0 版本以来也可用。此指标考虑受影响组件对其他系统组件的影响。例如，在虚拟化环境中的受损元素允许访问载体系统。成功更改此范围表示对整个系统的更大风险，因此也使用此因素进行评估。这表明，值的解释也需要根据自己的情况进行调整，这将带我们到临时和环境指标。'
- en: CVSS Temporal Metrics
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CVSS 临时指标
- en: The time-dependent components of the vulnerability assessment are brought together
    in the *temporal metrics* group.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞评估的时间依赖组件汇总在*临时指标*组中。
- en: The elements that change over time influence these temporal metrics. For example,
    the availability of tools that support the exploitation of the vulnerability may
    change. These can be exploits code or step-by-step instructions. A distinction
    must be made on whether a vulnerability is theoretical or whether a manufacturer
    has officially confirmed it. All of these events change the base value.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 随时间变化的元素影响这些临时指标。例如，支持利用漏洞的工具的可用性可能会改变。这些可以是漏洞利用代码或逐步说明书。必须区分漏洞是理论上的还是制造商已正式确认的。所有这些事件都会改变基础值。
- en: Temporal metrics are unique in that the base value can be only reduced and not
    increased. The initial rating is intended to represent the worst-case scenario.
    This has both advantages and disadvantages if you bear in mind that it is during
    the initial assessment of a vulnerability that interests are competing.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 临时指标独特之处在于基础值只能减少，而不能增加。初始评级旨在代表最坏情况。这在你考虑到漏洞的初始评估时既有优势也有劣势，因为各方的利益在竞争。
- en: The influence on the initial evaluation comes about through external framework
    conditions. These take place over an undefined time frame and are not relevant
    for the actual basic assessment. Even if an exploit is already in circulation
    during the base values survey, this knowledge will not be included in the primary
    assessment. However, the base value can only be reduced by the temporal metrics.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对初始评估的影响是通过外部框架条件引起的。这些条件在未定义的时间框架内发生，并且与实际基础评估无关。即使在基础值调查期间已经存在漏洞利用，这种知识也不会包含在初步评估中。但是，基础值只能通过临时指标减少。
- en: And this is where a conflict arises. The person or group who has found a security
    gap tries to set the base value as high as possible. A high-severity loophole
    will sell for a higher price and receive more media attention. The reputation
    of the person/group who found this gap increases as a result. The affected company
    or the affected project is interested in exactly the opposite assessment. Therefore,
    it depends on who finds the security gap, how the review process should take place,
    and by which body the first evaluation is carried out. This value is further adjusted
    by the environmental metrics.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是冲突产生的地方。发现安全漏洞的个人或团体试图尽可能地提高基础值。高严重性的漏洞会以更高的价格出售并获得更多的媒体关注。发现此漏洞的个人或团体的声誉因此增加。受影响的公司或受影响的项目对确切相反的评估感兴趣。因此，这取决于谁发现了安全漏洞，评审过程应如何进行，以及由哪个机构进行首次评估。此值还通过环境指标进一步调整。
- en: CVSS Environmental Metrics
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CVSS 环境指标
- en: For *environmental metrics*, your own system landscape is used to evaluate the
    risk of the security gap. The evaluation is adjusted based on the real situation.
    In contrast to temporal metrics, environmental metrics can correct the base value
    in both directions. The environment can therefore lead to a higher classification
    and must also be constantly adapted to your own environment changes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*环境度量*，您自己的系统景观被用于评估安全漏洞的风险。根据实际情况调整评估。与时间度量相比，环境度量可以在两个方向上修正基本值。因此，环境可能导致更高的分类，并且也必须不断适应您自己环境的变化。
- en: Let’s take an example of a security hole that has an available patch from the
    manufacturer. The mere presence of this modification leads to a reduction of the
    total value in the temporal metrics. However, as long as the patch has not been
    activated in your own systems, the overall value must be drastically corrected
    upward again via the environmental metrics. This is because as soon as a patch
    is available, it can be used to better understand the security gap and its effects.
    The attacker has more detailed information that can be exploited, which reduces
    the resistance of the not-yet-hardened systems.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个安全漏洞的例子为例，该漏洞已经有了制造商提供的补丁。这种修改的存在仅仅导致时间度量中的总值降低。然而，只要这个补丁还没有在您自己的系统中激活，总体价值就必须通过环境度量被大幅上调。这是因为一旦有了补丁，就可以更好地理解安全漏洞及其影响。攻击者有更详细的信息可供利用，这降低了尚未硬化的系统的抵抗力。
- en: At the end of an evaluation, the final score is obtained, calculated from the
    three previously mentioned values. The resulting value is then assigned to a value
    group. But one more point is often overlooked. In many cases, the final score
    is simply carried over without individual adjustments utilizing the environmental
    score. This behavior leads to a dangerous evaluation that is incorrect for the
    overall system concerned.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估结束时，得到最终分数，该分数是从前面提到的三个值计算出来的。然后将结果值分配给一个值组。但往往会忽视一个方面。在许多情况下，最终得分仅仅是通过环境得分进行简单转移，而没有利用环境分数进行个别调整。这种行为导致了对相关整个系统的不正确评估。
- en: CVSS in Practice
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践中的 CVSS
- en: With CVSS, we have a system for evaluating and rating security gaps in software.
    Since there are no alternatives, CVSS has become a de facto standard; the system
    has been in use worldwide for over 10 years and is constantly being developed.
    The evaluation consists of three components.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 CVSS，我们有了一个用于评估和评定软件安全漏洞的系统。由于没有替代方案，CVSS 已成为事实上的标准；该系统已在全球使用了超过 10 年，并不断发展。评估由三个组成部分组成。
- en: First, the basic score depicts a purely technical worst-case scenario. The second
    component is the evaluation of the time-dependent corrections based on external
    influences—including further findings, tools, or patches for this security gap—which
    can be used to reduce the value. The third component of the assessment is your
    own system environment with regard to this vulnerability. With this consideration,
    the security gap is adjusted in relation to the real situation on site. Last but
    not least, an overall evaluation is made from these three values, which results
    in a number from 0.0 to 10.0.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，基本分数描述了纯粹的技术最坏情况。第二个组成部分是基于外部影响的时间依赖性修正的评估，包括对于这个安全漏洞的进一步发现、工具或补丁，可以用来降低值。评估的第三个组成部分是您自己的系统环境与这种漏洞有关。考虑到这一点，安全漏洞将根据现场实际情况进行调整。最后，从这三个值中得出一个总体评估，结果是一个从
    0.0 到 10.0 的数字。
- en: This final value can be used to control your own organizational response to
    defend against the security gap. At first glance, everything feels quite abstract,
    so it takes some practice to get a feel for the application of CVSS, which can
    be developed through experience with your own systems.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最终值可以用来控制您自己组织对抗安全漏洞的响应。乍一看，一切都感觉非常抽象，因此需要一些练习来感受 CVSS 的应用，这可以通过与您自己的系统的经验来发展。
- en: Scoping Security Analysis
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全分析范围
- en: 'As soon as we deal with security, the following questions always come up: how
    much effort is enough, where should you start, and how quickly can you get the
    first results? In this section, we deal with how to take these first steps. For
    this, we look at two concepts and consider the associated effects.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一谈到安全，总是会出现以下问题：付出多少努力才够，应该从哪里开始，以及第一次获得结果需要多快？在本节中，我们将讨论如何迈出这些第一步。为此，我们将研究两个概念并考虑相关的影响。
- en: Time to Market
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上市时间
- en: You have probably heard of the term *time to market*, but how does this relate
    to security? In general terms, this expression means that the desired functionality
    is transferred as quickly as possible from conception through development into
    the production environment. This allows the customer to start benefiting from
    the new functionality, which increases business value.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经听说过“上市时间”的术语，但这与安全有何关系？一般来说，这个表达意味着希望的功能尽快从构思、开发到生产环境中转移。这使得客户可以开始从新功能中受益，从而增加业务价值。
- en: At first glance, time to market seems focused on business use cases only, but
    it is equally relevant when applied to security remediation. Activating the required
    modifications to the overall system as quickly as possible is also optimal. In
    short, the term *time to market* is a common and worthwhile goal for security
    implementation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，上市时间似乎只关注业务用例，但当应用于安全修复时同样相关。尽快激活对整个系统所需的修改也是最优的。简而言之，“上市时间”是安全实施的一个常见且值得追求的目标。
- en: The process for business use cases should be the same as remediating security
    vulnerabilities. They both require as much automation as possible, and all human
    interaction must be as short as possible. All interactions that waste time increase
    the potential that the vulnerability will be used against the production system.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 业务用例的过程应与修复安全漏洞的过程相同。它们都需要尽可能多的自动化，并且所有人类互动必须尽可能短暂。所有浪费时间的互动增加了漏洞可能被用于生产系统的风险。
- en: Make or Buy
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制造或购买
- en: Across all layers of a cloud native stack, the majority of the software and
    technology is bought or acquired rather than made. We will go through the layers
    in [Figure 7-1](#make_or_buy) and talk about the software composition at each.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在云原生堆栈的所有层次中，大多数软件和技术都是购买或获取而非制造的。我们将在图7-1中讨论的各层中讨论每个软件组成部分。
- en: '![Architecture diagram of a DevSecOps implementation](Images/dtjd_0701.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![DevSecOps实现架构图](Images/dtjd_0701.png)'
- en: Figure 7-1\. DevSecOps components that you can decide to build or purchase
  id: totrans-163
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7-1\. 您可以选择构建或购买的DevSecOps组件
- en: The first layer is the development of the application itself. Assuming that
    we are working with Java and using Maven as a dependency manager, we are most
    likely adding more lines of code indirectly as dependencies compared to the number
    of lines we are writing ourselves. The dependencies are the more prominent part,
    and third parties develop them. We have to be careful, and it is good advice to
    check these external binaries for known vulnerabilities. We should have the same
    behavior regarding compliance and license usage.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第一层是应用程序的开发本身。假设我们使用Java并使用Maven作为依赖管理器，与我们自己编写的代码相比，我们很可能间接添加更多的代码行作为依赖项。依赖项是更突出的部分，由第三方开发。我们必须小心，检查这些外部二进制文件是否存在已知的漏洞是个好建议。在合规性和许可使用方面，我们应该保持相同的行为。
- en: The next layer is the operating system, which is typically Linux. And again,
    we are adding configuration files, and the rest are existing binaries. The result
    is an application running inside the operating system that is a composition of
    external binaries based on our configuration.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 下一层是操作系统，通常是Linux。再次添加配置文件，其余部分是现有的二进制文件。结果是在操作系统内运行的应用程序，这是基于我们配置的外部二进制文件的组合。
- en: The two following layers, Docker and Kubernetes, lead us to the same result.
    Until now, we are not looking at the tool stack for the production line itself.
    All programs and utilities that are directly or indirectly used under the hood
    for DevSecOps create dependencies. All layers’ dependencies are the most significant
    part by far. Checking these binaries against known vulnerabilities is the first
    logical step.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Docker和Kubernetes两个层次带我们达到同样的结果。到目前为止，我们还没有看生产线工具栈本身。所有直接或间接在DevSecOps下使用的程序和实用工具都会创建依赖关系。所有层次的依赖关系是远远最重要的部分。检查这些二进制文件是否存在已知的漏洞是第一个逻辑步骤。
- en: One-Time and Recurring Efforts
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性和定期工作
- en: Comparing the effort of scanning against known vulnerabilities and for compliance
    issues, we see a few differences. Let’s start with the compliance issues.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 比较针对已知漏洞和合规问题的扫描工作，我们可以看到一些差异。让我们从合规问题开始。
- en: Compliance issues
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合规问题
- en: The first step in scoping compliance is defining which licenses are allowed
    at which part of the production line. This definition of allowed licenses includes
    the dependencies during development and the usage of tools and runtime environments.
    Defining the noncritical license types should be checked by a specialized compliance
    process. With this list of allowed license types, we can start using the build
    automation to scan the full tool stack on a regular basis. After the machine has
    found a violation, we have to remove this element, and it must be replaced by
    another that is licensed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在范围合规方面的第一步是定义在生产线的哪个部分允许使用哪些许可证。允许许可证的定义包括开发过程中的依赖关系以及工具和运行环境的使用。应通过专门的合规流程来检查定义的非关键许可证类型。有了允许的许可证类型清单，我们可以开始使用构建自动化定期扫描完整的工具堆栈。在机器发现违规后，我们必须移除这个元素，并用具有许可证的另一个元素替换。
- en: Vulnerabilities
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞
- en: The ongoing effort to scan for vulnerabilities is low compared to the amount
    of work required to fix vulnerabilities. A slightly different workflow is needed
    for the handling of discovered vulnerabilities. With more significant preparations,
    the build automation can do the work on a regular basis as well. The identification
    of a vulnerability will trigger a workflow that includes human interaction. The
    vulnerability must be classified internally, which leads to a decision about the
    next action to take.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 持续扫描漏洞的工作量与修复漏洞所需的工作量相比较低。处理已发现的漏洞需要稍有不同的工作流程。通过更大的准备工作，构建自动化也可以定期完成这项工作。漏洞的发现将触发包括人类交互在内的工作流程。漏洞必须在内部进行分类，这将决定下一步的行动。
- en: How Much Is Enough?
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 够不够？
- en: So let’s come back to the initial question in this section. How much scanning
    is enough? No change is too small, because all changes that have to do with adding
    or changing dependencies will cause you to reevaluate the security and run a new
    scan. Checking for known vulnerabilities or checking the license being used can
    be carried out efficiently by automation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们回到本节的初始问题。扫描多少次足够？没有改变太小，因为所有涉及添加或更改依赖关系的更改都会导致您重新评估安全性并运行新的扫描。通过自动化可以有效地检查已知漏洞或正在使用的许可证。
- en: Another point that should not be underestimated is that the quality with which
    such an examination is carried out is constant, as nobody is involved at this
    point. If the value chain’s speed is not slowed by constantly checking all dependencies,
    this is a worthwhile investment.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不应低估的观点是，在此时进行此类检查的质量是恒定的，因为此时没有人参与。如果价值链的速度不会因持续检查所有依赖关系而减慢，这是一项值得投资的工作。
- en: Compliance Versus Vulnerabilities
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合规与漏洞
- en: One other difference exists between compliance issues and vulnerabilities. If
    a compliance issue exists, it is a singular point inside the overall environment.
    Just this single part is a defect and is not influencing other elements of the
    environment, as shown in [Figure 7-2](#compliance).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 合规问题与漏洞之间还存在另一个差异。如果存在合规问题，则它是整体环境中的一个特定点。仅此单一部分是一个缺陷，不会影响环境的其他元素，如[图 7-2](#compliance)所示。
- en: '![Circle diagram showing compliance issues in single layers of an application](Images/dtjd_0702.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![圆形图显示应用程序单个层中的合规问题](Images/dtjd_0702.png)'
- en: Figure 7-2\. Layers of an application where compliance issues can be found
  id: totrans-179
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-2\. 应用程序的层次，可以发现合规问题
- en: Vulnerabilities Can Be Combined into Different Attack Vectors
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏洞可以组合成不同的攻击向量
- en: Vulnerabilities are a bit different. They do not exist only at the point where
    they are located. Additionally, they can be combined with other existing vulnerabilities
    in any additional layer of the environment, as shown in [Figure 7-3](#vulnerabilities).
    Vulnerabilities can be combined into different attack vectors. Every possible
    attack vector itself must be seen and evaluated. A set of minor vulnerabilities
    in different layers of the application can be combined into a highly critical
    risk.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞有所不同。它们存在的点不仅仅是它们被定位的地方。此外，它们可以与环境的任何其他现有漏洞结合，如[图 7-3](#vulnerabilities)所示。漏洞可以组合成不同的攻击向量。每个可能的攻击向量本身都必须被看作并评估。在应用程序不同层的一组次要漏洞可以组合成高度关键的风险。
- en: '![Circle diagram showing attack vectors across multiple layers of an application](Images/dtjd_0703.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![圆形图显示跨应用程序多个层的攻击向量](Images/dtjd_0703.png)'
- en: Figure 7-3\. Vulnerabilities in multiple layers of an application
  id: totrans-183
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-3\. 应用程序多层次的漏洞
- en: 'Vulnerabilities: Timeline from Inception Through Production Fix'
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞：从起始到生产修复的时间轴
- en: Again and again, we read something in the IT news about security gaps that have
    been exploited. The more severe the classification of this loophole, the more
    attention this information will get in the general press. Most of the time, we
    hear and read nothing about all the security holes found that are not as well-known
    as the SolarWinds hack. The typical timeline of a vulnerability is shown in [Figure 7-4](#vulnerability-timeline).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次在IT新闻中读到有关被利用的安全漏洞的内容。这种漏洞被分类的越严重，这些信息在一般媒体中得到的关注就越多。大多数情况下，我们听不到也不会读到所有发现的安全漏洞，这些漏洞没有像SolarWinds攻击那样为人所知。漏洞的典型时间轴如图
    [7-4](#vulnerability-timeline) 所示。
- en: '![Timeline showing the lifecycle of a vulnerability](Images/dtjd_0704.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![漏洞生命周期时间轴](Images/dtjd_0704.png)'
- en: Figure 7-4\. Timeline of a vulnerability
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-4\. 漏洞的时间轴
- en: Creation of a vulnerability
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建漏洞
- en: Let’s start with the birth of a vulnerability. This can be done in two ways.
    On the one hand, it can happen to any developer who has an unfortunate combination
    of source code pieces that creates a security hole. On the other hand, it can
    also be based on targeted manipulation. However, this has essentially no effect
    on the further course of the lifeline of a security vulnerability. In the following,
    we assume that a security hole has been created and that it is now active in some
    software. These can be executable programs or libraries integrated into other
    software projects as a dependency.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从漏洞的产生开始说起。这可以通过两种方式完成。一方面，任何有不幸源代码组合而造成安全漏洞的开发人员都可能遭受此种对准。另一方面，这也可以基于有目的的操控。然而，这对安全漏洞生命线的进一步进程几乎没有影响。接下来，我们假设安全漏洞已经被创造，并且现在在某些软件中处于活动状态。这些可以是作为依赖项集成到其他软件项目中的可执行程序或库。
- en: Discovery of the vulnerability
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全漏洞的发现
- en: In most cases, it is not possible to understand precisely when a security hole
    was created, but let’s assume that a security hole exists and that at some point
    it will be discovered. A few different scenarios could occur, depending on who
    finds the security hole first.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们无法准确理解安全漏洞何时创建，但让我们假设存在安全漏洞，并且在某些时刻将被发现。根据谁首先发现安全漏洞，可能会出现几种不同的情景。
- en: If a malicious actor finds the security hole, they will probably try to keep
    it a secret so they can profit from it. The two ways to profit are either to exploit
    the security hole themselves or to sell information about the security hole to
    an interested party. In either case, the quicker they are able to profit from
    the security hole, the less likely it is discovered and patched.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个恶意行为者发现了安全漏洞，他们可能会试图保密以从中获利。获利的两种方式是利用安全漏洞本身或者将关于安全漏洞的信息出售给感兴趣的第三方。无论哪种情况，他们越快从安全漏洞中获利，安全漏洞被发现和修补的可能性就越小。
- en: Conversely, if the security hole is found by ethical attackers, they will first
    verify that the security hole can be exploited without doing any damage, and then
    disclose it to the affected parties. Often a financial motivation exists for this
    as well. These can be driven by bug bounties and rewards by companies aware of
    their potential for security holes and willing to pay to have them disclosed to
    the company rather than to attackers. Also, companies that maintain vulnerability
    databases are incentivized to find security holes and disclose them to their customer
    base in advance of making them publicly known.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果安全漏洞被道德攻击者发现，他们会首先验证是否可以利用安全漏洞而不造成任何损害，然后将其披露给受影响的各方。通常也会存在金融动机。这些动机可以由漏洞赏金和愿意为了将漏洞披露给公司而不是攻击者而支付的奖励来驱动。此外，维护漏洞数据库的公司有动机发现安全漏洞并在公开之前向其客户群披露。
- en: And yet another possibility is that the company discovers the security vulnerability
    by itself. In this case, the company may be inclined to either hide the vulnerability
    or present it as harmless. However, the best approach is to fix the vulnerability
    as soon as possible, because a malicious actor could soon discover the vulnerability
    or perhaps already knows about it and is waiting to exploit it.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是公司自行发现安全漏洞。在这种情况下，公司可能倾向于隐藏漏洞或宣称其无害。然而，最好的方法是尽快修复漏洞，因为恶意行为者可能很快发现漏洞，或者已经知道并等待利用它。
- en: Regardless of the route via which the knowledge comes to the vulnerability databases,
    only when the information has reached one of these points can we assume that this
    knowledge will be available to the general public over time.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 不管知识通过何种途径传递到漏洞数据库，只有当信息达到其中一个点时，我们才能假设这些知识随时间对公众可用。
- en: Public availability of the vulnerability
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞的公开可用性
- en: Each provider of security vulnerabilities has a subset of all publicly disclosed
    vulnerabilities. To get a more holistic set of vulnerabilities, you need to aggregate
    multiple sources. Furthermore, since the vulnerability databases are constantly
    being updated, this needs to be an automated process.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 每个安全漏洞提供商都有公开披露的漏洞子集。要获得更全面的漏洞集合，需要整合多个信息源。此外，由于漏洞数据库不断更新，这必须是一个自动化的过程。
- en: It is also crucial that the vulnerabilities are processed in such a way that
    further processing by machines is possible. Critical meta-information such as
    the CVE or the CVSS value needs to be included. For example, the CVSS value can
    be used in CI environments to interrupt further processing when a specific threshold
    value is reached.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安全漏洞的处理至关重要，需确保机器能进一步处理。关键的元信息如CVE或CVSS值需要包含在内。例如，CVSS值可在CI环境中使用，达到特定阈值时中断进一步处理。
- en: As an end user, there is really only one way to go here. Instead of contacting
    the providers directly, you should rely on services that integrate a wide variety
    of sources and offer a processed and merged database. Since the information generally
    represents a considerable financial value, commercial providers of such data sets
    invest a lot of resources to make sure it is accurate and up-to-date.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终用户，在这里真正只有一种方法。与直接联系提供商不同，您应依赖集成各种信息源并提供处理和合并数据库的服务。由于信息通常代表相当大的财务价值，这类数据集的商业提供者投入了大量资源以确保其准确性和最新性。
- en: Fixing the vulnerability in production
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在生产环境中修复漏洞
- en: Once the information is publicly disclosed and made available to you through
    one of many security providers, you can start to take action. The key factor is
    the amount of time it takes for your organization to identify and mitigate the
    security vulnerability.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦信息公开披露并通过众多安全提供商之一提供给您，您可以开始采取行动。关键因素是组织识别和缓解安全漏洞所需的时间。
- en: The first step is the consumption of the vulnerability from your chosen security
    provider. This is hopefully fully automated with an API that you can use to consume
    vulnerabilities, security scanners that are continuously scanning your production
    deployments, and reporting that notifies you quickly about any new vulnerabilities.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是从您选择的安全提供商那里获取漏洞信息。希望这完全可以通过API自动化进行，您可以使用这些API消费漏洞，安全扫描仪持续扫描您的生产部署，并且报告能够快速通知您任何新的漏洞。
- en: The next step is to develop, test, and deploy a fix that solves the security
    vulnerability. Only those who have implemented a high degree of automation can
    enable short response times in the delivery processes. It is also an advantage
    if the team concerned can easily make the necessary decisions. Lengthy approval
    processes are counterproductive at this point and can also cause extensive damage
    to the company.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是开发、测试和部署修复安全漏洞的解决方案。只有那些实施了高度自动化的人才能在交付过程中实现短响应时间。如果相关团队能够轻松做出必要的决策，这也是一个优势。在这一点上，冗长的批准过程是逆生产力的，也可能对公司造成广泛的损害。
- en: Another point that can improve the response time is to catch security vulnerabilities
    in earlier stages of development. By providing security information in all production
    stages, vulnerabilities can be caught earlier, lowering the cost of mitigation.
    We’ll come back to this in more detail in [“Shift Security Left”](#shift-left-sect).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以提高响应时间的点是在开发的早期阶段捕捉安全漏洞。通过在所有生产阶段提供安全信息，可以更早地捕捉漏洞，降低缓解成本。我们将在 [“Shift Security
    Left”](#shift-left-sect) 中详细讨论这一点。
- en: Test Coverage Is Your Safety Belt
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试覆盖率是您的安全保障
- en: 'The best knowledge of security gaps is of no use if this knowledge cannot be
    put to use. But what tools do you have in software development to take efficient
    action against known security gaps? I want to highlight one metric in particular:
    the test coverage of your own source code parts. If you have strong test coverage,
    you can make changes to the system and rely on the test suite. If a smooth test
    of all affected system components has taken place, nothing stands in the way of
    making the software available from a technical point of view.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 即使拥有安全漏洞的最佳知识也是无用的，如果无法利用这些知识。但在软件开发中，您有哪些工具可以有效地应对已知的安全漏洞呢？我特别想强调一个度量标准：您自己源代码部分的测试覆盖率。如果有强大的测试覆盖率，您可以对系统进行更改并依赖于测试套件。如果所有受影响的系统组件的顺利测试已经完成，从技术上讲，可以使软件变得可用。
- en: But let’s take a closer look at the situation. In most cases, known security
    vulnerabilities are removed by changing the version used for the same dependency.
    Therefore, efficient version management gives you the agility you need to be able
    to react quickly. In very few cases, the affected components have to be replaced
    by semantic equivalents from other manufacturers. And to classify the new composition
    of versions of the same components as valid, strong test coverage is required.
    Manual tests would go far beyond the time frame and cannot be carried out with
    the same quality in every run. Mutation testing gives you much more concrete test
    coverage than is usually the case with the conventional line or branch coverage.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们更仔细地看看情况。在大多数情况下，通过更改相同依赖的使用版本来消除已知安全漏洞。因此，高效的版本管理使您能够迅速做出反应。在极少数情况下，受影响的组件必须被其他制造商的语义等效物替换。为了将相同组件版本的新组合分类为有效，需要强大的测试覆盖率。手动测试将远远超出时间框架，并且不能在每次运行中以相同的质量进行。
- en: To get a picture of the full impact graph based on all known vulnerabilities,
    it is crucial to understand all package managers included by the dependencies.
    Focusing on just one layer in the tech stack is by far not enough. Package managers
    like Artifactory provide information, including vendor-specific metadata. This
    can be augmented with security scanning tools like JFrog Xray that consume this
    knowledge and can scan all binaries hosted inside the repositories managed by
    your package manager.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要全面了解基于所有已知漏洞的全面影响图，理解包括依赖的所有包管理器至关重要。仅关注技术堆栈中的一个层面远远不够。像Artifactory这样的包管理器提供包括供应商特定元数据在内的信息。这可以通过像JFrog
    Xray这样的安全扫描工具进行增强，它们可以扫描由您的包管理器管理的所有存储库中托管的所有二进制文件。
- en: Quality Gate Methodology
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 质量门控方法论
- en: With respect to a security response, the success of IT projects is dependent
    on participation and involvement of end users as early as possible, the support
    of higher management, and the formulation of clear business goals. By managing
    these factors, a software project can quickly address security vulnerabilities
    and mitigate risk to the corporation.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 就安全响应而言，IT项目的成功取决于尽早参与和涉及最终用户、高级管理支持以及明确的业务目标的制定。通过管理这些因素，软件项目可以快速解决安全漏洞并减轻对公司的风险。
- en: 'The demand for comprehensive support from higher management provides, among
    other things, systematic control of the quality and progress of IT projects in
    good time by using criteria in order to be able to intervene. By specifying criteria,
    management has two ways of controlling the software development process:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 高级管理全面支持的需求，通过使用标准及时系统地控制IT项目的质量和进展，以便干预。通过指定标准，管理层有两种控制软件开发过程的方式：
- en: The criteria are project management specifications that the developer must adhere
    to.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准是项目管理的规范，开发人员必须遵守。
- en: Project management can intervene in the event of a deviation from the defined
    target.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发生与定义目标偏差的情况下，项目管理可以进行干预。
- en: The group responsible for setting and enforcing these criteria can be different
    depending on the management system. The distribution of roles is also controversially
    discussed again and again. However, it turns out that a more substantial involvement
    of all team members leads to dynamic and successful structures.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 负责制定和执行这些标准的团队可能因管理系统不同而异。角色的分配也一再引起争议。然而，结果表明，所有团队成员更广泛地参与会带来动态和成功的结构。
- en: In the context of project control, measures can be taken to counteract undesirable
    developments within a project. The ideal case for project participants is that
    security risks do not impact the continuation of the project. In extreme cases,
    however, it is also possible to cancel the project. Timeliness means being able
    to take action before significant financial damage can occur.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目控制的背景下，可以采取措施来对抗项目内的不良发展。对项目参与者来说，理想情况是安全风险不会影响项目的继续进行。然而，在极端情况下，也可能取消项目。及时性意味着在可能造成重大财务损失之前能够采取行动。
- en: At the same time, however, this presupposes that relevant and measurable results
    are available to make effective project control sensible and possible. The end
    of activity within a project is a suitable time for this, as results are available
    that can be checked. However, because of the large number of activities within
    a project, too frequent checks by the project management team would slow the project’s
    progress. In addition, there would be a more significant burden on project management
    with many parallel projects (which would all have to be monitored).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，这也预设了必须有相关且可衡量的结果可供有效的项目控制。项目内活动结束时是这样做的合适时间，因为可以检查到可用的结果。然而，由于项目内的活动数量众多，项目管理团队频繁检查会减慢项目的进展。此外，对于许多并行项目（所有这些项目都必须监控），项目管理的负担将更大。
- en: A middle ground is to establish control and steering at specific significant
    points as binding for each project. For this purpose, quality gates offer an opportunity
    to check the degree of fulfillment of the individual quality goals. A *quality
    gate* is a special point in time in a project at which a decision about the continuation
    or termination of a project is made based on a formal examination of quality-related
    criteria.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一个折中的办法是在每个项目中建立在特定重要点上的控制和引导作为约束。为此，质量门提供了一个机会，以检查各个质量目标的达成程度。*质量门*是项目中的一个特殊时间点，在这个时间点上，基于对与质量相关的标准的正式检查，做出项目继续或终止的决定。
- en: 'Metaphorically speaking, quality gates are barriers between the various process
    steps of a project: once the quality gate has been reached, a project can be continued
    only if all criteria, or at least a sufficiently large number of criteria, are
    met. This ensures that all results of the project at the time of the quality gate
    are good enough to be able to continue working with them. Using the criteria of
    a quality gate, the results on the one hand and the qualitative requirements for
    the results on the other can be determined. They can then be used to define the
    interfaces between individual project phases. To establish quality gates, certain
    structures, activities, roles, documents, and resources are necessary, which are
    summarized in a quality gate reference process.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 比喻而言，质量门是项目各个过程步骤之间的屏障：一旦达到了质量门，只有在满足所有标准，或至少足够多的标准时，项目才能继续进行。这确保了在质量门时项目的所有结果足够好，可以继续使用它们。通过质量门的标准，可以确定项目结果的结果一方面和结果的质量要求另一方面。然后可以用它们来定义单个项目阶段之间的接口。为了建立质量门，需要特定的结构、活动、角色、文件和资源，这些内容被总结在一个质量门参考流程中。
- en: The precise design of the quality gate reference process is based on the company’s
    needs. Quality gates have their origins in automobile development and in the production
    of technical goods, but they have increasingly found their way into system development
    projects and recently also into pure software development projects.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 公司质量门参考流程的精确设计基于公司的需求。质量门的起源可以追溯到汽车开发和技术产品的生产，但它们越来越多地进入了系统开发项目，最近甚至进入了纯软件开发项目。
- en: Quality gates in series production rely on statistically determined values that
    can be used as a target for control activities in future projects. Such a starting
    position does not exist in software development, since software development projects
    are highly individual. As a result, a quality gate reference process practiced
    in assembly-line production can be transferred to software development to only
    a limited extent. Instead, a suitable quality gate reference process must be designed
    differently in order to do justice to the particular problems of software development.
    However, it makes sense to use the quality gate reference processes from other
    domains as they have been developed and optimized over the years.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在系列生产中，质量门依赖于统计确定的值，这些值可以作为未来项目控制活动的目标。由于软件开发项目高度个性化，所以在软件开发中不存在这样的起始位置。因此，在装配线生产中实践的质量门参考流程只能在有限的范围内转移到软件开发中。然而，可以考虑使用其他领域的质量门参考流程，因为它们经过多年的开发和优化。
- en: Quality Gate Strategies
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量门控策略
- en: When using quality gates, two basic strategies have been identified. Depending
    on the objective, a company can choose one of these two strategies, described
    next, when designing a quality gate reference process.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用质量门时，已经确定了两种基本策略。根据目标，公司可以选择其中一种策略来设计质量门参考流程，下文描述。
- en: Quality gates as uniform quality guideline
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 质量门作为统一的质量指南
- en: In the first approach, every project has to go through the same quality gates
    and is measured against the same criteria. The adaptation of a quality gate reference
    process that follows this strategy is permissible to a minimal extent (if at all).
    The aim is to achieve at least the same level of quality in every project; a qualitative
    guideline is thus established for every project.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种方法中，每个项目必须经历相同的质量门，并根据相同的标准进行衡量。允许在遵循这一策略的质量门参考流程中适度（如果可能的话）进行调整。目标是至少在每个项目中达到相同的质量水平；因此为每个项目建立了一个质量指南。
- en: Quality gates can therefore be used as a uniform measure of progress. We can
    compare progress between projects by checking which tasks have already passed
    a particular quality gate and which have not. Management can easily recognize
    when a project is behind another project (qualitatively) and act accordingly.
    Quality gates can thus easily be used as an instrument for multiproject management.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，质量门可以作为进展的统一衡量标准。我们可以通过检查哪些任务已经通过了特定的质量门，哪些没有，来比较项目之间的进展。管理层可以轻松地识别一个项目在质量上落后于另一个项目，并相应地采取行动。因此，质量门可以轻松地被用作多项目管理的工具。
- en: Quality gates as a flexible quality strategy
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 质量门作为一种灵活的质量策略
- en: In the second approach, the number, arrangement, and selection of quality gates
    or criteria can be adapted to the needs of a project. Quality gates and standards
    can thus be tailored more precisely to a project’s qualitative requirements, improving
    the quality of results. However, this makes comparing multiple projects more difficult.
    Fortunately, similar projects will have comparable quality gates and can be measured
    against similar criteria.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种方法中，可以根据项目的需求调整质量门或标准的数量、排列和选择。因此，质量门和标准可以更精确地适应项目的质量要求，从而提高结果的质量。然而，这使得比较多个项目更加困难。幸运的是，类似的项目将具有可比较的质量门，并可以根据类似的标准进行衡量。
- en: Researching the topic of quality gates on the internet and in the literature
    (dissertations, standard works, and conference volumes) reveals a wide range of
    terms. Because synonymous terms are used in many places, quality gates are often
    mistakenly equated with various other concepts. A *review* or *milestone*, for
    example, should not be equated with a quality gate.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网和文献（如论文、标准作品和会议文集）上研究质量门的主题，可以发现许多术语。因为许多地方使用了同义词，所以质量门经常被错误地等同于各种其他概念。例如，*审查*或*里程碑*不应与质量门等同起来。
- en: Fit with Project Management Procedures
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与项目管理程序的契合
- en: The question arises whether this methodology can be applied to other project
    management processes. The answer here is a resounding yes. The quality gate methodology
    can be integrated into cyclical as well as acyclical project methods. The time
    sequence is irrelevant at this point and can therefore also be used in classic
    waterfall projects at the milestone level.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是，这种方法是否可以应用于其他项目管理过程。答案是肯定的。质量门控方法可以集成到循环和非循环项目方法中。在这一点上，时间顺序是无关紧要的，因此也可以在经典的瀑布项目中的里程碑级别使用。
- en: The significant advantage is that this method can still be used in the case
    of a paradigm shift in project management. The knowledge built up in a team can
    continue to be used and does not lose its value. This means that the measures
    described here can be introduced and used regardless of the current project implementation.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重要优势在于，该方法在项目管理的范式转变时仍然可用。团队中积累的知识可以继续使用，并且不会失去其价值。这意味着无论当前项目实施如何，这里描述的措施都可以引入和使用。
- en: Implementing Security with the Quality Gate Method
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用质量门控方法实施安全
- en: We will introduce, define, and use a greatly simplified approach to integrate
    the crosscutting issue of security. In the following, we assume that the quality
    gate methodology is suitable for implementing any cross-sectional topic. The temporal
    component is also irrelevant and can therefore be used in any cyclical project
    management methodology. This approach is therefore ideally suited for integration
    into the DevSecOps project organization methodology.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引入、定义和使用一个极大简化的方法来整合安全的横向问题。在接下来的内容中，我们假设质量门控方法适合于实施任何横向主题。时间组成部分也是无关紧要的，因此可以在任何周期性项目管理方法中使用。因此，这种方法非常适合集成到DevSecOps项目组织方法中。
- en: The DevOps process is divided into stages. The individual phases are seamlessly
    connected to one another. It makes no sense to install something at these points
    that interferes with the entire process. However, there are also much better places
    where cross-cutting issues are located. We are talking about the automated process
    derivation that can be found in a CI route. Assuming that the necessary process
    steps to go through a quality gate can be fully automated, a CI route is ideal
    for doing this regularly occurring work.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps过程分为阶段。各个阶段之间无缝连接。在这些点安装会干扰整个过程的东西是没有意义的。但是，也有更好的地方可以找到横切问题。我们讨论的是自动化流程推导，可以在CI路由中找到。假设必要的流程步骤通过质量门控可以完全自动化执行，那么CI路由非常适合定期执行这些工作。
- en: Assuming that the CI line carries out an automated process step, two results
    can occur.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 假设CI线执行了自动化流程步骤，可能会出现两种结果。
- en: 'Green: Quality gate has passed'
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绿色：质量门控已通过
- en: One possible result of this processing step is that all checks have passed successfully.
    Processing can continue uninterrupted at this point. Only a few log entries are
    made to ensure complete documentation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理步骤的一个可能结果是，所有检查都已成功通过。处理可以在此点继续无中断。为确保完整文档记录，仅做了少量日志条目。
- en: 'Red: Failed the quality gate'
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 红色：未通过质量门控
- en: Another possible result is that the check has found something indicating a failure.
    This interrupts the process, and the cause of the failure must be identified,
    as well as a way to remediate it. The automatic process usually ends at this point
    and is replaced by a manual process.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能的结果是，检查发现了某些表明失败的东西。这中断了过程，必须找出失败的原因以及补救的方法。自动化流程通常在此时结束，并被手动流程替代。
- en: Risk Management in Quality Gates
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量门控中的风险管理
- en: 'Since the quality gate is blocked by identifying a defect, someone needs to
    be responsible for the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 由于质量门控被识别为一个缺陷而被阻止，有人需要负责以下步骤：
- en: Risk assessment (identification, analysis, assessment, and prioritization of
    risks)
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险评估（风险识别、分析、评估和优先级确定）
- en: Design and initiation of countermeasures
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和启动对策
- en: Tracking of risks in the course of the project
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目过程中跟踪风险
- en: The risk determination was already completed with the creation of the criteria
    and their operationalization by weighing the requirements on a risk basis. This
    takes place during the gate review itself.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 风险确定已在创建标准并根据风险权衡要求的操作化过程中完成。这发生在门控审查本身时。
- en: The conception and initiation of countermeasures is an essential activity of
    a gate review, at least in the event that a project is not postponed or canceled
    before going to production. The countermeasures to be taken primarily counteract
    the risks that arise from criteria that are not met.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对策的构思和启动是门户审查的重要活动，至少在项目在进入生产之前没有被推迟或取消的情况下是如此。主要采取的对策主要是针对未达标准而产生的风险。
- en: The countermeasures of risk management can be divided into preventive measures
    and emergency measures. The *preventive measures* include meeting the criteria
    as quickly as possible. If this is not possible, appropriate countermeasures must
    be designed. The design of the countermeasures is a creative act; it depends on
    the risk, its assessment, and the possible alternatives.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 风险管理的对策可以分为预防措施和紧急措施。*预防措施* 包括尽快达到标准。如果这不可能，必须设计适当的对策。对策的设计是一个创造性的行为；它取决于风险、其评估以及可能的替代方案。
- en: The effectiveness of the countermeasures must be tracked to ensure that they
    are successful. This spans all phases of the project and is critical to ensuring
    that security vulnerabilities are caught and addressed early in the process.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对策的有效性必须进行跟踪，以确保其成功。这涵盖了项目的所有阶段，并且对于确保安全漏洞在流程早期被发现和解决至关重要。
- en: Practical Applications of Quality Management
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量管理的实际应用
- en: Let’s go through a practical example of quality management in the context of
    a software release. For this purpose, all required components are generated and
    collected in the repository, and every binary has an identity and version. All
    elements necessary for a release are put together in a deployment bundle after
    they have been created successfully. In this case, a release is a composition
    of different binaries in their respective versions. The technology plays a subordinate
    role here, as the most diverse artifacts can come together in a release.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过软件发布的背景中质量管理的一个实际例子来看一下。为此，生成并收集所有必需的组件到存储库中，每个二进制文件都有一个身份和版本。在成功创建这些元素后，将所有发布所需的元素组合成一个部署包。在这种情况下，一个发布是不同二进制文件的组合，它们分别具有不同的版本。技术在这里起到次要作用，因为最多样化的物件可以在一个发布中聚集在一起。
- en: You can also imagine that all crucial documents are part of this compilation
    at this point. This can include documents such as the release notes and build
    information that provides information about the manufacturing process itself—for
    example, which JDK was used on which platform and much more. All information that
    can be automatically collated at this point increases the traceability and reproduction
    quality if a postmortem analysis has to be carried out.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以想象到这个时候所有关键文件都是这个汇编的一部分。这可能包括发行说明和构建信息等文件，提供有关制造过程本身的信息，例如在哪个平台上使用了哪个 JDK
    等等。此时可以自动整理的所有信息都会增加可追溯性和再现质量，如果需要进行事后分析的话。
- en: We now have everything together and would like to start making the artifacts
    available. We are talking about promoting the binaries here. This can be done
    in your own repositories or generally available global repositories. Now the last
    time has come when you can still make changes.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好了一切，并且希望开始提供这些物件。我们在这里讨论的是推广二进制文件。这可以在您自己的存储库中完成，或者在通用的全球性存储库中完成。现在是您仍然可以进行更改的最后时间。
- en: We are talking about a security check as a promotional gateway. The tools used
    here should finally check two things. First, known vulnerabilities in the binaries
    need to be removed. Second, all the licenses used in all the artifacts contained
    must be adequate for the purpose. What becomes immediately clear here is the need
    for the check to be carried out independently of the technology used. This brings
    us back to the full impact graph. At this point, we have to get the full impact
    graph in order to be able to achieve a high-quality result. The repository manager,
    who is responsible for providing all dependent artifacts, must be seamlessly integrated
    with the binary scanner. One example is the combination of Artifactory and Xray.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在谈论一个作为推广门户的安全检查。此处使用的工具最终应检查两件事。首先，需要删除二进制文件中已知的漏洞。其次，所有包含的物件中使用的许可证必须适合该目的。这里立即变得清晰的是需要独立于所使用的技术进行检查。这将我们带回到完整的影响图。在这一点上，我们必须获取完整的影响图，以便能够达到高质量的结果。负责提供所有依赖物件的存储库管理器必须与二进制扫描器无缝集成。一个例子是
    Artifactory 和 Xray 的组合。
- en: But is a security check a gateway for the promotion of binaries at the earliest
    possible time? Where can you start earlier? We now come to the concept of shift
    left.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 但是安全检查是否是尽早推广二进制文件的门槛？你可以从哪里开始？现在我们来到向左移动的概念。
- en: Shift Security Left
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**向左转移安全性**'
- en: Agile development, DevOps, and the implementation of security have long been
    considered mutually exclusive. Classic development work was always confronted
    with the problem that the security of a software product could not be adequately
    defined as a final, static, end state. This is the *security paradox* in software
    development.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，敏捷开发、DevOps 和安全实施一直被认为是互斥的。经典的开发工作总是面临这样一个问题，即软件产品的安全性无法被充分定义为最终的、静态的最终状态。这就是软件开发中的*安全悖论*。
- en: It may seem that Agile development is too dynamic to be able to carry out a
    detailed security analysis of the software product to be developed in every development
    cycle. The opposite is the case because Agile and secure development techniques
    complement each other very well. One of the key points of Agile development is
    the ability to implement changes on short notice as well as changes to requirements
    within a short period of time.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来敏捷开发过于动态，无法在每个开发周期中对待要开发的软件产品进行详细的安全分析。事实恰恰相反，因为敏捷和安全开发技术非常好地互补。敏捷开发的关键点之一是能够在短期内实施变更以及在短时间内对需求进行变更。
- en: In the past, security has tended to be viewed as a static process. Accordingly,
    application of Agile concepts to the security domain is required. The general
    handling of security requirements must adapt to this development in order to be
    able to be implemented efficiently. However, we must note that Agile development
    is feature-oriented. Security requirements are mostly from the category of nonfunctional
    features, though, and are therefore available in only an implicitly formulated
    form in most cases. The consequence of this, in combination with faulty security
    requirements engineering results, is miscalculated development cycles with increased
    time pressure; the sprint is canceled because of incorrect budget calculations,
    increased technical debts, persistent weak points, or specific security gaps within
    the codebase.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，安全往往被视为一个静态过程。因此，必须将敏捷概念应用到安全领域。安全需求的一般处理必须适应这一发展，以便能够高效地实施。然而，我们必须注意，敏捷开发是面向特性的。安全需求大多来自非功能特性类别，因此在大多数情况下只以隐含的形式出现。这种情况的后果，结合错误的安全需求工程结果，是开发周期计算错误，时间压力增加；冲刺被取消，因为预算计算不正确，技术债务增加，代码库中持久的弱点或特定的安全漏洞。
- en: Let’s now focus on how the necessary conditions can be created in an Agile development
    team that improves the codebase’s security level as early as possible. Regardless
    of the specific project management method used, the following approaches are not
    restricted in their validity.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注如何在敏捷开发团队中创造必要条件，尽早提高代码库的安全级别。无论使用的具体项目管理方法是什么，以下方法在其有效性上没有限制。
- en: It is essential to set the security level so that the respective development
    team should achieve a security increment when performing a product increment.
    A team with an implicit and pronounced security focus can immediately gain a different
    level of security than a team without this focus. Regardless of the experience
    of each team, a general minimum standard must be defined and adhered to.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 设置安全级别是至关重要的，以便在每次产品增量中开发团队都能实现安全增长。具有内在和显著安全关注的团队可以立即获得比没有这种关注的团队更高级别的安全性。无论每个团队的经验如何，都必须定义和遵守一个通用的最低标准。
- en: The [OWASP Top 10](https://owasp.org/Top10) is a list of general security vulnerabilities
    that developers can avoid with simple measures. Accordingly, they serve as an
    introduction to the topic and should be part of every developer’s security repertoire.
    However, code reviews often reveal that teams are not adequately considering the
    top 10, so this is a good area to focus teams on improvement.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[OWASP 十大安全风险](https://owasp.org/Top10) 是一个开发人员可以通过简单措施避免的常见安全漏洞列表。因此，它们作为该主题的介绍应该是每个开发人员安全基本技能的一部分。然而，代码审查经常表明团队没有充分考虑前十名，因此这是一个团队改进的良好领域。'
- en: It should also be recognized that developers can do an excellent job in their
    field but are not security experts. In addition to different levels of experience,
    developers and security experts have different approaches and ways of thinking
    that are decisive for their respective tasks. Therefore, the development team
    must be aware of their limitations with regard to the assessment of attack methods
    and security aspects. When developing critical components or in the event of problems,
    the organizational option of calling in a security expert must therefore be determined
    in advance. Nevertheless, developers should generally be able to evaluate typical
    security factors and take simple steps to improve the security of the code.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该认识到开发人员可以在其领域内做得很好，但并非安全专家。除了不同层次的经验外，开发人员和安全专家在对待问题的方式和思考方式上也有所不同，这对各自的任务至关重要。因此，开发团队必须意识到他们在评估攻击方法和安全方面的限制。在开发关键组件或出现问题时，应预先确定调用安全专家的组织选项。然而，开发人员通常应能够评估典型的安全因素，并采取简单的措施来提高代码的安全性。
- en: Ideally, each team has a member who has both development and detailed security
    knowledge. In the context of supported projects, the relevant employees are referred
    to as security managers (SecMs). They monitor the security aspects of the developed
    code sections, define the attack surface and attack vectors in each development
    cycle, support you in assessing the user stories’ effort, and implement mitigation
    strategies.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每个团队都有一名既有开发又有详细安全知识的成员。在支持项目的背景下，相关员工被称为安全经理（SecMs）。他们监控所开发代码部分的安全方面，在每个开发周期中定义攻击面和攻击向量，支持评估用户故事的工作量，并实施缓解策略。
- en: To get a global overview of the codebase and its security level, aiming for
    a regular exchange between the SecMs of the teams involved makes sense. Since
    a company-wide synchronization of the development cycle phases is unrealistic,
    SecMs should meet at regular, fixed times. In small companies or with synchronized
    sprints, the teams particularly benefit from an exchange during development cycle
    planning. In this way, cross-component security aspects and the effects of the
    development cycle on the security of the product increment can be assessed. The
    latter can currently be achieved only through downstream tests. Based on the development
    cycle review, a SecM meeting should also occur after implementing new components.
    In preparation for the next sprint, the participants evaluate the security level
    according to the increment.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全局了解代码库及其安全水平，目标是在涉及的团队的SecMs之间定期交流是有意义的。由于全公司范围内同步开发周期阶段是不现实的，因此SecMs应定期固定时间会面。在小公司或同步冲刺的情况下，团队特别受益于在开发周期规划期间的交流。通过这种方式，可以评估跨组件的安全方面以及开发周期对产品增量安全性的影响。目前后期测试是唯一可以实现这一点的方式。根据开发周期回顾，在实施新组件后也应该进行SecM会议。在为下一个冲刺做准备时，参与者根据增量评估安全水平。
- en: OWASP Security Champions are implemented differently. These are often developers,
    possibly junior developers, who acquire additional security knowledge that can
    be very domain-specific depending on experience. Conceptual overlap occurs with
    the SecMs; however, a key difference is that a SecM is a full-fledged security
    expert with development experience who acts on the same level as the senior developer.
    When implementing secure software, however, it is crucial to take into account
    the security-relevant effects of implementation decisions and cross-thematic specialist
    knowledge.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP安全冠军的实施方式各不相同。这些通常是开发人员，可能是初级开发人员，他们通过经验可以获得非常领域特定的额外安全知识。与SecMs的概念有重叠之处；然而，一个关键的区别在于SecM是一位具有开发经验的全面安全专家，其行动与高级开发人员相当。然而，在实施安全软件时，关键是考虑实施决策的安全相关影响和跨主题专业知识。
- en: Regardless of whether a team can create a dedicated role, basic measures should
    be taken to support the process of developing secure software. These are the following
    best practice recommendations and empirical values.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 无论团队是否能创建专门的角色，都应采取基本措施来支持开发安全软件的过程。以下是最佳实践建议和经验数值。
- en: Not All Clean Code Is Secure Code
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并非所有的清洁代码都是安全代码。
- en: '*Clean Code* by Robert Martin (Pearson), also known as Uncle Bob, coined the
    term *clean code*. However, a common misconception among decision makers is that
    clean code also covers the security of the code.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*《干净的代码》*（Pearson）由罗伯特·马丁（也被称为乌克尔·鲍勃）创造了*干净的代码*一词。然而，决策者之间的一个常见误解是干净的代码也涵盖了代码的安全性。'
- en: Safe and clean code overlap but are not the same. *Clean code* promotes understandability,
    maintainability, and reusability of code. *Secure code*, on the other hand, also
    requires predefined specifications and compliance with them. However, clean code
    is often a requirement for safe code. The code can be written cleanly without
    any security features. However, only a clean implementation opens up the full
    potential for security measures.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和干净的代码有重叠之处，但并不完全相同。*干净的代码*促进代码的可理解性、可维护性和可重用性。另一方面，*安全的代码*还需要预定义的规范并遵守它们。然而，干净的代码通常是安全代码的前提条件。代码可以干净地编写而没有任何安全特性。然而，只有干净的实现才能充分发挥安全措施的潜力。
- en: Well-written code is also easier to secure because the relationships between
    components and functions are clearly defined and delimited. Any development team
    looking for reasons to promote adherence to and implementation of the clean code
    principles will find good arguments in the security of the code, which can also
    be explained economically to decision makers in cost and time savings for security
    hardening.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '写得好的代码也更容易保护，因为组件和功能之间的关系是清晰定义和界定的。任何寻找理由推广干净代码原则并在决策者面前以经济上的成本和时间节省来解释代码安全性的开发团队，都会找到充分的论据。 '
- en: Effects on Scheduling
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**调度影响**'
- en: In general, and particularly in Agile development, teams do not allow enough
    time to improve the codebase when planning the next version. In sprint planning,
    the focus on effort assessment is primarily on time to develop a new function.
    Hardening is considered explicitly only when a special requirement exists.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，特别是在敏捷开发中，团队在规划下一个版本时往往没有足够的时间来改进代码库。在冲刺规划中，对努力评估的关注主要集中在开发新功能所需的时间上。只有在存在特殊要求时，才会明确考虑硬化工作。
- en: The amount of time teams need to implement a function safely depends on the
    functionality, the status of the product increment, the existing technical debt,
    and the prior knowledge of the developer. However, as intended in Agile development,
    it should be up to the team to estimate the actual time required. Since miscalculations
    are to be expected, especially at the beginning, it can make sense to reduce the
    number of user stories adopted compared to the previous sprints.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 团队实现功能安全所需的时间取决于功能、产品增量的状态、现有的技术债务以及开发者的先验知识。然而，按照敏捷开发的意图，团队应该估计实际所需的时间。特别是在开始阶段，可以预期会出现误算，因此相比于之前的冲刺，减少采纳的用户故事数量是有意义的。
- en: The Right Contact Person
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**正确的联系人**'
- en: Every team must have access to security professionals, but it can be hard to
    find the right contact person in large organizations. IT security is divided into
    numerous, sometimes highly specific and complex, subareas for which full-time
    security experts are responsible. Good programmers are full-time developers and
    even after IT security training, cannot replace dedicated security experts.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队必须能够接触到安全专家，但在大型组织中找到合适的联系人可能会很困难。IT安全被分为许多有时非常具体和复杂的子领域，这些领域需要全职的安全专家负责。优秀的程序员是全职开发人员，即使经过IT安全培训，也无法取代专门的安全专家。
- en: It is the responsibility of project management to ensure that organizational,
    structural, and financial requirements are met so that teams can quickly draw
    on technical expertise when needed and during an assessment. This is not the case
    by default in most organizations.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目管理中，确保团队在需要时能够迅速利用技术专业知识并在评估过程中承担责任是必要的。在大多数组织中，默认情况下并不是这样。
- en: Dealing with Technical Debt
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理技术债务
- en: Technical debt is an integral part of development, and project owners should
    treat it as such—both in terms of time and budget. Technical debt has a negative
    impact on the maintainability, development, and security of the codebase. This
    means a significant increase in individual (new) implementation costs and a sustained
    slowdown in overall production by blocking developers for a more extended period
    of time with individual projects. Therefore, it is in the interest of everyone
    involved—especially management—to keep the technical debt of a codebase low and
    to continuously reduce it.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是开发过程中不可或缺的一部分，项目所有者应该将其视为时间和预算的一部分。技术债务对代码库的可维护性、开发性能和安全性有负面影响。这意味着个别（新）实施成本显著增加，并通过将开发者在个别项目中长时间阻塞来持续减慢总体生产速度。因此，每个相关方，特别是管理层，都有兴趣将代码库的技术债务保持在较低水平，并持续减少它。
- en: Alternatively, the substrategy is to set a fixed portion of the estimated project
    time for servicing technical debt. The approach is minor, as there is a risk that
    teams will use the time spent processing technical debt to implement a function
    instead and misjudge the extent of technical debt under the development cycle
    pressure.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，替代策略是将预估的项目时间的固定部分用于处理技术债务。这种方法是次要的，因为存在团队可能利用处理技术债务的时间来实施功能，而在开发周期压力下误判技术债务的程度的风险。
- en: Advanced Training on Secure Coding
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全编码高级培训
- en: A misconception exists that security can be learned in passing and that everyone
    has access to the necessary materials. Typically, a list of secure coding guidelines
    is in a public folder somewhere. In addition, the OWASP Top 10 is often published
    to the general public. As a rule, however, employees do not read such documents
    or, at best, skim them. Often, after a while, teams no longer know where such
    documents are, let alone what use they should get from them. Admonitions to encourage
    reading the guidelines are not very helpful if companies cannot create extra time
    to focus on secure coding.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个误解，即安全性可以顺便学习，每个人都可以访问必要的材料。通常，安全编码指南列表在某个公共文件夹中。此外，OWASP前10名通常向公众发布。然而，员工通常不会阅读这些文件，或者最多只会粗略浏览。通常，过一段时间后，团队不再知道这些文件在哪里，更不用说应该从中获得什么用途。鼓励阅读指南的告诫如果公司无法创造额外时间来专注于安全编码，则帮助不大。
- en: Milestones for Quality
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量里程碑
- en: Quality gates in development help check compliance with quality requirements.
    Analogous to the *definition of done* (DoD), the team-wide definition of when
    a task can be viewed as completed, quality gates should not be available only
    in stationary paper form. Ideally, automated checks are integrated into the CI/CD
    pipeline through static code analyses (SAST) or the evaluation of all dependencies.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 开发中的质量门控帮助检查质量要求的符合性。类似于*定义完成*（DoD），团队广泛定义了任务何时可以视为完成，质量门控不应仅以静态纸质形式存在。理想情况下，自动化检查应通过静态代码分析（SAST）或评估所有依赖项集成到CI/CD流水线中。
- en: For developers, however, it can be helpful to receive feedback on the code and
    its dependencies in addition to feedback from the CI/CD pipeline during programming.
    Language- and platform-dependent IDE plug-ins and separate code analysis tools
    are available, such as FindBugs/SpotBugs, Checkstyle, and PMD. When using JFrog
    Xray, the IDE plug-in can be used to make it easier to compare against known vulnerabilities
    and compliance issues.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 对开发者来说，接收编程期间来自IDE插件以及CI/CD流水线反馈的反馈可能很有帮助。语言和平台相关的IDE插件和独立代码分析工具都可用，例如FindBugs/SpotBugs，Checkstyle和PMD。使用JFrog
    Xray时，IDE插件可用于更轻松地与已知的漏洞和合规问题进行比较。
- en: An additional upstream process for checking the code in the IDE pursues the
    goal of familiarizing developers with security aspects during development. As
    a result, the code security is improved at the points identified by the plug-in
    and in the entire code since developers are given a security orientation. Another
    side effect is the reduction in the number of false positives on the build server.
    The latter is exceptionally high for security quality gates, as security gaps
    in the code are often context-dependent and require manual verification, which
    leads to a considerable increase in the development effort.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 一个额外的上游过程用于在IDE中检查代码，旨在在开发过程中使开发人员熟悉安全方面。因此，由插件识别的点以及整个代码中的代码安全性得到改善，因为开发人员得到了安全方向。另一个副作用是在构建服务器上虚警的数量减少。对于安全质量门，后者异常高，因为代码中的安全漏洞通常依赖于上下文并需要手动验证，这导致开发工作量的显著增加。
- en: The Attacker’s Point of View
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击者的视角
- en: '*Evil user stories* (also called *bad user stories*) present the desired functionality
    from an attacker’s perspective. Analogous to user stories, they are designed so
    that their focus is not on the technical implementation. Accordingly, people with
    a limited technical background in IT security can write bad user stories. However,
    this increases the effort required to generate tasks from the possibly unspecific
    (bad) user stories.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '*邪恶用户故事*（也称为*不良用户故事*）从攻击者的视角呈现所需的功能。类似于用户故事，它们的设计使它们的重点不是技术实现。因此，即使是在IT安全方面技术背景有限的人也可以编写不良用户故事。然而，这增加了从可能不明确（糟糕的）用户故事生成任务所需的工作量。'
- en: Ideally, bad user stories try to depict the attack surface. They enable the
    development team to process identified attack methods in a familiar workflow.
    This creates awareness of possible attack vectors, but these are limited. Evil
    user stories are limited not only by the knowledge and experience of their respective
    authors and their imagination, but also by the developer’s ability to fend off
    the attack vector in the context of the sprint. It’s not just about whether the
    developers develop the right damage-control strategy, but also about correctly
    and comprehensively identifying the use case in the code.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，不良用户故事试图描绘攻击面。它们使开发团队能够在熟悉的工作流中处理已识别的攻击方法。这增强了可能攻击向量的意识，但这些向量是有限的。邪恶用户故事不仅受到其各自作者的知识和经验以及他们的想象力的限制，而且还受到开发人员在冲刺上下文中抵御攻击向量的能力的限制。这不仅仅是开发人员是否开发了正确的损害控制策略，还包括在代码中正确和全面地识别用例。
- en: Like conventional user stories, the evil variants are not always easy to write.
    Teams with little experience in developing secure software, in particular, can
    encounter difficulties creating meaningful nasty user stories. If a SecM is on
    the team, that person should take on the task or offer support. Teams without
    a SecM should either look for external technical expertise or plan a structured
    process for creating the evil user stories.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统用户故事类似，邪恶变体并不总是易于编写。特别是在开发安全软件方面经验有限的团队可能会在创建有意义的恶意用户故事时遇到困难。如果团队中有安全专家（SecM），那么应由该人承担该任务或提供支持。没有安全专家的团队应该寻找外部技术专家或计划一个结构化的过程来创建邪恶用户故事。
- en: Methods of Evaluation
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估方法
- en: To establish security as a process within Agile development, regular code reviews
    must be carried out, with the focus on the security level of the code, both component
    by component and across segments. Ideally, errors that are easy to avoid and can
    cause security breaches can be identified and corrected as part of the CI/CD pipeline
    through quality gates and automated tests. In this case, the component-by-component
    test is primarily concerned with the investigation of the attack surface of the
    respective component and the weakening of attack vectors. A cheat sheet for analyzing
    the attack surface can be found on the [OWASP Cheat Sheet Series on GitHub](https://oreil.ly/kHLm1).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 要在敏捷开发中确立安全作为一个过程，必须进行定期的代码审查，重点是代码的安全级别，无论是逐个组件还是跨段落。理想情况下，可以在CI/CD管道中通过质量门和自动化测试识别和纠正易于避免但可能导致安全漏洞的错误。在这种情况下，逐个组件的测试主要关注对相应组件的攻击面和攻击向量的减弱的调查。关于分析攻击面的备忘单可以在[OWASP
    Cheat Sheet Series on GitHub](https://oreil.ly/kHLm1)找到。
- en: The teams must regularly redefine the attack surface, as it can change with
    each development cycle. The cross-component check is used to monitor the attack
    surface of the overall product, as it can also change with every development cycle.
    Ultimately, only a cross-component view enables the search for attack vectors
    that result from interactions between components or even dependencies.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 团队必须定期重新定义攻击面，因为它可能随着每个开发周期而变化。跨组件检查用于监视整体产品的攻击面，因为它也可能随着每个开发周期而变化。最终，只有跨组件视图才能搜索由组件之间或甚至依赖关系之间的交互引起的攻击向量。
- en: If SecMs are not available, a security assessment can be carried out through
    a structured approach and joint training in the team. The [OWASP Cornucopia card
    game](https://oreil.ly/dhQK3) can, among other things, promote such an approach.
    The players try to apply the attack scenarios depicted on the cards to a domain
    selected in advance by the team or, if necessary, only to individual methods,
    such as the codebase. The team must then decide whether the attack scenario of
    the card played is conceivable. Therefore, the focus is on identifying attack
    vectors; because of time constraints, mitigation strategies should be discussed
    elsewhere. The winner of the card game is the one who can successfully play the
    most difficult cards. The team must document the resulting security analysis at
    the end.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有安全专家团队，可以通过结构化的方法和团队联合培训进行安全评估。[OWASP Cornucopia 卡牌游戏](https://oreil.ly/dhQK3)
    可以促进这样的方法，其中玩家试图将卡牌上描述的攻击场景应用到团队事先选择的领域，或者必要时仅应用到个别方法，例如代码库。然后，团队必须决定播放的卡牌的攻击场景是否可行。因此，重点是识别攻击向量；由于时间限制，减轻策略应该在其他地方讨论。卡牌游戏的赢家是成功播放最困难的卡牌的人。团队必须在最后记录产生的安全分析。
- en: One benefit of Cornucopia is that it increases awareness of code vulnerabilities
    across the team. The game also improves the developer’s expertise in IT security.
    The focus is on the ability of the developer and thus reflects Agile guidelines.
    Cornucopia sessions are an excellent tool to generate evil user stories afterward.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Cornucopia 的一个好处是增加了团队对代码漏洞的意识。该游戏还提高了开发人员在 IT 安全方面的专业知识。重点在于开发人员的能力，并因此反映了敏捷指南。Cornucopia
    会议后，生成邪恶用户故事是一个极好的工具。
- en: The problem with Cornucopia sessions is that they present especially inexperienced
    teams with a steep learning curve at the beginning. There is also a risk that
    the team will incorrectly discard a potential attack vector. If the preparation
    is poor (e.g., components are too large, or the team doesn’t have enough technical
    knowledge about possible attack vectors), Cornucopia can be inefficient in terms
    of time. Therefore, it is advisable, especially in the first few sessions, to
    examine small independent components and, if necessary, to consult security experts.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: Cornucopia 会议的问题在于它们给尤其是经验不足的团队带来了一个陡峭的学习曲线。团队还存在一个风险，即团队可能错误地丢弃一个潜在的攻击向量。如果准备工作不足（例如，组件太大，或者团队对可能的攻击向量没有足够的技术知识），Cornucopia
    在时间上可能效率低下。因此，特别是在最初的几次会议中，建议检查小型独立的组件，并在必要时请教安全专家。
- en: Be Aware of Responsibility
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要意识到责任
- en: Overall, developers should not allow the code security scepter to be taken out
    of their hands. Ideally, the team should jointly insist on sufficient time and
    financial resources to implement basic security aspects.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，开发人员不应该允许代码安全的权杖从他们手中被夺走。理想情况下，团队应该共同坚持有足够的时间和财务资源来实现基本的安全方面。
- en: Current developers will largely define and shape the world for the years to
    come. Because of expected digitization and networking, security must not fall
    victim to budget and time constraints. According to the Agile Manifesto, the codebase
    remains the product of the team responsible for the outcome.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的开发人员将在未来多年中主要定义和塑造这个世界。由于预期的数字化和网络化，安全性不能成为预算和时间限制的牺牲品。根据敏捷宣言，代码库仍然是负责结果的团队的产品。
- en: Summary
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the proliferation of supply chain attacks in the industry, addressing security
    is more critical than ever for the success of your project and organization. The
    best way to mitigate vulnerabilities quickly is to shift left and start addressing
    security as a primary concern from day one of every software development project.
    This chapter introduced you to the basics of security, including various analysis
    approaches, such as SAST, DAST, IAST, and RASP. You also learned about basic scoring
    systems like the CVSS. With this knowledge, you will be able to put the right
    quality gates and criteria in place to improve the security of every project that
    you work on going forward.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 随着供应链攻击在行业中的大量出现，解决安全问题对于项目和组织的成功比以往任何时候都更为关键。尽快减轻漏洞的最佳方法是向左转移，并从每个软件开发项目的第一天开始将安全作为主要关注点。本章介绍了安全的基础知识，包括各种分析方法，如SAST、DAST、IAST和RASP。您还了解了基本的评分系统，如CVSS。有了这些知识，您将能够在将来参与的每个项目中制定正确的质量门和标准，以提高安全性。
