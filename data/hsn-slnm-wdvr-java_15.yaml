- en: Appendix B. Driver Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 驱动程序管理
- en: 'As discussed in [Chapter 1](ch01.html#ch01), driver management involves three
    steps: download, setup, and maintenance. Manual driver management is costly in
    terms of effort and potentially problematic regarding maintainability. For this
    reason, I use WebDriverManager to carry out this process in an automated and automaintained
    manner in all the examples of this book. For completeness, this appendix also
    describes the involved steps (download, setup, and maintenance) in manual driver
    management.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第1章](ch01.html#ch01)讨论的那样，驱动程序管理涉及三个步骤：下载、设置和维护。手动驱动程序管理在努力方面昂贵，并且在可维护性方面可能存在问题。因此，在本书的所有示例中，我使用WebDriverManager来以自动化和自动维护的方式执行这个过程。为了完整起见，本附录还描述了手动驱动程序管理中涉及的步骤（下载、设置和维护）。
- en: 'WebDriverManager: Automated Driver Management'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebDriverManager：自动化驱动程序管理
- en: '[WebDriverManager](https://bonigarcia.dev/webdrivermanager) is an open source
    Java library that manages the drivers required by Selenium WebDriver (e.g., chromedriver,
    geckodriver, msedgedriver, etc.) in an automated manner. WebDriverManager provides
    a set of *managers* for different browsers, namely Chrome, Firefox, Edge, Opera,
    Chromium, and Internet Explorer.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[WebDriverManager](https://bonigarcia.dev/webdrivermanager) 是一个开源的Java库，用于自动管理Selenium
    WebDriver所需的驱动程序（例如chromedriver、geckodriver、msedgedriver等）。WebDriverManager为不同的浏览器提供一组*管理器*，包括Chrome、Firefox、Edge、Opera、Chromium和Internet
    Explorer。'
- en: WebDriverManager internally executes a *resolution algorithm* to manage the
    drivers required by each browser. This algorithm aims to automatically discover,
    download, set up, and maintain these drivers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriverManager在内部执行一个*解析算法*来管理每个浏览器所需的驱动程序。该算法旨在自动发现、下载、设置和维护这些驱动程序。
- en: '[Figure B-1](#wdm-algorithm) represents this algorithm in the context of the
    methodology implemented by WebDriverManager. For each manager (e.g., `chromedriver()`,
    `firefoxdriver()`, etc.), the resolution algorithm works as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 B-1](#wdm-algorithm) 在WebDriverManager实现的方法论背景下代表了这个算法。对于每个管理器（例如，`chromedriver()`，`firefoxdriver()`等），解析算法的工作原理如下：'
- en: WebDriverManager tries to find the browser version (e.g., Chrome) installed
    in the local machine. For that, it uses an internal knowledge database called
    *commands database*. This database contains a list of shell commands (in different
    operating systems) that allow discovering the browser versions (e.g., `google-chrome
    --version` in Linux).
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WebDriverManager尝试查找安装在本地计算机上的浏览器版本（例如Chrome）。为此，它使用一个名为*命令数据库*的内部知识数据库。该数据库包含一组Shell命令（在不同操作系统上），允许发现浏览器版本（例如，在Linux上使用`google-chrome
    --version`）。
- en: Using the found major browser version (e.g., Chrome 89), WebDriverManager determines
    the correct driver version (e.g., chromedriver 89.0.4389.23). I call this process
    *version resolution*. To ease this process, several driver maintainers (i.e.,
    chromedriver and msedgedriver) publish the specific driver version in their online
    repositories using simple text files (e.g., *https://chromedriver.storage.googleapis.com/LATEST_RELEASE_89*).
    Unfortunately, this information is not available for other drivers, such as geckodriver
    or operadriver. For this reason, WebDriverManager uses another internal knowledge
    database (called *versions database*) to keep the association between the versions
    of browsers and drivers. Both versions and commands databases synchronize their
    values using an online master reference stored on GitHub.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用找到的主要浏览器版本（例如，Chrome 89），WebDriverManager确定正确的驱动程序版本（例如，chromedriver 89.0.4389.23）。我称这个过程为*版本解析*。为了简化这个过程，几个驱动程序维护者（例如chromedriver和msedgedriver）在其在线存储库中发布特定的驱动程序版本信息，使用简单的文本文件（例如，*https://chromedriver.storage.googleapis.com/LATEST_RELEASE_89*）。不幸的是，对于geckodriver或operadriver等其他驱动程序，这些信息是不可用的。因此，WebDriverManager使用另一个内部知识数据库（称为*版本数据库*）来保持浏览器版本和驱动程序之间的关联。这两个版本和命令数据库通过存储在GitHub上的在线主参考进行值的同步。
- en: WebDriverManager downloads the specific driver for the local operating system
    (Windows, Linux, or macOS) and stores it in the local file system in the *driver
    cache* (by default, in the path `~/.cache/selenium`).
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WebDriverManager下载特定的驱动程序，适用于本地操作系统（Windows、Linux或macOS），并将其存储在本地文件系统中的*驱动程序缓存*中（默认情况下在路径`~/.cache/selenium`）。
- en: Finally, WebDriverManager exports the downloaded driver path using the proper
    Java system property (e.g., `webdriver.chrome.driver`).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，WebDriverManager使用适当的Java系统属性（例如，`webdriver.chrome.driver`）导出已下载的驱动程序路径。
- en: For the sake of performance and maintainability, WebDriverManager internally
    uses a *resolution cache*. This cache (by default stored in the driver cache as
    a properties file) keeps the relationship between the resolved driver versions.
    This relationship is valid following a *time-to-live* (TTL) approach. The default
    value of this TTL is one day for drivers (e.g., chromedriver 89.0.4389.23) and
    one hour for browsers (e.g., Chrome 89). The resolution algorithm resolves drivers
    using the cached files in the subsequent invocations (this usually happens in
    a Selenium WebDriver test suite). Then, when a TTL expires, the resolution algorithm
    tries to resolve a new driver release. Finally, when a different browser version
    is detected, WebDriverManager downloads the new driver (if required). Thanks to
    this process, the version compliance of browser and driver is guaranteed even
    for evergreen browsers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能和可维护性考虑，WebDriverManager在内部使用*解析缓存*。该缓存（默认情况下存储为属性文件）保持了解决驱动程序版本之间的关系。此关系遵循*存活时间*（TTL）方法有效。默认情况下，驱动程序的TTL为一天（例如chromedriver
    89.0.4389.23），浏览器的TTL为一小时（例如Chrome 89）。解析算法在后续调用中使用缓存文件来解决驱动程序（通常在Selenium WebDriver测试套件中发生）。然后，当TTL过期时，解析算法尝试解析新的驱动程序发布。最后，当检测到不同的浏览器版本时，WebDriverManager会下载新的驱动程序（如果需要）。通过此过程，即使对于常青树浏览器，也可以确保浏览器和驱动程序的版本兼容性。
- en: '![hosw ab01](assets/hosw_ab01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![hosw ab01](assets/hosw_ab01.png)'
- en: Figure B-1\. WebDriverManager methodology
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图B-1. WebDriverManager方法论
- en: Generic Manager
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用管理器
- en: 'In addition to the browser-specific managers (e.g., `chromedriver()`, `firefoxdriver()`,
    etc.), WebDriverManager provides a *generic* manager, i.e., a manager that can
    be parameterized to act as a specific manager (for Chrome, Firefox, etc.). This
    feature is available using the method `getInstance()` of the WebDriverManager
    API. There are different options to invoke this method:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了特定于浏览器的管理器（例如`chromedriver()`、`firefoxdriver()`等），WebDriverManager还提供了*通用*管理器，即可以参数化为充当特定管理器（例如Chrome、Firefox等）的管理器。通过WebDriverManager
    API的`getInstance()`方法可以使用此功能。有多种调用此方法的选项：
- en: '`getInstance(Class<? extends WebDriver> webDriverClass)`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInstance(Class<? extends WebDriver> webDriverClass)`'
- en: Where `webDriverClass` is a class of the `WebDriver` hierarchy, such as `ChromeDriver.class`,
    `FirefoxDriver.class`, etc.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`webDriverClass`是`WebDriver`层次结构的类，如`ChromeDriver.class`、`FirefoxDriver.class`等。
- en: '`getInstance(DriverManagerType driverManagerType)`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInstance(DriverManagerType driverManagerType)`'
- en: Where `driverManagerType` is an enumeration provided by WebDriverManager to
    identify the available managers. The possible values of this enumeration are `CHROME`,
    `FIREFOX`, `EDGE`, `OPERA`, `CHROMIUM`, `IEXPLORER`, and `SAFARI`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`driverManagerType`是由WebDriverManager提供的枚举，用于识别可用的管理器。该枚举的可能值为`CHROME`、`FIREFOX`、`EDGE`、`OPERA`、`CHROMIUM`、`IEXPLORER`和`SAFARI`。
- en: '`getInstance(String browserName)`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInstance(String browserName)`'
- en: Where `browserName` is the browser name as case-insensitive string. The possible
    values are `Chrome`, `Firefox`, `Edge`, `Opera`, `Chromium`, `IExplorer`, and
    `Safari`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`browserName`是不区分大小写的浏览器名称字符串。可能的值包括`Chrome`、`Firefox`、`Edge`、`Opera`、`Chromium`、`IExplorer`和`Safari`。
- en: '`getInstance()`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInstance()`'
- en: When no parameter is specified, the configuration key `wdm.defaultBrowser` is
    used to select the manager (Chrome by default).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当未指定参数时，将使用配置键`wdm.defaultBrowser`来选择管理器（默认为Chrome）。
- en: Advanced Configuration
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级配置
- en: 'WebDriverManager provides different ways of configuration. First, you can use
    its Java API through each manager. This API allows concatenating several methods
    to specify custom options or preferences. You can find the complete description
    of the WebDriverManager API in its [documentation](https://bonigarcia.dev/webdrivermanager).
    For example, the following command shows how to set up a proxy for the network
    connection:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriverManager提供了不同的配置方式。首先，您可以通过每个管理器使用其Java API。此API允许连接多个方法以指定自定义选项或首选项。您可以在其[文档](https://bonigarcia.dev/webdrivermanager)中找到WebDriverManager
    API的完整描述。例如，以下命令显示如何为网络连接设置代理：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second way to configure WebDriverManager is using Java system properties.
    Each WebDriverManager API method has an equivalent configuration key. For instance,
    the API method `cachePath()` (used to specify the driver cache folder) works the
    same way as the configuration key `wdm.cachePath`. These types of configuration
    keys can be passed, for example, using the command line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 WebDriverManager 的第二种方式是使用 Java 系统属性。每个 WebDriverManager API 方法都有一个相应的配置键。例如，API
    方法 `cachePath()`（用于指定驱动程序缓存文件夹）的工作方式与配置键 `wdm.cachePath` 相同。例如，可以通过命令行传递这些类型的配置键：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, you can also use environment variables to configure WebDriverManager.
    The variable names derive from each configuration key (e.g., `wdm.cachePath`),
    converting them to uppercase and replacing the symbol `.` with `_` (e.g., `WDM_CACHEPATH`).
    This mechanism can be convenient for configuring global parameters at the operating
    system level.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还可以使用环境变量来配置 WebDriverManager。变量名称派生自每个配置键（例如，`wdm.cachePath`），将其转换为大写，并用下划线替换符号
    `.`（例如，`WDM_CACHEPATH`）。此机制可以方便地在操作系统级别配置全局参数。
- en: Other Uses
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他用途
- en: 'In addition to serving as a Java dependency, WebDriverManager can be used in
    other ways, namely:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作为 Java 依赖项外，WebDriverManager 还可以以其他方式使用，即：
- en: As a command-line interface (CLI) tool
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为命令行界面（CLI）工具
- en: This mode allows you to resolve drivers (e.g., chromedriver, geckodriver). In
    addition, this mode allows you to execute browsers in Docker containers and interact
    with them through a remote desktop session.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式允许您解析驱动程序（例如，chromedriver、geckodriver）。此外，此模式还允许您在 Docker 容器中执行浏览器，并通过远程桌面会话与其交互。
- en: As a server
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作为服务器
- en: The WebDriverManager Server is based on HTTP and offers two types of services.
    First, it exposes a simple RESTlike API to resolve drivers. Second, it acts as
    a regular Selenium Server, and therefore, you can use it with different language
    bindings than Java.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriverManager 服务器基于 HTTP，并提供两种类型的服务。首先，它公开了一个简单的类似 REST 的 API 来解析驱动程序。其次，它作为常规
    Selenium 服务器运行，因此您可以与不同于 Java 的语言绑定一起使用它。
- en: As a Java agent
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Java 代理
- en: In this case, and using the JVM instrumentation API, WebDriverManager uses the
    Java instrumentation API to check the objects being created in the JVM. When WebDriver
    objects are instantiated (`ChromeDriver`, `FirefoxDriver`, etc.), the required
    manager is used to resolve its driver (`chromedriver`, `geckodriver`, etc.). Thanks
    to this approach, you can get rid of the WebDriverManager call from your tests.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，并使用 JVM 插装 API，WebDriverManager 使用 Java 插装 API 检查在 JVM 中创建的对象。当实例化 WebDriver
    对象（`ChromeDriver`、`FirefoxDriver` 等）时，将使用所需的管理器来解析其驱动程序（`chromedriver`、`geckodriver`
    等）。由于此方法，您可以从测试中移除 WebDriverManager 的调用。
- en: Manual Driver Management
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动驱动管理
- en: This section describes how to manually implement the driver management process
    (download, setup, and maintenance).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何手动实现驱动程序管理过程（下载、设置和维护）。
- en: Download
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载
- en: The first step for driver management is to download the proper driver. [Table B-1](#driver_websites)
    shows the websites to obtain the drivers for the main browsers. You need to find
    the correct driver version and platform (Windows, Linux, macOS) for the browser
    you plan to use. Regarding the version, the Chrome and Edge (although not Firefox,
    unfortunately) maintainers follow the same versioning schema for drivers and browsers
    to ease this process. So, for instance, if you use Chrome or Edge 91.x, you also
    need to use chromedriver and msedgedriver 91.x. You will find the specific driver
    version in the documentation provided on the websites. For instance, to use Chrome
    91, you need to download ChromeDriver 91.0.4472.19.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动管理的第一步是下载适当的驱动程序。[表 B-1](#driver_websites) 显示了获取主要浏览器驱动程序的网站。您需要为您计划使用的浏览器找到正确的驱动程序版本和平台（Windows、Linux、macOS）。关于版本，Chrome
    和 Edge（但不幸的是，不包括 Firefox）的维护者遵循相同的驱动程序和浏览器版本号方案，以简化此过程。例如，如果您使用 Chrome 或 Edge
    91.x，您还需要使用 chromedriver 和 msedgedriver 91.x。您可以在网站提供的文档中找到具体的驱动程序版本。例如，要使用 Chrome
    91，您需要下载 ChromeDriver 91.0.4472.19。
- en: Table B-1\. Java system properties to set up drivers
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-1\. 设置驱动程序的 Java 系统属性
- en: '| Browser | Driver | Download website |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | 驱动程序 | 下载网站 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Chrome/Chromium | chromedriver | [*https://chromedriver.chromium.org/downloads*](https://chromedriver.chromium.org/downloads)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Chrome/Chromium | chromedriver | [*https://chromedriver.chromium.org/downloads*](https://chromedriver.chromium.org/downloads)
    |'
- en: '| Edge | msedgedriver | [*https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver*](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver)
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Edge | msedgedriver | [*https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver*](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver)
    |'
- en: '| Firefox | geckodriver | [*https://github.com/mozilla/geckodriver/releases*](https://github.com/mozilla/geckodriver/releases)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Firefox | geckodriver | [*https://github.com/mozilla/geckodriver/releases*](https://github.com/mozilla/geckodriver/releases)
    |'
- en: Setup
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置
- en: 'Once you have the required driver for your WebDriver script, you need to set
    it up correctly. There are two ways to carry out this process. The first one is
    adding the driver location (the full path or the parent folder that contains the
    driver) to your `PATH` environmental variable (*env*). The `PATH` env is standard
    in Unix-like (e.g., Linux and macOS) and Windows operating systems. This environmental
    variable allows specifying a set of folders where the operating system locates
    executable programs. The way we configure `PATH` (and other environmental variables)
    depends on the specific operating system. For example, in Windows systems, we
    can do it using its GUI (Control Panel → System → Advanced → Environment Variables).
    In a Unix-like system, we can use the command line to carry out this process,
    for instance, using the following command (or equivalent):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为WebDriver脚本准备好所需的驱动程序后，需要正确设置它们。有两种方法可以进行此过程。第一种方法是将驱动程序位置（完整路径或包含驱动程序的父文件夹）添加到您的`PATH`环境变量中（*env*）。`PATH`环境变量在类Unix系统（如Linux和macOS）和Windows操作系统中是标准的。该环境变量允许指定操作系统定位可执行程序的一组文件夹。我们配置`PATH`（以及其他环境变量）的方式取决于具体的操作系统。例如，在Windows系统中，可以通过其GUI进行配置（控制面板
    → 系统 → 高级 → 环境变量）。在类Unix系统中，我们可以使用命令行来执行此过程，例如使用以下命令（或等效命令）：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The second way to set up the driver is using *Java system properties*, which
    are configuration attributes (in the form of name/value) passed to the JVM. [Table B-2](#system_props)
    summarizes the names for the main drivers in Selenium WebDriver. The value for
    these properties is the full path of a given driver (e.g., `/path/to/drivers/chromedriver`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 设置驱动程序的第二种方法是使用*Java系统属性*，这些属性是以名称/值形式传递给JVM的配置属性。[表 B-2](#system_props)总结了Selenium
    WebDriver中主要驱动程序的名称。这些属性的值是给定驱动程序的完整路径（例如`/path/to/drivers/chromedriver`）。
- en: Table B-2\. Java system properties to set up drivers
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-2\. 设置驱动程序的Java系统属性
- en: '| Browser | Driver | Java system property name |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Browser | Driver | Java系统属性名称 |'
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Chrome/Chromium | chromedriver | `webdriver.chrome.driver` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Chrome/Chromium | chromedriver | `webdriver.chrome.driver` |'
- en: '| Edge | msedgedriver | `webdriver.edge.driver` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Edge | msedgedriver | `webdriver.edge.driver` |'
- en: '| Firefox | geckodriver | `webdriver.gecko.driver` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Firefox | geckodriver | `webdriver.gecko.driver` |'
- en: 'There are two ways to configure these properties: the command line (passing
    the system property using the `-Dname=value` syntax) or Java code. For example,
    [Example B-1](#shell_props) shows the Maven and Gradle commands to execute all
    the tests of a given project while passing the properties to set up the drivers
    for Chrome, Edge, and Firefox. Then, [Example B-2](#java_props) shows how to make
    the same configuration, but this time using Java.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 配置这些属性有两种方法：命令行（使用`-Dname=value`语法传递系统属性）或Java代码。例如，[示例 B-1](#shell_props)展示了使用Maven和Gradle命令来执行给定项目的所有测试，并传递属性以设置Chrome、Edge和Firefox的驱动程序的方法。然后，[示例
    B-2](#java_props)展示了如何进行相同的配置，但这次使用Java语言。
- en: Example B-1\. Maven and Gradle commands to configure system properties in the
    command line
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-1\. Maven和Gradle命令以在命令行中配置系统属性
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Example B-2\. Java commands to configure system properties
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-2\. Java命令以配置系统属性
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Maintenance
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维护
- en: Last but not least, the final step of driver management is to maintain these
    drivers. This maintenance is necessary because evergreen browsers (such as Chrome,
    Edge, or Firefox) upgrade themselves automatically. Although appealing from a
    user perspective, this automated upgrade is problematic for Selenium WebDriver
    scripts where the driver management is manual. In this case, driver and browser
    compatibility is not guaranteed in the long run.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，驱动程序管理的最后一步是维护这些驱动程序。由于Chrome、Edge或Firefox等持续更新的浏览器会自动进行升级，因此这种维护是必要的。尽管从用户角度来看自动升级很吸引人，但对于手动管理驱动程序的Selenium
    WebDriver脚本来说，这种自动化升级会带来问题。在这种情况下，驱动程序和浏览器的兼容性长期无法保证。
- en: 'A specific driver (e.g., chromedriver version 84.0.4147.30) is typically compatible
    with a given browser version (e.g., Chrome 84). Eventually, this compatibility
    is not guaranteed because of the automatic upgrade. As a result, a Selenium WebDriver
    script based on this driver stops working (i.e., the test is said to be broken).
    In practice, Selenium WebDriver developers experience this problem when tests
    fail because of driver and browser incompatibility. For instance, when using Chrome
    as a browser, a broken test due to driver incompatibility reports the following
    error message: “this version of chromedriver only supports Chrome version N” (where
    N is the latest version of Chrome supported by a particular version of chromedriver).
    To illustrate this problem, [Figure B-2](#google-trends) shows the worldwide search
    interest of that error message on Google during 2019 and 2020, together with the
    release date of the different Chrome versions in this period. As you can see,
    the interest over time concerning this error message is related to some Chrome
    releases.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的驱动程序（例如，chromedriver 版本 84.0.4147.30）通常与特定的浏览器版本兼容（例如，Chrome 84）。但是，由于自动升级，这种兼容性并不保证。因此，基于这种驱动程序的
    Selenium WebDriver 脚本可能会停止工作（即测试被称为失败）。在实践中，当由于驱动程序与浏览器不兼容而导致测试失败时，Selenium WebDriver
    开发人员经常会遇到这个问题。例如，在使用 Chrome 作为浏览器时，由于驱动程序不兼容而导致的测试失败会报告以下错误消息：“this version of
    chromedriver only supports Chrome version N”（其中 N 是特定版本 chromedriver 支持的最新 Chrome
    版本）。为了说明这个问题，[图 B-2](#google-trends) 显示了这个错误消息在 2019 年和 2020 年期间在 Google 上的全球搜索兴趣，以及该时期不同
    Chrome 版本的发布日期。正如您所见，关于这个错误消息的兴趣随时间变化与某些 Chrome 版本的发布相关联。
- en: '![hosw ab02](assets/hosw_ab02.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![hosw ab02](assets/hosw_ab02.png)'
- en: Figure B-2\. Worldwide relative interest over time of the search term “this
    version of chromedriver only supports chrome version” in Google Trends together
    with the release dates of Chrome during 2019 and 2020
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-2\. “this version of chromedriver only supports chrome version” 在 Google
    趋势中的全球相对搜索兴趣随时间变化的图表，以及 2019 年和 2020 年 Chrome 的发布日期
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Selenium WebDriver is a library that allows you to control web browsers programmatically.
    The automation is based on the native capabilities of each browser. Therefore,
    we need to place a platform-dependent binary file called *driver* between the
    script/test using the Selenium WebDriver API and the browser. Some examples of
    drivers are chromedriver (for Chrome), geckodriver (for Firefox), and msedgedriver
    (for Edge). This appendix presented the driver management process. This process
    has three steps (download, setup, and maintenance), and it can be done either
    manually or automatically. By default, I recommend you use an automated driver
    management approach. To that aim, the reference tool in Java is WebDriverManager.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 是一个允许你以编程方式控制 web 浏览器的库。自动化基于每个浏览器的本地能力。因此，我们需要在使用 Selenium
    WebDriver API 的脚本/测试和浏览器之间放置一个依赖于平台的二进制文件，称为*驱动程序*。一些驱动程序的例子包括 chromedriver（用于
    Chrome）、geckodriver（用于 Firefox）和 msedgedriver（用于 Edge）。本附录介绍了驱动程序管理过程。此过程包括三个步骤（下载、设置和维护），可以手动或自动完成。默认情况下，我建议您使用自动化驱动程序管理方法。为此，Java
    中的参考工具是 WebDriverManager。
