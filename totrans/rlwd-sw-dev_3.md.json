["```java\npublic List<BankTransaction> findTransactionsGreaterThanEqual(final int amount) {\n    final List<BankTransaction> result = new ArrayList<>();\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        if(bankTransaction.getAmount() >= amount) {\n            result.add(bankTransaction);\n        }\n    }\n    return result;\n}\n```", "```java\npublic List<BankTransaction> findTransactionsInMonth(final Month month) {\n    final List<BankTransaction> result = new ArrayList<>();\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        if(bankTransaction.getDate().getMonth() == month) {\n            result.add(bankTransaction);\n        }\n    }\n    return result;\n}\n```", "```java\npublic List<BankTransaction> findTransactionsInMonthAndGreater(final Month month, final int amount) {\n    final List<BankTransaction> result = new ArrayList<>();\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        if(bankTransaction.getDate().getMonth() == month && bankTransaction.getAmount() >= amount) {\n            result.add(bankTransaction);\n        }\n    }\n    return result;\n}\n```", "```java\n@FunctionalInterface\npublic interface BankTransactionFilter {\n    boolean test(BankTransaction bankTransaction);\n}\n```", "```java\npublic List<BankTransaction> findTransactions(final BankTransactionFilter bankTransactionFilter) {\n    final List<BankTransaction> result = new ArrayList<>();\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        if(bankTransactionFilter.test(bankTransaction)) {\n            result.add(bankTransaction);\n        }\n    }\n    return result;\n}\n```", "```java\nclass BankTransactionIsInFebruaryAndExpensive implements BankTransactionFilter {\n\n    @Override\n    public boolean test(final BankTransaction bankTransaction) {\n        return bankTransaction.getDate().getMonth() == Month.FEBRUARY\n               && bankTransaction.getAmount() >= 1_000);\n    }\n}\n```", "```java\nfinal List<BankTransaction> transactions\n    = bankStatementProcessor.findTransactions(new BankTransactionIsInFebruaryAndExpensive());\n```", "```java\nfinal List<BankTransaction> transactions\n    = bankStatementProcessor.findTransactions(bankTransaction ->\n                bankTransaction.getDate().getMonth() == Month.FEBRUARY\n                && bankTransaction.getAmount() >= 1_000);\n```", "```java\ninterface BankTransactionProcessor {\n    double calculateTotalAmount();\n    double calculateTotalInMonth(Month month);\n    double calculateTotalInJanuary();\n    double calculateAverageAmount();\n    double calculateAverageAmountForCategory(Category category);\n    List<BankTransaction> findTransactions(BankTransactionFilter bankTransactionFilter);\n}\n```", "```java\ninterface CalculateTotalAmount {\n    double calculateTotalAmount();\n}\n\ninterface CalculateAverage {\n    double calculateAverage();\n}\n\ninterface CalculateTotalInMonth {\n    double calculateTotalInMonth(Month month);\n}\n```", "```java\n@FunctionalInterface\npublic interface BankTransactionSummarizer {\n    double summarize(double accumulator, BankTransaction bankTransaction);\n}\n\n@FunctionalInterface\npublic interface BankTransactionFilter {\n    boolean test(BankTransaction bankTransaction);\n}\n\npublic class BankTransactionProcessor {\n\n    private final List<BankTransaction> bankTransactions;\n\n    public BankStatementProcessor(final List<BankTransaction> bankTransactions) {\n        this.bankTransactions = bankTransactions;\n    }\n\n    public double summarizeTransactions(final BankTransactionSummarizer bankTransactionSummarizer) {\n        double result = 0;\n        for(final BankTransaction bankTransaction: bankTransactions) {\n            result = bankTransactionSummarizer.summarize(result, bankTransaction);\n        }\n        return result;\n    }\n\n    public double calculateTotalInMonth(final Month month) {\n        return summarizeTransactions((acc, bankTransaction) ->\n                bankTransaction.getDate().getMonth() == month ? acc  + bankTransaction.getAmount() : acc\n        );\n    }\n\n\t// ...\n\n    public List<BankTransaction> findTransactions(final BankTransactionFilter bankTransactionFilter) {\n        final List<BankTransaction> result = new ArrayList<>();\n        for(final BankTransaction bankTransaction: bankTransactions) {\n            if(bankTransactionFilter.test(bankTransaction)) {\n                result.add(bankTransaction);\n            }\n        }\n        return bankTransactions;\n    }\n\n    public List<BankTransaction> findTransactionsGreaterThanEqual(final int amount) {\n        return findTransactions(bankTransaction -> bankTransaction.getAmount() >= amount);\n    }\n\n    // ...\n}\n```", "```java\nbankTransactions\n    .stream()\n    .filter(bankTransaction -> bankTransaction.getAmount() >= 1_000)\n    .collect(toList());\n```", "```java\npublic class SummaryStatistics {\n\n    private final double sum;\n    private final double max;\n    private final double min;\n    private final double average;\n\n    public SummaryStatistics(final double sum, final double max, final double min, final double average) {\n        this.sum = sum;\n        this.max = max;\n        this.min = min;\n        this.average = average;\n    }\n\n    public double getSum() {\n        return sum;\n    }\n\n    public double getMax() {\n        return max;\n    }\n\n    public double getMin() {\n        return min;\n    }\n\n    public double getAverage() {\n        return average;\n    }\n}\n```", "```java\npublic interface Exporter {\n    void export(SummaryStatistics summaryStatistics);\n}\n```", "```java\npublic interface Exporter {\n    String export(SummaryStatistics summaryStatistics);\n}\n```", "```java\npublic class HtmlExporter implements Exporter {\n    @Override\n    public String export(final SummaryStatistics summaryStatistics) {\n\n        String result = \"<!doctype html>\";\n        result += \"<html lang='en'>\";\n        result += \"<head><title>Bank Transaction Report</title></head>\";\n        result += \"<body>\";\n        result += \"<ul>\";\n        result += \"<li><strong>The sum is</strong>: \" + summaryStatistics.getSum() + \"</li>\";\n        result += \"<li><strong>The average is</strong>: \" + summaryStatistics.getAverage() + \"</li>\";\n        result += \"<li><strong>The max is</strong>: \" + summaryStatistics.getMax() + \"</li>\";\n        result += \"<li><strong>The min is</strong>: \" + summaryStatistics.getMin() + \"</li>\";\n        result += \"</ul>\";\n        result += \"</body>\";\n        result += \"</html>\";\n        return result;\n    }\n}\n```", "```java\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 0\n\nException in thread \"main\" java.nio.file.NoSuchFileException: src/main/resources/bank-data-simple.csv\n\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n```", "```java\nfinal String[] columns = line.split(\",\");\n\nif(columns.length < EXPECTED_ATTRIBUTES_LENGTH) {\n    throw new CSVSyntaxException();\n}\n```", "```java\npublic class OverlySpecificBankStatementValidator {\n\n    private String description;\n    private String date;\n    private String amount;\n\n    public OverlySpecificBankStatementValidator(final String description, final String date, final String amount) {\n        this.description = Objects.requireNonNull(description);\n        this.date = Objects.requireNonNull(description);\n        this.amount = Objects.requireNonNull(description);\n    }\n\n    public boolean validate() throws DescriptionTooLongException,\n                                     InvalidDateFormat,\n                                     DateInTheFutureException,\n                                     InvalidAmountException {\n\n        if(this.description.length() > 100) {\n            throw new DescriptionTooLongException();\n        }\n\n        final LocalDate parsedDate;\n        try {\n            parsedDate = LocalDate.parse(this.date);\n        }\n        catch (DateTimeParseException e) {\n            throw new InvalidDateFormat();\n        }\n        if (parsedDate.isAfter(LocalDate.now())) throw new DateInTheFutureException();\n\n        try {\n            Double.parseDouble(this.amount);\n        }\n        catch (NumberFormatException e) {\n            throw new InvalidAmountException();\n        }\n        return true;\n    }\n}\n```", "```java\npublic boolean validate() {\n\n    if(this.description.length() > 100) {\n        throw new IllegalArgumentException(\"The description is too long\");\n    }\n\n    final LocalDate parsedDate;\n    try {\n        parsedDate = LocalDate.parse(this.date);\n    }\n    catch (DateTimeParseException e) {\n        throw new IllegalArgumentException(\"Invalid format for date\", e);\n    }\n    if (parsedDate.isAfter(LocalDate.now())) throw new IllegalArgumentException(\"date cannot be in the future\");\n\n    try {\n        Double.parseDouble(this.amount);\n    }\n    catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid format for amount\", e);\n    }\n    return true;\n}\n```", "```java\npublic class Notification {\n    private final List<String> errors = new ArrayList<>();\n\n    public void addError(final String message) {\n        errors.add(message);\n    }\n\n    public boolean hasErrors() {\n        return !errors.isEmpty();\n    }\n\n    public String errorMessage() {\n        return errors.toString();\n    }\n\n    public List<String> getErrors() {\n        return this.errors;\n    }\n\n}\n```", "```java\npublic Notification validate() {\n\n    final Notification notification = new Notification();\n    if(this.description.length() > 100) {\n        notification.addError(\"The description is too long\");\n    }\n\n    final LocalDate parsedDate;\n    try {\n        parsedDate = LocalDate.parse(this.date);\n        if (parsedDate.isAfter(LocalDate.now())) {\n            notification.addError(\"date cannot be in the future\");\n        }\n    }\n    catch (DateTimeParseException e) {\n        notification.addError(\"Invalid format for date\");\n    }\n\n    final double amount;\n    try {\n        amount = Double.parseDouble(this.amount);\n    }\n    catch (NumberFormatException e) {\n        notification.addError(\"Invalid format for amount\");\n    }\n    return notification;\n}\n```", "```java\n@throws  NoSuchFileException if the file does not exist\n@throws  DirectoryNotEmptyException if the file is a directory and\ncould not otherwise be deleted because the directory is not empty\n@throws  IOException if an I/O error occurs\n@throws  SecurityException In the case of the default provider,\nand a security manager is installed, the {@link SecurityManager#checkDelete(String)}\nmethod is invoked to check delete access to the file\n```", "```java\npublic String read(final Source source) throws OracleException { ... }\n```", "```java\ntry {\n    while (true) {\n        System.out.println(source.read());\n    }\n}\ncatch(NoDataException e) {\n}\n```", "```java\nfinal String[] columns = line.split(\",\");\n\nif(columns.length < EXPECTED_ATTRIBUTES_LENGTH) {\n    return null;\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.iteratrlearning</groupId>\n    <artifactId>bankstatement_analyzer</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.7.0</version>\n                <configuration>\n                    <source>9</source>\n                    <target>9</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n    </dependenciesn>\n</project>\n```", "```java\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building bankstatement_analyzer 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1.063 s\n[INFO] Finished at: 2018-06-10T12:14:48+01:00\n[INFO] Final Memory: 10M/47M\n```", "```java\napply plugin: 'java'\napply plugin: 'application'\n\ngroup = 'com.iteratrlearning'\nversion = '1.0-SNAPSHOT'\n\nsourceCompatibility = 9\ntargetCompatibility = 9\n\nmainClassName = \"com.iteratrlearning.MainApplication\"\n\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    testImplementation group: 'junit', name: 'junit', version:'4.12'\n}\n```", "```java\nBUILD SUCCESSFUL in 1s\n2 actionable tasks: 2 executed\n```"]