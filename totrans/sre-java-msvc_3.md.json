["```java\n.   ____          _            __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n'  |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot ::       (v...RELEASE)\n\n:56:56 main INFO c.m.MySampleService - Starting MySampleService on\n HOST with PID 12624\n:56:56 main INFO c.m.MySampleService - The following profiles are active: logging\n:56:56 main INFO o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refresh\n  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplication\n  Context@2a5c8d3f: startup date [Tue Sep 17 14:56:56 CDT]; root of context\n:56:57 background-preinit INFO o.h.v.i.util.Version - HV000001: Hibernate Validator\n  5.3.6.Final\n:57:02 main INFO o.s.b.c.e.t.TomcatEmbeddedServletContainer - Tomcat initialized\n  with port(s): 8080 (http)\n:57:03 localhost-startStop-1 INFO i.m.c.i.l.LoggingMeterRegistry - publishing\n  metrics to logs every 10s\n:57:07 localhost-startStop-1 INFO o.s.b.a.e.m.EndpointHandlerMapping - Mapped\n  \"{[/env/{name:.*}],methods=[GET],produces=[application/\n  vnd.spring-boot.actuator.v1+json || application/json]}\" onto public\n  java.lang.Object org.springframework.boot.actuate.endpoint.mvc.\n  EnvironmentMvcEndpoint.value(java.lang.String)\n:57:07 localhost-startStop-1 INFO o.s.b.w.s.FilterRegistrationBean - Mapping filter:\n 'metricsFilter' to: [/*]\n:57:11 main INFO o.mongodb.driver.cluster - Cluster created with settings\n {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN,\n serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}\n:57:12 main INFO o.s.b.a.e.j.EndpointMBeanExporter - Registering beans for JMX\n exposure on startup\n:57:12 main INFO o.s.b.a.e.j.EndpointMBeanExporter - Located managed bean\n  'healthEndpoint': registering with JMX server as MBean\n  [org.springframework.boot:type=Endpoint,name=healthEndpoint]\n:57:12 main INFO o.s.b.c.e.t.TomcatEmbeddedServletContainer - Tomcat started on\n  port(s): 8080 (http)\n:57:13 cluster-ClusterId{value='5d813a970df1cb31507adbc2', description='null'}-\n  localhost:27017 INFO o.mongodb.driver.cluster - Exception in monitor thread\n  while connecting to server localhost:27017\ncom.mongodb.MongoSocketOpenException: Exception opening socket ![1](../images/00112.png)\n  at c.m.c.SocketStream.open(SocketStream.java:63)\n  at c.m.c.InternalStreamConnection.open(InternalStreamConnection.java:115)\n  at c.m.c.DefaultServerMonitor$ServerMonitorRunnable.run(\n    DefaultServerMonitor.java:113)\n  at java.lang.Thread.run(Thread.java:748)\nCaused by: j.n.ConnectException: Connection refused: connect\n  at j.n.DualStackPlainSocketImpl.waitForConnect(Native Method)\n  at j.n.DualStackPlainSocketImpl.socketConnect(\n    DualStackPlainSocketImpl.java:85)\n  at j.n.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n  at j.n.AbstractPlainSocketImpl.connectToAddress(\n    AbstractPlainSocketImpl.java:206)\n  at j.n.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n  at j.n.PlainSocketImpl.connect(PlainSocketImpl.java:172)\n  at j.n.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n  at j.n.Socket.connect(Socket.java:589)\n  at c.m.c.SocketStreamHelper.initialize(SocketStreamHelper.java:57)\n  at c.m.c.SocketStream.open(SocketStream.java:58)\n  ... 3 common frames omitted\n:57:13 main INFO c.m.PaymentsController - [GET] Payment 123456 retrieved in 37ms. ![2](../images/00059.png)\n:57:13 main INFO c.m.PaymentsController - [GET] Payment 789654 retrieved in 38ms\n... (hundreds of other payments retrieved in <40ms)\n:57:13 main INFO c.m.PaymentsController - [GET] Payment 567533 retrieved in 342ms.\n:58.00 main INFO c.m.PaymentsController - Payment near cache contains 2 entries. ![3](../images/00067.png)\n```", "```java\ndependencies {\n    runtimeOnly(\"org.springframework.cloud:spring-cloud-starter-zipkin\") ![1](../images/00112.png)\n}\n```", "```java\nspring.zipkin.baseUrl: http://YOUR_ZIPKIN_HOST:9411/\n```", "```java\n@RestController\npublic class CustomerController {\n  private final Tracer tracer;\n\n  public CustomerController(Tracer tracer) {\n    this.tracer = tracer;\n  }\n\n  @GetMapping(\"/customer/{id}\") ![1](../images/00112.png)\n  public Customer findCustomerById(@PathVariable String id) {\n    Span span = tracer.nextSpan().name(\"findCustomer\"); ![2](../images/00059.png)\n    try (Tracer.SpanInScope ignored = tracer.withSpanInScope(span.start())) {\n        Customer customer = ... // Database access to lookup customer\n        span.tag(\"country\", customer.getAddress().getCountry()); ![3](../images/00067.png)\n        return customer;\n    }\n    finally {\n        span.finish(); ![4](../images/00016.png)\n    }\n  }\n}\n```", "```java\n@Bean\npublic Sampler defaultSampler() {\n  return Sampler.ALWAYS_SAMPLE;\n}\n```", "```java\nspring.sleuth.sampler.rate: 2000\n```", "```java\nspring.sleuth.sampler.probability: 0.1\n```", "```java\n@SpringBootApplication\npublic class GatewayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n}\n\n@RestController\nclass GatewayController {\n    private static final String FAILURE_INJECTION_BAGGAGE = \"failure.injection\";\n\n    @Value(\"${remote.home}\")\n    private URI home;\n\n    @Bean\n    BaggagePropagationCustomizer baggagePropagationCustomizer() {\n        return builder -> builder.add(BaggagePropagationConfig.SingleBaggageField\n                .remote(BaggageField.create(FAILURE_INJECTION_BAGGAGE)));\n    }\n\n    @GetMapping(\"/proxy/path/**\")\n    public Mono<ResponseEntity<byte[]>> proxyPath(ProxyExchange<byte[]> proxy) {\n        String serviceToFail = \"\";\n        if (serviceToFail != null) {\n            BaggageField.getByName(FAILURE_INJECTION_BAGGAGE)\n              .updateValue(serviceToFail);\n        }\n\n        String path = proxy.path(\"/proxy/path/\");\n        return proxy.uri(home.toString() + \"/foos/\" + path).get();\n    }\n}\n```", "```java\n@Component\npublic class FailureInjectionTestingHandlerFilterFunction implements WebFilter {\n    @Value(\"${spring.application.name}\")\n    private String serviceName;\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n        if (serviceName.equals(BaggageField.getByName(\"failure.injection\")\n              .getValue())) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            return Mono.empty();\n        }\n\n        return chain.filter(exchange);\n    }\n}\n```", "```java\n@Component\npublic class FailureInjectionWebfluxTags extends DefaultWebFluxTagsProvider {\n    @Value(\"${spring.application.name}\")\n    private String serviceName;\n\n    @Override\n    public Iterable<Tag> httpRequestTags(ServerWebExchange exchange, Throwable ex) {\n        return Tags.concat(\n                super.httpRequestTags(exchange, ex),\n                \"failure.injection\",\n                serviceName.equals(BaggageField\n                  .getByName(\"failure.injection\").getValue()) ? \"true\" : \"false\"\n        );\n    }\n}\n```"]