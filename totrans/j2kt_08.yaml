- en: Chapter 8\. Static Methods to Top-Level Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。从静态方法到顶级函数
- en: Standalone functions are one of the fundamental building blocks of software.
    They have to be declared as methods on a class in Java, but in Kotlin we can declare
    them as top-level entities. When should we prefer top-level functions, and how
    do we refactor our way there from Java?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立函数是软件的基本构建块之一。在 Java 中，它们必须声明为类的方法，但在 Kotlin 中，我们可以将它们声明为顶级实体。我们何时应该优先使用顶级函数，以及如何从
    Java 重构到那里呢？
- en: Java Statics
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 的静态
- en: 'All values and functions in a Java program have to belong to a class: they
    are *members* of that class. Java calls member-values *fields*, and member-functions
    *methods*. By default, fields values are per-instance of the class: different
    instances have different values. Methods are also per-instance in that they have
    access to the state of the instance that they are invoked on. If we mark fields
    as `static`, though, they are shared between all instances of the class. Static
    methods only have access to this shared state (and visible static fields in other
    classes), but in return for this restriction, we can invoke them without needing
    an instance of the class.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java 程序中的所有值和函数都必须属于一个类：它们是该类的 *成员*。Java 将成员值称为 *字段*，成员函数称为 *方法*。默认情况下，字段值是每个类的实例独有的：不同的实例具有不同的值。方法也是每个实例的，因为它们可以访问调用它们的实例的状态。但是，如果我们将字段标记为
    `static`，它们将在类的所有实例之间共享。静态方法只能访问这个共享状态（以及其他类中可见的静态字段），但作为对此限制的回报，我们可以在不需要类的实例的情况下调用它们。
- en: To simplify Java, the language designers tied all code and data to classes.
    We have class-scoped static state, so we need class-scoped static methods. They
    could have added freestanding data and functions, but static fields and methods
    will do. If the language had options, then developers would have to choose between
    them, and less choice is often better. The designers then carried this language
    design decision forward to the Java Virtual Machine, which in turn has no way
    to express top-level code or data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化 Java，语言设计者将所有代码和数据都与类绑定在一起。我们有类范围的静态状态，所以我们需要类范围的静态方法。他们本可以添加独立的数据和函数，但是静态字段和方法足够了。如果语言有选项，开发人员就必须在它们之间进行选择，而较少的选择通常更好。然后，设计者将这种语言设计决策延续到了
    Java 虚拟机，而 Java 虚拟机又没有办法表达顶级代码或数据。
- en: 'Sometimes we have a class with both nonstatic and static methods acting on
    the same type—for example, the email class with a static parsing method we saw
    in [Chapter 3](ch03.html#java-to-kotlin-classes). Often, though, we end up with
    a class composed of only static methods. When there is no static state for them
    to share, these methods are really just stand-alone functions grouped together
    and called via their class name, like the methods from the `java.util.Collections`
    class, for example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们有一个类，其中既有非静态方法又有静态方法作用于相同的类型——例如，在[第 3 章](ch03.html#java-to-kotlin-classes)中看到的具有静态解析方法的电子邮件类。然而，通常情况下，我们最终得到的是一个只包含静态方法的类。当没有静态状态可供它们共享时，这些方法实际上只是一组独立的函数，通过它们的类名组合在一起并调用，就像
    `java.util.Collections` 类的方法一样：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Amazingly, the industry didn’t really notice how much of a pain that `Collections.`
    prefix was for a while. This was because we wrote our programs by adding more
    and more methods to types that we owned, so we rarely needed static functions.
    Static functions are useful when we want to add functionality *without* adding
    a method to the type that they act on. This might be because our classes are already
    sagging under the weight of all the methods that we have already added to them,
    or because we don’t own the class and so can’t add the method to it. Another reason
    for using static functions rather than methods is because the functionality only
    applies to some instantiations of a generic type, so it cannot be declared as
    a member of the generic. That `Collections.max`, for example, only applies to
    a collection with comparable elements.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，行业并没有真正注意到 `Collections.` 前缀有多么烦人一段时间。这是因为我们通过向我们拥有的类型添加越来越多的方法来编写我们的程序，所以我们很少需要静态函数。当我们想要添加功能而不是向类型添加方法时，静态函数是有用的。这可能是因为我们的类已经承受了我们已经添加到它们的所有方法的重量，或者因为我们不拥有该类，因此无法将方法添加到其中。使用静态函数而不是方法的另一个原因是因为功能仅适用于泛型类型的某些实例化，因此无法将其声明为泛型的成员。例如，`Collections.max`
    仅适用于具有可比较元素的集合。
- en: 'Over time, we began to appreciate the advantages of using standard interfaces,
    like the Java collections, instead of working with our own abstractions. Java
    5 (with its generics) was the first release that allowed us to use collections
    directly rather than wrapping them with our own classes. It’s no accident then
    that Java 5 also brought the ability to `import static java.util.Collections.max`
    so that we could then write:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们开始欣赏使用标准接口（例如Java集合）的优势，而不是使用我们自己的抽象。Java 5（带有泛型）是第一个允许我们直接使用集合而不是用自己的类包装它们的版本。因此，Java
    5还带来了`import static java.util.Collections.max`的能力，以便我们可以编写：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that this is really only a convenience provided by the compiler, because
    the JVM still only actually supports static methods rather than true top-level
    functions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这实际上只是编译器提供的一种便利，因为JVM仍然只支持静态方法而不是真正的顶级函数。
- en: Kotlin Top-Level Functions, Objects, and Companions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin顶级函数、对象和伴生对象
- en: Kotlin allows functions (and properties and constants) to be declared outside
    of classes. In this case, because the JVM has nowhere else for them to go, the
    compiler generates a class with static members for these top-level declarations.
    By default, it derives the name of the class from the name of the file defining
    the functions. For example, functions defined in `top-level.kt` end up as static
    methods on a class called `Top_levelKt`. If we know the name of the class, we
    can reference it from Java by either static importing `Top_LevelKt.foo` or directly
    invoking `Top_levelKt.foo()`. If we don’t like the ugliness of `Top_LevelKt`,
    we can explicitly name the generated class by adding an annotation, `@file:JvmName`,
    to the top of the file, as we’ll see later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin允许在类外声明函数（以及属性和常量）。在这种情况下，由于JVM没有其他地方可以存放它们，编译器会为这些顶级声明生成一个具有静态成员的类。默认情况下，它会根据定义函数的文件的名称来派生类的名称。例如，在`top-level.kt`中定义的函数最终会成为类`Top_levelKt`上的静态方法。如果我们知道类的名称，我们可以通过静态导入`Top_LevelKt.foo`或直接调用`Top_levelKt.foo()`来引用它。如果我们不喜欢`Top_LevelKt`的丑陋，我们可以通过在文件顶部添加注解`@file:JvmName`来显式命名生成的类，我们将在本章后面看到。
- en: 'As well as these top-level functions, Kotlin also allows us to define properties
    and functions scoped, like Java statics, to a class rather than an instance. Instead
    of just marking these as `static`, Kotlin borrows from Scala and collects them
    into `object` declarations. This type of `object` declaration (as opposed to the
    `object` expression that creates anonymous types) defines a singleton: a type
    with only one instance that provides a global point of access to that instance.
    All the members of an `object` will be compiled to members of a class with the
    name of the object. They won’t actually be static methods unless specifically
    marked with `@JvmStatic`, though. This is because Kotlin allows these objects
    to extend classes and implement interfaces, and that is incompatible with static
    declarations.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些顶级函数之外，Kotlin还允许我们定义属性和函数，它们的作用域与Java静态类似，而不是实例。Kotlin不仅将这些标记为`static`，而且还借鉴了Scala，并将它们收集到`object`声明中。这种类型的`object`声明（与创建匿名类型的`object`表达式相对）定义了一个单例：一个只有一个实例的类型，为该实例提供了全局访问点。对象的所有成员将编译为具有对象名称的类的成员。除非特别标记为`@JvmStatic`，否则它们实际上不会是静态方法。这是因为Kotlin允许这些对象扩展类和实现接口，而这与静态声明不兼容。
- en: When we need to group static and nonstatic members in the same class, we can
    declare the static parts in a `companion object` inside the (otherwise nonstatic)
    class declaration. This groups them in the file, and code in a companion object
    can access private state in instances of its containing class. Companion objects
    can also extend another class and implement interfaces—something that Java statics
    cannot do. Compared to Java statics though, companion objects are cumbersome if
    we just want to define one or two static methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要将静态成员和非静态成员分组到同一个类中时，我们可以在（否则非静态的）类声明内部声明静态部分为`companion object`。这样可以将它们组合在文件中，并且伴生对象中的代码可以访问其包含类实例的私有状态。伴生对象还可以扩展另一个类并实现接口——这是Java静态无法做到的。但与Java静态相比，如果我们只想定义一两个静态方法，伴生对象会显得很繁琐。
- en: In Kotlin, then, we can write non-instance-scoped functions as either top-level
    functions or methods on a singleton object, and this object may be a companion
    object or not scoped to a type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在Kotlin中，我们可以将非实例作用域函数编写为顶级函数或单例对象上的方法，而这个对象可能是伴生对象或不限于类型的范围。
- en: Of these, all things being equal, we should default to top-level functions.
    They are the simplest to declare and reference, and can be moved from file to
    file within a package without affecting Kotlin client code (but see the caveat
    in [“Moving Top-Level Functions”](#moving-top-level-functions)). We reserve declaring
    functions as methods on a singleton object instead of top-level functions for
    when we need the ability to implement an interface, or otherwise group functions
    more tightly. We use a companion object when we need to mix static and nonstatic
    behavior within a class, or to write factory methods with names like `MyType.of(...)`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些选择中，一切平等的情况下，我们应该默认使用顶层函数。它们最简单声明和引用，并且可以在包内的不同文件中移动而不影响Kotlin客户端代码（但请参见[“移动顶层函数”](#moving-top-level-functions)中的警告）。我们将函数声明为单例对象的方法，而不是顶层函数，是为了当我们需要实现接口或者更紧密地组合函数时使用。当我们需要在类内混合静态和非静态行为，或者编写类似`MyType.of(...)`的工厂方法时，我们使用伴生对象。
- en: As with many aspects of programming, we start with the simplest thing that could
    work, which is usually a top-level function, and refactor to a more complicated
    solution only when it brings benefits, such as a more expressive API for our clients,
    or better maintainability for us.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 就像编程的许多方面一样，我们从最简单可能运行的东西开始，通常是顶层函数，仅在它为我们的客户提供更具表现力的API或者对我们更易于维护时，才将其重构为更复杂的解决方案。
- en: Refactoring from Static Methods to Top-Level Functions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从静态方法重构到顶层函数
- en: While we prefer to use top-level declarations, the Java to Kotlin conversion
    built into IntelliJ doesn’t. It converts our Java statics into object methods.
    Let’s see how to refactor from Java, through object declarations, to top-level
    functions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们更喜欢使用顶层声明，但IntelliJ内置的Java到Kotlin转换不这样做。它将我们的Java静态方法转换为对象方法。让我们看看如何从Java重构，通过对象声明到顶层函数。
- en: 'At Travelator, we allow our customers to build shortlists, such as a shortlist
    of routes when planning their trip, or a shortlist of hotel rooms on those routes.
    The user can rank items in a shortlist by different criteria and discard items
    to narrow down the results to a final choice. Following the guidance in [“Don’t
    Mutate Shared Collections”](ch06.html#dont-mutate-shared-collections), a shortlist
    is stored as an immutable list. The functions for manipulating a shortlist (returning
    a modified copy rather than mutating the list) are implemented as static methods
    of the `Shortlists` class:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Travelator，我们允许我们的客户建立短列表，例如在计划旅行时的路线短列表，或者在这些路线上的酒店客房短列表。用户可以按不同的标准对短列表中的项目进行排名，并丢弃项目以缩小结果到最终选择。遵循[“不要改变共享集合”](ch06.html#dont-mutate-shared-collections)的指导，短列表存储为不可变列表。用于操作短列表（返回修改后的副本而不是变异列表）的函数作为`Shortlists`类的静态方法实现：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 8.1 [static-to-top-level.0:src/main/java/travelator/Shortlists.java]](https://java-to-kotlin.dev/code.html?ref=8.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.1&show=diff)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.1 [static-to-top-level.0:src/main/java/travelator/Shortlists.java]](https://java-to-kotlin.dev/code.html?ref=8.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.1&show=diff)'
- en: 'The functions in `Shortlists` are static methods, and have to be referenced
    as such. Spelled out longhand, this looks like:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shortlists`中的函数是静态方法，必须如此引用。如果用长格式拼写出来，看起来是这样的：'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 8.2 [static-to-top-level.5:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.2&show=diff)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.2 [static-to-top-level.5:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.2&show=diff)'
- en: 'We usually `static import` the methods though, and they are named to read better
    that way:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常我们会`static import`这些方法，它们以此方式命名以更好地阅读：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 8.3 [static-to-top-level.5:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.3&show=diff)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.3 [static-to-top-level.5:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.3&show=diff)'
- en: 'Converting the Java to Kotlin with IntelliJ we get:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用IntelliJ将Java转换为Kotlin，我们得到：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 8.4 [static-to-top-level.5:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.4&show=diff)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.4 [static-to-top-level.5:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.4&show=diff)'
- en: Actually, that isn’t quite true. At the time of writing, the converter added
    some spurious nullability to types, undid static imports (leaving us with `Collectors.to​Un⁠modi⁠fiableList()`,
    for example), and managed to create an imports list that didn’t compile. Fixing
    up the file manually gives us confidence that the machines won’t take our jobs
    for a few years yet.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这并不完全正确。在撰写本文时，转换器给类型添加了一些不必要的可空性，撤销了静态导入（使我们得到 `Collectors.to​Un⁠modi⁠fiableList()`，例如），并且成功创建了一个无法编译的导入列表。手动修复文件使我们相信机器还需要几年的时间才能取代我们的工作。
- en: In [Chapter 3](ch03.html#java-to-kotlin-classes), we saw that converting a Java
    class with static *and* nonstatic methods produced a Kotlin class with a companion
    object. Here the conversion has produced only a top-level object. Because this
    Java class had no nonstatic methods or state, there is no need for the Kotlin
    translation to include an instantiable class. Classes with both static and nonstatic
    methods are less suitable for conversion to top-level functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.html#java-to-kotlin-classes) 中，我们看到将具有静态方法和非静态方法的 Java 类转换为 Kotlin
    类时会产生一个伴生对象。在这里，转换仅产生了一个顶级对象。因为这个 Java 类没有非静态方法或状态，所以 Kotlin 转换不需要包含一个可实例化的类。具有静态方法和非静态方法的类不太适合转换为顶级函数。
- en: While the conversion didn’t go completely smoothly at the Kotlin level, on the
    plus side, no Java code was harmed in the process. The client code remains unchanged,
    because the `@JvmStatic` annotations allow Java code to see the methods as static
    methods on a `Shortlists` class, as they were before the conversion.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Kotlin 层面上转换并不完全顺利，但好处是，在此过程中没有损坏任何 Java 代码。客户端代码保持不变，因为 `@JvmStatic` 注解允许
    Java 代码将这些方法视为 `Shortlists` 类上的静态方法，就像转换之前一样。
- en: 'We want to convert the methods to be top-level functions, but we can’t just
    move them, because Java only understands methods, not functions. If these functions
    were compiled to methods on a class called `Shortlists`, Java would be happy,
    and that is the job of the `@file:JvmName` annotation we mentioned earlier. We
    can manually add the annotation at the top of the file, and remove the `object`
    scope and `@JvmStatic` annotations to get:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将这些方法转换为顶级函数，但我们不能简单地移动它们，因为 Java 只理解方法，而不是函数。如果这些函数被编译为名为 `Shortlists`
    的类上的方法，Java 就会很高兴，这就是我们之前提到的 `@file:JvmName` 注解的作用。我们可以在文件顶部手动添加注解，并移除 `object`
    作用域和 `@JvmStatic` 注解，得到：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 8.5 [static-to-top-level.6:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.5&show=diff)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.5 [static-to-top-level.6:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.5&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=8.5&show=diff)'
- en: 'This keeps our Java happy, but irritatingly, it breaks some Kotlin code that
    was calling the methods. Here, for example, are the imports for a test:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这保持了我们的 Java 代码的正常运行，但令人恼火的是，它破坏了一些调用这些方法的 Kotlin 代码。例如，这是一个测试的导入语句：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 8.6 [static-to-top-level.6:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.6&show=diff)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.6 [static-to-top-level.6:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.6&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=8.6&show=diff)'
- en: 'These were importing the static Java methods, but Kotlin can’t import its own
    top-level functions in the same way, so these lines fail with `Unresolved reference:
    Shortlists`. As far as Kotlin is concerned, the functions are defined in the scope
    of the package, not in a class in that package. The compiler may compile them
    to static methods of a JVM class called `ShortlistsKt`, but that class is an implementation
    detail of how the compiler maps Kotlin language concepts to the JVM platform and
    is not visible to our Kotlin code at compile time.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '这些代码正在导入静态的 Java 方法，但 Kotlin 不能以同样的方式导入自己的顶级函数，因此这些行会因为 `Unresolved reference:
    Shortlists` 而失败。就 Kotlin 而言，这些函数是在包的范围内定义的，而不是在该包中的一个类中。编译器可能会将它们编译为 `ShortlistsKt`
    JVM 类的静态方法，但该类是编译器将 Kotlin 语言概念映射到 JVM 平台的实现细节，并且在编译时不可见于我们的 Kotlin 代码。  '
- en: We could go through all the compilation errors and manually fix the imports
    to refer to the function at package scope. For example, we would have to change
    `import` `travelator.Shortlists.sorted` to `import travelator.sorted`. This is
    easy enough if the change affects a few files, but if the change has had a wide
    impact, fixing all the imports is a tedious job, albeit one that *might* be achieved
    with a single global search and replace.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以浏览所有编译错误，并手动修复导入以引用包作用域的函数。例如，我们必须将`import travelator.Shortlists.sorted`更改为`import
    travelator.sorted`。如果更改只影响了几个文件，这是很容易的，但是如果更改广泛影响了许多文件，修复所有导入将是一个繁琐的工作，尽管这可能可以通过全局搜索和替换一次性完成。
- en: Luckily, while we were writing this book, IntelliJ gained a “Move to top level”
    refactoring. Let’s revert the last Kotlin change, back to the object declaration,
    and try again.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在我们撰写本书的过程中，IntelliJ增加了“移动到顶层”的重构功能。让我们回退最后的Kotlin更改，回到对象声明，并再试一次。
- en: Move to Top Level
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动到顶层
- en: 'As we write this, the refactoring is so new that it isn’t available on the
    refactoring menu, but Alt-Enter on an object method name gives the option “Move
    to top level”. We’ll do `sorted` first. IntelliJ moves the method out of the object
    scope to the file level:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们撰写本书时所说，这种重构是如此新颖，以至于在重构菜单中还不可用，但在对象方法名称上使用Alt-Enter会提供“移动到顶层”的选项。我们首先会处理`sorted`。IntelliJ将方法从对象范围移到文件级别：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 8.7 [static-to-top-level.7:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.7&show=diff)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.7 [static-to-top-level.7:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.7&show=diff)'
- en: 'Unfortunately, it failed to remove the `@JvmStatic` annotation, so we have
    to delete that ourselves to get the code to compile. Once we do, we find that
    it has at least fixed up the callers, which was the problem we had when we just
    moved the method ourselves. Where we explicitly referenced the method in Java
    as `ShortLists.sorted`, we now have:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它未能删除`@JvmStatic`注解，因此我们必须自己删除才能使代码编译通过。一旦我们这样做了，我们发现它至少修复了调用者，这正是我们在自行移动方法时遇到的问题。在Java中明确引用方法为`ShortLists.sorted`的地方，现在我们有了：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 8.8 [static-to-top-level.8:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.8&show=diff)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.8 [static-to-top-level.8:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.8&show=diff)'
- en: 'For some reason, where we had a static import, things have become worse:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种原因，在我们进行了静态导入之后，情况变得更糟：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 8.9 [static-to-top-level.8:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.9&show=diff)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.9 [static-to-top-level.8:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.9&show=diff)'
- en: 'We can fix that with Alt-Enter and “Add on demand static import…”. We have
    to do that once in each affected file; we should have checked in before the refactor
    so that we could easily see which files it changed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Alt-Enter和“Add on demand static import…”来解决这个问题。我们必须在每个受影响的文件中执行一次这样的操作；在重构之前，我们应该已经进行了检查，以便轻松查看更改了哪些文件：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 8.10 [static-to-top-level.9:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.10&show=diff)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.10 [static-to-top-level.9:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.10&show=diff)'
- en: Compared to our previous manual approach of adding an `@file:JvmName("Shortlists")`
    annotation, our Java clients are now exposed to that icky `ShortlistsKt` name.
    Because the methods names were designed to be used with static imports though,
    it is almost always hidden in the imports block where no one ever looks, so we’re
    prepared to put up with this. In return for this sacrifice, the conversion has
    also fixed up the Kotlin callers of `sorted`. It is now referenced in Kotlin as
    `travelator.sorted` rather than `travalator.Shortlists.sorted`, which was the
    point.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 相比我们先前手动添加`@file:JvmName("Shortlists")`注解的方法，现在我们的Java客户端暴露出那个令人讨厌的`ShortlistsKt`名称。尽管方法名设计为与静态导入一起使用，但几乎总是隐藏在导入块中，没有人会去看，所以我们已经准备好忍受这一点。作为这种牺牲的回报，这种转换还修复了`sorted`在Kotlin调用者中的问题。现在在Kotlin中引用它为`travelator.sorted`，而不是`travelator.Shortlists.sorted`，这正是我们的目的。
- en: 'We can now move the rest of the methods on `Shortlists` in the same way. It’s
    a little tedious, but at least when it moves the last method, IntelliJ deletes
    the empty object, leaving us:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以以同样的方式移动 `Shortlists` 的其余方法。这有点乏味，但至少当它移动最后一个方法时，IntelliJ 会删除空对象，使我们留下：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Example 8.11 [static-to-top-level.10:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.11&show=diff)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.11 [static-to-top-level.10:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.11&show=diff)'
- en: As we write this, the “Move to top level” refactor is limited to a single method
    at a time. If methods depend on each other, this can lead to some problems, as
    we will see in [Chapter 10](ch10.html#functions-to-extension-functions).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写此文时，“移至顶级”重构限制为一次仅移动一个方法。如果方法彼此依赖，这可能会导致一些问题，正如我们将在 [第 10 章](ch10.html#functions-to-extension-functions)
    中看到的那样。
- en: Kotlinify
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 化
- en: Of course, we didn’t move our methods to top-level functions just for the sake
    of it. Well, not *just* for the sake of it anyway. Now that our functions are
    in the idiomatic Kotlin place, let’s finish the idiomatic Kotlin job.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们不是无缘无故将方法移到顶级函数。嗯，至少不是完全为了无缘无故。现在我们的函数位于 Kotlin 的惯用位置，让我们完成惯用的 Kotlin 工作。
- en: '[Chapter 13](ch13.html#streams-to-sequences) gives guidance on converting Java
    streams to Kotlin; in the case of `sorted`, we can just use the Kotlin `sortedWith`
    extension function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 13 章](ch13.html#streams-to-sequences)提供了关于将 Java 流转换为 Kotlin 的指导；对于 `sorted`，我们可以直接使用
    Kotlin 的 `sortedWith` 扩展函数：'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Example 8.12 [static-to-top-level.11:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.12&show=diff)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.12 [static-to-top-level.11:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.12&show=diff)'
- en: 'This makes a very logical extension function ([Chapter 10](ch10.html#functions-to-extension-functions)):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得一个非常合乎逻辑的扩展函数 ([第 10 章](ch10.html#functions-to-extension-functions))：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 8.13 [static-to-top-level.12:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.13&show=diff)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.13 [static-to-top-level.12:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.13&show=diff)'
- en: 'Java still calls this as a static method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Java 仍然将其作为静态方法调用：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Example 8.14 [static-to-top-level.12:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.14&show=diff)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.14 [static-to-top-level.12:src/test/java/travelator/ShortlistsTest.java]](https://java-to-kotlin.dev/code.html?ref=8.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.14&show=diff)'
- en: 'Calling from Kotlin reads nicely too:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Kotlin 调用读起也很舒服：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 8.15 [static-to-top-level.12:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.15&show=diff)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.15 [static-to-top-level.12:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.15&show=diff)'
- en: 'These Kotlin usages really aren’t gaining us anything over the raw Kotlin API,
    so we can just inline them:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Kotlin 用法真的没有比原始 Kotlin API 更有优势，所以我们可以直接内联它们：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 8.16 [static-to-top-level.13:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.16&show=diff)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.16 [static-to-top-level.13:src/test/java/travelator/hotels/ShortlistScenarioTest.kt]](https://java-to-kotlin.dev/code.html?ref=8.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.16&show=diff)'
- en: 'This leaves the `sorted` function for Java to call. Looking at it, it really
    has nothing to do with shortlists anymore. Should we move it to a more generic
    namespace? Maybe later; for now we’ll just follow through on the rest of the file
    to give:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得 `sorted` 函数保留给 Java 调用。看起来，它现在与短列表无关了。我们应该将它移动到更通用的命名空间吗？也许以后；现在我们只需继续处理文件的其余部分来达成：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Example 8.17 [static-to-top-level.14:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.17&show=diff)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 8.17 [static-to-top-level.14:src/main/java/travelator/Shortlists.kt]](https://java-to-kotlin.dev/code.html?ref=8.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=8.17&show=diff)'
- en: You may have noticed that we have renamed `removeItemAt` to `withoutItemAt`.
    Prepositions like *with* and *without* are a useful device to let the reader know
    that we are not mutating an object but returning a copy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们将 `removeItemAt` 重命名为 `withoutItemAt`。像 *with* 和 *without* 这样的介词是一个有用的工具，可以让读者知道我们不是在改变一个对象，而是返回一个副本。
- en: Moving On
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前进
- en: Static functions are the bread and butter of our programs. In Java these have
    to be static methods on a class, but in Kotlin we can and should default to defining
    them as top-level functions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 静态函数是我们程序的核心。在 Java 中，这些必须是类上的静态方法，但在 Kotlin 中，我们可以并且应该将其定义为顶级函数。
- en: Automatically converting a Java class of static methods to Kotlin will create
    an `object` declaration, accessible from both Java and Kotlin. We can then move
    the methods on the object to the top level individually, remaining accessible
    to both languages, before applying other refactorings to take advantage of more
    Kotliny goodness.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个 Java 类的静态方法自动转换为 Kotlin 会创建一个 `object` 声明，可从 Java 和 Kotlin 都访问。然后我们可以逐个将对象上的方法移到顶层，仍然可以被两种语言访问，在利用更多
    Kotlin 特性的其他重构之前。
- en: The most likely next refactor is to refactor our top-level functions into extension
    functions, the subject of [Chapter 10, *Functions to Extension Functions*](ch10.html#functions-to-extension-functions).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个最可能的重构是将我们的顶级函数重构为扩展函数，这是[第 10 章，“从函数到扩展函数”](ch10.html#functions-to-extension-functions)的主题。
