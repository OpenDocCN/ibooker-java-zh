- en: Chapter 11\. Deploying Your Spring Boot Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。部署您的 Spring Boot 应用程序
- en: In software development, deployment is the on-ramp to production for an application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，部署是将应用程序推向生产的入口。
- en: Regardless of any capabilities an application may promise its end users, until
    said users can actually use the application, it is effectively an academic what-if
    exercise. Figuratively and often very literally, deployment is the payoff.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论应用程序向最终用户承诺了多少功能，直到这些用户真正能够使用该应用程序，它都仅仅是一种学术性的假设。从比喻和实际上来看，部署是应用程序的回报。
- en: Referencing the Spring Initializr, many developers are aware that Spring Boot
    applications can be created as WAR files or JAR files. Most of those same developers
    also know that there are many good reasons (several of which were mentioned earlier
    in this book) to eschew the WAR option and create executable JAR files, and few
    good reasons to do the opposite. What many developers may not realize is that
    even when building a Spring Boot executable JAR, there are numerous options for
    deployment to fulfill various requirements and use cases.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 Spring Initializr，许多开发人员知道 Spring Boot 应用程序可以创建为 WAR 文件或 JAR 文件。大多数开发人员也知道有很多很好的理由（本书前面提到的几个）不选择
    WAR 选项，而选择创建可执行的 JAR 文件，反之则没有几个好理由。许多开发人员可能没有意识到的是，即使构建 Spring Boot 可执行 JAR，也有许多部署选项可以满足各种需求和用例。
- en: In this chapter, I examine ways to deploy your Spring Boot application with
    options useful for different target destinations and discuss their relative merits.
    I then demonstrate how to create these deployment artifacts, explain options for
    optimal execution, and show how to verify their components and provenance. You
    almost certainly have more and better tools for deploying your Spring Boot applications
    than you realized.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将探讨部署 Spring Boot 应用程序的不同目标位置的有用选项，并讨论它们的相对优点。然后，我将演示如何创建这些部署工件，解释实现最佳执行的选项，并展示如何验证它们的组件和来源。您几乎可以肯定，您有比您意识到的更多和更好的工具来部署您的
    Spring Boot 应用程序。
- en: Code Checkout Checkup
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检出检查
- en: Please check out branch *chapter11begin* from the code repository to begin.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请从代码库中检查分支 *chapter11begin* 开始。
- en: Revisiting the Spring Boot Executable JAR
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视 Spring Boot 可执行 JAR
- en: As discussed way back in [Chapter 1](ch01.xhtml#sbur-01), Spring Boot’s executable
    JAR provides maximum utility and versatility in a single, self-contained, testable,
    and deployable unit. It’s fast to create and iterate, dynamically self-configurable
    to changes in its environment, and simple in the extreme to distribute and maintain.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第1章](ch01.xhtml#sbur-01)中讨论的那样，Spring Boot 的可执行 JAR 提供了单一、自包含、可测试和可部署单元的最大效用和多样性。创建和迭代速度快，动态自配置以适应环境变化，并且非常简单地分发和维护。
- en: Every cloud provider offers an application hosting option that enjoys widespread
    use for prototyping through production deployments, and most of those application
    platforms expect a largely self-contained deployable application, offering only
    the barest of environmental essentials. A Spring Boot JAR fits quite naturally
    into these clean environments, requiring only the presence of a JDK for frictionless
    execution; some platforms even specify Spring Boot by name due to its seamless
    fit for app hosting. By bringing mechanisms with it for external interactions
    involving HTTP exchanges, messaging, and more, a Spring Boot application can eliminate
    installation, configuration, and maintenance of an application server or other
    externalities. This dramatically reduces developer workload and application platform
    overhead.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个云服务提供商都提供了一个应用程序托管选项，广泛用于从原型到生产部署，大多数这些应用平台都期望一个基本上是自包含的可部署应用程序，只提供最基本的环境要求。Spring
    Boot JAR 在这些干净的环境中非常自然地适应，只需有 JDK 存在即可无摩擦地执行；一些平台甚至因其与应用托管的完美匹配而具体指定使用 Spring
    Boot。通过带有 HTTP 交换、消息传递等外部交互机制，Spring Boot 应用程序可以消除应用服务器或其他外部依赖的安装、配置和维护。这极大地减少了开发工作量和应用平台的开销。
- en: Since a Spring Boot application possesses full control over dependent libraries,
    it eliminates fear of external dependency changes. Scheduled updates to an application
    server, servlet engine, database or messaging libraries, or any of a number of
    other critical components have crashed countless non-Boot applications over the
    years. In those applications that rely on external components maintained by the
    underlying app platform, developers must be hypervigilant for unplanned outages
    due to the world shifting under their feet, simply due to a dot-release change
    of a single dependent library. Exciting times.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Spring Boot 应用程序完全控制依赖库，因此它消除了对外部依赖变更的恐惧。多年来，对于依赖于底层应用平台维护的外部组件的应用程序，计划更新应用服务器、servlet
    引擎、数据库或消息传递库等诸多关键组件时，导致了无数非 Boot 应用程序的崩溃。在这些应用程序中，开发人员必须高度警惕，以防因单个依赖库的点发布变更而导致不计其数的未计划停机。激动人心的时刻。
- en: With a Spring Boot application, upgrades to any dependencies—whether core Spring
    libraries or second- (or third- , or fourth- , etc.) tier dependencies—are much
    less painful and stressful as well. The app developer upgrades and tests the application
    and deploys an update (typically using a [blue-green deployment](https://en.wikipedia.org/wiki/Blue-green_deployment))
    only when satisfied that everything is working as expected. Since dependencies
    are no longer external to the application but instead bundled with it, the developer
    has full control over dependency versions and upgrade timing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Spring Boot 应用程序，无论是核心 Spring 库还是第二（或第三、第四等）层依赖关系的升级，都不再那么痛苦和紧张。应用程序开发人员升级并测试应用程序，并在满意一切正常时部署更新（通常使用
    [blue-green 部署](https://en.wikipedia.org/wiki/Blue-green_deployment)）。由于依赖项不再是应用程序外部的，而是与之捆绑在一起，开发人员可以完全控制依赖项版本和升级时机。
- en: 'Spring Boot JARs have another useful trick up their sleeve, courtesy of the
    Spring Boot Maven and Gradle plug-ins: the ability to create what is sometimes
    called a “fully executable” JAR. The quotes are intentional and are present in
    official documentation as well because a JDK is still required for the application
    to function. So what is meant by a “fully executable” Spring Boot application,
    and how does one create it?'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot JAR 还有一个有用的技巧，感谢 Spring Boot Maven 和 Gradle 插件：能够创建所谓的“完全可执行” JAR。引号是有意的，并且也在官方文档中出现，因为应用程序仍然需要
    JDK 才能正常运行。那么，“完全可执行”的 Spring Boot 应用程序是什么意思，如何创建它呢？
- en: Let’s begin with the how.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从“如何”开始。
- en: Building a “Fully Executable” Spring Boot JAR
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建“完全可执行”的 Spring Boot JAR
- en: 'I’ll use PlaneFinder for this example. For purposes of comparison, I build
    the project from the command line without changes using `mvn clean package`. This
    results in the following JAR being created in the project’s *target* directory
    (result trimmed to fit page):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 PlaneFinder 作为示例。为了比较，我使用 `mvn clean package` 命令在不进行任何更改的情况下从命令行构建项目。这导致在项目的
    *target* 目录中创建了以下 JAR 文件（结果进行了修整以适应页面）：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This Spring Boot JAR is referred to as an *executable JAR* because it consists
    of the entire application without need for external downstream dependencies; all
    it requires to execute is a JVM provided by an installed JDK. Running the app
    in its current state looks something like this (results trimmed and edited to
    fit page):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Spring Boot JAR 被称为“可执行 JAR”，因为它包含了整个应用程序，无需外部依赖；要执行它，只需安装 JDK 并提供 JVM。以当前状态运行该应用程序看起来像这样（结果进行了修整以适应页面）：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This works as expected, of course, and it serves as a baseline for what comes
    next. I now revisit PlaneFinder’s *pom.xml* to add the indicated XML snippet to
    the existing section for the `spring-boot-maven-plug-in`, as shown in [Figure 11-1](#plug-ins_section_of_planefinder_pom_xml_file).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这符合预期，并且它作为接下来的基准。现在我重新访问 PlaneFinder 的 *pom.xml*，以在现有的 `spring-boot-maven-plug-in`
    部分中添加所示的 XML 片段，如 [Figure 11-1](#plug-ins_section_of_planefinder_pom_xml_file)
    中所示。
- en: '![sbur 1101](Images/sbur_1101.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 1101](Images/sbur_1101.png)'
- en: Figure 11-1\. Plugins section of PlaneFinder *pom.xml* file
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 11-1\. PlaneFinder *pom.xml* 文件的插件部分
- en: 'Returning to the terminal, I again build the project from the command line
    using `mvn clean package`. This time, there is a notable difference in the resultant
    JAR created within the project’s *target* directory, as indicated in the following
    output (result trimmed to fit page):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 回到终端后，我再次使用 `mvn clean package` 命令从命令行构建项目。这次，在项目的 *target* 目录中创建的 JAR 文件有明显的不同，如下输出所示（结果进行了修整以适应页面）：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It’s ever so slightly larger than Boot’s standard executable JAR, to the tune
    of 9,110 byte, or just under 9 KB. What does this gain you?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Java JAR files are read from end to beginning—yes, you read that correctly—until
    an end-of-file marker is found. When creating a so-called “fully executable JAR,”
    the Spring Boot Maven plug-in ingeniously prepends a script to the beginning of
    the usual Spring Boot executable JAR that enables it to be run like any other
    executable binary (assuming the presence of a JDK) on a Unix- or Linux-based system,
    including registering it with `init.d` or `systemd`. Examining PlaneFinder’s JAR
    in an editor results in the following (only a portion of the script header is
    shown for brevity; it is quite extensive):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Spring Boot Maven (or Gradle, if chosen as the build system) plug-in also
    sets file owner permissions to read, write, and execute (rwx) for the output JAR.
    Doing so enables it to be executed as indicated previously and allows the header
    script to locate the JDK, prepare the application for execution, and run it as
    demonstrated here (results trimmed and edited to fit page):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that I’ve demonstrated how, it’s time to discuss what this option brings
    to the table.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: What Does It Mean?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to create a Spring Boot “fully executable” JAR is not a solution
    to all problems, but it does provide a unique capability for deeper integration
    with underlying Unix- and Linux-based systems when necessary. Adding a Spring
    Boot application to supply startup functionality becomes trivial thanks to the
    embedded startup script and execute permissions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t need or can’t make use of that capability in your current application
    environments, you should continue to simply create typical Spring Boot executable
    JAR output that makes use of `java -jar`. This is simply another tool in your
    toolbox, included at no cost and requiring nearly no effort from you to implement,
    for when you find you need it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Exploding JARs
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot’s innovative approach of nesting dependent JAR files completely
    intact and unchanged within the Boot executable JAR lends itself brilliantly to
    subsequent actions like extraction. Reversing the process that was involved in
    adding them to the Spring Boot executable JAR produces the component artifacts
    in their original, unaltered state. It sounds simple because it *is* simple.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many reasons you might want to rehydrate a Spring Boot executable
    JAR into its various, separate parts:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Extracted Boot applications offer slightly faster execution. This is rarely
    reason enough to rehydrate, but it is a nice bonus.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracted dependencies are easily replaceable discrete units. App updates can
    be done more quickly and/or with lower bandwidth because only the changed files
    must be redeployed.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many cloud platforms, such as Heroku and any build or brand/derivative of Cloud
    Foundry, do this as part of the app deployment process. Mirroring local and remote
    environments to the maximum extent possible can aid in consistency and, when necessary,
    diagnosis of any issues.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多云平台，如Heroku和任何构建或基于Cloud Foundry的品牌/衍生品，都会在应用部署过程中执行此操作。尽可能地将本地和远程环境镜像化可以帮助确保一致性，并在必要时诊断任何问题。
- en: 'Both standard Spring Boot executable JARs and “fully executable” JARs can be
    rehydrated in the following manner, using `jar -xvf <spring_boot_jar>` (most file
    entries removed for brevity):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Spring Boot可执行JAR和“完全可执行”JAR都可以通过以下方式重新生成，使用`jar -xvf <spring_boot_jar>`（为简洁起见，大多数文件条目已删除）：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once files are extracted, I find it useful to examine the structure a bit more
    visually using the *nix `tree` command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被解压缩，我发现使用*nix `tree`命令更加直观地查看结构是很有用的：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Viewing the JAR contents using `tree` offers a nice hierarchical display of
    the application’s composition. It also calls out the numerous dependencies that
    combine to provide the capabilities chosen for this application. Listing the files
    under *BOOT-INF/lib* confirms that the component libraries remain unchanged through
    the building of the Spring Boot JAR and subsequent extraction of its contents,
    even down to original component JAR timestamps, as shown here (most entries removed
    for brevity):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tree`查看JAR内容提供了应用程序构成的良好分层显示。它还显示出多个依赖项的组合，为该应用程序提供所选择的能力。在*BOOT-INF/lib*下列出的文件确认了组件库在构建Spring
    Boot JAR并提取其内容后保持不变，甚至可以到达原始组件JAR的时间戳，如下所示（为简洁起见，大多数条目已删除）：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once all files are extracted from the Spring Boot JAR, there are a few ways
    to run the application. The recommended approach is to use `JarLauncher`, which
    maintains a consistent classloading order across executions, as shown below (results
    trimmed and edited to fit page):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从Spring Boot JAR中提取所有文件后，有几种方法可以运行应用程序。推荐的方法是使用`JarLauncher`，它在执行过程中保持一致的类加载顺序，如下所示（结果已修剪和编辑以适合页面）：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, PlaneFinder started just over a full second faster expanded than
    in the Spring Boot “fully executable” JAR. This positive alone may or may not
    outweigh the advantages of a single, fully self-contained deployable unit; it
    likely will not. But combined with the ability to only push deltas when a small
    number of files change and (if applicable) better alignment between local and
    remote environments, the ability to run exploded Spring Boot applications can
    be a very useful option.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，PlaneFinder的启动速度比Spring Boot“完全可执行”JAR中展开的速度快了整整一秒以上。单独这一点可能或可能不足以抵消单一、完全自包含的可部署单元的优势；但结合仅在少量文件更改时推送增量以及（如适用）本地和远程环境更好的对齐能力，运行展开的Spring
    Boot应用程序的能力可能是一个非常有用的选择。
- en: Deploying Spring Boot Applications to Containers
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Boot应用程序部署到容器中
- en: As mentioned earlier, some cloud platforms—both on-premises/private and public
    cloud—take deployable applications and create a container image on a developer’s
    behalf using widely optimized defaults and settings provided by the app’s developer.
    These images are then used to create (and destroy) containers with the running
    application based on the application’s replication settings and utilization. Platforms
    like Heroku and numerous versions of Cloud Foundry enable a developer to push
    a Spring Boot executable JAR, and provide any desired configuration settings (or
    simply accept the defaults), and the rest is handled by the platform. Other platforms
    like VMware’s Tanzu Application Service for Kubernetes incorporate this as well,
    and the feature list is increasing in both scope and fluid execution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，一些云平台——包括本地/私有和公共云——接收可部署的应用程序，并代表开发者创建一个容器映像，使用应用程序开发者提供的广泛优化的默认设置。然后根据应用程序的复制设置和利用率使用这些映像创建（和销毁）带有运行中应用程序的容器。像Heroku和众多Cloud
    Foundry版本一样，允许开发者推送Spring Boot可执行JAR，并提供任何所需的配置设置（或简单接受默认设置），其余由平台处理。其他平台如VMware的Tanzu
    Application Service for Kubernetes也包括此功能，并且功能列表在范围和流动执行方面都在增加。
- en: There are many platforms and deployment targets that don’t support this level
    of frictionless developer enablement. Whether you or your organization has committed
    to one of those other offerings, or if you have other requirements that guide
    you in a different direction, Spring Boot has you covered.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 许多平台和部署目标不支持这种无摩擦的开发者启用级别。无论您或您的组织是否致力于其他提供方之一，还是如果您有其他要求指导您朝不同方向发展，Spring Boot
    都为您提供了保障。
- en: While you can handcraft your own container images for your Spring Boot applications,
    it isn’t optimal; doing so adds no value to the application itself and has usually
    been considered a necessary evil (at best) to go from dev to prod. No more.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以为 Spring Boot 应用程序手工制作自己的容器映像，但这并不是最佳选择；这样做对应用程序本身没有任何价值，通常被认为是从开发到生产的一种必要之恶（充其量）。不再如此。
- en: Leveraging many of the same tools used by the previously mentioned platforms
    to intelligently containerize applications, Spring Boot incorporates within its
    Maven and Gradle plug-ins the capability to build painlessly and frictionlessly
    fully compliant Open Container Initiative (OCI) images used by Docker, Kubernetes,
    and every major container engine/mechanism. Built upon industry-leading [Cloud
    Native Buildpacks](https://buildpacks.io) and the [Paketo](https://paketo.io)
    buildpacks initiative, the Spring Boot build plug-ins provide the option to create
    an OCI image using a locally installed and locally running Docker daemon and push
    it to a local or designated remote image repository.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 利用之前提到的平台使用的许多相同工具，智能地容器化应用程序，Spring Boot 在其 Maven 和 Gradle 插件中集成了能够无痛无摩擦地构建符合
    Open Container Initiative (OCI) 标准的映像的能力，这些映像可供 Docker、Kubernetes 和每个主要的容器引擎/机制使用。基于业界领先的
    [Cloud Native Buildpacks](https://buildpacks.io) 和 [Paketo](https://paketo.io)
    构建包倡议，Spring Boot 构建插件提供了使用本地安装和本地运行的 Docker 守护程序创建 OCI 映像并将其推送到本地或指定的远程映像存储库的选项。
- en: Using the Spring Boot plug-in to create an image from your application is opinionated
    in all the best ways as well, using a conceptual “autoconfiguration” to optimize
    image creation by layering image contents, separating code/libraries based on
    each code unit’s anticipated frequency of change. Staying true to the Spring Boot
    philosophy behind autoconfiguration and opinions, Boot also provides a way to
    override and guide the layering process should you need to customize your configuration.
    This is rarely necessary or even desirable, but it’s easily accomplished should
    your needs fall within one of those rare, exceptional cases.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spring Boot 插件从您的应用程序创建映像也是基于一种最佳实践，利用概念上的“自动配置”来通过分层图像内容优化图像创建，根据每个代码单元预期的变更频率分离代码/库。遵循
    Spring Boot 自动配置和最佳实践背后的理念，Boot 还提供了一种覆盖和指导分层过程的方式，如果需要自定义配置，则很少需要或甚至不可取，但如果您的需求属于这些罕见的、特殊的情况之一，则可以轻松实现。
- en: 'The default settings produce the following layers for all versions of Spring
    Boot from 2.4.0 Milestone 2 onward:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Spring Boot 2.4.0 Milestone 2 版本开始，默认设置为所有版本生成以下层：
- en: '`dependencies`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`'
- en: Includes regularly released dependencies, i.e., GA versions
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 包括定期发布的依赖项，即 GA 版本
- en: '`spring-boot-loader`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-loader`'
- en: Includes all files found under *org/springframework/boot/loader*
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 包括在 *org/springframework/boot/loader* 下找到的所有文件
- en: '`snapshot-dependencies`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`snapshot-dependencies`'
- en: Forward-looking releases not yet considered GA
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未被视为 GA 的前瞻性发布
- en: '`application`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`application`'
- en: Application classes and related resources (templates, properties files, scripts,
    etc.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序类及相关资源（模板、属性文件、脚本等）
- en: Code volatility, or its propensity and frequency of change, typically increases
    as you move through this list of layers from top to bottom. By creating separate
    layers in which to place similarly volatile code, subsequent image creation is
    much more efficient and thus much faster to complete. This *drastically* reduces
    the time and resources required to rebuild the deployable artifact over the life
    of the application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的易变性或其变更倾向和频率通常随着从上到下浏览此层列表而增加。通过创建单独的层来放置类似易变的代码，随后的映像创建效率更高，因此完成速度更快。这*显著*减少了在应用程序生命周期内重建可部署构件所需的时间和资源。
- en: Creating a Container Image from an IDE
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 IDE 创建容器映像
- en: Creating a layered container image from a Spring Boot application can be done
    from within an IDE very easily. I use IntelliJ for this example, but nearly all
    major IDEs have similar capabilities.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IntelliJ 作为示例，从 Spring Boot 应用程序创建分层容器映像非常简单，但几乎所有主要的 IDE 都具有类似的功能。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A local version of Docker—Docker Desktop for Mac in my case—must be running
    to create images.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在本地运行 Docker 版本——在我的情况下是 Docker Desktop for Mac ——才能创建图像。
- en: To create the image, I open the Maven panel by expanding the tab labeled *Maven*
    in IntelliJ’s right margin, then expand *Plugins*, choose and expand the *spring-boot*
    plug-in, and double-click the *spring-boot:build-image* option to execute the
    goal, as shown in [Figure 11-2](#building_a_spring_boot_application_container_image_from_intellijs_maven_panel).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建该图像，我通过展开IntelliJ右边缘标签为*Maven*的选项，然后展开*Plugins*，选择并展开*spring-boot*插件，双击*spring-boot:build-image*选项以执行目标，如[图 11-2](#building_a_spring_boot_application_container_image_from_intellijs_maven_panel)所示。
- en: '![sbur 1102](Images/sbur_1102.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 1102](Images/sbur_1102.png)'
- en: Figure 11-2\. Building a Spring Boot application container image from IntelliJ’s
    Maven panel
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. 从 IntelliJ 的 Maven 面板构建 Spring Boot 应用程序容器镜像
- en: 'Creating the image produces a rather lengthy log of actions. Of particular
    interest are entries listed here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建图像会生成一份相当冗长的操作日志。特别值得关注的是以下条目：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As noted earlier, image layers (referred to as *slices* in the preceding listing)
    and their contents can be modified if necessary for unique circumstances.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前文所述，图像层（在前述列表中称为*slices*）及其内容可根据需要进行修改以应对特定情况。
- en: Once the image has been created, results like those that follow will complete
    the log.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图像创建完成，类似以下所示的结果将完成日志。
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a Container Image from the Command Line
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行创建容器镜像
- en: It’s of course also possible—and simple—to create the same container image from
    the command line. Prior to doing so, I do want to make a small change to the naming
    settings for the resultant image.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以——而且很简单——从命令行创建相同的容器镜像。在此之前，我确实希望对生成的镜像的命名设置进行一些小改动。
- en: 'As a matter of convenience, I prefer to create images that align with my [Docker
    Hub](https://hub.docker.com) account and naming conventions, and your choice of
    image repository likely has similar, specific conventions. Spring Boot’s build
    plug-ins accept *<configuration>* section details that smooth the step of pushing
    the image to repository/catalog. I add a single, properly tagged line to the *<plug-ins>*
    section of `Aircraft Position` ’s *pom.xml* file to match my requirements/preferences:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我更喜欢创建与我的[Docker Hub](https://hub.docker.com)帐户和命名约定相符的图像，你选择的图像仓库可能有类似的特定约定。Spring
    Boot 的构建插件接受<configuration>部分的详细信息，以简化将图像推送到仓库/目录的步骤。我向*Aircraft Position*的*pom.xml*文件的*<plug-ins>*部分添加了一行正确标记的代码，以匹配我的需求/偏好：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, I issue the following command from the project directory in the terminal
    window to re-create the application container image and soon thereafter receive
    the results shown:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我从项目目录中的终端窗口发出以下命令以重新创建应用程序容器镜像，并很快收到如下结果：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that the image output is no longer *docker.io/library/aircraft-positions:0.0.1-SNAPSHOT*
    as it was when I built it using defaults from within the IDE. The new image coordinates
    match those I specified in the *pom.xml*: *docker.io/hecklerm/aircraft-positions:latest*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，输出的图像不再是在IDE中使用默认设置构建时的*docker.io/library/aircraft-positions:0.0.1-SNAPSHOT*。新的图像坐标与我在*pom.xml*中指定的相匹配：*docker.io/hecklerm/aircraft-positions:latest*。
- en: Verifying the Image Exists
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证图像存在
- en: 'To verify that the images created in the prior two sections have been loaded
    into the local repository, I run the following command from the terminal window,
    filtering by name to get the following results (and trimmed to fit page):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为验证前两节中创建的图像是否已加载到本地仓库，我从终端窗口运行以下命令，并按名称进行过滤以获得如下结果（并已剪裁以适应页面）：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Pushing the image shown last in the preceding output—since it now aligns with
    expected and desired account and naming conventions—to Docker Hub is accomplished
    as follows, with the following results:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 推送上述输出中最后显示的图像——因为它现在与预期和期望的帐户及命名约定一致——到 Docker Hub 的步骤如下，并获得以下结果：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Visiting the Docker Hub allows me to confirm successful public deployment of
    the image, as shown in [Figure 11-3](#spring_boot_application_container_image_in_docker_hub).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Docker Hub 可以确认图像已成功公开部署，如[图 11-3](#spring_boot_application_container_image_in_docker_hub)所示。
- en: '![sbur 1103](Images/sbur_1103.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 1103](Images/sbur_1103.png)'
- en: Figure 11-3\. Spring Boot application container image in Docker Hub
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. Docker Hub 中的 Spring Boot 应用程序容器镜像
- en: Deploying to Docker Hub or any other container image repository available from
    outside of your local machine is the last step prior to wider (and hopefully production)
    deployment of your Spring Boot containerized application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 Spring Boot 容器化应用程序部署到 Docker Hub 或任何其他可以从本地计算机外部访问的容器映像存储库之前，是更广泛（并希望是生产）部署的最后一步。
- en: Running the Containerized Application
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行容器化应用程序
- en: To run the application, I use the `docker run` command. Your organization likely
    has a deployment pipeline that moves applications from container images (retrieved
    from image repositories) to running, containerized applications, but the steps
    performed are likely the same, albeit with more automation and less typing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行该应用程序，我使用`docker run`命令。您的组织可能有一个部署流水线，从容器镜像（从镜像存储库检索）中移动应用程序到运行的容器化应用程序，但执行的步骤可能是相同的，尽管有更多的自动化和较少的输入。
- en: Since I already have a local copy of the image, no remote retrieval will be
    necessary; otherwise, remote access to the image repository is required for the
    daemon to retrieve the remote image and/or layers to reconstruct it locally prior
    to starting a container based upon the image specified.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我已经有了映像的本地副本，因此不需要进行远程检索；否则，需要通过守护程序从映像存储库检索远程映像和/或层，在基于指定映像启动容器之前在本地重构它。
- en: 'To run the containerized Aircraft Positions application, I execute the following
    command and see the following results (trimmed and edited to fit page):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行容器化的 Aircraft Positions 应用程序，我执行以下命令并看到以下结果（修剪和编辑以适应页面）：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now to take a quick look inside a Spring Boot plug-in-created image.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在快速查看一个由 Spring Boot 插件创建的映像内部。
- en: Utilities for Examining Spring Boot Application Container Images
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于检查 Spring Boot 应用程序容器映像的实用程序
- en: 'Numerous utilities exist to work with container images, and much of the functionality
    provided by them falls well outside the scope of this book. I do want to briefly
    mention two that I’ve found useful in certain circumstances: `pack` and `dive`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多用于处理容器映像的实用程序，它们的功能大部分超出了本书的范围。我想简要提到两个在某些情况下我发现很有用的工具：`pack`和`dive`。
- en: Pack
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pack
- en: To examine the materials that go into the creation of a Spring Boot application
    container image using Cloud Native (Paketo) Buildpacks—and the buildpacks themselves—one
    can use the `pack` utility. `pack` is the designated CLI for building apps using
    Cloud Native Buildpacks and can be obtained by various means. I used `homebrew`
    to retrieve and install it with a simple `brew install pack` command on my Mac.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查使用 Cloud Native（Paketo）Buildpacks 创建 Spring Boot 应用程序容器映像的材料及其 buildpacks
    本身，可以使用`pack`实用程序。 `pack`是指定用于使用 Cloud Native Buildpacks 构建应用程序的 CLI，并且可以通过各种方式获取。我在我的
    Mac 上使用`homebrew`来检索并安装它，只需简单的`brew install pack`命令。
- en: 'Running `pack` against the image created previously results in the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`pack`对先前创建的映像的影响如下：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using the `pack` utility’s `inspect-image` command provides some key bits of
    information about the image, particularly the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pack`实用程序的`inspect-image`命令提供有关映像的一些关键信息，特别是以下信息：
- en: Which Docker base image/Linux version (bionic) was used as the foundation for
    this image
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用哪个 Docker 基础映像/ Linux 版本（bionic）作为此映像的基础
- en: Which buildpacks were used to populate the image (five Paketo buildpacks listed)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的哪些 buildpacks 来填充映像（列出了五个 Paketo buildpacks）
- en: What processes will be run and by what means (Java commands executed by the
    shell)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将通过什么方式运行进程（由外壳执行的 Java 命令）
- en: Note that both local and remote connected repositories are polled for the specified
    image, and details are provided for both. This is particularly helpful in diagnosing
    issues caused by an out-of-date container image in one location or the other.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将针对指定映像轮询本地和远程连接的存储库，并为两者提供详细信息。这在诊断由于某个位置的过时容器映像引起的问题时尤为有帮助。
- en: Dive
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dive
- en: The `dive` utility was created by Alex Goodman as a way to “dive” into a container
    image, viewing the very granular OCI image layers and the tree structure of the
    entire image filesystem.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`dive`实用程序由 Alex Goodman 创建，作为“潜入”容器映像的一种方法，查看非常细粒度的 OCI 映像层和整个映像文件系统的树结构。'
- en: '`dive` goes far beneath the application-level layers of the Spring Boot layering
    construct and into the operating system. I find it less useful than `pack` due
    to its focus on the OS versus the application, but it’s ideal for verifying the
    presence or absence of particular files, file permissions, and other essential
    low-level concerns. It’s a rarely used tool but essential when that level of detail
    and control is needed.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`dive`深入到Spring Boot层次结构的应用程序级别以下，并进入操作系统层面。我认为它不如`pack`有用，因为它更专注于操作系统而不是应用程序，但在验证特定文件的存在或缺失、文件权限和其他重要的低级问题时，它是理想的工具。这是一个很少使用的工具，但在需要这种详细级别的细节和控制时是必不可少的。'
- en: Code Checkout Checkup
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检出检查
- en: For complete chapter code, please check out branch *chapter11end* from the code
    repository.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取完整的章节代码，请从代码仓库中检出*chapter11end*分支。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Until an application’s users can actually use that application, it is little
    more than a what-if exercise. Figuratively and often very literally, deployment
    is the payoff.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 直到应用程序的用户能够真正使用该应用程序，它仅仅是一种假设的实践。在象征性和往往非常字面的意义上，部署是回报。
- en: Many developers are aware that Spring Boot applications can be created as WAR
    files or JAR files. Most of those developers also know that there are many good
    reasons to skip the WAR option and create executable JAR files and few good reasons
    to do the opposite. What many developers may not realize is that even when building
    a Spring Boot executable JAR, there are numerous options for deployment to fulfill
    various requirements and use cases.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员知道Spring Boot应用程序可以创建为WAR文件或JAR文件。大多数开发人员也知道有许多理由可以跳过WAR选项并创建可执行的JAR文件，而很少有理由反其道而行。但许多开发人员可能没有意识到，即使在构建Spring
    Boot可执行JAR文件时，也有许多部署选项可以满足各种需求和用例。
- en: In this chapter, I examined several ways to deploy your Spring Boot application
    with options useful for different target destinations and discussed their relative
    merits. I then demonstrated how to create those deployment artifacts, explained
    options for optimal execution, and showed how to verify their components and provenance.
    Targets included the standard Spring Boot executable JARs, “fully executable”
    Spring Boot JARs, exploded/expanded JARs, and container images built using Cloud
    Native (Paketo) Buildpacks that run on Docker, Kubernetes, and every major container
    engine/mechanism. Spring Boot gives you numerous frictionless deployment options,
    extending your development superpowers into deployment superpowers as well.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我探讨了几种部署Spring Boot应用程序的方式，这些方式适用于不同的目标环境，并讨论了它们的相对优劣。然后我演示了如何创建这些部署工件，解释了最佳执行选项，并展示了如何验证它们的组件和来源。目标包括标准的Spring
    Boot可执行JAR文件，“全面可执行”的Spring Boot JAR文件，解压/展开的JAR文件，以及使用Cloud Native（Paketo）Buildpacks构建的容器镜像，这些镜像可以在Docker、Kubernetes以及所有主要的容器引擎/机制上运行。Spring
    Boot为您提供了多种无摩擦的部署选项，将您的开发超能力延伸到部署超能力领域。
- en: In the next and final chapter, I round out this book and journey by delving
    a bit further into two slightly deeper topics. If you’d like to know more about
    testing and debugging reactive applications, you won’t want to miss it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也是最后一章中，我会深入探讨两个略微更深入的主题，来为这本书和旅程画上句号。如果您想了解更多有关测试和调试响应式应用程序的内容，千万不要错过。
