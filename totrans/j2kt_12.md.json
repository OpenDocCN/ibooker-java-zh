["```java\nclass Money private constructor(\n    val amount: BigDecimal,\n    val currency: Currency\n) {\n    override fun equals(other: Any?) =\n        this === other ||\n            other is Money &&\n            amount == other.amount &&\n            currency == other.currency\n\n    override fun hashCode() =\n        Objects.hash(amount, currency)\n\n    override fun toString() =\n        amount.toString() + \" \" + currency.currencyCode\n\n    fun add(that: Money): Money {\n        require(currency == that.currency) {\n            \"cannot add Money values of different currencies\"\n        }\n        return Money(amount.add(that.amount), currency)\n    }\n\n    companion object {\n        @JvmStatic\n        fun of(amount: BigDecimal, currency: Currency) = Money(\n            amount.setScale(currency.defaultFractionDigits),\n            currency\n        )\n\n        ... and convenience overloads\n    }\n}\n```", "```java\nval grossPrice = netPrice.add(netPrice.mul(taxRate))\n```", "```java\nfinal var grossPrice = netPrice.add(netPrice.mul(taxRate));\n```", "```java\nval grossPrice = netPrice + netPrice * taxRate\n```", "```java\nclass Money private constructor(\n    val amount: BigDecimal,\n    val currency: Currency\n) {\n    ...\n\n    operator fun plus(that: Money): Money {\n        require(currency == that.currency) {\n            \"cannot add Money values of different currencies\"\n        }\n        return Money(amount.add(that.amount), currency)\n    }\n\n    ...\n}\n```", "```java\n@JvmName(\"add\")\nfun add(that: Money): Money {\n    require(currency == that.currency) {\n        \"cannot add Money values of different currencies\"\n    }\n    return Money(amount.add(that.amount), currency)\n}\n```", "```java\n@JvmName(\"add\")\noperator fun plus(that: Money): Money {\n    require(currency == that.currency) {\n        \"cannot add Money values of different currencies\"\n    }\n    return Money(amount.add(that.amount), currency)\n}\n```", "```java\nfun add(that: Money): Money {\n    return plus(that)\n}\n\noperator fun plus(that: Money): Money {\n    require(currency == that.currency) {\n        \"cannot add Money values of different currencies\"\n    }\n    return Money(amount.add(that.amount), currency)\n}\n```", "```java\nfun add(that: Money): Money {\n    return this.plus(that)\n}\n```", "```java\nfun add(that: Money): Money {\n    return this + that\n}\n```", "```java\nfun add(that: Money) = this + that\n\noperator fun plus(that: Money): Money {\n    require(currency == that.currency) {\n        \"cannot add Money values of different currencies\"\n    }\n    return Money(amount.add(that.amount), currency)\n}\n```", "```java\noperator fun plus(that: Money): Money {\n    require(currency == that.currency) {\n        \"cannot add Money values of different currencies\"\n    }\n    return Money(this.amount + that.amount, currency)\n}\n```", "```java\nval currently = Money.of(BigDecimal(\"9.99\"), GBP))\n\nval proposal = Money(BigDecimal(\"9.99\"), GBP))\n```", "```java\nval proposal = Money.Companion.invoke(BigDecimal(\"9.99\", GBP))\n```", "```java\nclass Money private constructor(\n    val amount: BigDecimal,\n    val currency: Currency\n) {\n    ...\n\n    companion object {\n        @JvmStatic\n        fun of(amount: BigDecimal, currency: Currency) =\n            invoke(amount, currency)\n\n        private fun invoke(amount: BigDecimal, currency: Currency) =\n            Money(\n                amount.setScale(currency.defaultFractionDigits),\n                currency\n            )\n\n        ... and convenience overloads\n    }\n}\n```", "```java\n@JvmStatic\nfun of(amount: BigDecimal, currency: Currency) =\n    invoke(amount, currency)\n\noperator fun invoke(amount: BigDecimal, currency: Currency) =\n    Money(\n        amount.setScale(currency.defaultFractionDigits),\n        currency\n    )\n```", "```java\n@JvmStatic\nfun of(amount: BigDecimal, currency: Currency) =\n    this(amount, currency)\n```", "```java\ninterface ExchangeRates {\n    fun rate(fromCurrency: Currency, toCurrency: Currency): BigDecimal\n\n    @JvmDefault\n    fun convert(fromMoney: Money, toCurrency: Currency): CurrencyConversion {\n        val rate = rate(fromMoney.currency, toCurrency)\n        val toAmount = fromMoney.amount * rate\n        val toMoney = Money.of(toAmount, toCurrency)\n        return CurrencyConversion(fromMoney, toMoney)\n    }\n}\n```", "```java\ninterface ExchangeRates {\n    fun rate(fromCurrency: Currency, toCurrency: Currency): BigDecimal\n\n    @JvmDefault\n    fun convert(fromMoney: Money, toCurrency: Currency): CurrencyConversion {\n        val rate = rate(fromMoney.currency, toCurrency)\n        val toAmount = fromMoney.amount * rate\n        val toMoney = Money(toAmount, toCurrency)\n        return CurrencyConversion(fromMoney, toMoney)\n    }\n}\n```"]