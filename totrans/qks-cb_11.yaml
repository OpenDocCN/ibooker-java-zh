- en: Chapter 11\. Authentication and Authorization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。身份验证和授权
- en: 'In this chapter, you will learn about how authorization and authentication,
    the backbone of application security, work within a Quarkus application. We’ll
    discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解身份验证和授权如何在Quarkus应用程序中发挥作用，这是应用程序安全性的支柱。我们将讨论以下主题：
- en: File-backed authentication and authorization schemes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文件的认证和授权方案
- en: Databased-backed authentication and authorization schemes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于数据库的身份验证和授权方案
- en: External-service-backed authentication and authorization schemes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部服务支持的认证和授权方案
- en: Quarkus Security Basics
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quarkus安全性基础知识
- en: Before we get to our first recipe, this section will show you the basics of
    Quarkus and security, the security extensions you will use to load authentication
    sources, and how to protect resources using a *role-based access control* (RBAC)
    approach.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始第一个配方之前，本节将向您展示Quarkus和安全性的基础知识，您将使用安全性扩展来加载身份验证源，以及如何使用*基于角色的访问控制*（RBAC）方法保护资源。
- en: The examples shown in this section are not meant to be runnable, but they will
    be the basis for the upcoming recipes in which we are going to see the security
    extensions in action.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中显示的示例并不意味着可运行，但它们将是即将出现的配方的基础，其中我们将看到安全性扩展的实际操作。
- en: 'The following are the two main concepts regarding security:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于安全性的两个主要概念：
- en: Authentication
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 认证
- en: Validate your credentials (i.e., username/password) to verify your identity
    so that the system knows who you are.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您的凭据（即用户名/密码）以验证您的身份，以便系统知道您是谁。
- en: Authorization
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 授权
- en: Verify your rights to be granted access to a protected resource. This happens
    after the authentication process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 验证您对受保护资源的访问权。这发生在身份验证过程之后。
- en: Authentication
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: Quarkus provides two authenticating mechanisms for HTTP, the well-known `BASIC`
    and `FORM` methods. These mechanisms can be extended by any Quarkus extension
    to provide a custom authentication method. An example of these mechanisms is found
    in the form of the Quarkus extension to authenticate against an OpenID Connect
    server such as Keycloak. We are going to explore how to do this in this section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus为HTTP提供了两种认证机制，即众所周知的`BASIC`和`FORM`方法。这些机制可以由任何Quarkus扩展进行扩展，以提供自定义的身份验证方法。这些机制的示例以Quarkus扩展的形式提供，用于对抗OpenID
    Connect服务器（如Keycloak）进行身份验证。我们将在本节中探讨如何做到这一点。
- en: 'To use authentication, an identity provider is required to validate the credentials
    (i.e., username/password) provided by the user. Quarkus provides the following
    identity providers out of the box, but you can implement your own, too:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用身份验证，需要身份提供者来验证用户提供的凭据（即用户名/密码）。Quarkus提供了以下开箱即用的身份提供者，但您也可以实现自己的身份提供者：
- en: Elytron properties file
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Elytron属性文件
- en: Provides a mapping between user/password/role in the form of the properties
    file. The information can be embedded either in *application.properties* file
    or in a specific file for this purpose.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以属性文件的形式提供用户/密码/角色之间的映射。这些信息可以嵌入在*application.properties*文件中，也可以放在一个专门用于此目的的文件中。
- en: Elytron JDBC
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Elytron JDBC
- en: Provides a mapping between user/password/role based on JDBC queries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基于JDBC查询提供用户/密码/角色之间的映射。
- en: JPA
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JPA
- en: Provides support for authenticating via JPA.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 提供通过JPA进行身份验证的支持。
- en: SmallRye JWT
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SmallRye JWT
- en: Provides authentication using JSON Web Tokens (JWT) spec.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 提供使用JSON Web Tokens（JWT）规范进行身份验证。
- en: OIDC
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OIDC
- en: Provides authentication using an OpenID Connect (OIDC) provider like Keycloak.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提供使用OpenID Connect（OIDC）提供程序（如Keycloak）进行身份验证。
- en: Keycloak authorization
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Keycloak授权
- en: Provides support for a policy enforcer using Keycloak Authorization Services.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提供使用Keycloak授权服务的策略执行器支持。
- en: Basic authentication
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本身份验证
- en: To authenticate using *basic* access authentication, the `quarkus.http.auth.basic`
    configuration property must be set to `true`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用*基本*访问认证进行身份验证，必须将`quarkus.http.auth.basic`配置属性设置为`true`。
- en: Form-based authentication
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于表单的身份验证
- en: The `quarkus.http.auth.form.enabled` configuration property must be set to `true`
    in order to authenticate using *form* access authentication.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用*表单*访问认证进行身份验证，必须将`quarkus.http.auth.form.enabled`配置属性设置为`true`。
- en: Important
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要
- en: Quarkus does not store the authenticated user in an HTTP session because there
    is no clustered HTTP session support. Instead, the authentication information
    is stored in an encrypted cookie.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus不会将经过身份验证的用户存储在HTTP会话中，因为没有集群化的HTTP会话支持。相反，身份验证信息存储在加密的cookie中。
- en: The encryption key can be set using the `quarkus.http.auth.session.encryption-key`
    property, and it must be at least 16 characters long. The key is hashed using
    SHA-256, and the result is used as a key for AES-256 encryption of the cookie
    value. This cookie contains an expiry time as part of the encrypted value, generating
    a new cookie in one-minute intervals with an updated expiry time if the session
    is in use.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`quarkus.http.auth.session.encryption-key`属性来设置加密密钥，必须至少为16个字符长。该密钥使用SHA-256进行哈希，结果用作AES-256加密Cookie值的密钥。此Cookie包含作为加密值的一部分的到期时间，在使用会话时每分钟生成一个新的Cookie，并更新到期时间。
- en: Authorization
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: Quarkus integrates with [Java EE Security annotations](https://oreil.ly/ATPpq)
    to define RBAC on RESTful web endpoints and CDI beans.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus与[Java EE安全注解](https://oreil.ly/ATPpq)集成，以定义对RESTful Web端点和CDI bean的RBAC。
- en: Moreover, you can define the authorization of RESTful Web Endpoints using a
    configuration file (*application.properties*) instead of annotations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用配置文件（*application.properties*）而不是注解来定义RESTful Web端点的授权。
- en: Both approaches can coexist in the same application, but configuration file
    checks are executed before any annotation check and are not mutually exclusive,
    which means that in case of overlap, both checks must pass.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法可以在同一个应用程序中共存，但是配置文件检查会在任何注解检查之前执行，并且它们不是互斥的，这意味着在重叠的情况下，必须通过两个检查。
- en: 'The following snippet shows how to secure a JAX-RS endpoint using the Java
    EE Security annotations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码段展示了如何使用Java EE安全注解来保护JAX-RS端点：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO1-1)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO1-1)'
- en: Requires an authenticated user with role `Tester`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要求具有`Tester`角色的经过身份验证的用户
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO1-2)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO1-2)'
- en: Unauthenticated users have access to the method
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 未经身份验证的用户可以访问该方法
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO1-3)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO1-3)'
- en: No user can access whether authenticated or not
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是否经过身份验证，都不能访问用户。
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO1-4)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO1-4)'
- en: Permit any authenticated user to access; it is an alias of `@RolesAllowed("*")`
    and is provided by Quarkus, not the spec
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 允许任何经过身份验证的用户访问；它是`@RolesAllowed("*")`的别名，由Quarkus提供，而不是规范。
- en: 'The `javax.ws.rs.core.Context` annotation can be used to inject the `javax.ws.rs.core.SecurityContext`
    instance to get information about the user that was authenticated:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`javax.ws.rs.core.Context`注解来注入`javax.ws.rs.core.SecurityContext`实例，以获取有关已验证用户的信息：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO2-1)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO2-1)'
- en: Injects `SecurityContext` for current request
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为当前请求注入`SecurityContext`
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO2-2)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO2-2)'
- en: Gets the current logged user
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 获取当前登录的用户
- en: Important
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要提示
- en: Security annotations are not restricted only to JAX-RS resources. They can be
    used in CDI beans to protect method calls, too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安全注解不仅限于JAX-RS资源。它们也可以用于CDI bean中来保护方法调用。
- en: 'Quarkus supports configuring RESTful web endpoints using the configuration
    file instead of annotations. The equivalent security annotation example can be
    expressed using the configuration file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus支持使用配置文件而不是注解来配置RESTful Web端点。可以通过配置文件表示等效的安全注解示例：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO3-1)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO3-1)'
- en: Defines the roles of the application; `role-policy1` is used as reference value
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 定义应用程序的角色；`role-policy1`用作参考值
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO3-2)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO3-2)'
- en: Sets the permission to the resource; `roles1` is an arbitrary name to avoid
    repeating keys
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 设置资源的权限；`roles1`是一个任意的名称，以避免重复的键。
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO3-3)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO3-3)'
- en: Sets the role policy
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 设置角色策略
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO3-4)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO3-4)'
- en: Restricts permission to the `GET` method
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 限制对`GET`方法的权限
- en: '[![5](Images/5.png)](#co_authentication_and_authorization_CO3-5)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_authentication_and_authorization_CO3-5)'
- en: Denies access
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 拒绝访问
- en: '[![6](Images/6.png)](#co_authentication_and_authorization_CO3-6)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_authentication_and_authorization_CO3-6)'
- en: Permits access
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 允许访问
- en: It is important to note that the `paths` attribute supports multiple values
    separated by a comma, and also the `*` wildcard to match any subpath. For example,
    `quarkus.http.auth.permission.permit1.paths=/public/_,/robots.txt` sets permission
    for any resource placed at */public* and any of its subpaths and the file */robots.txt*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是`paths`属性支持逗号分隔的多个值，还支持`*`通配符来匹配任何子路径。比如，`quarkus.http.auth.permission.permit1.paths=/public/_,/robots.txt`设置了对位于*/public*及其子路径下的任意资源和文件*/robots.txt*的权限。
- en: In the same way, the `methods` attribute allows multiple values separated by
    a comma.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`methods`属性允许用逗号分隔的多个值。
- en: 'There are two configuration properties that affect the RBAC behavior:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个配置属性影响RBAC的行为：
- en: '`quarkus.security.jaxrs.deny-unannotated-endpoints`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.jaxrs.deny-unannotated-endpoints`'
- en: If it is set to `true`, then all JAX-RS endpoints not annotated with security
    annotations are denied by default. This property is `false` by default.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`true`，则所有未标记安全注解的JAX-RS端点默认情况下将被拒绝访问。此属性默认值为`false`。
- en: '`quarkus.security.deny-unannotated-members`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.deny-unannotated-members`'
- en: If it is set to `true`, then all JAX-RS endpoints and CDI methods not annotated
    with security annotations are denied by default. This property is `false` by default.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为`true`，那么所有未标记安全注解的JAX-RS端点和CDI方法默认情况下将被拒绝。此属性默认值为`false`。
- en: So far, you’ve seen that in Quarkus you can set authorization procedure (basic,
    form, or other provided by extension) and define the authentication roles using
    security annotations or specifying them in the configuration file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到在Quarkus中可以设置授权过程（基本的、表单的，或者其他扩展提供的）并使用安全注解或在配置文件中指定身份验证角色。
- en: The recipes in this chapter will explore the different Quarkus extensions to
    provide authentication and authorization identity providers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例将探讨不同的Quarkus扩展以提供身份验证和授权身份提供者。
- en: 11.1 Authentication and Authorization with Elytron Properties File Config
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1使用Elytron属性文件配置进行身份验证和授权
- en: Problem
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to secure the application by storing identities in files.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你想通过存储身份来保护应用程序。
- en: Solution
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus security provides support to store identities in files using the Elytron
    properties file config as an identity provider.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus安全性支持使用Elytron属性文件配置将身份存储在文件中作为身份提供者。
- en: You’ve seen how to define the authentication mechanism and how to protect the
    resources with RBAC, either with security annotations or in *application.properties*,
    but you’ve not seen how to register an identity provider and how to store the
    user information like username, password, or roles where it belongs.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了如何定义身份验证机制以及如何使用RBAC保护资源，无论是通过安全注解还是在*application.properties*中，但你还没有看到如何注册身份提供者以及如何存储用户信息，比如用户名、密码或角色。
- en: Let’s see how to define identity information using the Elytron properties file
    config extension. This extension is based on the properties file to define all
    identity information, and its main purpose is for development and testing. It
    is not recommended that this be used in production because passwords can be expressed
    only in plain text or in MD5 hashed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用Elytron属性文件配置扩展定义身份信息。该扩展基于属性文件来定义所有身份信息，其主要目的是用于开发和测试。不推荐在生产环境中使用，因为密码只能以明文或MD5哈希的形式表示。
- en: 'To enable the Elytron properties file config, you need to register the `quarkus-elytron-security-properties-file`
    extension:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用Elytron属性文件配置，需要注册`quarkus-elytron-security-properties-file`扩展：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This extension supports the mapping of users to passwords and users to roles
    with a combination of properties files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展支持使用属性文件的组合将用户映射到密码和用户映射到角色。
- en: 'Protect the endpoint with allowing only the `Tester` role to access the resource:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 保护端点，只允许`Tester`角色访问资源：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To register identities, two properties files are required, one for mapping user
    and password, and another one for mapping the user and the list of roles they
    belong in.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册身份，需要两个属性文件，一个用于将用户和密码映射，另一个用于将用户和他们所属的角色列表映射。
- en: 'The user configuration properties file defines for each line the pair of user
    and password that are registered in the system:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 用户配置属性文件定义了每一行用户和密码的配对，在系统中注册：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the users’ properties file, the key part is the username, and the value part
    is the password.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户属性文件中，关键部分是用户名，值部分是密码。
- en: Warning
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: 'Notice that the password is in plain text. You can hash the password with MD5
    following this pattern: `HEX(MD5(username:realm:password)`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意密码为明文。您可以按照以下模式使用MD5对密码进行哈希：`HEX(MD5(username:realm:password)`。
- en: 'The roles configuration file defines for each line the pair of username and
    the roles (separated by commas) that the user belongs in:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 角色配置文件为每行定义了用户名和用户所属角色（用逗号分隔）：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the roles properties file, the key part is the username, and the value is
    the roles assigned to the user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色属性文件中，关键部分是用户名，值是分配给用户的角色。
- en: 'Finally, the Elytron Security properties file extension needs to be configured
    with the classpath locations of the users and roles properties files:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Elytron安全属性文件扩展需要配置用户和角色属性文件的类路径位置：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO4-1)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO4-1)'
- en: Enables basic authentication method
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 启用基本认证方法。
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO4-2)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO4-2)'
- en: Enables security with the properties file extension
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 启用具有属性文件扩展的安全性
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO4-3)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO4-3)'
- en: Sets the password that is not hashed with MD5
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 设置未使用MD5哈希的密码
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO4-4)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO4-4)'
- en: Sets the classpath location of the users and roles properties files
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户和角色属性文件的类路径位置。
- en: 'Run the generated test to validate the protection of the endpoint:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 运行生成的测试以验证端点的保护：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The test is failing with an HTTP 401 Unauthorized error because the test is
    not providing any identity using the Basic authentication method. Modify the test
    to authenticate with a configured username and password:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败，显示HTTP 401未经授权的错误，因为测试未使用基本认证方法提供任何身份验证。修改测试以使用配置的用户名和密码进行身份验证：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO5-1)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO5-1)'
- en: Sets authentication part
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 设置认证部分。
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO5-2)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO5-2)'
- en: Basic authentication with a given username and password
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的用户名和密码进行基本认证
- en: Now, with valid authenticating parameters, the test passes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用有效的认证参数，测试通过。
- en: Discussion
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The Elytron properties file config extension also supports embedding the mapping
    between user/password/roles in the Quarkus configuration file (*application.properties*)
    instead of using different files.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Elytron属性文件配置扩展还支持在Quarkus配置文件（*application.properties*）中嵌入用户/密码/角色的映射，而不是使用不同的文件。
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Passwords stored in a file can be hashed using the formula `HEX(MD5(username
    ":" realm ":" password))`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在文件中的密码可以使用公式`HEX(MD5(username ":" realm ":" password))`进行哈希。
- en: An embedded Elytron properties file config can be configured by using the properties
    listed in [Table 11-1](#embeded-elytron-properties-config-table).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用[表11-1](#embeded-elytron-properties-config-table)中列出的属性来配置嵌入式Elytron属性文件。
- en: Table 11-1\. Embeded Elytron properties
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 表11-1\. 嵌入式Elytron属性
- en: '| Property | Description |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`quarkus.security.users.embedded.realm-name`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.users.embedded.realm-name`'
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The realm name used when generating a hashed password (defaults to `Quarkus`).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 生成哈希密码时使用的域名（默认为`Quarkus`）。
- en: '|'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`quarkus.security.users.embedded.enabled`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.users.embedded.enabled`'
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Enables security with the properties file extension (defaults to `false`).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有属性文件扩展的安全性（默认为`false`）。
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`quarkus.security.users.embedded.plain-text`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.users.embedded.plain-text`'
- en: '|'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Sets if the password is hashed or not. If `true`, the hashed password must be
    in the form of `HEX(MD5(username:realm:password)` (defaults to `false`).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 设置密码是否为哈希形式。如果设为`true`，则哈希密码必须采用`HEX(MD5(username:realm:password)`的格式（默认为`false`）。
- en: '|'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`quarkus.security.users.embedded.users.<user>`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.users.embedded.users.<user>`'
- en: '|'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The user information. The key part is the username, and the value part is the
    password.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 用户信息。关键部分是用户名，值部分是密码。
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`quarkus.security.users.embedded.roles.<user>`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`quarkus.security.users.embedded.roles.<user>`'
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The role information. The key part is the username, and the value part is the
    password.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 角色信息。关键部分是用户名，值部分是密码。
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 11.2 Authentication and Authorization with Elytron Security JDBC Config
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.2 使用Elytron安全性JDBC配置进行认证和授权
- en: Problem
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to secure the application and store user identities in a database.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望保护应用程序并将用户身份存储在数据库中。
- en: Solution
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus security provides support to store user identities in a data source
    using Elytron Security JDBC config as an identity provider.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus安全性提供支持，可以使用Elytron安全性JDBC配置将用户身份存储在数据源中作为身份提供者。
- en: You’ve seen how to define identities in properties files using the Elytron properties
    file config extension in [Recipe 11.1](#authentication-and-authorization-with-elytron-properties-file-config).
    However, as noted there, this method is more for testing/dev purposes and should
    not be used in production environments.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到如何使用Elytron属性文件配置扩展在属性文件中定义身份，详见[Recipe 11.1](#authentication-and-authorization-with-elytron-properties-file-config)。然而，正如所述，此方法更适用于测试/开发目的，不应在生产环境中使用。
- en: The Elytron Security JDBC extension can be used to store the user identities
    in a database, supporting password encryption using bcrypt password mapper, and
    being versatile enough to not lock you into any predefined database schema.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Elytron安全性JDBC扩展可用于将用户身份存储在数据库中，支持使用bcrypt密码映射器进行密码加密，并且足够灵活，不会将您锁定在任何预定义的数据库模式中。
- en: 'To enable the Elytron Security JDBC extension, you need to register the `quarkus-elytron-security-jdbc`
    extension, the JDBC driver used to connect to the database, and optionally Flyway
    to populate schema and some default users:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用Elytron安全性JDBC扩展，您需要注册`quarkus-elytron-security-jdbc`扩展，用于连接数据库的JDBC驱动程序，以及可选的Flyway来填充模式和一些默认用户：
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Protect the endpoint with allowing only the `Tester` role to access the resource:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 保护终端点，仅允许具有`Tester`角色的用户访问资源：
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next step is to define the database schema to store all RBAC information.
    For the sake of simplicity, a simple table with user, password, and role is used
    in this example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义数据库模式以存储所有RBAC信息。为简单起见，此示例中使用了一个包含用户、密码和角色的简单表格：
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, the extension must be configured to specify which query to execute
    to validate the user and retrieve the roles they belong in:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，必须配置扩展以指定要执行的查询来验证用户并检索他们所属的角色：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO6-1)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO6-1)'
- en: Enables Elytron Security JDBC
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Elytron安全性JDBC。
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO6-2)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO6-2)'
- en: Defines the query to validate the user and get the roles; the query must contain
    exactly one parameter (the username) and return at least the password, and the
    value should be on the same line as the key
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 定义验证用户并获取角色的查询；查询必须包含一个参数（用户名），并且至少返回密码，值应与键在同一行。
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO6-3)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO6-3)'
- en: The password is stored in cleartext
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 密码以明文存储。
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO6-4)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO6-4)'
- en: Sets the index of the password; this should all be on the same line
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 设置密码的索引；所有内容应在同一行上
- en: '[![5](Images/5.png)](#co_authentication_and_authorization_CO6-5)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_authentication_and_authorization_CO6-5)'
- en: Sets the index of the role and specifies the field as role
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 设置角色的索引，并指定该字段为角色
- en: Important
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要提示
- en: Index is 1-based.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 索引从1开始。
- en: Tip
  id: totrans-180
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 贴士
- en: The query to retrieve the password (and optionally the roles) can be as complex
    as required by your model (i.e., SQL joins).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 检索密码的查询（以及可选的角色）可以根据模型的要求复杂化（即，SQL连接）。
- en: Now, the authentication and authorization data are retrieved from the database
    instead of a file. When the username and password are provided (e.g., using the
    basic `auth` method), the query is executed to retrieve all required information
    for the authentication process (matching provided password against the retrieved
    password from the database) and to get roles for the authorization process.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，身份验证和授权数据是从数据库中检索，而不是从文件中。当提供用户名和密码（例如，使用基本的`auth`方法）时，将执行查询以检索身份验证过程所需的所有信息（将提供的密码与从数据库检索到的密码进行匹配），并获取授权过程中的角色。
- en: 'Remember to update the test (if not done before) to make it pass:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 记得更新测试（如果之前未完成）以使其通过：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Discussion
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In this recipe, you’ve used a cleartext password, which obviously should not
    be used in a production environment. The extension provides an integration to
    the `bcrypt` password mapper, so the authentication process also works for hashing
    passwords.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您使用了明文密码，显然不应在生产环境中使用。该扩展提供了与`bcrypt`密码映射器集成，因此身份验证过程也适用于哈希密码。
- en: You need to extend the configuration file with some extra parameters to indicate
    to Elytron Security JDBC that the password is using `bcrypt` and should not be
    compared as cleartext.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要通过向配置文件添加一些额外参数来指示 Elytron Security JDBC 使用`bcrypt`加密密码，并且不应将其作为明文进行比较。
- en: 'Instead of configuring `clear-password-mapper`, the `bcrypt-password-mapper`
    is used. The following is an example of a configuration file using `bcrypt`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 不再配置 `clear-password-mapper`，而是使用 `bcrypt-password-mapper`。以下是使用 `bcrypt` 的配置文件示例：
- en: '[PRE16]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO7-1)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO7-1)'
- en: Enables bcrypt
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 bcrypt
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO7-2)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO7-2)'
- en: Sets password index; this should be on the same line
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 设置密码索引；这应该在同一行。
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO7-3)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO7-3)'
- en: Sets password hash encoding; this should be on the same line
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 设置密码哈希编码；这应该在同一行。
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO7-4)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO7-4)'
- en: Sets salt index; this should be on the same line
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 设置盐索引；这应该在同一行。
- en: '[![5](Images/5.png)](#co_authentication_and_authorization_CO7-5)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_authentication_and_authorization_CO7-5)'
- en: Sets salt encoding; this should be on the same line
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 设置盐编码；这应该在同一行。
- en: '[![6](Images/6.png)](#co_authentication_and_authorization_CO7-6)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_authentication_and_authorization_CO7-6)'
- en: Sets iteration count index; this should be on the same line
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 设置迭代计数索引；这应该在同一行。
- en: 'After this change, the password matching between the provided password and
    the password retrieved by query does not happen in cleartext. Rather, the provided
    password is hashed using bcrypt and then compared with the stored password:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在此更改后，提供的密码与通过查询检索的密码不再以明文形式匹配。相反，提供的密码使用 bcrypt 进行哈希处理，然后与存储的密码进行比较：
- en: '[PRE17]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO8-1)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO8-1)'
- en: Default data source is used to retrieve the password
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 默认数据源用于检索密码。
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO8-2)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO8-2)'
- en: '`roles` is used as a name to identify the second query; the query should all
    be on the same line'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles` 用作标识第二个查询的名称；查询应该全部位于同一行。'
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO8-3)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO8-3)'
- en: Gets the role from another query
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个查询获取角色。
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO8-4)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO8-4)'
- en: Role query is executed against a data source named `permissions`
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 角色查询针对名为`permissions`的数据源执行。
- en: 11.3 Authorization with MicroProfile JWT
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.3 使用 MicroProfile JWT 进行授权
- en: Problem
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to save security context in RESTful web services and stateless services
    in general.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在 RESTful web 服务和通常的无状态服务中保存安全上下文。
- en: Solution
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use JSON Web Tokens.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSON Web Tokens。
- en: JWT (JSON Web Token) is a standard specified under RFC-7519 that is used for
    exchanging information between services. The particularity of JWT is that the
    token content is formatted in JSON instead of in plain text or any other binary
    format.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: JWT（JSON Web Token）是根据 RFC-7519 规范制定的标准，用于在服务之间交换信息。JWT 的特殊之处在于，令牌内容以 JSON 格式而不是纯文本或任何其他二进制格式进行格式化。
- en: Quarkus integrates with the [MicroProfile JWT specification](https://oreil.ly/IU0-d)
    to consume and validate JWT tokens and retrieve the claims.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 与[MicroProfile JWT 规范](https://oreil.ly/IU0-d)集成，以消费和验证 JWT 令牌并获取声明。
- en: A JWT token is formed by *claims*, which are the information to transmit—for
    example, the username, the expiration of the token, or the roles of the user.
    The token is digitally signed so the information contained in the token can be
    trusted and verified.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: JWT 令牌由*声明*组成，这些声明是要传输的信息，例如用户名、令牌的过期时间或用户的角色。令牌经过数字签名，因此可以信任和验证其中包含的信息。
- en: 'A JWT token is composed of three sections. All of them are encoded in the Base64
    format:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: JWT 令牌由三个部分组成，所有部分均使用Base64编码：
- en: Header
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 头部
- en: It contains some metadata, like the algorithm used to sign the token; custom
    information of the token, like the type of token; or unencrypted claims if using
    JSON Web Encryption (JWE).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含一些元数据，例如用于签署令牌的算法；令牌的自定义信息，例如令牌类型；或者如果使用 JSON Web Encryption (JWE)，则是未加密的声明。
- en: Claims
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 声明
- en: Information to store inside the token. Some claims are mandatory, others are
    options, and some are custom to our application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要存储在令牌中的信息。某些声明是强制性的，其他是可选的，还有一些是我们应用程序自定义的。
- en: Signature
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 签名
- en: The signature of the token.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌的签名。
- en: Then the three sections are encoded to Base64 and concatenated with a period
    sign (`.`), so the final token looks like `base64(Header).base64(Claims).base64(Signature)`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将三个部分编码为Base64并用句点符号（`.`）连接，因此最终令牌看起来像是`base64(Header).base64(Claims).base64(Signature)`。
- en: 'For this example, the following JWT token is used:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本示例，使用以下JWT令牌：
- en: '[PRE18]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO9-1)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO9-1)'
- en: Header part
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 头部部分
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO9-2)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO9-2)'
- en: Claims part
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Claim部分
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO9-3)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO9-3)'
- en: The issuer of the token
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌的颁发者
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO9-4)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO9-4)'
- en: Groups (or roles) that the owner of the token belongs in
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 属于令牌所有者的组（或角色）。
- en: 'The following is the serialized version of the same token:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同令牌的序列化版本：
- en: '[PRE19]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice how the sections are divided by periods.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意部分如何用句点分隔。
- en: 'MicroProfile JWT spec performs the following operations when a request is received:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到请求时，MicroProfile JWT规范执行以下操作：
- en: Extract security token from the request, usually from the `Authorization` header.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从请求中提取安全令牌，通常从`Authorization`头部提取。
- en: Validate the token to make sure that the token is valid. These checks might
    involve things like verifying the signature to trust on the token or verifying
    that the token has not expired.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证令牌以确保令牌有效。这些检查可能涉及验证签名以信任令牌或验证令牌未过期。
- en: Extract token information.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取令牌信息。
- en: Create a security context with identity information so it can be used in case
    of authorization (RBAC).
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有身份信息的安全上下文，以便在授权（RBAC）时使用。
- en: 'Moreover, the MicroProfile JWT spec sets a list of mandatory claims that every
    token must provide:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MicroProfile JWT规范设置了每个令牌必须提供的强制声明列表：
- en: '| Claim | Description |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 声明 | 描述 |'
- en: '| --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`typ`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`typ`'
- en: '|'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The token format. It must be `JWT`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌格式。必须是`JWT`。
- en: '|'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`alg`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`alg`'
- en: '|'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Identifies the cryptographic algorithm to secure the token. It must be `RS256`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 标识用于保护令牌的加密算法。必须是`RS256`。
- en: '|'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`kid`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`kid`'
- en: '|'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Indicates which key was used to secure the token.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 指示用于保护令牌的密钥。
- en: '|'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`iss`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`iss`'
- en: '|'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The token issuer.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌颁发者。
- en: '|'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`sub`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`sub`'
- en: '|'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Identifies the principal subjected to the token.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 标识受令牌约束的主体。
- en: '|'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`aud`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`aud`'
- en: '|'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Identifies the recipients that the token is intended for.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 标识令牌所针对的接收者。
- en: '|'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`exp`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`exp`'
- en: '|'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Sets the expiration time.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 设置过期时间。
- en: '|'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`iat`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`iat`'
- en: '|'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Provides the time at which the token was issued.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 提供令牌发放的时间。
- en: '|'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`jti`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`jti`'
- en: '|'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Unique identifier of the token.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌的唯一标识符。
- en: '|'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`upn`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`upn`'
- en: '|'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The user-principal name used in the `java.security.Principal` interface.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`java.security.Principal`接口中的用户主体名称。
- en: '|'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`groups`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`'
- en: '|'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The list of group names that have been assigned to the principal of the token.
    They are the roles in which the user belongs.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 已分配给令牌主体的组名列表。它们是用户所属的角色。
- en: '|'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: These are the minimal claims that are required by the MicroProfile JWT specification,
    but additional claims can be added, such as `preferred_username` or any other
    information that your application might need to transmit between services.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是MicroProfile JWT规范所需的最小声明，但可以添加额外的声明，例如`preferred_username`或任何您的应用程序可能需要在服务之间传输的其他信息。
- en: 'Register the `quarkus-smallrye-jwt` extension to start using the MicroProfile
    JWT specification:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 注册`quarkus-smallrye-jwt`扩展以开始使用MicroProfile JWT规范：
- en: '[PRE20]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Configure the extension to set the public key used to verify that the token
    has not been modified and that the issuer (`iss`) claim of the token the server
    accepts is valid.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 配置扩展以设置用于验证令牌是否未被修改以及服务器接受的令牌颁发者（`iss`）声明的公钥。
- en: 'The following are public key formats supported by the specification:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 规范支持的公钥格式如下：
- en: 'Public Key Cryptography Standards #8 (PKCS#8) Privacy-Enhanced Mail (PEM)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Public Key Cryptography Standards #8（PKCS#8）Privacy-Enhanced Mail（PEM）'
- en: JSON Web Key (JWK)
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON Web Key（JWK）
- en: JSON Web Key Set (JWKS)
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON Web Key Set（JWKS）
- en: JSON Web Key (JWK) Base64 URL encoded
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON Web Key（JWK）Base64 URL编码
- en: JSON Web Key Set (JWKS) Base64 URL encoded
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON Web Key Set（JWKS）Base64 URL编码
- en: For this example, we choose the JSON Web Key Set (JWKS) format to specify the
    public key used to validate the token.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本示例，我们选择JSON Web Key Set（JWKS）格式来指定用于验证令牌的公钥。
- en: 'The JWKS file containing the public key is placed inside the project directory:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 包含公钥的JWKS文件放置在项目目录内：
- en: '[PRE21]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The configuration file pointing to this data is the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 指向此数据的配置文件如下：
- en: '[PRE22]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO10-1)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO10-1)'
- en: Location of the public key
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥的位置
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO10-2)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO10-2)'
- en: The issuer accepted by the service
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 服务所接受的发行者
- en: 'Apart from handling the verification process of the token, the MicroProfile
    JWT integrates with existing Java EE security APIs providing the data from the
    token. The integration happens in the following annotations:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 除了处理令牌的验证过程外，MicroProfile JWT 还集成了现有的Java EE安全API，提供来自令牌的数据。集成发生在以下注解中：
- en: '[PRE23]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Furthermore, the MicroProfile JWT spec provides two classes to accommodate
    JWT data inside CDI or JAX-RS classes:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MicroProfile JWT规范提供了两个类，用于在CDI或JAX-RS类中存储JWT数据。
- en: '`org.eclipse.microprofile.jwt.JsonWebToken`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.jwt.JsonWebToken`'
- en: Interface that exposes the raw token and offers methods to get the claims
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 公开原始令牌并提供获取声明的方法的接口
- en: '`@org.eclipse.microprofile.jwt.Claim`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`@org.eclipse.microprofile.jwt.Claim`'
- en: Annotation to provide injection of claims into classes
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 注释以在类中注入声明
- en: 'For example:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE24]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO11-1)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO11-1)'
- en: A JWT token is, by nature, request-scoped; if you expect to use the token, the
    class must be `RequestScoped` to avoid mixing tokens in classes
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: JWT令牌基于请求范围；如果希望使用令牌，则类必须为`RequestScoped`，以避免在类中混合令牌。
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO11-2)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO11-2)'
- en: Injects `JsonWebToken` interface that represents the full JWT token
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 注入代表完整JWT令牌的`JsonWebToken`接口
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO11-3)'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO11-3)'
- en: Injects the `preferred_username` claim
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 注入`preferred_username`声明
- en: 'Claim annotation also supports the injection of private claim names. These
    claims are not official claim names provided by the RFC but claims that are specific
    to the service (custom claims). To inject a private claim, use the annotation
    value as the name of the claim: `@Claim("*my_claim*")`. Moreover, in case of nonmandatory
    claims, the `java.util.Optional` class can be used to indicate that the claim
    is nullable:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 声明注解还支持注入私有声明名称。这些声明不是RFC提供的官方声明名称，而是特定于服务的声明（自定义声明）。要注入私有声明，请使用注解值作为声明的名称：`@Claim("*my_claim*")`。此外，在非强制性声明的情况下，可以使用`java.util.Optional`类来指示声明可为空：
- en: '[PRE25]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the test to send a bearer JWT token to the defined endpoint:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 更新测试以向定义的端点发送bearer JWT令牌：
- en: '[PRE26]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO13-1)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO13-1)'
- en: JWT token is sent as bearer token in `Authorization` header
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: JWT令牌作为`Authorization`头中的bearer令牌发送
- en: 'With the current solution, these assumptions are true:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 使用当前解决方案，这些假设是正确的：
- en: If a valid token is provided, the `preferred_username` is extracted.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了有效的令牌，则提取`preferred_username`。
- en: If an invalid token is provided (expired, signature not valid, modified by third
    party, etc.), then a 401 Unauthorized Error error code is sent back to the caller.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了无效的令牌（过期、签名无效、被第三方修改等），则向调用者返回401未经授权错误代码。
- en: If no token is provided, then the request is processed but the `preferred_username`
    field is null.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未提供令牌，则会处理请求，但`preferred_username`字段为空。
- en: The MicroProfile JWT spec also provides support for the authorization process
    by integrating with the `@RolesAllowed` annotation. The `groups` claim value is
    used any time the `isCallerInRole()` method is called, which effectively means
    that any value in `groups` can be used as a role in the application.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile JWT 规范还通过集成`@RolesAllowed`注解支持授权流程。每当调用`isCallerInRole()`方法时，都会使用`groups`声明值，这实际上意味着`groups`中的任何值都可以作为应用程序中的角色使用。
- en: 'The `groups` claim in the JWT token used in this example contains the following
    values: `"groups": ["Echoer", "Tester", "Subscriber", "group2"]`. Protect the
    call to `/hello` by using `@RolesAllowed` with one of the group values present
    in the token:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '在此示例中使用的JWT令牌中的`groups`声明包含以下值：`"groups": ["Echoer", "Tester", "Subscriber",
    "group2"]`。通过使用`@RolesAllowed`保护对`/hello`的调用，其中令牌中存在一个组值：'
- en: '[PRE27]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, you can assume the following:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以假设以下内容：
- en: If a valid token is provided and the `groups` claim contains the `Tester` group,
    then the `preferred_username` is extracted.
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了有效的令牌，并且`groups`声明包含`Tester`组，则提取`preferred_username`。
- en: If a valid token is provided and the `groups` claim does not contain the `Tester`
    group, then a 403 Forbidden error code is sent back to the caller.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了有效的令牌并且`groups`声明不包含`Tester`组，则返回给调用者403禁止错误代码。
- en: If an invalid token is provided (expired, signature not valid, modified by third
    party, etc.), then a 401 Unauthorized Error error code is sent back to the caller.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了无效的令牌（过期、签名无效、被第三方修改等），则返回给调用者401未授权错误代码。
- en: If no token is provided, then a 401 Unauthorized Error error code is sent back
    to the caller.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未提供令牌，则返回给调用者401未授权错误代码。
- en: Discussion
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In the past, the security context was saved in the HTTP session, which works
    well until you start scaling up the services and things start to become more and
    more complicated. To avoid this problem, one of the possible solutions is to pass
    this information in all calls using a token, especially a JSON token.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，安全上下文保存在HTTP会话中，这在服务规模扩展并变得越来越复杂时效果良好。为避免此问题，一种可能的解决方案是在所有调用中使用令牌传递此信息，特别是JSON令牌。
- en: It is important to note that the token is signed and not encrypted, which means
    that the information can be seen by anyone but not modified. An encryption layer
    can be added using JSON Web Encryption so that the claims are not in cleartext
    but instead are encrypted.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是令牌是签名的而不是加密的，这意味着信息可以被任何人看到但不能被修改。可以使用JSON Web Encryption添加加密层，使声明不是明文而是加密的。
- en: The intent of this section is not for you to master JWT but for you learn how
    to use it in Quarkus, so we are assuming that you already have some knowledge
    about JWT. We are also providing some links in the following “See Also” to help
    you become more familiar with JWT.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目的不是让您精通JWT，而是让您了解如何在Quarkus中使用它，因此我们假设您已经具有一些关于JWT的知识。我们还在下面的“参见”部分提供了一些链接，以帮助您更熟悉JWT。
- en: See Also
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn about JWT, visit the following web pages:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解JWT，请访问以下网页：
- en: '[JSON Web Tokens](https://jwt.io)'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JSON Web Tokens](https://jwt.io)'
- en: '[GitHub: JWT RBAC for MicroProfile](https://oreil.ly/tXP9d)'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub：MicroProfile的JWT RBAC](https://oreil.ly/tXP9d)'
- en: '[IETF: JSON Web Token](https://oreil.ly/p9jUC)'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IETF：JSON Web Token](https://oreil.ly/p9jUC)'
- en: 11.4 Authorization and Authentication with OpenId Connect
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.4 使用OpenId Connect进行授权和认证
- en: Problem
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to protect your RESTful Web API with OpenId Connect.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用OpenId Connect保护您的RESTful Web API。
- en: Solution
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use bearing token authorization where the token is issued by OpenId Connect.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 使用由OpenId Connect签发的承载令牌进行授权。
- en: In the previous section, you learned how to use the JWT token for protecting
    resources, but the generation of the token was not covered because the token was
    generated up front and provided in a text file.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您学习了如何使用JWT令牌保护资源，但未涵盖令牌的生成，因为令牌是预先生成并在文本文件中提供的。
- en: In real-world applications, you need an identity provider that issues the token.
    The de facto protocol for distributed services is OpenId Connect and OAuth 2.0
    and an authorization-compliant server with the protocol, such as [Keycloak](https://www.keycloak.org).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用程序中，您需要一个发行令牌的身份提供者。用于分布式服务的事实上协议是OpenId Connect和OAuth 2.0以及符合该协议的授权服务器，如[Keycloak](https://www.keycloak.org)。
- en: 'Register the `quarkus-oidc` extension to protect resources with OpenId Connect:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 注册`quarkus-oidc`扩展以保护使用OpenId Connect的资源：
- en: '[PRE28]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Configure the location of the OpenId Connect server to validate the token:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 配置OpenId Connect服务器的位置以验证令牌：
- en: '[PRE29]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO14-1)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO14-1)'
- en: The base URL of the OpenID Connect server
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: OpenID Connect服务器的基本URL
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO14-2)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO14-2)'
- en: Each application has a client ID used to identify the application
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有一个客户端ID用于标识应用程序
- en: 'Protect the endpoint using the `@RolesAllowed` annotation:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@RolesAllowed`注解保护端点：
- en: '[PRE30]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO15-1)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO15-1)'
- en: Quarkus interface that represents the currently logged in user
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus接口，表示当前已登录的用户
- en: 'The test must be updated to get the access token from OpenId Connect and provide
    it as the bearer token:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 测试必须更新以从OpenId Connect获取访问令牌并将其提供为承载令牌：
- en: '[PRE31]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The access token is generated in the OpenId Connect server. To generate it,
    some parameters must be provided, such as the username and password, to access
    the server and to generate a token representing the user:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌由 OpenId Connect 服务器生成。要生成它，必须提供一些参数，例如用户名和密码，以访问服务器并生成代表用户的令牌：
- en: '[PRE32]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The code is essentially an implementation of the next `curl` command but using
    REST-Assured:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 代码本质上是使用 REST-Assured 实现下一个`curl`命令的实现：
- en: '[PRE33]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now, when running the test, something completely different is shown than in
    [Recipe 11.3](#authorization-with-microprofile-jwt).
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在运行测试时，显示的内容与 [Recipe 11.3](#authorization-with-microprofile-jwt) 完全不同。
- en: First of all, the token (JWT token) is not static; it is issued by OpenID Connect
    (Keycloak) for the `alice` username.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，令牌（JWT 令牌）不是静态的；它是由 OpenID Connect（Keycloak）为`alice`用户名颁发的。
- en: 'The following is example of an issued token for `alice`:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是针对`alice`的示例已颁发令牌：
- en: '[PRE34]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Second, the OpenID Connect is responsible for providing everything to validate
    the token; the public key is not configured manually.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，OpenID Connect 负责提供所有内容来验证令牌；不手动配置公钥。
- en: 'The following validations are performed by Keycloak when the token is provided:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供令牌时，Keycloak 执行以下验证：
- en: If a valid token is provided and the `roles` claim contains the `user` group,
    then the `preferred_username` is extracted.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了有效令牌并且`roles`声明包含`user`组，则提取`preferred_username`。
- en: If a valid token is provided and the `roles` claim does not contain the `user`
    group, then a 403 Forbidden error code is sent back to the caller.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了有效令牌并且`roles`声明不包含`user`组，则会向调用方返回 403 Forbidden 错误代码。
- en: If an invalid token is provided (expired, signature not valid, modified by third
    party, etc.), then a 403 Forbidden error code is sent back to the caller.
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了无效令牌（过期、签名无效、被第三方篡改等），则会向调用方返回 403 Forbidden 错误代码。
- en: If no token is provided, then a 401 Unauthorized Error error code is sent back
    to the caller.
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未提供令牌，则会向调用方返回 401 Unauthorized 错误代码。
- en: See Also
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about OpenId Connect protocol, see the following websites:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关 OpenId Connect 协议的更多信息，请参阅以下网站：
- en: '[OpenID Connect](https://openid.net/connect)'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenID Connect](https://openid.net/connect)'
- en: '[Keycloak](https://www.keycloak.org)'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Keycloak](https://www.keycloak.org)'
- en: 11.5 Protecting Web Resources with OpenId Connect
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.5 使用 OpenId Connect 保护 Web 资源
- en: Problem
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to protect your web resources.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望保护您的 Web 资源。
- en: Solution
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use OpenId Connect and file-based role definitions to protect web resources.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenId Connect 和基于文件的角色定义来保护 Web 资源。
- en: Web resources can be protected using OpenId Connect protocol and Quarkus. The
    OpenId Connect extension enables authentication to web resources by implementing
    the well-known authorization code flow, where any unauthenticated user that is
    trying to access a protected resource is redirected to the OpenId Connect Provider
    website to authenticate. After the authentication process is completed, the user
    is sent back to the application.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 OpenId Connect 协议和 Quarkus 保护 Web 资源。 OpenId Connect 扩展通过实现众所周知的授权码流程，使
    Web 资源能够进行身份验证，如果尝试访问受保护资源的未经身份验证用户，则会将其重定向到 OpenId Connect 提供者网站进行身份验证。完成身份验证过程后，用户将被发送回应用程序。
- en: 'Register the `quarkus-oidc` extension to protect resources with OpenId Connect:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 注册`quarkus-oidc`扩展以保护 OpenId Connect 资源：
- en: '[PRE35]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Configure the location of the OpenId Connect server to validate the token:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 OpenId Connect 服务器的位置以验证令牌：
- en: '[PRE36]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[![1](Images/1.png)](#co_authentication_and_authorization_CO16-1)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_authentication_and_authorization_CO16-1)'
- en: The base URL of the OpenID Connect server
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: OpenID Connect 服务器的基本 URL
- en: '[![2](Images/2.png)](#co_authentication_and_authorization_CO16-2)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_authentication_and_authorization_CO16-2)'
- en: Each application has a client ID used to identify the application
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有一个客户端 ID 用于标识应用程序
- en: '[![3](Images/3.png)](#co_authentication_and_authorization_CO16-3)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_authentication_and_authorization_CO16-3)'
- en: Enables OpenID Connect Authorization Code Flow
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 OpenID Connect 授权码流程
- en: '[![4](Images/4.png)](#co_authentication_and_authorization_CO16-4)'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_authentication_and_authorization_CO16-4)'
- en: Sets permission to web resources
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Web 资源的权限
- en: 'Start the application, open a browser, and enter the following URL: [*http://localhost:8080*](http://localhost:8080):'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '启动应用程序，打开浏览器，并输入以下网址：[*http://localhost:8080*](http://localhost:8080):'
- en: '[PRE37]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The default *index.html* page is not shown, but you are redirected to the authentication
    page of Keycloak. Enter the following valid credentials (login: **`alice`**, password:
    **`alice`**) to gain access to the web resource. After pushing the Login button,
    the page is redirected back to the login page.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
