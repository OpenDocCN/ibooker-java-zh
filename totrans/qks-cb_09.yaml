- en: Chapter 9\. Observability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章 可观察性
- en: In this chapter, you’ll learn about observability and why it is important to
    have in the microservices architecture. Observability answers the question of
    how your system is behaving by observing some parameters like error codes, performance,
    or any kind of business metric. Quarkus integrates with several technologies used
    for observability natively.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解可观察性及其在微服务架构中的重要性。可观察性通过观察一些参数（如错误代码、性能或任何类型的业务指标）来回答系统行为的问题。Quarkus
    与用于可观察性的多种技术进行了原生集成。
- en: 'This chapter will include recipes for how to accomplish the following tasks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包含如何完成以下任务的示例：
- en: Define health checks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义健康检查
- en: Provide metrics to the monitoring system
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向监控系统提供指标
- en: Configure distributed tracing to have an overview of a request inside the mesh
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置分布式跟踪以了解网格内的请求概况
- en: 9.1 Using Automatic Health Checks
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9.1 使用自动健康检查
- en: Problem
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to check whether the service is up and running and able to handle requests
    correctly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要检查服务是否正在运行并且能够正确处理请求。
- en: Solution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The MicroProfile Health specification provides an API to probe the state of
    a service from another machine (e.g., Kubernetes Controller).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile 健康规范提供了一个 API，用于从另一台机器（例如 Kubernetes 控制器）探查服务的状态。
- en: 'To enable MicroProfile Health in a Quarkus application, you need to register
    only the `quarkus-smallrye-health` extension:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Quarkus 应用程序中启用 MicroProfile Health，您只需要注册 `quarkus-smallrye-health` 扩展：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the extension in the classpath, Quarkus automatically registers a default
    liveness and readiness probe, which both return `UP` when the service is up and
    running:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有了类路径中的扩展，Quarkus 将自动注册默认的活跃性和可用性探针，当服务正在运行时，两者都返回 `UP`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_observability_CO1-1)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO1-1)'
- en: Liveness URL
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性 URL
- en: '[![2](Images/2.png)](#co_observability_CO1-2)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO1-2)'
- en: Status is `UP`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 状态为 `UP`
- en: '[![3](Images/3.png)](#co_observability_CO1-3)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_observability_CO1-3)'
- en: No checks (just defaults)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 没有检查（只有默认值）
- en: '[![4](Images/4.png)](#co_observability_CO1-4)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_observability_CO1-4)'
- en: Readiness URL
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性 URL
- en: Discussion
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The MicroProfile Health specification provides two kinds of health checks:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile 健康规范提供了两种健康检查：
- en: Liveness
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃性
- en: Returns a 200 OK with result UP if the service has been started, 503 Service
    Unavailable with result DOWN if the service is not live, and 500 Server Error
    if the health check couldn’t be calculated. The liveness probe endpoint is registered
    by default at the */health/live* endpoint.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务已启动，则返回 200 OK 结果为 UP，如果服务不可用，则返回 503 Service Unavailable 和 DOWN 结果，如果无法计算健康检查，则返回
    500 Server Error。活跃性探针端点默认注册在 */health/live* 端点。
- en: Readiness
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性
- en: Returns a 200 OK with result UP if the service is ready to process requests.
    This is different from the liveness probe because liveness simply means that the
    service is up but might not be able to process any request yet (e.g., because
    it is executing a database migration). A 503 Service Unavailable with result DOWN
    is returned if the service cannot yet accept any request, and a 500 Server Error
    is returned if the health check couldn’t be calculated. The readiness probe endpoint
    is registered by default at the */health/ready* endpoint.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务准备好处理请求，则返回 200 OK 结果为 UP。这与活跃性探针不同，因为活跃性只意味着服务正在运行，但可能尚未能够处理任何请求（例如，因为正在执行数据库迁移）。如果服务尚不能接受任何请求，则返回
    503 Service Unavailable 和 DOWN 结果，如果无法计算健康检查，则返回 500 Server Error。准备探针端点默认注册在
    */health/ready* 端点。
- en: If you are configuring Quarkus to use an SQL database (JDBC), it will automatically
    register a readiness health check (in the `checks` section) that validates that
    the connection to the database is possible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在配置 Quarkus 使用 SQL 数据库（JDBC），它将自动注册一个可用性健康检查（在 `checks` 部分），以验证与数据库的连接是否可行。
- en: 'The following extensions provide automatic readiness/liveness probes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下扩展提供了自动的可用性/活跃性探针：
- en: Datasource
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源
- en: A readiness probe to check database connection status.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检查数据库连接状态的准备探针。
- en: Kafka
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Kafka
- en: A readiness probe to check Kafka connection status. It is disabled by default
    and needs to be enabled by setting `quarkus.kafka.health.enabled` property to
    `true`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检查 Kafka 连接状态的准备探针。默认情况下禁用，需要通过将 `quarkus.kafka.health.enabled` 属性设置为 `true`
    来启用。
- en: MongoDB
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB
- en: A readiness probe to check MongoDB connection status.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检查 MongoDB 连接状态的准备探针。
- en: Neo4j
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Neo4j
- en: A readiness probe to check Neo4j connection status.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检查 Neo4j 连接状态的准备探针。
- en: Artemis
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Artemis
- en: A readiness probe to check Artemis JMS connection status.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Kafka Streams
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Liveness (for stream state) and readiness (topics created) probes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Vault
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: A readiness probe to check Vault status.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The automatic generation of the probes can be disabled by setting the `quarkus.*component*.health.enabled`
    to `false`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See Also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the MicroProfile Health specification, see the following
    page on GitHub:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[MicroProfile Health](https://oreil.ly/wZjHC)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.2 Creating Custom Health Checks
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to customize how to check that a service is up and running and that
    it is able to handle requests correctly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Health specification enables you to create custom liveness
    and readiness health checks. In some circumstances, a custom health-check logic
    might be needed for either liveness or readiness probes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: The MicroProfile Health specification allows you to create custom health checks
    by creating a method annotated with `@org.eclipse.microprofile.health.Liveness`
    and `@org.eclipse.microprofile.health.Readiness` and returning an implementation
    of `org.eclipse.microprofile.health.HealthCheck` interface.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class at `org.acme.quickstart.LivenessCheck.java` to implement
    a custom liveness probe:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_observability_CO2-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Needs to be a CDI class
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_observability_CO2-2)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Sets health check as liveness
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_observability_CO2-3)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Implements `HealthCheck` as a requirement
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_observability_CO2-4)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Sets health check name
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_observability_CO2-5)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Sets result as up
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_observability_CO2-6)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Sets result as down
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check that this liveness probe works as expected:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Discussion
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because health checks are registered as CDI beans, you can also produce health
    checks in factory objects, as explained in [Recipe 5.7](ch05.xhtml#creating_factories).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new factory class to contain the new health check—in this case, a
    readiness check:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_observability_CO3-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Needs to be a CDI class
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_observability_CO3-2)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The method produces a health check
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_observability_CO3-3)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Readiness probe
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_observability_CO3-4)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '`HealthStatus` is a utility class that implements the `HealthCheck` interface
    for you'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check that this readiness probe works as expected:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See Also
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MicroProfile Health specification is perfect for defining Kubernetes liveness
    and readiness probes. You can learn about them at the following website:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[Kubernetes: Configure Liveness, Readiness, and Startup Probes](https://oreil.ly/nTaaa)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.3 Exposing Metrics
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to proactively check the current status of a service in production
    by exposing service metrics in order to detect any misbehavior as quickly as possible.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Metrics specification provides a way to build and expose metrics
    from your application to a monitoring tool (e.g., Prometheus).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable MicroProfile Metrics in a Quarkus application, you need to register
    only the `quarkus-smallrye-metrics` extension:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Quarkus应用程序中启用MicroProfile Metrics，您只需注册`quarkus-smallrye-metrics`扩展：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the extension in the classpath, Quarkus provides monitoring parameters
    by default, exposing them at the `/metrics` endpoint in Prometheus format:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在类路径中添加扩展后，Quarkus默认提供监控参数，并以Prometheus格式在`/metrics`端点公开它们：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output format can be changed to JSON by adding `application/json` type
    in the HTTP `Accept` header:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在HTTP `Accept`头中添加`application/json`类型，可以将输出格式更改为JSON：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Discussion
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Knowing how a service is behaving in microservices architectures is critical
    in anticipating any problem that might affect all your applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中了解服务的行为方式对于预测可能影响所有应用程序的任何问题至关重要。
- en: With monolith applications, monitoring service behavior was fairly easy because
    you had only three or four elements to monitor; but now with (micro)services architectures,
    you might have hundreds of elements to monitor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单体应用程序，监控服务行为相对较容易，因为您只需监控三到四个元素；但是现在随着（微）服务架构的出现，您可能需要监控数百个元素。
- en: 'There are many possible values to monitor, such as the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可能要监控的值，例如以下内容：
- en: Memory
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Disk space
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘空间
- en: Network
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: JVM resources
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM资源
- en: Performance of critical methods
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键方法的性能
- en: Business metrics (e.g., the number of payments per second)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务指标（例如每秒付款的次数）
- en: Overall health of your cluster
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群整体健康状况
- en: 'If you look closely at the output, you’ll see that the parameters are prefixed
    with either `base` or `vendor`. MicroProfile Metrics categorizes the metrics under
    three categories:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看输出，您将看到参数分别以`base`或`vendor`作为前缀。MicroProfile Metrics将指标分类为三类：
- en: base
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: base
- en: The core information of the server. These metrics are always required because
    they are specified in the specification. Access them at */metrics/base*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的核心信息。这些指标始终是必需的，因为它们在规范中指定。在*/metrics/base*路径下访问它们。
- en: vendor
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商
- en: Vendor-specific information. Each implementation might provide different ones.
    Access them at */metrics/vendor*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商特定的信息。每种实现可能提供不同的信息。在*/metrics/vendor*路径下访问它们。
- en: application
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序
- en: Custom information developed ad hoc for that service using the MicroProfile
    Metrics extension mechanism. Access them at */metrics/application*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MicroProfile Metrics扩展机制为该服务定制了专门的信息。在*/metrics/application*路径下访问它们。
- en: You can configure where metrics are exposed by setting the `quarkus.smallrye-metrics.path`
    property to the path where you want to expose them. By default, this property
    is set to `/metrics`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`quarkus.smallrye-metrics.path`属性设置为要公开指标的路径来配置指标的公开位置。默认情况下，此属性设置为`/metrics`。
- en: See Also
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about MicroProfile Metrics, visit the following page on GitHub:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多有关MicroProfile Metrics的信息，请访问GitHub上的以下页面：
- en: '[Metrics for Eclipse MicroProfile](https://oreil.ly/Q875g)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse MicroProfile的Metrics](https://oreil.ly/Q875g)'
- en: 9.4 Creating Metrics
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9.4 创建指标
- en: Problem
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to monitor some custom metrics, such as performance metrics or business
    metrics.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望监控一些自定义指标，如性能指标或业务指标。
- en: Solution
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The MicroProfile Metrics specification provides different annotations to register
    different kinds of monitoring parameters like counters, durations, and gauges.
    With these annotations, you can create custom metrics that might be related to
    business or performance parameters instead of physical values like memory, and
    CPU.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Metrics规范提供了不同的注解来注册不同类型的监控参数，如计数器、持续时间和仪表。通过这些注解，您可以创建可能与业务或性能参数相关的自定义指标，而不是像内存和CPU这样的物理值。
- en: 'The following are the MicroProfile Metrics annotations:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MicroProfile Metrics的注解：
- en: '| Annotation | Description |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 描述 |'
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.Counted`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.Counted`'
- en: '| Counts number of invocations. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 计数调用次数。 |'
- en: '|'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.Timed`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.Timed`'
- en: '| Tracks the duration of invocations. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 跟踪调用持续时间。 |'
- en: '|'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.SimplyTimed`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.SimplyTimed`'
- en: '| Tracks the duration of invocations without mean and distribution calculations.
    A simplified version of `Timed`. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 跟踪调用持续时间，不进行平均值和分布计算。`Timed`的简化版本。 |'
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.Metered`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.Metered`'
- en: '| Tracks the frequency of invocations. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 跟踪调用频率。 |'
- en: '|'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.Gauge`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.Gauge`'
- en: '| Samples a discrete value of an annotated field or method. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 对一个带注解的字段或方法进行离散值采样。 |'
- en: '|'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.ConcurrentGauge`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.ConcurrentGauge`'
- en: '| Gauge to count parallel invocations. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 计算并行调用次数的计量器。 |'
- en: '|'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.eclipse.microprofile.metrics.annotation.Metric`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.eclipse.microprofile.metrics.annotation.Metric`'
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Used to inject a metric. Valid types are `Meter`, `Timer`, `Counter` and `Histogram`.
    `Gauge` with `Metric` can only be used in a CDI producer.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 用于注入指标。有效类型包括 `Meter`、`Timer`、`Counter` 和 `Histogram`。`Gauge` 结合 `Metric` 只能在
    CDI 生产者中使用。
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Let’s look at how to use metrics annotations and how to create an histogram
    metric.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用指标注解以及如何创建直方图指标。
- en: Counter
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数器
- en: A *counter* increments invocations that are done to a method annotated with
    `@Counted` and can be used at method or class level.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *counter* 在用 `@Counted` 注解的方法上增加调用次数，并且可以在方法或类级别使用。
- en: 'In the following example, the number of invocations of a method is counted:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，方法调用次数被计数：
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_observability_CO4-1)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO4-1)'
- en: Registers the counter
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注册计数器
- en: '[![2](Images/2.png)](#co_observability_CO4-2)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO4-2)'
- en: Name of the counter
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器的名称
- en: '[![3](Images/3.png)](#co_observability_CO4-3)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_observability_CO4-3)'
- en: Sets a display name
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 设置显示名称
- en: '[![4](Images/4.png)](#co_observability_CO4-4)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_observability_CO4-4)'
- en: Description of the counter
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器的描述
- en: 'Let’s check the counter monitor:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看计数器监视器：
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Gauge
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计量器
- en: 'A *gauge* is a simple value that you want to expose to be measured, similar
    to a gas gauge on a car. To register it, you need to annotate either a field or
    a method with `@Gauge`, and the value/return value will be exposed automatically:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *gauge* 是一个简单的值，你希望公开以供测量，类似于汽车上的油表。要注册它，需要在字段或方法上注释 `@Gauge`，并且该值/返回值将自动公开：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](Images/1.png)](#co_observability_CO5-1)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO5-1)'
- en: Field to store the highest transaction
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储最高交易的字段
- en: '[![2](Images/2.png)](#co_observability_CO5-2)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO5-2)'
- en: Updates the field if the current transaction is higher
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前交易更高，则更新字段
- en: '[![3](Images/3.png)](#co_observability_CO5-3)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_observability_CO5-3)'
- en: Sets return value as a gauge
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回值设置为计量器
- en: '[![4](Images/4.png)](#co_observability_CO5-4)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_observability_CO5-4)'
- en: Name of the gauge
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 计量器的名称
- en: '[![5](Images/5.png)](#co_observability_CO5-5)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_observability_CO5-5)'
- en: Metrics of this gauge (e.g., seconds, percentage, per second, bytes, etc.)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 该计量器的指标（例如，秒、百分比、每秒、字节等）
- en: 'Execute the following commands to run the application, seed some metrics data,
    and view the output:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令来运行应用程序，生成一些指标数据，并查看输出：
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Metered
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计量的
- en: 'A *metered* metric measures the rate at which a method is called. The `@Metered`
    annotation can be used at the method or class level:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *metered* 指标测量方法调用的速率。`@Metered` 注解可以在方法或类级别使用：
- en: '[PRE14]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](Images/1.png)](#co_observability_CO6-1)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO6-1)'
- en: Registers the metered metric
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注册计量指标
- en: '[![2](Images/2.png)](#co_observability_CO6-2)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO6-2)'
- en: Sets units as seconds
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 设置单位为秒
- en: 'Execute the following commands to run the application, seed some metrics data,
    and view the output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令来运行应用程序，生成一些指标数据，并查看输出：
- en: '[PRE15]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Timed
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时器
- en: 'A *timed* metric measures the duration of a call. The `@Timed` annotation can
    be used at method or class level:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *timed* 指标测量调用的持续时间。`@Timed` 注解可以在方法或类级别使用：
- en: '[PRE16]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_observability_CO7-1)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO7-1)'
- en: Registers the timed metric
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注册计时指标
- en: 'Execute the following commands to run the application, seed some metrics data,
    and view the output:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令来运行应用程序，生成一些指标数据，并查看输出：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Histogram
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直方图
- en: 'A *histogram* measures the distribution of values across time; it measures
    things like min, max, standard deviation, or quantiles like the median or 95th.
    Histograms do not have a proper annotation, but the `org.eclipse.microprofile.metrics.Histogram`
    class is used to update the metric:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *histogram* 测量值随时间的分布；它测量最小值、最大值、标准偏差或像中位数或95分位数这样的分位数。直方图没有适当的注解，但 `org.eclipse.microprofile.metrics.Histogram`
    类用于更新指标：
- en: '[PRE18]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_observability_CO8-1)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO8-1)'
- en: Injects a histogram with given name
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注入带给定名称的直方图
- en: '[![2](Images/2.png)](#co_observability_CO8-2)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO8-2)'
- en: Updates the histogram with a new value
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新值更新直方图
- en: 'Execute the following commands to run the application, seed some metrics data,
    and view the output:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Discussion
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get metadata information from any metric by querying into a specific
    endpoint using the `OPTION` HTTP method. The metadata is exposed at `/metrics/*scope*/*metric_name*`,
    where the *`scope`* is `base`, `vendor`, or `application` and the *`metric_name`*
    is the name of the metric (in case of application one, the one set in `name` attribute).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 9.5 Using Distributed Tracing
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to profile and monitor the whole application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile OpenTracing specification uses the [OpenTracing standard API](https://opentracing.io)
    for instrumenting microservices for distributed tracing. Quarkus integrates with
    the MicroProfile OpenTracing specification as a solution for distributed tracing.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Distributed tracing is a method used to profile and monitor your distributed
    systems. It can be used to detect failures in the communication between services,
    determine which points are performance problems, or perform a log record of all
    requests and responses that are happening within the network mesh.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five important concepts in OpenTracing that you must understand before
    proceeding with distributed tracing:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Span
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: A named operation representing a unit of work done (e.g., a service executed).
    A span can contain more spans in a child-parent form.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Span context
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Trace information that is propagated from service to service (e.g., span ID).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Baggage items
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Custom key/value pairs that are propagated from service to service.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Tags
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Key/value pairs defined by the user that are set in spans so they can be queried
    and filtered (e.g., `http.status_code`).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Logs
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Key/value pairs associated with a span that contains logging messages or other
    important information. Logs are used to identify a specific moment in the span;
    meanwhile, tags apply to the whole span independently of time.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: For this example, the [Jaeger](https://www.jaegertracing.io) server is used
    to collect all traces from your application and make them available to be consumed
    or queried. [Figure 9-1](#microjaeger) shows the interaction between services
    and Jaeger.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0902](Images/qucb_0902.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. Microservices and Jaeger
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Jaeger concepts explained in the previous paragraph are illustrated in [Figure 9-2](#jaegerconcepts).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0901](Images/qucb_0901.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. Jaeger concepts
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `jaegertracing/all-in-one` container image is used because it contains
    all of the Jaeger backend components and the UI in a single image. This is not
    meant to be used in production, but, for the sake of simplicity, this is the image
    used in [Recipe 9.5](#using_distributed_tracing):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To enable MicroProfile OpenTracing in a Quarkus application, you need to register
    only the `quarkus-smallrye-opentracing` extension.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With the extension in the classpath, Quarkus/MicroProfile OpenTracing sends
    default tracing information to the Jaeger server. The only thing you need to do
    is configure the Jaeger endpoint where all tracing information should be sent.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在类路径中添加扩展后，Quarkus/MicroProfile OpenTracing 将默认的跟踪信息发送到 Jaeger 服务器。你只需配置 Jaeger
    端点，即可发送所有跟踪信息。
- en: 'The default tracing information collected includes the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 默认收集的跟踪信息包括以下内容：
- en: Hardware metrics like CPU, memory, and available processors.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件指标如 CPU、内存和可用处理器。
- en: JVM metrics like memory heap and thread pool.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM 指标如内存堆和线程池。
- en: MicroProfile OpenTracing creates a new span for every inbound request. The default
    name of this new span is `*HTTP method*:*package name*.*class name*.*method name*`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile OpenTracing 为每个传入请求创建一个新的 span。这个新 span 的默认名称是 `*HTTP method*:*package
    name*.*class name*.*method name*`。
- en: 'Spans created for incoming requests will contain the following tags with correct
    values:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为传入请求创建的 spans 将包含以下标签及其正确的值：
- en: '`Tags.SPAN_KIND` = `Tags.SPAN_KIND_SERVER`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.SPAN_KIND` = `Tags.SPAN_KIND_SERVER`'
- en: '`Tags.HTTP_METHOD` with the HTTP method used in the incoming request'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_METHOD` 表示传入请求中使用的 HTTP 方法'
- en: '`Tags.HTTP_URL` with the URL of incoming endpoints'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_URL` 表示传入端点的 URL'
- en: '`Tags.HTTP_STATUS` with the HTTP status result code'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_STATUS` 表示 HTTP 状态结果代码'
- en: '`Tags.COMPONENT` = `"jaxrs"`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.COMPONENT` = `"jaxrs"`'
- en: '`Tags.ERROR` to `true` if a server error (5XX error code) occurred; if an exception
    has a provided object, two logs are added, one with `event=error` and another
    one with `error.object=<error object instance>`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生服务器错误（5XX 错误代码），将 `Tags.ERROR` 设置为 `true`；如果异常有提供对象，则添加两个日志，一个带有 `event=error`，另一个带有
    `error.object=<error object instance>`
- en: 'In cases of outbound requests, a new span is created that is a child of the
    current active span (if it exists). The default name of the new span is `<HTTP
    method>`. Spans created for outgoing requests will contain the following tags
    with correct values:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于出站请求，如果存在当前活动 span，则创建一个新的子 span。新 span 的默认名称是 `<HTTP method>`。为传出请求创建的 spans
    将包含以下标签及其正确的值：
- en: '`Tags.SPAN_KIND`=`Tags.SPAN_KIND_SCLIENT`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.SPAN_KIND`=`Tags.SPAN_KIND_SCLIENT`'
- en: '`Tags.HTTP_METHOD` with the HTTP method used in outgoing request'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_METHOD` 表示传出请求中使用的 HTTP 方法'
- en: '`Tags.HTTP_URL` with the URL of the outgoing endpoint'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_URL` 表示传出端点的 URL'
- en: '`Tags.HTTP_STATUS` with the *HTTP* status result code'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.HTTP_STATUS` 表示 *HTTP* 状态结果代码'
- en: '`Tags.COMPONENT` = `"jaxrs"`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags.COMPONENT` = `"jaxrs"`'
- en: '`Tags.ERROR` to `true` if a client error (4XX error code) occurred; if an exception
    has a provided object, two logs are added, one with `event=error` and another
    one with `error.object=<error object instance>`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生客户端错误（4XX 错误代码），将 `Tags.ERROR` 设置为 `true`；如果异常有提供对象，则添加两个日志，一个带有 `event=error`，另一个带有
    `error.object=<error object instance>`
- en: 'The last thing to do is configure the Jaeger parameters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的事情是配置 Jaeger 参数：
- en: '[PRE22]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](Images/1.png)](#co_observability_CO9-1)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO9-1)'
- en: Service name to be identified inside Jaeger
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jaeger 中识别的服务名称
- en: '[![2](Images/2.png)](#co_observability_CO9-2)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO9-2)'
- en: Set up a sampler
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个采样器
- en: '[![3](Images/3.png)](#co_observability_CO9-3)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_observability_CO9-3)'
- en: Percentage of requests to sample in percentage (1 is sampling all)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 需要采样的请求百分比（1 表示全部采样）
- en: '[![4](Images/4.png)](#co_observability_CO9-4)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_observability_CO9-4)'
- en: The Jaeger server location
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Jaeger 服务器位置
- en: Then start the application and send some requests to one of the endpoints defined
    in the service. After that, inspect all distributed tracings by accessing Jaeger
    UI. Open a browser, and visit [*http://localhost:16686*](http://localhost:16686)
    (the Jaeger UI) to see the tracing information.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动应用程序，并向服务中定义的一个端点发送一些请求。之后，访问 Jaeger UI 来检查所有的分布式跟踪信息。打开浏览器，访问 [*http://localhost:16686*](http://localhost:16686)（Jaeger
    UI）以查看跟踪信息。
- en: In the initial page, you can filter by several parameters, but one of them is
    used to select the service that will be used to view the completed requests.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始页面中，可以通过多个参数进行筛选，但其中一个用于选择将用于查看已完成请求的服务。
- en: The home page of Jaeger is shown in [Figure 9-3](#jaegerinitial).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Jaeger 的首页显示在 [图 9-3](#jaegerinitial) 中。
- en: '![qucb 0903](Images/qucb_0903.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0903](Images/qucb_0903.png)'
- en: Figure 9-3\. Jaeger’s home page
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. Jaeger 的首页
- en: Push the Find Traces button to select all the traces that meet the given criteria,
    and you should see the image shown in [Figure 9-4](#jaegerfindtraces).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 点击查找跟踪按钮以选择符合给定条件的所有跟踪，你将看到 [图 9-4](#jaegerfindtraces) 中显示的图像。
- en: '![qucb 0904](Images/qucb_0904.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0904](Images/qucb_0904.png)'
- en: Figure 9-4\. Find traces
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You’ll see all the requests that meet the criteria. In this case, the requests
    are all traces that are involved in the `shopping-cart` service, as seen in [Figure 9-5](#jaegerviewtraces).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0903](Images/qucb_0903.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5\. View traces
  id: totrans-276
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you click on any of the requests, more detail of the specific request is
    shown, as shown in [Figure 9-6](#jaegerdetail).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0906](Images/qucb_0906.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6\. Detail of a request
  id: totrans-279
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In case of errors, a new log entry is added that sets the error message, as
    shown in [Figure 9-7](#jaegererror).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0907](Images/qucb_0907.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7\. Error log message
  id: totrans-282
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Disabling Tracing
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any request (incoming or outgoing) is traced by default. Disable the tracing
    of a specific class or method by annotating it with `@org.eclipse.microprofile.opentracing.Traced`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Discussion
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure OpenTracing by setting options in the *src/main/resources/application.properties*
    file or by using any other method discussed in [Recipe 9.6](#custom-distributed-tracing).
    Some of the most important configuration properties are listed in [Table 9-1](#opentracing-config-properties-table).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Table 9-1\. OpenTracing configuration properties
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.enabled`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'Defines if the Jaeger extension is enabled (default: `true`). It is a build
    property and cannot be modified at runtime.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.endpoint`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Traces server endpoint.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.auth-token`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Authentication token to the endpoint.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.user`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Username to send as part of authentication to the endpoint.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.password`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Password to send as part of authentication to the endpoint.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.sampler-type`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: The sampler type (`const`, `probabilistic`, `ratelimiting`. or `remote`).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.sampler-param`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Percentage of traffic sampled (0.0-1.0).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.service-name`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: The service name.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.tags`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: A comma-separated list of key/value tags that are added to all spans. Environment
    variables are supported by using `${environmentVar:default}`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.propagation`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: The format used to propagate the trace context (default is `jaeger`). Possible
    values are `jaeger` and `b3`.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`quarkus.jaeger.sender-factory`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: The sender factory class name.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See [Quarkus’s guide to using OpenTracing](https://oreil.ly/A2GJu) for the full
    list of supported properties.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about MicroProfile OpenTracing specification can be found
    at the following page on GitHub:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[MicroProfile OpenTracing](https://oreil.ly/v7kjr)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.6 Custom Distributed Tracing
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add custom information in the current tracing span.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile OpenTracing specification uses the `io.opentracing.Tracer`
    class to add new information in the current span.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: In some situations, it is required to create a new child span or add information
    in the current span, like a new tag, logging information, or a baggage item. To
    add this information, MicroProfile OpenTracing produces an instance of the `io.opentracing.Tracer`
    class to manipulate the current span.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，需要创建一个新的子span或者在当前span中添加信息，比如新标签、日志信息或者装备项。为了添加这些信息，MicroProfile OpenTracing会生成一个`io.opentracing.Tracer`类的实例来操作当前span。
- en: 'Suppose you want to tag all requests that are made by important customers.
    For this example, important customers are those whose ID starts with `1`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要标记所有由重要客户发出的请求。例如，重要客户的ID以`1`开头：
- en: '[PRE24]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](Images/1.png)](#co_observability_CO10-1)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO10-1)'
- en: Injects a `Tracer` instance
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 注入一个`Tracer`实例
- en: '[![2](Images/2.png)](#co_observability_CO10-2)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO10-2)'
- en: Creates a new tag in the current span
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前span中创建一个新标签
- en: Then any request for an important customer is tagged accordingly.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 然后任何重要客户的请求都会相应地被标记。
- en: Custom tags are presented as shown in [Figure 9-8](#customtags).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义标签如图[Figure 9-8](#customtags)所示。
- en: '![qucb 0908](Images/qucb_0908.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0908](Images/qucb_0908.png)'
- en: Figure 9-8\. Custom tags
  id: totrans-365
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-8\. 自定义标签
- en: Discussion
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Quarkus supports one of the OpenTracing customizations to instrument JDBC, so
    if you want to monitor SQL queries, you don’t need to customize the current span
    yourself; you can use the integration provided in the form of dependency.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus支持OpenTracing的一种自定义方式来为JDBC提供工具，因此如果您想要监控SQL查询，无需自己定制当前span；您可以使用以依赖形式提供的集成。
- en: 'Register the `opentracing-jdbc` artifact into your build tool:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 将`opentracing-jdbc`工件注册到你的构建工具中：
- en: '[PRE25]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then activate tracing for JDBC connections. This is done by adding the word
    `tracing` in the JDBC URL. Because Quarkus uses JPA, you also need to configure
    the datasource and Hibernate to use the dedicated tracing driver:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 然后激活JDBC连接的跟踪。通过在JDBC URL中添加`tracing`来完成。因为Quarkus使用JPA，您还需要配置数据源和Hibernate以使用专用跟踪驱动程序：
- en: '[PRE26]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](Images/1.png)](#co_observability_CO11-1)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_observability_CO11-1)'
- en: Updates JDBC URL with `tracing`
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tracing`更新JDBC URL
- en: '[![2](Images/2.png)](#co_observability_CO11-2)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_observability_CO11-2)'
- en: Sets the `TracingDriver` instead of the database driver
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TracingDriver`代替数据库驱动程序
- en: '[![3](Images/3.png)](#co_observability_CO11-3)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_observability_CO11-3)'
- en: Configure dialect of the real database
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 配置真实数据库的方言
- en: All queries that are done in a request are also reflected in the Jaeger UI.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在请求中执行的查询也反映在Jaeger UI中。
- en: JDBC traces are presented as shown in [Figure 9-9](#jdbctraces).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: JDBC跟踪显示如图[Figure 9-9](#jdbctraces)所示。
- en: '![qucb 0909](Images/qucb_0909.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0909](Images/qucb_0909.png)'
- en: Figure 9-9\. JDBC traces
  id: totrans-381
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-9\. JDBC跟踪
- en: If you look closely at the screenshot, you’ll notice that there is a new tag,
    with the name `db.statement`, that reflects the query that has been traced. Also,
    notice that there is one *shopping-cart* span that at the same time contains six
    more spans, one for each query.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细观察截图，您会注意到有一个名为`db.statement`的新标签，反映了已被跟踪的查询。还请注意，有一个*shopping-cart* span同时包含了其他六个更多的spans，每个查询对应一个。
- en: To ignore specific queries, you can set (multiple times) the `ignoreForTracing`
    property with the queries to ignore (e.g., `jdbc:tracing:h2:mem:test?ignoreForTracing=SELECT
    * FROM \"TEST\"`).
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 要忽略特定查询，可以设置（多次）`ignoreForTracing`属性，并提供要忽略的查询（例如，`jdbc:tracing:h2:mem:test?ignoreForTracing=SELECT
    * FROM \"TEST\"`）。
