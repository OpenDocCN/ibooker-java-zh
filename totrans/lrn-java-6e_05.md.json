["```java\npackage ch05.examples;\n\nclass Apple {\n  float mass;\n  float diameter = 1.0f;\n  int x, y;\n\n  boolean isTouching(Apple other) {\n    // Code will eventually go here that performs\n    // distance calculations and returns true if\n    // this apple is touching another apple\n  }\n\n  // More methods will go here as we fill out more\n  // details of our apple\n}\n```", "```java\n    // Two steps, the declaration then the instantiation\n    Apple a1;\n    a1 = new Apple();\n\n    // Or all in one line...\n    Apple a2 = new Apple();\n```", "```java\npackage ch05.examples;\n\npublic class PrintAppleDetails {\n  public static void main(String args[]) {\n    Apple a1 = new Apple();\n    System.out.println(\"Apple a1:\");\n    System.out.println(\"  mass: \" + a1.mass);\n    System.out.println(\"  diameter: \" + a1.diameter);\n    System.out.println(\"  position: (\" + a1.x + \", \" + a1.y +\")\");\n  }\n}\n```", "```java\nApple a1:\n  mass: 0.0\n  diameter: 1.0\n  position: (0, 0)\n```", "```java\npackage ch05.examples;\n\npublic class PrintAppleDetails2 {\n  public static void main(String args[]) {\n    Apple a1 = new Apple();\n    System.out.println(\"Apple a1:\");\n    System.out.println(\"  mass: \" + a1.mass);\n    System.out.println(\"  diameter: \" + a1.diameter);\n    System.out.println(\"  position: (\" + a1.x + \", \" + a1.y +\")\");\n    // fill in some information on a1\n    a1.mass = 10.0f;\n    a1.x = 20;\n    a1.y = 42;\n    System.out.println(\"Updated a1:\");\n    System.out.println(\"  mass: \" + a1.mass);\n    System.out.println(\"  diameter: \" + a1.diameter);\n    System.out.println(\"  position: (\" + a1.x + \", \" + a1.y +\")\");\n  }\n}\n```", "```java\nApple a1:\n  mass: 0.0\n  diameter: 1.0\n  position: (0, 0)\nUpdated a1:\n  mass: 10.0\n  diameter: 1.0\n  position: (20, 42)\n```", "```java\npublic class Apple {\n  float mass;\n  float diameter = 1.0f;\n  int x, y;\n\n  // other apple-related variables and methods\n\n  public void printDetails() {\n    System.out.println(\"  mass: \" + mass);\n    System.out.println(\"  diameter: \" + diameter);\n    System.out.println(\"  position: (\" + x + \", \" + y +\")\");\n  }\n}\n```", "```java\npackage ch05.examples;\n\npublic class PrintAppleDetails3 {\n  public static void main(String args[]) {\n    Apple a1 = new Apple();\n    System.out.println(\"Apple a1:\");\n\n    // We can use our new method!\n    a1.printDetails();\n\n    // fill in some information on a1\n    a1.mass = 10.0f;\n    a1.x = 20;\n    a1.y = 42;\n    System.out.println(\"Updated a1:\");\n    // And look! We can easily reuse the same method\n    a1.printDetails();\n  }\n}\n```", "```java\n// File: ch05/examples/Apple.java\n\n  public boolean isTouching(Apple other) {\n    double xdiff = x - other.x;\n    double ydiff = y - other.y;\n    double distance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n    if (distance < diameter / 2 + other.diameter / 2) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n```", "```java\npackage ch05.examples;\n\npublic class Field {\n  Apple a1 = new Apple();\n  Apple a2 = new Apple();\n\n  public void setupApples() {\n    a1.diameter = 3.0f;\n    a1.mass = 5.0f;\n    a1.x = 20;\n    a1.y = 40;\n    a2.diameter = 8.0f;\n    a2.mass = 10.0f;\n    a2.x = 70;\n    a2.y = 200;\n  }\n\n  public void detectCollisions() {\n    if (a1.isTouching(a2)) {\n      System.out.println(\"Collision detected!\");\n    } else {\n      System.out.println(\"Apples are not touching.\");\n    }\n  }\n}\n```", "```java\npackage ch05.examples;\n\npublic class PrintAppleDetails4 {\n  public static void main(String args[]) {\n    Field f = new Field();\n    f.setupApples();\n    System.out.println(\"Apple a1:\");\n    f.a1.printDetails();\n    System.out.println(\"Apple a2:\");\n    f.a2.printDetails();\n    f.detectCollisions();\n  }\n}\n```", "```java\n% java PrintAppleDetails4\nApple a1:\n  mass: 5.0\n  diameter: 3.0\n  position: (20, 40)\nApple a2:\n  mass: 10.0\n  diameter: 8.0\n  position: (70, 200)\nApples are not touching.\n\n```", "```java\nclass Apple {\n  // ...\n  private float diameter;\n  // ...\n}\n```", "```java\nclass Field {\n  Apple a1 = new Apple();\n  Apple a2 = new Apple();\n  // ...\n  void setupApples() {\n    a1.diameter = 3.0f; // Compile-time error\n    // ...\n    a2.diameter = 8.0f; // Compile-time error\n    // ...\n  }\n  // ...\n}\n```", "```java\npublic class Apple {\n  private float diameter = 1.0f;\n  // ...\n\n  public void setDiameter(float newDiameter) {\n    diameter = newDiameter;\n  }\n\n  public float getDiameter() {\n    return diameter;\n  }\n  // ...\n}\n```", "```java\nclass Apple {\n  // ...\n  static float gravAccel = 9.8f;\n  // ...\n}\n```", "```java\nclass Apple {\n  // ...\n  float getWeight () {\n    return mass * gravAccel;\n  }\n  // ...\n}\n```", "```java\n    Apple.gravAccel = 3.7f;\n```", "```java\nclass Apple {\n  // ...\n  static final float EARTH_ACCEL = 9.8f;\n  // ...\n}\n```", "```java\nclass Apple {\n  // ...\n  static int SMALL = 0, MEDIUM = 1, LARGE = 2;\n  // ...\n}\n```", "```java\n    Apple typicalApple = new Apple();\n    typicalApple.setSize(Apple.MEDIUM);\n```", "```java\nclass Apple {\n  // ...\n  void resetEverything() {\n    setSize (MEDIUM);\n    // ...\n  }\n  // ...\n}\n```", "```java\nclass Bird {\n  int xPos, yPos;\n\n  double fly (int x, int y) {\n    double distance = Math.sqrt(x*x + y*y);\n    flap(distance);\n    xPos = x;\n    yPos = y;\n    return distance;\n  }\n  // other bird things ...\n}\n```", "```java\nclass Apple {\n  int x, y;\n\n  public void moveTo(int x, int y) {\n    System.out.println(\"Moving apple to \" + x + \", \" + y);\n    // actual move logic would go here ...\n  }\n}\n```", "```java\n    Moving apple to 40, 50\n```", "```java\nclass Apple {\n  int x, y;\n  float diameter = 1.0f;\n\n  public void moveTo(int x, int y) {\n    System.out.println(\"Moving apple to \" + x + \", \" + y);\n    // store the new x value\n    this.x = x;\n    // store the new y value if it is high enough\n    if (y > diameter) {\n      this.y = y;\n    } else {\n      // otherwise set y to the height of the apple\n      this.y = (int)diameter;\n    }\n  }\n}\n```", "```java\nclass Apple {\n  public static final int SMALL = 0;\n  public static final int MEDIUM = 1;\n  public static final int LARGE = 2;\n  // other apple things...\n\n  public static String[] getAppleSizes() {\n    // Return names for our constants\n    return new String[] { \"SMALL\", \"MEDIUM\", \"LARGE\" };\n  }\n}\n```", "```java\n  public void printDetails() {\n    System.out.println(\"  mass: \" + mass);\n    // Print the exact diameter:\n    //System.out.println(\"  diameter: \" + diameter);\n    // Or a nice, human-friendly approximate\n    String niceNames[] = getAppleSizes();\n    if (diameter < 5.0f) {\n      System.out.println(niceNames[SMALL]);\n    } else if (diameter < 10.0f) {\n      System.out.println(niceNames[MEDIUM]);\n    } else {\n      System.out.println(niceNames[LARGE]);\n    }\n    System.out.println(\"  position: (\" + x + \", \" + y +\")\");\n  }\n```", "```java\npublic class PrintAppleDetails {\n  public static void main(String args[]) {\n    String niceNames[] = Apple.getAppleSizes();\n    Apple a1 = new Apple();\n    System.out.println(\"Apple a1:\");\n    System.out.println(\"  mass: \" + a1.mass);\n    System.out.println(\"  diameter: \" + a1.diameter);\n    System.out.println(\"  position: (\" + a1.x + \", \" + a1.y +\")\");\n    if (a1.diameter < 5.0f) {\n      System.out.println(\"This is a \" + niceNames[Apple.SMALL] + \" apple.\");\n    } else if (a1.diameter < 10.0f) {\n      System.out.println(\"This is a \" + niceNames[Apple.MEDIUM] + \" apple.\");\n    } else {\n      System.out.println(\"This is a \" + niceNames[Apple.LARGE] + \" apple.\");\n    }\n  }\n}\n```", "```java\nApple a1:\n  mass: 0.0\n  diameter: 1.0\n  position: (0, 0)\nThis is a SMALL apple.\n```", "```java\n    Apple bigApple = Apple.createApple(Apple.LARGE);\n```", "```java\n  // instance variables always get default values if\n  // you don't initialize them\n  int foo;\n\n  void myMethod() {\n    // local variables do not get default values\n    int bar;\n\n    foo += 1;  // This is ok, foo has the value 0\n    bar += 1;  // compile-time error, bar is uninitialized\n\n    bar = 99;  // This is ok, we're setting bar's initial value\n    bar += 1;  // Now this calculation is ok\n  }\n```", "```java\n  void myMethod {\n    int bar;\n    if (someCondition) {\n      bar = 42;\n    }\n    bar += 1;   // Still a compile-time error, bar may not be initialized\n  }\n```", "```java\n  void myMethod {\n    int bar;\n    if (someCondition) {\n      bar = 42;\n    } else {\n      return;\n    }\n    bar += 1;  // This is ok!\n  }\n```", "```java\n  // declare a method with some arguments\n  void myMethod(int num, SomeKindOfObject o) {\n    // do some useful stuff with num and o\n  }\n\n  // use the method\n  int i = 0;\n  SomeKindOfObject obj = new SomeKindOfObject();\n  myMethod(i, obj);\n```", "```java\nclass Element {\n  int num;\n  double weight;\n\n  void printMyDetails() {\n    System.out.println(this);\n  }\n}\n```", "```java\n    Float pi = new Float(3.14);\n    Float pi = new Float(\"3.14\");\n```", "```java\n    Double size = new Double (32.76);\n\n    double d = size.doubleValue();     // 32.76\n    float f = size.floatValue();       // 32.76f\n    long l = size.longValue();         // 32L\n    int i = size.intValue();           // 32\n```", "```java\n    // Manually wrapping an integer\n    List myNumbers = new ArrayList();\n    Integer thirtyThree = new Integer(33);\n    myNumbers.add(thirtyThree);\n```", "```java\n    // Manually unwrapping an integer\n    Integer theNumber = (Integer)myNumbers.get(0);\n    int n = theNumber.intValue();           // 33\n```", "```java\n    // Using autoboxing and generics\n    List<Integer> myNumbers = new ArrayList<Integer>();\n    myNumbers.add(33);\n    int n = myNumbers.get(0);\n```", "```java\n    System.out.print(argument);\n```", "```java\nclass PrintStream {\n  void print(Object arg) { ... }\n  void print(String arg) { ... }\n  void print(char[] arg) { ... }\n  // ...\n}\n```", "```java\nclass Date {\n  int day;\n  // other date variables ...\n\n  // Simple \"default\" constructor\n  Date() {\n    day = currentDay();\n  }\n\n  Date(String date) {\n    day = parseDay(date);\n  }\n\n  // other Date methods ...\n}\n```", "```java\n    Date now = new Date();\n    Date christmas = new Date(\"Dec 25, 2022\");\n```", "```java\n    christmas = null;  // christmas is now fair game for the garbage collector\n```", "```java\nclass Car {\n  String model;\n  int doors;\n\n  Car(String model, int doors) {\n    this.model = model;\n    this.doors = doors;\n    // other, complicated stuff\n  }\n\n  Car(String model) {\n    this(model, 4 /* doors */);\n  }\n}\n```", "```java\n  Car(String m) {\n    int doors = determineDoors();\n    this(m, doors);   // Error: constructor call\n                        // must be first statement\n  }\n```", "```java\nclass Car {\n  final int default_doors = 4;\n\n  Car(String m) {\n    this(m, default_doors); // Error: referencing\n                              // uninitialized variable\n  }\n}\n```", "```java\nclass Car {\n  static final int DEFAULT_DOORS = 4;\n\n  Car(String m) {\n    this(m, DEFAULT_DOORS);  // Okay!\n  }\n}\n```", "```java\npackage ch02.examples;\n\nimport javax.swing.*;\n\npublic class HelloJava {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello, Java!\");\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    // ...\n  }\n}\n```", "```java\npackage ch02.examples;\n\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\npublic class HelloJava {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello, Java!\");\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    // ...\n  }\n}\n```", "```java\nimport javax.swing.*;\n\npublic class HelloJava {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello, Java!\");\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    // ...\n  }\n}\n```", "```java\nimport javax.swing.JLabel;\n\npublic class HelloJava {\n  public static void main(String[] args) {\n    javax.swing.JFrame frame = new javax.swing.JFrame(\"Hello, Java!\");\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    // ...\n  }\n}\n```", "```java\n% javac ch02/examples/*.java\n% java ch02.examples.HelloJava\n```", "```java\n% javac com/oreilly/learningjava6e/ch02/examples/*.java\n% java com.oreilly.learningjava6e.ch02.examples.HelloJava\n```", "```java\nclass Animal {\n  float weight;\n\n  void eat() {\n    // do eating stuff\n  }\n  // other animal stuff\n}\n\nclass Mammal extends Animal {\n  // inherits weight\n  int heartRate;\n\n  // inherits eat()\n  void breathe() {\n    // respire\n  }\n}\n```", "```java\nclass Cat extends Mammal {\n  // inherits weight and heartRate\n  boolean longHair;\n\n  // inherits eat() and breathe()\n  void purr() {\n    // make nice sounds\n  }\n}\n```", "```java\n    Cat simon = new Cat();\n    Animal creature = simon;\n```", "```java\nclass IntegerCalculator {\n  int sum;\n  // other integer stuff ...\n}\n\nclass DecimalCalculator extends IntegerCalculator {\n  double sum;\n  // other floating point stuff ...\n}\n```", "```java\n    int s = super.sum;\n```", "```java\n    DecimalCalculator dc = new DecimalCalculator();\n    IntegerCalculator ic = dc;\n\n    int s = ic.sum;       // accesses IntegerCalculator sum\n```", "```java\n    Cat simon = new Cat();\n    Animal creature = simon;\n    // ...\n    creature.sleep();       // accesses Cat sleep();\n```", "```java\npublic class Animal {\n  float weight;\n  // other animal traits ...\n\n  public abstract void makeSound(int duration);\n  // other animal behaviors ...\n}\n```", "```java\npublic class Cat extends Animal {\n  // ...\n  public void makeSound(int duration) {\n    for (int count = 0; count < duration; count++) {\n      // assume our sound takes one second to make and we can\n      // repeat the sound to match the requested duration\n      System.out.println(\"meow!\");\n    }\n  }\n  // ...\n}\n```", "```java\npublic abstract class Animal {\n  // Notice the class definition needs the \"abstract\" modifier\n\n  public abstract void makeSound(int duration);\n  // ...\n}\n```", "```java\npublic abstract class Animal {\n  private double weight;\n  // ...\n  public abstract void makeSound(int duration);\n  // ...\n\n  public void setWeight(double w) {\n    this.weight = w;\n  }\n\n  public double getWeight() {\n    return weight;\n  }\n}\n```", "```java\ninterface Driveable {\n  boolean startEngine();\n  void stopEngine();\n  float accelerate(float acc);\n  boolean turn(Direction dir);\n}\n```", "```java\nclass Automobile implements Driveable {\n  // Automobile traits could go here ...\n\n  // build all the Driveable methods\n  public boolean startEngine() {\n    if (notTooCold)\n      engineRunning = true;\n    // ...\n  }\n\n  public void stopEngine() {\n    engineRunning = false;\n  }\n\n  public float accelerate(float acc) {\n    // ...\n  }\n\n  public boolean turn(Direction dir) {\n    // ...\n  }\n\n  // Do other car things ...\n}\n```", "```java\n    Automobile auto = new Automobile();\n    Lawnmower mower = new Lawnmower();\n    Driveable vehicle;\n\n    vehicle = auto;\n    vehicle.startEngine();\n    vehicle.stopEngine();\n\n    vehicle = mower;\n    vehicle.startEngine();\n    vehicle.stopEngine();\n```", "```java\nclass Animal {\n  double weight;\n\n  class Brain {\n    double volume;\n    // more brain stuff ...\n  }\n}\n```", "```java\nclass Animal {\n  double weight;\n\n  class Brain {\n    double volume;\n    // more brain stuff ...\n  }\n\n  void performBehavior() { ... }\n}\n```", "```java\npackage ch05.examples;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class HelloJava3 extends JFrame {\n  public static void main(String[] args) {\n    HelloJava3 demo = new HelloJava3();\n    demo.setVisible(true);\n  }\n\n  public HelloJava3() {\n    super(\"HelloJava3\");\n    add(new HelloComponent3(\"Hello, Inner Java!\"));\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setSize(300, 300);\n  }\n\n  class HelloComponent3 extends JComponent {\n    String theMessage;\n    int messageX = 125, messageY = 95; // message coordinates\n\n    public HelloComponent3(String message) {\n      theMessage = message;\n      addMouseMotionListener(new MouseMotionListener() {\n        public void mouseDragged(MouseEvent e) {\n            messageX = e.getX();\n            messageY = e.getY();\n            repaint();\n        }\n\n        public void mouseMoved(MouseEvent e) { }\n      });\n    }\n\n    public void paintComponent(Graphics g) {\n      g.drawString(theMessage, messageX, messageY);\n    }\n  }\n}\n```", "```java\n    % cd ch05/exercises\n    % javac Zoo.java\n    % java Zoo\n    Let&rsquo;s listen to some animals!\n    The lion goes \"roar\"\n    The gibbon goes \"hoot\"\n    ```", "```java\n    % java Zoo\n    Let&rsquo;s listen to some animals!\n    The lion goes \"roar\"\n    The gibbon goes \"hoot\"\n    The seal goes \"bark\"\n    ```", "```java\n      public void paintComponent(Graphics g) {\n        // x and y set the upper left corner\n        g.fillRect(x,y,width,height);\n      }\n    ```"]