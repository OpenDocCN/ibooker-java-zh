["```java\n<dependency>\n    <groupId>io.smallrye.reactive</groupId>\n    <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n</dependency>\n```", "```java\n@ApplicationScoped\npublic class WebClientExample {\n\n    private final WebClient client;\n\n    @Inject\n    public WebClientExample(Vertx vertx) {\n        client = WebClient.create(vertx);\n    }\n\n    @PreDestroy\n    public void close() {\n        client.close();\n    }\n\n    public Uni<JsonObject> invokeService() {\n        return client\n            .getAbs(\"https://httpbin.org/json\").send()\n            .onItem().transform(response -> {\n                if (response.statusCode() == 200) {\n                    return response.bodyAsJsonObject();\n                } else {\n                    return new JsonObject()\n                            .put(\"error\", response.statusMessage());\n                }\n            });\n    }\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-reactive-messaging-http</artifactId>\n</dependency>\n```", "```java\nmp.messaging.outgoing.my-http-endpoint.connector=quarkus-http ![1](assets/1.png)\nmp.messaging.outgoing.my-http-endpoint.method=POST ![2](assets/2.png)\nmp.messaging.outgoing.my-http-endpoint.url=https://httpbin.org/anything ![3](assets/3.png)\n```", "```java\n@Path(\"/v2\")\n@RegisterRestClient\npublic interface CountriesService {\n\n    @GET\n    @Path(\"/name/{name}\")\n    Set<Country> getByName(@PathParam String name);\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-rest-client-reactive</artifactId>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n</dependency>\n```", "```java\n@RegisterRestClient(configKey = \"httpbin\")\npublic interface HttpBinService {\n\n    @GET\n    @Path(\"/uuid\")\n    String getUUID();\n}\n```", "```java\nclass Person {\n    public String name;\n}\n\n@POST\n@Path(\"/anything\")\nString anything(Person someone);\n```", "```java\n@POST\n@Path(\"/anything\")\n@ClientHeaderParam(name = \"X-header\", value = \"constant value\")\nString anythingWithConstantHeader(Person someone);\n\n@POST\n@Path(\"/anything\")\nString anythingWithHeader(Person someone,\n                          @HeaderParam(\"X-header\") String value);\n```", "```java\n@POST\n@Path(\"/anything\")\nString anythingWithQuery(Person someone,\n                         @QueryParam(\"param1\") String p1,\n                         @QueryParam(\"param2\") String p2);\n```", "```java\nclass UUID {\n    public String uuid;\n}\n\n@GET\n@Path(\"/uuid\")\nUUID uuid();\n```", "```java\n@GET\n@Path(\"/uuid\")\nResponse getResponse();\n```", "```java\n@Inject\n@RestClient HttpBinService service;\n\npublic HttpBinService.UUID invoke() {\n    return service.uuid();\n}\n```", "```java\nhttpbin/mp-rest/url=https://httpbin.org\n```", "```java\n@RegisterRestClient(configKey = \"reactive-httpbin\")\npublic interface ReactiveHttpBinService {\n\n    @GET\n    @Path(\"/uuid\")\n    Uni<String> getUUID();\n\n    class Person {\n        public String name;\n    }\n\n    @POST\n    @Path(\"/anything\")\n    Uni<String> anything(Person someone);\n\n    class UUID {\n        public String uuid;\n    }\n\n    @GET\n    @Path(\"/uuid\")\n    Uni<UUID> uuid();\n\n    @GET\n    @Path(\"/uuid\")\n    Uni<Response> getResponse();\n\n}\n```", "```java\n@Inject\n@RestClient ReactiveHttpBinService service;\n\npublic void invoke() {\n    service.uuid()\n            .onItem().transform(u -> u.uuid)\n            .subscribe().with(\n                    s -> System.out.println(\"Received \" + s),\n                    f -> System.out.println(\"Failed with \" + f)\n    );\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n</dependency>\n```", "```java\n@GET\n@Path(\"/uuid\")\nUni<UUID> uuid();\n```", "```java\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.faulttolerance.Fallback;\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@RegisterRestClient(configKey = \"reactive-httpbin\")\npublic interface ReactiveHttpBinServiceWithFallbackMethod {\n\n    class UUID {\n        public String uuid;\n    }\n\n    @GET\n    @Path(\"/uuid\")\n    @Fallback(fallbackMethod = \"fallback\")\n    Uni<UUID> uuid();\n\n    default Uni<UUID> fallback() {\n        UUID u = new UUID();\n        u.uuid = java.util.UUID.randomUUID().toString();\n        return Uni.createFrom().item(u);\n    }\n\n}\n```", "```java\nimport io.smallrye.common.annotation.NonBlocking;\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.faulttolerance.ExecutionContext;\nimport org.eclipse.microprofile.faulttolerance.Fallback;\nimport org.eclipse.microprofile.faulttolerance.FallbackHandler;\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@RegisterRestClient(configKey = \"reactive-httpbin\")\npublic interface ReactiveHttpBinServiceWithFallbackHandler {\n\n    class UUID {\n        public String uuid;\n    }\n\n    @GET\n    @Path(\"/uuid\")\n    @Fallback(value = MyFallbackHandler.class)\n    Uni<UUID> uuid();\n\n    class MyFallbackHandler implements FallbackHandler<Uni<UUID>> {\n\n        @Override\n        public Uni<UUID> handle(ExecutionContext context) {\n            UUID u = new UUID();\n            u.uuid = java.util.UUID.randomUUID().toString();\n            return Uni.createFrom().item(u);\n        }\n    }\n\n}\n```", "```java\n@GET\n@Path(\"/uuid\")\n@Retry(maxRetries = 10, delay = 1000, jitter = 100)\nUni<UUID> uuid();\n```", "```java\n@GET\n@Path(\"/uuid\")\n@Timeout(value = 3, unit = ChronoUnit.SECONDS)\nUni<UUID> uuid();\n```", "```java\n@GET\n@Path(\"/uuid\")\n@CircuitBreaker\nUni<UUID> uuid();\n```", "```java\n@GET\n@Path(\"/uuid\")\n@CircuitBreaker(\n    // Delay before switching to the half-open state\n    delay = 10, delayUnit = ChronoUnit.SECONDS,\n    // The number of successful executions,\n    // before a half-open circuit is closed again\n    successThreshold = 2,\n    // The ratio of failures within the rolling\n    // window that will trip the circuit to open\n    failureRatio = 0.75,\n    // The number of consecutive requests in a\n    // rolling window\n    requestVolumeThreshold = 10\n)\nUni<UUID> uuidWithConfiguredCircuitBreaker();\n```", "```java\n@GET\n@Path(\"/uuid\")\n@Bulkhead(value = 5, waitingTaskQueue = 1000)\nUni<UUID> uuid();\n```", "```java\n> curl http://localhost:8080/\n{\"greeting\":\"Hello anonymous\",\"quote\":\"I never drink coffee\nat lunch. I find it keeps me awake for the afternoon.\"}\n```", "```java\npackage org.acme.gateway;\n\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.rest.client.inject.RestClient;\n\nimport javax.ws.rs.DefaultValue;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.QueryParam;\n\n@Path(\"/\")\npublic class Gateway {\n\n    @RestClient\n    GreetingService greetingService;\n\n    @RestClient\n    QuoteService quoteService;\n\n    @GET\n    @Path(\"/quote\")\n    public Uni<String> getQuote() {\n        return quoteService.getQuote();\n    }\n\n    @GET\n    @Path(\"/\")\n    public Uni<Greeting> getBoth(\n            @QueryParam(\"name\")\n            @DefaultValue(\"anonymous\") String name) {\n        Uni<String> greeting = greetingService.greeting(name);\n        Uni<String> quote = quoteService.getQuote()\n                .onFailure()\n                    .recoverWithItem(\"No coffee - no quote\");\n\n        return Uni.combine().all().unis(greeting, quote).asTuple()\n                .onItem().transform(tuple ->\n                        new Greeting(tuple.getItem1(),\n                                tuple.getItem2())\n                );\n    }\n\n    public static class Greeting {\n        public final String greeting;\n        public final String quote;\n\n        public Greeting(String greeting, String quote) {\n            this.greeting = greeting;\n            this.quote = quote;\n        }\n    }\n}\n```", "```java\npackage org.acme.gateway;\n\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.faulttolerance.*;\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.QueryParam;\n\n@RegisterRestClient(configKey = \"greeting-service\")\npublic interface GreetingService {\n\n    @GET\n    @Path(\"/\")\n    @CircuitBreaker\n    @Timeout(2000)\n    @Fallback(GreetingFallback.class)\n    Uni<String> greeting(@QueryParam(\"name\") String name);\n\n    class GreetingFallback implements FallbackHandler<Uni<String>> {\n        @Override\n        public Uni<String> handle(ExecutionContext context) {\n            return Uni.createFrom().item(\"Hello fallback\");\n        }\n    }\n}\n```", "```java\npackage org.acme.gateway;\n\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.faulttolerance.CircuitBreaker;\nimport org.eclipse.microprofile.faulttolerance.Timeout;\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@RegisterRestClient(configKey = \"quote-service\")\npublic interface QuoteService {\n\n    @GET\n    @Path(\"/\")\n    @CircuitBreaker\n    @Timeout(2000)\n    Uni<String> getQuote();\n\n}\n```", "```java\nUni<String> quote = quoteService.getQuote()\n   .onFailure().recoverWithItem(\"No coffee - no quote\");\n```", "```java\n> curl http://localhost:8080\\?name\\=luke\n{\"greeting\":\"Hello luke\",\"quote\":\"No coffee - no quote\"}\n```", "```java\n> curl http://localhost:8080\\?name\\=luke\n{\"greeting\":\"Hello fallback\",\"quote\":\"No coffee - no quote\"}\n```", "```java\npackage org.acme.http.model;\n\nimport io.quarkus.hibernate.reactive.panache.PanacheEntity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"orders\")\npublic class Order extends PanacheEntity {\n\n    public String name;\n    public int quantity;\n\n}\n```", "```java\npackage org.acme.http;\n\nimport io.smallrye.mutiny.Multi;\nimport io.smallrye.mutiny.Uni;\nimport io.smallrye.reactive.messaging.MutinyEmitter;\nimport org.acme.http.model.Order;\nimport org.eclipse.microprofile.reactive.messaging.Channel;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\n\n@Path(\"/order\")\npublic class OrderEndpoint {\n\n    @Channel(\"new-orders\")\n    MutinyEmitter<Order> emitter;\n\n    @POST\n    public Uni<Response> order(Order order) {\n        return emitter.send(order)\n                .log()\n                .onItem().transform(x -> Response.accepted().build())\n                .onFailure().recoverWithItem(\n                        Response.status(Response.Status.BAD_REQUEST)\n                                .build()\n                );\n    }\n\n    @GET\n    public Multi<Order> getAllValidatedOrders() {\n        return Order.streamAll();\n    }\n\n}\n```", "```java\npackage org.acme.http;\n\nimport io.smallrye.mutiny.Uni;\nimport org.acme.http.model.Order;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\nimport org.eclipse.microprofile.rest.client.inject.RestClient;\n\nimport javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic class OrderProcessing {\n\n    @RestClient\n    ValidationService validation;\n\n    @Incoming(\"new-orders\")\n    @Outgoing(\"validated-orders\")\n    Uni<Order> validate(Order order) {\n        return validation.validate(order)\n                .onItem().transform(x -> order);\n    }\n\n}\n```", "```java\npackage org.acme.http;\n\nimport io.quarkus.hibernate.reactive.panache.Panache;\nimport io.smallrye.mutiny.Uni;\nimport org.acme.http.model.Order;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\n\nimport javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic class OrderStorage {\n\n    @Incoming(\"validated-orders\")\n    public Uni<Void> store(Order order) {\n        return Panache.withTransaction(order::persist)\n                .replaceWithVoid();\n    }\n\n}\n```", "```java\n> curl -v  --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"name\":\"coffee\", \"quantity\":2}' \\\n  http://localhost:8080/order\n```", "```java\n> curl http://localhost:8080/order\n[{\"id\":1,\"name\":\"coffee\",\"quantity\":2}]\n```", "```java\n> curl -v  --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"name\":\"book\", \"quantity\":-1}' \\\n  http://localhost:8080/order\n```", "```java\n> curl http://localhost:8080/order\n[{\"id\":1,\"name\":\"coffee\",\"quantity\":2}]\n```", "```java\n@Incoming(\"new-orders\")\n@Outgoing(\"validated-orders\")\n@Timeout(2000)\nUni<Order> validate(Order order) {\n    return validation.validate(order)\n            .onItem().transform(x -> order);\n}\n```"]