["```java\nint add(int x, int y) {\n  return x + x;\n}\n```", "```java\nadd x y = x + x\n```", "```java\nadd 5 (1/0)\n=> 10\n```", "```java\nvar result = add(5, (1/0));\n// => java.lang.ArithmeticException: Division by zero\n```", "```java\nint add (IntSupplier x, IntSupplier y) {\n\n  var actualX = x.getAsInt();\n\n  return actualX + actualX;\n}\n\nvar result = add(() -> 5,\n                 () -> 1 / 0);\n// => 10\n```", "```java\n// WON'T COMPILE: unused result\n\nleft() || right();\n\n// COMPILES: used as if condition\n\nif (left() || right()) {\n    // ...\n}\n\n// COMPILES: used as variable assignment\n\nvar result = left() || right();\n```", "```java\nMap<String, User> users = ...;\n\nvar email = \"john@doe.com\";\n\nvar user = users.get(email);\nif (user == null) {\n  user = loadUser(email);\n  users.put(email, user);\n}\n```", "```java\nMap<String, User> users = ...;\n\nvar email = \"john@doe.com\";\n\nvar user = users.computeIfAbsent(email,\n                                 this::loadUser);\n```", "```java\nUser updateUser(User user, List<Role> availableRoles) { ![1](assets/1.png)\n  // ...\n}\n\n// HOW TO USE\n\nvar user = loadUserById(23L);\nvar availableRoles = this.dao.loadAllAvailableRoles(); ![2](assets/2.png)\nvar updatedUser = updateUser(user, availableRoles); ![3](assets/3.png)\n```", "```java\nUser updateUser(User user, DAO roleDAO) {\n  // ...\n}\n```", "```java\nvoid updateUser(User user, Supplier<List<Role>> availableRolesFn) { ![1](assets/1.png)\n  // ...\n\n  var availableRoles = availableRolesFn.get();\n\n  // ...\n}\n\n// HOW TO USE\n\nvar user = loadUserById(23L);\n\nupdateUser(user, this.dao::loadAllAvailableRoles); ![2](assets/2.png)\n```", "```java\npublic class Thunk<T> implements Supplier<T> { ![1](assets/1.png)\n\n  private final Supplier<T> expression; ![2](assets/2.png)\n\n  private T result; ![3](assets/3.png)\n\n  private Thunk(Supplier<T> expression) {\n    this.expression = expression;\n  }\n\n  @Override\n  public T get() {\n    if (this.result == null) { ![4](assets/4.png)\n      this.result = this.expression.get();\n    }\n    return this.result;\n  }\n\n  public static <T> Thunk<T> of(Supplier<T> expression) { ![5](assets/5.png)\n    if (expression instanceof Thunk<T>) { ![6](assets/6.png)\n      return (Thunk<T>) expression;\n    }\n\n    return new Thunk<T>(expression);\n  }\n}\n```", "```java\nupdateUser(user, Thunk.of(this.dao::loadAllAvailableRoles));\n```", "```java\npublic class Thunk<T> implements Supplier<T> {\n\n  // ...\n\n  public static <T> Thunk<T> of(T value) { ![1](assets/1.png)\n    return new Thunk<T>(() -> value);\n  }\n\n  public <R> Thunk<R> map(Function<T, R> mapper) { ![2](assets/2.png)\n    return Thunk.of(() -> mapper.apply(get()));\n  }\n\n  public <R> Thunk<R> flatMap(Function<T, Thunk<R>> mapper) { ![3](assets/3.png)\n    return Thunk.of(() -> mapper.apply(get()).get());\n  }\n\n  public void accept(Consumer<T> consumer) { ![4](assets/4.png)\n    consumer.accept(get());\n  }\n}\n```", "```java\npublic class Thunk<T> implements Supplier<T> {\n\n  private Thunk(Supplier<T> expression) {\n    this.expression = () -> evaluate(expression);\n  }\n\n  private synchronized T evaluate(Supplier<T> expression) {\n    // ...\n  }\n\n  // ...\n}\n```", "```java\nprivate static class Holder<T> implements Supplier<T> {\n\n  private final T value;\n\n  Holder(T value) {\n    this.value = value;\n  }\n\n  @Override\n  public T get() {\n    return this.value;\n  }\n}\n```", "```java\npublic class Thunk<T> implements Supplier<T> {\n\n  private static class Holder<T> implements Supplier<T> {\n    // ...\n  }\n\n  private Supplier<T> holder; ![1](assets/1.png)\n\n  private Thunk(Supplier<T> expression) {\n    this.holder = () -> evaluate(expression);\n  }\n\n  private synchronized T evaluate(Supplier<T> expression) {\n    if (Holder.class.isInstance(this.holder) == false) { ![2](assets/2.png)\n      var evaluated = expression.get();\n      this.holder = new Holder<>(evaluated); ![3](assets/3.png)\n    }\n    return this.holder.get();\n  }\n\n  @Override\n  public T get() {\n    return this.holder.get(); ![4](assets/4.png)\n  }\n}\n```"]