- en: Chapter 3\. Developing RESTful Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quarkus integrates with RESTEasy, a JAX-RS implementation to define REST APIs.
    In this chapter, you’ll learn how to develop RESTful web services in Quarkus.
    We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use JAX-RS for creating CRUD services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to enable CORS for requesting resources from other domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement reactive routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement filters to manipulate requests and responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.1 Creating a Simple REST API Endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to create a REST API endpoint with CRUD operations.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the JAX-RS `GreetingResource` resource generated previously and fill it
    with JAX-RS annotations.
  prefs: []
  type: TYPE_NORMAL
- en: JAX-RS is the default framework used in Quarkus to define REST endpoints. All
    of the JAX-RS annotations are already correctly on your classpath. You will want
    to use the HTTP verb annotations (`@GET`, `@POST`, `@PUT`, `@DELETE`) to declare
    the HTTP verb(s) that the endpoint methods will listen to. Of course, you will
    need the `@Path` annotation to define the URI relative to the rest of the application
    for your endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `org.acme.quickstart.GreetingResource.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Identifies the URI path of the current resource
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Responds to HTTP `GET` requests
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the media type(s) that are returned
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Returns plain text
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the remaining methods for creating, updating, and deleting a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Responds to HTTP `POST` requests
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the media type(s) that are accepted
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Body content of the request
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Responds to HTTP `PUT` requests
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Responds to HTTP `DELETE` requests
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are valid HTTP methods: `@GET`, `@POST`, `@PUT`, `@DELETE`, `@PATCH`,
    `@HEAD`, and `@OPTIONS`.'
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Extracting Request Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to extract request parameters using JAX-RS.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use some of the built-in annotations provided by JAX-RS specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.GreetingResource.java` class and change the `hello`
    method with the request parameters to look like the following extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets `UriInfo` of the request; `UriInfo` is part of JAX-RS and allows you to
    obtain application and request URI information
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets query parameter named `order` as `Enum`
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets header parameter named `authorization` integrated with bean validation
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Other request parameters can be extracted using annotations such as form parameters
    (`@FormParam`), matrix parameters (`@MatrixParam`), or cookie values (`@CookieParam`).
    Also, using the `@Context` annotation, you can inject other elements related to
    JAX-RS, such as `javax.ws.rs.core.SecurityContext`, `javax.ws.rs.sse.SseEventSink`,
    or `javax.ws.rs.sse.Sse`.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Recipe 3.1](#create-simple-rest-api-endpoint), you saw how to create REST
    API endpoints using JAX-RS, but you usually need to extract more information from
    a request rather than just the body content.
  prefs: []
  type: TYPE_NORMAL
- en: One of the important things that you need to take into consideration when using
    Quarkus and JAX-RS is that, under the covers, Quarkus uses RESTEasy working with
    Vert.x directly by default, without using anything related to the `Servlet` specification.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, everything you might need for developing REST API endpoints
    is well supported, and Quarkus offers alternatives when you need to implement
    custom `Servlet` filters or get the HTTP request directly into the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, if it is a requirement, you can configure Quarkus to use RESTEasy while
    working with the `Servlet` specification instead of Vert.x by adding the `quarkus-undertow`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about JAX-RS, visit the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Eclipse Foundation: Jakarta RESTful Web Services](https://oreil.ly/Tgn5d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RESTEasy](https://oreil.ly/WpJ3x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.3 Using Semantic HTTP Response Status Codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use HTTP response status codes to correctly reflect the result of
    a request.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The JAX-RS specification uses the `javax.ws.rs.core.Response` interface to
    return the correct HTTP response status code as well as to set any other required
    information like response content, cookies, or headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets response status code as 201 created with the `Location` header as the URI
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets path from the resource class
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the developer ID in the `Location` header
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the created developer as response content
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO4-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Builds the `Response` object
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You will need the `quarkus-resteasy-jsonb` or `quarkus-resteasy-jackson` extension
    in your project if you are returning JSON from your endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `Location` header contains a valid URI to get access to the
    created resource.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When defining a RESTful Web API, it is really important to follow some conventions
    that are provided by the underlying technology that is used; for RESTful web services,
    it is the HTTP layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another critical part of defining your API is using the correct response status
    codes, which are sent back to the client to indicate whether the request has been
    completed. There are five classes of status codes:'
  prefs: []
  type: TYPE_NORMAL
- en: Informational responses (100–199)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Successful responses (200–299)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirects (300–399)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client errors (400–499)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server errors (500–599)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By default, Quarkus tries to offer out-of-the-box responses with the correct
    HTTP status codes. For example, it offers a 400 Bad Request in case of constraint
    violations and a 500 Internal Server Error in the case of server exceptions. But
    there is one use case that it is not covered by default: the creation of a resource
    in which an HTTP 201 Created status response code should be sent back to the client
    with the new resource in the body of the message and the URL of the new resource
    set in the `Location` header.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Full HTTP response status codes are summarized at the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[MDN Web Docs: HTTP response status codes](https://oreil.ly/Gq02d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.4 Binding HTTP Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to bind methods to HTTP verbs that do not have a dedicated annotation
    provided by the JAX-RS specification.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `javax.ws.rs.HttpMethod` annotation to create your HTTP method annotation.
  prefs: []
  type: TYPE_NORMAL
- en: JAX-RS specification provides seven annotations to specify the HTTP method that
    a method should respond to. These annotations are `@GET`, `@POST`, `@PUT`, `@DELETE`,
    `@PATCH`, `@HEAD`, and `@OPTIONS`. But there are many more HTTP methods, and JAX-RS
    provides `javax.ws.rs.HttpMethod` annotation to support these other methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is create a meta-annotation. We’re going to use the `LOCK`
    verb, defined at [RFC-4918](https://tools.ietf.org/html/rfc4918#section-9.10).
    The `LOCK` verb locks access or refreshes an existing lock to a resource. Our
    annotation will be named `LOCK`, and it is annotated with `@javax.ws.rs.HttpMethod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Binds the `LOCK` HTTP method to the annotation
  prefs: []
  type: TYPE_NORMAL
- en: Finally, use this annotation in a resource method to bind it to the `LOCK` HTTP
    verb.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.GreetingResource.java` class and create a `LOCK`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Bind to `LOCK` HTTP method
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `LOCK` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A complete list of HTTP methods can be found at the following GitHub page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[KNOW YOUR HTTP methods WELL](https://oreil.ly/DC9Wi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.5 Enabling Cross-Origin Resource Sharing (CORS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to request restricted resources from another domain.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `quarkus.http.cors` configuration property to enable CORS.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Cross-origin resource sharing* (CORS) is a mechanism that allows restricted
    resources to be requested from another domain outside the domain from which the
    first resource was served. Quarkus provides a set of configuration properties
    to configure CORS.'
  prefs: []
  type: TYPE_NORMAL
- en: To enable CORS in Quarkus you need to set the `quarkus.http.cors` configuration
    property to `true` in the *application.properties* file.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of CORS configuration could look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view the output and headers using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should show the `access-control-allow-origin` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find more information about CORS at the following Wikipedia page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Cross-origin resource sharing](https://oreil.ly/iSiqh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6 Using Reactive Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to implement HTTP endpoints using reactive routes.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Vert.x `io.vertx.ext.web.Router` router instance or the `i⁠o⁠.⁠q⁠u⁠a⁠r⁠k⁠u⁠s​.⁠v⁠e⁠r⁠t⁠x⁠.⁠w⁠e⁠b⁠.⁠R⁠o⁠u⁠t⁠e`
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to use reactive routes within Quarkus. The first way is to
    register routes directly using the `io.vertx.ext.web.Router` class.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the `Router` instance at startup, you need to observe the creation
    of the object using Contexts and Dependency Injection (CDI).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class named `org.acme.quickstart.ApplicationRoutes.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO7-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates the object into CDI container with *application* scope
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO7-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Provides the `Router` object to register the routes
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO7-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Binds the `GET` HTTP method to `/ok`
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO7-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Handles the logic
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports used later in the example
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way to use reactive routes is a declarative approach with the `i⁠o⁠.⁠q⁠u⁠a⁠r⁠k⁠u⁠s​.⁠v⁠e⁠r⁠t⁠x⁠.⁠w⁠e⁠b⁠.⁠R⁠o⁠u⁠t⁠e`
    annotation. To have access to this annotation, you need to add the `quarkus-vertx-web`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then you can annotate methods with `@Route`. These methods must be defined within
    a CDI bean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.ApplicationRoutes.java` class and define a route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the HTTP path and method
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`RoutingContext` to get request information'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets query param
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO8-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Handles the logic
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus HTTP is based on a nonblocking and reactive engine. Under the covers
    it is using Vert.x and Netty. When a request is received, it is managed by *event
    loops* that may either rely on a worker thread, in case of servlet or JAX-RS,
    or use the I/O thread, in case of reactive route, to handle the logic of the invocation.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that reactive routes must be either nonblocking or explicitly
    declared as blocking; if not, because of the nature of reactive event looping,
    you are going to block the loop, thus preventing further loops from being processed
    until the thread unblocks.
  prefs: []
  type: TYPE_NORMAL
- en: Within the same project, you can mix JAX-RS endpoints with reactive routes without
    any problem.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can learn more about reactive routes in Vert.x on the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Basic Vert.x-Web Concepts](https://oreil.ly/kznp9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.7 Intercepting HTTP Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to intercept HTTP requests to manipulate requests or responses.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you need to manipulate the request before reaching the endpoint logic
    (i.e., security checks) or before the response is sent back to the caller (i.e.,
    compressing response). With Quarkus you can intercept HTTP requests by using either
    Vert.x `Filters` or JAX-RS filter interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to implement a filter using `io.quarkus.vertx.http.runtime.filters.Filters`.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the `Filters` instance at startup, you need to observe the creation
    of the object using CDI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.ApplicationRoutes.java` class and add a method
    named `filters`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Provides `Filters` object to register the filters
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Modifies the response
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a new header to the response
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO9-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Continues the filter chain
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO9-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the order of execution
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that these filters are applied for servlets, JAX-RS
    resources, and reactive routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notice that both requests (the reactive route and JAX-RS endpoints) were modified
    by the registered filter and by adding a new header.
  prefs: []
  type: TYPE_NORMAL
- en: That said, you can also use the `javax.ws.rs.container.ContainerRequestFilter`/
    `javax.ws.rs.container.ContainerResponseFilter` interfaces to implement a filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class named `org.acme.quickstart.HeaderAdditionContainerResponseFilter.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets this class as an extension interface
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Applies changes in response
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a new header to the response
  prefs: []
  type: TYPE_NORMAL
- en: This filter is applied only to JAX-RS resources, and not in reactive routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice that in the case of the reactive-route endpoint, only the `V-Header`
    header is added, and not the `X-Header` header. Meanwhile, in the JAX-RS endpoint,
    the request is modified by both filters by adding both HTTP headers.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about JAX-RS and Vert.x, you can visit the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Eclipse Foundation: Jakarta RESTful web services](https://oreil.ly/xioAv)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vert.x Documentation](https://vertx.io/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.8 Secure Connections with SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to secure connections so as to prevent an attacker from stealing sensitive
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enable Quarkus to use SSL to secure connections.
  prefs: []
  type: TYPE_NORMAL
- en: Securing communication between a client and the application is important when
    the information that is going to be transmitted is sensitive (password, account
    numbers, health information, etc.). For this reason, it is very important to protect
    the communication between services using SSL.
  prefs: []
  type: TYPE_NORMAL
- en: 'To secure the communications, two elements must be provided: a certificate
    and an associated key file. Both can be provided individually or in the form of
    a *keystore*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s configure Quarkus to use a keystore that contains an entry with a certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets HTTPS port
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Type of keystore and location relative to *src/main/resources*
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO11-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The password to open the keystore
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the application and send a request to the HTTPS endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As the certificate has been self-signed, the `--insecure` flag is provided to
    skip the certificate validation. In an example in which the certificate is not
    self-signed, the `insecure` flag should not be provided. The flag was used in
    this example for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Providing the password as plain text in the configuration file is a bad practice.
    It can be supplied by using an environment variable `QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD`,
    as you read at the beginning of the book when the MicroProfile Config spec was
    introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the busy developer, this is how to generate your own key cert for Quarkus:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to *src/main/resources*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn about how to generate certificates, key stores, and trust stores,
    see the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Oracle: Java Platform, Standard Edition Tools Reference: `keytool`](https://oreil.ly/mwOSH)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
