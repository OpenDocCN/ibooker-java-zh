- en: Chapter 3\. Developing RESTful Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 开发 RESTful 服务
- en: 'Quarkus integrates with RESTEasy, a JAX-RS implementation to define REST APIs.
    In this chapter, you’ll learn how to develop RESTful web services in Quarkus.
    We’ll cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 集成了 RESTEasy，一个 JAX-RS 实现，用于定义 REST API。在本章中，您将学习如何在 Quarkus 中开发 RESTful
    Web 服务。我们将涵盖以下主题：
- en: How to use JAX-RS for creating CRUD services
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 JAX-RS 创建 CRUD 服务
- en: How to enable CORS for requesting resources from other domains
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为请求其他域中的资源启用 CORS
- en: How to implement reactive routes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现响应式路由
- en: How to implement filters to manipulate requests and responses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现过滤器以操纵请求和响应
- en: 3.1 Creating a Simple REST API Endpoint
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.1 创建一个简单的 REST API 端点
- en: Problem
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a REST API endpoint with CRUD operations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要创建一个带有 CRUD 操作的 REST API 端点。
- en: Solution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the JAX-RS `GreetingResource` resource generated previously and fill it
    with JAX-RS annotations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用先前生成的 JAX-RS `GreetingResource` 资源，并填充 JAX-RS 注解。
- en: JAX-RS is the default framework used in Quarkus to define REST endpoints. All
    of the JAX-RS annotations are already correctly on your classpath. You will want
    to use the HTTP verb annotations (`@GET`, `@POST`, `@PUT`, `@DELETE`) to declare
    the HTTP verb(s) that the endpoint methods will listen to. Of course, you will
    need the `@Path` annotation to define the URI relative to the rest of the application
    for your endpoint.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 是 Quarkus 中用于定义 REST 端点的默认框架。所有 JAX-RS 注解都已经正确地存在于您的类路径上。您将需要使用 HTTP
    动词注解（`@GET`、`@POST`、`@PUT`、`@DELETE`）来声明端点方法将监听的 HTTP 动词。当然，您还需要 `@Path` 注解来定义相对于应用程序其余部分的
    URI。
- en: 'Open `org.acme.quickstart.GreetingResource.java`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `org.acme.quickstart.GreetingResource.java`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO1-1)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO1-1)'
- en: Identifies the URI path of the current resource
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 标识当前资源的 URI 路径
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO1-2)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO1-2)'
- en: Responds to HTTP `GET` requests
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 响应 HTTP `GET` 请求
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO1-3)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO1-3)'
- en: Defines the media type(s) that are returned
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义返回的媒体类型（们）
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO1-4)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_developing_restful_services_CO1-4)'
- en: Returns plain text
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 返回纯文本
- en: 'Let’s create the remaining methods for creating, updating, and deleting a message:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建用于创建、更新和删除消息的其余方法：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO2-1)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO2-1)'
- en: Responds to HTTP `POST` requests
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 响应 HTTP `POST` 请求
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO2-2)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO2-2)'
- en: Defines the media type(s) that are accepted
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 定义接受的媒体类型（们）
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO2-3)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO2-3)'
- en: Body content of the request
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的主体内容
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO2-4)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_developing_restful_services_CO2-4)'
- en: Responds to HTTP `PUT` requests
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 响应 HTTP `PUT` 请求
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO2-5)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_developing_restful_services_CO2-5)'
- en: Responds to HTTP `DELETE` requests
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 响应 HTTP `DELETE` 请求
- en: 'The following are valid HTTP methods: `@GET`, `@POST`, `@PUT`, `@DELETE`, `@PATCH`,
    `@HEAD`, and `@OPTIONS`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有效的 HTTP 方法：`@GET`、`@POST`、`@PUT`、`@DELETE`、`@PATCH`、`@HEAD` 和 `@OPTIONS`。
- en: 3.2 Extracting Request Parameters
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.2 提取请求参数
- en: Problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to extract request parameters using JAX-RS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要使用 JAX-RS 提取请求参数。
- en: Solution
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use some of the built-in annotations provided by JAX-RS specification.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JAX-RS 规范提供的一些内置注解。
- en: 'Open the `org.acme.quickstart.GreetingResource.java` class and change the `hello`
    method with the request parameters to look like the following extract:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `org.acme.quickstart.GreetingResource.java` 类，并将 `hello` 方法与请求参数更改为以下提取内容：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO3-1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO3-1)'
- en: Gets `UriInfo` of the request; `UriInfo` is part of JAX-RS and allows you to
    obtain application and request URI information
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 获取请求的 `UriInfo`；`UriInfo` 是 JAX-RS 的一部分，允许您获取应用程序和请求 URI 信息
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO3-2)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO3-2)'
- en: Gets query parameter named `order` as `Enum`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 获取名为 `order` 的查询参数作为 `Enum`
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO3-3)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO3-3)'
- en: Gets header parameter named `authorization` integrated with bean validation
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 获取名为 `authorization` 的头部参数，集成了 Bean 验证
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `GET` method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开新的终端窗口，启动 Quarkus 应用程序，并发送请求到`GET`方法来尝试：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Other request parameters can be extracted using annotations such as form parameters
    (`@FormParam`), matrix parameters (`@MatrixParam`), or cookie values (`@CookieParam`).
    Also, using the `@Context` annotation, you can inject other elements related to
    JAX-RS, such as `javax.ws.rs.core.SecurityContext`, `javax.ws.rs.sse.SseEventSink`,
    or `javax.ws.rs.sse.Sse`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其他请求参数可以使用注解来提取，例如表单参数(`@FormParam`)，矩阵参数(`@MatrixParam`)或者 cookie 值(`@CookieParam`)。同时，使用`@Context`注解，可以注入与
    JAX-RS 相关的其他元素，如`javax.ws.rs.core.SecurityContext`，`javax.ws.rs.sse.SseEventSink`或`javax.ws.rs.sse.Sse`。
- en: Discussion
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In [Recipe 3.1](#create-simple-rest-api-endpoint), you saw how to create REST
    API endpoints using JAX-RS, but you usually need to extract more information from
    a request rather than just the body content.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Recipe 3.1](#create-simple-rest-api-endpoint)中，您看到了如何使用 JAX-RS 创建 REST API
    端点，但通常需要从请求中提取更多信息而不仅仅是主体内容。
- en: One of the important things that you need to take into consideration when using
    Quarkus and JAX-RS is that, under the covers, Quarkus uses RESTEasy working with
    Vert.x directly by default, without using anything related to the `Servlet` specification.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Quarkus 和 JAX-RS 时需要考虑的一件重要事情是，在内部，Quarkus 默认使用 RESTEasy 直接与 Vert.x 一起工作，而不使用与`Servlet`规范相关的任何内容。
- en: Generally speaking, everything you might need for developing REST API endpoints
    is well supported, and Quarkus offers alternatives when you need to implement
    custom `Servlet` filters or get the HTTP request directly into the code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，对于开发 REST API 端点可能需要的一切都得到了很好的支持，而且在需要实现自定义`Servlet`过滤器或直接将 HTTP 请求直接编码到代码中时，Quarkus
    提供了替代方案。
- en: 'But, if it is a requirement, you can configure Quarkus to use RESTEasy while
    working with the `Servlet` specification instead of Vert.x by adding the `quarkus-undertow`
    extension:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果有要求的话，可以通过添加`quarkus-undertow`扩展来配置 Quarkus，以在使用`Servlet`规范而不是 Vert.x 的情况下使用
    RESTEasy：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See Also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about JAX-RS, visit the following websites:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 JAX-RS 的信息，请访问以下网站：
- en: '[Eclipse Foundation: Jakarta RESTful Web Services](https://oreil.ly/Tgn5d)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse Foundation: Jakarta RESTful Web Services](https://oreil.ly/Tgn5d)'
- en: '[RESTEasy](https://oreil.ly/WpJ3x)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RESTEasy](https://oreil.ly/WpJ3x)'
- en: 3.3 Using Semantic HTTP Response Status Codes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3 使用语义化 HTTP 响应状态码
- en: Problem
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use HTTP response status codes to correctly reflect the result of
    a request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用 HTTP 响应状态码正确反映请求的结果。
- en: Solution
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The JAX-RS specification uses the `javax.ws.rs.core.Response` interface to
    return the correct HTTP response status code as well as to set any other required
    information like response content, cookies, or headers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 规范使用`javax.ws.rs.core.Response`接口来返回正确的 HTTP 响应状态码，以及设置任何其他必需的信息，如响应内容、cookies
    或头部：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO4-1)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO4-1)'
- en: Sets response status code as 201 created with the `Location` header as the URI
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将响应状态码设置为 201 并将`Location`头设置为 URI，以创建的资源。
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO4-2)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO4-2)'
- en: Sets path from the resource class
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从资源类设置路径
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO4-3)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO4-3)'
- en: Sets the developer ID in the `Location` header
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Location`头中设置开发者 ID。
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO4-4)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_developing_restful_services_CO4-4)'
- en: Sets the created developer as response content
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建的开发者设置为响应内容
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO4-5)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_developing_restful_services_CO4-5)'
- en: Builds the `Response` object
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构建`Response`对象
- en: Note
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You will need the `quarkus-resteasy-jsonb` or `quarkus-resteasy-jackson` extension
    in your project if you are returning JSON from your endpoints.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从你的端点返回 JSON，则在项目中需要`quarkus-resteasy-jsonb`或`quarkus-resteasy-jackson`扩展。
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `GET` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开新的终端窗口，启动 Quarkus 应用程序，并发送请求到`GET`方法来尝试：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the `Location` header contains a valid URI to get access to the
    created resource.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Location`头包含一个有效的 URI，用于访问已创建的资源。
- en: Discussion
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When defining a RESTful Web API, it is really important to follow some conventions
    that are provided by the underlying technology that is used; for RESTful web services,
    it is the HTTP layer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 RESTful Web API 时，遵循底层技术提供的一些约定非常重要；对于 RESTful Web 服务来说，这是 HTTP 层。
- en: 'Another critical part of defining your API is using the correct response status
    codes, which are sent back to the client to indicate whether the request has been
    completed. There are five classes of status codes:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 定义API的另一个关键部分是使用正确的响应状态代码，这些代码将返回给客户端，以指示请求是否已完成。有五类状态代码：
- en: Informational responses (100–199)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息响应（100–199）
- en: Successful responses (200–299)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功的响应（200–299）
- en: Redirects (300–399)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向（300–399）
- en: Client errors (400–499)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端错误（400–499）
- en: Server errors (500–599)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器错误（500–599）
- en: 'By default, Quarkus tries to offer out-of-the-box responses with the correct
    HTTP status codes. For example, it offers a 400 Bad Request in case of constraint
    violations and a 500 Internal Server Error in the case of server exceptions. But
    there is one use case that it is not covered by default: the creation of a resource
    in which an HTTP 201 Created status response code should be sent back to the client
    with the new resource in the body of the message and the URL of the new resource
    set in the `Location` header.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Quarkus尝试提供正确的HTTP状态代码的响应。例如，在约束违规的情况下，它提供400 Bad Request，在服务器异常的情况下，它提供500
    Internal Server Error。但有一种情况不会默认处理：在创建资源时，应该向客户端发送一个HTTP 201 Created状态响应代码，该代码应在消息体中带有新资源，并将新资源的URL设置在`Location`头中。
- en: See Also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Full HTTP response status codes are summarized at the following website:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的HTTP响应状态码总结在以下网站：
- en: '[MDN Web Docs: HTTP response status codes](https://oreil.ly/Gq02d)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MDN Web文档：HTTP响应状态代码](https://oreil.ly/Gq02d)'
- en: 3.4 Binding HTTP Methods
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4 绑定HTTP方法
- en: Problem
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to bind methods to HTTP verbs that do not have a dedicated annotation
    provided by the JAX-RS specification.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将方法绑定到HTTP动词，但JAX-RS规范没有提供专用的注解。
- en: Solution
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `javax.ws.rs.HttpMethod` annotation to create your HTTP method annotation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`javax.ws.rs.HttpMethod`注解创建您的HTTP方法注解。
- en: JAX-RS specification provides seven annotations to specify the HTTP method that
    a method should respond to. These annotations are `@GET`, `@POST`, `@PUT`, `@DELETE`,
    `@PATCH`, `@HEAD`, and `@OPTIONS`. But there are many more HTTP methods, and JAX-RS
    provides `javax.ws.rs.HttpMethod` annotation to support these other methods.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS规范提供了七个注解来指定方法应该响应的HTTP方法。这些注解是`@GET`、`@POST`、`@PUT`、`@DELETE`、`@PATCH`、`@HEAD`和`@OPTIONS`。但还有许多其他HTTP方法，JAX-RS提供了`javax.ws.rs.HttpMethod`注解来支持这些其他方法。
- en: 'The first thing to do is create a meta-annotation. We’re going to use the `LOCK`
    verb, defined at [RFC-4918](https://tools.ietf.org/html/rfc4918#section-9.10).
    The `LOCK` verb locks access or refreshes an existing lock to a resource. Our
    annotation will be named `LOCK`, and it is annotated with `@javax.ws.rs.HttpMethod`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是创建一个元注解。我们将使用在[RFC-4918](https://tools.ietf.org/html/rfc4918#section-9.10)中定义的`LOCK`动词，该动词锁定访问或刷新资源的现有锁。我们的注解将命名为`LOCK`，并用`@javax.ws.rs.HttpMethod`注解：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO5-1)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO5-1)'
- en: Binds the `LOCK` HTTP method to the annotation
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LOCK` HTTP方法绑定到注解
- en: Finally, use this annotation in a resource method to bind it to the `LOCK` HTTP
    verb.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将此注解用于资源方法，以将其绑定到`LOCK` HTTP动词。
- en: 'Open the `org.acme.quickstart.GreetingResource.java` class and create a `LOCK`
    method:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`org.acme.quickstart.GreetingResource.java`类并创建一个`LOCK`方法：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO6-1)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO6-1)'
- en: Bind to `LOCK` HTTP method
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定到`LOCK` HTTP方法
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the `LOCK` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开新的终端窗口，启动Quarkus应用程序，并向`LOCK`方法发送请求来尝试它：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See Also
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'A complete list of HTTP methods can be found at the following GitHub page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的HTTP方法列表可以在以下GitHub页面找到：
- en: '[KNOW YOUR HTTP methods WELL](https://oreil.ly/DC9Wi)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深入了解你的HTTP方法](https://oreil.ly/DC9Wi)'
- en: 3.5 Enabling Cross-Origin Resource Sharing (CORS)
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.5 启用跨域资源共享（CORS）
- en: Problem
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to request restricted resources from another domain.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从另一个域请求受限资源。
- en: Solution
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `quarkus.http.cors` configuration property to enable CORS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`quarkus.http.cors`配置属性启用CORS。
- en: Discussion
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '*Cross-origin resource sharing* (CORS) is a mechanism that allows restricted
    resources to be requested from another domain outside the domain from which the
    first resource was served. Quarkus provides a set of configuration properties
    to configure CORS.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*跨域资源共享*（CORS）是一种机制，允许从提供第一个资源的域之外的另一个域请求受限资源。Quarkus提供了一组配置属性来配置CORS。'
- en: To enable CORS in Quarkus you need to set the `quarkus.http.cors` configuration
    property to `true` in the *application.properties* file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of CORS configuration could look like the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can view the output and headers using `curl`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output should show the `access-control-allow-origin` header:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See Also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find more information about CORS at the following Wikipedia page:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[Cross-origin resource sharing](https://oreil.ly/iSiqh)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.6 Using Reactive Routes
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to implement HTTP endpoints using reactive routes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Vert.x `io.vertx.ext.web.Router` router instance or the `i⁠o⁠.⁠q⁠u⁠a⁠r⁠k⁠u⁠s​.⁠v⁠e⁠r⁠t⁠x⁠.⁠w⁠e⁠b⁠.⁠R⁠o⁠u⁠t⁠e`
    annotation.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to use reactive routes within Quarkus. The first way is to
    register routes directly using the `io.vertx.ext.web.Router` class.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the `Router` instance at startup, you need to observe the creation
    of the object using Contexts and Dependency Injection (CDI).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class named `org.acme.quickstart.ApplicationRoutes.java`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO7-4)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates the object into CDI container with *application* scope
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO7-5)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Provides the `Router` object to register the routes
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO7-6)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Binds the `GET` HTTP method to `/ok`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO7-7)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Handles the logic
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO7-1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Imports used later in the example
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second way to use reactive routes is a declarative approach with the `i⁠o⁠.⁠q⁠u⁠a⁠r⁠k⁠u⁠s​.⁠v⁠e⁠r⁠t⁠x⁠.⁠w⁠e⁠b⁠.⁠R⁠o⁠u⁠t⁠e`
    annotation. To have access to this annotation, you need to add the `quarkus-vertx-web`
    extension:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then you can annotate methods with `@Route`. These methods must be defined within
    a CDI bean.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.ApplicationRoutes.java` class and define a route:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO8-1)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Sets the HTTP path and method
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO8-2)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`RoutingContext` to get request information'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO8-3)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Gets query param
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO8-4)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Handles the logic
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Discussion
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus HTTP is based on a nonblocking and reactive engine. Under the covers
    it is using Vert.x and Netty. When a request is received, it is managed by *event
    loops* that may either rely on a worker thread, in case of servlet or JAX-RS,
    or use the I/O thread, in case of reactive route, to handle the logic of the invocation.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that reactive routes must be either nonblocking or explicitly
    declared as blocking; if not, because of the nature of reactive event looping,
    you are going to block the loop, thus preventing further loops from being processed
    until the thread unblocks.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，响应式路由必须是非阻塞的，或者显式声明为阻塞；否则，由于响应式事件循环的特性，会阻塞循环，从而导致无法处理进一步的循环，直到线程解除阻塞。
- en: Within the same project, you can mix JAX-RS endpoints with reactive routes without
    any problem.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个项目中，您可以毫无问题地混合使用JAX-RS端点和响应式路由。
- en: See Also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can learn more about reactive routes in Vert.x on the following web page:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网页了解更多有关Vert.x中响应式路由的信息：
- en: '[Basic Vert.x-Web Concepts](https://oreil.ly/kznp9)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础的Vert.x-Web概念](https://oreil.ly/kznp9)'
- en: 3.7 Intercepting HTTP Requests
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.7 拦截HTTP请求
- en: Problem
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to intercept HTTP requests to manipulate requests or responses.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望拦截HTTP请求以操纵请求或响应。
- en: Solution
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Sometimes you need to manipulate the request before reaching the endpoint logic
    (i.e., security checks) or before the response is sent back to the caller (i.e.,
    compressing response). With Quarkus you can intercept HTTP requests by using either
    Vert.x `Filters` or JAX-RS filter interfaces.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候您需要在到达终端逻辑之前操纵请求（例如安全检查），或者在返回给调用者的响应发送之前操纵响应（例如压缩响应）。使用Quarkus，您可以通过Vert.x的`Filters`或者JAX-RS的过滤器接口来拦截HTTP请求。
- en: Let’s see how to implement a filter using `io.quarkus.vertx.http.runtime.filters.Filters`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`io.quarkus.vertx.http.runtime.filters.Filters`来实现过滤器。
- en: To retrieve the `Filters` instance at startup, you need to observe the creation
    of the object using CDI.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要在启动时获取`Filters`实例，您需要观察使用CDI创建对象的过程。
- en: 'Open the `org.acme.quickstart.ApplicationRoutes.java` class and add a method
    named `filters`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`org.acme.quickstart.ApplicationRoutes.java`类，并添加一个名为`filters`的方法：
- en: '[PRE18]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO9-1)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO9-1)'
- en: Provides `Filters` object to register the filters
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 提供`Filters`对象来注册过滤器
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO9-2)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO9-2)'
- en: Modifies the response
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 修改响应
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO9-3)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO9-3)'
- en: Adds a new header to the response
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 向响应添加新的头部
- en: '[![4](Images/4.png)](#co_developing_restful_services_CO9-4)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_developing_restful_services_CO9-4)'
- en: Continues the filter chain
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 继续过滤器链
- en: '[![5](Images/5.png)](#co_developing_restful_services_CO9-5)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_developing_restful_services_CO9-5)'
- en: Sets the order of execution
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 设置执行顺序
- en: It is important to note that these filters are applied for servlets, JAX-RS
    resources, and reactive routes.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这些过滤器适用于Servlet、JAX-RS资源和响应式路由。
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开新的终端窗口，启动Quarkus应用，并向新方法发送请求来尝试它：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that both requests (the reactive route and JAX-RS endpoints) were modified
    by the registered filter and by adding a new header.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，注册的过滤器修改了两个请求（响应式路由和JAX-RS端点），并添加了一个新的头部。
- en: That said, you can also use the `javax.ws.rs.container.ContainerRequestFilter`/
    `javax.ws.rs.container.ContainerResponseFilter` interfaces to implement a filter.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`javax.ws.rs.container.ContainerRequestFilter`/`javax.ws.rs.container.ContainerResponseFilter`接口来实现过滤器。
- en: 'Create a new class named `org.acme.quickstart.HeaderAdditionContainerResponseFilter.java`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`org.acme.quickstart.HeaderAdditionContainerResponseFilter.java`的新类：
- en: '[PRE20]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO10-1)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO10-1)'
- en: Sets this class as an extension interface
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将此类设置为扩展接口
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO10-2)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO10-2)'
- en: Applies changes in response
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 应用响应中的更改
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO10-3)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO10-3)'
- en: Adds a new header to the response
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 向响应添加新的头部
- en: This filter is applied only to JAX-RS resources, and not in reactive routes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器仅适用于JAX-RS资源，不适用于响应式路由。
- en: 'Try it by opening a new terminal window, starting the Quarkus application,
    and sending a request to the new method:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开新的终端窗口，启动Quarkus应用，并向新方法发送请求来尝试它：
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Discussion
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Notice that in the case of the reactive-route endpoint, only the `V-Header`
    header is added, and not the `X-Header` header. Meanwhile, in the JAX-RS endpoint,
    the request is modified by both filters by adding both HTTP headers.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在反应式路由端点的情况下，只添加了`V-Header`头部，而没有添加`X-Header`头部。与此同时，在JAX-RS端点中，请求由两个过滤器修改，同时添加了这两个HTTP头部。
- en: See Also
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about JAX-RS and Vert.x, you can visit the following websites:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于JAX-RS和Vert.x的信息，您可以访问以下网站：
- en: '[Eclipse Foundation: Jakarta RESTful web services](https://oreil.ly/xioAv)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Eclipse Foundation: Jakarta RESTful web services](https://oreil.ly/xioAv)'
- en: '[Vert.x Documentation](https://vertx.io/docs)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Vert.x文档](https://vertx.io/docs)'
- en: 3.8 Secure Connections with SSL
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.8 使用SSL进行安全连接
- en: Problem
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to secure connections so as to prevent an attacker from stealing sensitive
    information.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望通过安全连接来防止攻击者窃取敏感信息。
- en: Solution
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Enable Quarkus to use SSL to secure connections.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Quarkus以使用SSL来保护连接。
- en: Securing communication between a client and the application is important when
    the information that is going to be transmitted is sensitive (password, account
    numbers, health information, etc.). For this reason, it is very important to protect
    the communication between services using SSL.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在传输敏感信息（密码、账号、健康信息等）时，保护客户端和应用程序之间的通信非常重要。因此，使用SSL保护服务之间的通信至关重要。
- en: 'To secure the communications, two elements must be provided: a certificate
    and an associated key file. Both can be provided individually or in the form of
    a *keystore*.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护通信，必须提供两个元素：证书和关联的密钥文件。这两者可以分别提供，也可以作为一个*密钥库*的形式提供。
- en: 'Let’s configure Quarkus to use a keystore that contains an entry with a certificate:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置Quarkus使用包含证书条目的密钥库：
- en: '[PRE22]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](Images/1.png)](#co_developing_restful_services_CO11-1)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_restful_services_CO11-1)'
- en: Sets HTTPS port
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 设置HTTPS端口
- en: '[![2](Images/2.png)](#co_developing_restful_services_CO11-2)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_restful_services_CO11-2)'
- en: Type of keystore and location relative to *src/main/resources*
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库的类型和相对于*src/main/resources*的位置
- en: '[![3](Images/3.png)](#co_developing_restful_services_CO11-3)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_restful_services_CO11-3)'
- en: The password to open the keystore
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 打开密钥库的密码
- en: 'Start the application and send a request to the HTTPS endpoint:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序并发送请求到HTTPS端点：
- en: '[PRE23]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As the certificate has been self-signed, the `--insecure` flag is provided to
    skip the certificate validation. In an example in which the certificate is not
    self-signed, the `insecure` flag should not be provided. The flag was used in
    this example for simplicity.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于证书是自签名的，提供了`--insecure`标志以跳过证书验证。在证书不是自签名的情况下，不应提供`insecure`标志。在本例中为简单起见使用了该标志。
- en: Important
  id: totrans-233
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要提示
- en: Providing the password as plain text in the configuration file is a bad practice.
    It can be supplied by using an environment variable `QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD`,
    as you read at the beginning of the book when the MicroProfile Config spec was
    introduced.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中以明文提供密码是一种不好的做法。可以通过环境变量`QUARKUS_HTTP_SSL_CERTIFICATE_KEY_STORE_PASSWORD`来提供，这是在引入MicroProfile
    Config规范时在本书开头介绍的。
- en: Discussion
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'For the busy developer, this is how to generate your own key cert for Quarkus:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于忙碌的开发者，这是如何为Quarkus生成您自己的密钥证书的方法：
- en: Go to *src/main/resources*.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到*src/main/resources*。
- en: 'Execute the following command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE24]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See Also
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn about how to generate certificates, key stores, and trust stores,
    see the following web page:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何生成证书、密钥库和信任库，请参阅以下网页：
- en: '[Oracle: Java Platform, Standard Edition Tools Reference: `keytool`](https://oreil.ly/mwOSH)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oracle: Java平台标准版工具参考:`keytool`](https://oreil.ly/mwOSH)'
