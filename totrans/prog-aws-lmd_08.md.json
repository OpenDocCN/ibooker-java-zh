["```java\npackage book;\n\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\n\npublic class S3ErroringLambda {\n  public void handler(S3Event event) {\n    System.out.println(\"Received new S3 event\");\n    throw new RuntimeException(\"This function unable to process S3 Events\");\n  }\n}\n```", "```java\n  SingleEventInvokeConfig:\n    Type: AWS::Lambda::EventInvokeConfig\n    Properties:\n      FunctionName: !Ref SingleEventLambda\n      Qualifier: \"$LATEST\"\n      MaximumRetryAttempts: 0\n```", "```java\nAWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: chapter8-s3-errors\n\nResources:\n  DLQ:\n    Type: AWS::SNS::Topic\n\n  ErrorTriggeringBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${AWS::AccountId}-${AWS::Region}-errortrigger\n\n  S3ErroringLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: java8\n      MemorySize: 512\n      Handler: book.S3ErroringLambda::handler\n      CodeUri: target/lambda.zip\n      DeadLetterQueue:\n        Type: SNS\n        TargetArn: !Ref DLQ\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref ErrorTriggeringBucket\n            Events: s3:ObjectCreated:*\n\n  DLQProcessingLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: java8\n      MemorySize: 512\n      Handler: book.DLQProcessingLambda::handler\n      CodeUri: target/lambda.zip\n      Events:\n        SnsEvent:\n          Type: SNS\n          Properties:\n            Topic: !Ref DLQ\n```", "```java\npackage book;\n\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\n\npublic class DLQProcessingLambda {\n  public void handler(SNSEvent event) {\n    event.getRecords().forEach(snsRecord ->\n        System.out.println(\"Received DLQ event: \" + snsRecord.toString())\n    );\n  }\n}\n```", "```java\nReceived DLQ event: {sns: {messageAttributes:\n    {RequestID={type: String,value: ff294606-e377-4bad-8f2a-4c5f88042656},\n     ErrorCode={type: String,value: 200}, ...\n```", "```java\nAWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: chapter8-s3-errors\n\nResources:\n  ErrorTriggeringBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${AWS::AccountId}-${AWS::Region}-errortrigger\n\n  S3ErroringLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: java8\n      MemorySize: 512\n      Handler: book.S3ErroringLambda::handler\n      CodeUri: target/lambda.zip\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref ErrorTriggeringBucket\n            Events: s3:ObjectCreated:*\n      Policies:\n        — LambdaInvokePolicy:\n            FunctionName: !Ref ErrorProcessingLambda\n\n  ErrorProcessingLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      Runtime: java8\n      MemorySize: 512\n      Handler: book.ErrorProcessingLambda::handler\n      CodeUri: target/lambda.zip\n\n  S3ErroringLambdaInvokeConfig:\n    Type: AWS::Lambda::EventInvokeConfig\n    Properties:\n      FunctionName: !Ref S3ErroringLambda\n      Qualifier: \"$LATEST\"\n      DestinationConfig:\n        OnFailure:\n          Destination: !GetAtt ErrorProcessingLambda.Arn\n```", "```java\npackage book;\n\npublic class MyLambda {\n  private static final String instanceID =\n    java.util.UUID.randomUUID().toString();\n\n  public String handler(String input) {\n    return \"This is function instance \" + instanceID;\n  }\n}\n```", "```java\npackage book;\n\npublic class MyLambda {\n  private static final String instanceID =\n    java.util.UUID.randomUUID().toString();\n\n  public String handler(String input) throws Exception {\n    Thread.sleep(5000);\n    return \"This is function instance \" + instanceID;\n  }\n}\n```", "```java\nHelloWorldLambda:\nType: AWS::Serverless::Function\nProperties:\n  Runtime: java8\n  MemorySize: 512\n  Handler: book.HelloWorld::handler\n  CodeUri: target/lambda.zip\n  AutoPublishAlias: live\n  ProvisionedConcurrencyConfig:\n    ProvisionedConcurrentExecutions: 1\n```", "```java\nResources:\n  PetStoreFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Events:\n        GetResource:\n          Type: Api\n          Properties:\n            Path: /{proxy+}\n            Method: any\n```", "```java\nAWSTemplateFormatVersion : '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nParameters:\n  SecurityGroupIds:\n    Type: List<AWS::EC2::SecurityGroup::Id>\n    Description: Security Group IDs that Lambda will use\n  VpcSubnetIds:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: VPC Subnet IDs that Lambda will use (min 2 for HA)\n\nResources:\n  HelloWorldFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      Policies:\n        — VPCAccessPolicy: {}\n      VpcConfig:\n        SecurityGroupIds: !Ref SecurityGroupIds\n        SubnetIds: !Ref VpcSubnetIds\n```"]