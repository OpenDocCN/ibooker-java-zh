- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the IT world, the limits of today are the gateways of tomorrow. In the last
    50 years, the IT world has continuously evolved, tirelessly, always pushing the
    limits. These changes are due to not only technical progress, but also us, the
    consumers. As consumers, we continue to demand more and more from the software
    we interact with every day. In addition, our way of interacting with software
    has entirely changed. We can’t live without mobile applications and devices and
    now accept receiving notifications all day long. The Internet of Things (IoT)
    is an emerging market promising many more innovations, increasing the number of
    events and data processed uninterruptedly. The cloud and Kubernetes have not only
    changed our usage but also radically transformed the way we design, develop, deploy,
    and maintain applications.
  prefs: []
  type: TYPE_NORMAL
- en: But don’t be mistaken; all these revolutions come with a price. While they have
    enabled new uses and applications, they have also introduced massive complexity.
    Most software systems today are distributed systems. And distributed systems are
    hard to design, build, and operate, especially on the scale we need to implement
    these new modern applications. We need to handle failures, asynchronous communication,
    an ever-changing topology, the dynamic availability of resources, and so on. While
    the cloud promises unlimited resources, money is a limiting factor, and increasing
    the deployment density, meaning running more on fewer resources, becomes a stringent
    concern.
  prefs: []
  type: TYPE_NORMAL
- en: So, what about Reactive? It is not a library you use in your code or a magic
    framework. *Reactive* is a set of principles, tools, methodologies, and frameworks
    that lead to building *better* distributed systems. How *much* better? It depends
    on the system, but applications following the Reactive principles embrace distributed
    systems’ challenges and focus on elasticity, resilience, and responsiveness, as
    explained in [The Reactive Manifesto](https://oreil.ly/fO6n0).
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we use the noun *Reactive*, with an uppercase *R*, to aggregate
    all the various facets of the reactive landscape, such as reactive programming,
    reactive systems, reactive streams, and so on. With this book, you’ll learn how
    Reactive will help us face these new concerns and how it fits in cloud environments.
    After reading this book, you will be able to build reactive systems—resilient,
    adaptable, event-driven distributed systems.
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book targets intermediate and advanced Java developers. It would be best
    if you were reasonably comfortable with Java; however, prior knowledge of reactive
    programming or even Reactive in general are not required. Many concepts in this
    book relate to distributed systems, but you do not need to be familiar with them
    either.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive systems often rely on message brokers such as Apache Kafka or Advanced
    Message Queuing Protocol (AMQP). This book introduces the basic knowledge you
    need to understand how such brokers help in designing and implementing reactive
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three distinct groups can benefit from this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Developers who are building cloud native applications or distributed systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architects seeking to understand the role of reactive and event-driven architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious developers who have heard about Reactive and want a better understanding
    of it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this book, you will start a journey toward understanding, designing, building,
    and implementing reactive architectures. You will not only learn how it helps
    to build *better* distributed systems and cloud applications, but also see how
    you can use reactive patterns to improve existing systems.
  prefs: []
  type: TYPE_NORMAL
- en: What About Quarkus?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attentive readers would have noticed the mention of Quarkus in the subtitle
    of this book. But, so far, we haven’t mentioned it. *Quarkus* is a Java stack
    tailored for the cloud. It uses build-time techniques to reduce the amount of
    memory used by the application and provide a fast startup time.
  prefs: []
  type: TYPE_NORMAL
- en: But Quarkus is also a reactive stack. At its core, a reactive engine enables
    the creation of concurrent and resilient applications. Quarkus also provides all
    the features you need to build distributed systems that can adapt to fluctuating
    loads and inevitable failures.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we use Quarkus to demonstrate the benefits of the reactive
    approach and introduce various patterns and best practices. Don’t panic if you
    don’t have prior knowledge or experience with it. We will accompany you on the
    journey, guiding you at every step.
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on creating reactive applications and systems that leverage
    Quarkus capabilities and provides all the knowledge required to build such systems.
    We do not cover the complete Quarkus ecosystem, as this book concentrates on the
    Quarkus components that help in the construction of reactive systems.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are just discovering Reactive and want to know more about it, reading
    this book from cover to cover will leave you with an understanding of Reactive
    and how it can help you. If you are a seasoned reactive developer interested in
    Quarkus and its reactive features, you may want to skip the first part of this
    book and jump to the chapters that interest you the most.
  prefs: []
  type: TYPE_NORMAL
- en: '[Part I](part01.html#introduction-part) is a brief introduction, setting the
    context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html#introduction) provides a brief overview of the reactive
    landscape, including its benefits and drawbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html#quarkus) presents Quarkus and its build-time approach
    to reducing startup time and memory usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part II](part02.html#reactive-part) covers Reactive in general:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html#distributed-system) explains the complexities of distributed
    systems and the misconceptions; these are the reasons for being reactive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html#reactive-systems) presents the characteristics of reactive
    systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html#reactive-programming) covers the various forms of asynchronous
    development models, with a focus on reactive programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Part III](part03.html#quarkus-part) explains how to build reactive applications
    with Quarkus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html#quarkus-reactive) discusses the reactive engine and bridging
    imperative and reactive programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html#mutiny) is a deep dive on SmallRye Mutiny, the reactive
    programming library used in Quarkus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html#http) explains HTTP request characteristics and how we
    can be reactive with HTTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html#data) explains how you can use Quarkus to build highly
    concurrent and efficient applications interacting with a database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final part, [Part IV](part04.html#patterns-part), *connects the dots* and
    presents how you can build reactive systems with Quarkus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html#messaging) dives into the integration of Quarkus applications
    with messaging technologies, an essential ingredient of reactive systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html#event-bus) focuses on the integration with Apache Kafka
    and AMQP, and how to build reactive systems with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html#http-client) explores the various ways to consume HTTP
    endpoints from a Quarkus application and how to enforce resilience and responsiveness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html#observability) covers observability concerns in reactive
    systems, such as self-healing, tracing, and monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting You Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, you will see many examples of code. These examples illustrate
    the concepts covered in this book. Some are basic and run in an IDE, and others
    require a couple of prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: We cover these examples, one by one, throughout this book. Now, maybe you’re
    not one for suspense. Or, more likely, maybe you’re already tired of hearing us
    blather on at length and just want to see this working. If that’s the case, simply
    point your browser to [*https://github.com/cescoffier/reactive-systems-in-java*](https://github.com/cescoffier/reactive-systems-in-java)
    and feel free to kick the tires a bit. You can retrieve the code with Git using
    `git clone https://github.com/cescoffier/reactive-systems-in-java.git`. Alternatively,
    you can download a [ZIP file](https://oreil.ly/Ey74z) and unzip it.
  prefs: []
  type: TYPE_NORMAL
- en: The code is organized by chapter. For example, the code related to [Chapter 2](ch02.html#quarkus)
    is available in the *chapter-2* directory ([Table P-1](#code-chapter)). Depending
    on the chapter, the code may be split into multiple modules. For examples that
    are available in the code repository, the code snippet title in the book indicates
    the location of the file in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Table P-1\. Code location per chapter
  prefs: []
  type: TYPE_NORMAL
- en: '| Chapter | Title | Path |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 2](ch02.html#quarkus) | Introduction to Quarkus | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 3](ch03.html#distributed-system) | The Dark Side of Distributed
    Systems | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 4](ch04.html#reactive-systems) | Design Principles of Reactive Systems
    | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 5](ch05.html#reactive-programming) | Reactive Programming: Taming
    the Asynchronicity | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 7](ch07.html#mutiny) | Mutiny: An Event-Driven Reactive Programming
    API | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 8](ch08.html#http) | HTTP with Reactive in Mind | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 9](ch09.html#data) | Accessing Data Reactively | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 10](ch10.html#messaging) | Reactive Messaging: The Connective Tissue
    | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 11](ch11.html#event-bus) | The Event Bus: The Backbone | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 12](ch12.html#http-client) | Reactive REST Client: Connecting with
    HTTP Endpoints | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Chapter 13](ch13.html#observability) | Observing Reactive and Event-Driven
    Architectures | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13)
    |'
  prefs: []
  type: TYPE_TB
- en: The examples from the code repository use Java 11, so be sure to have a suitable
    Java Development Kit (JDK) installed on your machine. They also use Apache Maven
    as the build tool. You don’t have to install Maven, as the repository uses the
    [Maven Wrapper](https://oreil.ly/0oKc9) (provisioning Maven automatically). However,
    if you prefer installing it, download it from the [Apache Maven Project website](https://oreil.ly/XgiCr),
    and follow the instructions on the [Installing Apache Maven page](https://oreil.ly/nwJV9).
  prefs: []
  type: TYPE_NORMAL
- en: To build the code, run `mvn verify` from the root of the project. Maven is going
    to download a set of artifacts, so be sure to have an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: This book covers Quarkus, a Kubernetes-native Java stack. You don’t need to
    install anything to use Quarkus, as long as you have Java and Maven. It will download
    everything else automatically.
  prefs: []
  type: TYPE_NORMAL
- en: You will need Docker. Docker is used to create containers for our applications.
    Install Docker by following the instructions [at the Get Docker page](https://oreil.ly/DjBnj).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, several chapters illustrate the deployment of our reactive applications
    in Kubernetes. To deploy to Kubernetes, you first need `kubectl`, a command-line
    tool to interact with Kubernetes. Install it by following the instructions [from
    the Kubernetes Install Tools page](https://oreil.ly/4SA4J). Unless you have a
    Kubernetes cluster handy, we also recommend minikube be installed on your machine,
    to provide a Kubernetes environment. Follow the instructions at [the minikube
    website](https://oreil.ly/vuCs1) to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need all these tools? You will see in this book that being reactive
    adds constraints to your application but also to your infrastructure. Kubernetes
    provides the primitives we need to deploy applications, create replicas, and keep
    our system on track. On the other side, Quarkus provides the set of features we
    need to implement reactive applications, including nonblocking I/O, reactive programming,
    reactive APIs, and messaging capabilities. Quarkus also provides integration with
    Kubernetes for easing the deployment and configuration of applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table P-2](#table:tools) lists the tools we are going to use in the book.'
  prefs: []
  type: TYPE_NORMAL
- en: Table P-2\. Tools used in this book
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | Website | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Java 11 | [*https://adoptopenjdk.net*](https://adoptopenjdk.net) | Java Virtual
    Machine (JVM) and Java Development Kit (JDK) |'
  prefs: []
  type: TYPE_TB
- en: '| Apache Maven | [*https://maven.apache.org/download.cgi*](https://maven.apache.org/download.cgi)
    | Build automation tool, based on the project object model (POM) |'
  prefs: []
  type: TYPE_TB
- en: '| Quarkus | [*https://quarkus.io*](https://quarkus.io) | A Kubernetes-native
    stack that optimizes Java for containers |'
  prefs: []
  type: TYPE_TB
- en: '| Docker | [*https://www.docker.com/get-started*](https://www.docker.com/get-started)
    | Container creation and execution |'
  prefs: []
  type: TYPE_TB
- en: '| Kubernetes | [*https://kubernetes.io*](https://kubernetes.io) | A container
    orchestration platform, also known as K8s |'
  prefs: []
  type: TYPE_TB
- en: '| minikube | [*https://minikube.sigs.k8s.io/docs/start*](https://minikube.sigs.k8s.io/docs/start)
    | A local distribution of Kubernetes |'
  prefs: []
  type: TYPE_TB
- en: '| GraalVM | [*https://www.graalvm.org*](https://www.graalvm.org) | Provides,
    among others tools, a compiler to create native executables from Java code |'
  prefs: []
  type: TYPE_TB
- en: '| Node.js | [*https://nodejs.org/en*](https://nodejs.org/en) | A JavaScript
    runtime engine |'
  prefs: []
  type: TYPE_TB
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/ReactiveSysJava*](https://oreil.ly/ReactiveSysJava).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a book is never easy. It’s a long and demanding task, taking lots of
    energy and eating quite a lot of family time. Therefore, our first thanks go to
    our families who supported us during this marathon.
  prefs: []
  type: TYPE_NORMAL
- en: We are also grateful to be working with exceptional people at Red Hat. Countless
    people helped us during this journey; it’s impossible to cite all of them. A special
    thank you to Georgios Andrianakis, Roberto Cortez, Stuart Douglas, Stéphane Epardaud,
    Jason Greene, Sanne Grinovero, Gavin King, Martin Kouba, Julien Ponge, Erin Schnabel,
    Guillaume Smet, Michal Szynkiewicz, Ladislav Thon, and Julien Viet. Their work
    is not only brilliant, but also breathtaking. It’s a privilege for us to work
    with such top-notch developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we thank all the reviewers who have provided fantastic and constructive
    feedback: Mary Grygleski, Adam Bellemare, Antonio Goncalves, Mark Little, Scott
    Morrison, Nick Keune, and Chris Mayfield.'
  prefs: []
  type: TYPE_NORMAL
