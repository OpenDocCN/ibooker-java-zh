- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: In the IT world, the limits of today are the gateways of tomorrow. In the last
    50 years, the IT world has continuously evolved, tirelessly, always pushing the
    limits. These changes are due to not only technical progress, but also us, the
    consumers. As consumers, we continue to demand more and more from the software
    we interact with every day. In addition, our way of interacting with software
    has entirely changed. We can’t live without mobile applications and devices and
    now accept receiving notifications all day long. The Internet of Things (IoT)
    is an emerging market promising many more innovations, increasing the number of
    events and data processed uninterruptedly. The cloud and Kubernetes have not only
    changed our usage but also radically transformed the way we design, develop, deploy,
    and maintain applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT世界中，今天的限制是明天的门户。在过去的50年中，IT世界不知疲倦地不断发展，始终在突破界限。这些变化不仅源于技术进步，还因为我们——消费者。作为消费者，我们每天与之互动的软件要求越来越多。此外，我们与软件互动的方式已完全改变。我们无法没有移动应用和设备，现在也接受全天候接收通知。物联网（IoT）是一个新兴市场，承诺更多创新，不断增加处理的事件和数据量。云计算和Kubernetes不仅改变了我们的使用方式，还彻底改变了我们设计、开发、部署和维护应用程序的方式。
- en: But don’t be mistaken; all these revolutions come with a price. While they have
    enabled new uses and applications, they have also introduced massive complexity.
    Most software systems today are distributed systems. And distributed systems are
    hard to design, build, and operate, especially on the scale we need to implement
    these new modern applications. We need to handle failures, asynchronous communication,
    an ever-changing topology, the dynamic availability of resources, and so on. While
    the cloud promises unlimited resources, money is a limiting factor, and increasing
    the deployment density, meaning running more on fewer resources, becomes a stringent
    concern.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要误解；所有这些革命都是有代价的。虽然它们使新的用途和应用成为可能，但也引入了巨大的复杂性。今天大多数软件系统都是分布式系统。而分布式系统很难设计、构建和操作，尤其是在我们需要实现这些新的现代应用的规模上。我们需要处理故障、异步通信、不断变化的拓扑结构、动态可用性的资源等等。虽然云计算承诺无限资源，但资金是一个限制因素，增加部署密度，即在较少资源上运行更多内容，成为一个严峻的问题。
- en: So, what about Reactive? It is not a library you use in your code or a magic
    framework. *Reactive* is a set of principles, tools, methodologies, and frameworks
    that lead to building *better* distributed systems. How *much* better? It depends
    on the system, but applications following the Reactive principles embrace distributed
    systems’ challenges and focus on elasticity, resilience, and responsiveness, as
    explained in [The Reactive Manifesto](https://oreil.ly/fO6n0).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是*Reactive*？它不是你在代码中使用的库，也不是魔法框架。*Reactive*是一套原则、工具、方法和框架，有助于构建更好的分布式系统。究竟*多*好？这取决于系统，但是遵循Reactive原则的应用程序可以应对分布式系统的挑战，并专注于弹性、韧性和响应性，正如在[响应式宣言](https://oreil.ly/fO6n0)中所解释的那样。
- en: In this book, we use the noun *Reactive*, with an uppercase *R*, to aggregate
    all the various facets of the reactive landscape, such as reactive programming,
    reactive systems, reactive streams, and so on. With this book, you’ll learn how
    Reactive will help us face these new concerns and how it fits in cloud environments.
    After reading this book, you will be able to build reactive systems—resilient,
    adaptable, event-driven distributed systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用大写*R*的名词*Reactive*来涵盖响应式领域的各种方面，例如响应式编程、响应式系统、响应式流等。通过本书，您将了解Reactive如何帮助我们应对这些新的关注点，并在云环境中的适应性。阅读完本书后，您将能够构建响应式系统——弹性、适应性、事件驱动的分布式系统。
- en: Who Should Read This Book?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读本书？
- en: This book targets intermediate and advanced Java developers. It would be best
    if you were reasonably comfortable with Java; however, prior knowledge of reactive
    programming or even Reactive in general are not required. Many concepts in this
    book relate to distributed systems, but you do not need to be familiar with them
    either.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目标读者是中级和高级Java开发人员。您应该对Java相当熟悉；但不需要有响应式编程或响应式的先验知识。本书中的许多概念涉及分布式系统，但您也不需要对其熟悉。
- en: Reactive systems often rely on message brokers such as Apache Kafka or Advanced
    Message Queuing Protocol (AMQP). This book introduces the basic knowledge you
    need to understand how such brokers help in designing and implementing reactive
    systems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 反应式系统通常依赖于诸如Apache Kafka或高级消息队列协议（AMQP）之类的消息代理。本书介绍了您理解这些代理如何帮助设计和实现反应式系统所需的基本知识。
- en: 'Three distinct groups can benefit from this book:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书可以使三个不同的群体受益：
- en: Developers who are building cloud native applications or distributed systems
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在构建云原生应用程序或分布式系统的开发人员
- en: Architects seeking to understand the role of reactive and event-driven architectures
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻求理解反应式和事件驱动架构角色的架构师
- en: Curious developers who have heard about Reactive and want a better understanding
    of it
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对反应式感兴趣并希望更好地理解的好奇开发者
- en: With this book, you will start a journey toward understanding, designing, building,
    and implementing reactive architectures. You will not only learn how it helps
    to build *better* distributed systems and cloud applications, but also see how
    you can use reactive patterns to improve existing systems.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书，您将开始了解、设计、构建和实施反应式架构的旅程。您不仅将学习如何帮助构建*更好*的分布式系统和云应用程序，还将了解如何使用反应式模式改进现有系统。
- en: What About Quarkus?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quarkus到底是什么？
- en: Attentive readers would have noticed the mention of Quarkus in the subtitle
    of this book. But, so far, we haven’t mentioned it. *Quarkus* is a Java stack
    tailored for the cloud. It uses build-time techniques to reduce the amount of
    memory used by the application and provide a fast startup time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 细心的读者可能已经注意到本书副标题中提到了Quarkus。但是，到目前为止，我们还没有提到它。*Quarkus* 是专为云而设计的Java堆栈。它使用构建时技术来减少应用程序使用的内存量，并提供快速的启动时间。
- en: But Quarkus is also a reactive stack. At its core, a reactive engine enables
    the creation of concurrent and resilient applications. Quarkus also provides all
    the features you need to build distributed systems that can adapt to fluctuating
    loads and inevitable failures.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是Quarkus也是一个反应式堆栈。在其核心，反应式引擎使得创建并发和具有弹性的应用程序成为可能。Quarkus还提供了构建分布式系统所需的所有功能，这些系统能够适应波动的负载和不可避免的故障。
- en: Throughout this book, we use Quarkus to demonstrate the benefits of the reactive
    approach and introduce various patterns and best practices. Don’t panic if you
    don’t have prior knowledge or experience with it. We will accompany you on the
    journey, guiding you at every step.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用Quarkus来演示反应式方法的优势，并介绍各种模式和最佳实践。如果您对此不熟悉或缺乏经验，不要担心。我们将在旅程中陪伴您，指导您每一步。
- en: This book focuses on creating reactive applications and systems that leverage
    Quarkus capabilities and provides all the knowledge required to build such systems.
    We do not cover the complete Quarkus ecosystem, as this book concentrates on the
    Quarkus components that help in the construction of reactive systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专注于创建利用Quarkus能力的反应式应用程序和系统，并提供了构建此类系统所需的所有知识。我们不涵盖完整的Quarkus生态系统，因为本书专注于帮助构建反应式系统的Quarkus组件。
- en: Navigating This Book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导读本书
- en: If you are just discovering Reactive and want to know more about it, reading
    this book from cover to cover will leave you with an understanding of Reactive
    and how it can help you. If you are a seasoned reactive developer interested in
    Quarkus and its reactive features, you may want to skip the first part of this
    book and jump to the chapters that interest you the most.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚刚接触反应式并希望了解更多信息，全书阅读将带给您对反应式及其如何帮助您的理解。如果您是一位经验丰富的反应式开发人员，对Quarkus及其反应式特性感兴趣，您可能想跳过本书的第一部分，直接阅读最感兴趣的章节。
- en: '[Part I](part01.html#introduction-part) is a brief introduction, setting the
    context:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一部分](part01.html#introduction-part) 是一个简短的介绍，设定了背景：'
- en: '[Chapter 1](ch01.html#introduction) provides a brief overview of the reactive
    landscape, including its benefits and drawbacks.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一章](ch01.html#introduction) 提供了反应式领域的简要概述，包括其优点和缺点。'
- en: '[Chapter 2](ch02.html#quarkus) presents Quarkus and its build-time approach
    to reducing startup time and memory usage.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第二章](ch02.html#quarkus) 介绍了Quarkus及其通过构建时方法减少启动时间和内存使用的方法。'
- en: '[Part II](part02.html#reactive-part) covers Reactive in general:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二部分](part02.html#reactive-part) 概述了一般的反应式内容：'
- en: '[Chapter 3](ch03.html#distributed-system) explains the complexities of distributed
    systems and the misconceptions; these are the reasons for being reactive.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第三章](ch03.html#distributed-system) 解释了分布式系统的复杂性和对反应式的误解；这些是成为反应式的原因。'
- en: '[Chapter 4](ch04.html#reactive-systems) presents the characteristics of reactive
    systems.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html#reactive-systems) 展示了响应式系统的特性。'
- en: '[Chapter 5](ch05.html#reactive-programming) covers the various forms of asynchronous
    development models, with a focus on reactive programming.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html#reactive-programming) 讨论了各种形式的异步开发模型，重点介绍了响应式编程。'
- en: '[Part III](part03.html#quarkus-part) explains how to build reactive applications
    with Quarkus:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[第III部分](part03.html#quarkus-part) 解释了如何使用Quarkus构建响应式应用程序：'
- en: '[Chapter 6](ch06.html#quarkus-reactive) discusses the reactive engine and bridging
    imperative and reactive programming.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html#quarkus-reactive) 探讨了响应式引擎以及如何在命令式和响应式编程之间桥接。'
- en: '[Chapter 7](ch07.html#mutiny) is a deep dive on SmallRye Mutiny, the reactive
    programming library used in Quarkus.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html#mutiny) 深入讲解了SmallRye Mutiny，即Quarkus中使用的响应式编程库。'
- en: '[Chapter 8](ch08.html#http) explains HTTP request characteristics and how we
    can be reactive with HTTP.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html#http) 解释了HTTP请求的特性以及我们如何在响应式中进行处理。'
- en: '[Chapter 9](ch09.html#data) explains how you can use Quarkus to build highly
    concurrent and efficient applications interacting with a database.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html#data) 解释了如何使用Quarkus构建与数据库交互的高并发高效应用程序。'
- en: 'The final part, [Part IV](part04.html#patterns-part), *connects the dots* and
    presents how you can build reactive systems with Quarkus:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后部分，[第IV部分](part04.html#patterns-part)，*连接了各个点*，展示了如何使用Quarkus构建响应式系统：
- en: '[Chapter 10](ch10.html#messaging) dives into the integration of Quarkus applications
    with messaging technologies, an essential ingredient of reactive systems.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html#messaging) 深入探讨了Quarkus应用程序与消息传递技术的集成，这是响应式系统的重要组成部分。'
- en: '[Chapter 11](ch11.html#event-bus) focuses on the integration with Apache Kafka
    and AMQP, and how to build reactive systems with them.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html#event-bus) 着重介绍了与Apache Kafka和AMQP的集成，以及如何利用它们构建响应式系统。'
- en: '[Chapter 12](ch12.html#http-client) explores the various ways to consume HTTP
    endpoints from a Quarkus application and how to enforce resilience and responsiveness.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](ch12.html#http-client) 探索了从Quarkus应用程序消费HTTP端点的各种方式，以及如何实施弹性和响应性。'
- en: '[Chapter 13](ch13.html#observability) covers observability concerns in reactive
    systems, such as self-healing, tracing, and monitoring.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第13章](ch13.html#observability) 涵盖了响应式系统中的可观察性问题，如自愈、追踪和监控。'
- en: Getting You Ready
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您做好准备
- en: Throughout this book, you will see many examples of code. These examples illustrate
    the concepts covered in this book. Some are basic and run in an IDE, and others
    require a couple of prerequisites.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将看到许多代码示例。这些示例说明了本书涵盖的概念。有些示例很基础，可以在IDE中运行，而其他一些则需要一些先决条件。
- en: We cover these examples, one by one, throughout this book. Now, maybe you’re
    not one for suspense. Or, more likely, maybe you’re already tired of hearing us
    blather on at length and just want to see this working. If that’s the case, simply
    point your browser to [*https://github.com/cescoffier/reactive-systems-in-java*](https://github.com/cescoffier/reactive-systems-in-java)
    and feel free to kick the tires a bit. You can retrieve the code with Git using
    `git clone https://github.com/cescoffier/reactive-systems-in-java.git`. Alternatively,
    you can download a [ZIP file](https://oreil.ly/Ey74z) and unzip it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们逐一覆盖这些示例，遍布整本书。也许你对悬念不感兴趣。或者更可能的是，也许你已经厌倦了我们啰嗦地长篇大论，只是想看到它如何运作。如果是这样，只需将您的浏览器指向[*https://github.com/cescoffier/reactive-systems-in-java*](https://github.com/cescoffier/reactive-systems-in-java)，随意试探一下。您可以使用`git
    clone https://github.com/cescoffier/reactive-systems-in-java.git`命令从Git获取代码。或者，您可以下载一个[ZIP文件](https://oreil.ly/Ey74z)，并解压缩它。
- en: The code is organized by chapter. For example, the code related to [Chapter 2](ch02.html#quarkus)
    is available in the *chapter-2* directory ([Table P-1](#code-chapter)). Depending
    on the chapter, the code may be split into multiple modules. For examples that
    are available in the code repository, the code snippet title in the book indicates
    the location of the file in the repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码按章节组织。例如，与[第2章](ch02.html#quarkus)相关的代码位于*chapter-2*目录（见[表P-1](#code-chapter)）。根据章节的不同，代码可能会分成多个模块。书中的代码示例在代码库中的位置可以从书中的代码片段标题找到。
- en: Table P-1\. Code location per chapter
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 P-1\. 各章节的代码位置
- en: '| Chapter | Title | Path |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 章节 | 标题 | 路径 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [Chapter 2](ch02.html#quarkus) | Introduction to Quarkus | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '[第2章](ch02.html#quarkus) | Quarkus 简介 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-2)
    |'
- en: '| [Chapter 3](ch03.html#distributed-system) | The Dark Side of Distributed
    Systems | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3)
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '[第3章](ch03.html#distributed-system) | 分布式系统的黑暗面 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-3)
    |'
- en: '| [Chapter 4](ch04.html#reactive-systems) | Design Principles of Reactive Systems
    | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '[第4章](ch04.html#reactive-systems) | 响应式系统的设计原则 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-4)
    |'
- en: '| [Chapter 5](ch05.html#reactive-programming) | Reactive Programming: Taming
    the Asynchronicity | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5)
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '[第5章](ch05.html#reactive-programming) | 响应式编程：驯服异步性 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-5)
    |'
- en: '| [Chapter 7](ch07.html#mutiny) | Mutiny: An Event-Driven Reactive Programming
    API | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '[第7章](ch07.html#mutiny) | Mutiny：基于事件驱动的响应式编程API | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-7)
    |'
- en: '| [Chapter 8](ch08.html#http) | HTTP with Reactive in Mind | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '[第8章](ch08.html#http) | 面向响应式的HTTP | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-8)
    |'
- en: '| [Chapter 9](ch09.html#data) | Accessing Data Reactively | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '[第9章](ch09.html#data) | 响应式数据访问 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-9)
    |'
- en: '| [Chapter 10](ch10.html#messaging) | Reactive Messaging: The Connective Tissue
    | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '[第10章](ch10.html#messaging) | 响应式消息传递：连接组织的纽带 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-10)
    |'
- en: '| [Chapter 11](ch11.html#event-bus) | The Event Bus: The Backbone | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11)
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '[第11章](ch11.html#event-bus) | 事件总线：支撑系统的骨干 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-11)
    |'
- en: '| [Chapter 12](ch12.html#http-client) | Reactive REST Client: Connecting with
    HTTP Endpoints | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '[第12章](ch12.html#http-client) | 响应式REST客户端：与HTTP端点连接 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-12)
    |'
- en: '| [Chapter 13](ch13.html#observability) | Observing Reactive and Event-Driven
    Architectures | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '[第13章](ch13.html#observability) | 观察响应式和事件驱动架构 | [*https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13*](https://github.com/cescoffier/reactive-systems-in-java/tree/master/chapter-13)
    |'
- en: The examples from the code repository use Java 11, so be sure to have a suitable
    Java Development Kit (JDK) installed on your machine. They also use Apache Maven
    as the build tool. You don’t have to install Maven, as the repository uses the
    [Maven Wrapper](https://oreil.ly/0oKc9) (provisioning Maven automatically). However,
    if you prefer installing it, download it from the [Apache Maven Project website](https://oreil.ly/XgiCr),
    and follow the instructions on the [Installing Apache Maven page](https://oreil.ly/nwJV9).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 代码存储库中的示例使用 Java 11，所以请确保你的机器上安装了合适的 Java 开发工具包（JDK）。它们还使用 Apache Maven 作为构建工具。你不需要安装
    Maven，因为代码库使用了 [Maven Wrapper](https://oreil.ly/0oKc9)（自动提供 Maven）。但是，如果你更喜欢手动安装，可以从
    [Apache Maven 项目网站](https://oreil.ly/XgiCr) 下载它，并按照 [安装 Apache Maven 页面](https://oreil.ly/nwJV9)
    上的说明进行操作。
- en: To build the code, run `mvn verify` from the root of the project. Maven is going
    to download a set of artifacts, so be sure to have an internet connection.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建代码，请从项目根目录运行`mvn verify`。 Maven 将下载一组构建工件，所以请确保有互联网连接。
- en: This book covers Quarkus, a Kubernetes-native Java stack. You don’t need to
    install anything to use Quarkus, as long as you have Java and Maven. It will download
    everything else automatically.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了 Quarkus，一种 Kubernetes 原生的 Java 堆栈。只要你有 Java 和 Maven，你就不需要安装任何东西来使用 Quarkus。它会自动下载其他所有内容。
- en: You will need Docker. Docker is used to create containers for our applications.
    Install Docker by following the instructions [at the Get Docker page](https://oreil.ly/DjBnj).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要 Docker。Docker 用于为我们的应用程序创建容器。请按照 [获取 Docker 页面](https://oreil.ly/DjBnj)
    上的说明安装 Docker。
- en: Finally, several chapters illustrate the deployment of our reactive applications
    in Kubernetes. To deploy to Kubernetes, you first need `kubectl`, a command-line
    tool to interact with Kubernetes. Install it by following the instructions [from
    the Kubernetes Install Tools page](https://oreil.ly/4SA4J). Unless you have a
    Kubernetes cluster handy, we also recommend minikube be installed on your machine,
    to provide a Kubernetes environment. Follow the instructions at [the minikube
    website](https://oreil.ly/vuCs1) to install it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本书的几章介绍了我们在 Kubernetes 中部署反应式应用程序的过程。要部署到 Kubernetes，你首先需要`kubectl`，这是一个与
    Kubernetes 交互的命令行工具。按照 [Kubernetes 安装工具页面](https://oreil.ly/4SA4J) 的说明安装它。除非你有一个方便的
    Kubernetes 集群，否则我们还建议在你的机器上安装 minikube，以提供 Kubernetes 环境。请按照 [minikube 网站](https://oreil.ly/vuCs1)
    上的说明安装它。
- en: Why do we need all these tools? You will see in this book that being reactive
    adds constraints to your application but also to your infrastructure. Kubernetes
    provides the primitives we need to deploy applications, create replicas, and keep
    our system on track. On the other side, Quarkus provides the set of features we
    need to implement reactive applications, including nonblocking I/O, reactive programming,
    reactive APIs, and messaging capabilities. Quarkus also provides integration with
    Kubernetes for easing the deployment and configuration of applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要所有这些工具？本书中你会看到，反应式既会给你的应用程序带来约束，也会给你的基础设施带来约束。Kubernetes 提供了我们部署应用程序、创建副本并保持系统运行的原语。另一方面，Quarkus
    提供了我们实现反应式应用程序所需的一系列功能，包括非阻塞 I/O、反应式编程、反应式 API 和消息传递能力。Quarkus 还提供了与 Kubernetes
    的集成，以便轻松部署和配置应用程序。
- en: '[Table P-2](#table:tools) lists the tools we are going to use in the book.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 P-2](#table:tools) 列出了本书中要使用的工具。'
- en: Table P-2\. Tools used in this book
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表 P-2. 本书中使用的工具
- en: '| Tool | Website | Description |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 网站 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Java 11 | [*https://adoptopenjdk.net*](https://adoptopenjdk.net) | Java Virtual
    Machine (JVM) and Java Development Kit (JDK) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Java 11 | [*https://adoptopenjdk.net*](https://adoptopenjdk.net) | Java 虚拟机（JVM）和
    Java 开发工具包（JDK） |'
- en: '| Apache Maven | [*https://maven.apache.org/download.cgi*](https://maven.apache.org/download.cgi)
    | Build automation tool, based on the project object model (POM) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Apache Maven | [*https://maven.apache.org/download.cgi*](https://maven.apache.org/download.cgi)
    | 基于项目对象模型（POM）的构建自动化工具 |'
- en: '| Quarkus | [*https://quarkus.io*](https://quarkus.io) | A Kubernetes-native
    stack that optimizes Java for containers |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| Quarkus | [*https://quarkus.io*](https://quarkus.io) | 一种优化 Java 用于容器的 Kubernetes
    原生堆栈 |'
- en: '| Docker | [*https://www.docker.com/get-started*](https://www.docker.com/get-started)
    | Container creation and execution |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Docker | [*https://www.docker.com/get-started*](https://www.docker.com/get-started)
    | 容器创建和执行 |'
- en: '| Kubernetes | [*https://kubernetes.io*](https://kubernetes.io) | A container
    orchestration platform, also known as K8s |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes | [*https://kubernetes.io*](https://kubernetes.io) | 一个容器编排平台，也被称为
    K8s |'
- en: '| minikube | [*https://minikube.sigs.k8s.io/docs/start*](https://minikube.sigs.k8s.io/docs/start)
    | A local distribution of Kubernetes |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| minikube | [*https://minikube.sigs.k8s.io/docs/start*](https://minikube.sigs.k8s.io/docs/start)
    | Kubernetes的本地分发 |'
- en: '| GraalVM | [*https://www.graalvm.org*](https://www.graalvm.org) | Provides,
    among others tools, a compiler to create native executables from Java code |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| GraalVM | [*https://www.graalvm.org*](https://www.graalvm.org) | 提供多种工具，包括从Java代码创建本机可执行文件的编译器
    |'
- en: '| Node.js | [*https://nodejs.org/en*](https://nodejs.org/en) | A JavaScript
    runtime engine |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| Node.js | [*https://nodejs.org/en*](https://nodejs.org/en) | 一个JavaScript运行时引擎
    |'
- en: Conventions Used in This Book
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 指示新术语、网址、电子邮件地址、文件名和文件扩展名。
- en: '`Constant width`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`常量宽度`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序列表，以及段落内引用程序元素，如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。
- en: '**`Constant width bold`**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**`常量宽度粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该逐字输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*`常量宽度斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应由用户提供的值或由上下文确定的值替换的文本。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: This element signifies a tip or suggestion.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注释。
- en: Warning
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: O’Reilly Online Learning
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly在线学习
- en: Note
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 超过40年来，[*O’Reilly Media*](http://oreilly.com)为公司的成功提供技术和业务培训、知识和见解。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章和我们的在线学习平台分享他们的知识和专业知识。O’Reilly的在线学习平台为您提供按需访问直播培训课程、深入学习路径、交互式编码环境以及来自O’Reilly和200多个其他出版商的广泛文本和视频资源。有关更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送给出版商：
- en: O’Reilly Media, Inc.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA 95472 Sebastopol
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或当地）
- en: 707-829-0104 (fax)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/ReactiveSysJava*](https://oreil.ly/ReactiveSysJava).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书制作了一个网页，列出勘误、示例和任何额外信息。您可以访问此页面[*https://oreil.ly/ReactiveSysJava*](https://oreil.ly/ReactiveSysJava)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)评论或询问有关本书的技术问题。
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解关于我们的书籍和课程的新闻和信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在YouTube上观看我们：[*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: Writing a book is never easy. It’s a long and demanding task, taking lots of
    energy and eating quite a lot of family time. Therefore, our first thanks go to
    our families who supported us during this marathon.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 写一本书从未是一件容易的事。这是一项漫长而艰巨的任务，耗费了大量精力，也消耗了大量家庭时间。因此，我们首先感谢在这场马拉松中支持我们的家人。
- en: We are also grateful to be working with exceptional people at Red Hat. Countless
    people helped us during this journey; it’s impossible to cite all of them. A special
    thank you to Georgios Andrianakis, Roberto Cortez, Stuart Douglas, Stéphane Epardaud,
    Jason Greene, Sanne Grinovero, Gavin King, Martin Kouba, Julien Ponge, Erin Schnabel,
    Guillaume Smet, Michal Szynkiewicz, Ladislav Thon, and Julien Viet. Their work
    is not only brilliant, but also breathtaking. It’s a privilege for us to work
    with such top-notch developers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也非常感激能与红帽公司的出色人才合作。在这段旅程中，无数人给予了我们帮助；不可能一一列举。特别感谢Georgios Andrianakis、Roberto
    Cortez、Stuart Douglas、Stéphane Epardaud、Jason Greene、Sanne Grinovero、Gavin King、Martin
    Kouba、Julien Ponge、Erin Schnabel、Guillaume Smet、Michal Szynkiewicz、Ladislav Thon和Julien
    Viet。他们的工作不仅非常出色，而且令人惊叹。能与这些顶尖开发者一同工作，对我们来说是一种特权。
- en: 'Finally, we thank all the reviewers who have provided fantastic and constructive
    feedback: Mary Grygleski, Adam Bellemare, Antonio Goncalves, Mark Little, Scott
    Morrison, Nick Keune, and Chris Mayfield.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们感谢所有提供了出色和建设性反馈的审阅者们：Mary Grygleski、Adam Bellemare、Antonio Goncalves、Mark
    Little、Scott Morrison、Nick Keune和Chris Mayfield。
