["```java\npublic class GetEnv {\n    public static void main(String[] argv) {\n        System.out.println(\"System.getenv(\\\"PATH\\\") = \" + System.getenv(\"PATH\"));\n    }\n}\n```", "```java\nC:\\javasrc>java environ.GetEnv\nSystem.getenv(\"PATH\") = C:\\windows\\bin;c:\\jdk1.8\\bin;c:\\documents\n    and settings\\ian\\bin\nC:\\javasrc>\n```", "```java\njshell> System.getProperties().forEach((k,v) -> System.out.println(k + \"->\" +v))\nawt.toolkit->sun.awt.X11.XToolkit\njava.specification.version->11\nsun.cpu.isalist->\nsun.jnu.encoding->UTF-8\njava.class.path->.\njava.vm.vendor->Oracle Corporation\nsun.arch.data.model->64\njava.vendor.url->http://java.oracle.com/\nuser.timezone->\nos.name->OpenBSD\njava.vm.specification.version->11\n... many more ...\njshell>\n```", "```java\n        String sysColor = System.getProperty(\"pencil_color\");\n```", "```java\njava -D\"pencil_color=Deep Sea Green\" environ.SysPropDemo\n```", "```java\n$ java environ.SysPropDemo os.arch\nos.arch = x86\n```", "```java\npublic class CheckForSwing {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"javax.swing.JButton\");\n        } catch (ClassNotFoundException e) {\n            String failure =\n                \"Sorry, but this version of MyApp needs \\n\" +\n                \"a Java Runtime with JFC/Swing components\\n\" +\n                \"having the final names (javax.swing.*)\";\n            // Better to make something appear in the GUI. Either a\n            // JOptionPane, or: myPanel.add(new Label(failure));\n            System.err.println(failure);\n        }\n        // No need to print anything here - the GUI should work...\n    }\n}\n```", "```java\npublic class SysPropDemo {\n    public static void main(String[] argv) throws IOException {\n        if (argv.length == 0)\n            // tag::sysprops[]\n            System.getProperties().list(System.out);\n            // end::sysprops[]\n        else {\n            for (String s : argv) {\n                System.out.println(s + \" = \" +\n                    System.getProperty(s));\n            }\n        }\n    }\n}\n```", "```java\npackage com.darwinsys.lang;\n\nimport java.io.File;\n\n/** Some things that are system-dependent.\n * All methods are static.\n * @author Ian Darwin\n */\npublic class SysDep {\n\n    final static String UNIX_NULL_DEV = \"/dev/null\";\n    final static String WINDOWS_NULL_DEV = \"NUL:\";\n    final static String FAKE_NULL_DEV = \"jnk\";\n\n    /** Return the name of the null device on platforms which support it,\n     * or \"jnk\" (to create an obviously well-named temp file) otherwise.\n     * @return The name to use for output.\n     */\n    public static String getDevNull() {\n\n        if (new File(UNIX_NULL_DEV).exists()) {     ![1](assets/1.png)\n            return UNIX_NULL_DEV;\n        }\n\n        String sys = System.getProperty(\"os.name\"); ![2](assets/2.png)\n        if (sys==null) {                            ![3](assets/3.png)\n            return FAKE_NULL_DEV;\n        }\n        if (sys.startsWith(\"Windows\")) {            ![4](assets/4.png)\n            return WINDOWS_NULL_DEV;\n        }\n        return FAKE_NULL_DEV;                       ![5](assets/5.png)\n    }\n}\n```", "```java\nboolean isMacOS = System.getProperty(\"mrj.version\") != null;\nif (isMacOS) {\n  System.setProperty(\"apple.laf.useScreenMenuBar\",  \"true\");\n  System.setProperty(\"com.apple.mrj.application.apple.menu.about.name\",\n  \"My Super App\");\n}\n```", "```java\nIllegal reflective access by com.foo.Bar\n    (file:/Users/ian/.m2/repository/com/foo/1.3.1/foo-1.3.1.jar)\n    to field java.util.Properties.defaults\nPlease consider reporting this to the maintainers of com.foo.Bar\nUse --illegal-access=warn to enable warnings of further\n illegal reflective access operations\nAll illegal access operations will be denied in a future release\n```", "```java\npublic class LoadAverage {\n    public static void main(String[] args) throws Exception {\n        Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n        f.setAccessible(true);\n        Unsafe unsafe = (Unsafe) f.get(null);\n        int nelem = 3;\n        double loadAvg[] = new double[nelem];\n        unsafe.getLoadAverage(loadAvg, nelem);\n        for (double d : loadAvg) {\n            System.out.printf(\"%4.2f \", d);\n        }\n        System.out.println();\n    }\n}\n```", "```java\nmodule javasrc.unsafe {\n    requires jdk.unsupported;\n\t// others...\n}\n```", "```java\n$ java -version\nopenjdk version \"14-ea\" 2020-03-17\nOpenJDK Runtime Environment (build 14-ea+27-1339)\nOpenJDK 64-Bit Server VM (build 14-ea+27-1339, mixed mode, sharing)\n$ mvn clean package\n[INFO] Scanning for projects...\n[INFO]\n[INFO] --------------------< com.darwinsys:javasrc-unsafe >--------------------\n[INFO] Building javasrc - Unsafe 1.0.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ javasrc-unsafe ---\n[INFO] Deleting /Users/ian/workspace/javasrc/unsafe/target\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ javasrc-unsafe ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory /Users/ian/workspace/javasrc/unsafe/src/main/resources\n[INFO]\n[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ javasrc-unsafe ---\n[INFO] Changes detected - recompiling the module!\n[INFO] Compiling 2 source files to /Users/ian/workspace/javasrc/unsafe/target/classes\n[WARNING] /Users/ian/workspace/javasrc/unsafe/src/main/java/unsafe/LoadAverage.java:[3,16] sun.misc.Unsafe is internal proprietary API and may be removed in a future release\n[WARNING] /Users/ian/workspace/javasrc/unsafe/src/main/java/unsafe/LoadAverage.java:[12,27] sun.misc.Unsafe is internal proprietary API and may be removed in a future release\n[WARNING] /Users/ian/workspace/javasrc/unsafe/src/main/java/unsafe/LoadAverage.java:[14,17] sun.misc.Unsafe is internal proprietary API and may be removed in a future release\n[WARNING] /Users/ian/workspace/javasrc/unsafe/src/main/java/unsafe/LoadAverage.java:[14,34] sun.misc.Unsafe is internal proprietary API and may be removed in a future release\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ javasrc-unsafe ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory /Users/ian/workspace/javasrc/unsafe/src/test/resources\n[INFO]\n[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ javasrc-unsafe ---\n[INFO] No sources to compile\n[INFO]\n[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ javasrc-unsafe ---\n[INFO] No tests to run.\n[INFO]\n[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ javasrc-unsafe ---\n[INFO] Building jar: /Users/ian/workspace/javasrc/unsafe/target/javasrc-unsafe-1.0.0-SNAPSHOT.jar\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.668 s\n[INFO] Finished at: 2020-01-05T14:53:55-05:00\n[INFO] ------------------------------------------------------------------------\n$\n$ java -cp target/classes unsafe/LoadAverage\n3.54 1.94 1.62\n$ uptime\n14:54  up 1 day, 21:50, 5 users, load averages: 3.54 1.94 1.62\n$\n```", "```java\n$ java --list-modules\njava.base\njava.compiler\njava.datatransfer\njava.desktop\njava.instrument\njava.logging\njava.management\njava.management.rmi\njava.naming\njava.net.http\njava.prefs\njava.rmi\njava.scripting\njava.se\njava.security.jgss\njava.security.sasl\njava.smartcardio\njava.sql\njava.sql.rowset\njava.transaction.xa\njava.xml\njava.xml.crypto\n... plus a bunch of JDK modules ...\n```", "```java\nrequires java.desktop;\n```"]