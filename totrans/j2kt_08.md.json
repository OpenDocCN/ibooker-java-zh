["```java\nvar max = Collections.max(list);\n```", "```java\nvar m = max(list);\n```", "```java\npublic class Shortlists {\n    public static <T> List<T> sorted(\n        List<T> shortlist,\n        Comparator<? super T> ordering\n    ) {\n        return shortlist.stream()\n            .sorted(ordering)\n            .collect(toUnmodifiableList());\n    }\n\n    public static <T> List<T> removeItemAt(List<T> shortlist, int index) {\n        return Stream.concat(\n            shortlist.stream().limit(index),\n            shortlist.stream().skip(index + 1)\n        ).collect(toUnmodifiableList());\n    }\n\n    public static Comparator<HasRating> byRating() {\n        return comparingDouble(HasRating::getRating).reversed();\n    }\n\n    public static Comparator<HasPrice> byPriceLowToHigh() {\n        return comparing(HasPrice::getPrice);\n    }\n\n    ... and other comparators\n}\n```", "```java\nvar reordered = Shortlists.sorted(items, Shortlists.byValue());\n```", "```java\nvar reordered = sorted(items, byPriceLowToHigh());\n```", "```java\nobject Shortlists {\n    @JvmStatic\n    fun <T> sorted(shortlist: List<T>, ordering: Comparator<in T>): List<T> {\n        return shortlist.stream().sorted(ordering)\n            .collect(toUnmodifiableList())\n    }\n\n    @JvmStatic\n    fun <T> removeItemAt(shortlist: List<T>, index: Int): List<T> {\n        return Stream.concat(\n            shortlist.stream().limit(index.toLong()),\n            shortlist.stream().skip((index + 1).toLong())\n        ).collect(toUnmodifiableList())\n    }\n\n    @JvmStatic\n    fun byRating(): Comparator<HasRating> {\n        return comparingDouble(HasRating::rating).reversed()\n    }\n\n    @JvmStatic\n    fun byPriceLowToHigh(): Comparator<HasPrice> {\n        return comparing(HasPrice::price)\n    }\n\n    ... and other comparators\n}\n```", "```java\n@file:JvmName(\"Shortlists\")\npackage travelator\n\n...\n\nfun <T> sorted(shortlist: List<T>, ordering: Comparator<in T>): List<T> {\n    return shortlist.stream().sorted(ordering)\n        .collect(toUnmodifiableList())\n}\n\nfun <T> removeItemAt(shortlist: List<T>, index: Int): List<T> {\n    return Stream.concat(\n        shortlist.stream().limit(index.toLong()),\n        shortlist.stream().skip((index + 1).toLong())\n    ).collect(toUnmodifiableList())\n}\n\n... etc.\n```", "```java\nimport org.junit.jupiter.api.Test\nimport travelator.Shortlists.byPriceLowToHigh\nimport travelator.Shortlists.byRating\nimport travelator.Shortlists.byRelevance\nimport travelator.Shortlists.byValue\nimport travelator.Shortlists.removeItemAt\nimport travelator.Shortlists.sorted\n```", "```java\n@JvmStatic\nfun <T> sorted(shortlist: List<T>, ordering: Comparator<in T>): List<T> {\n    return shortlist.stream().sorted(ordering)\n        .collect(toUnmodifiableList())\n}\n```", "```java\nvar reordered = ShortlistsKt.sorted(items, Shortlists.byValue());\n```", "```java\nvar reordered = travelator.ShortlistsKt.sorted(items, byPriceLowToHigh());\n```", "```java\nvar reordered = sorted(items, byPriceLowToHigh());\n```", "```java\nfun <T> sorted(shortlist: List<T>, ordering: Comparator<in T>): List<T> {\n    return shortlist.stream().sorted(ordering)\n        .collect(toUnmodifiableList())\n}\n\nfun <T> removeItemAt(shortlist: List<T>, index: Int): List<T> {\n    return Stream.concat(\n        shortlist.stream().limit(index.toLong()),\n        shortlist.stream().skip((index + 1).toLong())\n    ).collect(toUnmodifiableList())\n}\n\nfun byRating(): Comparator<HasRating> {\n    return comparingDouble(HasRating::rating).reversed()\n}\n\nfun byPriceLowToHigh(): Comparator<HasPrice> {\n    return comparing(HasPrice::price)\n}\n\n... and other comparators\n```", "```java\nfun <T> sorted(shortlist: List<T>, ordering: Comparator<in T>): List<T> {\n    return shortlist.sortedWith(ordering)\n}\n```", "```java\nfun <T> List<T>.sorted(ordering: Comparator<in T>): List<T> {\n    return sortedWith(ordering)\n}\n```", "```java\nvar reordered = sorted(items, byPriceLowToHigh());\n```", "```java\nval hotelsByPrice = hotels.sorted(byPriceLowToHigh())\n```", "```java\nval hotelsByPrice = hotels.sortedWith(byPriceLowToHigh())\n```", "```java\nfun <T> Iterable<T>.sorted(ordering: Comparator<in T>): List<T> =\n    sortedWith(ordering)\n\nfun <T> Iterable<T>.withoutItemAt(index: Int): List<T> =\n    take(index) + drop(index + 1)\n\nfun byRating(): Comparator<HasRating> =\n    comparingDouble(HasRating::rating).reversed()\n\nfun byPriceLowToHigh(): Comparator<HasPrice> =\n    comparing(HasPrice::price)\n\n... and other comparators\n```"]