["```java\n30-01-2017,-100,Deliveroo\n30-01-2017,-50,Tesco\n01-02-2017,6000,Salary\n02-02-2017,2000,Royalties\n02-02-2017,-4000,Rent\n03-02-2017,3000,Tesco\n05-02-2017,-30,Cinema\n```", "```java\npublic class BankTransactionAnalyzerSimple {\n    private static final String RESOURCES = \"src/main/resources/\";\n\n    public static void main(final String... args) throws IOException {\n\n        final Path path = Paths.get(RESOURCES + args[0]);\n        final List<String> lines = Files.readAllLines(path);\n        double total = 0d;\n        for(final String line: lines) {\n            final String[] columns = line.split(\",\");\n            final double amount = Double.parseDouble(columns[1]);\n            total += amount;\n        }\n\n        System.out.println(\"The total for all transactions is \" + total);\n    }\n}\n```", "```java\nfinal Path path = Paths.get(RESOURCES + args[0]);\nfinal List<String> lines = Files.readAllLines(path);\ndouble total = 0d;\nfinal DateTimeFormatter DATE_PATTERN = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\nfor(final String line: lines) {\n    final String[] columns = line.split(\",\");\n    final LocalDate date = LocalDate.parse(columns[0], DATE_PATTERN);\n    if(date.getMonth() == Month.JANUARY) {\n        final double amount = Double.parseDouble(columns[1]);\n        total += amount;\n    }\n}\n\nSystem.out.println(\"The total for all transactions in January is \" + total);\n```", "```java\npublic class BankStatementCSVParser {\n\n    private static final DateTimeFormatter DATE_PATTERN\n        = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n\n    private BankTransaction parseFromCSV(final String line) {\n        final String[] columns = line.split(\",\");\n\n        final LocalDate date = LocalDate.parse(columns[0], DATE_PATTERN);\n        final double amount = Double.parseDouble(columns[1]);\n        final String description = columns[2];\n\n        return new BankTransaction(date, amount, description);\n    }\n\n    public List<BankTransaction> parseLinesFromCSV(final List<String> lines) {\n        final List<BankTransaction> bankTransactions = new ArrayList<>();\n        for(final String line: lines) {\n            bankTransactions.add(parseFromCSV(line));\n        }\n        return bankTransactions;\n    }\n}\n```", "```java\npublic class BankTransaction {\n    private final LocalDate date;\n    private final double amount;\n    private final String description;\n\n    public BankTransaction(final LocalDate date, final double amount, final String description) {\n        this.date = date;\n        this.amount = amount;\n        this.description = description;\n    }\n\n    public LocalDate getDate() {\n        return date;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public String toString() {\n        return \"BankTransaction{\" +\n                \"date=\" + date +\n                \", amount=\" + amount +\n                \", description='\" + description + '\\'' +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        BankTransaction that = (BankTransaction) o;\n        return Double.compare(that.amount, amount) == 0 &&\n                date.equals(that.date) &&\n                description.equals(that.description);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(date, amount, description);\n    }\n}\n```", "```java\nfinal BankStatementCSVParser bankStatementParser = new BankTransactionCSVParser();\n\nfinal String fileName = args[0];\nfinal Path path = Paths.get(RESOURCES + fileName);\nfinal List<String> lines = Files.readAllLines(path);\n\nfinal List<BankTransaction> bankTransactions\n    = bankStatementParser.parseLinesFromCSV(lines);\n\nSystem.out.println(\"The total for all transactions is \" + calculateTotalAmount(bankTransactions));\nSystem.out.println(\"Transactions in January \" + selectInMonth(BankTransactions, Month.JANUARY));\n```", "```java\npublic static double calculateTotalAmount(final List<BankTransaction> bankTransactions) {\n    double total = 0d;\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        total += bankTransaction.getAmount();\n    }\n    return total;\n}\n\npublic static List<BankTransaction> selectInMonth(final List<BankTransaction> bankTransactions, final Month month) {\n\n    final List<BankTransaction> bankTransactionsInMonth = new ArrayList<>();\n    for(final BankTransaction bankTransaction: bankTransactions) {\n        if(bankTransaction.getDate().getMonth() == month) {\n            bankTransactionsInMonth.add(bankTransaction);\n        }\n    }\n    return bankTransactionsInMonth;\n}\n```", "```java\npublic class BankStatementProcessor {\n\n    private final List<BankTransaction> bankTransactions;\n\n    public BankStatementProcessor(final List<BankTransaction> bankTransactions) {\n        this.bankTransactions = bankTransactions;\n    }\n\n    public double calculateTotalAmount() {\n        double total = 0;\n        for(final BankTransaction bankTransaction: bankTransactions) {\n            total += bankTransaction.getAmount();\n        }\n        return total;\n    }\n\n    public double calculateTotalInMonth(final Month month) {\n        double total = 0;\n        for(final BankTransaction bankTransaction: bankTransactions) {\n            if(bankTransaction.getDate().getMonth() == month) {\n                total += bankTransaction.getAmount();\n            }\n        }\n        return total;\n    }\n\n    public double calculateTotalForCategory(final String category) {\n        double total = 0;\n        for(final BankTransaction bankTransaction: bankTransactions) {\n            if(bankTransaction.getDescription().equals(category)) {\n                total += bankTransaction.getAmount();\n            }\n        }\n        return total;\n    }\n}\n```", "```java\npublic class BankStatementAnalyzer {\n    private static final String RESOURCES = \"src/main/resources/\";\n    private static final BankStatementCSVParser bankStatementParser = new BankStatementCSVParser();\n\n    public static void main(final String... args) throws IOException {\n\n        final String fileName = args[0];\n        final Path path = Paths.get(RESOURCES + fileName);\n        final List<String> lines = Files.readAllLines(path);\n\n        final List<BankTransaction> bankTransactions = bankStatementParser.parseLinesFrom(lines);\n        final BankStatementProcessor bankStatementProcessor = new BankStatementProcessor(bankTransactions);\n\n        collectSummary(bankStatementProcessor);\n    }\n\n    private static void collectSummary(final BankStatementProcessor bankStatementProcessor) {\n        System.out.println(\"The total for all transactions is \"\n                + bankStatementProcessor.calculateTotalAmount());\n\n        System.out.println(\"The total for transactions in January is \"\n                + bankStatementProcessor.calculateTotalInMonth(Month.JANUARY));\n\n        System.out.println(\"The total for transactions in February is \"\n                + bankStatementProcessor.calculateTotalInMonth(Month.FEBRUARY));\n\n        System.out.println(\"The total salary received is \"\n                + bankStatementProcessor.calculateTotalForCategory(\"Salary\"));\n    }\n}\n```", "```java\npublic class BankTransactionDAO {\n\n    public BankTransaction create(final LocalDate date, final double amount, final String description) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n\n    public BankTransaction read(final long id) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n\n    public BankTransaction update(final long id) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n\n    public void delete(final BankTransaction BankTransaction) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n}\n```", "```java\npublic class BankTransactionParser {\n\n    public BankTransaction parseFromCSV(final String line) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n\n    public BankTransaction parseFromJSON(final String line) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n\n    public BankTransaction parseFromXML(final String line) {\n        // ...\n        throw new UnsupportedOperationException();\n    }\n}\n```", "```java\npublic interface BankStatementParser {\n    BankTransaction parseFrom(String line);\n    List<BankTransaction> parseLinesFrom(List<String> lines);\n}\n```", "```java\npublic class BankStatementCSVParser implements BankStatementParser {\n    // ...\n}\n```", "```java\npublic class BankStatementAnalyzer {\n    private static final String RESOURCES = \"src/main/resources/\";\n\n    public void analyze(final String fileName, final BankStatementParser bankStatementParser)\n    throws IOException {\n\n        final Path path = Paths.get(RESOURCES + fileName);\n        final List<String> lines = Files.readAllLines(path);\n\n        final List<BankTransaction> bankTransactions = bankStatementParser.parseLinesFrom(lines);\n\n        final BankStatementProcessor bankStatementProcessor = new BankStatementProcessor(bankTransactions);\n\n        collectSummary(bankStatementProcessor);\n    }\n\n    // ...\n}\n```", "```java\npublic class MainApplication {\n\n    public static void main(final String... args) throws IOException {\n\n        final BankStatementAnalyzer bankStatementAnalyzer\n                = new BankStatementAnalyzer();\n\n        final BankStatementParser bankStatementParser\n                = new BankStatementCSVParser();\n\n        bankStatementAnalyzer.analyze(args[0], bankStatementParser);\n\n    }\n}\n```", "```java\nimport org.junit.Assert;\nimport org.junit.Test;\npublic class BankStatementCSVParserTest {\n\n    private final BankStatementParser statementParser = new BankStatementCSVParser();\n\n    @Test\n    public void shouldParseOneCorrectLine() throws Exception {\n        Assert.fail(\"Not yet implemented\");\n    }\n\n}\n```", "```java\n@Test\npublic void shouldParseOneCorrectLine() throws Exception {\n    final String line = \"30-01-2017,-50,Tesco\";\n\n    final BankTransaction result = statementParser.parseFrom(line);\n\n    final BankTransaction expected\n        = new BankTransaction(LocalDate.of(2017, Month.JANUARY, 30), -50, \"Tesco\");\n    final double tolerance = 0.0d;\n\n    Assert.assertEquals(expected.getDate(), result.getDate());\n    Assert.assertEquals(expected.getAmount(), result.getAmount(), tolerance);\n    Assert.assertEquals(expected.getDescription(), result.getDescription());\n}\n```"]