["```java\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass PositionControllerTest {\n\n    @BeforeEach\n    void setUp() {\n    }\n\n    @AfterEach\n    void tearDown() {\n    }\n\n    @Test\n    void getCurrentAircraftPositions() {\n    }\n}\n```", "```java\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@AutoConfigureWebTestClient\n```", "```java\n@Test\nvoid getCurrentAircraftPositions(@Autowired WebTestClient client) {\n    assert client.get()\n            .uri(\"/aircraft\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectBody(Iterable.class)\n            .returnResult()\n            .getResponseBody()\n            .iterator()\n            .hasNext();\n}\n```", "```java\n@WebFluxTest({PositionController.class})\n```", "```java\nimport lombok.AllArgsConstructor;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@AllArgsConstructor\n@RestController\npublic class PositionController {\n    private final PositionRetriever retriever;\n\n    @GetMapping(\"/aircraft\")\n    public Iterable<Aircraft> getCurrentAircraftPositions() {\n        return retriever.retrieveAircraftPositions();\n    }\n}\n```", "```java\nimport lombok.AllArgsConstructor;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@AllArgsConstructor\n@Component\npublic class PositionRetriever {\n    private final AircraftRepository repository;\n    private final WebClient client =\n            WebClient.create(\"http://localhost:7634\");\n\n    Iterable<Aircraft> retrieveAircraftPositions() {\n        repository.deleteAll();\n\n        client.get()\n                .uri(\"/aircraft\")\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(ac -> !ac.getReg().isEmpty())\n                .toStream()\n                .forEach(repository::save);\n\n        return repository.findAll();\n    }\n}\n```", "```java\n@MockBean\nprivate PositionRetriever retriever;\n```", "```java\n    private Aircraft ac1, ac2;\n\n    @BeforeEach\n    void setUp(ApplicationContext context) {\n        // Spring Airlines flight 001 en route, flying STL to SFO,\n        //   at 30000' currently over Kansas City\n        ac1 = new Aircraft(1L, \"SAL001\", \"sqwk\", \"N12345\", \"SAL001\",\n                \"STL-SFO\", \"LJ\", \"ct\",\n                30000, 280, 440, 0, 0,\n                39.2979849, -94.71921, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        // Spring Airlines flight 002 en route, flying SFO to STL,\n        //   at 40000' currently over Denver\n        ac2 = new Aircraft(2L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n                \"SFO-STL\", \"LJ\", \"ct\",\n                40000, 65, 440, 0, 0,\n                39.8560963, -104.6759263, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n    }\n```", "```java\n@BeforeEach\nvoid setUp(ApplicationContext context) {\n    // Aircraft variable assignments omitted for brevity\n\n    ...\n\n    Mockito.when(retriever.retrieveAircraftPositions())\n        .thenReturn(List.of(ac1, ac2));\n}\n```", "```java\n@Test\nvoid getCurrentAircraftPositions(@Autowired WebTestClient client) {\n    final Iterable<Aircraft> acPositions = client.get()\n            .uri(\"/aircraft\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectBodyList(Aircraft.class)\n            .returnResult()\n            .getResponseBody();\n\n    // Still need to compare with expected results\n}\n```", "```java\nassertEquals(List.of(ac1, ac2), acPositions);\n```", "```java\n@MockBean\nprivate AircraftRepository repository;\n\n@BeforeEach\nvoid setUp(ApplicationContext context) {\n    // Existing setUp code omitted for brevity\n\n    ...\n\n    Mockito.when(repository.findAll()).thenReturn(List.of(ac1, ac2));\n}\n\n@Test\nvoid getCurrentAircraftPositions(@Autowired WebTestClient client) {\n    // client.get chain of operations omitted for brevity\n\n    ...\n\n    assertEquals(repository.findAll(), acPositions);\n}\n```", "```java\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.test.web.reactive.server.WebTestClient;\n\nimport java.time.Instant;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@WebFluxTest(controllers = {PositionController.class})\nclass PositionControllerTest {\n    @MockBean\n    private PositionRetriever retriever;\n\n    private Aircraft ac1, ac2;\n\n    @BeforeEach\n    void setUp(ApplicationContext context) {\n        // Spring Airlines flight 001 en route, flying STL to SFO,\n        //    at 30000' currently over Kansas City\n        ac1 = new Aircraft(1L, \"SAL001\", \"sqwk\", \"N12345\", \"SAL001\",\n                \"STL-SFO\", \"LJ\", \"ct\",\n                30000, 280, 440, 0, 0,\n                39.2979849, -94.71921, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        // Spring Airlines flight 002 en route, flying SFO to STL,\n        //    at 40000' currently over Denver\n        ac2 = new Aircraft(2L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n                \"SFO-STL\", \"LJ\", \"ct\",\n                40000, 65, 440, 0, 0,\n                39.8560963, -104.6759263, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        Mockito.when(retriever.retrieveAircraftPositions())\n            .thenReturn(List.of(ac1, ac2));\n    }\n\n    @Test\n    void getCurrentAircraftPositions(@Autowired WebTestClient client) {\n        final Iterable<Aircraft> acPositions = client.get()\n                .uri(\"/aircraft\")\n                .exchange()\n                .expectStatus().isOk()\n                .expectBodyList(Aircraft.class)\n                .returnResult()\n                .getResponseBody();\n\n        assertEquals(List.of(ac1, ac2), acPositions);\n    }\n}\n```", "```java\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\n\nclass AircraftRepositoryTest {\n\n    @BeforeEach\n    void setUp() {\n    }\n\n    @AfterEach\n    void tearDown() {\n    }\n}\n```", "```java\n@DataJpaTest\nclass AircraftRepositoryTest {\n\n    ...\n\n}\n```", "```java\n@Autowired\nprivate AircraftRepository repository;\n\nprivate Aircraft ac1, ac2;\n```", "```java\n@BeforeEach\nvoid setUp() {\n    // Spring Airlines flight 001 en route, flying STL to SFO,\n    // at 30000' currently over Kansas City\n    ac1 = new Aircraft(1L, \"SAL001\", \"sqwk\", \"N12345\", \"SAL001\",\n            \"STL-SFO\", \"LJ\", \"ct\",\n            30000, 280, 440, 0, 0,\n            39.2979849, -94.71921, 0D, 0D, 0D,\n            true, false,\n            Instant.now(), Instant.now(), Instant.now());\n\n    // Spring Airlines flight 002 en route, flying SFO to STL,\n    // at 40000' currently over Denver\n    ac2 = new Aircraft(2L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n            \"SFO-STL\", \"LJ\", \"ct\",\n            40000, 65, 440, 0, 0,\n            39.8560963, -104.6759263, 0D, 0D, 0D,\n            true, false,\n            Instant.now(), Instant.now(), Instant.now());\n\n    repository.saveAll(List.of(ac1, ac2));\n}\n```", "```java\n@Test\nvoid testFindAll() {\n    assertEquals(List.of(ac1, ac2), repository.findAll());\n}\n```", "```java\n@Test\nvoid testFindById() {\n    assertEquals(Optional.of(ac1), repository.findById(ac1.getId()));\n    assertEquals(Optional.of(ac2), repository.findById(ac2.getId()));\n}\n```", "```java\n@AfterEach\nvoid tearDown() {\n    repository.deleteAll();\n}\n```"]