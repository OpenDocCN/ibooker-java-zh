["```java\nhttp://localhost:7634/aircraft\n```", "```java\n[\n    {\n        \"id\": 108,\n        \"callsign\": \"AMF4263\",\n        \"squawk\": \"4136\",\n        \"reg\": \"N49UC\",\n        \"flightno\": \"\",\n        \"route\": \"LAN-DFW\",\n        \"type\": \"B190\",\n        \"category\": \"A1\",\n        \"altitude\": 20000,\n        \"heading\": 235,\n        \"speed\": 248,\n        \"lat\": 38.865905,\n        \"lon\": -90.429382,\n        \"barometer\": 0,\n        \"vert_rate\": 0,\n        \"selected_altitude\": 0,\n        \"polar_distance\": 12.99378,\n        \"polar_bearing\": 345.393951,\n        \"is_adsb\": true,\n        \"is_on_ground\": false,\n        \"last_seen_time\": \"2020-11-11T21:44:04Z\",\n        \"pos_update_time\": \"2020-11-11T21:44:03Z\",\n        \"bds40_seen_time\": null\n    },\n    {<another aircraft in range, same fields as above>},\n    {<final aircraft currently in range, same fields as above>}\n]\n```", "```java\npackage com.thehecklers.sburredis;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\n\nimport java.time.Instant;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Aircraft {\n    @Id\n    private Long id;\n    private String callsign, squawk, reg, flightno, route, type, category;\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n\n    public String getLastSeenTime() {\n        return lastSeenTime.toString();\n    }\n\n    public void setLastSeenTime(String lastSeenTime) {\n        if (null != lastSeenTime) {\n            this.lastSeenTime = Instant.parse(lastSeenTime);\n        } else {\n            this.lastSeenTime = Instant.ofEpochSecond(0);\n        }\n    }\n\n    public String getPosUpdateTime() {\n        return posUpdateTime.toString();\n    }\n\n    public void setPosUpdateTime(String posUpdateTime) {\n        if (null != posUpdateTime) {\n            this.posUpdateTime = Instant.parse(posUpdateTime);\n        } else {\n            this.posUpdateTime = Instant.ofEpochSecond(0);\n        }\n    }\n\n    public String getBds40SeenTime() {\n        return bds40SeenTime.toString();\n    }\n\n    public void setBds40SeenTime(String bds40SeenTime) {\n        if (null != bds40SeenTime) {\n            this.bds40SeenTime = Instant.parse(bds40SeenTime);\n        } else {\n            this.bds40SeenTime = Instant.ofEpochSecond(0);\n        }\n    }\n}\n```", "```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@SpringBootApplication\npublic class SburRedisApplication {\n    @Bean\n    public RedisOperations<String, Aircraft>\n    redisOperations(RedisConnectionFactory factory) {\n        Jackson2JsonRedisSerializer<Aircraft> serializer =\n                new Jackson2JsonRedisSerializer<>(Aircraft.class);\n\n        RedisTemplate<String, Aircraft> template = new RedisTemplate<>();\n        template.setConnectionFactory(factory);\n        template.setDefaultSerializer(serializer);\n        template.setKeySerializer(new StringRedisSerializer());\n\n        return template;\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(SburRedisApplication.class, args);\n    }\n}\n```", "```java\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@EnableScheduling\n@Component\nclass PlaneFinderPoller {\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    private final RedisConnectionFactory connectionFactory;\n    private final RedisOperations<String, Aircraft> redisOperations;\n\n    PlaneFinderPoller(RedisConnectionFactory connectionFactory,\n                    RedisOperations<String, Aircraft> redisOperations) {\n        this.connectionFactory = connectionFactory;\n        this.redisOperations = redisOperations;\n    }\n}\n```", "```java\n@Scheduled(fixedRate = 1000)\nprivate void pollPlanes() {\n    connectionFactory.getConnection().serverCommands().flushDb();\n\n    client.get()\n            .retrieve()\n            .bodyToFlux(Aircraft.class)\n            .filter(plane -> !plane.getReg().isEmpty())\n            .toStream()\n            .forEach(ac -> redisOperations.opsForValue().set(ac.getReg(), ac));\n\n    redisOperations.opsForValue()\n            .getOperations()\n            .keys(\"*\")\n            .forEach(ac ->\n                System.out.println(redisOperations.opsForValue().get(ac)));\n}\n```", "```java\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@EnableScheduling\n@Component\nclass PlaneFinderPoller {\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    private final RedisConnectionFactory connectionFactory;\n    private final RedisOperations<String, Aircraft> redisOperations;\n\n    PlaneFinderPoller(RedisConnectionFactory connectionFactory,\n                    RedisOperations<String, Aircraft> redisOperations) {\n        this.connectionFactory = connectionFactory;\n        this.redisOperations = redisOperations;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    private void pollPlanes() {\n        connectionFactory.getConnection().serverCommands().flushDb();\n\n        client.get()\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(plane -> !plane.getReg().isEmpty())\n                .toStream()\n                .forEach(ac ->\n                    redisOperations.opsForValue().set(ac.getReg(), ac));\n\n        redisOperations.opsForValue()\n                .getOperations()\n                .keys(\"*\")\n                .forEach(ac ->\n                    System.out.println(redisOperations.opsForValue().get(ac)));\n    }\n}\n```", "```java\nAircraft(id=1, callsign=EDV5015, squawk=3656, reg=N324PQ, flightno=DL5015,\nroute=ATL-OMA-ATL, type=CRJ9, category=A3, altitude=35000, heading=168,\nspeed=485, vertRate=-64, selectedAltitude=0, lat=38.061808, lon=-90.280629,\nbarometer=0.0, polarDistance=53.679699, polarBearing=184.333345, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T18:34:14Z,\nposUpdateTime=2020-11-27T18:34:11Z, bds40SeenTime=1970-01-01T00:00:00Z)\n\nAircraft(id=4, callsign=AAL500, squawk=2666, reg=N839AW, flightno=AA500,\nroute=PHX-IND, type=A319, category=A3, altitude=36975, heading=82, speed=477,\nvertRate=0, selectedAltitude=36992, lat=38.746399, lon=-90.277644,\nbarometer=1012.8, polarDistance=13.281347, polarBearing=200.308663, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T18:34:50Z,\nposUpdateTime=2020-11-27T18:34:50Z, bds40SeenTime=2020-11-27T18:34:50Z)\n\nAircraft(id=15, callsign=null, squawk=4166, reg=N404AN, flightno=AA685,\nroute=PHX-DCA, type=A21N, category=A3, altitude=39000, heading=86, speed=495,\nvertRate=0, selectedAltitude=39008, lat=39.701611, lon=-90.479309,\nbarometer=1013.6, polarDistance=47.113195, polarBearing=341.51817, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T18:34:50Z,\nposUpdateTime=2020-11-27T18:34:50Z, bds40SeenTime=2020-11-27T18:34:50Z)\n```", "```java\npublic interface AircraftRepository extends CrudRepository<Aircraft, Long> {}\n```", "```java\nprivate final RedisOperations<String, Aircraft> redisOperations;\n```", "```java\nprivate final AircraftRepository repository;\n```", "```java\npublic PlaneFinderPoller(RedisConnectionFactory connectionFactory,\n                    AircraftRepository repository) {\n    this.connectionFactory = connectionFactory;\n    this.repository = repository;\n}\n```", "```java\nclient.get()\n        .retrieve()\n        .bodyToFlux(Aircraft.class)\n        .filter(plane -> !plane.getReg().isEmpty())\n        .toStream()\n        .forEach(repository::save);\n```", "```java\nrepository.findAll().forEach(System.out::println);\n```", "```java\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@EnableScheduling\n@Component\nclass PlaneFinderPoller {\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    private final RedisConnectionFactory connectionFactory;\n    private final AircraftRepository repository;\n\n    PlaneFinderPoller(RedisConnectionFactory connectionFactory,\n                      AircraftRepository repository) {\n        this.connectionFactory = connectionFactory;\n        this.repository = repository;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    private void pollPlanes() {\n        connectionFactory.getConnection().serverCommands().flushDb();\n\n        client.get()\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(plane -> !plane.getReg().isEmpty())\n                .toStream()\n                .forEach(repository::save);\n\n        repository.findAll().forEach(System.out::println);\n    }\n}\n```", "```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SburRedisApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SburRedisApplication.class, args);\n    }\n\n}\n```", "```java\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.redis.core.RedisHash;\n\nimport java.time.Instant;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@RedisHash\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Aircraft {\n    @Id\n    private Long id;\n    private String callsign, squawk, reg, flightno, route, type, category;\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n}\n```", "```java\nAircraft(id=59, callsign=KAP20, squawk=4615, reg=N678JG, flightno=,\nroute=STL-IRK, type=C402, category=A1, altitude=3825, heading=0, speed=143,\nvertRate=768, selectedAltitude=0, lat=38.881034, lon=-90.261475, barometer=0.0,\npolarDistance=5.915421, polarBearing=222.434158, isADSB=true, isOnGround=false,\nlastSeenTime=2020-11-27T18:47:31Z, posUpdateTime=2020-11-27T18:47:31Z,\nbds40SeenTime=1970-01-01T00:00:00Z)\n\nAircraft(id=60, callsign=SWA442, squawk=5657, reg=N928WN, flightno=WN442,\nroute=CMH-DCA-BNA-STL-PHX-BUR-OAK, type=B737, category=A3, altitude=8250,\nheading=322, speed=266, vertRate=-1344, selectedAltitude=0, lat=38.604034,\nlon=-90.357593, barometer=0.0, polarDistance=22.602864, polarBearing=201.283,\nisADSB=true, isOnGround=false, lastSeenTime=2020-11-27T18:47:25Z,\nposUpdateTime=2020-11-27T18:47:24Z, bds40SeenTime=1970-01-01T00:00:00Z)\n\nAircraft(id=61, callsign=null, squawk=null, reg=N702QS, flightno=,\nroute=SNA-RIC, type=CL35, category=, altitude=43000, heading=90, speed=500,\nvertRate=0, selectedAltitude=0, lat=39.587997, lon=-90.921299, barometer=0.0,\npolarDistance=51.544552, polarBearing=316.694343, isADSB=true, isOnGround=false,\nlastSeenTime=2020-11-27T18:47:19Z, posUpdateTime=2020-11-27T18:47:19Z,\nbds40SeenTime=1970-01-01T00:00:00Z)\n```", "```java\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport java.time.Instant;\n\n@Entity\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Aircraft {\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String callsign, squawk, reg, flightno, route, type, category;\n\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n}\n```", "```java\npublic interface AircraftRepository extends CrudRepository<Aircraft, Long> {}\n```", "```java\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@EnableScheduling\n@Component\n@RequiredArgsConstructor\nclass PlaneFinderPoller {\n    @NonNull\n    private final AircraftRepository repository;\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    @Scheduled(fixedRate = 1000)\n    private void pollPlanes() {\n        repository.deleteAll();\n\n        client.get()\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(plane -> !plane.getReg().isEmpty())\n                .toStream()\n                .forEach(repository::save);\n\n        repository.findAll().forEach(System.out::println);\n    }\n}\n```", "```java\nspring.datasource.platform=mysql\nspring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/mark\nspring.datasource.username=mark\nspring.datasource.password=sbux\n```", "```java\nAircraft(id=106, callsign=null, squawk=null, reg=N7816B, flightno=WN2117,\nroute=SJC-STL-BWI-FLL, type=B737, category=, altitude=4400, heading=87,\nspeed=233, vertRate=2048, selectedAltitude=15008, lat=0.0, lon=0.0,\nbarometer=1017.6, polarDistance=0.0, polarBearing=0.0, isADSB=false,\nisOnGround=false, lastSeenTime=2020-11-27T18:59:10Z,\nposUpdateTime=2020-11-27T18:59:17Z, bds40SeenTime=2020-11-27T18:59:10Z)\n\nAircraft(id=107, callsign=null, squawk=null, reg=N963WN, flightno=WN851,\nroute=LAS-DAL-STL-CMH, type=B737, category=, altitude=27200, heading=80,\nspeed=429, vertRate=2112, selectedAltitude=0, lat=0.0, lon=0.0, barometer=0.0,\npolarDistance=0.0, polarBearing=0.0, isADSB=false, isOnGround=false,\nlastSeenTime=2020-11-27T18:58:45Z, posUpdateTime=2020-11-27T18:59:17Z,\nbds40SeenTime=2020-11-27T18:59:17Z)\n\nAircraft(id=108, callsign=null, squawk=null, reg=N8563Z, flightno=WN1386,\nroute=DEN-IAD, type=B738, category=, altitude=39000, heading=94, speed=500,\nvertRate=0, selectedAltitude=39008, lat=0.0, lon=0.0, barometer=1013.6,\npolarDistance=0.0, polarBearing=0.0, isADSB=false, isOnGround=false,\nlastSeenTime=2020-11-27T18:59:10Z, posUpdateTime=2020-11-27T18:59:17Z,\nbds40SeenTime=2020-11-27T18:59:10Z)\n```", "```java\nDROP TABLE IF EXISTS aircraft;\nCREATE TABLE aircraft (id BIGINT not null primary key, callsign VARCHAR(7),\nsquawk VARCHAR(4), reg VARCHAR(6), flightno VARCHAR(10), route VARCHAR(25),\ntype VARCHAR(4), category VARCHAR(2),\naltitude INT, heading INT, speed INT, vert_rate INT, selected_altitude INT,\nlat DOUBLE, lon DOUBLE, barometer DOUBLE,\npolar_distance DOUBLE, polar_bearing DOUBLE,\nisadsb BOOLEAN, is_on_ground BOOLEAN,\nlast_seen_time TIMESTAMP, pos_update_time TIMESTAMP, bds40seen_time TIMESTAMP);\n```", "```java\nINSERT INTO aircraft (id, callsign, squawk, reg, flightno, route, type,\ncategory, altitude, heading, speed, vert_rate, selected_altitude, lat, lon,\nbarometer, polar_distance, polar_bearing, isadsb, is_on_ground,\nlast_seen_time, pos_update_time, bds40seen_time)\nVALUES (81, 'AAL608', '1451', 'N754UW', 'AA608', 'IND-PHX', 'A319', 'A3', 36000,\n255, 423, 0, 36000, 39.150284, -90.684795, 1012.8, 26.575562, 295.501994,\ntrue, false, '2020-11-27 21:29:35', '2020-11-27 21:29:34',\n'2020-11-27 21:29:27');\n```", "```java\nspring.datasource.initialization-mode=always\nspring.jpa.hibernate.ddl-auto=none\n```", "```java\nAircraft(id=81, callsign=AAL608, squawk=1451, reg=N754UW, flightno=AA608,\nroute=IND-PHX, type=A319, category=A3, altitude=36000, heading=255, speed=423,\nvertRate=0, selectedAltitude=36000, lat=39.150284, lon=-90.684795,\nbarometer=1012.8, polarDistance=26.575562, polarBearing=295.501994, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T21:29:35Z,\nposUpdateTime=2020-11-27T21:29:34Z, bds40SeenTime=2020-11-27T21:29:27Z)\n```", "```java\n#spring.datasource.initialization-mode=always\n#spring.jpa.hibernate.ddl-auto=none\n```", "```java\nprivate final AircraftRepository repository;\n```", "```java\n@PostConstruct\nprivate void loadData() {\n    repository.deleteAll();\n\n    repository.save(new Aircraft(81L,\n            \"AAL608\", \"1451\", \"N754UW\", \"AA608\", \"IND-PHX\", \"A319\", \"A3\",\n            36000, 255, 423, 0, 36000,\n            39.150284, -90.684795, 1012.8, 26.575562, 295.501994,\n            true, false,\n            Instant.parse(\"2020-11-27T21:29:35Z\"),\n            Instant.parse(\"2020-11-27T21:29:34Z\"),\n            Instant.parse(\"2020-11-27T21:29:27Z\")));\n}\n```", "```java\nAircraft(id=110, callsign=AAL608, squawk=1451, reg=N754UW, flightno=AA608,\nroute=IND-PHX, type=A319, category=A3, altitude=36000, heading=255, speed=423,\nvertRate=0, selectedAltitude=36000, lat=39.150284, lon=-90.684795,\nbarometer=1012.8, polarDistance=26.575562, polarBearing=295.501994, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T21:29:35Z,\nposUpdateTime=2020-11-27T21:29:34Z, bds40SeenTime=2020-11-27T21:29:27Z)\n```", "```java\ntestImplementation(\"de.flapdoodle.embed:de.flapdoodle.embed.mongo\")\n```", "```java\nimplementation(\"de.flapdoodle.embed:de.flapdoodle.embed.mongo\")\n```", "```java\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties\nimport com.fasterxml.jackson.annotation.JsonProperty\nimport org.springframework.data.annotation.Id\nimport org.springframework.data.mongodb.core.mapping.Document\nimport java.time.Instant\n\n@Document\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class Aircraft(\n    @Id val id: String,\n    val callsign: String? = \"\",\n    val squawk: String? = \"\",\n    val reg: String? = \"\",\n    val flightno: String? = \"\",\n    val route: String? = \"\",\n    val type: String? = \"\",\n    val category: String? = \"\",\n    val altitude: Int? = 0,\n    val heading: Int? = 0,\n    val speed: Int? = 0,\n    @JsonProperty(\"vert_rate\") val vertRate: Int? = 0,\n    @JsonProperty(\"selected_altitude\")\n    val selectedAltitude: Int? = 0,\n    val lat: Double? = 0.0,\n    val lon: Double? = 0.0,\n    val barometer: Double? = 0.0,\n    @JsonProperty(\"polar_distance\")\n    val polarDistance: Double? = 0.0,\n    @JsonProperty(\"polar_bearing\")\n    val polarBearing: Double? = 0.0,\n    @JsonProperty(\"is_adsb\")\n    val isADSB: Boolean? = false,\n    @JsonProperty(\"is_on_ground\")\n    val isOnGround: Boolean? = false,\n    @JsonProperty(\"last_seen_time\")\n    val lastSeenTime: Instant? = Instant.ofEpochSecond(0),\n    @JsonProperty(\"pos_update_time\")\n    val posUpdateTime: Instant? = Instant.ofEpochSecond(0),\n    @JsonProperty(\"bds40_seen_time\")\n    val bds40SeenTime: Instant? = Instant.ofEpochSecond(0)\n)\n```", "```java\nclass Aircraft constructor(<parameter1>,<parameter2>,...,<parametern>)\n```", "```java\ninterface AircraftRepository: CrudRepository<Aircraft, String>\n```", "```java\nimport org.springframework.scheduling.annotation.EnableScheduling\nimport org.springframework.scheduling.annotation.Scheduled\nimport org.springframework.stereotype.Component\nimport org.springframework.web.reactive.function.client.WebClient\nimport org.springframework.web.reactive.function.client.bodyToFlux\n\n@Component\n@EnableScheduling\nclass PlaneFinderPoller(private val repository: AircraftRepository) {\n    private val client =\n        WebClient.create(\"http://localhost:7634/aircraft\")\n\n    @Scheduled(fixedRate = 1000)\n    private fun pollPlanes() {\n        repository.deleteAll()\n\n        client.get()\n            .retrieve()\n            .bodyToFlux<Aircraft>()\n            .filter { !it.reg.isNullOrEmpty() }\n            .toStream()\n            .forEach { repository.save(it) }\n\n        println(\"--- All aircraft ---\")\n        repository.findAll().forEach { println(it) }\n    }\n}\n```", "```java\nforEach { repository.save(it) }\n```", "```java\nAircraft(id=95, callsign=N88846, squawk=4710, reg=N88846, flightno=, route=,\ntype=P46T, category=A1, altitude=18000, heading=234, speed=238, vertRate=-64,\nselectedAltitude=0, lat=39.157288, lon=-90.844992, barometer=0.0,\npolarDistance=33.5716, polarBearing=290.454061, isADSB=true, isOnGround=false,\nlastSeenTime=2020-11-27T20:16:57Z, posUpdateTime=2020-11-27T20:16:57Z,\nbds40SeenTime=1970-01-01T00:00:00Z)\n\nAircraft(id=96, callsign=MVJ710, squawk=1750, reg=N710MV, flightno=,\nroute=IAD-TEX, type=GLF4, category=A2, altitude=18050, heading=66, speed=362,\nvertRate=2432, selectedAltitude=23008, lat=38.627655, lon=-90.008897,\nbarometer=0.0, polarDistance=20.976944, polarBearing=158.35465, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T20:16:57Z,\nposUpdateTime=2020-11-27T20:16:57Z, bds40SeenTime=2020-11-27T20:16:56Z)\n\nAircraft(id=97, callsign=SWA1121, squawk=6225, reg=N8654B, flightno=WN1121,\nroute=MDW-DAL-PHX, type=B738, category=A3, altitude=40000, heading=236,\nspeed=398, vertRate=0, selectedAltitude=40000, lat=39.58548, lon=-90.049259,\nbarometer=1013.6, polarDistance=38.411587, polarBearing=8.70042, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T20:16:57Z,\nposUpdateTime=2020-11-27T20:16:55Z, bds40SeenTime=2020-11-27T20:16:54Z)\n```", "```java\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.data.neo4j.core.schema.GeneratedValue;\nimport org.springframework.data.neo4j.core.schema.Id;\nimport org.springframework.data.neo4j.core.schema.Node;\n\n@Node\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Aircraft {\n    @Id\n    @GeneratedValue\n    private Long neoId;\n\n    private Long id;\n    private String callsign, squawk, reg, flightno, route, type, category;\n\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n\n    public Aircraft() {\n    }\n\n    public Aircraft(Long id,\n                    String callsign, String squawk, String reg, String flightno,\n                    String route, String type, String category,\n                    int altitude, int heading, int speed,\n                    int vertRate, int selectedAltitude,\n                    double lat, double lon, double barometer,\n                    double polarDistance, double polarBearing,\n                    boolean isADSB, boolean isOnGround,\n                    Instant lastSeenTime,\n                    Instant posUpdateTime,\n                    Instant bds40SeenTime) {\n        this.id = id;\n        this.callsign = callsign;\n        this.squawk = squawk;\n        this.reg = reg;\n        this.flightno = flightno;\n        this.route = route;\n        this.type = type;\n        this.category = category;\n        this.altitude = altitude;\n        this.heading = heading;\n        this.speed = speed;\n        this.vertRate = vertRate;\n        this.selectedAltitude = selectedAltitude;\n        this.lat = lat;\n        this.lon = lon;\n        this.barometer = barometer;\n        this.polarDistance = polarDistance;\n        this.polarBearing = polarBearing;\n        this.isADSB = isADSB;\n        this.isOnGround = isOnGround;\n        this.lastSeenTime = lastSeenTime;\n        this.posUpdateTime = posUpdateTime;\n        this.bds40SeenTime = bds40SeenTime;\n    }\n\n    public Long getNeoId() {\n        return neoId;\n    }\n\n    public void setNeoId(Long neoId) {\n        this.neoId = neoId;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getCallsign() {\n        return callsign;\n    }\n\n    public void setCallsign(String callsign) {\n        this.callsign = callsign;\n    }\n\n    public String getSquawk() {\n        return squawk;\n    }\n\n    public void setSquawk(String squawk) {\n        this.squawk = squawk;\n    }\n\n    public String getReg() {\n        return reg;\n    }\n\n    public void setReg(String reg) {\n        this.reg = reg;\n    }\n\n    public String getFlightno() {\n        return flightno;\n    }\n\n    public void setFlightno(String flightno) {\n        this.flightno = flightno;\n    }\n\n    public String getRoute() {\n        return route;\n    }\n\n    public void setRoute(String route) {\n        this.route = route;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    public void setCategory(String category) {\n        this.category = category;\n    }\n\n    public int getAltitude() {\n        return altitude;\n    }\n\n    public void setAltitude(int altitude) {\n        this.altitude = altitude;\n    }\n\n    public int getHeading() {\n        return heading;\n    }\n\n    public void setHeading(int heading) {\n        this.heading = heading;\n    }\n\n    public int getSpeed() {\n        return speed;\n    }\n\n    public void setSpeed(int speed) {\n        this.speed = speed;\n    }\n\n    public int getVertRate() {\n        return vertRate;\n    }\n\n    public void setVertRate(int vertRate) {\n        this.vertRate = vertRate;\n    }\n\n    public int getSelectedAltitude() {\n        return selectedAltitude;\n    }\n\n    public void setSelectedAltitude(int selectedAltitude) {\n        this.selectedAltitude = selectedAltitude;\n    }\n\n    public double getLat() {\n        return lat;\n    }\n\n    public void setLat(double lat) {\n        this.lat = lat;\n    }\n\n    public double getLon() {\n        return lon;\n    }\n\n    public void setLon(double lon) {\n        this.lon = lon;\n    }\n\n    public double getBarometer() {\n        return barometer;\n    }\n\n    public void setBarometer(double barometer) {\n        this.barometer = barometer;\n    }\n\n    public double getPolarDistance() {\n        return polarDistance;\n    }\n\n    public void setPolarDistance(double polarDistance) {\n        this.polarDistance = polarDistance;\n    }\n\n    public double getPolarBearing() {\n        return polarBearing;\n    }\n\n    public void setPolarBearing(double polarBearing) {\n        this.polarBearing = polarBearing;\n    }\n\n    public boolean isADSB() {\n        return isADSB;\n    }\n\n    public void setADSB(boolean ADSB) {\n        isADSB = ADSB;\n    }\n\n    public boolean isOnGround() {\n        return isOnGround;\n    }\n\n    public void setOnGround(boolean onGround) {\n        isOnGround = onGround;\n    }\n\n    public Instant getLastSeenTime() {\n        return lastSeenTime;\n    }\n\n    public void setLastSeenTime(Instant lastSeenTime) {\n        this.lastSeenTime = lastSeenTime;\n    }\n\n    public Instant getPosUpdateTime() {\n        return posUpdateTime;\n    }\n\n    public void setPosUpdateTime(Instant posUpdateTime) {\n        this.posUpdateTime = posUpdateTime;\n    }\n\n    public Instant getBds40SeenTime() {\n        return bds40SeenTime;\n    }\n\n    public void setBds40SeenTime(Instant bds40SeenTime) {\n        this.bds40SeenTime = bds40SeenTime;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Aircraft aircraft = (Aircraft) o;\n        return altitude == aircraft.altitude &&\n                heading == aircraft.heading &&\n                speed == aircraft.speed &&\n                vertRate == aircraft.vertRate &&\n                selectedAltitude == aircraft.selectedAltitude &&\n                Double.compare(aircraft.lat, lat) == 0 &&\n                Double.compare(aircraft.lon, lon) == 0 &&\n                Double.compare(aircraft.barometer, barometer) == 0 &&\n                Double.compare(aircraft.polarDistance, polarDistance) == 0 &&\n                Double.compare(aircraft.polarBearing, polarBearing) == 0 &&\n                isADSB == aircraft.isADSB &&\n                isOnGround == aircraft.isOnGround &&\n                Objects.equals(neoId, aircraft.neoId) &&\n                Objects.equals(id, aircraft.id) &&\n                Objects.equals(callsign, aircraft.callsign) &&\n                Objects.equals(squawk, aircraft.squawk) &&\n                Objects.equals(reg, aircraft.reg) &&\n                Objects.equals(flightno, aircraft.flightno) &&\n                Objects.equals(route, aircraft.route) &&\n                Objects.equals(type, aircraft.type) &&\n                Objects.equals(category, aircraft.category) &&\n                Objects.equals(lastSeenTime, aircraft.lastSeenTime) &&\n                Objects.equals(posUpdateTime, aircraft.posUpdateTime) &&\n                Objects.equals(bds40SeenTime, aircraft.bds40SeenTime);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(neoId, id, callsign, squawk, reg, flightno, route,\n                type, category, altitude, heading, speed, vertRate,\n                selectedAltitude,  lat, lon, barometer, polarDistance,\n                polarBearing, isADSB, isOnGround, lastSeenTime, posUpdateTime,\n                bds40SeenTime);\n    }\n\n    @Override\n    public String toString() {\n        return \"Aircraft{\" +\n                \"neoId=\" + neoId +\n                \", id=\" + id +\n                \", callsign='\" + callsign + '\\'' +\n                \", squawk='\" + squawk + '\\'' +\n                \", reg='\" + reg + '\\'' +\n                \", flightno='\" + flightno + '\\'' +\n                \", route='\" + route + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", category='\" + category + '\\'' +\n                \", altitude=\" + altitude +\n                \", heading=\" + heading +\n                \", speed=\" + speed +\n                \", vertRate=\" + vertRate +\n                \", selectedAltitude=\" + selectedAltitude +\n                \", lat=\" + lat +\n                \", lon=\" + lon +\n                \", barometer=\" + barometer +\n                \", polarDistance=\" + polarDistance +\n                \", polarBearing=\" + polarBearing +\n                \", isADSB=\" + isADSB +\n                \", isOnGround=\" + isOnGround +\n                \", lastSeenTime=\" + lastSeenTime +\n                \", posUpdateTime=\" + posUpdateTime +\n                \", bds40SeenTime=\" + bds40SeenTime +\n                '}';\n    }\n}\n```", "```java\npublic interface AircraftRepository extends CrudRepository<Aircraft, Long> {}\n```", "```java\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@EnableScheduling\n@Component\npublic class PlaneFinderPoller {\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n    private final AircraftRepository repository;\n\n    public PlaneFinderPoller(AircraftRepository repository) {\n        this.repository = repository;\n    }\n\n    @Scheduled(fixedRate = 1000)\n    private void pollPlanes() {\n        repository.deleteAll();\n\n        client.get()\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(plane -> !plane.getReg().isEmpty())\n                .toStream()\n                .forEach(repository::save);\n\n        System.out.println(\"--- All aircraft ---\");\n        repository.findAll().forEach(System.out::println);\n    }\n}\n```", "```java\nspring.neo4j.authentication.username=neo4j\nspring.neo4j.authentication.password=mkheck\n```", "```java\nAircraft(neoId=64, id=223, callsign='GJS4401', squawk='1355', reg='N542GJ',\nflightno='UA4401', route='LIT-ORD', type='CRJ7', category='A2', altitude=37000,\nheading=24, speed=476, vertRate=128, selectedAltitude=36992, lat=39.463961,\nlon=-90.549927, barometer=1012.8, polarDistance=35.299257,\npolarBearing=329.354686, isADSB=true, isOnGround=false,\nlastSeenTime=2020-11-27T20:42:54Z, posUpdateTime=2020-11-27T20:42:53Z,\nbds40SeenTime=2020-11-27T20:42:51Z)\n\nAircraft(neoId=65, id=224, callsign='N8680B', squawk='1200', reg='N8680B',\nflightno='', route='', type='C172', category='A1', altitude=3100, heading=114,\nspeed=97, vertRate=64, selectedAltitude=0, lat=38.923955, lon=-90.195618,\nbarometer=0.0, polarDistance=1.986086, polarBearing=208.977102, isADSB=true,\nisOnGround=false, lastSeenTime=2020-11-27T20:42:54Z,\nposUpdateTime=2020-11-27T20:42:54Z, bds40SeenTime=null)\n\nAircraft(neoId=66, id=225, callsign='AAL1087', squawk='1712', reg='N181UW',\nflightno='AA1087', route='CLT-STL-CLT', type='A321', category='A3',\naltitude=7850, heading=278, speed=278, vertRate=-320, selectedAltitude=4992,\nlat=38.801559, lon=-90.226474, barometer=0.0, polarDistance=9.385111,\npolarBearing=194.034005, isADSB=true, isOnGround=false,\nlastSeenTime=2020-11-27T20:42:54Z, posUpdateTime=2020-11-27T20:42:53Z,\nbds40SeenTime=2020-11-27T20:42:53Z)\n```"]