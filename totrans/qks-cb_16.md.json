["```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-resteasy-qute\"\n```", "```java\nHello {name}!\n```", "```java\n@Inject\nio.quarkus.qute.Template hello; ![1](Images/1.png) ![2](Images/2.png)\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic TemplateInstance hello() { ![3](Images/3.png)\n    final String name = \"Alex\";\n    return hello.data(\"name\", name); ![4](Images/4.png)\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl http://localhost:8080/hello\n\nHello Alex!\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport io.quarkus.qute.TemplateData;\n\n@TemplateData ![1](Images/1.png)\npublic class Movie {\n\n    public String name;\n    public int year;\n    public String genre;\n    public String director;\n    public List<String> characters = new ArrayList<>();\n    public float ratings;\n\n    public int getStars() { ![2](Images/2.png)\n        return Math.round(ratings);\n    }\n}\n```", "```java\n{@org.acme.quickstart.Movie movie} ![1](Images/1.png)\n<!DOCTYPE html>\n<html>\n```", "```java\n<div class=\"col-sm-12\">\n    <dl> {#if movie.year == 0} ![1](Images/1.png)\n            <dt>Year:</dt> Not Known\n        {#else} ![2](Images/2.png)\n            <dt>Year:</dt> {movie.year}\n        {/if}\n        {#if movie.genre is 'horror'} ![3](Images/3.png)\n        <dt>Genre:</dt> Buuuh\n        {#else} <dt>Genre:</dt> {movie.genre}\n        {/if} <dt>Director:</dt> {movie.director ?: 'Unknown'} ![4](Images/4.png)\n        <dt>Main Characters:</dt> {#for character in movie.characters} ![5](Images/5.png) {character} ![6](Images/6.png) {#if hasNext} ![7](Images/7.png) -\n            {/if}\n        {/for} <dt>Rating:</dt>\n        <font color=\"red\"> {#for i in movie.stars} ![8](Images/8.png)\n            <span class=\"fas fa-xs fa-star\"></span> {/for} </font>\n    </dl>\n</div>\n```", "```java\n@ResourcePath(\"movies/detail.html\") ![1](Images/1.png)\nTemplate movies;\n```", "```java\n@TemplateExtension\nstatic double roundStars(Movie movie, int decimals) { ![1](Images/1.png) ![2](Images/2.png)\n    double scale = Math.pow(10, decimals);\n    return Math.round(movie.ratings * scale) / scale;\n}\n```", "```java\n({movie.roundStars(2)}) ![1](Images/1.png)\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"openapi\"\n```", "```java\n./mvnw compile quarkus:dev\n```", "```java\nquarkus.smallrye-openapi.path=/rest-api\n```", "```java\nopenapi: 3.0.1\ninfo:\n  title: Generated API\n  version: \"1.0\"\npaths:\n  /task:\n    get:\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\n    delete:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\ncomponents:\n  schemas:\n    Task:\n      type: object\n      properties:\n        complete:\n          type: boolean\n        description:\n          type: string\n        reminder:\n          format: date-time\n          type: string\n    SetTask:\n      type: array\n      items:\n        type: object\n        properties:\n          complete:\n            type: boolean\n          description:\n            type: string\n          reminder:\n            format: date-time\n            type: string\n```", "```java\npackage org.acme.openapi;\n\nimport java.time.LocalDateTime;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Set;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.eclipse.microprofile.openapi.annotations.Operation;\nimport org.eclipse.microprofile.openapi.annotations.media.Content;\nimport org.eclipse.microprofile.openapi.annotations.media.Schema;\nimport org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n\n  @Path(\"/task\")\n  @Produces(MediaType.APPLICATION_JSON)\n  @Consumes(MediaType.APPLICATION_JSON)\n  public class TaskResource {\n\n    Set<Task> tasks = Collections.newSetFromMap(\n        Collections.synchronizedMap(new LinkedHashMap<>()));\n\n    public TaskResource() {\n      tasks.add(new Task(\"First task\",\n            LocalDateTime.now().plusDays(3), false));\n      tasks.add(new Task(\"Second task\",\n            LocalDateTime.now().plusDays(6), false));\n    }\n\n    @GET\n    @Operation(summary = \"Get all tasks\",\n               description = \"Get the full list of tasks.\")\n    public Set<Task> list() {\n      return tasks;\n    }\n\n    @POST\n    @Operation(summary = \"Create a new task\")\n    public Set<Task> add(\n        @Parameter(required = true, content =\n          @Content(schema = @Schema(implementation = Task.class))) Task task) {\n      tasks.add(task);\n      return tasks;\n    }\n\n    @DELETE\n    @Operation(summary = \"Remove the specified task\")\n    public Set<Task> delete(\n        @Parameter(required = true,\n        content = @Content(schema = @Schema(implementation = Task.class)))\n        Task task) {\n      tasks.removeIf(existingTask -> existingTask.equals(task));\n      return tasks;\n    }\n  }\n```", "```java\npackage org.acme.openapi;\n\nimport java.time.LocalDateTime;\nimport java.util.Objects;\n\nimport javax.json.bind.annotation.JsonbDateFormat;\n\nimport org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\nimport org.eclipse.microprofile.openapi.annotations.media.Schema;\n\npublic class Task {\n    public String description;\n\n    @Schema(description = \"Flag indicating the task is complete\")\n    public Boolean complete;\n\n    @JsonbDateFormat(\"yyyy-MM-dd'T'HH:mm\")\n    @Schema(example = \"2019-12-25T06:30\", type = SchemaType.STRING,\n            implementation = LocalDateTime.class,\n            pattern = \"yyyy-MM-dd'T'HH:mm\",\n            description = \"Date and time for the reminder.\")\n    public LocalDateTime reminder;\n\n    public Task() {\n    }\n\n    public Task(String description,\n                LocalDateTime reminder,\n                Boolean complete) {\n        this.description = description;\n        this.reminder = reminder;\n        this.complete = complete;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Task task = (Task) o;\n        return Objects.equals(description, task.description) &&\n                Objects.equals(reminder, task.reminder) &&\n                Objects.equals(complete, task.complete);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(description, reminder, complete);\n    }\n}\n```", "```java\n---\nopenapi: 3.0.1\ninfo:\n  title: Generated API\n  version: \"1.0\"\npaths:\n  /task:\n    get:\n      summary: Get all tasks\n      description: Get the full list of tasks.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\n    post:\n      summary: Create a new task\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\n    delete:\n      summary: Remove the specified task\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SetTask'\ncomponents:\n  schemas:\n    Task:\n      type: object\n      properties:\n        complete:\n          description: Flag indicating the task is complete\n          type: boolean\n        description:\n          type: string\n        reminder:\n          format: date-time\n          description: Date and time for the reminder.\n          pattern: yyyy-MM-dd'T'HH:mm\n          type: string\n          example: 2019-12-25T06:30\n    SetTask:\n      type: array\n      items:\n        type: object\n        properties:\n          complete:\n            description: Flag indicating the task is complete\n            type: boolean\n          description:\n            type: string\n          reminder:\n            format: date-time\n            description: Date and time for the reminder.\n            pattern: yyyy-MM-dd'T'HH:mm\n            type: string\n            example: 2019-12-25T06:30\n```", "```java\nmvn quarkus:add-extensions -Dextensions=\"mailer\"\n```", "```java\n@Inject\nMailer mailer;\n\n@Inject\nReactiveMailer reactiveMailer;\n```", "```java\nquarkus.mailer.from=quarkus-test@gmail.com\nquarkus.mailer.host=smtp.gmail.com\nquarkus.mailer.port=587\nquarkus.mailer.start-tls=REQUIRED\n\n![1](Images/1.png)\nquarkus.mailer.username=YOUREMAIL@gmail.com\nquarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n```", "```java\npackage org.acme.email;\n\nimport java.util.List;\n\nimport javax.inject.Inject;\n\nimport io.quarkus.mailer.Mail;\nimport io.quarkus.mailer.Mailer;\nimport io.quarkus.mailer.MockMailbox;\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@QuarkusTest\npublic class MailerTest {\n    @Inject\n    Mailer mailer;\n\n    @Inject\n    MockMailbox mbox;\n\n    @BeforeEach\n    void clearMBox() {\n        mbox.clear(); ![1](Images/1.png)\n    }\n\n    @Test\n    public void assertBasicTextEmailSent() {\n        final String mailTo = \"test@example.org\";\n        final String testingSubject = \"Testing email\";\n        final String testingBody = \"Hello World!\";\n\n        mailer.send(Mail.withText(mailTo,\n                testingSubject,\n                testingBody));\n\n        assertThat(mbox.getTotalMessagesSent()).isEqualTo(1); ![2](Images/2.png)\n        List<Mail> emails = mbox.getMessagesSentTo(mailTo); ![3](Images/3.png)\n\n        assertThat(emails).hasSize(1);\n        Mail email = emails.get(0);\n\n        assertThat(email.getSubject()).isEqualTo(testingSubject);\n        assertThat(email.getText()).isEqualTo(testingBody);\n    }\n}\n```", "```java\n    @Test\n    void attachmentTest() throws Exception {\n        final String mailTo = \"test@example.org\";\n        final String testingSubject = \"email with Attachment\";\n        final String html = \"<strong>E-mail by:</strong>\" + \"\\n\" +\n                \"<p><img src=\\\"cid:logo@quarkus.io\\\"/></p>\";    ![1](Images/1.png)\n\n        sendEmail(mailTo, testingSubject, html);\n\n        Mail email = mbox.getMessagesSentTo(mailTo).get(0);\n        List<Attachment> attachments = email.getAttachments();\n\n        assertThat(email.getHtml()).isEqualTo(html);\n        assertThat(attachments).hasSize(1);\n        assertThat(attachments.get(0).getFile())\n                .isEqualTo(new File(getAttachmentURI()));\n    }\n\n    private void sendEmail(String to, String subject, String body)\n          throws URISyntaxException {\n        final File logo = new File(getAttachmentURI());\n\n        Mail email = Mail.withHtml(to, subject, body)\n                .addInlineAttachment(\"quarkus-logo.svg\",\n                        logo,\n                        \"image/svg+xml\",\n                        \"<logo@quarkus.io>\");   ![2](Images/2.png)\n\n        mailer.send(email);\n    }\n```", "```java\npackage org.acme.email;\n\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\nimport javax.inject.Inject;\n\nimport io.quarkus.mailer.Mail;\nimport io.quarkus.mailer.MockMailbox;\nimport io.quarkus.mailer.reactive.ReactiveMailer;\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@QuarkusTest\npublic class ReactiveMailerTest {\n    @Inject\n    ReactiveMailer reactiveMailer;\n\n    @Inject\n    MockMailbox mbox;\n\n    @BeforeEach\n    void clearMbox() {\n        mbox.clear();\n    }\n\n    @Test\n    public void testReactiveEmail() throws Exception {\n        final String mailTo = \"test@example.org\";\n        final String testingSubject = \"Testing email\";\n        final String testingBody = \"Hello World!\";\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        reactiveMailer.send(Mail.withText(mailTo,\n                testingSubject,\n                testingBody)).subscribeAsCompletionStage().join();\n\n        assertThat(mbox.getTotalMessagesSent()).isEqualTo(1);\n        List<Mail> emails = mbox.getMessagesSentTo(mailTo);\n\n        assertThat(emails).hasSize(1);\n        Mail email = emails.get(0);\n\n        assertThat(email.getSubject()).isEqualTo(testingSubject);\n        assertThat(email.getText()).isEqualTo(testingBody);\n    }\n}\n```", "```java\nmvn quarkus:add-extensions -Dextensions=\"quarkus-qute\"\n```", "```java\n@ResourcePath(\"mail/welcome.txt\") ![1](Images/1.png)\nMailTemplate mailTemplate;\n\nCompletionStage<Void> c = hello.to(\"to@acme.org\")\n     .subject(\"Hello from Qute template\")\n     .data(\"name\", \"Alex\")\n     .send(); ![2](Images/2.png)\n```", "```java\npackage org.acme.scheduling;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.quarkus.scheduler.Scheduled;\nimport io.quarkus.scheduler.ScheduledExecution;\n\n@ApplicationScoped\npublic class Scheduler {\n\n    private AtomicInteger count = new AtomicInteger();\n\n    int get() {\n        return count.get();\n    }\n\n    @Scheduled(every = \"5s\")\n    void fiveSeconds(ScheduledExecution execution) {\n        count.incrementAndGet();\n        System.out.println(\"Running counter: 'fiveSeconds'. Next fire: \"\n                + execution.getTrigger().getNextFireTime());\n    }\n}\n```", "```java\nmvn quarkus:add-extensions -Dextensions=\"quarkus-qute\"\n```", "```java\n@ResourcePath(\"reports/report_01.html\")\nTemplate report;\n\n@Scheduled(cron=\"0 30 * * * ?\")\nvoid generate() {\n    final String reportContent = report\n        .data(\"sales\", listOfSales)\n        .data(\"now\", java.time.LocalDateTime.now())\n        .render();\n    Files.write(reportOuput, reportContent.getBytes());\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"cache\"\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    long initial = System.currentTimeMillis();\n    String msg = greetingProducer.getMessage(); ![1](Images/1.png)\n    long end = System.currentTimeMillis();\n    return msg + \" \" + (end - initial) + \"ms\";\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl http://localhost:8080/hello\nHello World 4009ms\n\ncurl http://localhost:8080/hello\nHello World 3003ms\n```", "```java\n@CacheResult(cacheName = \"greeting-cache\") ![1](Images/1.png)\npublic String getMessage() {\n    try {\n        TimeUnit.SECONDS.sleep(random.nextInt(4) + 1);\n        return \"Hello World\";\n    } catch (InterruptedException e) {\n        throw new IllegalStateException(e);\n    }\n\n}\n```", "```java\ncurl http://localhost:8080/hello\nHello World 2004ms\n\ncurl http://localhost:8080/hello\nHello World 0ms\n```", "```java\nquarkus.cache.caffeine.\"greeting-cache\".initial-capacity=10 ![1](Images/1.png)\nquarkus.cache.caffeine.\"greeting-cache\".expire-after-write=5S ![2](Images/2.png)\n```", "```java\ncurl http://localhost:8080/hello\nHello World 2004ms\n\ncurl http://localhost:8080/hello\nHello World 0ms\n\n// Wait 5 seconds\n\ncurl http://localhost:8080/hello\nHello World 1011ms\n```"]