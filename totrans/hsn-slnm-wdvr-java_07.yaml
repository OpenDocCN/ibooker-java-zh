- en: Chapter 5\. Browser-Specific Manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen so far, many features of the Selenium WebDriver API are compatible
    across browsers, i.e., we can use Selenium WebDriver to control different types
    of browsers programmatically. Other parts of the Selenium WebDriver API are not
    interoperable among browsers. In other words, there are some WebDriver characteristics
    available for some browsers (e.g., Chrome or Edge) that are unavailable (or different)
    for others (e.g., Firefox). This chapter reviews these browser-specific features.
  prefs: []
  type: TYPE_NORMAL
- en: Browser Capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver allows specifying browser-specific aspects by using *capabilities*.
    Examples of capabilities are headless mode, page loading strategies, use of web
    extensions, or push notifications management, among many others. As [Figure 5-1](#capabilities-hierarchy)
    shows, the Selenium WebDriver API provides a set of Java classes to define these
    capabilities. The `Capabilities` interface is at the top of this hierarchy. Internally,
    the capabilities interface handles data using key-value pairs that encapsulate
    specific aspects of a browser. Then, different Java classes implement this interface
    to specify capabilities for web browsers (Chrome, Edge, Firefox, etc.). [Table 5-1](#capabilities-hierarchy-description)
    summarizes the main classes of the `Capabilities` hierarchy and their corresponding
    target browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0501](assets/hosw_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. Capabilities hierarchy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Table 5-1\. Description of the Capabilities hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Class | Browser |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Generic (cross-browser) |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| Chrome |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| Edge |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| Firefox |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| Safari |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| Opera |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '| Internet Explorer |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '| Remote browsers (see [Chapter 6](ch06.html#ch06)) |'
  prefs: []
  type: TYPE_TB
- en: The following subsections review the most relevant capabilities for the major
    web browsers discussed in this book, i.e., Chrome, Edge, and Firefox. As Chrome
    and Edge are both Chromium-based browsers, the capabilities available for both
    browsers are equivalent. This fact is reflected in [Figure 5-1](#capabilities-hierarchy),
    showing that capability classes `ChromeOptions` and `EdgeOptions` both inherit
    from the same parent (called `ChromiumOptions`).
  prefs: []
  type: TYPE_NORMAL
- en: Headless Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browsers that do not require a GUI to interact with web applications are known
    as *headless* browsers. One of the primary uses of these browsers is end-to-end
    testing, i.e., automated interaction with web applications. Current web browsers
    such as Chrome, Edge, or Firefox can operate as headless browsers. The Selenium
    WebDriver API allows starting these browsers in headless mode using capabilities.
    To that aim, first, you need to create an instance of the browser capabilities.
    In the major browsers, these objects are instances of `ChromeOptions`, `EdgeOptions`,
    or `FirefoxOptions`, respectively. Then, you need to enable the headless mode
    by invoking the method `setHeadless(true)` in the browser capabilities object.
    Finally, you need to set these capabilities when creating a `WebDriver` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'As [“WebDriver Creation”](ch03.html#webdriver-creation) explained, we have
    different ways to create `WebDriver` objects. First, we can use a `WebDriver`
    constructor (e.g., `new ChromeDriver()`). Also, we can use a builder provided
    by the Selenium WebDriver API (i.e., `RemoteWebDriver.builder()`). Finally, we
    can use the WebDriverManager builder to resolve the driver and create the `WebDriver`
    instance in a single line of code. The following examples show these alternatives,
    used in conjunction with browser capabilities to enable the headless browser mode,
    namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 5-1](#caps_chrome_headless) uses Chrome in headless mode. This example
    creates a `WebDriver` instance using the required constructor (`ChromeDriver`
    in this case).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 5-2](#caps_edge_headless) uses Edge in headless mode. This example
    creates a `WebDriver` instance using the builder available in the Selenium WebDriver
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 5-3](#caps_firefox_headless) uses Firefox in headless mode. This example
    creates a `WebDriver` instance using WebDriverManager. Notice that the setup method
    is not required in this case since WebDriverManager resolves the driver in the
    same line as the WebDriver instantiation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 5-4](#caps_chrome_headless_seljup) uses Chrome in headless mode through
    Selenium-Jupiter. This example uses the parameter resolution mechanism provided
    by Selenium-Jupiter, and so we simply declare a `ChromeDriver` parameter in the
    test method. Then, we decorate this parameter using the annotation `@Arguments`
    to specify the headless mode for this browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example 5-1\. Test using Chrome in headless mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We resolve the required driver (chromedriver in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create the browser capabilities using the `ChromeOptions` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable the headless mode. This line is equivalent to `options.add​Arguments("--headless");`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We set up the browser capabilities by passing the options as a constructor parameter
    in the `ChromeDriver` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-2\. Test using Edge in headless mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: As usual, we need to resolve the required driver (msedgedriver in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Since we aim to use Edge, we need to create an `EdgeOptions` instance to specify
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable the headless mode. Again, this line is equivalent to `options.add​Arguments("--headless");`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the WebDriver builder to create the `WebDriver` object, passing the options
    as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-3\. Test using Firefox in headless mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use Firefox in this test, and therefore, we create a `FirefoxOptions` object
    to specify capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: In the same way as in the previous examples, we enable the headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we use WebDriverManager to resolve the required driver and
    create the `WebDriver` object while specifying the previously created browser
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The strategy used to create the `WebDriver` objects in these examples is interchangeable.
    In other words, for example, we can also use the WebDriverManager builder for
    each browser in headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-4\. Test using Chrome in headless mode with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the annotation `@Arguments` to specify the headless mode in the browser
    (Chrome in this case).
  prefs: []
  type: TYPE_NORMAL
- en: Page Loading Strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium WebDriver allows configuring different approaches for loading web pages.
    For that, the Selenium WebDriver API provides the `PageLoadStrategy` enumeration.
    [Table 5-2](#page-loading-enum) describes the possible values of this enumeration
    and their purposes. Selenium WebDriver internally uses the property `document.readyState`
    of the DOM API to check the web page loading state.
  prefs: []
  type: TYPE_NORMAL
- en: Table 5-2\. PageLoadStrategy values
  prefs: []
  type: TYPE_NORMAL
- en: '| Loading strategy | Description | Readiness state |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '| Default mode. Selenium WebDriver waits until the entire page is loaded (i.e.,
    the HTML content and subresources, such as stylesheets, images, JavaScript files,
    etc.). |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '| Selenium WebDriver waits until the HTML document has finished loading and
    parsing, but subresources (scripts, images, stylesheets, etc.) are still loading.
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '| Selenium WebDriver waits only until the HTML document is downloaded. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: We need to invoke the method `setPageLoadStrategy()` of the browser capabilities
    (e.g., `ChromeOptions`, `FirefoxOptions`, etc.) to set up these strategies (`NORMAL`,
    `EAGER`, or `NONE`). [Example 5-5](#caps_chrome_load) shows a test using Chrome
    and the `NORMAL` strategy. In the examples repository, you can find equivalent
    examples for Edge and Firefox using the other strategies (`EAGER` and `NONE`).
    In these examples, in addition to specifying a loading strategy in the test setup,
    the test logic calculates the required time to load the page, displaying this
    value in the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-5\. Test using a normal page loading strategy in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Since we use Chrome in this test, we instantiate `ChromeOptions` to specify
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We set up the page loading strategy to `NORMAL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use WebDriverManager to resolve the driver, create the `WebDriver` instance,
    and specify the capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the system timestamp before loading the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO5-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the system timestamp after loading the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO5-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the `WebDriver` object capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO5-7)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the used page loading strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO5-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We trace the time required to load the web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_browser_specific_manipulation_CO5-9)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the loading strategy is as initially configured.
  prefs: []
  type: TYPE_NORMAL
- en: Device Emulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Major web browsers use development tools (i.e., DevTools in Chromium-based
    browsers and Developer Tools in Firefox) to simulate mobile devices in these ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Simulating a mobile viewport
  prefs: []
  type: TYPE_NORMAL
- en: To reduce user visible area of a web page using the width and height of a given
    mobile device
  prefs: []
  type: TYPE_NORMAL
- en: Throttling the network
  prefs: []
  type: TYPE_NORMAL
- en: To slow the connectivity speed to simulate mobile networks (e.g., 3G)
  prefs: []
  type: TYPE_NORMAL
- en: Throttling the CPU
  prefs: []
  type: TYPE_NORMAL
- en: To slow processing performance
  prefs: []
  type: TYPE_NORMAL
- en: Simulating geolocation
  prefs: []
  type: TYPE_NORMAL
- en: To set custom Global Positioning System (GPS) coordinates
  prefs: []
  type: TYPE_NORMAL
- en: Setting orientation
  prefs: []
  type: TYPE_NORMAL
- en: To rotate the screen
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-2](#chrome-devtools-mobile-emulation) shows a screenshot of Chrome
    using mobile emulation through DevTools.'
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0502](assets/hosw_0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. Mobile emulation in Chrome using DevTools
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At the time of this writing, this mobile device emulation can be automated through
    the Selenium WebDriver API in Chromium-based browsers (Chrome and Edge) but not
    Firefox (since it is not implemented in geckodriver). For that, we need to set
    the experimental option `mobileEmulation` in `ChromeOptions` or `EdgeOptions`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there are two alternatives to specify the mobile device to be emulated.
    First, we can specify a particular mobile device (e.g., Pixel 2, iPad Pro, or
    Galaxy Fold, to name a few). Since this list is updated in each Chromium release,
    the best way to check the possibilities is to inspect the available devices in
    DevTools (e.g., iPhone X is selected in [Figure 5-2](#chrome-devtools-mobile-emulation)).
    [Example 5-6](#caps_chrome_device_emulation_1) shows a test setup in which we
    specify a given mobile device using the label `iPhone 6/7/8`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-6\. Test setup using mobile emulation by specifying a device
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a `HashMap` object to specify the mobile emulation options.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we only need to select the device name (iPhone 6/7/8 in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO6-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We set up device emulation using experimental options.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO6-4)'
  prefs: []
  type: TYPE_NORMAL
- en: As usual, we create a `WebDriver` object specifying these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second alternative to set up mobile emulation is to specify the individual
    attributes of the emulated device. These attributes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`'
  prefs: []
  type: TYPE_NORMAL
- en: Device screen width (in pixels)
  prefs: []
  type: TYPE_NORMAL
- en: '`height`'
  prefs: []
  type: TYPE_NORMAL
- en: Device screen height (in pixels)
  prefs: []
  type: TYPE_NORMAL
- en: '`pixelRatio`'
  prefs: []
  type: TYPE_NORMAL
- en: Ratio between physical pixels and logical pixels
  prefs: []
  type: TYPE_NORMAL
- en: '`touch`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to emulate touch events; the default value is `true`
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these attributes, we can specify the *user agent* of the emulated
    device. In HTTP, the user agent is a string specified in request headers that
    univocally identifies the type of web browser. It contains the development code
    name, version, platform, and other information. [Example 5-7](#caps_chrome_device_emulation_2)
    shows a test setup illustrating the use of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-7\. Test setup using device emulation by specifying individual attributes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a hashmap to store the individual attributes of an emulated mobile,
    namely, `width`, `height`, `pixelRatio`, and `touch`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We set these attributes by setting the label `deviceMetrics` in the mobile emulation
    map.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We set a custom user agent for a Chrome Mobile 18 in a Nexus 5 device.
  prefs: []
  type: TYPE_NORMAL
- en: Web Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web extensions (also called *add-ons* or *plug-ins*) are programs that can modify
    or enhance the default operation of a web browser. Users typically install web
    extensions using web stores. These stores are web applications supported by browser
    maintainers for hosting public web extensions. [Table 5-3](#web-stores) summarizes
    the web stores for Chrome, Edge, and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Table 5-3\. Web stores for the major browsers
  prefs: []
  type: TYPE_NORMAL
- en: '| Web Store | Browser | URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Chrome web store | Chrome | [*https://chrome.google.com/webstore/category/extensions*](https://chrome.google.com/webstore/category/extensions)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Edge add-ons | Edge | [*https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home*](https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox browser add-ons | Firefox | [*https://addons.mozilla.org/en-US/firefox*](https://addons.mozilla.org/en-US/firefox)
    |'
  prefs: []
  type: TYPE_TB
- en: We can install web extensions in a WebDriver session using capabilities. For
    that, in Chromium-based browsers, like Chrome and Edge, we use the method `addExtensions()`
    of a `ChromeOptions` or `EdgeOptions` object. [Example 5-8](#caps_chrome_ext)
    shows a test setup to install a local extension in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-8\. Test setup installing a web extension in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We install a web extension packed as a Chrome Extension (CRX) file. This file
    is a test resource (located in the folder `src\test\resources` of the Java project).
    This extension changes the website look and feel to use light text on a dark background.
    [Figure 5-3](#dark-bg) shows a screenshot of the practice website when loaded
    by a WebDriver test using this extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We add the extension in the Chrome options, passing the extension as a Java
    `File`.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0503](assets/hosw_0503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-3\. Practice site when it is loaded using the dark-bg.crx extension
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Firefox also allows loading web extensions when it is controlled with WebDriver.
    Nevertheless, the syntax is different. [Example 5-9](#caps_firefox_ext) illustrates
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-9\. Test setup installing a web extension in Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the same extension as in Chrome/Edge, but in this case, the packaging
    is specific for Firefox. Notice that the file is different. This time, it is packaged
    as an *XPInstall* file, i.e., a zipped archive containing the web extension source
    code, resources (e.g., images), and metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create a custom Firefox profile (i.e., the store where custom settings
    are configured).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We add the extension as a Java `File` to the Firefox profile.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO9-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the profile in the Firefox options.
  prefs: []
  type: TYPE_NORMAL
- en: Chromium-based browsers (e.g., Chrome, Edge) also allow loading an extension
    from its source code (i.e., not packaged as a CRX file). This feature can be very
    convenient for automated testing of web extensions during their development. [Example 5-10](#caps_edge_ext)
    shows a test setup that illustrates this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-10\. Test setup installing a web extension from its source code in
    Edge
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The extension used in this example is located in the folder `web-extension`;
    it is a test resource folder (stored in `src\test\resources` of the Java project).
    This extension follows the [Browser Extensions API](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions).
    It uses JavaScript to change the content of first-level headers (`h1` tags) with
    a custom message. [Figure 5-4](#load-ext) shows a screenshot of the practice website
    when using this extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the extension path using the `--load-extension` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Selenium WebDriver creates a new browser profile in each execution. For this
    reason, the installation of web extensions through Selenium WebDriver is not permanent
    in the target browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0504](assets/hosw_0504.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-4\. Practice site when it is loaded using the local extension
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As of Selenium 4.1, Firefox also allows installing web extensions from its source
    code. To that aim, `FirefoxDriver` extends the interface `HasExtensions`, providing
    the method `installExtension`. [Example 5-11](#caps_firefox_ext_src) shows a test
    setup using this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-11\. Test setup installing a web extension from its source code in
    Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the source code (located in the project classpath) of a web extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The method `installExtension` requires that the extension installed from its
    source code is zipped. WebDriverManager provides the static helper method called
    `zipFolder(Path)` to ease this process.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO11-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We install the zipped extension as a temporal add-on in Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [Geolocation API](https://www.w3.org/TR/geolocation) is a W3C specification
    that allows access to the geographical location information associated with the
    hosting device (e.g., laptop or mobile) of the web browser. Usual geolocation
    data sources include GPS data and the location inferred from the network, such
    as the IP address. The Geolocation API is available in a web browser calling the
    JavaScript object `navigator.geolocation`. When using this statement, and for
    privacy reasons, a pop-up prompts the user for permission to report location data.
  prefs: []
  type: TYPE_NORMAL
- en: The practice site contains a web page using geolocation. [Figure 5-5](#geolocation)
    shows a screenshot of this page. This figure shows the permission pop-up shown
    to the user when clicking the button “Get coordinates.” To handle this dialog
    using the Selenium WebDriver API, we use capabilities. Like other occasions, the
    required capabilities to grant access to the geolocation data are different in
    Chrome/Edge than in Firefox. The following code snippets show the difference.
    First, [Example 5-12](#caps_chrome_geo) shows a test setup where geolocation access
    is granted in Chrome. The same experimental preference (`profile.default_content_setting_values.geolocation`)
    would be used in Edge (as usual, you can find the complete test in the examples
    repository). Then, [Example 5-13](#caps_firefox_geo) shows the equivalent test
    setup, but using Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0505](assets/hosw_0505.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-5\. Practice site showing the geolocation permission pop-up
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 5-12\. Test setup to allow geolocation in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a hashmap for experimental options.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We set to `1` the experimental option `profile.default_content_setting_​val⁠ues.geolocation`
    to allow accessing the geolocation position. The other possible values are: `0`
    for the default behavior and `2` for blocking access to the geolocation data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO12-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the experimental options using the label `prefs` in the Chrome options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Suppose you need to access the geolocation coordinates using Chrome or Edge
    in a macOS machine. In that case, you will also need to enable the location services
    for these browsers in the macOS preferences (System Preferences → Security & Privacy
    → Location Services). [Figure 5-6](#geolocation-macos) shows this configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0506](assets/hosw_0506.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-6\. Enabling location services for Chrome and Edge in macOS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 5-13\. Test setup to allow geolocation in Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: To enable the Geolocation API
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: To grant access to the geolocation data (i.e., click on `allow` in the access
    pop-up)
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: To gather data using all the available components in the device, such as GPS,
    WiFi, or Bluetooth
  prefs: []
  type: TYPE_NORMAL
- en: Notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [Notifications API](https://notifications.spec.whatwg.org) is a standard
    web API that allows websites to send notifications displayed at the operating
    system desktop. This API is available through the JavaScript object `Notification`.
    Before a website can send notifications, the user must grant permission. This
    consent is prompted to the user in a dialog pop-up similar to geolocation data.
    The practice site contains a web page using the Notification API. [Figure 5-7](#notifications)
    shows a screenshot of the notification permission pop-up for this page. [Figure 5-8](#notification-fullscreen)
    shows the message sent by this web page on a Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0507](assets/hosw_0507.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-7\. Practice site showing the notification permission pop-up
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![hosw 0508](assets/hosw_0508.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-8\. Practice site showing a notification in a Linux desktop
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Selenium WebDriver API allows granting notifications by using capabilities.
    Like in other features, the syntax of these capabilities is different in Chrome/Edge
    and Firefox. [Example 5-14](#caps_chrome_notifications) shows the test setup to
    enable notifications as Chrome options. We use the same preference (`profile.default_content_setting_values.notifications`)
    to allow notifications in Edge. [Example 5-15](#caps_firefox_notifications) shows
    the equivalent test setup for Firefox. The preference label (`permissions.default.desktop-notification`)
    is different in this case, although its value (`1`) is the same for allowing notifications.
    The other possible value is `2`, which is used to block notifications (both in
    Chrome/Edge and Firefox).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-14\. Test setup to allow notifications in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Example 5-15\. Test setup to allow notifications in Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 5-16](#test_notifications) shows the test logic used with the previous
    setup. As usual, you can find the complete test case in the examples repository.
    This test is an example of asynchronous script execution. This script overrides
    the original `Notification` JavaScript object. The new implementation of this
    object gets the title of the notification message, which is returned in the script
    callback to the WebDriver test.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-16\. Test handling notifications
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: As usual in asynchronous script execution, the last argument is the callback
    function used to signal the script termination.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We store a copy of the original `Notification` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO14-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new constructor for notifications.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO14-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We pass the message title as an argument in the callback. As a result, the title
    is returned to the WebDriver call (Java in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO14-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the old constructor to create an original `Notification` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO14-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on the button that triggers the notification on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO14-7)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the returned object after the script execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO14-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the notification title is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Browser Binary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium WebDriver detects the path of controlled web browsers (Chrome, Firefox,
    etc.) out of the box. Nevertheless, we can specify a custom path for the browser
    executable file using capabilities. This feature can be helpful when the installation
    path of the browser is not standard (for instance, in the case of beta/development/canary
    browsers).
  prefs: []
  type: TYPE_NORMAL
- en: We use the same capabilities syntax to specify the binary path for Chrome, Edge,
    and Firefox. [Example 5-17](#caps_chrome_binary) shows a test setup using Chrome
    beta.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-17\. Test setup setting a custom binary path for Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use a Java `Path` to get the browser binary path (in this case, Chrome beta
    in Linux).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO15-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use assumptions to conditionally skip this test when the previous path does
    not exist (e.g., in the CI server).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO15-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the method `setBinary` of the Chrome options to set the binary path (as
    a Java `File`).
  prefs: []
  type: TYPE_NORMAL
- en: Web Proxies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In computer networking, a *proxy* is a server that acts as an intermediary
    between a client and a server. A web proxy is a proxy between a browser and a
    web server, and it can serve multiple purposes, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Access region-specific information
  prefs: []
  type: TYPE_NORMAL
- en: The proxy is typically located in a different region than the client, and the
    server consequently replies to that region.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding restrictions
  prefs: []
  type: TYPE_NORMAL
- en: A proxy can help access blocked websites, for example, by an intermediate firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Capture network traffic
  prefs: []
  type: TYPE_NORMAL
- en: A proxy can gather HTTP requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  prefs: []
  type: TYPE_NORMAL
- en: A proxy can allow faster website retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-9](#proxy-arch) represents the location of a web proxy in the Selenium
    WebDriver architecture compared to the typical scenario in which a web proxy is
    not used. As you can see, the web proxy is placed in the middle of the browser
    and the web application under test, and it works at the HTTP level. This way,
    the web proxy allows implementing the previously mentioned purposes (e.g., capturing
    HTTP network traffic) in Selenium WebDriver tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0509](assets/hosw_0509.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-9\. Selenium WebDriver architecture with and without a web proxy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Selenium WebDriver API provides a `Proxy` class to configure a web proxy.
    This class is configured into a `WebDriver` object using capabilities. [Example 5-18](#http_proxies)
    illustrates how.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-18\. Test setup to configure a web proxy
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create an instance of the class `Proxy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO16-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax required to specify a proxy is `host:port`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO16-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the proxy is used for HTTP connections.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO16-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We also specify the proxy is used for HTTPS connections.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO16-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Although not mandatory, it is typically required to accept insecure certificates.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO16-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the proxy as a capability. This line is equivalent to `options.setCapability(CapabilityType.PROXY,
    proxy);`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[“Capture Network Traffic”](ch09.html#capture_network_traffic) shows how to
    use a third-party library to capture network traffic by using a web proxy in a
    Selenium WebDriver test.'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gathering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Selenium WebDriver API allows gathering different log sources. This feature
    is enabled using capabilities, although it is supported only in Chromium-based
    browsers at the time of this writing. [Example 5-19](#log_gather) presents a test
    setup that enables gathering browser logs (i.e., console messages). This snippet
    also contains the test logic, in which we need to invoke `driver.manage().logs()`
    to gather the log list.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-19\. Test gathering browser log using Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable gathering all levels of browser logs.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the `loggingPrefs` capability.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a practice page that logs several traces in the browser console.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO17-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We gather all the logs and filter them by browser (console traces).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO17-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the number of traces is not zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO17-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We display each log in the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Log gathering is not available in the W3C WebDriver specification at the time
    of writing. Nevertheless, it has been implemented in some drivers such as chromedriver
    or msedgedriver (i.e., Chrome and Edge), but it is unavailable in others, such
    as geckodriver (i.e., Firefox).
  prefs: []
  type: TYPE_NORMAL
- en: Get User Media
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[WebRTC](https://webrtc.org) is a set of standard technologies that allow exchanging
    real-time media using web browsers. This technology allows the creation of audio-
    and video conferencing web applications using JavaScript APIs on the client side.
    The practice site contains a web page that gets user media (microphone and webcam)
    using the *getUserMedia* JavaScript API. Like in other APIs, and for the sake
    of security and privacy, a browser pop-up asks for permission before accessing
    the user media. [Figure 5-10](#get-user-media-popup) shows the sample web page
    when prompting this dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0510](assets/hosw_0510.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-10\. Practice site prompting the user media permission pop-up
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We use capabilities to grant access to the user media in the Selenium WebDriver
    API. The syntax of these capabilities is the same in Chrome and Edge (see [Example 5-20](#caps_chrome_get_user_media))
    but different in Firefox (see [Example 5-21](#caps_firefox_get_user_media)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-20\. Test setup granting synthetic user media in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO18-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Argument to allow accessing user media (audio and video).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO18-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Argument to fake user media using a synthetic video (green spinner) and audio
    (a beep per second). You can see this video in [Figure 5-11](#get-user-media-chrome).
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0511](assets/hosw_0511.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-11\. Practice site using synthetic user media in Chrome
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 5-21\. Test setup granting synthetic user media in Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO19-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Preference to access the user media.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO19-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Preference to fake the user media using a synthetic video (with changing color
    background) and audio (constant beep). You can see this video in [Figure 5-12](#get-user-media-firefox).
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0512](assets/hosw_0512.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-12\. Practice site using synthetic user media in Firefox
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Loading Insecure Pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When web browsers try to load a web page using HTTPS (Hypertext Transfer Protocol
    Secure) but the certificate on the server side is invalid, the browser warns the
    user about it. Examples of invalid certificates are self-signed, revoked, or cryptographically
    unsafe certificates. [Figure 5-13](#insecure-cert) shows a screenshot of this
    warning in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0513](assets/hosw_0513.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-13\. Web page using an insecure certificate
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This issue does not necessarily imply a security concern. It might happen during
    the development of a website, for example, when using a self-signed certificate.
    For this reason, the Selenium WebDriver API allows disabling the certificate checks
    using the `acceptInsecureCerts` capability. This capability is the same in Chrome,
    Edge, and Firefox. [Example 5-22](#caps_chrome_insecure) shows a test setup in
    which this capability is enabled using Chrome. This snippet also contains a test
    opening an insecure website.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-22\. Test of a web application that uses an insecure certificate
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO20-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable the capability to allow insecure certificates.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO20-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a website using an insecure certificate (self-signed in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO20-3)'
  prefs: []
  type: TYPE_NORMAL
- en: If the website is loaded, the body background should be red.
  prefs: []
  type: TYPE_NORMAL
- en: Localization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In software engineering, *localization* refers to the process of adapting an
    application to meet the culture and the language (called *locale*) of its end
    users. Localization is sometimes written as *l10n* (10 is the number of letters
    between *l* and *n* in the English word localization). The most usual localization
    activity is translating the text displayed in an application UI to different languages.
    In addition, other UI aspects can be adjusted depending on the locale, such as
    the currencies (euros, dollars, etc.), systems of measurement (e.g., metric or
    imperial systems), or number and date format.
  prefs: []
  type: TYPE_NORMAL
- en: L10n is part of a broader concept called *internationalization* (i18n), which
    is the process of designing and developing an application that enables easy l10n
    for heterogeneous target audiences. Common practices to enable i18n are using
    Unicode for text encoding or adding CSS support for vertical text or non-Latin
    typographies.
  prefs: []
  type: TYPE_NORMAL
- en: '*Localization testing* is a form of nonfunctional testing where a SUT is verified
    for specific locale settings. The Selenium WebDriver API allows us to make localization
    testing based on the browser language by setting the capability `intl.accept_languages`.
    This capability allows you to specify the locale identifier, such as *en_US* for
    American English or *es_ES* for European Spanish, to name a few. [Example 5-23](#caps_chrome_accept_lang)
    shows a test setup that configures this capability in Chrome. We can use the same
    syntax in Edge, although we specify this capability as a preference in Firefox
    (see [Example 5-24](#caps_firefox_accept_lang)).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-23\. Test that uses a preferred locale for Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO21-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify European Spanish as the preferred language in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO21-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a practice page that supports multilanguage (English and Spanish).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO21-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the text translations using a resource bundle. You can find these strings
    in the file `strings_es.properties` (and `strings_en.properties`) in the project
    folder `src/test/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO21-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert that the document body contains all the expected strings.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-24\. Test setup that specifies a preferred locale for Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: There is a second alternative to practice localization testing with Selenium
    WebDriver. Instead of changing the preferred language (which determines the HTTP
    header `accept-language`), we can change the default language of the web browser.
    If that HTTP header is not present, multilanguage applications will use the browser
    language alternatively. The Selenium WebDriver API allows changing the browser
    language with a simple argument called `--lang`, specified as browser capability.
    This argument is interoperable in Chrome, Edge, and Firefox. [Example 5-25](#caps_chrome_lang)
    shows how to set the browser language to American English using WebDriver capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-25\. Test setup that changes the browser language in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Incognito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Incognito mode ensures that browsers run in a clean state. This mode allows
    private browsing, i.e., running isolated from the main session and user data.
    The Selenium WebDriver API enables the execution of browsers in incognito mode
    using capabilities. For Chrome and Edge, this mode is activated using the `--incognito`
    argument (see [Example 5-26](#caps_chrome_incognito)), while in Firefox, we use
    the `-private` preference (see [Example 5-27](#caps_firefox_incognito)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-26\. Test setup for using Chrome in incognito mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Example 5-27\. Test setup for using Firefox in incognito mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Edge in Internet Explorer Mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edge offers built-in support for the Microsoft legacy browser, i.e., Internet
    Explorer (IE). This way, to create a Selenium WebDriver test that uses Edge in
    IE mode, we need first to enable the IE mode in Edge. As shown in [Figure 5-14](#edge-iemode-config),
    this option is enabled in Edge settings → Default browser → Allow sites to be
    reloaded in Internet Explorer mode. Then, we can use the Selenium WebDriver API
    as illustrated in [Example 5-28](#setup_edge_iemode).
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0514](assets/hosw_0514.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-14\. Browser setup to enable Edge in IE mode
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 5-28\. Test setup to use Edge in IE mode
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO22-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We assume that the test is executed in Windows since IE mode is not supported
    on other operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO22-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use WebDriverManager to manage IEDriver (the driver required by Internet
    Explorer).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO22-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use WebDriverManager to discover the path of Edge.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO22-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use IE options to specify that we use Edge in IE mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO22-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the previously discovered Edge path on the IE options.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO22-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We create the driver instance to use Internet Explorer (which will actually
    be Edge in IE mode).
  prefs: []
  type: TYPE_NORMAL
- en: The Chrome DevTools Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chrome DevTools](https://developer.chrome.com/docs/devtools) is a set of web
    developer tools for Chromium-based web browsers, such as Chrome and Edge. These
    tools allow inspecting, debugging, or profiling these browsers, among other functions.
    The [Chrome DevTools Protocol (CDP)](https://chromedevtools.github.io/devtools-protocol)
    is a communication protocol that allows the manipulation of the Chrome DevTools
    by external clients. Firefox implements a subset of the CDP to support automation
    tools like Selenium WebDriver.'
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to use CDP in Selenium WebDriver. As of version 4, Selenium
    WebDriver provides the interface `HasDevTools` for sending CDP commands to the
    browser. This interface is implemented by `ChromiumDriver` (used for Chrome and
    Edge) and `FirefoxDriver` (for Firefox). This mechanism is quite powerful since
    it provides direct access to the CDP with Selenium WebDriver. Nevertheless, it
    has a relevant limitation since it is tied to both the browser type and version.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, the Selenium WebDriver API provides a second way to use the
    CDP, based on a set of wrapper classes built on top of CDP for advanced manipulation
    of the browsers. These wrappers allow different operations, such as network traffic
    interception or basic and digest authentication. The following subsection explains
    these wrappers. After that, I present several examples for using the CDP commands
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: CDP Selenium Wrappers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Selenium WebDriver API contains a group of helper classes that wraps some
    of the CDP commands. These classes aim to provide a friendly API enabling advanced
    features for Selenium WebDriver tests.
  prefs: []
  type: TYPE_NORMAL
- en: Network interceptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first wrapper class built on top of CDP is called `NetworkInterceptor`.
    This class allows stubbing the backend requests, intercepting network traffic,
    and returning pre-canned responses. This feature might help to simplify complex
    end-to-end tests by mocking external calls with fast, straightforward responses.
    To instantiate `Network ​In⁠terceptor`, we need to specify parameters in its constructor
    (see [Example 5-29](#network_interceptor)):'
  prefs: []
  type: TYPE_NORMAL
- en: A `WebDriver` object that implements the CDP (i.e., `ChromeDriver` or `EdgeDriver`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Route` object to map the network requests to responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example 5-29\. Test intercepting network traffic using NetworkInterceptor
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO23-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We load a local image stored as a test resource in the Java project.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO23-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a network interceptor instance, creating a route for all the requests
    ending in `.png`, and stubbing this request with a new response, in this case
    sending the content of the previous picture.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO23-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open the practice site.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO23-4)'
  prefs: []
  type: TYPE_NORMAL
- en: If the interception works as expected, the image on the page should have a width
    higher than the original logo.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A `DevToolsException` will be thrown if a browser different than Chrome or Edge
    (such as Firefox) is used with previous code.
  prefs: []
  type: TYPE_NORMAL
- en: Basic and digest authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HTTP provides two built-in mechanisms for recognizing a user’s identity, called
    *basic* and *digest* authentication. Both methods allow specifying the user’s
    credential using a pair of values: username and password. The difference between
    them is how they communicate the credentials. On the one hand, the digest authentication
    method sends encrypted credentials by applying a hash function to username and
    password. On the other hand, basic authentication uses Base64 to encode (not encrypt)
    the credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: Selenium WebDriver provides the interface `HasAuthentication` to seamlessly
    implement basic and digest authentication. [Example 5-30](#basic_auth) shows a
    test using Chrome and basic authentication. You can use the exact mechanism with
    Edge and digest authentication (see the complete test in the [example repository](https://github.com/bonigarcia/selenium-webdriver-java)).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-30\. Test using basic authentication with Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO24-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `HasAuthentication` and register the credentials
    (username and password).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO24-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a website protected with basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO24-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the page content is available.
  prefs: []
  type: TYPE_NORMAL
- en: When using other browsers (such as Firefox), we cannot cast the driver object
    to `HasAuthentication`. Nevertheless, there is a general way to send the credentials
    in the URL using the syntax `protocol://username:password@domain`. [Example 5-31](#basic_auth_generic)
    demonstrates this use.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-31\. Test using basic authentication and Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: CDP Raw Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of version 4, Selenium WebDriver provides the interface `HasDevTools` for
    using the CDP directly. This interface is implemented by `ChromiumDriver` (used
    for Chrome and Edge) and `FirefoxDriver` (for Firefox). To use this feature, we
    first need to open a CDP session (i.e., a WebSocket connection between the client
    and the browser) using the method `createSession()` of a `DevTools` instance.
    [Example 5-32](#cdp_open_close) shows the recommended structure for using CDP
    in Selenium WebDriver tests. As you can see, the CDP session is created in the
    test setup and closed in the teardown. Each test will use the class attribute
    `devTools` to interact with the Chrome DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-32\. Test structure to use Chrome DevTools
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO25-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We declare a `DevTools` class attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO25-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the `DevTools` instance from the driver object. In this example (and
    the rest), I use `ChromeDriver` (although `EdgeDriver` instances would also be
    valid).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO25-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a CDP session to interact with Chrome DevTools in the test logic.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO25-4)'
  prefs: []
  type: TYPE_NORMAL
- en: After each test and before quitting the WebDriver session, we terminate the
    CDP session.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections present several examples that illustrate the potential
    of DevTools in WebDriver tests. In these examples, we use an instance of `DevTools`
    for sending CDP commands using the method `send()`. The Selenium WebDriver API
    provides various commands that allow different operations for testing web applications,
    such as emulating network conditions, handling HTTP headers, blocking URLs, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Selenium WebDriver tests using the raw CDP commands (as explained in the
    following subsections) are tied to a given browser version. You can see this version
    by inspecting the import clauses (e.g., `import org.openqa.selenium.devtools.v96.*;`)
    in the complete tests available in the examples repository.
  prefs: []
  type: TYPE_NORMAL
- en: Emulate network conditions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The CDP allows the emulation of different networks (such as mobile 2G/3G/4G,
    WiFi, or Bluetooth, among others) and conditions (e.g., latency or throughput).
    This feature can be helpful to test the behavior of web applications under specific
    connectivity parameters. [Example 5-33](#cdp_emulate_network) shows a test using
    this feature. As you can see, this test sends two CDP commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Network.enable()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate network tracking. This command has three optional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional<Integer> maxTotalBufferSize`'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum buffer size (in bytes) for network payloads.
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional<Integer> maxResourceBufferSize`'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum buffer size (in bytes) for single resources.
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional<Integer> maxPostDataSize`'
  prefs: []
  type: TYPE_NORMAL
- en: Longest post body size (in bytes).
  prefs: []
  type: TYPE_NORMAL
- en: '`Network.emulateNetworkConditions()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate network emulation. The emulated conditions are specified using
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Boolean offline`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To emulate no connection to the internet. `Number latency`: Minimum latency
    (in ms) from request to response.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Number downloadThroughput`'
  prefs: []
  type: TYPE_NORMAL
- en: Maximal download throughput (in bytes/sec). `-1` disables download throttling.
  prefs: []
  type: TYPE_NORMAL
- en: '`Number uploadThroughput`'
  prefs: []
  type: TYPE_NORMAL
- en: Maximal upload throughput (in bytes/sec). `-1` disables upload throttling.
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional<ConnectionType> connectionType`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Emulated connection technology. The enumeration `ConnectionType` accepts the
    following options: `NONE`, `CELLULAR2G`, `CELLULAR3G`, `CELLULAR4G`, `BLUETOOTH`,
    `ETHERNET`, `WIFI`, `WIMAX`, and `OTHER`.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-33\. Test emulating network conditions
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO26-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We activate network tracking (without tuning any network parameter).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO26-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We emulate a mobile 3G network with 50 KBps as download and upload bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO26-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We get a system timestamp before loading a web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO26-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We load the index page of the practice site.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO26-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We calculate the required time to load this page.
  prefs: []
  type: TYPE_NORMAL
- en: Network monitoring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also use the CDP to monitor network traffic when interacting with web
    pages. [Example 5-34](#cdp_network_monitoring) shows a test using this feature.
    This test uses the method `add​Lis⁠tener()` of a `DevTools` object to trace HTTP
    requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-34\. Test monitoring HTTP requests and responses
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO27-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener for HTTP requests and log the captured data in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO27-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener for HTTP responses and log the captured data in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Full-page screenshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another possible use of the CDP is making screenshots of a full page (i.e.,
    capture the content page beyond the viewport). [Example 5-35](#fullpage-screenshot-chrome)
    demonstrates this feature in Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-35\. Test making a full-page screenshot using CDP in Chrome
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO28-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We load the practice page containing a long text (and therefore, its content
    goes beyond the standard viewport).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO28-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We wait until the paragraphs are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO28-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the page layout metrics (to calculate the page dimensions).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO28-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We send the CDP command to make a screenshot beyond the page viewport. As a
    result, we obtain the screenshot as a string in Base64.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO28-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We decode the Base64 content into a PNG file.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO28-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the PNG file exists at the end of the test.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is available in other browsers with a full implementation of the
    CDP, such as Chrome or Edge. Nevertheless, it might not be available in others
    like Firefox. Luckily, Firefox supports the same characteristic through the method
    `getFullPageScreenshotAs()` available in `FirefoxDriver` objects. [Example 5-36](#fullpage-screenshot-firefox)
    shows a test using this method and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-36\. Test making a full-page screenshot using Firefox
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO29-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We make the whole page screenshot. As with the regular screenshots (see [Table 4-2](ch04.html#output-types-for-screenshots)
    in [Chapter 4](ch04.html#ch04)), the output type can be `FILE`, `BASE64`, or `BYTES`.
    We use the latter to get the screenshot as a byte array.
  prefs: []
  type: TYPE_NORMAL
- en: Performance metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP allows gathering runtime performance metrics, such as number of documents
    loaded, number of DOM nodes, time to load DOM, and script duration, among many
    others. [Example 5-37](#cdp_performance_metrics) shows a test gathering these
    metrics and showing them in the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-37\. Test gathering performance metrics
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO30-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable collecting metrics.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO30-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We gather all metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Extra headers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP allows additional headers at the HTTP level. To that aim, we need to send
    the command `Network.setExtraHTTPHeaders()` in a CDP session. [Example 5-38](#cdp_extra_headers)
    shows a test that uses this command to add the HTTP header `Authorization`, for
    sending credentials (username and password) in a web page that requires basic
    authentication to log in.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-38\. Test adding extra HTTP headers
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO31-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We encode the username and password in Base64.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO31-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create the authorization header.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO31-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a web page protected with basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO31-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the page is correctly displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Block URLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP provides the ability to block given URLs in a session. [Example 5-39](#cdp_block_urls)
    provides a test blocking the practice web page logo URL. If you run this test
    and inspect the browser during the execution, you will discover that this logo
    is not displayed on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-39\. Test blocking a URL
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO32-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We block a given URL.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO32-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener to trace the failed events.
  prefs: []
  type: TYPE_NORMAL
- en: Device emulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another feature provided by CDP is the ability to emulate mobile devices (e.g.,
    smartphones, tablets). [Example 5-40](#cdp_device_emulation) illustrates this
    usage. This test first overrides the user agent by sending the command `Network.setUserAgentOverride()`.
    Then, it emulates the device metrics sending the command `Emulation.setDeviceMetrics​O⁠verride`.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-40\. Test emulating a mobile device
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO33-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We override the user agent for emulating an Apple iPhone 6.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO33-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We override the device screen parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Console listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP allows you to implement listeners to monitor console events, i.e., a web
    page JavaScript log and error traces. [Example 5-41](#cdp_console_listener) shows
    the test. This test uses a web page in the practice site that intentionally traces
    several JavaScript messages (using the commands `console.log()`, `console.error()`,
    etc.) and also throws a JavaScript exception.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-41\. Test listening to console events
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO34-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener for console events.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO34-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create another listener for JavaScript errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO34-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open the practice page that writes messages in the browser console.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO34-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We wait a maximum of five seconds until a console event is received.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO34-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We write the information on the received console event in the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO34-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We repeat the same procedure for the JavaScript exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocation override
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another feature provided by CDP is the ability to override the geolocation
    coordinates handled by the hosting device. [Example 5-42](#cdp_geolocation_override)
    demonstrates how to do it. This test sends the command `Emulation.setGeolocationOverride()`,
    which accepts three optional arguments: latitude, longitude, and accuracy.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-42\. Test overriding location coordinates
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO35-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We override the geographical location using the coordinates of the Eiffel Tower
    (Paris, France).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO35-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a practice web page that accesses the device location and displays the
    coordinates to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Manage cookies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP also allows managing web cookies. [Example 5-43](#cdp_cookies) shows a test
    reading the cookies of a practice page that manages some cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-43\. Test managing cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO36-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We read all the cookies of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO36-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the cookies read using the CDP command and the cookies read with
    the Selenium WebDriver API (using `getCookies();`) are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO36-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We remove all cookies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO36-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify there are no cookies at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Load insecure pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDP also allows you to load unsafe web pages (i.e., web pages that use HTTPS,
    but whose certificate is not valid). [Example 5-44](#cdp_insecure) illustrates
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-44\. Test loading an insecure web page
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO37-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable tracking security.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO37-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We ignore certificate errors.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO37-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the page is correctly loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Location Context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Selenium WebDriver API provides the interface `LocationContext` for mocking
    the geolocation coordinates of the user device. This interface is implemented
    by `ChromeDriver`, `EdgeDriver`, and `OperaDriver`. Therefore, these drivers can
    invoke the method `setLocation()` to specify custom coordinates (latitude, longitude,
    and altitude). [Example 5-45](#location_context) shows a basic test using this
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-45\. Test setting custom geolocation coordinates through LocationContext
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO38-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `LocationContext` (only possible for Chrome, Edge,
    or Opera).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO38-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a practice page where the geolocation coordinates are displayed to the
    end user.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO38-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We set a custom location, in this case, the coordinates of Mount Everest (on
    the Nepal-China border).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO38-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the coordinates are visible on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Web Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Web Authentication API (also known as *WebAuthn*) is a [W3C specification](https://www.w3.org/TR/webauthn-2)
    that allows servers to register and authenticate users using public key cryptography
    instead of passwords. Major browsers (Chrome, Firefox, Edge, and Safari) have
    supported WebAuthn since January 2019\. These browsers allow credential creation
    and assertion using U2F (Universal 2nd Factor) tokens, which are Universal Serial
    Bus (USB) or Near-Field Communication (NFC) secure devices.
  prefs: []
  type: TYPE_NORMAL
- en: In the classic web authentication approach, users send their username and password
    to the server using a web form. In WebAuthn, the web server uses the Web Authentication
    API to prompt the user to create a private-public key pair (known as a *credential*).
    The private key is stored securely on the user’s device, and the public key is
    sent to the server. Then, the server can use that public key to validate user
    identity.
  prefs: []
  type: TYPE_NORMAL
- en: As of version 4, Selenium WebDriver supports *WebAuthn* out of the box. To that
    aim, the Selenium WebDriver API provides the interface `HasVirtualAuthenticator`.
    Instead of using secure physical devices, this interface allows us to use virtual
    authenticators. Although the `RemoteWebDriver` class implements this interface,
    at the time of this writing, this mechanism is supported only in Chromium-based
    browsers, i.e., Chrome and Edge. [Example 5-46](#webauthn_test) shows a test using
    the Web Authentication API.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-46\. Test using WebAuthn
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO39-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a website protected with the Web Authentication API.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO39-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `HasVirtualAuthenticator`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO39-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We create and register a new virtual authenticator.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO39-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We send a random identifier in the web form.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO39-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We submit that identifier and wait until it is received.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO39-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We click the button to log in.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_specific_manipulation_CO39-7)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the authentication has been correctly performed.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_specific_manipulation_CO39-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We remove the virtual authenticator.
  prefs: []
  type: TYPE_NORMAL
- en: Print Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver allows printing web pages to PDF documents. To do that, the
    Selenium WebDriver API provides the interface `PrintsPage`. This interface is
    inherited by the class `RemoteWebDriver`, and therefore, it is available for all
    browsers supported by Selenium WebDriver. Nevertheless, there are slight differences
    when using one or another browser. For instance, printing pages is possible when
    using Chrome and Edge only if the browser is started in headless mode. For Firefox,
    this restriction is not required, and we can use Firefox as usual. [Example 5-47](#print_page)
    shows the test logic for printing a web page to PDF. You can find the complete
    tests for Firefox and headless Chrome/Edge in the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java).
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-47\. Test printing a web page to PDF
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO40-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `PrintsPage`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO40-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We print the current web page to PDF using the default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO40-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the content of the PDF in Base64.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO40-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify this content contains the file signature (the “magic word” `JVBER`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO40-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We convert the Base64 to a raw byte array.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_specific_manipulation_CO40-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We write the PDF content (byte array) to a local file.
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver BiDi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [WebDriver BiDi](https://w3c.github.io/webdriver-bidi) is a W3C draft that
    defines the bidirectional WebDriver protocol. Instead of the strict command/response
    format of the WebDriver protocol, BiDi introduces a WebSocket connection between
    driver and browser to enable bidirectional communication. This way, WebDriver
    BiDi will allow different operations using a fast bidirectional transport (i.e.,
    without polling the browser to get responses).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Selenium WebDriver, the aim is that BiDi will be a standardized replacement
    in the long run for advanced operations currently supported by CDP. For example,
    the Selenium WebDriver API supports implementing event listeners through the `HasLog​E⁠vents`
    interface. This interface works on top of CDP at the time of this writing. Nevertheless,
    it will use BiDi internally in future Selenium WebDriver releases, providing more
    robust cross-browser compatibility. `HasLogEvents` allows implementing listeners
    for the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`domMutation`'
  prefs: []
  type: TYPE_NORMAL
- en: To capture events about changes in the DOM. [Example 5-48](#webdriver_bidi_1)
    shows a test implementing a listener for these events.
  prefs: []
  type: TYPE_NORMAL
- en: '`consoleEvent`'
  prefs: []
  type: TYPE_NORMAL
- en: To capture events about changes in the browser console, such as JavaScript traces.
    [Example 5-49](#webdriver_bidi_2) shows a second test implementing this type of
    listener.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-48\. Test implementing a listener for DOM mutation events
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO41-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `HasLogEvents`. This cast is only possible for
    Chrome and Edge.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO41-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener for DOM mutation events. This test expects to capture only
    one event, synchronized using a countdown latch.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_specific_manipulation_CO41-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We force a DOM mutation by executing JavaScript to change an image source.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_specific_manipulation_CO41-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the event occurs at most in 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_specific_manipulation_CO41-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We check the image source has changed.
  prefs: []
  type: TYPE_NORMAL
- en: Example 5-49\. Test implementing a listener for console events
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_specific_manipulation_CO42-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a listener for console events. This test expects to capture four events
    synchronized using a countdown latch.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_specific_manipulation_CO42-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We open the practice web page, which logs several messages in the JavaScript
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Outlook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented a practical overview of the Selenium WebDriver API features
    that are not interoperable among browsers. First, you discovered how to use capabilities
    to run browsers in headless mode, change the page loading strategy, use web extensions,
    or manage browser pop-ups (e.g., geolocation, notifications, or getting user media),
    among other capabilities. Then, you learned that Selenium WebDriver provides different
    ways to interact with web browsers using the CDP. This mechanism allows incorporating
    a lot of powerful features in our Selenium WebDriver tests, such as emulating
    network conditions, basic and digest authentication, network monitoring, handling
    HTTP headers, or blocking URLs, to name a few. Then, you discovered other browser-specific
    features, such as location context, web authentication (WebAuthn), and printing
    web pages to PDF documents. Finally, you learned about WebDriver BiDi, a draft
    standardization that defines bidirectional communication with browsers for automation
    purposes. BiDi is in an early stage at the time of this writing. The aim is that
    Selenium WebDriver will support different standard features on top of BiDi in
    future releases.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter concludes our journey with the Selenium WebDriver API. The
    chapter explains how to use this API to control remote browsers. These browsers
    can be hosted on Selenium Grid, a cloud provider (e.g., Sauce Labs, BrowserStack,
    or CrossBrowserTesting), or executed in Docker containers.
  prefs: []
  type: TYPE_NORMAL
