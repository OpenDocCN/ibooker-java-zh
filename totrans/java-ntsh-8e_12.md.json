["```java\n// Get a file object to represent the user's home directory\nvar homedir = new File(System.getProperty(\"user.home\"));\n\n// Create an object to represent a config file (should\n// already be present in the home directory)\nvar f = new File(homedir, \"app.conf\");\n\n// Check the file exists, really is a file, and is readable\nif (f.exists() && f.isFile() && f.canRead()) {\n\n  // Create a file object for a new configuration directory\n  var configdir = new File(homedir, \".configdir\");\n  // And create it\n  configdir.mkdir();\n\n  // Finally, move the config file to its new home\n  f.renameTo(new File(configdir, \".config\"));\n}\n```", "```java\n// Permissions management\nboolean canX = f.canExecute();\nboolean canR = f.canRead();\nboolean canW = f.canWrite();\n\nboolean ok;\nok = f.setReadOnly();\nok = f.setExecutable(true);\nok = f.setReadable(true);\nok = f.setWritable(false);\n\n// Different views of the file's name\nFile absF = f.getAbsoluteFile();\nFile canF = f.getCanonicalFile();\nString absName = f.getAbsolutePath();\nString canName = f.getCanonicalPath();\nString name = f.getName();\nString pName = f.getParent();\nURI fileURI = f.toURI(); // Create URI for File path\n\n// File metadata\nboolean exists = f.exists();\nboolean isAbs = f.isAbsolute();\nboolean isDir = f.isDirectory();\nboolean isFile = f.isFile();\nboolean isHidden = f.isHidden();\nlong modTime = f.lastModified(); // milliseconds since epoch\nboolean updateOK = f.setLastModified(updateTime); // milliseconds\nlong fileLen = f.length();\n\n// File management operations\nboolean renamed = f.renameTo(destFile);\nboolean deleted = f.delete();\n\n// Create won't overwrite existing file\nboolean createdOK = f.createNewFile();\n\n// Temporary file handling\nvar tmp = File.createTempFile(\"my-tmp\", \".tmp\");\ntmp.deleteOnExit();\n\n// Directory handling\nboolean createdDir = dir.mkdir(); // Non-recursive create only\nString[] fileNames = dir.list();\nFile[] files = dir.listFiles();\n```", "```java\nlong free = f.getFreeSpace();\nlong total = f.getTotalSpace();\nlong usable = f.getUsableSpace();\n\nFile[] roots = File.listRoots(); // all available Filesystem roots\n```", "```java\nSystem.out.println(\"Hello World!\");\n```", "```java\ntry (var is = new FileInputStream(\"/Users/ben/cluster.txt\")) {\n  byte[] buf = new byte[4096];\n  int len, count = 0;\n  while ((len = is.read(buf)) > 0) {\n    for (int i = 0; i < len; i = i + 1) {\n      if (buf[i] == 97) {\n        count = count + 1;\n      }\n    }\n  }\n  System.out.println(\"'a's seen: \"+ count);\n} catch (IOException e) {\n  e.printStackTrace();\n}\n```", "```java\ntry (var in = new BufferedReader(new FileReader(filename))) {\n  String line;\n\n  while((line = in.readLine()) != null) {\n    System.out.println(line);\n  }\n} catch (IOException e) {\n  // Handle FileNotFoundException, etc. here\n}\n```", "```java\n// Meta example: \"#info username\"\nvar SHELL_META_START = Pattern.compile(\"^#(\\\\w+)\\\\s*(\\\\w+)?\");\n\ntry (var console =\n      new BufferedReader(new InputStreamReader(System.in))) {\n  String line;\n\n  while((line = console.readLine()) != null) {\n    // Check for special commands (\"metas\")\n    Matcher m = SHELL_META_START.matcher(line);\n    if (m.find()) {\n      String metaName = m.group(1);\n      String arg = m.group(2);\n      doMeta(metaName, arg);\n    } else {\n      System.out.println(line);\n    }\n  }\n} catch (IOException e) {\n  // Handle FileNotFoundException, etc. here\n}\n```", "```java\nvar f = new File(System.getProperty(\"user.home\")\n + File.separator + \".bashrc\");\ntry (var out =\n      new PrintWriter(new BufferedWriter(new FileWriter(f)))) {\n  out.println(\"## Automatically generated config file. DO NOT EDIT\");\n  // ...\n} catch (IOException iox) {\n  // Handle exceptions\n}\n```", "```java\ntry (var in = new BufferedReader(\n                           new FileReader(\"profile\"));\n     var out = new PrintWriter(\n                         new BufferedWriter(\n                           new FileWriter(\"profile.bak\")))) {\n  String line;\n  while((line = in.readLine()) != null) {\n    out.println(line);\n  }\n} catch (IOException e) {\n  // Handle FileNotFoundException, etc. here\n}\n```", "```java\nvar inputFile = new File(\"input.txt\");\ntry (var in = new FileInputStream(inputFile)) {\n  Files.copy(in, Path.of(\"output.txt\"));\n} catch(IOException ex) {\n  ex.printStackTrace();\n}\n```", "```java\nPath source, target;\nAttributes attr;\nCharset cs = StandardCharsets.UTF_8;\n\n// Creating files\n//\n// Example of path --> /home/ben/.profile\n// Example of attributes --> rw-rw-rw-\nFiles.createFile(target, attr);\n\n// Deleting files\nFiles.delete(target);\nboolean deleted = Files.deleteIfExists(target);\n\n// Copying/moving files\nFiles.copy(source, target);\nFiles.move(source, target);\n\n// Utility methods to retrieve information\nlong size = Files.size(target);\n\nFileTime fTime = Files.getLastModifiedTime(target);\nSystem.out.println(fTime.to(TimeUnit.SECONDS));\n\nMap<String, ?> attrs = Files.readAttributes(target, \"*\");\nSystem.out.println(attrs);\n\n// Methods to deal with file types\nboolean isDir = Files.isDirectory(target);\nboolean isSym = Files.isSymbolicLink(target);\n\n// Methods to deal with reading and writing\nList<String> lines = Files.readAllLines(target, cs);\nbyte[] b = Files.readAllBytes(target);\n\nvar br = Files.newBufferedReader(target, cs);\nvar bwr = Files.newBufferedWriter(target, cs);\n\nvar is = Files.newInputStream(target);\nvar os = Files.newOutputStream(target);\n```", "```java\nFiles.copy(Path.of(\"input.txt\"), Path.of(\"output.txt\"),\n           StandardCopyOption.REPLACE_EXISTING);\n```", "```java\nvar p = Path.of(\"/Users/ben/cluster.txt\");\nvar p2 = Path.of(new URI(\"file:///Users/ben/cluster.txt\"));\nSystem.out.println(p2.equals(p));\n\nFile f = p.toFile();\nSystem.out.println(f.isDirectory());\n\nPath p3 = f.toPath();\nSystem.out.println(p3.equals(p));\n```", "```java\nvar logFile = Path.of(\"/tmp/app.log\");\ntry (var writer =\n       Files.newBufferedWriter(logFile, StandardCharsets.UTF_8,\n                               StandardOpenOption.WRITE,\n                               StandardOpenOption.CREATE)) {\n  writer.write(\"Hello World!\");\n  // ...\n} catch (IOException e) {\n  // ...\n}\n```", "```java\nvar tempJar = Path.of(\"sample.jar\");\ntry (var workingFS =\n      FileSystems.newFileSystem(tempJar)) {\n\n  Path pathForFile = workingFS.getPath(\"/hello.txt\");\n  Files.write(pathForFile,\n              List.of(\"Hello World!\"),\n              Charset.defaultCharset(),\n              StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n}\n```", "```java\nfor (FileSystemProvider f : FileSystemProvider.installedProviders()) {\n    System.out.println(f.toString());\n}\n```", "```java\nPath tmpdir = Files.createTempDirectory(Path.of(\"/tmp\"), \"tmp-test\");\ntry (InputStream in =\n      FilesExample.class.getResourceAsStream(\"/res.txt\")) {\n    Path copied = tmpdir.resolve(\"copied-resource.txt\");\n    Files.copy(in, copied, StandardCopyOption.REPLACE_EXISTING);\n    // ... work with the copy\n}\n// Clean up when done...\nFiles.walkFileTree(tmpdir, new Reaper());\n```", "```java\nvar b = ByteBuffer.allocateDirect(65536);\nvar b2 = ByteBuffer.allocate(4096);\n\nbyte[] data = {1, 2, 3};\nByteBuffer b3 = ByteBuffer.wrap(data);\n```", "```java\nb.order(ByteOrder.BIG_ENDIAN);\n\nint capacity = b.capacity();\nint position = b.position();\nint limit = b.limit();\nint remaining = b.remaining();\nboolean more = b.hasRemaining();\n```", "```java\nb.put((byte)42);\nb.putChar('x');\nb.putInt(0xc001c0de);\n\nb.put(data);\nb.put(b2);\n\ndouble d = b.getDouble();\nb.get(data, 0, data.length);\n```", "```java\nb.put(0, (byte)9);\n```", "```java\nFileInputStream fis = getSomeStream();\nboolean fileOK = true;\n\ntry (FileChannel fchan = fis.getChannel()) {\n  var buffy = ByteBuffer.allocateDirect(16 * 1024 * 1024);\n  while(fchan.read(buffy) != -1 || buffy.position() > 0 || fileOK) {\n    fileOK = computeChecksum(buffy);\n    buffy.compact();\n  }\n} catch (IOException e) {\n  System.out.println(\"Exception in I/O\");\n}\n```", "```java\ntry (var raf =\n  new RandomAccessFile(new File(\"input.txt\"), \"rw\");\n     FileChannel fc = raf.getChannel();) {\n\n  MappedByteBuffer mbf =\n    fc.map(FileChannel.MapMode.READ_WRITE, 0, fc.size());\n  var b = new byte[(int)fc.size()];\n  mbf.get(b, 0, b.length);\n  for (int i = 0; i < fc.size(); i = i + 1) {\n    b[i] = 0; // Won't be written back to the file, we're a copy\n  }\n  mbf.position(0);\n  mbf.put(b); // Zeros the file\n}\n```", "```java\ntry (var channel =\n         AsynchronousFileChannel.open(Path.of(\"input.txt\"))) {\n  var buffer = ByteBuffer.allocateDirect(1024 * 1024 * 100);\n  Future<Integer> result = channel.read(buffer, 0);\n\n  while(!result.isDone()) {\n    // Do some other useful work....\n  }\n\n  System.out.println(\"Bytes read: \" + result.get());\n}\n```", "```java\nbyte[] data = {2, 3, 5, 7, 11, 13, 17, 19, 23};\nByteBuffer buffy = ByteBuffer.wrap(data);\n\nCompletionHandler<Integer,Object> h =\n  new CompletionHandler<>() {\n    public void completed(Integer written, Object o) {\n      System.out.println(\"Bytes written: \" + written);\n    }\n\n    public void failed(Throwable x, Object o) {\n      System.out.println(\"Asynch write failed: \"+ x.getMessage());\n    }\n  };\n\ntry (var channel =\n       AsynchronousFileChannel.open(Path.of(\"primes.txt\"),\n          StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {\n\n  channel.write(buffy, 0, null, h);\n\n  // Give the CompletionHandler time to run before foreground exit\n  Thread.sleep(1000);\n}\n```", "```java\ntry {\n  var watcher = FileSystems.getDefault().newWatchService();\n\n  var dir = FileSystems.getDefault().getPath(\"/home/ben\");\n  dir.register(watcher,\n                StandardWatchEventKinds.ENTRY_CREATE,\n                StandardWatchEventKinds.ENTRY_MODIFY,\n                StandardWatchEventKinds.ENTRY_DELETE);\n\n  while(!shutdown) {\n    WatchKey key = watcher.take();\n    for (WatchEvent<?> event: key.pollEvents()) {\n      Object o = event.context();\n      if (o instanceof Path) {\n        System.out.println(\"Path altered: \"+ o);\n      }\n    }\n    key.reset();\n  }\n}\n```", "```java\ntry(DirectoryStream<Path> stream =\n    Files.newDirectoryStream(Path.of(\"/opt/projects\"), \"*.java\")) {\n  for (Path p : stream) {\n    System.out.println(p +\": \"+ Files.size(p));\n  }\n}\n```", "```java\nvar homeDir = Path.of(\"/Users/ben/projects/\");\nFiles.find(homeDir, 255,\n  (p, attrs) -> p.toString().endsWith(\".java\"))\n     .forEach(q -> {System.out.println(q.normalize());});\n```", "```java\nvar url = new URL(\"http://www.google.com/\");\ntry (InputStream in = url.openStream()) {\n  Files.copy(in, Path.of(\"output.txt\"));\n} catch(IOException ex) {\n  ex.printStackTrace();\n}\n```", "```java\ntry {\n  URLConnection conn = url.openConnection();\n\n  String type = conn.getContentType();\n  String encoding = conn.getContentEncoding();\n  Date lastModified = new Date(conn.getLastModified());\n  int len = conn.getContentLength();\n  InputStream in = conn.getInputStream();\n} catch (IOException e) {\n  // Handle exception\n}\n```", "```java\nvar url = new URL(\"https://postman-echo.com/post\");\nvar encodedData = URLEncoder.encode(\"q=java\", \"ASCII\");\nvar contentType = \"application/x-www-form-urlencoded\";\n\nvar conn = (HttpURLConnection) url.openConnection();\nconn.setInstanceFollowRedirects(false);\nconn.setRequestMethod(\"POST\");\nconn.setRequestProperty(\"Content-Type\", contentType );\nconn.setRequestProperty(\"Content-Length\",\n  String.valueOf(encodedData.length()));\n\nconn.setDoOutput(true);\nOutputStream os = conn.getOutputStream();\nos.write( encodedData.getBytes() );\n\nint response = conn.getResponseCode();\nif (response == HttpURLConnection.HTTP_MOVED_PERM\n    || response == HttpURLConnection.HTTP_MOVED_TEMP) {\n  System.out.println(\"Moved to: \"+ conn.getHeaderField(\"Location\"));\n} else {\n  try (InputStream in = conn.getInputStream()) {\n    Files.copy(in, Path.of(\"postman.txt\"),\n                StandardCopyOption.REPLACE_EXISTING);\n  }\n}\n```", "```java\n        var client = HttpClient.newBuilder().build();\n        var uri = new URI(\"https://www.oreilly.com\");\n        var request = HttpRequest.newBuilder(uri).build();\n\n        var response = client.send(request,\n                ofString(Charset.defaultCharset()));\n        var body = response.body();\n        System.out.println(body);\n```", "```java\nvar hostname = \"www.example.com\";\nint port = 80;\nvar filename = \"/index.xhtml\";\n\ntry (var sock = new Socket(hostname, port);\n  var from = new BufferedReader(\n      new InputStreamReader(sock.getInputStream()));\n  var to = new PrintWriter(\n      new OutputStreamWriter(sock.getOutputStream())); ) {\n\n  // The HTTP protocol\n  to.print(\"GET \" + filename +\n    \" HTTP/1.1\\r\\nHost: \"+ hostname +\"\\r\\n\\r\\n\");\n  to.flush();\n\n  for (String l = null; (l = from.readLine()) != null; )\n    System.out.println(l);\n}\n```", "```java\n// Handler class\nprivate static class HttpHandler implements Runnable {\n  private final Socket sock;\n  HttpHandler(Socket client) { this.sock = client; }\n\n  public void run() {\n    try (var in =\n           new BufferedReader(\n             new InputStreamReader(sock.getInputStream()));\n         var out =\n           new PrintWriter(\n             new OutputStreamWriter(sock.getOutputStream())); ) {\n      out.print(\"HTTP/1.0 200\\r\\nContent-Type: text/plain\\r\\n\\r\\n\");\n      String line;\n      while((line = in.readLine()) != null) {\n        if (line.length() == 0) break;\n        out.println(line);\n      }\n    } catch(Exception e) {\n      // Handle exception\n    }\n  }\n}\n\n// Main server loop\npublic static void main(String[] args) {\n  try {\n    var port = Integer.parseInt(args[0]);\n\n    ServerSocket ss = new ServerSocket(port);\n    while (true) {\n      Socket client = ss.accept();\n      var handler = new HTTPHandler(client);\n      new Thread(handler).start();\n    }\n  } catch (Exception e) {\n    // Handle exception\n  }\n}\n```"]