- en: Chapter 1\. Introduction to the Java Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 介绍Java环境
- en: Welcome to Java in 2023.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到2023年的Java世界。
- en: You may be coming to the Java world from another tradition, or maybe this is
    your first taste of computer programming. Whatever road you may have traveled
    to get here, welcome—​we’re glad you’ve arrived.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能是从另一个传统来到Java世界，或者这可能是你第一次接触计算机编程。无论你是以何种方式来到这里，欢迎——我们很高兴你来了。
- en: Java is a powerful, general-purpose programming environment. It is one of the
    most widely used programming environments in the world and has been exceptionally
    successful in business and enterprise computing for over 25 years.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一个功能强大的通用编程环境。它是世界上使用最广泛的编程环境之一，在商业和企业计算方面取得了非常成功的成就超过25年。
- en: In this chapter, we’ll set the scene by describing the Java *language* (which
    programmers write their applications in), the Java *execution environment* (known
    as the “Java Virtual Machine,” which actually runs those applications), and the
    Java *ecosystem* (which provides a lot of the value of the programming environment
    to development teams).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过描述Java *语言*（程序员编写应用程序的语言）、Java *执行环境*（称为“Java虚拟机”，实际运行这些应用程序的环境）和Java
    *生态系统*（为开发团队提供编程环境价值的大部分内容）来揭开序幕。
- en: All three of these concepts (language, execution environment, and ecosystem)
    are habitually referred to just as “Java,” with the precise usage inferred from
    context. In practice, they are such connected ideas that this isn’t as confusing
    as it might first seem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个概念（语言、执行环境和生态系统）通常被简称为“Java”，具体用法取决于上下文。实际上，它们是如此紧密相关的想法，以至于这并不像一开始看起来那么令人困惑。
- en: We’ll briefly cover the history of the Java language and virtual machine, move
    on to discuss the lifecycle of a Java program, and then clear up some common questions
    about the differences between Java and other environments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍Java语言和虚拟机的历史，然后讨论Java程序的生命周期，最后解答一些关于Java和其他环境的常见问题。
- en: The Language, the JVM, and the Ecosystem
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言、JVM和生态系统
- en: The base Java programming environment has been around since the late 1990s.
    It is composed of the Java language and the supporting runtime, the Java Virtual
    Machine (JVM). The third leg—the Java ecosystem beyond the standard library that
    ships with Java—is provided by third parties, such as open-source projects and
    Java technology vendors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程环境自上世纪90年代末就存在了。它由Java语言和支持的运行时环境Java虚拟机（JVM）组成。第三个要素——超出Java标准库的Java生态系统——由第三方提供，例如开源项目和Java技术供应商。
- en: At the time that Java was initially developed, this split was considered novel,
    but trends in software development in the intervening years have made it more
    commonplace. Notably, Microsoft’s .NET environment, announced a few years after
    Java, adopted a very similar approach to platform architecture.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java最初开发的时候，这种分离被认为是一种新颖的方式，但是在接下来的几年里，软件开发的趋势使它变得更加普遍。值得注意的是，微软的.NET环境在Java之后几年宣布采用了非常类似的平台架构。
- en: One important difference between Microsoft’s .NET platform and Java is that
    Java was always conceived as a relatively open ecosystem of multiple vendors,
    albeit led by a steward who owns the technology. Throughout Java’s history, these
    vendors have both cooperated and competed on aspects of Java technology.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的.NET平台和Java之间的一个重要区别是，Java始终被构想为一个相对开放的多供应商生态系统，尽管由一个拥有该技术的管理者领导。在Java的历史中，这些供应商在Java技术的各个方面既合作又竞争。
- en: One of the main reasons for Java’s success is that this ecosystem is a standardized
    environment. This means there are specifications for the technologies that comprise
    the environment. These standards give the developer and consumer confidence that
    the technology will be compatible with other components, even if they come from
    a different technology vendor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java成功的主要原因之一是这个生态系统是一个标准化环境。这意味着组成环境的技术有规范。这些标准使开发者和用户确信，即使这些技术来自不同的技术供应商，它们也将与其他组件兼容。
- en: The current steward of Java is Oracle Corporation (which acquired Sun Microsystems,
    the originator of Java). Other corporations, such as Red Hat, IBM, Amazon, Microsoft,
    AliBaba, SAP, Azul Systems, and Bellsoft, are also involved in producing implementations
    of standardized Java technologies.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Java目前的管理者是Oracle Corporation（收购了Java的发起者Sun Microsystems）。其他公司，如Red Hat、IBM、Amazon、Microsoft、AliBaba、SAP、Azul
    Systems和Bellsoft，也参与生产标准化Java技术的实现。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: From Java 7 onwards, the reference implementation of Java is the open source
    OpenJDK (Java Development Kit), which many of these companies collaborate on and
    base their shipping products upon.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从Java 7开始，Java的参考实现是开源的OpenJDK（Java开发工具包），许多公司在此基础上进行合作并发布他们的产品。
- en: Java was originally composed of several different, but related, environments
    and specifications, such as Java Mobile Edition (Java ME),^([1](ch01.xhtml#idm45927769483360))
    Java Standard Edition (Java SE), and Java Enterprise Edition (Java EE).^([2](ch01.xhtml#idm45927773664480))
    In this book, we’ll only cover Java SE, version 17, with some historical notes
    related to when certain features were introduced into the platform. Generally
    speaking, if someone says “Java” without any further clarification, they usually
    mean Java SE.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java最初由几个不同但相关的环境和规范组成，如Java Mobile Edition（Java ME），^([1](ch01.xhtml#idm45927769483360))
    Java Standard Edition（Java SE）和Java Enterprise Edition（Java EE）。^([2](ch01.xhtml#idm45927773664480))
    在本书中，我们将只涵盖Java SE 17，并附带某些历史注解，相关内容涉及某些功能何时引入到该平台中。一般而言，如果没有进一步的澄清，人们提到“Java”，通常指的是Java
    SE。
- en: We will have more to say about standardization later, so let’s move on to discuss
    the Java language and JVM as separate but related concepts.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将详细讨论标准化问题，因此让我们继续讨论Java语言和JVM作为分开但相关的概念。
- en: What Is the Java Language?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java语言是什么？
- en: Java programs are written as source code in the Java language. This is a human-readable
    programming language, which is strictly class based and object-oriented. The language
    syntax is deliberately modeled on that of C and C++, and it was explicitly intended
    to be familiar to programmers coming from those languages, which were very dominant
    languages at the time Java was created.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java程序以Java语言的源代码形式编写。这是一种人类可读的编程语言，严格基于类并面向对象。语法设计有意模仿C和C++，明确旨在让那些从这些语言转来的程序员感到熟悉，这两种语言在Java创建时期非常主导。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Although the source code is similar to C++, in practice Java includes features
    and a managed runtime that has much more in common with dynamic languages such
    as Smalltalk.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管源代码类似于C++，但在实践中，Java包括与Smalltalk等动态语言更多相似的特性和受控运行时。
- en: Java is considered to be relatively easy to read and write (if occasionally
    a bit verbose). It has a rigid grammar and simple program structure and is intended
    to be easy to learn and to teach. It is built on industry experience with languages
    like C++ and tries to remove complex features as well as preserving “what works”
    from previous programming languages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Java被认为相对易于阅读和编写（尽管有时有些啰嗦）。它具有严格的语法和简单的程序结构，旨在易于学习和教学。它建立在C++等语言的行业经验之上，并尝试删除复杂的特性，同时保留了先前编程语言中有效的部分。
- en: The Java language is governed by the Java Language Specification (JLS), which
    defines how a conforming implementation must behave.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Java语言由Java语言规范（JLS）管理，定义了符合实现的行为。
- en: Overall, Java is intended to provide a stable, solid base for companies to develop
    business-critical applications. As a programming language, it has a relatively
    conservative design and a slow rate of change. These properties are a conscious
    attempt to serve the goal of protecting the investment that organizations have
    made in Java technology.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Java旨在为公司开发关键业务应用提供稳定、坚实的基础。作为一种编程语言，它设计相对保守，变化缓慢。这些特性是有意为之，旨在保护组织在Java技术上的投资。
- en: The language has undergone gradual revision (but no complete rewrites) since
    its inception in 1996\. This does mean that some of Java’s original design choices,
    which were expedient in the late 1990s, are still affecting the language today—see
    Chapters [2](ch02.xhtml#javanut8-CHP-2) and [3](ch03.xhtml#javanut8-CHP-3) for
    more details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自1996年创立以来，语言经历了逐步修订（但没有完全重写）。这意味着Java一些最初的设计选择，虽然在90年代末是权宜之计，但至今仍在影响着语言的发展—详见第[2](ch02.xhtml#javanut8-CHP-2)章和第[3](ch03.xhtml#javanut8-CHP-3)章了解更多细节。
- en: On the other hand, in the last 10 or so years, Java has modernized its language
    syntax somewhat, to address concerns about verbosity and provide features more
    familiar to programmers coming from other popular languages.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在过去的10多年中，Java在语法上有所现代化，以解决啰嗦性和提供更为熟悉的功能，以吸引来自其他流行语言的程序员。
- en: For example, in 2014, Java 8 added the most radical changes seen in the language
    for almost a decade. Features like lambda expressions and the introduction of
    the Streams API were enormously popular and changed forever the way that Java
    developers write code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在2014年，Java 8增加了近十年来语言中看到的最激进的变化。 像Lambda表达式和引入Streams API等功能非常受欢迎，并永久改变了Java开发人员编写代码的方式。
- en: As we’ll discuss later in this chapter, the Java project has transitioned to
    a new release model. In this new model Java versions are released every 6 months
    but only certain versions (8, 11, and 17) are considered eligible for LTS. All
    other versions are supported for only 6 months and have not seen widespread adoption
    by development teams.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本章后面讨论的那样，Java项目已经过渡到了一个新的发布模型。 在这个新模型中，Java版本每6个月发布一次，但只有特定版本（8、11和17）被认为是LTS合格的。
    所有其他版本仅支持6个月，未被开发团队广泛采纳。
- en: What Is the JVM?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是JVM？
- en: The JVM is a program that provides the runtime environment necessary for Java
    programs to execute. Java programs cannot run unless there is a JVM available
    for the appropriate hardware and OS platform we wish to execute on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JVM是一个提供Java程序运行环境所必需的程序。 如果没有适合我们希望在其上执行的硬件和操作系统平台的JVM，则Java程序无法运行。
- en: Fortunately, the JVM has been ported to run on a large number of hardware environments—anything
    from a set-top box or Blu-ray player to a huge mainframe will probably have a
    JVM available for it. The JVM has its own specification, the Java Virtual Machine
    Specification, and every implementation must conform to the rules of the specification.
    When new hardware types arrive in the mainstream market then it is likely that
    companies or individuals interested in the hardware will start a project to port
    OpenJDK to the new chip. A recent example of this was the new Apple M1 chip—Red
    Hat ported the JVM to the AArch64 architecture and then Microsoft ported the build
    changes needed to build on Apple’s silicon.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，JVM已被移植到许多硬件环境中——从机顶盒或蓝光播放器到大型主机，几乎都可以为其提供JVM。 JVM有其自己的规范，即Java虚拟机规范，每个实现都必须符合该规范的规则。
    当新的硬件类型进入主流市场时，可能会有公司或个人对该硬件感兴趣，从而启动一个项目来将OpenJDK移植到新的芯片上。 最近的一个例子是新的Apple M1芯片——Red
    Hat将JVM移植到AArch64架构，然后微软对构建所需的Apple硅进行了移植更改。
- en: 'Java programs can be started in several ways, but the simplest (and oldest)
    method is to start from a command line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Java程序可以通过多种方式启动，但最简单（也是最早的）方法是从命令行启动：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This brings up the JVM as an operating system process that provides the Java
    runtime environment and then executes our program in the context of the freshly
    started (and empty) virtual machine.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JVM作为操作系统进程启动，提供Java运行环境，然后在全新启动（空）虚拟机的背景下执行我们的程序。
- en: It is important to understand that when the JVM takes in a Java program for
    execution, the program is not provided as Java language source code. Instead,
    the Java language source must be compiled into a form known as Java bytecode.
    Java bytecode is then supplied to the JVM in a format called class files (which
    always have a *.class* extension). The Java platform has always emphasized backward
    compatibility, and code written for Java 1.0 will still run on today’s JVMs without
    modification or recompilation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的是，当JVM接收Java程序进行执行时，程序不是以Java语言源代码的形式提供的。 相反，Java语言源代码必须编译成称为Java字节码的形式。
    Java字节码以class文件的形式提供给JVM（其扩展名始终为*.class*）。 Java平台一直强调向后兼容性，编写Java 1.0的代码仍然可以在今天的JVM上运行，无需修改或重新编译。
- en: The JVM provides an *execution environment* for the program. It starts an interpreter
    for the bytecode form of the program that steps through one bytecode instruction
    at a time. However, production-quality JVMs also provide a special compiler that
    operates while the Java program is running. This compiler (known as a “JIT” or
    just-in-time) will accelerate the important parts of the program by replacing
    them with equivalent compiled (and heavily optimized) machine code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: JVM为程序提供了*执行环境*。 它启动了一个字节码形式程序的解释器，逐条执行字节码指令。 然而，生产质量的JVM还提供了一个特殊的编译器，在Java程序运行时运行。
    这个编译器（称为“JIT”或即时编译器）通过用等效的编译（和高度优化的）机器代码替换重要部分来加速程序的执行。
- en: You should also be aware that both the JVM and the user program are capable
    of spawning additional threads of execution, so that a user program may have many
    different functions running simultaneously.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该知道，JVM 和用户程序都能够生成额外的执行线程，因此用户程序可以同时运行许多不同的函数。
- en: 'The original design of the JVM was built on many years of experience with earlier
    programming environments, notably C and C++, so we can think of it as having several
    different goals—all intended to make life easier for the programmer:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 的原始设计基于对较早编程环境（特别是 C 和 C++）多年的经验，因此我们可以将其视为具有几个不同目标——全部旨在为程序员简化生活：
- en: Comprise a standard execution environment for application code to run inside
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构成应用代码运行的标准执行环境
- en: Facilitate secure and reliable code execution (as compared to C/C++)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进安全可靠的代码执行（与 C/C++ 相比）
- en: Take low-level memory management out of the hands of developers
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将低级内存管理从开发者手中拿走
- en: Provide a cross-platform execution environment
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供跨平台执行环境
- en: These objectives are often mentioned together in discussions of the platform.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目标经常在平台讨论中一起提到。
- en: We’ve already mentioned the first of these goals, when we discussed the JVM
    and its bytecode interpreter—it functions as the container for application code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论 JVM 及其字节码解释器时，已经提到了这些目标的第一个——它作为应用代码的容器。
- en: We’ll discuss the second and third goals in [Chapter 6](ch06.xhtml#javanut8-CHP-6),
    when we talk about how the Java environment deals with memory management.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论 Java 环境如何处理内存管理时，我们将在[第6章](ch06.xhtml#javanut8-CHP-6)中讨论第二个和第三个目标。
- en: The fourth goal, sometimes called “write once, run anywhere” (WORA), is the
    property that Java class files can be moved from one execution platform to another,
    and they will run unaltered provided a JVM is available.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个目标，有时被称为“一次编写，到处运行”（WORA），是 Java 类文件可以从一个执行平台移动到另一个，只要有 JVM 可用，它们就会运行不变。
- en: This means that a Java program can be developed (and converted to class files)
    on a machine running macOS on an M1 chip, and then the class files can be moved
    to Linux or Microsoft Windows on Intel hardware (or other platforms) and the Java
    program will run without any further work needed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着可以在运行 macOS 上的 M1 芯片的机器上开发 Java 程序（并转换为类文件），然后将类文件移动到 Linux 或 Microsoft
    Windows 上的 Intel 硬件（或其他平台），Java 程序将无需进一步工作即可运行。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Java environment has been very widely ported, including to platforms that
    are very different from mainstream platforms like Linux, macOS, and Windows. In
    this book, we use the phrase “most implementations” to indicate those platforms
    that the majority of developers are likely to encounter; macOS, Windows, Linux,
    BSD Unix, and the like are all considered “mainstream platforms” and count within
    “most implementations.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Java 环境已经广泛移植，包括到与主流平台如 Linux、macOS 和 Windows 非常不同的平台。在本书中，我们使用术语“大多数实现”来表示大多数开发者可能会遇到的平台；macOS、Windows、Linux、BSD
    Unix 等都被视为“主流平台”并且在“大多数实现”中计数。
- en: In addition to these four primary goals, there is another aspect of the JVM’s
    design that is not always recognized or discussed—it uses runtime information
    to self-manage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这四个主要目标之外，JVM 设计的另一个方面经常未被认可或讨论——它使用运行时信息进行自管理。
- en: Software research in the 1970s and 1980s revealed that the runtime behavior
    of programs has a large number of interesting and useful patterns that cannot
    be deduced at compile time. The JVM was the first truly mainstream programming
    environment to use the results of this research.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 20世纪70年代和80年代的软件研究揭示了程序的运行时行为有许多有趣和有用的模式，这些模式在编译时无法推断出。JVM 是第一个真正主流的编程环境，使用了这些研究结果。
- en: It collects runtime information to make better decisions about how to execute
    code. That means that the JVM can monitor and optimize a program running on it
    in a manner not possible for platforms without this capability.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它收集运行时信息以做出更好的代码执行决策。这意味着 JVM 能够监控并优化在其上运行的程序，这是其他平台无法实现的。
- en: A key example is the runtime fact that not all parts of a Java program are equally
    likely to be called during the lifetime of the program—some portions will be called
    far, far more often than others. The Java platform takes advantage of this fact
    with a technology called just-in-time (JIT) compilation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键例子是运行时事实，即Java程序的各个部分在程序生命周期内被调用的可能性并不相等——某些部分远远比其他部分频繁调用。Java平台利用这一事实的技术称为即时（JIT）编译。
- en: In the HotSpot JVM (which was the JVM that Sun first shipped as part of Java
    1.3, and is still in use today), the JVM first identifies which parts of the program
    are called most often—the “hot methods.” Then the JVM compiles these hot methods
    directly into machine code, bypassing the JVM interpreter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在HotSpot JVM（这是Sun在Java 1.3中首次发布的JVM，并且至今仍在使用中），JVM首先识别程序中调用最频繁的部分——“热方法”。然后，JVM将这些热方法直接编译成机器代码，绕过JVM解释器。
- en: The JVM uses the available runtime information to deliver higher performance
    than would be possible from purely interpreted execution. In fact, the optimizations
    that the JVM uses now in many cases produce performance that surpasses compiled
    C and C++ code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JVM利用可用的运行时信息提供比纯解释执行更高的性能。事实上，在许多情况下，JVM现在使用的优化技术产生的性能甚至超过了编译的C和C++代码。
- en: The standard that describes how a properly functioning JVM must behave is called
    the JVM Specification.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 描述JVM必须如何正常运行的标准称为JVM规范。
- en: What Is the Java Ecosystem?
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Java生态系统？
- en: The Java language is easy to learn and contains relatively few abstractions,
    compared to other programming languages. The JVM provides a solid, portable, high-performance
    base for Java (or other languages) to execute on. Taken together, these two connected
    technologies provide a foundation that businesses can feel confident about when
    choosing where to base their development efforts.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言相比，Java语言易于学习且包含相对较少的抽象。JVM为Java（或其他语言）提供了坚实、可移植、高性能的执行基础。总之，这两个相关技术为企业在选择其开发努力的基础时提供了可信赖的基础。
- en: The benefits of Java do not end there, however. Since Java’s inception, an extremely
    large ecosystem of third-party libraries and components has grown up. This means
    that a development team can benefit hugely from the existence of connectors and
    drivers for practically every technology imaginable—both proprietary and open
    source.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Java的好处并不仅限于此。自Java诞生以来，第三方库和组件的极其庞大生态系统已经形成。这意味着开发团队可以从几乎每种可想象的技术中获益，包括专有和开源的连接器和驱动程序。
- en: In the modern technology ecosystem, it is now rare indeed to find a technology
    component that does *not* offer a Java connector. From traditional relational
    databases, to NoSQL, to every type of enterprise monitoring system, to messaging
    systems, to Internet of Things (IoT)—everything integrates with Java.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代技术生态系统中，现在几乎找不到*不*提供Java连接器的技术组件。从传统关系数据库到NoSQL，再到各种企业监控系统，消息系统，到物联网（IoT）——一切都与Java集成。
- en: It is this fact that has been a major driver of adoption of Java technologies
    by enterprises and larger companies. Development teams have been able to unlock
    their potential by making use of preexisting libraries and components. This has
    promoted developer choice and encouraged open, best-of-breed architectures with
    Java technology cores.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这一事实成为企业和大公司采用Java技术的主要驱动因素之一。开发团队能够通过利用现有的库和组件释放其潜力。这促进了开发者的选择，并鼓励基于Java技术核心的开放式、最佳的架构。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Google’s Android environment is sometimes thought of as being “based on Java.”
    However, the picture is actually rather more complicated. Android code is written
    in Java (or the Kotlin language) but originally used a different implementation
    of Java’s class libraries along with a cross compiler to convert to a different
    file format for a non-Java virtual machine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的Android环境有时被认为是“基于Java的”。然而，事实情况要复杂得多。Android代码是用Java（或Kotlin语言）编写的，但最初使用了Java类库的不同实现以及一个交叉编译器，将其转换为非Java虚拟机的不同文件格式。
- en: The combination of a rich ecosystem and a first-rate virtual machine with an
    open standard for program binaries makes the Java platform a very attractive execution
    target. In fact, there are a large number of non-Java languages that target the
    JVM and also interoperate with Java (which allows them to piggyback off the platform’s
    success). These languages include Kotlin, JRuby, Scala, Clojure, and many others.
    While all of them are small compared to Java, they have distinct niches within
    the Java world and provide a source of innovation and healthy competition to Java.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 丰富的生态系统与一流的虚拟机结合，并具有程序二进制的开放标准，使得 Java 平台成为一个非常吸引人的执行目标。实际上，有许多非 Java 语言针对 JVM
    并与 Java 进行互操作（使它们可以依附于平台的成功）。这些语言包括 Kotlin、JRuby、Scala、Clojure 等。虽然它们与 Java 相比都很小，但它们在
    Java 世界内有着明确的市场定位，并为 Java 提供了创新和健康竞争的源泉。
- en: The Lifecycle of a Java Program
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 程序的生命周期
- en: To better understand how Java code is compiled and executed, and the difference
    between Java and other types of programming environments, consider the pipeline
    in [Figure 1-1](#javanut8-CHP-1-FIG-1).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解 Java 代码是如何编译和执行的，以及 Java 与其他类型的编程环境之间的区别，请考虑 [图 1-1](#javanut8-CHP-1-FIG-1)
    中的流水线。
- en: '![JN7 0101](assets/jns8_0101.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![JN7 0101](assets/jns8_0101.png)'
- en: Figure 1-1\. How Java code is compiled and loaded
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. Java 代码是如何编译和加载的
- en: This starts wth Java source and passes it through the `javac` program to produce
    class files—which contain the source code compiled to Java bytecode. The class
    file is the smallest unit of functionality the platform will deal with and the
    only way to get new code into a running program.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这从 Java 源代码开始，通过 `javac` 程序生成包含已编译为 Java 字节码的源代码的类文件。类文件是平台处理的最小功能单元，也是将新代码导入运行程序的唯一方式。
- en: New class files are onboarded via the classloading mechanism (see [Chapter 10](ch10.xhtml#javanut8-CHP-10)
    for a lot more detail on how classloading works). This makes the new code (represented
    as a type) available to the interpreter for execution, and execution begins in
    the `main()` method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 新的类文件通过类加载机制（详见 [第 10 章](ch10.xhtml#javanut8-CHP-10) 了解更多有关类加载工作原理的细节）上载。这使得新代码（表示为类型）可供解释器执行，并且执行从
    `main()` 方法开始。
- en: The performance analysis and optimization of Java program is a major topic,
    and interested readers should consult a specialist text, such as [*Optimizing
    Java*](http://shop.oreilly.com/product/0636920121718.do) (O’Reilly).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Java 程序的性能分析和优化是一个重要话题，有兴趣的读者应参考专业文本，如 [*优化 Java*](http://shop.oreilly.com/product/0636920121718.do)（O’Reilly）。
- en: Frequently Asked Questions
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: In this section, we’ll discuss some of the most frequently asked questions about
    Java and the lifecycle of programs written in the Java environment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论关于 Java 和 Java 环境中编写的程序生命周期的一些最常见问题。
- en: What is a virtual machine?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是虚拟机？
- en: When developers are first introduced to the concept of a virtual machine, they
    sometimes think of it as “a computer inside a computer” or “a computer simulated
    in software.” It’s then easy to imagine bytecode as “machine code for the CPU
    of the internal computer” or “machine code for a made-up processor.” However,
    this simple intuition can be misleading.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员首次接触虚拟机的概念时，他们有时会将其视为“计算机中的计算机”或“在软件中模拟的计算机”。然后很容易将字节码想象为“内部计算机的 CPU 的机器码”或“虚拟处理器的机器码”。然而，这种简单的直觉可能会误导。
- en: What is bytecode?
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是字节码？
- en: In fact, JVM bytecode is actually not very similar to machine code that would
    run on a real hardware processor. Instead, computer scientists would call bytecode
    a type of *intermediate representation*—a halfway house between source code and
    machine code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，JVM 字节码与真正运行在硬件处理器上的机器码并不十分相似。相反，计算机科学家会将字节码称为一种 *中间表示* 类型，介于源代码和机器码之间。
- en: Is javac a compiler?
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javac 是编译器吗？
- en: Compilers usually produce machine code, but `javac` produces bytecode, which
    is not that similar to machine code. However, class files are a bit like object
    files (like Windows *.dll* files, or Unix *.so* files)—and they are certainly
    not human readable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器通常会生成机器码，但 `javac` 生成的是字节码，与机器码并不十分相似。然而，类文件有点像对象文件（如 Windows 的 *.dll* 文件或
    Unix 的 *.so* 文件），它们肯定不是人类可读的。
- en: In theoretical computer science terms, `javac` is most similar to the *front
    half* of a compiler—it creates the intermediate representation that can then be
    used later to produce (emit) machine code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论计算机科学的角度来看，`javac`最类似于编译器的*前半部分*——它创建了中间表示，随后可以用于生成（发射）机器代码。
- en: However, because creation of class files is a separate build-time step that
    resembles compilation in C/C++, many developers consider running `javac` to be
    compilation. In this book, we will use the terms “source code compiler” or "`javac`
    compiler” to mean the production of class files by `javac`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于类文件的创建是一个单独的构建时间步骤，类似于C/C++中的编译，许多开发人员认为运行`javac`是编译。在本书中，我们将使用术语“源代码编译器”或“`javac`编译器”来表示`javac`生成类文件的过程。
- en: We will reserve “compilation” as a standalone term to mean JIT compilation—as
    it’s JIT compilation that actually produces machine code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留“编译”作为一个独立的术语，指的是JIT编译——因为正是JIT编译实际上生成了机器代码。
- en: Why is it called “bytecode”?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么称为“字节码”？
- en: The instruction code (opcode) is just a single byte (some operations also have
    parameters that follow them in the bytestream), so there are only 256 possible
    instructions. In practice, some are unused—about 200 are in use, but some of them
    aren’t emitted by recent versions of `javac`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 指令代码（操作码）只是一个字节（有些操作还有随后的参数跟在字节流中），因此只有256个可能的指令。实际上，有些是未使用的——大约有200个在使用中，但某些最近版本的`javac`并没有发出它们。
- en: Is bytecode optimized?
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字节码是否经过优化？
- en: In the early days of the platform, `javac` produced heavily optimized bytecode.
    This turned out to be a mistake.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在平台早期阶段，`javac`生成了经过大量优化的字节码。这被证明是一个错误。
- en: With the advent of JIT compilation, the important methods are going to be compiled
    to very fast machine code. It’s therefore very important to make the job of the
    JIT compiler easier—as there are much bigger gains available from JIT compilation
    than there are from optimizing bytecode, which will still have to be interpreted.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JIT编译的出现，重要的方法将被编译成非常快速的机器代码。因此，让JIT编译器的工作更容易非常重要——因为与优化字节码相比，JIT编译可以带来更大的性能提升，而优化字节码仍然必须被解释。
- en: Is bytecode really machine independent? What about things like endianness?
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字节码真的是机器无关的吗？诸如字节序之类的因素呢？
- en: The format of bytecode is always the same, regardless of what type of machine
    it was created on. This includes the byte ordering (sometimes called “endianness”)
    of the machine. For readers who are interested in the details, bytecode is always
    big-endian.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 无论字节码是在何种类型的机器上创建的，其格式始终相同。这包括机器的字节顺序（有时称为“字节序”）。对于对细节感兴趣的读者，字节码始终是大端序的。
- en: Is Java an interpreted language?
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java是一种解释性语言吗？
- en: The JVM is basically an interpreter (with JIT compilation to give it a big performance
    boost). However, most interpreted languages directly interpret programs from source
    form (usually by constructing an abstract syntax tree from the input source file).
    The JVM interpreter, on the other hand, requires class files—which, of course,
    require a separate source code compilation step with `javac`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: JVM基本上是一个解释器（通过JIT编译来大幅提升性能）。然而，大多数解释性语言直接从源代码形式解释程序（通常通过从输入源文件构造抽象语法树来实现）。另一方面，JVM解释器需要类文件——当然，这需要使用`javac`进行单独的源代码编译步骤。
- en: In fact, the modern version of many languages that were traditionally interpreted
    (such as PHP, Ruby, and Python) now also have JIT compilers, so the divide between
    “interpreted” and “compiled” languages is increasingly blurred. Once again, Java’s
    design decisions have been validated by their adoption in other programming environments.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，许多传统上是解释性的语言（如PHP、Ruby和Python）的现代版本现在也具有JIT编译器，因此“解释性”和“编译性”语言之间的界限越来越模糊。再次验证了Java在其他编程环境中采用的设计决策的有效性。
- en: Can other languages run on the JVM?
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他语言可以在JVM上运行吗？
- en: Yes. The JVM can run any valid class file, so this means that non-Java languages
    can run on the JVM in several ways. First, they could have a source code compiler
    (similar to `javac`) that produces class files, which would run on the JVM just
    like Java code (this is the approach taken by languages like Kotlin and Scala).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。JVM可以运行任何有效的类文件，这意味着非Java语言可以通过多种方式在JVM上运行。首先，它们可以有一个类似于`javac`的源代码编译器，生成类文件，这些类文件可以像Java代码一样在JVM上运行（这是Kotlin和Scala等语言采用的方法）。
- en: Alternatively, a non-Java language could implement an interpreter and runtime
    in Java and then interpret the source form of their language directly. This second
    option is the approach taken by languages like JRuby (but JRuby has a very sophisticated
    runtime that is capable of *secondary JIT compilation* in some circumstances).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，一种非 Java 语言可以在 Java 中实现解释器和运行时，然后直接解释其语言的源形式。这种第二种选择是像 JRuby 这样的语言采取的方法（但在某些情况下
    JRuby 具有非常复杂的运行时，能够进行*二次 JIT 编译*）。
- en: Comparing Java to Other Languages
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Java 与其他语言进行比较
- en: In this section, we’ll briefly highlight some differences between the Java platform
    and other programming environments you may be familiar with.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍 Java 平台与您可能熟悉的其他编程环境之间的一些区别。
- en: Java Compared to JavaScript
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 与 JavaScript 比较
- en: Java is statically typed; JavaScript is dynamically typed.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是静态类型的；JavaScript 是动态类型的。
- en: Java uses class-based objects; JavaScript is prototype based (the JS keyword
    `class` is syntactic sugar).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 使用基于类的对象；JavaScript 是基于原型的（JS 关键字 `class` 是语法糖）。
- en: Java provides good object encapsulation; JavaScript does not.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 提供了良好的对象封装；JavaScript 则没有。
- en: Java has namespaces; JavaScript does not.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 有命名空间；JavaScript 没有。
- en: Java is multithreaded; JavaScript is not.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是多线程的；JavaScript 不是。
- en: Java Compared to Python
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 与 Python 比较
- en: Java is statically typed; Python is dynamically typed (with optional, *gradual*
    typing).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是静态类型的；Python 是动态类型的（具有可选的、*逐渐*类型）。
- en: Java is an OO language with functional programming (FP) features; Python is
    a hybrid OO / procedural language with some FP support.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是一种带有函数式编程（FP）特性的面向对象语言；Python 是一种混合面向对象/过程化语言，具有一些 FP 支持。
- en: Java and Python both have a bytecode format—Java uses JVM class files; Python
    uses Python bytecode.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 和 Python 都有字节码格式—Java 使用 JVM 类文件；Python 使用 Python 字节码。
- en: Java’s bytecode has extensive static checks; Python’s bytecode does not.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 的字节码具有广泛的静态检查；Python 的字节码则没有。
- en: Java is multithreaded; Python allows only one thread to execute Python bytecode
    at once (the Global Interpreter Lock).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是多线程的；Python 一次只允许一个线程执行 Python 字节码（全局解释器锁）。
- en: Java Compared to C
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 与 C 比较
- en: Java is object-oriented; C is procedural.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是面向对象的；C 是过程化的。
- en: Java is portable as class files; C needs to be recompiled.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 作为类文件是可移植的；C 需要重新编译。
- en: Java provides extensive instrumentation as part of the runtime.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 作为运行时的一部分提供了广泛的仪器设备。
- en: Java has no pointers and no equivalent of pointer arithmetic.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 没有指针，也没有指针算术的等价物。
- en: Java provides automatic memory management via garbage collection.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 通过垃圾收集实现了自动内存管理。
- en: Java currently has no ability to lay out memory at a low level (no structs).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 当前无法在低级别上布局内存（没有结构体）。
- en: Java has no preprocessor.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 没有预处理器。
- en: Java Compared to C++
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 与 C++ 比较
- en: Java has a simplified object model compared to C++.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 的对象模型与 C++ 相比较简化。
- en: Java’s method dispatch is virtual by default.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 的方法分派默认是虚拟的。
- en: Java is always pass-by-value (but one of the only possibilities for Java values
    is object references).
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 总是传值调用（但 Java 值的唯一可能性之一是对象引用）。
- en: Java does not support full multiple inheritance.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 不支持完全多继承。
- en: Java’s generics are less powerful (but also less dangerous) than C++ templates.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 的泛型比 C++ 模板弱大（但也更安全）。
- en: Java has no operator overloading.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 没有操作符重载。
- en: Answering Some Criticisms of Java
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 Java 的一些批评进行回答
- en: Java has had a long history in the public eye and, as a result, has attracted
    its fair share of criticism over the years. Some of this negative press can be
    attributed to some technical shortcomings combined with rather overzealous marketing
    in the first versions of Java.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Java 在公众眼中有着悠久的历史，因此多年来吸引了很多批评。这些负面报道的一部分可以归因于一些技术上的缺陷，再加上在 Java 的最初版本中过度热衷的营销。
- en: Some criticisms have, however, entered technical folklore despite no longer
    being very accurate. In this section, we’ll look at some common grumbles and the
    extent to which they’re true for modern versions of the platform.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些批评已经进入技术传说，但实际上已经不再很准确。在本节中，我们将看一下一些常见的抱怨以及它们对于现代版本的平台来说是否属实。
- en: Overly Verbose
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过于冗长
- en: The Java core language has sometimes been criticized as overly verbose. Even
    simple Java statements such as `Object o = new Object();` seem to be repetitious—the
    type `Object` appears on both the left and right side of the assignment. Critics
    point out that this is essentially redundant, that other languages do not need
    this duplication of type information, and that many languages support features
    (e.g., type inference) that remove it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Java核心语言有时被批评为过于冗长。甚至简单的Java语句如 `Object o = new Object();` 似乎是重复的——类型 `Object`
    在赋值语句的左右两侧都出现。批评者指出这基本上是多余的，其他语言不需要这种类型信息的重复，并且许多语言支持可以移除它的特性（例如类型推断）。
- en: The counterpoint to this argument is that Java was designed from the start to
    be easy to read (code is read more often than written) and that many programmers,
    especially novices, find the extra type information helpful when reading code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这一论点的反驳是，Java从一开始就被设计成易于阅读（代码读取次数多于编写次数），许多程序员，特别是新手，在阅读代码时发现额外的类型信息非常有帮助。
- en: Java is widely used in enterprise environments, which often have separate dev
    and ops teams. The extra verbosity can often be a blessing when you are responding
    to an outage call, or when you need to maintain and patch code that was written
    by developers who have long since moved on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Java广泛应用于企业环境中，这些环境通常有单独的开发和运维团队。当你响应故障调用时，或者需要维护和修补已经由长时间离开的开发人员编写的代码时，额外的冗长通常是一种福音。
- en: 'In recent versions of Java, the language designers have attempted to respond
    to some of these points by finding places where the syntax can become less verbose
    and by making better use of type information. For example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的Java版本中，语言设计者试图通过找到语法可以变得更简洁的地方，并更好地利用类型信息来响应其中一些观点。例如：
- en: '[PRE1]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, Java’s overall philosophy is to make changes to the language only very
    slowly and carefully, so the pace of these changes may not satisfy detractors
    completely.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Java的总体哲学是非常缓慢和谨慎地修改语言，因此这些变化的步伐可能无法完全满足批评者的要求。
- en: Slow to Change
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓慢的变化
- en: The original Java language is now well over 20 years old and has not undergone
    a complete revision in that time. Many other languages (e.g., Microsoft’s C#)
    have released backward-incompatible versions in the same period, and some developers
    criticize Java for not doing likewise.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的Java语言现在已经超过20年历史，这段时间内没有进行完整的修订。许多其他语言（例如微软的C#）在同一时期内发布了不兼容的版本，一些开发人员批评Java没有做同样的事情。
- en: Furthermore, in recent years, the Java language has come under fire for being
    slow to adopt language features that are now commonplace in other languages.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，近年来，Java语言因为缓慢采纳现在其他语言普遍采用的语言特性而受到批评。
- en: The conservative approach to language design that Sun (and now Oracle) has taken
    is an attempt to avoid imposing the costs and externalities of misfeatures on
    a very large user base. Many Java shops have made major investments in the technology,
    and the language designers have taken seriously the responsibility of not disrupting
    the existing user and install base.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Sun（现在是Oracle）采取的语言设计保守方法是为了避免在非常庞大的用户群体中强加错误特性的成本和外部性。许多Java开发团队对该技术进行了重大投资，语言设计者严肃地对待不干扰现有用户和安装基础的责任。
- en: Each new language feature needs to be very carefully thought about—not only
    in isolation but in terms of how it will interact with all the existing features
    of the language. New features can sometimes have impacts beyond their immediate
    scope—and Java is widely used in very large codebases, where there are more potential
    places for an unexpected interaction to manifest.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新的语言特性都需要非常谨慎地考虑——不仅是独立存在的，还要考虑它将如何与语言的所有现有特性相互作用。新特性有时会在其直接范围之外产生影响——而Java被广泛应用于非常庞大的代码库中，这里有更多潜在的地方可能出现意外的相互作用。
- en: It is almost impossible to remove a feature that turns out to be incorrect after
    it has shipped. Java has a couple of misfeatures (such as the serialization mechanism)
    that have been all-but-impossible to remove safely without impacting the install
    base. The language designers have taken the view that extreme caution is required
    when evolving the language.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦推出后发现有错误的特性几乎不可能移除。Java有一些误功能（如序列化机制），几乎无法安全地移除而不影响已安装基础。语言设计者认为，在演化语言时需要极度谨慎。
- en: Having said that, the new language features that have arrived in recent versions
    are a significant step toward addressing the most common complaints about missing
    features, and they should cover many of the idioms that developers have been asking
    for.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，近期版本中引入的新语言特性显著地解决了最常见的功能缺失问题，它们应该涵盖开发人员一直在寻求的许多编程习惯。
- en: Performance Problems
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能问题
- en: The Java platform is still sometimes criticized for being slow—but of all the
    criticisms that are leveled at the platform, this is probably the one that is
    least justified. It is a genuine myth about the platform.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Java平台有时被批评运行速度慢，但在所有批评中，这可能是最不合理的一个。这是对该平台的一个真正的误解。
- en: Release 1.3 of Java brought in the HotSpot Virtual Machine and its JIT compiler.
    Since then, there have been over 15 years of continual innovation and improvement
    in the virtual machine and its performance. The Java platform is now blazingly
    fast, regularly winning performance benchmarks on popular frameworks, and even
    beating native-compiled C and C++.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.3发布引入了HotSpot虚拟机及其JIT编译器。自那时以来，虚拟机及其性能已经持续创新和改进超过15年。如今，Java平台运行速度极快，在流行框架的性能基准测试中经常获胜，甚至超越了本地编译的C和C++。
- en: Criticism in this area appears to be largely caused by a folk memory that Java
    was slow at some point in the past. Some of the larger, more sprawling architectures
    that Java has been used within may also have contributed to this impression.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一领域的批评似乎主要是由一个传统观念引起的，即Java在过去某个时刻运行缓慢。Java应用于的一些较大、较复杂的架构也可能加深了这种印象。
- en: The truth is that any large architecture will require benchmarking, analysis,
    and performance tuning to get the best out of it—and Java is no exception.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，任何一个大型架构都需要基准测试、分析和性能调优，以达到最佳状态——Java也不例外。
- en: The core of the platform—language and JVM—was and remains one of the fastest
    general-use environments available to the developer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 平台的核心部分——语言和JVM——过去和现在仍然是开发者可用的最快速的通用环境之一。
- en: Insecure
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不安全
- en: Some people have historically criticized Java’s record of security vulnerabilities.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人历史上批评过Java在安全漏洞方面的记录。
- en: Many of these vulnerabilities involved the desktop and GUI components of the
    Java system and wouldn’t affect websites or other server-side code written in
    Java.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些漏洞涉及Java系统的桌面和GUI组件，并不会影响使用Java编写的网站或其他服务器端代码。
- en: The truth is that Java has been designed from the ground up with security in
    mind; this gives it a great advantage over many other existing systems and platforms.
    The Java security architecture was designed by security experts and has been studied
    and probed by many other security experts since the platform’s inception. The
    consensus is that the architecture itself is strong and robust, without any security
    holes in the design (at least none that have been discovered yet).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，Java从一开始就以安全性为设计核心；这使得它比许多其他现有的系统和平台具有明显优势。Java安全架构是由安全专家设计的，并自平台成立以来得到了许多其他安全专家的研究和检验。普遍的共识是，该架构本身坚固可靠，设计上没有任何安全漏洞（至少目前没有被发现的）。
- en: Fundamental to the design of the security model is that bytecode is heavily
    restricted in what it can express—there is no way, for example, to directly address
    memory. This cuts out entire classes of security problems that have plagued languages
    like C and C++. Furthermore, the VM goes through a process known as *bytecode*
    *verification* whenever it loads an untrusted class, which removes a further large
    class of problems (see [Chapter 10](ch10.xhtml#javanut8-CHP-10) for more about
    bytecode verification).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 安全模型设计的核心是，字节码在表达能力上受到严格限制——例如，无法直接访问内存。这一设计消除了像C和C++语言中存在的大量安全问题。此外，每当加载一个不受信任的类时，虚拟机会进行称为*字节码验证*的过程，进一步消除了另一大类问题（详见[第10章](ch10.xhtml#javanut8-CHP-10)了解更多关于字节码验证的内容）。
- en: Despite all this, however, no system can guarantee 100% security, and Java is
    no exception.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管如此，没有任何系统可以保证100%的安全性，Java也不例外。
- en: While the design is still theoretically robust, the implementation of the security
    architecture is another matter, and there is a long history of security flaws
    being found and patched in particular implementations of Java. In all likelihood,
    security flaws will continue to be discovered (and patched) in Java VM implementations.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设计在理论上仍然健壮，但安全架构的实现又是另一回事，Java 的特定实现中存在着漫长的安全漏洞历史。很可能会在 Java VM 的实现中继续发现（并修补）安全漏洞。
- en: All programming platforms have security issues at times, and many other languages
    have a comparable history of security vulnerabilities that have been significantly
    less well publicized. For practical server-side coding, Java remains perhaps the
    most secure general-purpose platform currently available, especially when kept
    patched up to date.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编程平台都可能存在安全问题，许多其他语言也有着相当数量的安全漏洞历史，只不过这些漏洞的公开程度要低得多。就实际的服务器端编码而言，Java 或许是目前可用的最安全的通用平台，特别是在保持最新补丁的情况下。
- en: Too Corporate
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过于企业化
- en: Java is a platform that is extensively used by corporate and enterprise developers.
    The perception that it is too corporate is therefore not surprising—Java has often
    been perceived as lacking the “freewheeling” style of languages that are deemed
    to be more community oriented.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是一个被企业开发者广泛使用的平台。因此，人们认为它过于企业化并不奇怪 —— Java 经常被认为缺乏更加面向社区的“自由发挥”风格的语言。
- en: In truth, Java has always been, and remains, a very widely used language for
    community and free or open source software development. It is one of the most
    popular languages for projects hosted on GitHub and other project-hosting sites.
    Not only that, but the Java community is regularly held up as one of the real
    strengths of the ecosystem—with user groups, conferences, journals, and all of
    the most visible signs of an active and healthy user community.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Java 一直都是一个非常广泛使用的语言，用于社区和免费或开源软件开发。它是 GitHub 和其他项目托管站点上托管的项目中最受欢迎的语言之一。不仅如此，Java
    社区经常被认为是生态系统的真正优势之一 —— 具有用户组、会议、期刊等一切活跃和健康用户社区的最显著迹象。
- en: Finally, the most widely used implementation of the language itself is based
    on OpenJDK—which is itself an open-source project with a vibrant and growing community.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最广泛使用的语言实现是基于 OpenJDK —— OpenJDK 本身是一个具有充满活力和增长的社区的开源项目。
- en: A Brief History of Java and the JVM
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 和 JVM 的简史
- en: Java 1.0 (1996)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.0 (1996)
- en: This was the first public version of Java. It contained just 212 classes organized
    in eight packages.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Java 的第一个公开版本。它仅包含 212 个类，组织在八个包中。
- en: Java 1.1 (1997)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.1 (1997)
- en: This release of Java more than doubled the size of the Java platform. This release
    introduced “inner classes” and the first version of the Reflection API.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 Java 将 Java 平台的规模增加了一倍以上。这个版本引入了“内部类”和第一个版本的反射 API。
- en: Java 1.2 (1998)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.2 (1998)
- en: This was a very significant release of Java; it tripled the size of the Java
    platform. This release marked the first appearance of the Java Collections API
    (with sets, maps, and lists). The many new features in the 1.2 release led Sun
    to rebrand the platform as “the Java 2 Platform.” The term “Java 2” was simply
    a trademark, however, and not an actual version number for the release.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Java 的一个非常重要的版本发布；它将 Java 平台的规模扩大了三倍。这个版本标志着 Java 集合 API 的首次亮相（包括集合、映射和列表）。1.2
    版本中的许多新特性导致 Sun 将平台重新命名为“Java 2 平台”。然而，“Java 2”这个术语仅仅是一个商标，而不是实际的版本号。
- en: Java 1.3 (2000)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.3 (2000)
- en: This was primarily a maintenance release, focused on bug fixes, stability, and
    performance improvements. This release also brought in the HotSpot Java Virtual
    Machine, which is still in use today (although heavily modified and improved since
    then).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是一个维护版本，重点是修复错误、提高稳定性和性能。这个版本还引入了 HotSpot Java 虚拟机，至今仍在使用（尽管自那时以来已经经过了大幅修改和改进）。
- en: Java 1.4 (2002)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Java 1.4 (2002)
- en: This was another fairly big release, adding important new functionality such
    as a higher-performance, low-level I/O API; regular expressions for text handling;
    XML and XSLT libraries; SSL support; a logging API; and cryptography support.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个相当重要的版本发布，增加了一些重要的新功能，如更高性能的低级 I/O API；用于文本处理的正则表达式；XML 和 XSLT 库；SSL 支持；日志记录
    API；以及加密支持。
- en: Java 5 (2004)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Java 5 (2004)
- en: This large release of Java introduced a number of changes to the core language
    itself, including generic types, enumerated types (enums), annotations, varargs
    methods, autoboxing, and a new `for` loop. These changes were considered significant
    enough to change the major version number and to start numbering as major releases.
    This release included 3,562 classes and interfaces in 166 packages. Notable additions
    included utilities for concurrent programming, a remote management framework,
    and classes for the remote management and instrumentation of the Java VM itself.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个大版本的Java引入了一些对核心语言本身的改变，包括泛型类型、枚举类型、注解、可变参数方法、自动装箱以及新的`for`循环。这些改变被认为足够重要以至于改变了主版本号的编号方式，开始以主要版本发布。此版本包含了166个包中的3562个类和接口。显著的增加包括用于并发编程的实用程序、远程管理框架以及用于Java虚拟机自身的远程管理和仪器化类。
- en: Java 6 (2006)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Java 6 (2006)
- en: This release was also largely a maintenance and performance release. It introduced
    the Compiler API, expanded the usage and scope of annotations, and provided bindings
    to allow scripting languages to interoperate with Java. There were also a large
    number of internal bug fixes and improvements to the JVM and the Swing GUI technology.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本主要是维护和性能优化版本。它引入了编译器API，扩展了注解的使用和范围，并提供了绑定以允许脚本语言与Java互操作。还有大量内部错误修复和对JVM和Swing
    GUI技术的改进。
- en: Java 7 (2011)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Java 7 (2011)
- en: The first release of Java under Oracle’s stewardship included a number of major
    upgrades to the language and platform, as well as being the first release to be
    based on the Open Source reference implementation. The introduction of `try`-with-resources
    and the NIO.2 API enabled developers to write much safer and less error-prone
    code for handling resources and I/O. The Method Handles API provided a simpler
    and safer alternative to reflection; in addition, it opened the door for `invokedynamic`
    (the first new bytecode since version 1.0 of Java).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在Oracle掌管下的第一个Java发布版包括对语言和平台的一些重大升级，同时也是基于开源参考实现的第一个发布版。引入了`try`-with-resources和NIO.2
    API，使开发者能够编写更安全、更少出错的处理资源和I/O的代码。方法句柄API提供了反射的简单和安全替代方案；此外，它还为`invokedynamic`（自Java
    1.0版以来的第一个新字节码）开启了大门。
- en: Java 8 (2014) (LTS)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 (2014) (LTS)
- en: This was a huge release—​potentially the most significant changes to the language
    since Java 5 (or possibly ever). The introduction of lambda expressions provided
    the ability to significantly enhance the productivity of developers, the Collections
    were updated to make use of lambdas, and the machinery required to achieve this
    marked a fundamental change in Java’s approach to object orientation. Other major
    updates include a new date and time API and major updates to the concurrency libraries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重大的发布版本，可能是自Java 5以来（或可能是有史以来）对语言进行的最重要的改变。引入了lambda表达式，显著提高了开发者的生产力，集合框架也更新以利用lambda表达式，为实现这一点所需的机制标志着Java在面向对象方面的根本性变化。其他主要更新包括新的日期和时间API以及并发库的重大更新。
- en: Java 9 (2017)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 (2017)
- en: Significantly delayed, this release introduced the new platform modularity feature,
    which allows Java applications to be packaged into deployment units and modularize
    the platform runtime. Other changes include a new default garbage collection algorithm,
    a new API for handling processes, and some changes to the way that frameworks
    can access the internals. This release also changed the release cycle itself,
    so that new versions arrive every 6 months, but only the LTS releases have gained
    traction. Accordingly, we only record the LTS releases beyond this point.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本显著延迟，引入了新的平台模块化特性，允许Java应用程序打包成部署单元并模块化平台运行时。其他变更包括新的默认垃圾收集算法、用于处理进程的新API以及框架访问内部方式的一些变更。此外，这个版本还改变了发布周期本身，使得新版本每6个月发布一次，但只有LTS版本获得了广泛应用。因此，我们从此点开始只记录LTS版本的发布。
- en: Java 11 (September 2018) (LTS)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Java 11 (September 2018) (LTS)
- en: This release was the first modular Java to be considered as a long-term support
    (LTS) release. It adds a few new features that are directly visible to the developer—​primarily
    improved support for type inference (`var`), JDK Flight Recorder (JFR), and the
    new HTTP/2 API. There were some additional internal changes and substantial performance
    improvements, but this LTS release was primarily intended for stabilization after
    Java 9.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本是首个被视为长期支持（LTS）版本的模块化Java。它添加了一些对开发者直接可见的新功能，主要包括对类型推断（`var`）、JDK飞行记录器（JFR）和新的HTTP/2
    API的改进支持。还有一些额外的内部变更和显著的性能改进，但这个LTS版本主要旨在Java 9之后的稳定化。
- en: Java 17 (September 2021) (LTS)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Java 17（2021年9月）（LTS）
- en: The current version LTS release. Includes important changes to Java’s OO model
    (Sealed classes, Records, and Nestmates) as well as Switch Expressions, Text Blocks,
    and a first version of language Pattern Matching. The JVM had additional performance
    improvements and better support for running in containers. The internal upgrades
    continued, and two new garbage collectors were added.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当前版本LTS发布。包括对Java面向对象模型的重要改变（封闭类、记录和巢状类），以及开关表达式、文本块和语言模式匹配的初版。JVM还进行了额外的性能改进，并提供了更好的容器中运行支持。内部升级继续进行，并添加了两个新的垃圾收集器。
- en: As it stands, the only current production versions are the LTS releases, 11
    and 17\. Due to the highly significant changes that are introduced by modules,
    Java 8 was retrospectively declared to be an LTS release to provide extra time
    for teams and applications to migrate to a supported modular Java. It is now considered
    a “classic” release, and teams are strongly encouraged to migrate to one of the
    modern LTS versions.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，仅有LTS版本11和17是当前生产版本。由于模块引入的重大变化，Java 8被追溯地宣布为LTS版本，为团队和应用程序迁移到受支持的模块化Java提供了额外的时间。现在它被认为是一个“经典”版本，并强烈建议团队迁移到其中一种现代的LTS版本。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this introductory chapter, we’ve placed Java in context within the overall
    landscape and history of programming languages. We’ve compared the language to
    other popular alternatives, taken a first look at the basic anatomy of how a Java
    program is compiled and executed, and tried to dispel some of the popular myths
    about Java.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本介绍性章节中，我们将Java放置在编程语言的整体格局和历史中进行了比较。我们将语言与其他流行的替代方案进行了比较，首次查看了Java程序编译和执行的基本解剖，并试图消除关于Java的一些流行误解。
- en: The next chapter covers Java’s language syntax—primarily from a *bottom-up*
    perspective, focusing on the individual basic units of lexical syntax and building
    upwards. If you are already familiar with the syntax of a language similar to
    Java (such as JavaScript, C or C++), you may choose to skim or skip this chapter
    and refer to it when you encounter any syntax that is unfamiliar to you.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将从*自下而上*的角度，重点介绍Java语言的语法，专注于词法语法的各个基本单元并逐步构建。如果您已经熟悉类似Java的语言的语法（如JavaScript、C或C++），您可以选择略读或跳过本章，并在遇到不熟悉的语法时参考。
- en: ^([1](ch01.xhtml#idm45927769483360-marker)) Java ME was an older standard for
    feature phones and first-generation smartphones. Android and iOS dominate the
    market on phones today, and Java ME is no longer being updated.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm45927769483360-marker)) Java ME是面向功能手机和第一代智能手机的一个较旧的标准。如今，Android和iOS主导手机市场，Java
    ME已不再更新。
- en: ^([2](ch01.xhtml#idm45927773664480-marker)) Java EE has now been transferred
    to the Eclipse Foundation, where it continues its life as the Jakarta EE project.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm45927773664480-marker)) Java EE现已移交至Eclipse Foundation，继续作为Jakarta
    EE项目存在。
