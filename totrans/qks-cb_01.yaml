- en: Chapter 1\. Quarkus Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：Quarkus 概述
- en: Kubernetes is becoming the de facto platform to deploy our enterprise applications
    nowadays. The movement to containers and Kubernetes has led to changes in the
    way we code, deploy, and maintain our Java-based applications. You can easily
    get yourself in trouble if you containerize and run a Java application without
    taking proper measures. Containers in Pods (a Kubernetes term) are the basic units
    in Kubernetes, so it is very important to have a good understanding of how to
    containerize a Java-based application correctly to avoid pitfalls, wasted work,
    and extra hours of frustration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 现在已经成为部署企业应用的事实标准平台。转向容器和 Kubernetes 导致了我们编写、部署和维护基于 Java 的应用程序的方式发生了变化。如果你在不采取适当措施的情况下容器化和运行
    Java 应用程序，很容易遇到麻烦。Pods 中的容器（一个 Kubernetes 术语）是 Kubernetes 中的基本单位，因此正确理解如何正确地容器化基于
    Java 的应用程序非常重要，以避免陷阱、浪费工作和额外的挫败时间。
- en: Quarkus is a cloud-native framework with built-in Kubernetes integration. It
    is an open source stack, released under the Apache License 2.0, that helps you
    create Kubernetes-native applications tailored for GraalVM and OpenJDK HotSpot.
    It is built on top of popular libraries and technologies such as Hibernate, Eclipse
    MicroProfile, Kubernetes, Apache Camel, and Eclipse Vert.x.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 是一个内置 Kubernetes 集成的云原生框架。它是一个开源堆栈，根据 Apache License 2.0 发布，帮助你创建专为
    GraalVM 和 OpenJDK HotSpot 定制的 Kubernetes 本地应用程序。它建立在流行的库和技术之上，如 Hibernate、Eclipse
    MicroProfile、Kubernetes、Apache Camel 和 Eclipse Vert.x。
- en: The benefits of Quarkus include easy integration with Docker and Kubernetes,
    quick startup time, low resident set size (RSS) memory, and increased developer
    productivity. In this introductory chapter, we’ll take a quick look Quarkus—what
    it is, the problems it solves, how it integrates with Kubernetes, why developers
    enjoy working with it, and some of its most noteworthy features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 的好处包括与 Docker 和 Kubernetes 的轻松集成、快速启动时间、低 Resident Set Size（RSS）内存和提高开发者的生产力。在这个介绍性的章节中，我们将快速浏览
    Quarkus——它是什么、它解决了哪些问题、它如何与 Kubernetes 集成、为什么开发者喜欢使用它以及它的一些最显著的特点。
- en: Developer-Friendly
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者友好
- en: Quarkus allows you, the Java developer, to be more productive, and it helps
    you stay relevant in the fast-paced area of microservices and cloud-based applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 允许你作为 Java 开发者更加高效，帮助你在微服务和基于云的应用程序快速发展的领域保持相关性。
- en: Quarkus will enable your applications to scale better, to more tightly fill
    up a Kubernetes cluster utilizing fewer resources overall, and to make use of
    decades of community work in open source Java.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 能够使你的应用程序更好地扩展，更紧密地填充 Kubernetes 集群，利用更少的总资源，并利用开源 Java 社区几十年来的工作。
- en: To start developing with Quarkus, you won’t need to learn a new technology.
    If you’re already familiar with dependency injection, JAX-RS, Hibernate, and Eclipse
    MicroProfile concepts, there’s nothing new here. All the knowledge you have built
    up over the course of your career will map directly into Quarkus. Whereas it might
    take weeks to learn other frameworks, you can get started with Quarkus and be
    productive in a matter of days or even hours.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Quarkus 进行开发，你不需要学习新技术。如果你已经熟悉依赖注入、JAX-RS、Hibernate 和 Eclipse MicroProfile
    的概念，这里没有什么新东西。你在职业生涯中建立的所有知识将直接映射到 Quarkus 中。相比于学习其他框架可能需要几周的时间，你可以立即开始使用 Quarkus，并在几天甚至几小时内提高工作效率。
- en: Quarkus is designed to be an optimized choice for the next generation of application
    development and deployment. It supports you through the entire application life
    cycle from application scaffolding and live reloading in dev mode (a save-and-refresh
    workflow), all the way through to deployment in a cloud-based Kubernetes cluster.
    As a developer, Quarkus will keep you productive and solving problems, instead
    of shaving yaks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 设计成为下一代应用开发和部署的优化选择。它支持你从应用程序的脚手架搭建和开发模式下的实时重载（一种保存和刷新的工作流程），一直到在基于云的
    Kubernetes 集群中的部署。作为开发者，Quarkus 将让你保持高效解决问题，而不是在无关紧要的事情上浪费时间。
- en: Integration with Kubernetes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Kubernetes 集成
- en: We said that Quarkus is meant to run within Kubernetes. That sounds great, but
    we know lots of things can run within Kubernetes. Throw your application in a
    Docker container, and it will run on Kubernetes. While this is true, there are
    a number of things that traditionally have to be done to properly tune, size,
    and configure your application to run efficiently within Kubernetes. You also
    have to pull out your text editor of choice and craft multiple YAML files—and
    let’s be honest, no one really enjoys doing all that.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说 Quarkus 是为了在 Kubernetes 内运行而设计的。听起来很棒，但我们知道许多东西都可以在 Kubernetes 中运行。将你的应用程序放入
    Docker 容器中，它就可以在 Kubernetes 上运行。虽然这是真的，但传统上还有许多事情必须做才能正确地调整、大小和配置你的应用程序以在 Kubernetes
    中有效运行。你还必须打开你喜欢的文本编辑器，并编写多个 YAML 文件——说实话，没有人真的喜欢做所有这些。
- en: Quarkus eliminates that work by having a number of enhancements for deploying
    to and using Kubernetes with your application. When you bootstrap a Quarkus application,
    it comes with some Dockerfile files used to generate the Docker containers for
    your application. That is a great first step. These files are optimized for running
    with the OpenJDK JVM or running as native executables with GraalVM. They contain
    what is necessary to run the application, thereby eliminating as much duplication
    and unnecessary bloat from the container image as possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 通过具有许多增强功能来部署和使用 Kubernetes 与你的应用程序来消除这项工作。当你启动一个 Quarkus 应用程序时，它会带有一些用于生成你的应用程序
    Docker 容器的 Dockerfile 文件。这是一个很好的第一步。这些文件经过优化，可与 OpenJDK JVM 一起运行或使用 GraalVM 作为本地可执行文件运行。它们包含运行应用程序所必需的内容，从而尽可能地消除容器镜像中的重复和不必要的膨胀。
- en: Next, when you use the Kubernetes extensions, Quarkus can generate the resources
    (YAML files) for a vanilla Kubernetes or OpenShift deployment! No more having
    to wade through YAML files and make sure you have the right indentation. After
    all, you’d prefer to be writing code than looking for that one line of YAML that
    isn’t formatted correctly. Quarkus can also push your image to a registry before
    deploying to the Kubernetes cluster. All of these application images can be further
    enhanced and customized via the Quarkus application configuration, which you’ll
    learn about in [Chapter 4](ch04.xhtml#configuration_chapter). For example, in
    Quarkus 1.4 and later, `ConfigMap` and `Secret`s can be read from the API server—you
    don’t need to mount any of the files in the Pod!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当你使用 Kubernetes 扩展时，Quarkus 可以为普通 Kubernetes 或 OpenShift 部署生成资源（YAML 文件）！不再需要深入研究
    YAML 文件并确保你有正确的缩进。毕竟，你更愿意编写代码，而不是寻找那一行格式不正确的 YAML。Quarkus 还可以将你的镜像推送到注册表，然后部署到
    Kubernetes 集群。所有这些应用程序镜像都可以通过 Quarkus 应用程序配置进一步增强和定制，你将在[第 4 章](ch04.xhtml#configuration_chapter)中了解到这些内容。例如，在
    Quarkus 1.4 及更高版本中，`ConfigMap` 和 `Secret` 可以从 API 服务器中读取——你不需要在 Pod 中挂载任何文件！
- en: Memory and First Response Time
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存和首次响应时间
- en: Quarkus is known as the “supersonic, subatomic” Java framework. That may set
    off marketing alarms with developers, but when you break it down and understand
    what Quarkus is doing, you’ll see that you really are getting a very small, quick,
    and productive execution. With Quarkus, you can deploy a native application optimized
    to be run on Kubernetes. For example, let’s say you want to deploy a native application,
    optimized to be run on Kubernetes, where the container image is around 200 MB
    or smaller. In Quarkus, this application will start up and be ready to accept
    requests within a fraction of a second, and it will use less than 50 MB of memory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 被称为“超音速，亚原子”Java 框架。这可能会引起开发者的营销警报，但当你分解并理解 Quarkus 在做什么时，你会发现你确实获得了一个非常小、快速且高效的执行。使用
    Quarkus，你可以部署一个针对 Kubernetes 进行优化的本地应用程序。例如，假设你想部署一个本地应用程序，该应用程序经过优化以在 Kubernetes
    上运行，容器镜像大小约为 200 MB 或更小。在 Quarkus 中，该应用程序将在一小部分秒内启动并准备好接受请求，并且将使用少于 50 MB 的内存。
- en: When deploying to a Kubernetes cluster, you want to pack in as many instances
    of your application as possible so you are able to scale to meet unexpected load
    yet still utilize as many of the resources as possible. When scaling up you want
    your new application instances up and running quickly—this is where a native executable
    shines. Quarkus does as much pre-boot of your application and the frameworks it
    uses as possible during the native executable build process. This helps your application
    start quickly and be ready to service requests without having to do additional
    class loading, runtime scanning, or other warm-up the the JVM typically does.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到 Kubernetes 集群时，您希望尽可能多地打包您的应用实例，以便在遇到意外负载时能够扩展，并尽可能利用多个资源。在扩展时，您希望新的应用实例能够快速启动并运行，这就是原生可执行文件的优势所在。Quarkus
    在原生可执行文件构建过程中尽可能多地预先加载您的应用程序和使用的框架。这有助于您的应用程序快速启动，并准备好处理请求，而无需进行额外的类加载、运行时扫描或其他
    JVM 通常会执行的预热操作。
- en: Naturally, available memory is a finite resource. Understanding exactly how
    much memory is being used by your application, and not starving the JVM while
    trying to keep that number low, is key to deployment density. Quarkus succeeds
    in helping you achieve that with the native executable, which is small and memory
    efficient.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，可用内存是有限资源。了解您的应用程序使用了多少内存，并在尝试保持该数字较低时不使 JVM 饥饿，这对于部署密度至关重要。Quarkus 通过小型且内存高效的原生可执行文件帮助您实现这一目标。
- en: A Basic Quarkus Workflow
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个基本的 Quarkus 工作流程
- en: 'While reading this book and going through the recipes, you’ll be introduced
    to the Quarkus ecosystem. You’ll learn about extensions, integrations, and design
    decisions. You will also see the basic workflow used throughout to help you be
    productive. In a nutshell, this workflow is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书并浏览示例时，您将被介绍到 Quarkus 生态系统。您将了解到扩展、集成和设计决策。您还将看到在整个过程中使用的基本工作流程，以帮助您提高工作效率。简而言之，这个工作流程如下所示：
- en: Scaffold
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建脚手架
- en: Launch dev mode
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动开发模式
- en: Code
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码
- en: Test
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试
- en: Package
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包
- en: Deploy
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署
- en: 'Scaffolding your application, or adding an extension to an existing start,
    gives you a solid foundation to build upon. You’ll become familiar with this in
    [Chapter 2](ch02.xhtml#scaffolding_chapter). Following scaffolding, you will be
    asked to run your application in dev mode, which is also introduced in [Chapter 2](ch02.xhtml#scaffolding_chapter).
    You will then learn about typical tasks for an application: creating RESTful services,
    completing the basic programming model, and performing application configuration.
    Dev mode will give you near instant feedback without the bothersome dance of compile,
    package, and deploy that you’ve become familiar with. In [Chapter 5](ch05.xhtml#programming_model)
    you’ll see how to test a Quarkus application that targets both the JVM and native
    executable, giving you reassurance that your application runs correctly and meets
    your standards. Creating the final deliverable is covered in [Chapter 6](ch06.xhtml#packaging_quark_applications_chapter),
    as is learning how to package your application for your particular deployment
    strategy. The last piece of that workflow, deployment, is covered in [Chapter 10](ch10.xhtml#integrating_with_kubernetes_chapter).
    Exploring further, you’ll learn how to make your application more fault resistant,
    how to interact with various persistence engines, and how to communicate with
    external services. We will also explain additional integrations to aid you in
    leveraging existing knowledge from other libraries and programming paradigms.
    We’ll walk you through setting up the Kubernetes optimizations that are necessary
    for your application, building Kubernetes resources, and pushing it all live.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 构建应用程序的脚手架，或者对现有的启动进行扩展，为你提供了一个坚实的基础来构建。你将在[第2章](ch02.xhtml#scaffolding_chapter)中熟悉这一过程。在完成脚手架后，你将被要求在开发模式下运行你的应用程序，这也在[第2章](ch02.xhtml#scaffolding_chapter)中介绍。接下来，你将学习应用程序的典型任务：创建RESTful服务，完成基本的编程模型，并进行应用程序配置。开发模式将为你提供几乎即时的反馈，避免了你熟悉的编译、打包和部署的繁琐过程。在[第5章](ch05.xhtml#programming_model)中，你将了解如何测试旨在同时针对JVM和本机可执行文件的Quarkus应用程序，从而确保你的应用程序能够正确运行并符合你的标准。创建最终的交付成果在[第6章](ch06.xhtml#packaging_quark_applications_chapter)中介绍，以及学习如何为特定的部署策略打包你的应用程序。工作流程的最后一部分——部署，在[第10章](ch10.xhtml#integrating_with_kubernetes_chapter)中讨论。进一步探索时，你将学习如何使应用程序更加容错，如何与各种持久性引擎进行交互，以及如何与外部服务通信。我们还将解释额外的集成，帮助你利用来自其他库和编程范式的现有知识。我们将指导你设置必要的Kubernetes优化，以适应你的应用程序，并构建Kubernetes资源，并将其推向生产环境。
