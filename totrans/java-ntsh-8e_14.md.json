["```java\njava.io\njava.lang\njava.math\njava.net\njava.nio\njava.security\njava.text\njava.time\njava.util\njavax.crypto\njavax.net\njavax.security\n```", "```java\nimport java.util.Arrays;\nimport sun.text.resources.FormatData;\n\npublic final class FormatStealer extends FormatData {\n    public static void main(String[] args) {\n        FormatStealer fs = new FormatStealer();\n        fs.run();\n    }\n\n    private void run() {\n        String[] s = (String[]) handleGetObject(\"japanese.Eras\");\n        System.out.println(Arrays.toString(s));\n\n        Object[][] contents = getContents();\n        Object[] eraData = contents[14];\n        Object[] eras = (Object[])eraData[1];\n        System.out.println(Arrays.toString(eras));\n    }\n}\n```", "```java\n$ javac javanut8/ch12/FormatStealer.java\njavanut8/ch12/FormatStealer.java:4:\n        error: package sun.text.resources is not visible\nimport sun.text.resources.FormatData;\n               ^\n  (package sun.text.resources is declared in module\n        java.base, which does not export it to the unnamed module)\njavanut8/ch12/FormatStealer.java:14: error: cannot find symbol\n        String[] s = (String[]) handleGetObject(\"japanese.Eras\");\n                                ^\n  symbol:   method handleGetObject(String)\n  location: class FormatStealer\njavanut8/ch12/FormatStealer.java:17: error: cannot find symbol\n        Object[][] contents = getContents();\n                              ^\n  symbol:   method getContents()\n  location: class FormatStealer\n3 errors\n```", "```java\n$ javac --add-exports java.base/sun.text.resources=ALL-UNNAMED \\\n        javanut8/ch12/FormatStealer.java\njavanut8/ch12/FormatStealer.java:5:\n        warning: FormatData is internal proprietary API and may be\n        removed in a future release\nimport sun.text.resources.FormatData;\n                         ^\njavanut8/ch12/FormatStealer.java:7:\n        warning: FormatData is internal proprietary API and may be\n        removed in a future release\npublic final class FormatStealer extends FormatData {\n                                         ^\n2 warnings\n```", "```java\n[, Meiji, Taisho, Showa, Heisei, Reiwa]\n[, Meiji, Taisho, Showa, Heisei, Reiwa]\n```", "```java\n$ java javanut8.ch12.FormatStealer\n\nError: LinkageError occurred while loading main class\n        javanut8.ch12.FormatStealer\n\njava.lang.IllegalAccessError: superclass access check failed:\n\nclass javanut8.ch12.FormatStealer (in unnamed module @0x647c3190)\n        cannot access class sun.text.resources.FormatData (in module\n        java.base) because module java.base does not export\n        sun.text.resources to unnamed module @0x647c3190\n```", "```java\n$ java --add-exports java.base/sun.text.resources=ALL-UNNAMED \\\n        javanut8.ch12.FormatStealer\n[, Meiji, Taisho, Showa, Heisei, Reiwa]\n[, Meiji, Taisho, Showa, Heisei, Reiwa]\n```", "```java\nmodule httpchecker {\n    requires java.net.http;\n\n    exports httpchecker.main;\n}\n```", "```java\nimport static java.net.http.HttpResponse.BodyHandlers.ofString;\n\npublic final class HTTP2Checker {\n    public static void main(String[] args) throws Exception {\n        if (args.length == 0) {\n            System.err.println(\"Provide URLS to check\");\n        }\n        for (final var location : args) {\n            var client = HttpClient.newBuilder().build();\n            var uri = new URI(location);\n            var req = HttpRequest.newBuilder(uri).build();\n\n            var response = client.send(req,\n                    ofString(Charset.defaultCharset()));\n            System.out.println(location +\": \"+ response.version());\n        }\n    }\n}\n```", "```java\nmodule http2checker {\n    requires java.net.http;\n    exports httpchecker.main;\n}\n```", "```java\n$ javac -d out/httpchecker \\\n        httpchecker/httpchecker/main/HTTP2Checker.java \\\n        httpchecker/module-info.java\n```", "```java\n$ jar --create --file httpchecker.jar \\\n        --main-class httpchecker.main.HTTP2Checker \\\n        -C out/httpchecker .\n```", "```java\n$ java -jar httpchecker.jar http://www.google.com\nhttp://www.google.com: HTTP_1_1\n$ java -jar httpchecker.jar https://www.google.com\nhttps://www.google.com: HTTP_2\n```", "```java\nopen module jin8 {\n    exports jin8.api;\n}\n```", "```java\nmodule ojin8 {\n    exports ojin8.api;\n    opens ojin8.domain;\n}\n```", "```java\nimport com.example.Service;\n\nService s = new ServiceImpl();\n```", "```java\nmodule jin8 {\n    exports jin8.api;\n    requires othermodule.services;\n\n    provides services.Service with jin8.services.ServiceImpl;\n}\n```", "```java\npublic class GetPID {\n    public static long getPid() {\n        // This rather clunky call uses JMX to return the name that\n        // represents the currently running JVM. This name is in the\n        // format <pid>@<hostname>—on OpenJDK and Oracle VMs only—there\n        // is no guaranteed portable solution for this on Java 8\n        final String jvmName = \n            ManagementFactory.getRuntimeMXBean().getName();\n        final int index = jvmName.indexOf('@');\n        if (index < 1)\n            return -1;\n\n        try {\n            return Long.parseLong(jvmName.substring(0, index));\n        } catch (NumberFormatException nfe) {\n            return -1;\n        }\n    }\n}\n```", "```java\npublic class GetPID {\n    public static long getPid() {\n        // Use new Java 9 Process API...\n        ProcessHandle processHandle = ProcessHandle.current();\n        return processHandle.getPid();\n    }\n}\n```", "```java\nMulti-Release: True\n```", "```java\njar {\n  into('META-INF/versions/11') {\n     from sourceSets.java11.output\n  }\n\n  manifest.attributes(\n     'Multi-Release': 'true'\n  )\n}\n```", "```java\n$ jlink --module-path httpchecker.jar:$JAVA_HOME/jmods \\\n      --add-modules httpchecker,jdk.crypto.ec \\\n      --launcher http2chk=httpchecker \\\n      --output http2chk-image\n```", "```java\n$ java -version\njava version \"1.8.0_144\"\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\n$ ./bin/http2chk https://www.google.com\nhttps://www.google.com: HTTP_2\n```"]