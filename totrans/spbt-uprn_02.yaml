- en: Chapter 2\. Choosing Your Tools and Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。选择您的工具并入门
- en: Getting started creating Spring Boot apps is easy, as you’ll soon see. The most
    difficult part might be deciding which of the available options you’d like to
    choose.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建 Spring Boot 应用程序很容易，您很快就会看到。 最困难的部分可能是决定您想要选择哪个可用选项。
- en: 'In this chapter, we’ll examine some of the excellent choices you have available
    to create Spring Boot applications: build systems, languages, toolchains, code
    editors, and more.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨您可以用来创建 Spring Boot 应用程序的一些出色选择：构建系统、语言、工具链、代码编辑器等等。
- en: Maven or Gradle?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 还是 Gradle？
- en: 'Historically, Java application developers have had a few options for project
    build tools. Some have fallen out of favor over time—for good reason—and now we’ve
    coalesced as a community around two: Maven and Gradle. Spring Boot supports both
    with equal aplomb.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，Java 应用程序开发人员在项目构建工具方面有几个选择。 随着时间的推移，一些选择因有充分理由而不再受欢迎，现在我们作为一个社区聚集在两个选择周围：Maven
    和 Gradle。 Spring Boot 同样支持两者。
- en: Apache Maven
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache Maven
- en: 'Maven is a popular and solid choice for a build automation system. It has been
    around for quite some time, having had its beginning in 2002 and becoming a top-level
    project at the Apache Software Foundation in 2003\. Its declarative approach was
    (and is) conceptually simpler than the alternatives of the time and of now: simply
    create an XML-formatted file named *pom.xml* with desired dependencies and plug-ins.
    When you execute the `mvn` command, you can specify a “phase” to complete, which
    accomplishes a desired task like compiling, removing prior output(s), packaging,
    running an application, and more:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 是一个流行且可靠的构建自动化系统选择。 它已经存在了相当长的时间，最早在 2002 年开始，并于 2003 年成为 Apache Software
    Foundation 的一个顶级项目。 其声明性方法在当时和现在（仍然）在概念上比替代方案更简单：只需创建一个名为 *pom.xml* 的 XML 格式文件，其中包含所需的依赖项和插件。
    当您执行 `mvn` 命令时，可以指定完成的“阶段”，以完成像编译、删除先前的输出、打包、运行应用程序等所需的任务：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Maven also creates and expects a particular project structure by convention.
    You typically shouldn’t deviate much—if at all—from that structure unless you
    are prepared to fight your build tool, a counterproductive quest if there ever
    was one. For the vast majority of projects, the conventional Maven structure works
    perfectly, so it isn’t something you’ll likely need to change. [Figure 2-1](#maven_project_structure_withing_a_spring_boot_application)
    shows a Spring Boot application with the typical Maven project structure.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 还按约定创建并期望特定的项目结构。 除非您准备好与您的构建工具作斗争，否则通常不应该偏离这种结构，如果有的话，这是一个适得其反的任务。 对于绝大多数项目来说，传统的
    Maven 结构完全有效，因此您不太可能需要更改它。 [图 2-1](#maven_project_structure_withing_a_spring_boot_application)
    显示了具有典型 Maven 项目结构的 Spring Boot 应用程序。
- en: '![sbur 0201](Images/sbur_0201.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0201](Images/sbur_0201.png)'
- en: Figure 2-1\. Maven project structure within a Spring Boot application
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1。在 Spring Boot 应用程序中的 Maven 项目结构
- en: Note
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more details about Maven’s expected project structure, refer to [The Maven
    Project’s Introduction to the Standard Directory Layout](https://oreil.ly/mavenprojintro).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Maven 预期项目结构的更多详细信息，请参阅 [The Maven Project’s Introduction to the Standard
    Directory Layout](https://oreil.ly/mavenprojintro)。
- en: If there comes a time when Maven’s project conventions and/or tightly structured
    approach to builds become too constrictive, there is another excellent option.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一天，当 Maven 的项目约定和/或对构建的严格结构化方法变得过于限制性时，还有另一个绝佳选择。
- en: Gradle
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle
- en: Gradle is another popular option for building Java Virtual Machine (JVM) projects.
    First released in 2008, Gradle leverages a Domain Specific Language (DSL) to produce
    a *build.gradle* build file that is both minimal and flexible. An example of a
    Gradle build file for a Spring Boot application follows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 是构建 Java 虚拟机（JVM）项目的另一个流行选项。 首次发布于 2008 年，Gradle 利用特定领域语言（DSL）生成了一个既简洁又灵活的
    *build.gradle* 构建文件。 以下是一个 Spring Boot 应用程序的 Gradle 构建文件示例。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Gradle allows you, the developer, to choose to use either the Groovy or the
    Kotlin programming languages for a DSL. It also offers several features meant
    to reduce your time waiting for a project to build, such as the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 允许开发人员选择使用 Groovy 或 Kotlin 编程语言进行 DSL。 它还提供了几个功能，旨在减少您等待项目构建的时间，例如以下内容：
- en: Incremental compilation of Java classes
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 类的增量编译
- en: Compile avoidance for Java (in cases where no changes occurred)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 的编译避免（在没有更改发生的情况下）
- en: A dedicated daemon for project compilation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目编译的专用守护程序
- en: Choosing Between Maven and Gradle
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Maven 和 Gradle 之间做出选择
- en: Your choice of build tool may not sound like much of a choice at this point.
    Why not simply choose Gradle?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你选择的构建工具可能听起来并不像是一个选择。为什么不简单地选择 Gradle 呢？
- en: Maven’s more rigid declarative (some might say opinionated) approach keeps things
    incredibly consistent from project to project, environment to environment. If
    you follow the Maven way, few issues typically crop up, leaving you to focus on
    your code with little fussing with the build.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 更为严格的声明性（有人可能会说是有主见的）方法使得从一个项目到另一个项目、从一个环境到另一个环境都保持了一致性。如果你遵循 Maven 的方式，通常不会出现太多问题，让你可以专注于你的代码，而不必过多地纠缠于构建过程中。
- en: As a build system built around programming/scripting, Gradle also occasionally
    has issues digesting initial releases of new language versions. The Gradle team
    is responsive and typically dispatches these issues with great haste, but if you
    prefer to (or must) dive immediately into early access language releases, this
    warrants consideration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为围绕编程/脚本构建的构建系统，Gradle 有时也会在消化新语言版本的初始发布时遇到问题。Gradle 团队反应迅速，通常能够迅速解决这些问题，但如果你喜欢（或必须）立即深入了解早期版本的语言发布，这值得考虑。
- en: Gradle can be faster for builds—and sometimes *significantly* faster, especially
    in larger projects. That said, for your typical microservices-based project, build
    times aren’t likely to differ by that much between similar Maven and Gradle projects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于构建，Gradle 可能会更快——有时甚至 *显著* 更快，特别是在较大的项目中。也就是说，对于你典型的基于微服务的项目，类似的 Maven 和 Gradle
    项目之间的构建时间可能不会有太大差异。
- en: Gradle’s flexibility can be a breath of fresh air for simple projects and projects
    with very complex build requirements. But especially in those complex projects,
    Gradle’s additional flexibility can result in more time spent tweaking and troubleshooting
    when things aren’t working the way you might expect. TANSTAAFL (There Ain’t No
    Such Thing as a Free Lunch).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单项目和具有非常复杂构建需求的项目来说，Gradle 的灵活性可能是一种清新的空气。但特别是在那些复杂的项目中，Gradle 的额外灵活性可能会导致在事情不按预期方式工作时花费更多时间进行调整和故障排除。TANSTAAFL（没有免费午餐）。
- en: Spring Boot supports both Maven and Gradle, and if you use the Initializr (to
    be covered in a section that follows), the project and desired build file are
    created for you, to get you up and running quickly. In short, try both, then choose
    what works best for you. Spring Boot will happily support you either way.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 支持 Maven 和 Gradle 两种构建工具，如果你使用 Initializr（将在接下来的章节中介绍），项目和所需的构建文件将被创建，以便让你快速启动。简而言之，尝试两者，然后选择最适合你的方式。Spring
    Boot 将乐意支持你。
- en: Java or Kotlin?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 还是 Kotlin？
- en: While there are many languages available for use on the JVM, two enjoy the most
    widespread use. One is the original JVM language, Java; the other is a relative
    newcomer to the space, Kotlin. Both are full first-class citizens in Spring Boot.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 上有许多可供使用的语言，但其中两种使用最广泛。一种是最初的 JVM 语言 Java；另一种是相对较新的 Kotlin。在 Spring Boot
    中，两者都是完整的一流公民。
- en: Java
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java
- en: Depending on whether you consider the public 1.0 release or the project origin
    as its official birthdate, Java has been around for 25 or 30 years, respectively.
    It’s anything but stagnant, though. Since September 2017, Java has been on a six-month
    release cycle, resulting in more frequent feature improvements than before. The
    maintainers have cleaned up the codebase and have pruned features obviated by
    new ones, as well as introduced vital features driven by the Java community. Java
    is more vibrant than ever.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 取决于你将公开发布的 1.0 版本还是项目起源视为其官方诞生日期，Java 已经存在了 25 或 30 年。然而，它绝不是停滞不前的。自 2017 年
    9 月以来，Java 已经采用了六个月的发布周期，导致比以前更频繁地改进特性。维护者已经清理了代码库，并修剪了被新特性所取代的特性，同时引入了由 Java
    社区驱动的重要特性。Java 比以往任何时候都更加充满活力。
- en: That lively pace of innovation, combined with Java’s longevity and consistent
    focus on backward compatibility, means that there are countless Java shops maintaining
    and creating critical Java applications daily around the world. Many of those
    applications use Spring.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那种充满活力的创新步伐，再加上 Java 的长寿和持续专注于向后兼容性，意味着全球每天都有无数的 Java 店在维护和创建关键的 Java 应用程序。其中许多应用程序使用
    Spring。
- en: Java forms the bedrock-solid foundation of nearly the entire Spring codebase,
    and as such, it’s a great choice to use for building your Spring Boot applications.
    Examining the code for Spring, Spring Boot, and all related projects is a simple
    matter of visiting GitHub where it’s hosted and viewing it there or cloning the
    project to review offline. And with the availability of an abundance of example
    code, sample projects, and “Getting Started” guides written using Java, writing
    Spring Boot apps using Java may be better supported than any other toolchain combination
    on the market.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Java 构建了几乎整个 Spring 代码库的坚实基础，因此，它是构建 Spring Boot 应用程序的绝佳选择。检查 Spring、Spring
    Boot 和所有相关项目的代码只需访问其托管的 GitHub 页面，然后在线查看或克隆项目以离线审阅。并且，Java 编写的大量示例代码、示例项目和“入门指南”使得使用
    Java 编写 Spring Boot 应用程序可能比市场上任何其他工具链组合都更受支持。
- en: Kotlin
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kotlin
- en: 'Relatively speaking, Kotlin is the new kid on the block. Created by JetBrains
    in 2010 and made public in 2011, Kotlin was created to address perceived gaps
    in Java’s usability. Kotlin was designed from the beginning to be:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 相对而言，Kotlin 是一个新生力量。由 JetBrains 在 2010 年创建，并在 2011 年公开，Kotlin 的创建旨在填补 Java 可用性中的感知空白。Kotlin
    从一开始就被设计成：
- en: Concise
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁
- en: Kotlin requires minimal code to clearly communicate intent to the compiler (and
    oneself and other developers).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 需要最少的代码来清晰地向编译器（以及自己和其他开发人员）传达意图。
- en: Safe
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安全
- en: Kotlin eliminates null-related errors by eliminating the possibility of null
    values *by default*, unless the developer specifically overrides behavior to allow
    for them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 默认消除了空指针相关的错误，除非开发人员明确覆盖行为以允许它们。
- en: Interoperable
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可互操作
- en: Kotlin aims for frictionless interoperability with all existing JVM, Android,
    and browser libraries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 旨在与所有现有的 JVM、Android 和浏览器库无摩擦地互操作。
- en: Tool-friendly
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 工具友好
- en: Build Kotlin applications in numerous Integrated Development Environments (IDEs)
    or from the command line, just like Java.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在多种集成开发环境（IDE）或命令行中构建 Kotlin 应用程序，就像构建 Java 应用程序一样。
- en: Kotlin’s maintainers extend the language’s capabilities with great care but
    also with great velocity. Without 25+ years of language compatibility as a core
    design focus, they’ve moved quickly to add very useful capabilities that are likely
    to appear in Java some versions later.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 的维护者们以极大的关怀和速度扩展语言的能力。虽然没有将 25 年以上的语言兼容性作为核心设计重点，但他们迅速添加了非常有用的功能，这些功能可能会在
    Java 的某些版本中出现。
- en: 'In addition to being concise, Kotlin is also a very fluent language. Without
    diving into too many details yet, several language features contribute to this
    linguistic elegance, among them `extension functions` and `infix notation`. I’ll
    discuss this idea in more depth later, but Kotlin makes syntax options like this
    possible:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简洁外，Kotlin 也是一种非常流畅的语言。在不深入细节的情况下，几个语言特性有助于这种语言优雅，其中包括`扩展函数`和`中缀符号`。稍后我会更深入地讨论这个概念，但
    Kotlin 使得这样的语法选项成为可能：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you might imagine, the ability to define your own, more fluent “language
    within a language” can be a boon to API design. Combined with Kotlin’s concision,
    this can make Spring Boot applications written in Kotlin even shorter and more
    readable than their Java counterparts, with no loss in communication of intent.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，定义自己更流畅的“语言内语言”的能力可以成为 API 设计的利器。结合 Kotlin 的简洁性，这使得用 Kotlin 编写的 Spring
    Boot 应用程序甚至比其 Java 对应版本更短更易读，而不会丢失意图的传达。
- en: Kotlin has been a full first-class citizen in Spring Framework since version
    5.0 was released in autumn of 2017, with full support propagating through Spring
    Boot (spring 2018) and other component projects ever since. Additionally, all
    Spring documentation is being expanded to include examples in both Java *and*
    Kotlin. This means that effectively, you can write entire Spring Boot applications
    with Kotlin as easily as with Java.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 自 2017 年秋季发布版本 5.0 以来，就成为 Spring Framework 的全面一等公民，随后通过 Spring Boot（2018
    年春季）和其他组件项目获得全面支持。此外，所有 Spring 文档都在扩展以包含 Java 和 Kotlin 的示例。这意味着实际上，你可以像使用 Java
    一样轻松地用 Kotlin 编写整个 Spring Boot 应用程序。
- en: Choosing Between Java and Kotlin
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Java 和 Kotlin 之间做出选择
- en: The amazing thing is that you don’t actually have to choose. Kotlin compiles
    to the same bytecode output that Java does; and since Spring projects can be created
    that include both Java source files and Kotlin, and can call both compilers with
    ease, you can use whichever makes more sense to you even *within the same project*.
    How’s that for having your cake and eating it too?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，你实际上并不需要做选择。Kotlin 编译成与 Java 相同的字节码输出；由于 Spring 项目可以同时包含 Java 源文件和 Kotlin，并且可以轻松调用两者的编译器，因此你甚至可以在*同一个项目*中使用更合理的语言。这种方法算不错吧？
- en: Of course, if you prefer one over the other or have other personal or professional
    strictures, you’re obviously able to develop entire applications in one or the
    other. It’s good to have choices, no?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你更偏好其中一个，或者有其他个人或专业限制，你显然可以完全使用其中之一开发整个应用程序。有选择总是好的，不是吗？
- en: Choosing a Version of Spring Boot
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 Spring Boot 的版本
- en: 'For production applications, you should always use the current version of Spring
    Boot with the following temporary and narrow exceptions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产应用程序，你应该始终使用当前版本的 Spring Boot，但以下是一些临时和狭隘的例外：
- en: You’re currently running an older version but are upgrading, retesting, and
    deploying your applications in some order such that you simply haven’t reached
    this particular app yet.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你当前正在运行一个较旧版本，但正在按某种顺序进行升级、重新测试和部署应用程序，以至于你还没有到达这个特定的应用程序。
- en: You’re currently running an older version, but there is an identified conflict
    or bug you’ve reported to the Spring team and are instructed to wait for an update
    to Boot or a dependency in question.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你当前正在运行一个较旧版本，但存在已知冲突或错误，你已向 Spring 团队报告，并被告知等待 Boot 或相关依赖项的更新。
- en: You need to utilize features in a snapshot, milestone, or release candidate
    pre-GA (General Availability) version and are willing to accept the risks inherent
    with code that hasn’t yet been declared GA, i.e., “ready for production use.”
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要在 GA（正式发布）之前的快照、里程碑或发布候选版本中利用功能，并且愿意接受尚未声明 GA、即“可供生产使用”的代码所固有的风险。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Snapshot, milestone, and Release Candidate (RC) versions are extensively tested
    prior to publication, so a great deal of rigor has already gone into ensuring
    their stability. Until the full GA version is approved and published, though,
    there is always the potential for API changes, fixes, etc. The risks to your application
    are low, but you’ll have to decide for yourself (and test and confirm) if those
    risks are manageable when you consider using *any* early-access software.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 快照、里程碑和发布候选（RC）版本在发布前经过了广泛测试，因此已经付出了大量工作来确保它们的稳定性。然而，在完整的 GA 版本获得批准和发布之前，总是存在
    API 更改、修复等的可能性。对于你的应用程序来说风险很低，但你需要自己决定（并测试和确认）在考虑使用*任何*早期版本软件时这些风险是否可管理。
- en: The Spring Initializr
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Initializr
- en: 'There are many ways to create a Spring Boot application, but most lead back
    to a single starting point: the Spring Initializr, shown in [Figure 2-2](#the_spring_initializer).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Spring Boot 应用程序有很多种方式，但大多数都会指向一个起点：Spring Initializr，如 [图 2-2](#the_spring_initializer)
    所示。
- en: '![sbur 0202](Images/sbur_0202.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0202](Images/sbur_0202.png)'
- en: Figure 2-2\. The Spring Initializr
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2\. Spring Initializr
- en: Sometimes referred to simply by its URL, `start.spring.io`, the Spring Initializr
    can be accessed from project creation wizards within prominent IDEs, via the command
    line, or most often via a web browser. Using the web browser provides a few extra
    useful features that can’t (yet) be accessed via other avenues.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时简称为其网址，`start.spring.io`，Spring Initializr 可以从突出的 IDE 项目创建向导、命令行或者最常见的是通过网页浏览器访问。通过网页浏览器使用还提供了一些其他渠道无法（目前）获取的额外实用功能。
- en: To begin creating a Spring Boot project in the “Best Possible Way,” point your
    browser to [*https://start.spring.io*](https://start.spring.io). From there, we’ll
    choose a few options and get started.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始以“最佳方式”创建 Spring Boot 项目，请将浏览器指向[*https://start.spring.io*](https://start.spring.io)。从那里，我们将选择一些选项然后开始。
- en: 'To get started with the Initializr, we first choose the build system we plan
    to use with our project. As mentioned previously, we have two great options: Maven
    and Gradle. Let’s choose Maven for this example.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Initializr，我们首先选择要与项目一起使用的构建系统。如前所述，我们有两个很好的选择：Maven 和 Gradle。我们选择 Maven
    作为示例。
- en: Next, we’ll choose Java as the (language) basis for this project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将选择 Java 作为该项目的（语言）基础。
- en: As you may have noticed already, the Spring Initializr selects enough defaults
    for the options presented to create a project with no input from you whatsoever.
    When you reached this web page, Maven and Java were both already preselected.
    The current version of Spring Boot is as well, and for this—and most—projects,
    that is what you’ll want to select.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，Spring Initializr为所呈现的选项选择了足够的默认值，以便无需您的任何输入即可创建项目。当您访问此网页时，Maven和Java已经预先选定。当前版本的Spring
    Boot也是如此，对于这个——以及大多数——项目来说，这是您希望选择的版本。
- en: We can leave the options under Project Metadata as they are without issue, although
    we’ll modify them for future projects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在项目元数据下留下选项而没有问题，尽管我们将来会修改它们以适应未来的项目。
- en: And for now, we also don’t include any dependencies. This way, we can focus
    on the mechanics of project creation, not any particular outcome.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还不包括任何依赖项。这样，我们可以专注于项目创建的机制，而不是任何特定的结果。
- en: Before generating that project, though, there are a couple of really nice features
    of the Spring Initializr I’d like to point out, along with one sidenote.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成项目之前，还有几个Spring Initializr的非常好的功能，我想指出，并附带一条侧记。
- en: 'If you’d like to examine your project’s metadata and dependency details prior
    to project generation based on your current selections, you can click the Explore
    button or use the keyboard shortcut, Ctrl+Space, to open Spring Initializr’s Project
    Explorer (shown in [Figure 2-3](#spring_initialzr_project_explorer)). The Initializr
    will then present you with the project structure and build file that will be included
    in the compressed (*.zip*) project you’re about to download. You can review the
    directory/package structure, application properties file (more on this later),
    and the project properties and dependencies specified in your build file: since
    we’re using Maven for this project, ours is *pom.xml*.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在基于当前选择生成项目之前检查项目的元数据和依赖项详细信息，您可以单击“探索”按钮或使用键盘快捷键Ctrl+Space打开Spring Initializr的项目浏览器（如[图2-3](#spring_initialzr_project_explorer)所示）。然后，Initializr将向您展示将包含在即将下载的压缩（*.zip*）项目中的项目结构和构建文件。您可以查看目录/包结构，应用属性文件（稍后详述），以及在构建文件中指定的项目属性和依赖项：因为我们在这个项目中使用Maven，所以我们的是*pom.xml*。
- en: '![sbur 0203](Images/sbur_0203.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0203](Images/sbur_0203.png)'
- en: Figure 2-3\. Spring Initializr’s Project Explorer
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-3\. Spring Initializr项目浏览器
- en: This is a quick and handy way to verify project configuration and dependencies
    before downloading, extracting, and loading into your IDE your brand-new, empty
    project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在下载、解压和加载到您的IDE中全新空项目之前，验证项目配置和依赖项的快速便捷方法。
- en: Another smaller feature of the Spring Initializr, but one that has been welcomed
    by numerous developers, is dark mode. By clicking on the `Dark UI` toggle at the
    top of the page as shown in [Figure 2-4](#the_spring_initialze_in_dark_mode),
    you switch to Initializr’s dark mode and make that the default each time you visit
    the page. It’s a small feature, but if you keep your machine in dark mode everywhere
    else, it certainly makes loading the Initializr less jarring and more pleasant.
    You’ll want to keep coming back!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr的另一个较小的功能，但却受到许多开发人员的欢迎，是暗色模式。通过点击页面顶部显示的“Dark UI”切换，如[图2-4](#the_spring_initialze_in_dark_mode)所示，您可以切换到Initializr的暗色模式，并使其成为每次访问页面时的默认模式。这是一个小功能，但如果您在其他所有地方都保持暗色模式，那么加载Initializr时肯定会减少不适感，使体验更加愉快。您会希望继续使用它！
- en: '![sbur 0204](Images/sbur_0204.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0204](Images/sbur_0204.png)'
- en: Figure 2-4\. The Spring Initializr, in dark mode!
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-4\. Spring Initializr，暗色模式下！
- en: Note
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: 'Other than the main application class and its main method, plus an empty test,
    the Spring Initializr doesn’t generate code for you; it generates the *project*
    for you, per your guidance. It’s a small distinction but a very important one:
    code generation has wildly varied results and often hamstrings you the moment
    you begin making changes. By generating the project structure, including the build
    file with specified dependencies, the Initializr provides you a running start
    to write the code you need to leverage Spring Boot’s autoconfiguration. Autoconfig
    gives you superpowers without the straitjacket.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主应用程序类及其主方法以及空测试之外，Spring Initializr不会为您生成代码；它根据您的指导为您生成*项目*。这是一个小区别，但却是一个非常重要的区别：代码生成结果千差万别，通常会在您开始进行更改时束缚您。通过生成项目结构，包括具有指定依赖项的构建文件，Initializr为您提供了一个运行的起点，以编写您需要利用Spring
    Boot自动配置的代码。自动配置为您提供超能力，而无需约束。
- en: Next, click the Generate button to generate, package, and download your project,
    saving it to your chosen location on your local machine. Then navigate to that
    downloaded *.zip* file and unzip it to prepare to develop your application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，单击“生成”按钮生成、打包并下载您的项目，将其保存到本地机器上选择的位置。然后导航到下载的 *.zip* 文件，并解压以准备开发您的应用程序。
- en: Straight Outta Commandline
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接来自命令行
- en: If you happily spend as much time as possible on the command line or wish to
    eventually script project creation, the Spring Boot Command Line Interface (CLI)
    was made for you. The Spring Boot CLI has many powerful capabilities, but for
    now, we’ll limit our focus to creating a new Boot project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您乐意在命令行上尽可能多地花时间，或者希望最终脚本化项目创建过程，那么 Spring Boot 命令行界面 (CLI) 是为您量身定制的。Spring
    Boot CLI 具有许多强大的功能，但目前我们将专注于创建新的 Boot 项目。
- en: '![sbur 0205](Images/sbur_0205.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0205](Images/sbur_0205.png)'
- en: Figure 2-5\. The Spring Boot CLI on SDKMAN!
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5\. 在 SDKMAN 上的 Spring Boot CLI
- en: 'Once you’ve installed the Spring Boot CLI, you can create the same project
    we just created with the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 Spring Boot CLI 后，您可以使用以下命令创建与刚刚创建的相同项目：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To extract the zipped project into a directory named *demo*, you can execute
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要将压缩的项目提取到名为 *demo* 的目录中，您可以执行以下命令：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Wait, how can it be so easy? In one word, defaults. The Spring CLI uses the
    same default settings as the Spring Initializr (Maven, Java, etc.), allowing you
    to provide arguments only for values you wish to change. Let’s specifically provide
    values for a few of those defaults (and add a helpful twist for project extraction)
    just to better see what is involved:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，怎么会这么简单？用一个词来说，那就是默认设置。Spring CLI 使用与 Spring Initializr 相同的默认设置（Maven、Java
    等），允许您仅为希望更改的值提供参数。让我们特别为其中一些默认值提供值（并为项目提取添加一个有用的变化），以更好地了解所涉及的内容：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We’re still initializing a project using the Spring CLI, but now we’re providing
    the following arguments:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍在使用 Spring CLI 初始化项目，但现在我们提供了以下参数：
- en: '`-a demo` (or `--artifactId demo`) allows us to provide an artifact ID for
    the project; in this case, we call it “demo.”'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a demo` (或 `--artifactId demo`) 允许我们为项目提供一个 artifact ID；在本例中，我们称其为“demo”。'
- en: '`-l java` (or `--language java`) lets us specify Java, Kotlin, or Groovy^([1](ch02.xhtml#idm45693965291736))
    as the primary language we’ll use for this project.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l java` (或 `--language java`) 允许我们指定 Java、Kotlin 或 Groovy^([1](ch02.xhtml#idm45693965291736))
    作为此项目的主要语言。'
- en: '`--build` is the flag for the build system argument; valid values are `maven`
    and `gradle`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--build` 是用于构建系统参数的标志；有效的值是 `maven` 和 `gradle`。'
- en: '`-x demo` requests the CLI to extract the resultant project *.zip* file returned
    by the Initializr; note that the `-x` is optional, and specifying a text label
    without an extension (as we’ve done here) is helpfully inferred to be an extraction
    directory.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x demo` 请求 CLI 提取 Initializr 返回的项目 *.zip* 文件；请注意，`-x` 是可选的，并且在没有扩展名的情况下指定文本标签（如我们在这里所做的）会被推断为提取目录。'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: All of these options can be reviewed further by executing `spring help init`
    from the command line.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `spring help init` 命令可以进一步查看所有这些选项。
- en: Things get a bit more involved when specifying dependencies. As you might imagine,
    it’s hard to beat the ease of choosing them from the “menu” presented by the Spring
    Initializr. But the flexibility of the Spring CLI is handy in the extreme for
    quick starts, scripting, and build pipelines.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定依赖关系时，事情会变得更加复杂。正如您可能想象的那样，从 Spring Initializr 提供的“菜单”中选择依赖项非常方便。但是，Spring
    CLI 的灵活性对于快速启动、脚本化和构建管道非常有用。
- en: 'One more thing: by default, the CLI leverages the Initializr to provide its
    project-building capabilities, which means projects created via either mechanism
    (CLI or via the Initializr web page) are identical. That consistency is absolutely
    essential in a shop that directly uses the Spring Initializr’s capabilities.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事：默认情况下，CLI 利用 Initializr 提供其项目构建能力，这意味着通过 CLI 或通过 Initializr 网页创建的项目是相同的。在直接使用
    Spring Initializr 能力的场景中，这种一致性是非常重要的。
- en: Occasionally, though, an organization tightly controls what dependencies their
    developers can even use to create projects. To be completely honest, this approach
    saddens me and feels very timebound, impeding an organization’s agility and user/market
    responsiveness. If you’re in such an organization, this complicates your ability
    to “get the job done” on anything you set out to accomplish.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，有时组织会严格控制开发者能够使用的依赖项，甚至是创建项目的工具。坦率地说，这种做法让我感到沮丧，因为它会限制组织的灵活性和用户/市场响应能力。如果你在这样的组织中工作，那么在完成任何工作时可能会变得更加复杂。
- en: 'That being the case, it is possible to create your own project generator (even
    cloning the repository for the Spring Initializr) and use that directly via the
    resultant web page…or only expose the REST API portion and utilize that from the
    Spring CLI. To do so, just add this parameter to the commands shown earlier (replacing
    with your valid URL, of course):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您可以创建自己的项目生成器（甚至克隆 Spring Initializr 的存储库）并直接使用生成的网页…或者只暴露 REST API 部分并从
    Spring CLI 中使用。为此，只需将此参数添加到之前显示的命令中（当然，要用您的有效 URL 替换 ）：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Staying In Integrated Development Environments (IDEs)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集成开发环境（IDE）中停留
- en: However you create your Spring Boot project, you’ll need to open it and write
    some code to create a useful application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何创建 Spring Boot 项目，您都需要打开它并编写一些代码以创建有用的应用程序。
- en: There are three major IDEs and numerous text editors that do a respectable job
    of supporting you as a developer. IDEs include, but are not limited to, [Apache
    NetBeans](https://netbeans.apache.org), [Eclipse](https://www.eclipse.org), and
    [IntelliJ IDEA](https://www.jetbrains.com/idea). All three are open source software
    (OSS), and all three are free in many circumstances.^([2](ch02.xhtml#idm45693965268056))
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种主要的集成开发环境（IDE）和许多文本编辑器可以很好地支持开发者。IDE 包括但不限于[Apache NetBeans](https://netbeans.apache.org)，[Eclipse](https://www.eclipse.org)和[IntelliJ
    IDEA](https://www.jetbrains.com/idea)。这三种都是开源软件（OSS），在许多情况下都是免费的。^([2](ch02.xhtml#idm45693965268056))
- en: In this book, as in my daily life, I primarily use IntelliJ Ultimate Edition.
    There isn’t really a wrong choice as much as a personal preference (or organizational
    mandate or preference) in choosing an IDE, so please use what fits you and your
    tastes best. Most concepts transfer pretty well among the major offerings.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，以及在我的日常生活中，我主要使用 IntelliJ Ultimate Edition。在选择 IDE 时，并没有绝对的正确选择，更多取决于个人喜好（或组织的要求或偏好），因此请根据自己的情况选择最适合你和你喜好的工具。大多数主要工具之间的概念转移都非常顺畅。
- en: There are also several editors that have garnered a large following among devs.
    Some, like [Sublime Text](https://www.sublimetext.com), are paid applications
    that have fierce followings due to their quality and longevity. Other more recent
    entrants to the field, like [Atom](https://atom.io) (created by GitHub, which
    is now owned by Microsoft) and [Visual Studio Code](https://code.visualstudio.com)
    (shortened to VSCode, created by Microsoft) are gaining capabilities and loyal
    followings rapidly.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几款编辑器在开发者中拥有大量的追随者。例如，像[Sublime Text](https://www.sublimetext.com)这样的付费应用程序由于其质量和长期性而拥有激烈的追随者。其他更近期进入这一领域的编辑器，如由
    GitHub 创建的[Atom](https://atom.io)（现在由 Microsoft 拥有）和由 Microsoft 创建的[Visual Studio
    Code](https://code.visualstudio.com)（简称 VSCode），正在迅速增强其功能和获得忠实的追随者。
- en: 'In this book, I occasionally use VSCode or its counterpart built from the same
    codebase but with telemetry/tracking disabled, [VSCodium](https://vscodium.com).
    In order to support some of the features most developers expect and/or require
    from their development environment, I add the following extensions to VSCode/VSCodium:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我偶尔会使用 VSCode 或其从相同代码库构建但已禁用遥测/追踪的对应版本，[VSCodium](https://vscodium.com)。为了支持大多数开发者期望和/或需要的某些功能，我向
    VSCode/VSCodium 添加了以下扩展：
- en: '[Spring Boot Extension Pack (Pivotal)](https://oreil.ly/SBExtPack)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[Spring Boot Extension Pack（Pivotal）](https://oreil.ly/SBExtPack)'
- en: This includes several other extensions, including `Spring Initializr Java Support`,
    `Spring Boot Tools`, and `Spring Boot Dashboard`, which facilitate the creation,
    editing, and management of Spring Boot applications within VSCode, respectively.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这还包括几个其他扩展，如 `Spring Initializr Java Support`，`Spring Boot Tools` 和 `Spring
    Boot Dashboard`，它们分别在 VSCode 中便于创建、编辑和管理 Spring Boot 应用程序。
- en: '[Debugger for Java (Microsoft)](https://oreil.ly/DebuggerJava)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[Debugger for Java（Microsoft）](https://oreil.ly/DebuggerJava)'
- en: Dependency of the Spring Boot Dashboard.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 仪表板的依赖项。
- en: '[IntelliJ IDEA Keybindings (Keisuke Kato)](https://oreil.ly/IntellijIDEAKeys)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[IntelliJ IDEA 快捷键（加藤圭佑）](https://oreil.ly/IntellijIDEAKeys)'
- en: Because I primarily use IntelliJ, this makes it easier for me to switch between
    the two more easily.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我主要使用IntelliJ，这使得我更容易在这两者之间切换。
- en: '[Language Support for Java™ (Red Hat)](https://oreil.ly/JavaLangSupport)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[Java™语言支持（Red Hat）](https://oreil.ly/JavaLangSupport)'
- en: Dependency of Spring Boot Tools.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot工具的依赖。
- en: '[Maven for Java (Microsoft)](https://oreil.ly/MavenJava)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[Java的Maven（Microsoft）](https://oreil.ly/MavenJava)'
- en: Facilitates the use of Maven-based projects.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 便于使用基于Maven的项目。
- en: There are other extensions you may find useful for wrangling XML, Docker, or
    other ancillary technologies, but these are the essentials for our current purposes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他扩展可能对处理XML、Docker或其他辅助技术很有用，但对于我们当前的目的来说，这些是必需的。
- en: Continuing with our Spring Boot project, you’ll next want to open it in your
    chosen IDE or text editor. For most of the examples in this book, we’ll use IntelliJ
    IDEA, a very capable IDE (written in Java and Kotlin) produced by JetBrains. If
    you’ve already associated your IDE with project build files, you can double-click
    on the `pom.xml` file in your project’s directory (using Finder on the Mac, File
    Explorer on Windows, or one of the various File Managers on Linux) and load the
    project into your IDE automatically. If not, you can open the project from within
    your IDE or editor in the manner recommended by its developers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行我们的Spring Boot项目，接下来您将希望在您选择的IDE或文本编辑器中打开它。在本书的大多数示例中，我们将使用IntelliJ IDEA，这是一款由JetBrains开发的非常强大的IDE（使用Java和Kotlin编写）。如果您已将您的IDE与项目构建文件关联起来，您可以在项目目录中双击`pom.xml`文件（在Mac上使用Finder，在Windows上使用File
    Explorer，或在Linux上使用各种文件管理器），自动将项目加载到IDE中。如果没有，请按照其开发者推荐的方式在您的IDE或编辑器中打开项目。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Many IDEs and editors offer a way to create command line shortcuts to launch
    and load, bringing up your project with one short command. Examples include IntelliJ’s
    `idea`, VSCode’s/VSCodium’s `code`, and Atom’s `atom` shortcuts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 许多IDE和编辑器提供了一种创建命令行快捷方式的方法，可以通过简短的命令启动和加载项目。例如，IntelliJ的`idea`，VSCode/VSCodium的`code`，以及Atom的`atom`快捷方式。
- en: Cruising Down main()
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cruising Down main()
- en: Now that we’ve loaded the project in our IDE (or editor), let’s take a look
    at what makes a Spring Boot project ([Figure 2-6](#our_spring_boot_demo_applications_main_application_class))
    just a bit different from a standard Java application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的IDE（或编辑器）中加载了项目，请看一下什么使得一个Spring Boot项目（[图 2-6](#our_spring_boot_demo_applications_main_application_class)）与标准的Java应用有些不同。
- en: '![sbur 0206](Images/sbur_0206.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0206](Images/sbur_0206.png)'
- en: Figure 2-6\. Our Spring Boot demo application’s main application class
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-6\. 我们的Spring Boot演示应用程序的主应用程序类
- en: 'A standard Java application contains (by default) an empty `public static void
    main` method. When we execute a Java application, the JVM searches for this method
    as the app’s starting point, and without it, application startup fails with an
    error like this one:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Java应用程序（默认情况下）包含一个空的`public static void main`方法。当我们执行Java应用程序时，JVM会搜索此方法作为应用程序的起点，如果没有此方法，应用程序启动将失败，并显示类似以下的错误：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Of course, you can place code to be executed upon application startup in a Java
    class’s main method, and a Spring Boot application does exactly that. Upon startup,
    a Spring Boot app checks the environment, configures the application, creates
    the initial context, and launches the Spring Boot application. It does this via
    a single top-level annotation and a single line of code, as shown in [Figure 2-7](#the_essence_of_a_spring_boot_application).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以将要在应用程序启动时执行的代码放置在Java类的主方法中，Spring Boot应用程序正是这样做的。在启动时，Spring Boot应用程序会检查环境、配置应用程序、创建初始上下文，并启动Spring
    Boot应用程序。它通过一个顶级注解和一行代码完成，如图 [2-7](#the_essence_of_a_spring_boot_application)
    所示。
- en: '![sbur 0207](Images/sbur_0207.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0207](Images/sbur_0207.png)'
- en: Figure 2-7\. The essence of a Spring Boot application
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-7\. Spring Boot应用程序的本质
- en: We’ll dive under the covers of these mechanisms as the book unfolds. For now,
    suffice it to say that Boot takes a lot of tedious application setup off your
    hands during application startup *by design* and *by default* so that you can
    quickly get down to the business of writing meaningful code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书逐步展开时，我们将深入探讨这些机制的内部工作。现在，可以说，通过设计和默认设置，Boot在应用程序启动时会为您减少大量繁琐的应用程序设置工作，这样您就可以迅速专注于编写有意义的代码。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has examined some of the first-class choices you have in creating
    Spring Boot applications. Whether you prefer to build your projects using Maven
    or Gradle, write code in Java or Kotlin, or create projects from the web interface
    provided by the Spring Initializr or its command line partner, the Spring Boot
    CLI, you have the full power and ease of Spring Boot at your fingertips without
    compromise. You can also work with Boot projects using an impressive variety of
    IDEs and text editors with top-notch Spring Boot support.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经探讨了创建Spring Boot应用程序时的一些一流选择。无论您喜欢使用Maven还是Gradle构建项目，在Java或Kotlin中编写代码，还是通过Spring
    Initializr提供的Web界面或其命令行伙伴Spring Boot CLI创建项目，您都可以毫不妥协地利用Spring Boot的全部功能和便利。您还可以使用各种支持Spring
    Boot的顶级IDE和文本编辑器来处理Boot项目。
- en: 'As covered here and in [Chapter 1](ch01.xhtml#sbur-01), the Spring Initializr
    works hard for you in getting your project created quickly and easily. Spring
    Boot contributes meaningfully throughout the development life cycle with the following
    features:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这里和[第1章](ch01.xhtml#sbur-01)中所述，Spring Initializr 努力为您快速轻松地创建项目。Spring Boot在开发生命周期中通过以下功能有意义地做出贡献：
- en: Simplified dependency management, which comes into play from project creation
    through development and maintenance
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的依赖管理，从项目创建到开发和维护都起到作用。
- en: Autoconfiguration that dramatically reduces/eliminates the boilerplate you might
    otherwise write before working on the problem domain
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动配置大大减少/消除了在处理问题域之前可能编写的样板代码。
- en: Simplified deployment that makes packaging and deployment a breeze
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的部署使打包和部署变得十分轻松。
- en: And all of these capabilities are fully supported regardless of build system,
    language, or toolchain choices you make along the way. It’s an amazingly flexible
    and powerful combination.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不论您在这个过程中做出了哪些构建系统、语言或工具链的选择，所有这些能力都得到了充分支持。这是一个令人惊讶的灵活和强大的组合。
- en: 'In the next chapter, we’ll create our first really meaningful Spring Boot application:
    an app that provides a REST API.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建我们的第一个真正有意义的Spring Boot应用程序：一个提供REST API的应用程序。
- en: ^([1](ch02.xhtml#idm45693965291736-marker)) Groovy support is still provided
    within Spring Boot but is nowhere near as widely used as Java or Kotlin.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.xhtml#idm45693965291736-marker)) Spring Boot 仍然支持Groovy，但远不及Java或Kotlin广泛使用。
- en: '^([2](ch02.xhtml#idm45693965268056-marker)) There are two options available:
    Community Edition (CE) and Ultimate Edition (UE). Community Edition supports Java
    and Kotlin app development, but to have access to all available Spring support,
    you must use Ultimate Edition. Certain use cases qualify for a free license for
    UE, or you can of course also purchase one. Additionally, all three provide excellent
    support for Spring Boot applications.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.xhtml#idm45693965268056-marker)) 有两个选项可供选择：社区版（CE）和旗舰版（UE）。社区版支持Java和Kotlin应用程序开发，但要获得所有可用的Spring支持，您必须使用旗舰版。某些用例符合UE的免费许可证条件，或者您当然也可以购买一个。此外，这三个版本都为Spring
    Boot应用程序提供了出色的支持。
