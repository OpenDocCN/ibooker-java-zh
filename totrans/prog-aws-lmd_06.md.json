["```java\npublic void handler(S3Event event) {\n  event.getRecords().forEach(this::processS3EventRecord);\n}\n```", "```java\nprivate void processS3EventRecord(\n    S3EventNotification.S3EventNotificationRecord record) {\n\n  final List<WeatherEvent> weatherEvents = readWeatherEventsFromS3(\n    record.getS3().getBucket().getName(),\n    record.getS3().getObject().getKey());\n\n  weatherEvents.stream()\n    .map(this::weatherEventToSnsMessage)\n    .forEach(message -> sns.publish(snsTopic, message));\n\n  System.out.println(\"Published \" + weatherEvents.size()\n    + \" weather events to SNS\");\n}\n```", "```java\nprivate List<WeatherEvent> readWeatherEventsFromS3(String bucket, String key) {\n  try {\n    final S3ObjectInputStream s3is =\n      s3.getObject(bucket, key).getObjectContent();\n    final WeatherEvent[] weatherEvents =\n      objectMapper.readValue(s3is, WeatherEvent[].class);\n    s3is.close();\n    return Arrays.asList(weatherEvents);\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n```", "```java\npublic BulkEventsLambda() {\n  this(AmazonSNSClientBuilder.defaultClient(),\n    AmazonS3ClientBuilder.defaultClient());\n}\n\npublic BulkEventsLambda(AmazonSNS sns, AmazonS3 s3) {\n  this.sns = sns;\n  this.s3 = s3;\n  this.snsTopic = System.getenv(FAN_OUT_TOPIC_ENV);\n\n  if (this.snsTopic == null) {\n    throw new RuntimeException(\n      String.format(\"%s must be set\", FAN_OUT_TOPIC_ENV));\n  }\n}\n```", "```java\nprivate void publishToSns(String message) {\n  sns.publish(snsTopic, message);\n}\n\nprivate InputStream getObjectFromS3(\n      S3EventNotification.S3EventNotificationRecord record) {\n\n  String bucket = record.getS3().getBucket().getName();\n  String key = record.getS3().getObject().getKey();\n  return s3.getObject(bucket, key).getObjectContent();\n}\n```", "```java\npublic void handler(S3Event event) {\n\n  List<WeatherEvent> events = event.getRecords().stream()\n    .map(this::getObjectFromS3)\n    .map(this::readWeatherEvents)\n    .flatMap(List::stream)\n    .collect(Collectors.toList());\n\n  // Serialize and publish WeatherEvent messages to SNS\n  events.stream()\n    .map(this::weatherEventToSnsMessage)\n    .forEach(this::publishToSns);\n\n  System.out.println(\"Published \" + events.size()\n    + \" weather events to SNS\");\n}\n```", "```java\nList<WeatherEvent> readWeatherEvents(InputStream inputStream) {\n  try (InputStream is = inputStream) {\n    return Arrays.asList(\n      objectMapper.readValue(is, WeatherEvent[].class));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n```", "```java\npublic class BulkEventsLambdaUnitTest {\n\n  @Test\n  public void testReadWeatherEvents() {\n\n    // Fixture data\n    InputStream inputStream =\n      getClass().getResourceAsStream(\"/bulk_data.json\");\n\n    // Construct Lambda function class, and invoke\n    BulkEventsLambda lambda =\n      new BulkEventsLambda(null, null);\n    List<WeatherEvent> weatherEvents =\n      lambda.readWeatherEvents(inputStream);\n\n    // Assert\n    Assert.assertEquals(3, weatherEvents.size());\n\n    Assert.assertEquals(\"Brooklyn, NY\",\n      weatherEvents.get(0).locationName);\n    Assert.assertEquals(91.0,\n      weatherEvents.get(0).temperature, 0.0);\n    Assert.assertEquals(1564428897L,\n      weatherEvents.get(0).timestamp, 0);\n    Assert.assertEquals(40.7,\n      weatherEvents.get(0).latitude, 0.0);\n    Assert.assertEquals(-73.99,\n      weatherEvents.get(0).longitude, 0.0);\n\n    Assert.assertEquals(\"Oxford, UK\",\n      weatherEvents.get(1).locationName);\n    Assert.assertEquals(64.0,\n      weatherEvents.get(1).temperature, 0.0);\n    Assert.assertEquals(1564428897L,\n      weatherEvents.get(1).timestamp, 0);\n    Assert.assertEquals(51.75,\n      weatherEvents.get(1).latitude, 0.0);\n    Assert.assertEquals(-1.25,\n      weatherEvents.get(1).longitude, 0.0);\n\n    Assert.assertEquals(\"Charlottesville, VA\",\n      weatherEvents.get(2).locationName);\n    Assert.assertEquals(87.0,\n      weatherEvents.get(2).temperature, 0.0);\n    Assert.assertEquals(1564428897L,\n      weatherEvents.get(2).timestamp, 0);\n    Assert.assertEquals(38.02,\n      weatherEvents.get(2).latitude, 0.0);\n    Assert.assertEquals(-78.47,\n      weatherEvents.get(2).longitude, 0.0);\n  }\n\n}\n```", "```java\npublic class BulkEventsLambdaUnitTest {\n\n  @Rule\n  public ExpectedException thrown = ExpectedException.none();\n\n  @Rule\n  public EnvironmentVariables environment = new EnvironmentVariables();\n\n  @Test\n  public void testReadWeatherEventsBadData() {\n\n    // Fixture data\n    InputStream inputStream =\n      getClass().getResourceAsStream(\"/bad_data.json\");\n\n    // Expect exception\n    thrown.expect(RuntimeException.class);\n    thrown.expectCause(\n      CoreMatchers.instanceOf(InvalidFormatException.class));\n    thrown.expectMessage(\n      \"Can not deserialize value of type java.lang.Long from String\");\n\n    // Invoke\n    BulkEventsLambda lambda = new BulkEventsLambda(null, null);\n    lambda.readWeatherEvents(inputStream);\n  }\n\n}\n```", "```java\npublic class BulkEventsLambdaFunctionalTest {\n\n  @Test\n  public void testHandler() throws IOException {\n\n    // Set up mock AWS SDK clients\n    AmazonSNS mockSNS = Mockito.mock(AmazonSNS.class);\n    AmazonS3 mockS3 = Mockito.mock(AmazonS3.class);\n\n    // Fixture S3 event\n    S3Event s3Event = objectMapper\n      .readValue(getClass()\n      .getResourceAsStream(\"/s3_event.json\"), S3Event.class);\n    String bucket =\n      s3Event.getRecords().get(0).getS3().getBucket().getName();\n    String key =\n      s3Event.getRecords().get(0).getS3().getObject().getKey();\n\n    // Fixture S3 return value\n    S3Object s3Object = new S3Object();\n    s3Object.setObjectContent(\n      getClass().getResourceAsStream(String.format(\"/%s\", key)));\n    Mockito.when(mockS3.getObject(bucket, key)).thenReturn(s3Object);\n\n    // Fixture environment\n    String topic = \"test-topic\";\n    environment.set(BulkEventsLambda.FAN_OUT_TOPIC_ENV, topic);\n\n    // Construct Lambda function class, and invoke handler\n    BulkEventsLambda lambda = new BulkEventsLambda(mockSNS, mockS3);\n    lambda.handler(s3Event);\n\n    // Capture outbound SNS messages\n    ArgumentCaptor<String> topics =\n      ArgumentCaptor.forClass(String.class);\n    ArgumentCaptor<String> messages =\n      ArgumentCaptor.forClass(String.class);\n    Mockito.verify(mockSNS,\n      Mockito.times(3)).publish(topics.capture(),\n        messages.capture());\n\n    // Assert\n    Assert.assertArrayEquals(\n      new String[]{topic, topic, topic},\n      topics.getAllValues().toArray());\n    Assert.assertArrayEquals(new String[]{\n      \"{\\\"locationName\\\":\\\"Brooklyn, NY\\\",\\\"temperature\\\":91.0,\"\n        + \"\\\"timestamp\\\":1564428897,\\\"longitude\\\":-73.99,\"\n        + \"\\\"latitude\\\":40.7}\",\n      \"{\\\"locationName\\\":\\\"Oxford, UK\\\",\\\"temperature\\\":64.0,\"\n        + \"\\\"timestamp\\\":1564428898,\\\"longitude\\\":-1.25,\"\n        + \"\\\"latitude\\\":51.75}\",\n      \"{\\\"locationName\\\":\\\"Charlottesville, VA\\\",\\\"temperature\\\":87.0,\"\n        + \"\\\"timestamp\\\":1564428899,\\\"longitude\\\":-78.47,\"\n        + \"\\\"latitude\\\":38.02}\"\n    }, messages.getAllValues().toArray());\n  }\n}\n```", "```java\n$ sam local generate-event s3 put > src/test/resources/s3_event.json\n```", "```java\n{\n  \"Records\": [\n    {\n      ...\n      \"s3\": {\n        \"bucket\": {\n          \"name\": \"example-bucket\",\n        ...\n        },\n        \"object\": {\n          \"key\": \"bulk_data.json\",\n        }\n      }\n    }\n  ]\n}\n```", "```java\n@Test\npublic void endToEndTest() throws InterruptedException {\n  String bucketName = resolvePhysicalId(\"PipelineStartBucket\");\n  String key = UUID.randomUUID().toString();\n  File file = new File(getClass().getResource(\"/bulk_data.json\").getFile());\n\n  // 1\\. Upload bulk_data file to S3\n  s3.putObject(bucketName, key, file);\n\n  // 2\\. Check for executions of SingleEventLambda\n  Thread.sleep(30000);\n  String singleEventLambda = resolvePhysicalId(\"SingleEventLambda\");\n  Set<String> logMessages = getLogMessages(singleEventLambda);\n  Assert.assertThat(logMessages, CoreMatchers.hasItems(\n    \"WeatherEvent{locationName='Brooklyn, NY', temperature=91.0, \"\n      + \"timestamp=1564428897, longitude=-73.99, latitude=40.7}\",\n    \"WeatherEvent{locationName='Oxford, UK', temperature=64.0, \"\n      + \"timestamp=1564428898, longitude=-1.25, latitude=51.75}\",\n    \"WeatherEvent{locationName='Charlottesville, VA', temperature=87.0, \"\n      + \"timestamp=1564428899, longitude=-78.47, latitude=38.02}\"\n  ));\n\n  // 3\\. Delete object from S3 bucket (to allow a clean CloudFormation teardown)\n  s3.deleteObject(bucketName, key);\n\n  // 4\\. Delete Lambda log groups\n  logs.deleteLogGroup(\n    new DeleteLogGroupRequest(getLogGroup(singleEventLambda)));\n  String bulkEventsLambda = resolvePhysicalId(\"BulkEventsLambda\");\n  logs.deleteLogGroup(\n    new DeleteLogGroupRequest(getLogGroup(bulkEventsLambda)));\n}\n```", "```java\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>exec-maven-plugin</artifactId>\n  <executions>\n    <execution>\n      <id>001-sam-deploy</id>\n      <phase>pre-integration-test</phase>\n      <goals>\n        <goal>exec</goal>\n      </goals>\n      <configuration>\n        <basedir>${project.parent.basedir}</basedir>\n        <executable>sam</executable>\n        <arguments>\n          <argument>deploy</argument>\n          <argument>--s3-bucket</argument>\n          <argument>${integration.test.code.bucket}</argument>\n          <argument>--stack-name</argument>\n          <argument>${integration.test.stack.name}</argument>\n          <argument>--capabilities</argument>\n          <argument>CAPABILITY_IAM</argument>\n        </arguments>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\n<properties>\n  <maven.build.timestamp.format>\n    yyyyMMddHHmmss\n  </maven.build.timestamp.format>\n  <integration.test.code.bucket>\n    ${env.CF_BUCKET}\n  </integration.test.code.bucket>\n  <integration.test.stack.name>\n    chapter6-it-${maven.build.timestamp}\n  </integration.test.stack.name>\n</properties>\n```", "```java\n<execution>\n  <id>001-cfn-delete</id>\n  <phase>post-integration-test</phase>\n  <goals>\n    <goal>exec</goal>\n  </goals>\n  <configuration>\n    <basedir>${project.parent.basedir}</basedir>\n    <executable>aws</executable>\n    <arguments>\n      <argument>cloudformation</argument>\n      <argument>delete-stack</argument>\n      <argument>--stack-name</argument>\n      <argument>${integration.test.stack.name}</argument>\n    </arguments>\n  </configuration>\n</execution>\n```"]