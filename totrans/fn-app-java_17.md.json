["```java\npublic String buildGreeting(User user)\n```", "```java\npublic String buildGreeting(User user) {\n  String greeting;\n  if (LocalTime.now().getHour() < 12) {\n    greeting = \"Good morning\";\n  } else {\n    greeting = \"Hello\"\n  }\n\n  return String.format(\"%s, %s\", greeting, user.name());\n}\n```", "```java\npublic String buildGreeting(User user, LocalTime time)\n```", "```java\nclass User:\n\n  name = ''\n\n  def __init__(self, name):\n    self.name = name\n\n  def buildGreeting(self, time):\n    # ...\n```", "```java\npublic String buildGreeting(User user, LocalTime time) {\n\n  String greeting = time.getHour() < 12 ? \"Good Morning\"\n                                        : \"Hello\";\n\n  return String.format(\"%s, %s\", greeting, user.name());\n}\n```", "```java\nList<User> usersToNotify = new ArrayList<>();\n\nfor (var users : availableUsers) {\n  if (user.hasValidSubscription()) {\n    continue;\n  }\n\n  usersToNotify.add(user);\n}\n\nnotify(usersToNotify);\n```", "```java\nList<User> usersToNotify = availableUsers.stream()\n                                         .filter(User::hasValidSubscription)\n                                         .toList();\n\nnotify(usersToNotify);\n```", "```java\nusers.sort(new Comparator<User>() {\n\n  @Override\n  public int compare(User lhs, User rhs) {\n    return lhs.email().compareTo(rhs.email());\n  }\n});\n```", "```java\nusers.sort((lhs, rhs) -> lhs.email().compareTo(rhs.email()));\n```", "```java\nusers.sort(Comparator.comparing(User::email));\n```", "```java\npublic class ProductCategory {\n\n  public String localizedDescription(Locale locale) {\n    // ...\n  }\n}\n```", "```java\nvar locale = Locale.GERMAN;\n\nList<ProductCategory> categories = ...;\n\ncategories.stream()\n          .map(category -> category.localizedDescription(locale))\n          ...;\n```", "```java\npublic class ProductCategory {\n\n  public static Function<ProductCategory, String>\n                localizedDescriptionMapper(Locale locale) {\n    return category -> category.localizedDescription(locale);\n  }\n\n  // ...\n}\n```", "```java\ncategories.stream()\n          .map(ProductCategory.localizedDescriptionMapper(locale))\n          ...;\n```", "```java\ninterface VideoConverterJob extends Function<Path, Path> {\n  // ...\n}\n```", "```java\ninterface VideoConverterJob extends Function<Path, Path> {\n\n  Path convert(Path sourceFile);\n\n  default Path apply(Path sourceFile) {\n    return convert(sourceFile);\n  }\n\n  // ...\n}\n```", "```java\npublic Optional<User> tryLoadUser(long id) {\n  // ...\n}\n\nboolean isAdminUser =\n  tryLoadUser(23L).map(User::getPermissions)\n                  .filter(Predicate.not(Permissions::isEmpty))\n                  .map(Permissions::getGroup)\n                  .flatMap(Group::getAdmin)\n                  .map(User::isActive)\n                  .orElse(Boolean.FALSE);\n```", "```java\n// BAD: wrapping a value for a simple lookup\n\nvar nicknameOptional = Optional.ofNullable(customer.getNickname())\n                               .orElse(\"Anonymous\");\n\n// BETTER: simpler null-check\n\nvar nicknameTernary = customer.getNickname() != null ? customer.getNickname()\n                                                     : \"Anonymous\";\n```", "```java\nvar nickname = Objects.requireNonNullElse(customer.getNickname(), \"Anonymous\");\n\nvar nicknameWithSupplier = Objects.requireNonNullElse(customer.getNickname(),\n                                                      () -> \"Anonymous\");\n```"]