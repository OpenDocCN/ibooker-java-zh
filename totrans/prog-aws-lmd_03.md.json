["```java\nHelloWorldLambda:\n  Type: AWS::Serverless::Function\n  Properties:\n    FunctionName: HelloWorldJava\n    Runtime: java8\n    MemorySize: 512\n    Handler: book.HelloWorld::handler\n    CodeUri: target/lambda.jar\n```", "```java\n$ aws lambda invoke \\\n  --invocation-type RequestResponse \\\n  --function-name HelloWorldJava \\\n  --payload \\\"world\\\" outputfile.txt\n```", "```java\n{\n  \"StatusCode\": 200,\n  \"ExecutedVersion\": \"$LATEST\"\n}\n```", "```java\n$ cat outputfile.txt && echo\n\"Hello, world\"\n```", "```java\npublic String handler(String s) {\n  return \"Hello, \" + s;\n}\n```", "```java\n$ aws lambda invoke \\\n  --invocation-type Event \\\n  --function-name HelloWorldJava \\\n  --payload \\\"world\\\" outputfile.txt\n```", "```java\n{\n  \"StatusCode\": 202\n}\n```", "```java\npublic void handler(String s) {\n  System.out.println(\"Hello, \" + s);\n}\n```", "```java\npackage book;\n\npublic class StringIntegerBooleanLambda {\n  public void handlerString(String s) {\n    System.out.println(\"Hello, \" + s);\n  }\n\n  public boolean handlerBoolean(boolean input) {\n    return !input;\n  }\n\n  public boolean handlerInt(int input) {\n    return input > 100;\n  }\n}\n```", "```java\nAn error occurred during JSON parsing: java.lang.RuntimeException\n```", "```java\npackage book;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.IntStream;\n\npublic class ListMapLambda {\n  public List<Integer> handlerList(List<Integer> input) {\n    List<Integer> newList = new ArrayList<>();\n    input.forEach(x -> newList.add(100 + x));\n    return newList;\n  }\n\n  public Map<String,String> handlerMap(Map<String,String> input) {\n    Map<String, String> newMap = new HashMap<>();\n    input.forEach((k, v) -> newMap.put(\"New Map -> \" + k, v));\n    return newMap;\n  }\n\n  public Map<String,Map<String, Integer>>\n    handlerNestedCollection(List<Map<String, Integer>> input) {\n    Map<String, Map<String, Integer>> newMap = new HashMap<>();\n    IntStream.range(0, input.size())\n          .forEach(i -> newMap.put(\"Nested at position \" + i, input.get(i)));\n    return newMap;\n  }\n}\n```", "```java\n[\n  { \"m\" : 1, \"n\" : 2 },\n  { \"x\" : 8, \"y\" : 9 }\n]\n```", "```java\n{\n  \"Nested at position 0\": { \"m\" : 1, \"n\" : 2},\n  \"Nested at position 1\": { \"x\": 8, \"y\" : 9}\n}\n```", "```java\npackage book;\n\npublic class PojoLambda {\n  public PojoResponse handlerPojo(PojoInput input) {\n    return new PojoResponse(\"Input was \" + input.getA());\n  }\n\n  public static class PojoInput {\n    private String a;\n\n    public String getA() {\n      return a;\n    }\n\n    public void setA(String a) {\n      this.a = a;\n    }\n  }\n\n  public static class PojoResponse {\n    private final String b;\n\n    PojoResponse(String b) {\n      this.b = b;\n    }\n\n    public String getB() {\n      return b;\n    }\n  }\n}\n```", "```java\npackage book;\n\npublic class PojoLambda {\n  public PojoResponse handlerPojo(PojoInput input) {\n    return new PojoResponse(\"Input was \" + input.c);\n  }\n\n  public static class PojoInput {\n    public String c;\n  }\n\n  public static class PojoResponse {\n    public final String d;\n\n    PojoResponse(String d) {\n      this.d = d;\n    }\n  }\n}\n```", "```java\npublic void handler(S3Event input) {\n  // â€¦\n}\n```", "```java\npackage book;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class StreamLambda {\n  public void handlerStream(InputStream inputStream, OutputStream outputStream)\n    throws IOException {\n    int letter;\n    while((letter = inputStream.read()) != -1)\n    {\n      outputStream.write(Character.toUpperCase(letter));\n    }\n  }\n}\n```", "```java\npackage book;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class WhatIsMyLambdaEvent {\n  public void handler(InputStream is, OutputStream os) {\n    java.util.Scanner s = new java.util.Scanner(is).useDelimiter(\"\\\\A\");\n    System.out.println(s.hasNext() ? s.next() : \"No input detected\");\n  }\n}\n```", "```java\npackage book;\n\nimport com.amazonaws.services.lambda.runtime.Context;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ContextLambda {\n  public Map<String,Object> handler (Object input, Context context) {\n    Map<String, Object> toReturn = new HashMap<>();\n    toReturn.put(\"getMemoryLimitInMB\", context.getMemoryLimitInMB() + \"\");\n    toReturn.put(\"getFunctionName\",context.getFunctionName());\n    toReturn.put(\"getFunctionVersion\",context.getFunctionVersion());\n    toReturn.put(\"getInvokedFunctionArn\",context.getInvokedFunctionArn());\n    toReturn.put(\"getAwsRequestId\",context.getAwsRequestId());\n    toReturn.put(\"getLogStreamName\",context.getLogStreamName());\n    toReturn.put(\"getLogGroupName\",context.getLogGroupName());\n    toReturn.put(\"getClientContext\",context.getClientContext());\n    toReturn.put(\"getIdentity\",context.getIdentity());\n    toReturn.put(\"getRemainingTimeInMillis\",\n                   context.getRemainingTimeInMillis() + \"\");\n    return toReturn;\n  }\n}\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-lambda-java-core</artifactId>\n    <version>1.2.0</version>\n    <scope>provided</scope>\n  </dependency>\n</dependencies>\n```", "```java\n{\n  \"getFunctionName\": \"ContextLambda\",\n  \"getLogStreamName\": \"2019/07/24/[$LATEST]0f1b1111111111111111111111111111\",\n  \"getInvokedFunctionArn\":\n    \"arn:aws:lambda:us-west-2:181111111111:function:ContextLambda\",\n  \"getIdentity\": {\n    \"identityId\": \"\",\n    \"identityPoolId\": \"\"\n  },\n  \"getRemainingTimeInMillis\": \"2967\",\n  \"getLogGroupName\": \"/aws/lambda/ContextLambda\",\n  \"getLogger\": {},\n  \"getFunctionVersion\": \"$LATEST\",\n  \"getMemoryLimitInMB\": \"512\",\n  \"getClientContext\": null,\n  \"getAwsRequestId\": \"2108d0a2-a271-11e8-8e33-cdbf63de49d2\"\n}\n```", "```java\npackage book;\n\nimport com.amazonaws.services.lambda.runtime.Context;\n\npublic class TimeoutLambda {\n  public void handler (Object input, Context context) throws InterruptedException {\n    while(true) {\n      Thread.sleep(100);\n      System.out.println(\"Context.getRemainingTimeInMillis() : \" +\n        context.getRemainingTimeInMillis());\n    }\n  }\n}\n```", "```java\nSTART RequestId: 6127fe67-a406-11e8-9030-69649c02a345 Version: $LATEST\nContext.getRemainingTimeInMillis() : 1857\nContext.getRemainingTimeInMillis() : 1756\n... Cut for brevity ...\nContext.getRemainingTimeInMillis() : 252\nContext.getRemainingTimeInMillis() : 152\nContext.getRemainingTimeInMillis() : 51\nEND RequestId: 6127fe67-a406-11e8-9030-69649c02a345\nREPORT RequestId: 6127fe67-a406-11e8-9030-69649c02a345\tDuration: 2001.52 ms\n  Billed Duration: 2000 ms \tMemory Size: 512 MB\tMax Memory Used: 51 MB\n2019-07-24T21:22:30.076Z 444e6ae0-9217-4cd2-8568-7585ca3fafee\n  Task timed out after 2.00 seconds\n```", "```java\npackage book;\n\npublic class EnvVarLambda {\n  public void handler(Object event) {\n    String databaseUrl = System.getenv(\"DATABASE_URL\");\n    if (databaseUrl == null || databaseUrl.isEmpty())\n      System.out.println(\"DATABASE_URL is not set\");\n    else\n      System.out.println(\"DATABASE_URL is set to: \" + databaseUrl);\n  }\n}\n```", "```java\nDATABASE_URL is not set\n```", "```java\nHelloWorldLambda:\n  Type: AWS::Serverless::Function\n  Properties:\n    FunctionName: HelloWorldJava\n    Runtime: java8\n    MemorySize: 512\n    Handler: book.EnvVarLambda::handler\n    CodeUri: target/lambda.jar\n    Environment:\n      Variables:\n        DATABASE_URL: my-database-url\n```", "```java\nDATABASE_URL is set to: my-database-url\n```"]