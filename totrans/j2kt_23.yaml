- en: Chapter 23\. Continuing the Journey
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第23章 继续旅程
- en: We’ve arrived at the end of the book. Thank you for coming on the journey. Your
    authors are privileged to have worked with, and learned from, many great developers,
    and now you are on that list. Even if you skipped a couple of chapters, or zoned
    out in the middle of the odd refactoring, it’s been good to have someone to talk
    to. We can’t pair on improving Travelator anymore, but what have we learned from
    our travels?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们已经到达了本书的结尾。感谢您加入我们的旅程。您的作者很荣幸能与许多优秀的开发者共事，并从他们学到了很多，现在您也加入了这个名单。即使您跳过了几章，或者在某次重构中不知不觉地走神，能与您交流还是非常愉快的。我们不能再一起改进
    Travelator 了，但我们从旅行中学到了什么呢？
- en: When O’Reilly asked us if we would like to write a book on Kotlin, we had to
    think about what we wanted to write and about what enough people might want to
    read. We knew that we had been on a journey adopting the language and that we
    are comfortable at the destination, but we also knew that our starting point was
    not that of the typical Java developer. We saw that most existing books taught
    Kotlin as if it were just another syntax for Java, one that could achieve more
    with less typing but didn’t require a change in approach. That wasn’t our experience;
    we found that Kotlin’s sweet spot required more functional thinking than Java.
    Books on functional programming in Kotlin, though, seem to ask the reader to leave
    behind all that they know about programming with objects and join a new cult.
    We weren’t comfortable with this either. Classes and objects are a humane way
    of expressing behavior, especially compared to many functional idioms. Why remove
    tools from our box when there is plenty of room? Can’t we just have more tools
    and pick the right one for the job?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当 O’Reilly 问我们是否想要写一本关于 Kotlin 的书时，我们不得不思考我们想要写什么，以及足够多的人可能想要阅读什么。我们知道我们在采用这门语言的旅程上，并且在目的地感到舒适，但我们也知道我们的起点并不是典型的
    Java 开发者的起点。我们看到大多数现有的书籍教 Kotlin 就好像它只是 Java 的另一种语法，可以在减少打字的同时实现更多，但并不需要改变方法。但这并不是我们的经验；我们发现
    Kotlin 的最佳实践需要比 Java 更多的函数式思维。然而，关于 Kotlin 中的函数式编程的书籍似乎要求读者放下他们对对象编程的所有了解，并加入一个新的信仰。我们对此也感到不舒服。类和对象是表达行为的一种人道主义方式，特别是与许多函数式习语相比。既然有足够的空间，为什么要从我们的工具箱中移除工具呢？我们不能只是拥有更多的工具，并为工作选择合适的工具吗？
- en: Grain
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子
- en: This thinking led Nat to come up with the metaphor that programming languages
    have a grain that influences the design of the programs we write in them. The
    grain makes certain design styles easy to apply and makes others arduous or risky.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种思维方式使得 Nat 想出了一个比喻：编程语言有一个粒子，影响我们在其中编写程序的设计。这种粒子使得某些设计风格容易应用，而使其他设计艰难或有风险。
- en: The grain of Kotlin is different from that of Java. Java’s grain favors mutable
    objects and reflection at the cost of composability and type safety. Compared
    to Java, Kotlin favors the transformation of immutable values and freestanding
    functions, and has a type system that is unobtrusive and helpful. Although it
    is easy to convert Java to Kotlin with IntelliJ, we end up with Java in Kotlin
    syntax rather than taking advantage of all that the new language could offer if
    we changed our thinking, too.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 的粒子与 Java 不同。Java 的粒子偏爱可变对象和反射，而以组合性和类型安全为代价。与 Java 相比，Kotlin 更倾向于转换不可变值和独立函数，并拥有一个不显眼但有帮助的类型系统。虽然可以使用
    IntelliJ 轻松将 Java 转换为 Kotlin，但如果我们也改变了思维方式，我们可以利用这门新语言所能提供的一切，而不是简单地在 Kotlin 语法中使用
    Java。
- en: Java and Kotlin can coexist in the same codebase, and the interop boundary is
    almost seamless, but there are some risks when you pass information from the strictly
    typed world of Kotlin to the more loosely typed world of Java. With care, we find
    that we can transform code from idiomatic Java to idiomatic Kotlin in small, safe
    steps, using automated refactoring tools where possible and editing text as a
    last resort. We can also support the conventions of both languages at the same
    time when we must maintain Java code while we are converting code it depends on
    to Kotlin.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java 和 Kotlin 可以在同一代码库中共存，它们之间的交互界限几乎是无缝的，但是当您从 Kotlin 的严格类型世界传递信息到 Java 的松散类型世界时，会存在一些风险。通过小心谨慎，我们发现可以使用自动重构工具在小而安全的步骤中将习惯用法的
    Java 代码转换为习惯用法的 Kotlin 代码，必要时可以通过编辑文本来修改。在必须维护 Java 代码的同时，我们还可以同时支持两种语言的约定。
- en: Functional Thinking
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式思维
- en: As we’ve seen in some of our history lessons, the grain of Java was formed in
    the 1990s, when we believed that object-oriented programming was the mythical
    silver bullet. When OO turned out not to solve all our problems, mainstream programming
    languages, and even Java itself, began to adopt ideas from functional programming.
    Kotlin was born from Java in this age, and, like our children are better equipped
    for the future than we are, Kotlin is more suited to modern programming than Java
    is.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: What do we mean by functional thinking?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Our software is ultimately limited by our ability to understand it. Our understanding
    is in turn ultimately limited by the complexity of the software we have created,
    and a lot of that complexity arises over confusion about *when* things happen.
    Functional programmers have learned that the easiest way to tame that complexity
    is simply to have things *happen* a lot less. They call things happening an *effect*:
    a change that is observable in some scope.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Mutating a variable or a collection *inside* a function is an effect, but unless
    that variable is shared *outside* the function, it doesn’t *affect* any other
    code. When the scope of an effect is local to a function, we don’t have to consider
    it when reasoning about what our system does. As soon as we mutate shared state
    (a parameter to the function, perhaps, or a global variable, or a file or network
    socket), our local effect becomes an effect in whatever scope can see the shared
    thing, and that quickly increases complexity and makes understanding more difficult.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t enough that a function doesn’t *actually* mutate shared state. If there
    is a possibility that a function *could* mutate shared state, we have to examine
    the source of the function and, recursively, every function that it calls, to
    understand what our system does. Every piece of global mutable state makes every
    function suspect. Similarly, if we program in an environment in which every function
    can write to the database, we lose the ability to predict when such writes can
    occur and plan accordingly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'So functional programmers tame complexity by reducing mutation. Sometimes they
    program in languages (like Clojure and Haskell) that enforce controls on mutation.
    Otherwise, they work by convention. If we adopt these conventions in more general
    languages, we gain more ability to reason with our code. Kotlin chooses not to
    enforce the control of effects, but the language and its runtime come with some
    built-in conventions to nudge us in the right direction. Compared to Java, we
    have, for example, an immutable `val` declaration rather than an optional `final`
    modifier, read-only views of collections, and concise data classes to encourage
    copy-on-write rather than mutation. Many of this book’s chapters describe more
    subtle conventions with the same aim: [Chapter 5, *Beans to Values*](ch05.html#beans-to-values),
    [Chapter 6, *Java to Kotlin Collections*](ch06.html#java-to-kotlin-collections),
    [Chapter 7, *Actions to Calculations*](ch07.html#actions-to-calculations), [Chapter 14,
    *Accumulating Objects to Transformations*](ch14.html#accumulating-objects-to-transformations),
    and [Chapter 20, *Performing I/O to Passing Data*](ch20.html#performing-io-to-passing-data).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式程序员通过减少变异来驯服复杂性。有时，他们会使用强制控制变异的语言（比如Clojure和Haskell）。否则，他们依靠约定来工作。如果我们在更通用的语言中采纳这些约定，我们就能更好地推理我们的代码。Kotlin选择不强制控制效果，但语言及其运行时提供了一些内置约定来引导我们朝正确的方向前进。例如，与Java相比，我们有一个不可变的`val`声明，而不是可选的`final`修饰符，集合的只读视图，以及简洁的数据类来鼓励写时复制而不是变异。本书的许多章节描述了更微妙的约定，目的都是相同的：[第5章，*从Bean到Value*](ch05.html#beans-to-values)，[第6章，*Java到Kotlin集合*](ch06.html#java-to-kotlin-collections)，[第7章，*从操作到计算*](ch07.html#actions-to-calculations)，[第14章，*累积对象到转换*](ch14.html#accumulating-objects-to-transformations)，以及[第20章，*执行I/O到传递数据*](ch20.html#performing-io-to-passing-data)。
- en: There is, of course, much more to functional programming than simply not mutating
    shared state. But if we just focus on solving problems without mutation (or where
    mutation is the point, we minimize its scope), our systems become easier to understand
    and change. Like [“Don’t repeat yourself”](https://oreil.ly/HSaLs) (aka [“Once
    and only once”](https://oreil.ly/5HKxy)), assiduous application of a simple rule
    has profound effects. Both “Don’t mutate shared state” and “Once and only once”
    share another property though—if we aren’t careful, applying the rules can increase
    complexity faster than they reduce it. We need to learn techniques that allow
    us to manage mutation (and remove duplication, facilitate testing, and so on)
    without making our code even harder to understand, and to recognize these techniques
    for what they are when we see them. These techniques will tend to be different
    in different languages, environments, and domains, and are the craft of our profession.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程远不止于简单地避免突变共享状态。但是，如果我们专注于解决问题而不突变（或者突变是目的，我们最小化其范围），我们的系统变得更容易理解和改变。就像[“不要重复自己”](https://oreil.ly/HSaLs)（又称[“一次且仅一次”](https://oreil.ly/5HKxy)），坚持应用一个简单的规则会产生深远的影响。不要突变共享状态和“一次且仅一次”有一个共同的特性——如果我们不小心，应用这些规则可能会比减少复杂性更快增加复杂性。我们需要学习技术，使我们能够管理突变（并消除重复、便于测试等），而不使我们的代码变得更难理解，并且在看到这些技术时能够识别它们。这些技术在不同的语言、环境和领域可能有所不同，是我们职业的工艺。
- en: If you research functional techniques, you will come across a lot of anti-object
    sentiment. This seems to be rooted in a perception that OO is all about mutable
    objects, but we shouldn’t throw the message-passing baby out with the mutable
    bathwater. Although we can use OO to manage shared mutable state, in practice,
    these days we generally use objects to encapsulate immutable state, or to represent
    services and their dependencies. We saw in [Chapter 16, *Interfaces to Functions*](ch16.html#interfaces-to-functions),
    that we can use both functions with closure, and classes with properties, to encapsulate
    data. Both can also hide code details and allow a client to work with different
    implementations. We need these points of inflection to build flexible, robust,
    and testable systems. Where in Java we traditionally reach for subclassing as
    a tool, Kotlin, with its default-closed classes, encourages a more compositional
    style. Instead of overriding a protected method, we have a function-typed property
    representing a strategy or a collaborator. We should favor this style but not
    be embarrassed to define class and subclass hierarchies where they simplify our
    implementation. Similarly, extension functions in [Chapter 10, *Functions to Extension
    Functions*](ch10.html#functions-to-extension-functions), are all very well, and
    they can work wonders to reduce coupling between disparate concerns in our codebases,
    but they are no substitute for polymorphic methods when that is what we need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你研究函数式技术，你会遇到很多反对面向对象的情绪。这似乎根植于一种看法，即面向对象编程完全是关于可变对象，但我们不应该把消息传递的婴儿与可变的洗澡水一起倒掉。尽管我们可以使用面向对象编程来管理共享的可变状态，但实际上，现如今我们通常使用对象来封装不可变状态，或表示服务及其依赖关系。我们在[第16章，*接口与函数*](ch16.html#interfaces-to-functions)中看到，我们可以使用闭包函数和具有属性的类来封装数据。两者都可以隐藏代码细节，并允许客户端与不同的实现交互。我们需要这些转折点来构建灵活、稳健和可测试的系统。在
    Java 中，我们传统上使用子类化作为工具，而 Kotlin 则通过其默认封闭的类，鼓励一种更具组合性的风格。我们不再覆盖受保护的方法，而是使用表示策略或协作者的函数类型属性。我们应该倾向于这种风格，但在简化我们的实现时，不必尴尬地定义类和子类层次。同样，在[第10章，*函数到扩展函数*](ch10.html#functions-to-extension-functions)中，扩展函数非常好，它们可以在我们的代码库中减少不同关注点之间的耦合，但当我们需要多态方法时，它们不能替代多态方法。
- en: In the end, one of the attractions of programming is its combination of the
    human and the mathematical. Objects and classes are, to your authors at least,
    a more human way of modeling the world, and that is often a fine starting point.
    When we need rigor (which is often, but not as often as muggles might think),
    functional programming is there for us. We see no reason to have to choose one
    camp or the other when we can have two tents and move between them both, and Kotlin
    allows us to do that better than any other language we have found.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，编程的一个吸引人的地方是它的数学与人文的结合。对象和类，对你们的作者来说，至少是一种更具人性化的建模世界的方式，这往往是一个很好的起点。当我们需要严谨性（这通常是需要的，但不像普通人认为的那样频繁）时，函数式编程就在那里为我们服务。当我们可以有两个帐篷并在两个帐篷之间移动时，我们没有理由必须选择一个阵营，而
    Kotlin 让我们比我们找到的任何其他语言做得更好。
- en: Simple Design
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单设计
- en: 'If complexity is the limiting factor in our software, and functional thinking
    is a tool for reducing complexity, how does that fit with other maxims—in particular,
    Kent Beck’s Rules of Simple Design ([*Extreme Programming Explained: Embrace Change*](bibliography01.html#B_EPEEC_1999))?
    These have served us well for two decades, and say that a simple design:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果复杂性是我们软件的限制因素，而函数式思维是减少复杂性的工具，那么它如何与其他格言相配合——特别是 Kent Beck 的简单设计规则（[*极限编程解释：拥抱变化*](bibliography01.html#B_EPEEC_1999)）？这两条规则已经为我们服务了二十年，指出一个简单的设计：
- en: Passes the tests
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过测试
- en: Reveals intention
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭示意图
- en: Has no duplication
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有重复
- en: Has fewest elements
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素最少
- en: Of these, “reveals intention” is the most open to interpretation, so let’s pull
    on that thread.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些规则中，“揭示意图”是最开放于解释的，因此让我们来探讨这个问题。
- en: 'An intention is “an aim or plan”: it implies change. It implies action. By
    differentiating between actions and calculations in our code, we show where we
    expect things to happen and where we don’t: which things may be affected by other
    things and which things won’t. When the majority of our code is in the form of
    calculations, we can be explicit about which functions are actions, better revealing
    our intent.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是“一个目标或计划”：它意味着变化。它意味着行动。通过区分我们代码中的行为和计算，我们展示了我们期望发生的事情和不期望发生的事情：哪些事情可能会受到其他事情的影响，哪些事情不会。当我们的大部分代码都是计算形式时，我们可以明确指出哪些函数是行为，进而更好地展示我们的意图。
- en: As we saw in [Chapter 7, *Actions to Calculations*](ch07.html#actions-to-calculations),
    and [Chapter 20, *Performing I/O to Passing Data*](ch20.html#performing-io-to-passing-data),
    our main technique to disentangle calculations from actions is moving the actions
    out to the entry points of our interactions, so that they contaminate the least
    code. This is neither easy nor a panacea, but we find that it does produce designs
    that are simpler and code that is less complex.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第7章，*从动作到计算*](ch07.html#actions-to-calculations)，和[第20章，*执行I/O到传递数据*](ch20.html#performing-io-to-passing-data)中所看到的，我们将解开计算与动作的纠缠的主要技术是将动作移到我们交互的入口点，以使其污染最少的代码。这既不容易也不是灵丹妙药，但我们发现这确实能够产生更简单的设计和更少复杂的代码。
- en: Functional Programming and Textual Reasoning
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程和文本推理
- en: When we finished this book, we realized—to our surprise—that we had not included
    any software design diagrams.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成这本书时，我们惊讶地发现我们没有包含任何软件设计图示。
- en: Partly, frankly, this was laziness. It’s hard enough to manage the multiple
    versions of the example code as it passes through refactorings without having
    to worry about other views. But we also make it a habit to try to express ourselves
    in just the programming language that we have. If we can achieve enough comprehension
    in just the raw text, then in our day jobs, we won’t be forced to switch contexts
    to view a diagram that may or may not be in sync with the code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，部分原因是出于懒惰。光是在通过重构时管理示例代码的多个版本就已经够难的了，更别提还要担心其他视图了。但我们也养成了一种习惯，尽可能地仅使用我们手头的编程语言来表达自己。如果我们在原始文本中能够达到足够的理解，那么在日常工作中，我们就不会被迫切换上下文去查看可能与代码不同步的图示。
- en: When we’ve written about object-oriented design, we’ve relied on diagrams to
    show the dynamic structure and behavior of the software and how changes to the
    source affect its dynamic behavior. In object-oriented software, that dynamic
    structure—the graph of objects and how messages flow between them—is largely implicit.
    This makes it hard to relate what you see in the source to what will happen at
    runtime, so visualization is a vital part of object-oriented programming. Through
    the 1980s and 1990s, software design luminaries created a variety of diagram notations
    to visualize object-oriented software. In the mid 1990s, the designers of the
    most popular notations, Grady Booch, Ivar Jacobson, and James Rumbaugh, combined
    their efforts into the *Unified Modeling Language* (UML).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈到面向对象设计时，我们依赖于图示来展示软件的动态结构和行为，以及源代码变动如何影响其动态行为。在面向对象软件中，这种动态结构——对象之间的图形及其消息传递方式——大部分是隐含的。这使得很难将源代码中看到的内容与运行时的实际发生联系起来，因此可视化是面向对象编程的重要组成部分。在20世纪80年代和90年代，软件设计界的权威们创造了各种图示符号来可视化面向对象软件。到了1990年代中期，最流行的符号设计师格雷迪·布奇、伊瓦尔·雅各布森和詹姆斯·兰博合并了他们的努力，创造了*统一建模语言*（UML）。
- en: 'The functional programming community doesn’t have such a focus on diagrams
    and visualization. The goal of functional programming is *algebraic reasoning*:
    reasoning about the behavior of a program by manipulating its textual expressions.
    Referential transparency and static types allow us to reason about our programs
    solely by using the syntax of the source code. This results in a much closer correspondence
    between source code and runtime. As our code becomes more functional, we find
    that we can *read* our system’s behavior without having to think hard about mechanisms
    that are not immediately apparent in the source and have to be visualized to be
    understood.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程社区并不像面向对象设计那样专注于图示和可视化。函数式编程的目标是*代数推理*：通过操作其文本表达式来推理程序的行为。引用透明度和静态类型允许我们仅通过使用源代码的语法来推理我们的程序。这导致我们的代码越来越函数式时，我们能够更加*理解*我们系统的行为，而无需深思疑难于源代码中并不立即显现但必须通过可视化理解的机制。
- en: Refactoring
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构
- en: Along with the pragmatic functional programming, refactoring is the other key
    tenet of this book. Refactoring plays an important part in our professional lives
    because, if we don’t know enough about the eventual form of our system to get
    its design right the first time, we will have to transform what we have into what
    we need. Your authors, at least, have never known enough about the eventual form
    of a system to get its design right the first time. Even those applications where
    we started with detailed requirements ended up very different from those specifications
    by the time they were delivered.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了务实的函数式编程之外，重构是本书的另一个关键原则。重构在我们的专业生活中扮演着重要角色，因为如果我们对系统的最终形式知之甚少，无法一次就将其设计正确，那么我们就必须将现有的内容转换为我们需要的内容。至少在你的作者们看来，从未有过对系统的最终形式有足够了解，以便第一次就把设计做对。即使是那些我们从详细的需求开始的应用，最终交付时也与规格书中的说明大不相同。
- en: Late in a project and against schedule pressure is no time to learn how to refactor
    your code. Instead, we take every opportunity to practice refactoring. As we saw
    in [Chapter 22, *Classes to Functions*](ch22.html#classes-to-functions), even
    when writing code from scratch we will often hard-code values to get a test to
    pass and then refactor to remove duplication between the tests and production
    code. We are always looking for new ways to get tests passing quickly and then
    refactor our way into code that looks like we planned it that way. Sometimes we
    discover a new automated refactoring built into IntelliJ; other times, we find
    a way to combine existing refactorings to achieve our aims.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的后期和受到时间压力的情况下学习如何重构代码并不合适。相反，我们抓住每一个机会来练习重构。正如我们在[第 22 章，*从类到函数*](ch22.html#classes-to-functions)中看到的，即使是从头开始编写代码，我们也经常会硬编码值以使测试通过，然后重构以消除测试与生产代码之间的重复。我们始终在寻找快速通过测试的新方法，然后通过重构的方式使代码看起来像是我们早已计划好的那样。有时我们会发现
    IntelliJ 内置了一个新的自动重构；有时我们会找到一种方法来结合现有的重构来实现我们的目标。
- en: When the scope of a change is small, we can get away with hand-editing a definition
    and then its uses to match, or sometimes, more usefully, the other way around.
    This becomes tedious and error prone when a change affects many files though,
    so practicing using the tools to achieve even small changes will equip us when
    faced with larger refactoring challenges. Where we do have a multistage refactor,
    or where we have to manually apply changes in multiple places, [“Expand-and-Contract
    Refactoring”](ch04.html#expand-contract) allows us to keep the system building
    and working throughout the process. This is vital when a change may take multiple
    days or even weeks, because it allows us to continually merge our work with other
    changes in the system. Once you’ve thrown away a month of work because a big-bang
    merge at the end proved impossible, you come to appreciate the value of this technique
    and want to practice it even when it isn’t strictly necessary.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当改动范围较小时，我们可以手动编辑一个定义，然后调整其用法以匹配，或者有时，更有用的是反过来。然而，当一个改动影响到许多文件时，这种做法就变得乏味且容易出错，因此，练习使用工具来实现即使是小改动，都会让我们在面对更大的重构挑战时做好准备。当我们进行多阶段的重构，或者当我们需要在多个地方手动应用改动时，[“扩展和收缩重构”](ch04.html#expand-contract)使我们能够在整个过程中保持系统的构建和工作。当一个改动可能需要多天甚至几周时，这是至关重要的，因为它允许我们不断地将我们的工作与系统中的其他变更合并。一旦你因为最后的大爆炸合并不可能而放弃了一个月的工作，你就会意识到这种技术的价值，并且在没有严格必要时也想要练习它。
- en: We hope that the refactorings in this book expand your ambition. Your authors
    have been lucky enough to work with some world-class practitioners, the sort of
    people who tut if you cause a compile error during a refactoring. The transformations
    we have shown may not be optimal (and even if they were, the state of the art
    will change with tooling and language changes), but they are genuine, and they
    do reflect how we write and refactor code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望本书中的重构能够扩展你的野心。你的作者们有幸与一些世界级的从业者合作过，这些人如果在重构过程中引发了编译错误就会抱怨。我们展示的转换可能不是最优的（即使它们是最优的，技术和语言的发展也会随着工具和语言的变化而改变），但它们是真实的，并且确实反映了我们编写和重构代码的方式。
- en: Refactoring and Functional Thinking
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构和功能式思维
- en: As we’ve seen on our tour, there is a relationship between functional thinking
    and refactoring. Refactoring is a rearrangement of our code, and where that code
    represents actions ([“Actions”](ch07.html#actions))—code that depends on when
    you run it—the rearrangement may change when actions run, and so the functioning
    of the software. In contrast, calculations ([“Calculations”](ch07.html#calculations))
    are safe to rearrange but are ultimately impotent. (Without reading and writing,
    our code is simply generating heat.) Functional thinking encourages us to recognize
    and control actions and, by doing so, makes refactoring much safer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在我们的旅程中所看到的，功能性思维与重构之间存在着一种关系。重构是我们代码的重新排列，而当该代码表示动作（[“动作”](ch07.html#actions)）——即依赖于运行时机的代码——重排可能会改变动作运行的时间，从而影响软件的功能。相比之下，计算（[“计算”](ch07.html#calculations)）则可以安全地重排，但最终是无效的。（如果没有读写操作，我们的代码只是在产生热量。）功能性思维鼓励我们识别和控制动作，并通过这样做使得重构变得更加安全。
- en: Your authors learned this the hard way. We learned to refactor in the days of
    mutable objects, and introduced bugs when we failed to predict the consequences.
    This could have led us to abandon refactoring, but we still weren’t clever enough
    to design our systems right in the first place. Instead, we discovered that a
    certain style of programming—object orientation but with immutable objects—was
    expressive and understandable, refactorable and safe. When we adopted that style
    in our Java code, it was often working against the grain, but despite this, it
    was much more productive than the alternatives. Discovering Kotlin, we realized
    that this is the sweet spot for us. Now we can use a modern language where functional
    thinking is part of the design, objects are still well-supported, and refactoring
    tooling is not an afterthought.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作者们是通过艰难的方式学到了这一点。我们在可变对象时代学会了重构，并在未能预测后果时引入了错误。这本来可能会导致我们放弃重构，但我们仍然不够聪明，不能在设计系统时一开始就做到正确。相反，我们发现一种特定的编程风格——面向对象但使用不可变对象——是表达性和可理解的，可以重构且安全。当我们在我们的Java代码中采用这种风格时，经常是在逆流中努力，但尽管如此，它比其他选择更加高效。在发现了Kotlin后，我们意识到这对我们来说是一个甜蜜点。现在我们可以使用一种现代化语言，其中功能性思维是设计的一部分，对象仍然得到良好支持，而重构工具不是一个事后的想法。
- en: 'As Kent Beck put it: “Make the change easy, then make the easy change.” Continually
    refactor so that every change you need to make is an easy change. Refactoring
    is the fundamental practice for tackling the inherent complexity of our software.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如肯特·贝克所说：“让变化变得容易，然后再做容易的变化。”持续进行重构，以便每次需要做出的变更都变得容易。重构是解决软件固有复杂性的基本实践。
- en: Safe travels.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一路平安。
