- en: Appendix. Beyond Java 17
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录。超越Java 17
- en: This appendix discusses versions of Java beyond Java 17. In previous editions
    of *Java in a Nutshell*, we have resisted adding forward-looking material, but
    recent changes in the Java release model (which we discussed in [Chapter 1](ch01.xhtml#javanut8-CHP-1)),
    as well as ongoing and forthcoming Java developments, have prompted a change of
    tack in this new edition.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录讨论Java 17之后的版本。在之前的《Java速查表》版本中，我们一直抵制添加前瞻性材料，但Java发布模型的最近变化（我们在[第1章](ch01.xhtml#javanut8-CHP-1)中讨论过），以及正在进行和即将进行的Java发展，促使我们在这个新版本中改变了策略。
- en: 'In the current model, a new version of Java is released every six months, but
    only certain releases are LTS. As it stands, Java 11 and 17 are regarded as LTS
    (with 8 retrospectively added). Note that LTS has a dual meaning: for Oracle customers
    it means that paid support is available for a multiyear period, while other JDK
    providers (including Red Hat, Microsoft, Amazon, etc.) have de facto adopted the
    same versions as those for which backported security and other fixes will be made
    publicly available—free of charge—as certified OpenJDK binaries.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前模型中，每六个月发布一个新版本的Java，但只有特定版本是LTS。目前，Java 11和17被视为LTS（回顾性添加了8）。请注意，LTS具有双重含义：对于Oracle客户来说，它意味着可以获得多年的付费支持，而其他JDK提供者（包括Red
    Hat、Microsoft、Amazon等）实际上采用了与那些将会公开提供后向兼容安全性和其他修复的版本相同的版本——作为经过认证的OpenJDK二进制文件，免费提供。
- en: The industry, as a whole, has not chosen to adopt a six-month Java upgrade cycle
    for various reasons, and so in practice, the LTS versions are the only ones that
    are likely to be deployed into production. However, most of the OpenJDK providers
    do diligently publish binaries for all Java releases, even those that will not
    be supported beyond the six-month window.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于各种原因，整个行业并没有选择采用每六个月升级一次Java的周期，因此在实践中，只有LTS版本可能会被部署到生产环境中。然而，大多数OpenJDK提供者确实会认真发布所有Java版本的二进制文件，即使在六个月窗口之后，这些版本也不会得到支持。
- en: 'This creates a dichotomy: new features arrive every six months but are not
    widely deployed by teams until the next LTS, which complicates writing about specific
    Java versions. This is further complicated by the concept of *Incubating* and
    *Preview* features, which are used to experiment with new APIs and new language
    features, respectively, before they are finalized and become a standard part of
    the language.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这造成了一个两难局面：新功能每六个月就会推出，但直到下一个LTS版本发布后，团队才会广泛使用，这使得撰写特定Java版本的文章变得更加复杂。这一情况进一步复杂化了*孵化*和*预览*功能的概念，它们分别用于在最终确定并成为语言标准的新API和新语言功能之前进行实验。
- en: The solution we have chosen is to target new editions of this book at LTS versions
    and include an appendix that covers any new features that have arrived (or are
    expected to arrive) since the last LTS. We have also chosen to cover only final
    features in the main part of the book; all discussion of Incubating and Preview
    features will be confined to appendices.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的解决方案是针对LTS版本编写本书的新版本，并包括一篇附录，介绍自上一个LTS版本以来（或预期将要到来的）的任何新功能。我们还选择只在主要部分中涵盖最终功能；所有关于孵化和预览功能的讨论将被限制在附录中。
- en: Let’s start by covering how major development efforts are arranged within OpenJDK,
    then discuss Java 18 and 19, and then conclude with a look at the future beyond
    that release.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论OpenJDK中主要开发工作是如何安排的，然后再讨论Java 18和19，最后再展望那个版本之后的未来。
- en: Long-Term JDK Projects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长期JDK项目
- en: OpenJDK is organized into projects that cover specific major areas of ongoing
    work. This includes projects that are centered on the development of future language
    or JVM features that can take multiyear efforts to deliver.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK按照涵盖正在进行的工作的特定主要领域进行组织，这包括专注于开发未来语言或JVM功能的项目，这些项目可能需要多年的努力才能完成。
- en: 'Four projects currently focus on the delivery of major future aspects of Java.
    They are usually known by their project codenames:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有四个项目专注于交付Java的重要未来方面。它们通常以项目代号来命名：
- en: Panama
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Panama
- en: Loom
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Loom
- en: Valhalla
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Valhalla
- en: Amber
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amber
- en: 'Of these, Project Panama provides two major improvements: a modern foreign-function
    interface for Java and support for vector CPU instructions.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，Panama项目提供了两个主要改进：Java的现代外部函数接口以及对矢量CPU指令的支持。
- en: It has been incubating for some time now, but Java 18 contains an interesting
    milestone iteration of the functionality, and so we will cover the project in
    the Java 18 section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它已经孵化了一段时间，但Java 18包含了功能的有趣的里程碑迭代，因此我们将在Java 18部分介绍该项目。
- en: Project Loom is a new concurrency model for Java. A first preview of some of
    Loom’s functionality will be available for the first time in Java 19, so we will
    discuss Loom in that section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Project Loom是Java的新并发模型。Loom的一些功能首次在Java 19中提供预览，因此我们将在该部分讨论Loom。
- en: Project Valhalla is the most ambitious, wide-ranging, and highest-impact of
    all of the projects. It is also the most complex and the farthest from delivery
    as a shipping product. We discuss it toward the end of the appendix.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Valhalla项目是所有项目中最雄心勃勃、影响最广泛且影响最大的。它也是最复杂且最远离成品交付的。我们将在附录的最后讨论它。
- en: Project Amber’s remit is incremental language improvements. It is probably the
    most familiar and easiest-to-understand of the four projects, so we’ll discuss
    it here as our next topic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Project Amber的任务是增量语言改进。它可能是四个项目中最为熟悉和最容易理解的，因此我们将在这里作为下一个主题进行讨论。
- en: Amber
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amber
- en: 'Amber has been running since Java 9 was delivered. It aims to deliver small
    chunks of useful language functionality, an approach that fits well with the new
    delivery schedule for Java releases. The features that have formed part of Amber
    and delivered so far include:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Amber自Java 9发布以来一直在运行。它旨在提供有用的语言功能的小块，这种方法非常适合Java版本的新交付计划。迄今为止作为Amber的一部分并已交付的功能包括：
- en: Local Variable Type Inference (`var`)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部变量类型推断 (`var`)
- en: Switch Expressions
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`表达式'
- en: Enhanced `instanceof`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强的`instanceof`
- en: Text Blocks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本块
- en: Records
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录
- en: Sealed Types
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密封类型
- en: Pattern Matching
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式匹配
- en: 'Most of these features have already been completed, but the last of these,
    Pattern Matching, has not been fully delivered as of Java 17. Only the simplest
    case, the `instanceof` pattern, has arrived as a final feature so far. Java 17
    does have a Preview version of a more advanced form (as we mentioned in [Chapter 5](ch05.xhtml#javanut8-CHP-5))
    that can be used as part of a switch expression, like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性中大多数已经完成，但作为Java 17的最后一个，模式匹配还没有完全交付。迄今为止，只有最简单的情况，即`instanceof`模式，已经作为最终特性到达。Java
    17确实有一个更高级形式的预览版本（正如我们在[第5章](ch05.xhtml#javanut8-CHP-5)中提到的），可以作为`switch`表达式的一部分使用：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note the lack of need for a `default` case. All `Pet` objects are either a `Cat`
    or a `Dog`, because the `Pet` interface is declared as sealed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不需要`default`情况。所有的`Pet`对象要么是`Cat`要么是`Dog`，因为`Pet`接口声明为密封的。
- en: Pattern matching will truly come into its full power when further future cases
    arrive and are standardized as final features. In particular, the combination
    of pattern matching and *algebraic data types* (one of the names given to the
    combination of records and sealed types) is especially powerful.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当未来进一步的情况到来并标准化为最终特性时，模式匹配将真正展现其全部能力。特别是模式匹配与*代数数据类型*（记录和密封类型组合的其中一种名称）的结合尤为强大。
- en: We can see how Amber’s approach fits with the model of biannual releases of
    Java; switch expressions and enhanced `instanceof` are extended and combined into
    the basics of pattern matching, which is then further enhanced by algebraic data
    types and further cases of patterns tailored to them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Amber的方法如何与Java半年度发布模式的模型相适应；`switch`表达式和增强的`instanceof`被扩展并结合成模式匹配的基础，然后通过代数数据类型和与之相配的进一步模式进一步增强。
- en: Java 18
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 18
- en: 'New Java releases are made up of Java Enhancement Proposals (JEPs): a complete
    list of current, past, and future JEPs can be found at [*https://oreil.ly/BE1r1*](https://oreil.ly/BE1r1).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Java版本由Java Enhancement Proposals (JEPs)组成：当前、过去和未来的所有JEPs的完整列表可以在[*https://oreil.ly/BE1r1*](https://oreil.ly/BE1r1)找到。
- en: 'Java 18 was released in March 2022 and includes the following JEPs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Java 18发布于2022年3月，包括以下JEPs：
- en: '400: UTF-8 by Default'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '400: 默认使用UTF-8'
- en: '408: Simple Web Server'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '408: 简单Web服务器'
- en: '413: Code Snippets in Java API Documentation'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '413: Java API文档中的代码片段'
- en: '416: Reimplement Core Reflection with Method Handles'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '416: 使用方法句柄重新实现核心反射'
- en: '417: Vector API (Third Incubator)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '417: 向量API（第三孵化器）'
- en: '418: Internet-Address Resolution SPI'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '418: Internet地址解析SPI'
- en: '419: Foreign Function & Memory API (Second Incubator)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '419: 外部函数和内存API（第二孵化器）'
- en: '420: Pattern Matching for switch (Second Preview)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '420: `switch`的模式匹配（第二预览）'
- en: Most of these are very minor or internal implementation changes. The two JEPs
    related to Panama (417 and 419) are significant steps forward for the project,
    which we’ll discuss in detail here.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其中大多数是非常小的或者是内部实现的变化。与Panama相关的两个JEPs（417和419）是该项目的重要进展，我们将在这里详细讨论。
- en: Panama
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Panama
- en: Project Panama aims to provide a modern Foreign (i.e., non-Java) interface for
    connecting to native code. The codename comes from the isthmus of Panama, a narrow
    strip connecting two larger “landmasses,” understood to be the JVM and native
    memory (aka “off-heap”).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Panama项目旨在为连接到本地代码的现代外部（即非Java）接口提供支持。该代号源自巴拿马地峡，这是连接两个较大“陆地块”的狭长地带，被理解为JVM和本地内存（即“堆外”）。
- en: The overall aim is to replace Java Native Interface (JNI), which is well-known
    to have major problems such as an excess of ceremony, extra artifacts, and a lack
    of interoperability with libraries written in anything other than C / C++. In
    fact, even for the C case, JNI does not do anything automatic to map type systems
    and the portions of Java and C code have to be mapped semimanually.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总体目标是取代Java本机接口（JNI），这是众所周知存在主要问题，例如过多的仪式感、额外的构件和与除C / C++之外的库的互操作性不足。事实上，即使对于C的情况，JNI也不会自动映射类型系统，Java和C代码的部分必须被半手动映射。
- en: 'Panama provides two main components to assist in the interoperation of Java
    and native code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Panama为帮助Java和本地代码互操作提供了两个主要组件：
- en: Foreign Memory and Functions API
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部内存和函数API
- en: Vector API
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量API
- en: The Foreign Memory API is concerned with the allocation, manipulation, and freeing
    of structured foreign memory, and the lifecycle management of foreign resources.
    This goes beyond the existing capabilities of the `ByteBuffer` class, and for
    example can address more than 2 GB of memory as a single segment. The issue of
    how foreign memory is managed is complex, as it is outside the scope of the JVM’s
    garbage collector, and existing mechanisms such as finalization are known to be
    fatally flawed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 外部内存API涉及结构化外部内存的分配、操作和释放，以及外部资源的生命周期管理。这超出了`ByteBuffer`类的现有能力，例如可以作为单个段管理超过2GB的内存。管理外部内存的问题很复杂，因为它超出了JVM的垃圾收集器范围，而现有的机制如最终化已被证明存在严重缺陷。
- en: Calling foreign functions is also possible using Panama. A new command-line
    tool, called `jextract`, creates a Java bridge from a C header file. This bridge
    is built using method and var handles to provide a set of (static) Java methods
    that look as close as possible to the original C API.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Panama也可以调用外部函数。一个名为`jextract`的新命令行工具，从C头文件创建一个Java桥接。该桥接使用方法和变量句柄构建，以提供一组（静态）Java方法，尽可能接近原始的C
    API。
- en: The runtime support for this is contained in the module `jdk.incubator.foreign`,
    which is, unsurprisingly, an Incubating API and may well change in future versions
    before it ships as final. As it stands, C and C++ are the initially supported
    foreign languages, but other possibilities (notably Rust) are expected to be added
    as the project develops.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时支持包含在`jdk.incubator.foreign`模块中，这显然是一个孵化API，在最终版本发布之前可能会发生更改。目前，最初支持的外部语言是C和C++，但随着项目发展，预计会添加其他可能性（尤其是Rust）。
- en: 'In addition to the Foreign API, Panama also provides support for vector computations
    by shipping an API that has these main goals:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除外部API外，Panama还通过提供以下主要目标的API支持向量计算：
- en: Clear and concise API
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰简洁的API
- en: Platform agnostic
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台无关
- en: Reliable JIT compilation and performance
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠的JIT编译和性能
- en: Graceful degradation of vector mode back to linear instructions
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量模式退化为线性指令的优雅降级
- en: Panama is initially shipping an implementation for the x64 and AArch64 CPU architectures.
    However, as expressed in the goals, the API does not—and must not—rule out possible
    implementations for other CPUs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 初始情况下，Panama为x64和AArch64 CPU架构提供实现。然而，正如目标所表达的，该API不得排除其他CPU的可能实现。
- en: Java 19
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 19
- en: 'Java 19 was released in September 2022 and includes a preview of a new major
    feature (Loom) as well as the following selection of JEPs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Java 19发布于2022年9月，包含一个新主要特性（Loom）的预览版本，以及以下几个JEP选择：
- en: '405: Record Patterns (Preview)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '405: 记录模式（预览版）'
- en: '422: Linux/RISC-V Port'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '422: Linux/RISC-V端口'
- en: '424: Foreign Function and Memory API (Preview)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '424: 外部函数和内存API（预览版）'
- en: '426: Vector API (Fourth Incubator)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '426: 向量API（第四孵化器）'
- en: '427: Pattern Matching for switch (Third Preview)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '427: switch模式匹配（第三预览版）'
- en: 'These JEPs are mostly continuations of the development of existing preview
    and incubating features, so rather than spend more time on them, we’ll focus on:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些JEP主要是现有预览和孵化功能的延续，因此我们不再花时间讨论它们，而是专注于：
- en: '425: Virtual Threads (Preview)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '425: 虚拟线程（预览版）'
- en: '428: Structured Concurrency (Incubator)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '428: 结构化并发（孵化器）'
- en: These two JEPs provide the basis of the first preview delivery of Project Loom.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 JEP 为 Project Loom 的首个预览版交付提供了基础。
- en: Loom
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Loom
- en: In Java 17, every executing Java language thread is an OS thread because calling
    `Thread.start()` triggers a system call that creates an OS thread. This therefore
    creates a constraint between the number of available Java execution contexts and
    the limits of the operating system. As programming languages have evolved, this
    constraint has become more problematic. The OS has data structures (e.g., stack)
    that it creates for each thread, and it individually schedules execution of each
    thread.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 17 中，每个执行的 Java 语言线程都是一个操作系统线程，因为调用 `Thread.start()` 会触发一个系统调用来创建操作系统线程。因此，这在可用的
    Java 执行上下文数量与操作系统限制之间创建了一个约束。随着编程语言的发展，这种约束变得更加棘手。操作系统为每个线程创建了数据结构（例如堆栈），并独立调度每个线程的执行。
- en: 'This naturally leads to the question: how many OS threads can an application
    start? 1,000? Perhaps 10,000? Regardless of the exact number, there is definitely
    a hard limit in this approach. Project Loom is a reimagining of Java’s concurrency
    model that is designed to transcend this limitation.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这自然引出了一个问题：一个应用程序能启动多少个操作系统线程？1,000 个？也许是 10,000 个？无论确切数量如何，这种方法肯定存在硬性限制。Project
    Loom 是 Java 并发模型的重新构想，旨在超越这种限制。
- en: The key is *virtual threads*, a new construct that is not 1-1 with OS threads.
    From a Java programming perspective, virtual threads look like instances of `Thread`,
    but they are managed by the JVM, not the OS. This means that no OS-level data
    structures (e.g., for the thread’s stack frames) are created, and all the management
    metadata is handled by the JVM. This includes the scheduling behavior; rather
    than the OS scheduler, a Java execution scheduler (a threadpool) is used.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于 *虚拟线程*，这是一种新的构造，不是一对一对应的操作系统线程。从 Java 编程的角度看，虚拟线程看起来像 `Thread` 的实例，但由 JVM
    管理，而不是操作系统。这意味着不会创建操作系统级的数据结构（例如线程的堆栈帧），所有管理元数据由 JVM 处理。这包括调度行为；与操作系统调度程序不同，使用的是
    Java 执行调度程序（线程池）。
- en: When a virtual thread wants to execute, it does so on an OS *carrier thread*
    and runs until a blocking call (e.g., I/O) is made. The carrier thread is *yielded*
    to another virtual thread, and so a virtual thread may execute on several different
    carriers over its lifetime. The connection to blocking calls means that virtual
    threads are not suitable for pure CPU-bound tasks, and in general, the use of
    Loom is very different from approaches such as `async` / `await` that developers
    may have used in other languages.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚拟线程希望执行时，它会在一个操作系统的 *载体线程* 上执行，并运行直到发出阻塞调用（例如 I/O）。载体线程会 *让步* 给另一个虚拟线程，因此一个虚拟线程可能在其生命周期内在多个不同的载体上执行。与阻塞调用的关联意味着虚拟线程不适合纯
    CPU 绑定的任务，总体上，使用 Loom 的方式与开发者可能在其他语言中使用的 `async` / `await` 等方法非常不同。
- en: It remains to be seen how much Loom will impact end-user devs, although there
    is a lot of interest from framework and library authors. An initial version is
    arriving as a preview in JDK 19, but it is still unclear when it’ll arrive as
    a standard feature. Overall, the expectation in the community is that it will
    be finalized in the next LTS, which is expected to be Java 21.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尚不清楚 Loom 将对最终用户开发者产生多大影响，尽管从框架和库作者那里表现出了很高的兴趣。首个预览版本将在 JDK 19 中作为预览版推出，但仍不清楚它何时作为标准功能推出。总体来看，社区的期待是它将在下一个
    LTS 版本中最终确定，预计这将是 Java 21。
- en: Future Java
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来的 Java
- en: 'Along with the completion of the projects already mentioned, longer-term efforts
    to evolve Java are underway: Project Valhalla and the rise of Cloud-Native Java.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已提到的项目完成之外，还在进行着更长期的努力来发展 Java：Valhalla 项目和云原生 Java 的兴起。
- en: Let’s look at each in turn.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次看一看。
- en: Valhalla
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Valhalla
- en: Project Valhalla is a very ambitious OpenJDK project that has been running since
    2014. The goal, “To align JVM memory layout behavior with the cost model of modern
    hardware,” seems simple and innocuous enough.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Valhalla 项目是一个自 2014 年以来一直在运行的非常雄心勃勃的 OpenJDK 项目。其目标是“将 JVM 内存布局行为与现代硬件的成本模型对齐”，看起来非常简单和无害。
- en: However, this is deeply deceptive.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这是极其具有欺骗性的。
- en: 'For starters, this divides the existing Java objects into two cases: the identity
    objects we’re used to using and a new kind of value object whose main difference
    is that it doesn’t have a unique identity. From these value objects, a further
    step is taken to allow the reference-ness, or indirection, to be removed and for
    the value to be directly represented by its bit patterns.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这将现有的 Java 对象分为两种情况：我们习惯使用的身份对象和一种新的值对象，其主要区别在于它没有唯一的身份。从这些值对象中，进一步采取的一步是允许移除引用性或间接性，并且直接用其位模式来表示值。
- en: The intended use case for this new data value is small, immutable, final, identity-less
    types. This allows these new identity-less values to fit with both the existing
    object reference and primitive worlds, getting the best of each world, and it
    also alludes to one possible use case as “user-defined primitives.”
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新数据值的预期使用案例是小型、不可变、最终的、无身份的类型。这使得这些新的无身份值可以与现有的对象引用和原始类型完美结合，并且也暗示了一个可能的用例，即“用户定义的原始类型”。
- en: Users should think of values as objects without identity, and then they will
    get guaranteed performance benefits from the JIT (such as enhanced *escape analysis*).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应将值视为没有身份的对象，这样他们将从 JIT（例如增强的*逃逸分析*）中获得性能保证的好处。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Valhalla also provides a mechanism for low-level libraries (such as complex
    numbers, half-floats for machine learning, etc.) to use the primitive value type
    directly, but most developers should not need to use this aspect.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Valhalla 还为低级库（如复数、半浮点数用于机器学习等复杂数据类型）提供了直接使用原始值类型的机制，但大多数开发者不应该需要使用这个方面。
- en: The fact that these new data values lack object identity implies that they disrupt
    the traditional inheritance hierarchy—without identity there is no object monitor,
    so `wait()`, `notify()`, and `synchronized` are not possible for these types.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新数据值缺乏对象身份的事实意味着它们破坏了传统的继承层次结构——没有身份就没有对象监视器，因此这些类型不支持`wait()`、`notify()`和`synchronized`。
- en: In turn, this creates a potentially surprising connection to Java generics because
    only reference types are permissible as the value for a type parameter. Valhalla
    therefore proposes to extend generics to allow abstraction over all types including
    these new data values and even the existing primitives.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这反过来与 Java 泛型产生了一个潜在的惊人联系，因为只有引用类型可以作为类型参数的值。因此，Valhalla 提议扩展泛型，允许抽象覆盖所有类型，包括这些新的数据值甚至现有的原始类型。
- en: In addition to the extensive work to plumb these new forms of data through the
    JVM, it is also necessary to create a usage model in the Java language that seems
    natural to Java programmers. Valhalla must also enable existing libraries (including,
    but not limited to, the JDK) to compatibly evolve as these changes are delivered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过 JVM 针对这些新形式的数据进行广泛工作外，还必须在 Java 语言中创建一个使用模型，这对 Java 程序员来说似乎很自然。Valhalla
    还必须使现有的库（包括但不限于 JDK）能够在这些变化被推出时兼容地演进。
- en: Some new bytecode instructions will be needed, as Valhalla’s new types are immutable,
    so the `putfield` instruction (which modifies object fields) will not work.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Valhalla 的新类型是不可变的，因此将需要一些新的字节码指令，因此`putfield`指令（修改对象字段的指令）将无法工作。
- en: Valhalla’s new types have been known by several names during the project’s history,
    including *value types*, *inline types*, and *primitive classes*. The JEPs that
    cover the implementation of Valhalla are not, at the time of writing, targeted
    at any specific Java version, and it may be some time before most Java programmers
    encounter them in day-to-day work.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目历史中，Valhalla 的新类型已经以几种名称为人所知，包括*值类型*、*内联类型*和*原始类*。涵盖 Valhalla 实现的 JEP 在撰写本文时并未针对特定的
    Java 版本，大多数 Java 程序员可能在日常工作中很少遇到它们。
- en: Cloud-Native Java
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云原生 Java
- en: One of the ongoing mega trends in the software industry is the transition to
    workloads that run “in the cloud,” which means on time-leased servers owned by
    infrastructure providers such as Amazon, Microsoft, and Google.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 软件行业的一个持续的巨大趋势是向在“云”中运行的工作负载过渡，这意味着由亚马逊、微软和谷歌等基础设施提供商拥有的按时间租赁的服务器上运行。
- en: Modern programming environments increasingly need to ensure that they are economic
    and easy to use in cloud deployments, and Java is no exception. However, Java’s
    design does have certain aspects that are potentially less friendly to cloud applications
    than we would like. These largely stem from the classloading and JIT compilation
    aspects of the runtime, which are designed for flexibility and high performance
    over the lifetime of a single JVM process.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现代编程环境越来越需要确保它们在云部署中经济实用，Java也不例外。然而，Java的设计确实有一些方面可能对云应用不太友好。这些主要源于运行时的类加载和JIT编译方面，这些都是为了单个JVM进程的灵活性和高性能而设计的。
- en: 'In the cloud, this can have side effects such as:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中，这可能会产生诸如：
- en: Slow application startup time
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用启动时间慢
- en: Long time to peak performance
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较长的达到峰值性能时间
- en: Potentially high memory overhead
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有较高的内存开销
- en: In particular, the lifetime of cloud processes (especially for “Serverless”
    and *Function-as-a-Service* deployments) may be too short for the performance
    benefits of Java to pay off. This can be seen as the costs required to get the
    gains not being fully amortized by the time the process exits.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于云处理进程的生命周期（特别是“无服务器”和*函数即服务*部署），可能过短，以至于Java的性能优势无法得到回报。这可以看作是为了获得收益而需付出的成本在进程退出时尚未完全摊销。
- en: There are ongoing attempts to solve these long-term pain points and ensure that
    Java remains a competitive and attractive programming environment as Cloud-First
    becomes the dominant mode of delivery for serverside applications.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在尝试解决这些长期的痛点，并确保Java在云优先成为主流服务器端应用交付模式时仍具有竞争力和吸引力的编程环境。
- en: 'One of the major approaches is *native compilation*: the conversion of a Java
    program from bytecode into compiled machine code. As this compilation occurs before
    program execution starts (as for languages like Rust and C++), it is known as
    *ahead-of-time compilation*, or just AOT. This technique is unusual in the Java
    space, but it aims to provide a faster startup time as programs do not need to
    be classloaded or JIT compiled. However, it does not generally give better peak
    performance than the same application would have when running in dynamic VM mode.
    This is because peak performance isn’t the point here. AOT and JIT represent different
    strategies and different tradeoffs.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个主要方法是*本地编译*：将Java程序从字节码转换为编译后的机器码。由于这种编译发生在程序执行开始之前（就像Rust和C++等语言一样），因此被称为*预编译*编译（AOT），或简称AOT。这种技术在Java领域并不常见，但它旨在提供更快的启动时间，因为程序不需要进行类加载或JIT编译。然而，通常情况下它不会比在动态虚拟机模式下运行的同一应用程序提供更好的峰值性能。这是因为这里重点不在于峰值性能。AOT和JIT代表了不同的策略和不同的权衡。
- en: The current main effort to support native compiled Java is [Oracle’s GraalVM](https://oreil.ly/o9jNp).
    This was developed as a separate research project in Oracle Labs, but as of late
    2022, Oracle has announced plans to contribute parts of it to OpenJDK. It is available
    in two editions, an open-source edition and a proprietary Enterprise Edition,
    which has a licensing and support cost.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当前支持本地编译的主要工作是[Oracle’s GraalVM](https://oreil.ly/o9jNp)。这是在Oracle Labs作为一个独立的研究项目开发的，但截至2022年底，Oracle宣布计划向OpenJDK贡献部分内容。它有两个版本，一个是开源版，另一个是专有的企业版，后者有许可和支持成本。
- en: GraalVM contains a compiler called Graal that can operate in either JIT or AOT
    mode. The AOT mode of Graal is the basis of GraalVM’s Native Image technology
    that can produce a standalone, compiled machine code binary from a Java application.
    One interesting aspect of the Graal compiler is that it is written in Java, unlike
    the JIT compilers in OpenJDK, which are implemented in native code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: GraalVM包含一个名为Graal的编译器，它可以在JIT或AOT模式下运行。Graal的AOT模式是GraalVM的Native Image技术的基础，可以从Java应用程序生成一个独立的编译后的机器码二进制文件。Graal编译器的一个有趣之处在于它是用Java编写的，而不像OpenJDK中的JIT编译器那样是用本地代码实现的。
- en: GraalVM also includes Truffle, an interpreter generating framework for languages
    on the JVM. Interpreters for supported languages, written on top of Truffle, are
    themselves Java programs that run on the JVM. Many non-Java languages are already
    available such as JavaScript, Python, Ruby, and R.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GraalVM还包括Truffle，一个用于JVM上语言的解释器生成框架。在Truffle之上编写的支持语言的解释器本身就是运行在JVM上的Java程序。已经支持多种非Java语言，如JavaScript、Python、Ruby和R。
- en: Another of the projects working on improving cloud-native support is [Quarkus](https://quarkus.io),
    a Java microservices framework designed for the Kubernetes cloud orchestration
    and deployment stack.1411.200 Quarkus attempts to reduce the impact of the cloud-native
    pain points by extensively using build-time processing. Expensive computations
    and startup that would normally be handled reflectively during startup are instead
    performed ahead of time wherever possible.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个致力于改进云原生支持的项目是[Quarkus](https://quarkus.io)，一个专为Kubernetes云编排和部署堆栈设计的Java微服务框架。Quarkus尝试通过广泛使用构建时处理来减少云原生的痛点影响。通常在启动过程中通过反射处理的昂贵计算和启动过程将尽可能提前执行。
- en: Quarkus also emphasizes developer experience and provides both reactive and
    imperative styles of programming microservices.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus还强调开发者体验，并提供响应式和命令式两种编程微服务的风格。
- en: The framework is open source and production ready, and it has support available
    from Red Hat, which is the primary maintainer of the project. It also includes
    support for native compilation, based on the open-source edition of GraalVM. However,
    Quarkus can also be run in dynamic VM mode on top of an OpenJDK runtime.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框架是开源且已经投入生产使用，并且有来自红帽的支持，红帽是该项目的主要维护者。它还包括对GraalVM开源版本的本地编译支持。不过，Quarkus也可以在OpenJDK运行时的动态虚拟机模式上运行。
- en: Finally, we should also mention Project Leyden. This is a new (May 2022) OpenJDK
    project that seeks to introduce *static runtime images* to the Java platform.
    The project name comes from a “Leyden jar,” a device from the 1700s used for storing
    static electrical charge. A key aspect of this is known as the *closed world*
    assumption that removes dynamic runtime behavior such as reflection.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还应该提到项目Leyden。这是一个新的（2022年5月）OpenJDK项目，旨在为Java平台引入*静态运行时镜像*。该项目的名称来源于18世纪用于存储静电的“莱顿瓶”。其中一个关键点是*封闭世界*假设，即移除反射等动态运行时行为。
- en: The project is still in its early stages but is adopting a different (and more
    cautious) approach than GraalVM; a key goal of Leyden is to be able to selectively
    and flexibly constrain and shift dynamism. The intent is to evolve toward similar
    targets as the AOT-compiled native image binaries created by GraalVM, but as yet
    there are no indications when these techniques might appear in a production form
    of Java.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目仍处于早期阶段，但采用的方法与GraalVM有所不同（并更为谨慎）；Leyden的一个关键目标是能够有选择性地和灵活地限制和转移动态性。其意图是朝着GraalVM创建的AOT编译的本地镜像二进制文件类似的目标发展，但目前尚无迹象表明这些技术何时可能出现在Java的生产形式中。
