["```java\ndelivery\n  .getApplications()\n  .flatMap(application -> application.getClusters())\n  .flatMap(cluster -> cluster.getServerGroups())\n\n// Where... class Application {\n  String name;\n  Team owner;\n  Stream<Cluster> clusters;\n}\n\nclass Cluster {\n  String cloudProvider;\n  String name;\n  Stream<ServerGroup> clusters;\n}\n\nclass ServerGroup {\n  String name;\n  String region; ![1](../images/00112.png)\n  String stack; ![2](../images/00059.png)\n  String version;\n  boolean enabled;\n  Artifact artifact;\n}\n```", "```java\ndelivery\n  .getApplications()\n  .filter(application -> application.getClusters()\n    .anyMatch(cluster -> cluster.getCloudProvider().equals(\"kubernetes\")))\n  .map(application -> application.getTeam())\n  .collect(Collectors.toSet())\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<metadata modelVersion=\"1.1.0\">\n  <groupId>io.rsocket</groupId>\n  <artifactId>rsocket-core</artifactId>\n  <version>1.0.0-SNAPSHOT</version>\n  <versioning>\n    <snapshot>\n      <timestamp>20200423.184223</timestamp>\n      <buildNumber>24</buildNumber>\n    </snapshot>\n    <lastUpdated>20200423185021</lastUpdated>\n    <snapshotVersions>\n      <snapshotVersion>\n        <extension>jar</extension>\n        <value>1.0.0-RC7-20200423.184223-24</value>\n        <updated>20200423184223</updated>\n      </snapshotVersion>\n      <snapshotVersion>\n        <extension>pom</extension>\n        <value>1.0.0-RC7-20200423.184223-24</value>\n        <updated>20200423184223</updated>\n      </snapshotVersion>\n      ...\n    </snapshotVersions>\n  </versioning>\n</metadata>\n```", "```java\nplugins {\n  java\n  id(\"nebula.release\") version \"LATEST\" ![1](../images/00112.png)\n  id(\"nebula.maven-publish\") version \"LATEST\"\n  id(\"nebula.maven-resolved-dependencies\") version \"LATEST\"\n}\n\nproject\n  .rootProject\n  .tasks\n  .getByName(\"devSnapshot\")\n  .dependsOn(project\n    .tasks\n    .getByName(\"publishNebulaPublicationToArtifactory\")) ![2](../images/00059.png)\n\nproject\n  .gradle\n  .taskGraph\n  .whenReady(object: Action<TaskExecutionGraph> { ![3](../images/00067.png)\n    override fun execute(graph: TaskExecutionGraph) {\n      if (graph.hasTask(\":snapshot\") ||\n        graph.hasTask(\":immutableSnapshot\")) {\n\n        throw GradleException(\"You cannot use the snapshot or\" +\n          \"immutableSnapshot task from the release plugin. \" +\n          \"Please use the devSnapshot task.\")\n      }\n    }\n  })\n\npublishing {\n  repositories {\n    maven {\n      name = \"Artifactory\" ![4](../images/00016.png)\n      url = URI.create(\"https://repo.myorg.com/libs-services-local\")\n    }\n  }\n}\n```", "```java\ndelivery\n  .getApplications()\n  .flatMap(application -> application.getClusters())\n  .flatMap(cluster -> cluster.getServerGroups())\n  .map(serverGroup -> serverGroup.getArtifact()) ![1](../images/00112.png)\n\n// Where... @EqualsAndHashCode(includes = {\"group\", \"artifact\", \"version\"}) ![2](../images/00059.png)\nclass Artifact {\n  String group;\n  String artifact;\n  String version;\n  Set<Artifact> dependencies; ![3](../images/00067.png)\n}\n```", "```java\ndependencies {\n  implementation(\"org.springframework.boot:spring-boot-starter-actuator\")\n  implementation(\"org.springframework.boot:spring-boot-starter-webflux\")\n  testImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n  testImplementation(\"io.projectreactor:reactor-test\")\n}\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n    <version>2.3.0.M4</version>\n    <scope>runtime</scope>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-webflux</artifactId>\n    <version>2.3.0.M4</version>\n    <scope>runtime</scope>\n  </dependency>\n</dependencies>\n```", "```java\nconfigurations.all {\n  resolutionStrategy.eachDependency {\n    if (requested.group == \"org.software\" &&\n      requested.name == \"some-library\") {\n\n      useVersion(\"1.2.1\")\n      because(\"fixes critical bug in 1.2\")\n    }\n  }\n}\n```", "```java\nplugins {\n  id(\"nebula.maven-publish\") version \"LATEST\" ![1](../images/00112.png)\n  id(\"nebula.info\") version \"LATEST\"\n}\n\ntasks.withType<GenerateMavenPom> {\n  doFirst {\n    val runtimeClasspath = configurations\n      .getByName(\"runtimeClasspath\")\n    val gav = { d: ResolvedDependency ->\n      \"${d.moduleGroup}:${d.moduleName}:${d.moduleVersion}\"\n    }\n    val indented = \"\\n\" + \" \".repeat(6)\n\n    project.plugins.withType<InfoBrokerPlugin> {\n      add(\"Resolved-Dependencies\", runtimeClasspath\n        .resolvedConfiguration\n        .lenientConfiguration\n        .allModuleDependencies\n        .sortedBy(gav)\n        .joinToString(\n          indented,\n          indented,\n          \"\\n\" + \" \".repeat(4), transform = gav\n        )\n      )\n    }\n  }\n}\n```", "```java\n<project ...>\n  <groupId>com.example</groupId>\n  <artifactId>demo</artifactId>\n  <version>0.1.0</version>\n  <name>demo</name>\n  ...\n  <properties>\n    <nebula_Change>1b0f8d9</nebula_Change>\n    <nebula_Branch>master</nebula_Branch>\n    <nebula_X_Compile_Target_JDK>11</nebula_X_Compile_Target_JDK>\n    <nebula_Resolved_Dependencies>\n      ch.qos.logback:logback-classic:1.2.3\n      ch.qos.logback:logback-core:1.2.3\n      com.datastax.oss:java-driver-bom:4.5.1\n      com.fasterxml.jackson.core:jackson-annotations:2.11.0.rc1\n      com.fasterxml.jackson.core:jackson-core:2.11.0.rc1\n      com.fasterxml.jackson.core:jackson-databind:2.11.0.rc1\n    </nebula_Resolved_Dependencies>\n  </properties>\n</project>\n```", "```java\ndelivery\n  .getApplications()\n  .flatMap(application -> application.getClusters())\n  .flatMap(cluster -> cluster.getServerGroups())\n  .filter(artifact -> serverGroup\n    .getArtifact()\n    .getDependencies()\n    .stream()\n    .anyMatch(d -> d.getArtifact().equals(\"logback-core\") &&\n      d.getVersion().equals(\"1.2.3\"))\n  )\n```", "```java\ntasks.withType<GenerateMavenPom> {\n  doFirst {\n    val runtimeClasspath = configurations.getByName(\"runtimeClasspath\")\n\n    val gav = { d: ResolvedDependency ->\n      \"${d.moduleGroup}:${d.moduleName}:${d.moduleVersion}\"\n    }\n\n    val observedDependencies = TreeSet<ResolvedDependency> { d1, d2 ->\n      gav(d1).compareTo(gav(d2))\n    }\n\n    fun reduceDependenciesAtIndent(indent: Int):\n      (List<String>, ResolvedDependency) -> List<String> =\n      { dependenciesAsList: List<String>, dep: ResolvedDependency ->\n\n        dependenciesAsList + listOf(\" \".repeat(indent) +\n          dep.module.id.toString()) + (\n            if (observedDependencies.add(dep)) {\n              dep.children\n                .sortedBy(gav)\n                .fold(emptyList(), reduceDependenciesAtIndent(indent + 2))\n            } else {\n              // This dependency subtree has already been printed, so skip\n              emptyList()\n            }\n          )\n      }\n\n    project.plugins.withType<InfoBrokerPlugin> {\n      add(\"Resolved-Dependencies\", runtimeClasspath\n        .resolvedConfiguration\n        .lenientConfiguration\n        .firstLevelModuleDependencies\n        .sortedBy(gav)\n        .fold(emptyList(), reduceDependenciesAtIndent(6))\n        .joinToString(\"\\n\", \"\\n\", \"\\n\" + \" \".repeat(4)))\n    }\n  }\n}\n```", "```java\n<project ...>\n  <groupId>com.example</groupId>\n  <artifactId>demo</artifactId>\n  <version>0.1.0</version>\n  <name>demo</name>\n  ...\n  <properties>\n    <nebula_Change>1b0f8d9</nebula_Change>\n    <nebula_Branch>master</nebula_Branch>\n    <nebula_X_Compile_Target_JDK>11</nebula_X_Compile_Target_JDK>\n    <nebula_Resolved_Dependencies>\n      org.springframework.boot:spring-boot-starter-actuator:2.3.0.M4\n        io.micrometer:micrometer-core:1.3.7\n          org.hdrhistogram:HdrHistogram:2.1.11\n          org.latencyutils:LatencyUtils:2.0.3\n        org.springframework.boot:spring-boot-actuator-autoconfigure:2.3.0.M4\n          com.fasterxml.jackson.core:jackson-databind:2.11.0.rc1\n          com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.0.rc1\n            com.fasterxml.jackson.core:jackson-annotations:2.11.0.rc1\n            com.fasterxml.jackson.core:jackson-core:2.11.0.rc1\n            com.fasterxml.jackson.core:jackson-databind:2.11.0.rc1\n    </nebula_Resolved_Dependencies>\n  </properties>\n</project>\n```", "```java\nApplication\n  -> Owner (team)\n  -> Clusters\n    -> Server groups\n      -> Instances\n      -> Amazon Machine Image (AMI)\n        -> Debian\n          -> JAR (or WAR)\n            -> Git commit\n              -> Source abstract syntax tree ![1](../images/00112.png)\n                -> Classes\n                  -> Method declarations\n                    -> Method invocations\n            -> Dependencies\n               -> Git commit\n                 -> Source abstract syntax tree\n                   -> Classes\n                     -> Method declarations\n                       -> Method invocations\n```", "```java\nplugins {\n  id(\"nebula.maven-publish\") version \"LATEST\"\n  id(\"nebula.info\") version \"LATEST\"\n}\n```", "```java\n<project ...>\n  <groupId>com.example</groupId>\n  <artifactId>demo</artifactId>\n  <version>0.1.0</version>\n  <name>demo</name>\n  ...\n  <properties>\n    <nebula_Change>1b0f8d9</nebula_Change>\n    <nebula_Branch>master</nebula_Branch>\n  </properties>\n</project>\n```", "```java\nlogger.info(\"Hi\");\n```", "```java\nJavaParser();\nJavaParser(List<Path> classpath);\n```", "```java\nnew JavaParser(JavaParser.dependenciesFromClasspath(\"guava\"));\n```", "```java\nJavaParser parser = ...;\nList<J.CompilationUnit> cus = parser.parse(pathsToSourceFiles);\n```", "```java\nval cu: J.CompilationUnit = JavaParser().parse(\"\"\"\n    import java.util.Collections;\n    public class A {\n        Object o = Collections.emptyList();\n    }\n\"\"\")\n```", "```java\nval cu: J.CompilationUnit = JavaParser(JavaParser.dependenciesFromClasspath(\"guava\"))\n    .parse(\"\"\"\n        import com.google.common.io.Files;\n        public class A {\n            File temp = Files.createTempDir();\n        }\n    \"\"\")\n```", "```java\nval cu: J.CompilationUnit = JavaParser(JavaParser.dependenciesFromClasspath(\"guava\"))\n    .parse(\"\"\"\n        import com.google.common.io.Files;\n        public class A {\n            File temp = Files.createTempDir();\n        }\n    \"\"\")\n\nval calls: List<J.MethodInvocation> = cu.findMethodCalls(\n    \"java.io.File com.google.common.io.Files.createTempDir()\");\n```", "```java\npublic class FindMethods extends JavaSourceVisitor<List<J.MethodInvocation>> {\n    private final MethodMatcher matcher;\n\n    public FindMethods(String signature) {\n        this.matcher = new MethodMatcher(signature);\n    }\n\n    @Override\n    public List<J.MethodInvocation> defaultTo(Tree t) {\n        return emptyList();\n    }\n\n    @Override\n    public List<J.MethodInvocation> visitMethodInvocation(J.MethodInvocation method) {\n        return matcher.matches(method) ?\n          singletonList(method) :\n          super.visitMethodInvocation(method);\n    }\n}\n```", "```java\nJ.CompilationUnit cu = ...;\n\n// This visitor can return any type you wish, ultimately\n// being a reduction of visiting every AST element\nnew MyCustomVisitor().visit(cu);\n```", "```java\nJavaParser parser = ...;\nList<J.CompilationUnit> cus = parser.parse(sourceFiles);\n\nfor(J.CompilationUnit cu : cus) {\n    Refactor<J.CompilationUnit, J> refactor = cu.refactor();\n\n    // ... Do some refactoring\n\n    Change<J.CompilationUnit> change = refactor.fix();\n\n    change.diff(); // A string representing a git-style patch\n    // Relativize the patch's file reference to some other path\n    change.diff(relativeToPath);\n\n    // Print out the transformed source, which could be used\n    // to overwrite the original source file\n    J.CompilationUnit fixed = change.getFixed();\n    fixed.print();\n\n    // Useful for unit tests to trim the output of common whitespace\n    fixed.printTrimmed();\n\n    // This is null when we synthesize a new compilation unit\n    // where one didn't exist before\n    @Nullable J.CompilationUnit original = change.getOriginal();\n}\n```", "```java\n@Test\nfun changeFieldType() {\n    val a = parse(\"\"\"\n        import java.util.List;\n        public class A {\n           List collection;\n        }\n    \"\"\".trimIndent())\n\n    val fixed = a.refactor()\n            .visit(ChangeFieldType(\n                    a.classes[0].findFields(\"java.util.List\")[0],\n                    \"java.util.Collection\"))\n            .fix().fixed\n\n    assertRefactored(fixed, \"\"\"\n        import java.util.Collection;\n\n        public class A {\n           Collection collection;\n        }\n    \"\"\")\n}\n```", "```java\npublic class MakeClassesFinal extends JavaRefactorVisitor {\n    public MakeClassesFinal {\n        super(\"my.MakeClassesFinal\");\n        setCursoringOn();\n    }\n\n    @Override\n    public J visitClassDecl(J.ClassDecl classDecl) {\n        J.ClassDecl c = refactor(classDecl, super::visitClassDecl);\n\n        // Only make top-level classes final\n        if(getCursor().firstEnclosing(J.ClassDecl.class) == null) {\n            c = c.withModifiers(\"final\");\n        }\n\n        return c;\n    }\n}\n```", "```java\nrepositories {\n  mavenCentral {\n    content {\n      excludeVersionByRegex(\"com\\\\.fasterxml\\\\.jackson\\\\..*\", \".*\",\n        \".*rc.*\")\n    }\n  }\n  mavenCentral {\n    content {\n      includeVersionByRegex(\"com\\\\.fasterxml\\\\.jackson\\\\..*\", \".*\",\n        \"(\\\\d+\\\\.)*\\\\d+\")\n    }\n  }\n}\n```", "```java\nplugins {\n  id \"nebula.lint\" version \"LATEST\"\n}\n\ngradleLint.rules = ['unused-dependency']\n```", "```java\nplugins {\n  id \"nebula.lint\" version \"LATEST\"\n}\n\ngradleLint.rules = ['undeclared-dependency']\n```"]