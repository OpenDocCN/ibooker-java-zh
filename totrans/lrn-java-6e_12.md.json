["```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Labels {\n\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"JLabel Examples\");\n    frame.setLayout(new FlowLayout()); ![1](assets/1.png)\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); ![2](assets/2.png)\n    frame.setSize(300, 150);\n\n    JLabel basic = new JLabel(\"Default Label\"); ![3](assets/3.png)\n    frame.add(basic);\n    frame.setVisible(true);\n  }\n}\n```", "```java\npublic class Labels {\n\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"JLabel Examples\");\n    frame.setLayout(new FlowLayout());\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(300, 150);\n\n    JLabel basic = new JLabel(\"Default Label\");\n    JLabel another = new JLabel(\"Another Label\");\n    JLabel simple = new JLabel(\"A Simple Label\");\n    JLabel standard = new JLabel(\"A Standard Label\");\n\n    frame.add(basic);\n    frame.add(another);\n    frame.add(simple);\n    frame.add(standard);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\n    JLabel basic = new JLabel(\"Default Label\");\n    basic.setOpaque(true);\n    basic.setBackground(Color.YELLOW);\n    JLabel another = new JLabel(\"Another Label\");\n    another.setOpaque(true);\n    another.setBackground(Color.GREEN);\n\n    frame.add(basic);\n    frame.add(another);\n    // other frame setup\n```", "```java\n    // a white label with a forced size and text centered inside\n    JLabel centered = new JLabel(\"Centered Text\", JLabel.CENTER);\n    centered.setPreferredSize(new Dimension(150, 24));\n    centered.setOpaque(true);\n    centered.setBackground(Color.WHITE);\n\n    // a white label with an alternate, larger font\n    JLabel times = new JLabel(\"Times Roman\");\n    times.setOpaque(true);\n    times.setBackground(Color.WHITE);\n    times.setFont(new Font(\"TimesRoman\", Font.BOLD, 18));\n\n    // a white label using inline HTML for styling\n    JLabel styled = new JLabel(\"<html>Some <b><i>styling</i></b>\"\n        + \" is also allowed</html>\");\n    styled.setOpaque(true);\n    styled.setBackground(Color.WHITE);\n\n    // a label with both an icon and text\n    JLabel icon = new JLabel(\"Verified\",\n        new ImageIcon(\"ch10/examples/check.png\"), JLabel.LEFT);\n    icon.setOpaque(true);\n    icon.setBackground(Color.WHITE);\n\n    // finally, add all our new labels to the frame\n    frame.add(centered);\n    frame.add(times);\n    frame.add(styled);\n    frame.add(icon);\n```", "```java\n$ javac ch12/examples/Widget.java\n$ jshell\n|  Welcome to JShell -- Version 21-ea\n|  For an introduction type: /help intro\n\njshell> import javax.swing.*\njshell> import java.awt.*\njshell> import ch12.examples.Widget\n\njshell> Widget w = new Widget()\nw ==> ch10.Widget[frame0,0,23,300x150,layout=java.awt.B ... abled=true]\n\njshell> JLabel label1 = new JLabel(\"Green\")\nlabel1 ==> javax.swing.JLabel[,0,0,0x0,invalid,alignmentX=0\\. ... ion=CENTER]\n\njshell> label1.setOpaque(true)\njshell> label1.setBackground(Color.GREEN)\n\njshell> w.add(label1)\n$8 ==> javax.swing.JLabel[,0,0,0x0,...]\n\njshell> w.add(new JLabel(\"Quick test\"))\n$9 ==> javax.swing.JLabel[,0,0,0x0,...]\n```", "```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Buttons {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"JButton Examples\");\n    frame.setLayout(new FlowLayout());\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(300, 150);\n\n    JButton basic = new JButton(\"Try me!\");\n    frame.add(basic);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class TextInputs {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"JTextField Examples\");\n    frame.setLayout(new FlowLayout());\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(400, 200);\n\n    JLabel nameLabel = new JLabel(\"Name:\");\n    JTextField nameField = new JTextField(10);\n    JLabel emailLabel = new JLabel(\"Email:\");\n    JTextField emailField = new JTextField(24);\n\n    frame.add(nameLabel);\n    frame.add(nameField);\n    frame.add(emailLabel);\n    frame.add(emailField);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\njshell> w.reset()\n\njshell> JTextField emailField = new JTextField(15)\nemailField ==> javax.swing.JTextField[,0,0,0x0, ... lignment=LEADING]\n\njshell> w.add(new JLabel(\"Email:\"))\n$12 ==> javax.swing.JLabel[,0,0,0x0, ... sition=CENTER]\n\njshell> w.add(emailField)\n$13 ==> javax.swing.JTextField[,0,0,0x0, ... lignment=LEADING]\n\n// Enter an sample address, we typed in \"me@some.company\"\n\njshell> emailField.getText()\n$14 ==> \"me@some.company\"\n```", "```java\n    JLabel bodyLabel = new JLabel(\"Body:\");\n    JTextArea bodyArea = new JTextArea(10,30);\n\n    frame.add(bodyLabel);\n    frame.add(bodyArea);\n```", "```java\njshell> w.reset()\n\njshell> w.add(new JLabel(\"Body:\"))\n$16 ==> javax.swing.JLabel[,0,0,0x0, ... ition=CENTER]\n\njshell> JTextArea bodyArea = new JTextArea(5,20)\nbodyArea ==> javax.swing.JTextArea[,0,0,0x0, ... word=false,wrap=false]\n\njshell> w.add(bodyArea)\n$18 ==> javax.swing.JTextArea[,0,0,0x0, ... lse,wrap=false]\n\njshell> bodyArea.getText()\n$19 ==> \"This is the first line.\\nThis should be the second.\\nAnd the third...\"\n```", "```java\njshell> w.remove(bodyArea); // So we can start with a fresh text area\n\njshell> bodyArea = new JTextArea(5,20)\nbodyArea ==> javax.swing.JTextArea[,0,0,0x0,inval... word=false,wrap=false]\n\njshell> w.add(new JScrollPane(bodyArea))\n$17 ==> javax.swing.JScrollPane[,47,5,244x84, ... ortBorder=]\n```", "```java\n    JLabel bodyLabel = new JLabel(\"Body:\");\n    JTextArea bodyArea = new JTextArea(10,30);\n    bodyArea.setLineWrap(true);\n    bodyArea.setWrapStyleWord(true);\n    JScrollPane bodyScroller = new JScrollPane(bodyArea);\n    bodyScroller.setHorizontalScrollBarPolicy(\n        JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    bodyScroller.setVerticalScrollBarPolicy(\n        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n\n    frame.add(bodyLabel);\n    // note we don't add bodyArea, it's already in bodyScroller\n    frame.add(bodyScroller);\n```", "```java\n// reset the widget\njshell> w.reset()\n\njshell> JSlider slider = new JSlider(0, 180, 90);\nslider ==> javax.swing.JSlider[,0,0,0x0, ... ks=false,snapToValue=true]\n\njshell> w.add(slider)\n$20 ==> javax.swing.JSlider[,0,0,0x0, ... alue=true]\n```", "```java\njshell> slider.getValue()\n$21 ==> 112\n```", "```java\njshell> JSlider force = new JSlider(0, 200, 100)\nforce ==> javax.swing.JSlider[,0,0,0x0, ... ks=false,snapToValue=true]\n\njshell> w.add(force)\n$23 ==> javax.swing.JSlider[,0,0,0x0,invalid ... alue=true]\n\njshell> force.getValue()\n$24 ==> 68\n\njshell> float myForce = force.getValue() / 10.0f;\nmyForce ==> 6.8\n```", "```java\njshell> w.reset()\n\njshell> String[] cities = new String[] { \"Atlanta\", \"Boston\",\n   ...>   \"Chicago\", \"Denver\" };\ncities ==> String[4] { \"Atlanta\", ..., \"Denver\" }\n\njshell> JList cityList = new JList<String>(cities);\ncityList ==> javax.swing.JList[,0,0,0x0, ...entation=0]\n\njshell> w.add(cityList)\n$29 ==> javax.swing.JList[,0,0,0x0,invalid ... ation=0]\n```", "```java\njshell> cityList.getSelectedIndex()\n$31 ==> 2\n\njshell> cityList.getSelectedIndices()\n$32 ==> int[1] { 2 }\n\njshell> cityList.getSelectedValue()\n$33 ==> \"Chicago\"\n\njshell> cities[cityList.getSelectedIndex()]\n$34 ==> \"Chicago\"\n```", "```java\nimport javax.swing.*;\n\npublic class HelloJavaAgain {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello, Java!\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(300, 150);\n\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    frame.add(label);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\n    JLabel label = new JLabel(\"Hello, Java!\", JLabel.CENTER);\n    frame.getContentPane().add(label);\n```", "```java\njshell> Widget w = new Widget()\nw ==> ch10.Widget[frame0,0,23,300x300, ... kingEnabled=true]\n\njshell> JLabel emailLabel = new JLabel(\"Email:\")\nemailLabel ==> javax.swing.JLabel[,0,0,0x0 ... ition=CENTER]\n\njshell> JTextField emailField = new JTextField(12)\nemailField ==> javax.swing.JTextField[,0,0,0x0, ... LEADING]\n\njshell> JButton submitButton = new JButton(\"Submit\")\nsubmitButton ==> javax.swing.JButton[,0,0,0x0, ... ble=true]\n\njshell> w.add(emailLabel);\n$8 ==> javax.swing.JLabel[,0,0,0x0, ... ition=CENTER]\n// Left screenshot in image above\n\njshell> w.add(emailField)\n$9 ==> javax.swing.JTextField[,0,0,0x0, ... nment=LEADING]\n\njshell> w.add(submitButton)\n$10 ==> javax.swing.JButton[,0,0,0x0, ... pable=true]\n// Now we have the middle screenshot\n\njshell> w.remove(emailLabel)\n// And finally the right screenshot\n```", "```java\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class BorderLayoutDemo {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"BorderLayout Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(400, 200);\n\n    JLabel northLabel = new JLabel(\"Top - North\", JLabel.CENTER);\n    JLabel southLabel = new JLabel(\"Bottom - South\", JLabel.CENTER);\n    JLabel eastLabel = new JLabel(\"Right - East\", JLabel.CENTER);\n    JLabel westLabel = new JLabel(\"Left - West\", JLabel.CENTER);\n    JLabel centerLabel = new JLabel(\"Center (everything else)\",\n        JLabel.CENTER);\n\n    // Color the labels so we can see their boundaries better\n    northLabel.setOpaque(true);\n    northLabel.setBackground(Color.GREEN);\n    southLabel.setOpaque(true);\n    southLabel.setBackground(Color.GREEN);\n    eastLabel.setOpaque(true);\n    eastLabel.setBackground(Color.RED);\n    westLabel.setOpaque(true);\n    westLabel.setBackground(Color.RED);\n    centerLabel.setOpaque(true);\n    centerLabel.setBackground(Color.YELLOW);\n\n    frame.add(northLabel, BorderLayout.NORTH);\n    frame.add(southLabel, BorderLayout.SOUTH);\n    frame.add(eastLabel, BorderLayout.EAST);\n    frame.add(westLabel, BorderLayout.WEST);\n    frame.add(centerLabel, BorderLayout.CENTER);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\npublic class NestedPanelDemo {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Nested Panel Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(400, 200);\n\n    // Create the text area and add it to the center\n    JTextArea messageArea = new JTextArea();\n    frame.add(messageArea, BorderLayout.CENTER);\n\n    // Create the button container\n    JPanel buttonPanel = new JPanel(new FlowLayout());\n\n    // Create the buttons\n    JButton sendButton = new JButton(\"Send\");\n    JButton saveButton = new JButton(\"Save\");\n    JButton resetButton = new JButton(\"Reset\");\n    JButton cancelButton = new JButton(\"Cancel\");\n\n    // Add the buttons to their container\n    buttonPanel.add(sendButton);\n    buttonPanel.add(saveButton);\n    buttonPanel.add(resetButton);\n    buttonPanel.add(cancelButton);\n\n    // And finally, add that container to the bottom of the app\n    frame.add(buttonPanel, BorderLayout.SOUTH);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\n    // Create the button container. Old version:\n    // JPanel buttonPanel = new JPanel(new FlowLayout());\n    JPanel buttonPanel = new JPanel(new GridLayout(1,0));\n```", "```java\npublic class PhoneGridDemo {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Nested Panel Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(200, 300);\n\n    // Create the phone pad container\n    JPanel phonePad = new JPanel(new GridLayout(4,3));\n\n    // Create and add the 12 buttons, top-left to bottom-right\n    phonePad.add(new JButton(\"1\"));\n    phonePad.add(new JButton(\"2\"));\n    phonePad.add(new JButton(\"3\"));\n\n    phonePad.add(new JButton(\"4\"));\n    phonePad.add(new JButton(\"5\"));\n    phonePad.add(new JButton(\"6\"));\n\n    phonePad.add(new JButton(\"7\"));\n    phonePad.add(new JButton(\"8\"));\n    phonePad.add(new JButton(\"9\"));\n\n    phonePad.add(new JButton(\"*\"));\n    phonePad.add(new JButton(\"0\"));\n    phonePad.add(new JButton(\"#\"));\n\n    // And finally, add the pad to the center of the app\n    frame.add(phonePad, BorderLayout.CENTER);\n\n    frame.setVisible(true);\n  }\n}\n```", "```java\n    public static final int SCORE_HEIGHT = 30;\n    public static final int CONTROL_WIDTH = 300;\n    public static final int CONTROL_HEIGHT = 40;\n    public static final int FIELD_WIDTH = 3 * CONTROL_WIDTH;\n    public static final int FIELD_HEIGHT = 2 * CONTROL_WIDTH;\n    public static final float FORCE_SCALE = 0.7f;\n\n    GridBagLayout gameLayout = new GridBagLayout();\n\n    gameLayout.columnWidths = new int[]\n        { CONTROL_WIDTH, CONTROL_WIDTH, CONTROL_WIDTH };\n    gameLayout.rowHeights = new int[]\n        { SCORE_HEIGHT, FIELD_HEIGHT, CONTROL_HEIGHT, CONTROL_HEIGHT };\n\n    JPanel gamePane = new JPanel(gameLayout);\n```", "```java\n    GridBagConstraints gameConstraints = new GridBagConstraints();\n\n    gameConstraints.fill = GridBagConstraints.BOTH;\n    gameConstraints.gridy = 1;\n    gameConstraints.gridx = 0;\n    gameConstraints.gridheight = 1;\n    gameConstraints.gridwidth = 3;\n\n    Field field = new Field();\n    gamePane.add(field, gameConstraints);\n```", "```java\n    gameConstraints.fill = GridBagConstraints.BOTH;\n    gameConstraints.gridy = 0;\n    gameConstraints.gridx = 0;\n    gameConstraints.gridheight = 1;\n    gameConstraints.gridwidth = 1;\n\n    JLabel scoreLabel = new JLabel(\" Player 1: 0\");\n    gamePane.add(scoreLabel, gameConstraints);\n```", "```java\n    private GridBagConstraints buildConstraints(int row, int col,\n        int rowspan, int colspan)\n    {\n      // Use our global reference to the gameConstraints object\n      gameConstraints.fill = GridBagConstraints.BOTH;\n      gameConstraints.gridy = row;\n      gameConstraints.gridx = col;\n      gameConstraints.gridheight = rowspan;\n      gameConstraints.gridwidth = colspan;\n      return gameConstraints;\n    }\n```", "```java\n    GridBagConstraints gameConstraints = new GridBagConstraints();\n\n    JLabel scoreLabel = new JLabel(\" Player 1: 0\");\n    Field field = new Field();\n    gamePane.add(scoreLabel, buildConstraints(0,0,1,1));\n    gamePane.add(field, buildConstraints(1,0,1,3));\n```", "```java\n    JLabel tossButton = new JButton(\"Toss\");\n    gamePane.add(tossButton, buildConstraints(2,2,2,1));\n```", "```java\n// filename: ch12/examples/HelloMouse.java\npackage ch10.examples;\n\nimport java.awt.*;\nimport javax.swing.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\n\npublic class HelloMouse extends JFrame implements MouseListener {![1](assets/1.png)\n  JLabel label;\n\n  public HelloMouse() {\n    super(\"MouseEvent Demo\");\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    // remove the layout manager\n    setLayout(null);\n    setSize(300, 100);\n\n    label = new JLabel(\"Hello, Mouse!\", JLabel.CENTER);\n    label.setOpaque(true);\n    label.setBackground(Color.YELLOW);\n    label.setSize(100,20);\n    label.setLocation(100,100);\n    add(label);\n\n    getContentPane().addMouseListener(this); ![4](assets/4.png)\n  }\n\n  public void mouseClicked(MouseEvent e) { ![2](assets/2.png)\n    label.setLocation(e.getX(), e.getY());\n  }\n\n  public void mousePressed(MouseEvent e) { } ![3](assets/3.png)\n  public void mouseReleased(MouseEvent e) { }\n  public void mouseEntered(MouseEvent e) { }\n  public void mouseExited(MouseEvent e) { }\n\n  public static void main(String[] args) {\n    HelloMouse frame = new HelloMouse();\n    frame.setVisible(true);\n  }\n}\n```", "```java\n// filename: ch12/examples/HelloMouseHelper.java\npackage ch12.examples;\n\nimport java.awt.*;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseAdapter;\nimport javax.swing.*;\n\npublic class HelloMouseHelper {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"MouseEvent Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setLayout(null);\n    frame.setSize(300, 300);\n\n    JLabel label = new JLabel(\"Hello, Mouse!\", JLabel.CENTER);\n    label.setOpaque(true);\n    label.setBackground(Color.YELLOW);\n    label.setSize(100,20);\n    label.setLocation(100,100);\n    frame.add(label);\n\n    LabelMover mover = new LabelMover(label);\n    frame.getContentPane().addMouseListener(mover);\n    frame.setVisible(true);\n  }\n}\n\n/**\n * Helper class to move a label to the position of a mouse click.\n * Recall from Chapter 5 that secondary classes included in the same\n * public class must not be public themselves. They can be protected,\n * file as private, or package private (with no qualifier).\n */\nclass LabelMover extends MouseAdapter {\n  JLabel labelToMove;\n\n  public LabelMover(JLabel label) {\n    labelToMove = label;\n  }\n\n  public void mouseClicked(MouseEvent e) {\n    labelToMove.setLocation(e.getX(), e.getY());\n  }\n}\n```", "```java\npackage ch12.examples;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class ActionDemo1 extends JFrame implements ActionListener {\n  int counterValue = 0;\n  JLabel counterLabel;\n\n  public ActionDemo1() {\n    super(\"ActionEvent Counter Demo\");\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setLayout(new FlowLayout());\n    setSize(300, 180);\n\n    counterLabel = new JLabel(\"Count: 0\", JLabel.CENTER);\n    add(counterLabel);\n\n    JButton incrementer = new JButton(\"Increment\");\n    incrementer.addActionListener(this);\n    add(incrementer);\n  }\n\n  public void actionPerformed(ActionEvent e) {\n    counterValue++;\n    counterLabel.setText(\"Count: \" + counterValue);\n  }\n\n  public static void main(String[] args) {\n    ActionDemo1 demo = new ActionDemo1();\n    demo.setVisible(true);\n  }\n}\n```", "```java\npublic class ActionDemo2 {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"ActionListener Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setLayout(new FlowLayout());\n    frame.setSize(300, 180);\n\n    JLabel label = new JLabel(\"Results go here\", JLabel.CENTER);\n    ActionCommandHelper helper = new ActionCommandHelper(label);\n\n    JButton simpleButton = new JButton(\"Button\");\n    simpleButton.addActionListener(helper);\n\n    JTextField simpleField = new JTextField(10);\n    simpleField.addActionListener(helper);\n\n    frame.add(simpleButton);\n    frame.add(simpleField);\n    frame.add(label);\n\n    frame.setVisible(true);\n  }\n}\n\n/**\n * Helper class to show the command property of any ActionEvent in a given label.\n */\nclass ActionCommandHelper implements ActionListener {\n  JLabel resultLabel;\n\n  public ActionCommandHelper(JLabel label) {\n    resultLabel = label;\n  }\n\n  public void actionPerformed(ActionEvent ae) {\n    resultLabel.setText(ae.getActionCommand());\n  }\n}\n```", "```java\n// file: ch12/examples/game/AppleToss.java\n    gamePane.add(buildAngleControl(), buildConstraints(2, 0, 1, 1));\n\n    // other setup stuff ...\n\n    private JSlider buildAngleControl() {\n      // Our aim can range from 0 to 180 degrees\n      JSlider slider = new JSlider(0,180);\n\n      // but trigonometric 0 is on the right side, not the left\n      slider.setInverted(true);\n\n      // Any time the slider value changes, update the player\n      slider.addChangeListener(new ChangeListener() {\n        public void stateChanged(ChangeEvent e) {\n          player1.setAimingAngle((float)slider.getValue());\n          field.repaint();\n        }\n      });\n      return slider;\n    }\n```", "```java\n    // And now, any time the slider value changes, we should update\n    slider.addChangeListener(e -> {\n      player1.setAimingAngle((float)slider.getValue());\n      field.repaint();\n    });\n```", "```java\npackage ch12.examples;\n\npublic class ProgressDemo {\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingUtilities 'invoke' Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setLayout(new FlowLayout());\n    frame.setSize(300, 180);\n\n    JLabel label = new JLabel(\"Download Progress Goes Here!\",\n        JLabel.CENTER);\n    Thread pretender = new Thread(new ProgressPretender(label));\n\n    JButton simpleButton = new JButton(\"Start\");\n    simpleButton.addActionListener(e -> {\n      simpleButton.setEnabled(false);\n      pretender.start();\n    });\n\n    JLabel checkLabel = new JLabel(\"Can you still type?\");\n    JTextField checkField = new JTextField(10);\n\n    frame.add(label);\n    frame.add(simpleButton);\n    frame.add(checkLabel);\n    frame.add(checkField);\n    frame.setVisible(true);\n  }\n}\n```", "```java\npackage ch12.examples;\n\nclass ProgressPretender implements Runnable {\n  JLabel label;\n  int progress;\n\n  public ProgressPretender(JLabel label) {\n    this.label = label;\n    progress = 0;\n  }\n\n  public void run() {\n    while (progress <= 100) {\n      SwingUtilities.invokeLater(\n        () -> label.setText(progress + \"%\");\n      );\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ie) {\n        System.err.println(\"Someone interrupted us. Skipping download.\");\n        break;\n      }\n      progress++;\n    }\n  }\n}\n```", "```java\n  public static final int STEP = 40;  // frame duration in milliseconds\n  Timer animationTimer;\n\n  // other member declarations ...\n\n  void startAnimation() {\n    if (animationTimer == null) {\n      animationTimer = new Timer(STEP, this);\n      animationTimer.setActionCommand(\"repaint\");\n      animationTimer.setRepeats(true);\n      animationTimer.start();\n    } else if (!animationTimer.isRunning()) {\n      animationTimer.restart();\n    }\n  }\n\n  // other methods ...\n\n  public void actionPerformed(ActionEvent event) {\n    if (animating && event.getActionCommand().equals(\"repaint\")) {\n      System.out.println(\"Timer stepping \" + apples.size() + \" apples\");\n      for (Apple a : apples) {\n        a.step();\n        detectCollisions(a);\n      }\n      repaint();\n      cullFallenApples();\n    }\n  }\n```", "```java\n  public void startTossFromPlayer(Physicist physicist) {\n    if (!animating) {\n      System.out.println(\"Starting animation!\");\n      animating = true;\n      startAnimation();\n    }\n    if (animating) {\n      // Check to make sure we have an apple to toss\n      if (physicist.aimingApple != null) {\n        Apple apple = physicist.takeApple();\n        apple.toss(physicist.aimingAngle, physicist.aimingForce);\n        apples.add(apple);\n        Timer appleLoader = new Timer(800, physicist);\n        appleLoader.setActionCommand(\"New Apple\");\n        appleLoader.setRepeats(false);\n        appleLoader.start();\n      }\n    }\n  }\n```", "```java\n// other imports ...\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class Physicist implements ActionListener {\n\n  // Current Physicist stuff ...\n\n  // New event handler for getting a new apple\n  public void actionPerformed(ActionEvent e) {\n    if (e.getActionCommand().equals(\"New Apple\")) {\n      getNewApple();\n      if (field != null) {\n        field.repaint();\n      }\n    }\n  }\n}\n```", "```java\npackage ch12.examples;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MenuDemo extends JFrame implements ActionListener {\n  JLabel resultsLabel;\n\n  public MenuDemo() {\n    super(\"JMenu Demo\");\n    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    setLayout(new FlowLayout());\n    setSize(300, 180);\n\n    resultsLabel = new JLabel(\"Click a menu item!\");\n    add(resultsLabel);\n\n    // Now let's create a couple menus and populate them\n    JMenu fileMenu = new JMenu(\"File\");\n    JMenuItem saveItem = new JMenuItem(\"Save\");\n    saveItem.addActionListener(this);\n    fileMenu.add(saveItem);\n    JMenuItem quitItem = new JMenuItem(\"Quit\");\n    quitItem.addActionListener(this);\n    fileMenu.add(quitItem);\n\n    JMenu editMenu = new JMenu(\"Edit\");\n    JMenuItem cutItem = new JMenuItem(\"Cut\");\n    cutItem.addActionListener(this);\n    editMenu.add(cutItem);\n    JMenuItem copyItem = new JMenuItem(\"Copy\");\n    copyItem.addActionListener(this);\n    editMenu.add(copyItem);\n    JMenuItem pasteItem = new JMenuItem(\"Paste\");\n    pasteItem.addActionListener(this);\n    editMenu.add(pasteItem);\n\n    // And finally build a JMenuBar for the application\n    JMenuBar mainBar = new JMenuBar();\n    mainBar.add(fileMenu);\n    mainBar.add(editMenu);\n    setJMenuBar(mainBar);\n  }\n\n  public void actionPerformed(ActionEvent event) {\n    resultsLabel.setText(\"Menu selected: \" + event.getActionCommand());\n  }\n\n  public static void main(String args[]) {\n    MenuDemo demo = new MenuDemo();\n    demo.setVisible(true);\n  }\n}\n```", "```java\njshell> import javax.swing.*\n\njshell> JOptionPane.showMessageDialog(null, \"Hi there\", \"jshell Alert\",\n   ...>   JOptionPane.ERROR_MESSAGE)\n```", "```java\njshell> JOptionPane.showConfirmDialog(null, \"Are you sure?\")\n$18 ==> 0\n```", "```java\njshell> int answer = JOptionPane.showConfirmDialog(null,\n   ...>   \"Are you sure?\", \"Confirm\", JOptionPane.YES_NO_OPTION)\nanswer ==> 1\n\njshell> if (answer == JOptionPane.NO_OPTION)\n   ...>   System.out.println(\"They declined\")\nThey declined\n```", "```java\njshell> String pin = JOptionPane.showInputDialog(null, \"Please enter your PIN:\")\npin ==> \"1234\"\n```"]