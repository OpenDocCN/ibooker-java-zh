["```java\ntry {\n  URL aDoc =\n    new URL(\"http://foo.bar.com/documents/homepage.html\");\n  URL sameDoc =\n    new URL(\"http\",\"foo.bar.com\",\"/documents/homepage.html\");\n} catch (MalformedURLException e) {\n  // Something wrong with our URL\n}\n```", "```java\n  try {\n    URL url = new URL(\"http://some.server/index.html\");\n\n    BufferedReader bin = new BufferedReader(\n        new InputStreamReader(url.openStream()));\n\n    String line;\n    while ((line = bin.readLine()) != null) {\n      System.out.println(line);\n    }\n    bin.close();\n  } catch (Exception e) {\n    e.printStackTrace();\n  }\n```", "```java\n//file: ch13/examples/IconLabel.java\n    URL fav = new URL(\"https://www.oracle.com/.../favicon-192.png\");\n    ImageIcon image1 = new ImageIcon(fav);\n    JLabel iconLabel = new JLabel(image1);\n    // iconLabel can be placed in any panel, just as other labels\n```", "```java\nURLConnection connection = myURL.openConnection();\nString mimeType = connection.getContentType();\nInputStream in = connection.getInputStream();\n```", "```java\nURLConnection connection = myURL.openConnection();\nconnection.setConnectTimeout(10000); // milliseconds\nconnection.setReadTimeout(10000); // milliseconds\nInputStream in = connection.getInputStream();\n```", "```java\n  URL url = new URL(\n    // this string should be URL-encoded\n    \"http://myhost/cgi-bin/login.cgi?Name=Pat&Password=foobar\");\n\n  BufferedReader bin = new BufferedReader(\n    new InputStreamReader(url.openStream()));\n\n  String line;\n  while ((line = bin.readLine()) != null) {\n    System.out.println(line);\n  }\n```", "```java\n//file: ch13/examples/Post.java\n\n  protected void postData() {\n    StringBuilder sb = new StringBuilder();\n    String pw = new String(passwordField.getPassword());\n    try {\n      sb.append(URLEncoder.encode(\"Name\", \"UTF-8\") + \"=\");\n      sb.append(URLEncoder.encode(nameField.getText(), \"UTF-8\"));\n      sb.append(\"&\" + URLEncoder.encode(\"Password\", \"UTF-8\") + \"=\");\n      sb.append(URLEncoder.encode(pw, \"UTF-8\"));\n    } catch (UnsupportedEncodingException uee) {\n      System.out.println(uee);\n    }\n    String formData = sb.toString();\n\n    try {\n      URL url = new URL(postURL);\n      HttpURLConnection urlcon =\n          (HttpURLConnection) url.openConnection();\n      urlcon.setRequestMethod(\"POST\");\n      urlcon.setRequestProperty(\"Content-type\",\n          \"application/x-www-form-urlencoded\");\n      urlcon.setDoOutput(true);\n      urlcon.setDoInput(true);\n      PrintWriter pout = new PrintWriter(new OutputStreamWriter(\n          urlcon.getOutputStream(), \"8859_1\"), true);\n      pout.print(formData);\n      pout.flush();\n\n      // Did the post succeed?\n      if (urlcon.getResponseCode() == HttpURLConnection.HTTP_OK)\n        System.out.println(\"Posted ok!\");\n      else {\n        System.out.println(\"Bad post...\");\n        return;\n      }\n\n      // Hooray! Go ahead and read the results\n      InputStream is = urlcon.getInputStream();\n      InputStreamReader isr = new InputStreamReader(is);\n      BufferedReader br = new BufferedReader(isr);\n      String line;\n      while ((line = br.readLine()) != null) {\n        System.out.println(line);\n      }\n      br.close();\n\n    } catch (MalformedURLException e) {\n      System.out.println(e);     // bad postURL\n    } catch (IOException e2) {\n      System.out.println(e2);    // I/O error\n    }\n  }\n```", "```java\nhttps://postman-echo.com/post\n```", "```java\n    try {\n      Socket sock = new Socket(\"wupost.wustl.edu\", 25);\n    } catch (UnknownHostException e) {\n      System.out.println(\"Can't find host.\");\n    } catch (IOException e) {\n      System.out.println(\"Error connecting to host.\");\n    }\n```", "```java\n    Socket sock = new Socket(\"22.66.89.167\", 25);\n```", "```java\n    try {\n      Socket server = new Socket(\"foo.bar.com\", 1234);\n      InputStream in = server.getInputStream();\n      OutputStream out = server.getOutputStream();\n\n      // write a byte\n      out.write(42);\n\n      // write a newline or carriage return delimited string\n      PrintWriter pout = new PrintWriter(out, true);\n      pout.println(\"Hello!\");\n\n      // read a byte\n      byte back = (byte)in.read();\n\n      // read a newline or carriage return delimited string\n      BufferedReader bin =\n        new BufferedReader(new InputStreamReader(in) );\n      String response = bin.readLine();\n\n      server.close();\n    } catch (IOException e) {\n      System.err.println(e);\n    }\n```", "```java\n    // Meanwhile, on foo.bar.com...\n    try {\n      ServerSocket listener = new ServerSocket(1234);\n\n      while (!finished) {\n        Socket client = listener.accept();  // wait for connection\n\n        InputStream in = client.getInputStream();\n        OutputStream out = client.getOutputStream();\n\n        // read a byte\n        byte someByte = (byte)in.read();\n\n        // read a newline or carriage-return-delimited string\n        BufferedReader bin =\n          new BufferedReader(new InputStreamReader(in) );\n        String someString = bin.readLine();\n\n        // write a byte\n        out.write(43);\n\n        // say goodbye\n        PrintWriter pout = new PrintWriter(out, true);\n        pout.println(\"Goodbye!\");\n\n        client.close();\n      }\n\n      listener.close();\n    } catch (IOException e) {\n      System.err.println(e);\n    }\n```", "```java\n//file: ch13.examples.DateAtHost.java\npackage ch13.examples;\n\nimport java.net.Socket;\nimport java.io.*;\n\npublic class DateAtHost extends java.util.Date {\n  static int timePort = 37;\n  // seconds from start of 20th century to Jan 1, 1970 00:00 GMT\n  static final long offset = 2208988800L;\n\n  public DateAtHost(String host) throws IOException {\n    this(host, timePort);\n  }\n\n  public DateAtHost(String host, int port) throws IOException {\n    Socket server = new Socket(host, port);\n    DataInputStream din =\n      new DataInputStream(server.getInputStream());\n    int time = din.readInt();\n    server.close();\n\n    setTime((((1L << 32) + time) - offset) * 1000);\n  }\n}\n```", "```java\n    try {\n      Date d = new DateAtHost(\"time.nist.gov\");\n      System.out.println(\"The time over there is: \" + d);\n    }\n    catch (IOException e) {\n      System.err.println(\"Failed to get the time: \" + e);\n    }\n```", "```java\n    private void setupNetworkMenu() {\n      JMenu netMenu = new JMenu(\"Multiplayer\");\n      multiplayerHelper = new Multiplayer();\n\n        JMenuItem startItem = new JMenuItem(\"Start Server\");\n        startItem.addActionListener(\n            e -> multiplayerHelper.startServer());\n        netMenu.add(startItem);\n\n        JMenuItem joinItem = new JMenuItem(\"Join Game...\");\n        joinItem.addActionListener(e -> {\n          String otherServer = JOptionPane.showInputDialog(\n              AppleToss.this, \"Enter server name or address:\");\n          multiplayerHelper.joinGame(otherServer);\n        });\n        netMenu.add(joinItem);\n\n        JMenuItem quitItem = new JMenuItem(\"Disconnect\");\n        quitItem.addActionListener(\n            e -> multiplayerHelper.disconnect());\n        netMenu.add(quitItem);\n\n      // build a JMenuBar for the application\n      JMenuBar mainBar = new JMenuBar();\n      mainBar.add(netMenu);\n      setJMenuBar(mainBar);\n    }\n```", "```java\nclass Server implements Runnable {\n  ServerSocket listener;\n\n  public void run() {\n    Socket socket = null;\n    try {\n      listener = new ServerSocket(gamePort);\n      while (keepListening) {\n        socket = listener.accept();  // wait for connection\n\n        InputStream in = socket.getInputStream();\n        BufferedReader reader =\n            new BufferedReader(new InputStreamReader(in));\n        OutputStream out = socket.getOutputStream();\n        PrintWriter writer = new PrintWriter(out, true);\n\n        // ... game protocol logic starts here\n      }\n    } catch (IOException ioe) {\n      System.err.println(ioe);\n    }\n  }\n}\n```", "```java\n    // from Multiplayer\n    Server server;\n\n    // ...\n\n    public void startServer() {\n      keepListening = true;\n      // ... other game state can go here\n      server = new Server();\n      serverThread = new Thread(server);\n      serverThread.start();\n    }\n```", "```java\n// from Multiplayer\n  public void disconnect() {\n    disconnecting = true;\n    keepListening = false;\n    // Are we in the middle of a game and regularly checking these flags?\n    // If not, just close the server socket to interrupt the blocking\n    // accept() method.\n    if (server != null && keepPlaying == false) {\n      server.stopListening();\n    }\n\n    // ... clean up other game state here\n  }\n```", "```java\n  public void stopListening() {\n    if (listener != null && !listener.isClosed()) {\n      try {\n        listener.close();\n      } catch (IOException ioe) {\n        System.err.println(\"Error disconnecting listener: \" +\n            ioe.getMessage());\n      }\n    }\n  }\n```", "```java\nclass Client implements Runnable {\n  String gameHost;\n  boolean startNewGame;\n\n  public Client(String host) {\n    gameHost = host;\n    keepPlaying = false;\n    startNewGame = false;\n  }\n\n  public void run() {\n    try (Socket socket = new Socket(gameHost, gamePort)) {\n\n      InputStream in = socket.getInputStream();\n      BufferedReader reader =\n          new BufferedReader(new InputStreamReader(in) );\n      OutputStream out = socket.getOutputStream();\n      PrintWriter writer = new PrintWriter(out, true);\n\n      // ... game protocol logic starts here\n    } catch (IOException ioe) {\n      System.err.println(ioe);\n    }\n  }\n}\n```", "```java\n// from Multiplayer\n\n  public void joinGame(String otherServer) {\n    clientThread = new Thread(new Client(otherServer));\n    clientThread.start();\n  }\n```", "```java\n    // Create a new game with the client\n    writer.println(\"NEW_GAME\");\n\n    // If the client agrees, send over the location of the trees\n    String response = reader.readLine();\n    if (response != null && response.equals(\"OK\")) {\n      System.out.println(\"Starting a new game!\")\n      // ... write game data here\n    } else {\n      System.err.println(\"Unexpected start response: \" + response);\n      System.err.println(\"Skipping game and waiting again.\");\n      keepPlaying = false;\n    }\n```", "```java\n    // We expect to see the NEW_GAME command first\n    String response = reader.readLine();\n\n    // If we don't see that command, disconnect and return\n    if (response == null || !response.equals(\"NEW_GAME\")) {\n      System.err.println(\"Unexpected initial command: \" + response);\n      System.err.println(\"Disconnecting\");\n      writer.println(\"DISCONNECT\");\n      return;\n    }\n    // Yay! We're going to play a game. Send an acknowledgement\n    writer.println(\"OK\");\n```", "```java\n    gameField.setupNewGame();\n    for (Tree tree : gameField.trees) {\n      writer.println(\"TREE \" + tree.getPositionX() + \" \" +\n          tree.getPositionY());\n    }\n    // do the same for hedges or any other shared elements ...\n\n    // Attempt to start the game, but make sure the client is ready\n    writer.println(\"START\");\n    response = reader.readLine();\n    keepPlaying = response.equals(\"OK\");\n```", "```java\n    // And now gather the trees and set up our field\n    gameField.trees.clear();\n    response = reader.readLine();\n    while (response.startsWith(\"TREE\")) {\n      String[] parts = response.split(\" \");\n      int x = Integer.parseInt(parts[1]);\n      int y = Integer.parseInt(parts[2]);\n      Tree tree = new Tree();\n      tree.setPosition(x, y);\n      gameField.trees.add(tree);\n      response = reader.readLine();\n    }\n    // Do the same for hedges or other shared elements\n\n    // After all the obstacle lists have been sent, the server will issue\n    // a START command. Make sure we get that before playing\n    if (!response.equals(\"START\")) {\n      // Hmm, we should have ended the lists of obstacles with a START,\n      // but didn't. Bail out.\n      System.err.println(\"Unexpected start to the game: \" + response);\n      System.err.println(\"Disconnecting\");\n      writer.println(\"DISCONNECT\");\n      return;\n    } else {\n      // Yay again! We're starting a game. Acknowledge this command\n      writer.println(\"OK\");\n      keepPlaying = true;\n      gameField.repaint();\n    }\n```", "```java\n    while (keepPlaying) {\n      try {\n        if (gameField.trees.size() > 0) {\n          writer.print(\"SCORE \");\n        } else {\n          writer.print(\"END \");\n          keepPlaying = false;\n        }\n        writer.println(gameField.getScore(1));\n        response = reader.readLine();\n        if (response == null) {\n          keepPlaying = false;\n          disconnecting = true;\n        } else {\n          String parts[] = response.split(\" \");\n          switch (parts[0]) {\n            case \"END\":\n              keepPlaying = false;\n            case \"SCORE\":\n              gameField.setScore(2, parts[1]);\n              break;\n            case \"DISCONNECT\":\n              disconnecting = true;\n              keepPlaying = false;\n              break;\n            default:\n              System.err.println(\"Warning. Unexpected command: \" +\n                  parts[0] + \". Ignoring.\");\n          }\n        }\n        Thread.sleep(500);\n      } catch(InterruptedException e) {\n        System.err.println(\"Interrupted while polling. Ignoring.\");\n      }\n    }\n```", "```java\n    while (keepPlaying) {\n      response = reader.readLine();\n      String[] parts = response.split(\" \");\n      switch (parts[0]) {\n        case \"END\":\n          keepPlaying = false;\n        case \"SCORE\":\n          gameField.setScore(2, parts[1]);\n          break;\n        case \"DISCONNECT\":\n          disconnecting = true;\n          keepPlaying = false;\n          break;\n        default:\n          System.err.println(\"Unexpected game command: \" +\n          response + \". Ignoring.\");\n      }\n      if (disconnecting) {\n        // We're disconnecting or they are. Acknowledge and quit.\n        writer.println(\"DISCONNECT\");\n        return;\n      } else {\n        // If we're not disconnecting, reply with our current score\n        if (gameField.trees.size() > 0) {\n          writer.print(\"SCORE \");\n        } else {\n          keepPlaying = false;\n          writer.print(\"END \");\n        }\n        writer.println(gameField.getScore(1));\n      }\n    }\n```", "```java\n    // If we're not disconnecting, ask about playing again\n    if (!disconnecting) {\n      String message = gameField.getWinner() +\n          \" Would you like to ask them to play again?\";\n      int myPlayAgain = JOptionPane.showConfirmDialog(gameField,\n          message, \"Play Again?\", JOptionPane.YES_NO_OPTION);\n\n      if (myPlayAgain == JOptionPane.YES_OPTION) {\n        // If they haven't disconnected, ask to play again\n        writer.println(\"PLAY_AGAIN\");\n        String playAgain = reader.readLine();\n        if (playAgain != null) {\n          switch (playAgain) {\n            case \"YES\":\n              startNewGame = true;\n              break;\n            case \"DISCONNECT\":\n              keepPlaying = false;\n              startNewGame = false;\n              disconnecting = true;\n              break;\n            default:\n              System.err.println(\"Warning. Unexpected response: \"\n                  + playAgain + \". Not playing again.\");\n          }\n        }\n      }\n    }\n```", "```java\n    if (!disconnecting) {\n      // Check to see if they want to play again\n      response = reader.readLine();\n      if (response != null && response.equals(\"PLAY_AGAIN\")) {\n        // Do we want to play again?\n        String message = gameField.getWinner() +\n            \" Would you like to play again?\";\n        int myPlayAgain = JOptionPane.showConfirmDialog(gameField,\n            message, \"Play Again?\", JOptionPane.YES_NO_OPTION);\n        if (myPlayAgain == JOptionPane.YES_OPTION) {\n          writer.println(\"YES\");\n          startNewGame = true;\n        } else {\n          // Not playing again so disconnect.\n          disconnecting = true;\n          writer.println(\"DISCONNECT\");\n        }\n      }\n    }\n```"]