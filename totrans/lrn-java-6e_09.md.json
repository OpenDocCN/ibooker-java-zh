["```java\n  public interface Runnable {\n    abstract public void run();\n  }\n```", "```java\nclass Animator implements Runnable {\n  boolean animating = true;\n\n  public void run() {\n    while (animating) {\n      // move active apples one \"frame\"\n      // repaint the field\n      // pause\n      // ...\n    }\n  }\n}\n```", "```java\n    Animator myAnimator = new Animator();\n    Thread myThread = new Thread(myAnimator);\n    myThread.start();\n```", "```java\nclass Animator extends Thread {\n  boolean animating = true;\n\n  public void run() {\n    while (animating) {\n      // draw Frames\n      // do other stuff ...\n    }\n  }\n}\n```", "```java\n    Animator bouncy = new Animator();\n    bouncy.start();\n```", "```java\n    try {\n      // The current thread\n      Thread.sleep(1000);\n    } catch (InterruptedException e) {\n      // someone woke us up prematurely\n    }\n```", "```java\n// From the Field class...\n  protected void paintComponent(Graphics g) {\n    g.setColor(fieldColor);\n    g.fillRect(0,0, getWidth(), getHeight());\n    physicist.draw(g);\n    for (Tree t : trees) { t.draw(g); }\n    for (Hedge h : hedges) { h.draw(g); }\n    physicist.draw(g);\n    for (Apple a : apples) { a.draw(g); }\n  }\n\n// And from the Apple class...\n  public void draw(Graphics g) {\n    // Make sure our apple will be red, then paint it!\n    g.setColor(Color.RED);\n    g.fillOval(x, y, scaledLength, scaledLength);\n  }\n```", "```java\n// File: ch09/examples/game/Apple.java\n\n  // Parameters provided by the physicist\n  public void toss(float angle, float velocity) {\n    lastStep = System.currentTimeMillis();\n    double radians = angle / 180 * Math.PI;\n    velocityX = (float)(velocity * Math.cos(radians) / mass);\n    // Start negative since \"up\" means smaller values of y\n    velocityY = (float)(-velocity * Math.sin(radians) / mass);\n  }\n\n  public void step() {\n    // Make sure the apple is still moving\n    // using our lastStep tracker as a sentinel\n    if (lastStep > 0) {\n      // Apply the law of gravity to the apple's vertical position\n      long now = System.currentTimeMillis();\n      float slice = (now - lastStep) / 1000.0f;\n      velocityY = velocityY + (slice * Field.GRAVITY);\n      int newX = (int)(centerX + velocityX);\n      int newY = (int)(centerY + velocityY);\n      setPosition(newX, newY);\n    }\n  }\n```", "```java\n// File: ch09/examples/game/Field.java\n\n// duration of an animation frame in milliseconds\npublic static final int STEP = 40;\n\n// ...\n// A simple inner class with our run() method\nclass Animator implements Runnable {\n  public void run() {\n    // \"animating\" is a global variable that allows us\n    // to stop animating and conserve resources\n    // if there are no active apples to move\n    while (animating) {\n      System.out.println(\"Stepping \" + apples.size() +\n          \" apples\");\n      for (Apple a : apples) {\n        a.step();\n      }\n      // Reach back to our outer class instance to repaint\n      Field.this.repaint();\n      // And get rid of any apples on the ground\n      cullFallenApples();\n      try {\n        Thread.sleep(STEP);\n      } catch (InterruptedException ie) {\n        System.err.println(\"Animation interrupted\");\n        animating = false;\n      }\n    }\n  }\n}\n```", "```java\n// File: ch09/examples/game/Field.java\n  Thread animationThread;\n\n  // other state and methods ...\n\n  void startAnimation() {\n    animationThread = new Thread(new Animator());\n    animationThread.start();\n  }\n```", "```java\nclass Devil extends Thread {\n  Devil() {\n    setDaemon(true);\n    start();\n  }\n  public void run() {\n    // perform some tasks\n  }\n}\n```", "```java\n% cd ch09/examples\n% mv VirtualDemo.java.preview VirtualDemo.java\n% cd ../..\n```", "```java\nC:\\> cd ch09\\examples\nC:\\> rename VirtualDemo.java.preview VirtualDemo.java\nC:\\> cd ..\\..\n```", "```java\n% javac --version\njavac 19.0.1\n\n% javac VirtualDemo.java\nVirtualDemo.java:4: error: startVirtualThread(Runnable)\n is a preview API and is disabled by default.\n    Thread thread = Thread.startVirtualThread(runnable);\n                          ^\n  (use --enable-preview to enable preview APIs)\n```", "```java\n% javac --enable-preview VirtualDemo.java\nerror: --enable-preview must be used with either -source or --release\n```", "```java\n% javac --version\njavac 19.0.1\n\n% javac --enable-preview --release 19 VirtualDemo.java\nNote: VirtualDemo.java uses preview features of Java SE 19.\nNote: Recompile with -Xlint:preview for details.\n```", "```java\nsrc$ javac --enable-preview --release 19 -Xlint:preview VirtualDemo.java\nVirtualDemo.java:4: warning: [preview] startVirtualThread(Runnable)\n is a preview API and may be removed in a future release.\n    Thread thread = Thread.startVirtualThread(runnable);\n                          ^\n1 warning\n```", "```java\n% java VirtualDemo\nError: LinkageError occurred while loading main class VirtualDemo\n        java.lang.UnsupportedClassVersionError: Preview features are not\n        enabled for VirtualDemo (class file version 63.65535).\n        Try running with '--enable-preview'\n```", "```java\n% java --enable-preview VirtualDemo\nHello virtual thread! ID: 20\n```", "```java\n% jshell --enable-preview\n```", "```java\npublic class VirtualDemo2 {\n  public static void main(String args[]) throws Exception {\n    Runnable runnable = new Runnable() {\n      public void run() {\n        Thread t = Thread.currentThread();\n        System.out.println(\"Hello thread! \" +\n            (t.isVirtual() ? \"virtual \" : \"platform \") +\n            \"ID: \" + t.threadId());\n      }\n    };\n    Thread thread1 = new Thread(runnable);\n    thread1.start();\n    Thread thread2 = Thread.startVirtualThread(runnable);\n    thread1.join();\n    thread2.join();\n  }\n}\n```", "```java\n$ javac --enable-preview --source 19 VirtualDemo2.java\nNote: VirtualDemo.java uses preview features of Java SE 19.\nNote: Recompile with -Xlint:preview for details.\n\n$ java --enable-preview VirtualDemo2\nHello thread! virtual ID: 21\nHello thread! platform ID: 20\n```", "```java\nclass SpeechSynthesizer {\n  synchronized void say(String words) {\n    // speak the supplied words\n  }\n}\n```", "```java\nclass SpreadSheet {\n  int cellA1, cellA2, cellA3;\n\n  synchronized int sumRow() {\n    return cellA1 + cellA2 + cellA3;\n  }\n\n  synchronized void setRow(int a1, int a2, int a3) {\n    cellA1 = a1;\n    cellA2 = a2;\n    cellA3 = a3;\n  }\n  // other spreadsheet stuff ...\n}\n```", "```java\n    synchronized (myObject) {\n      // Functionality that needs exclusive access to resources\n    }\n```", "```java\n  synchronized void myMethod () {\n    // method body\n  }\n```", "```java\n  void myMethod () {\n    synchronized (this) {\n      // method body\n    }\n  }\n```", "```java\npackage ch09.examples;\n\nimport java.util.LinkedList;\n\npublic class URLQueue {\n  LinkedList<String> urlQueue = new LinkedList<>();\n\n  public synchronized void addURL(String url) {\n    urlQueue.add(url);\n  }\n\n  public synchronized String getURL() {\n    if (!urlQueue.isEmpty()) {\n      return urlQueue.removeFirst();\n    }\n    return null;\n  }\n\n  public boolean isEmpty() {\n    return urlQueue.isEmpty();\n  }\n}\n```", "```java\n  public void run() {\n    for (int i = 1; i <= urlCount; i++) {\n      String url = \"https://some.url/at/path/\" + i;\n      queue.addURL(producerID + \" \" + url);\n      System.out.println(producerID + \" produced \" + url);\n      try {\n        Thread.sleep(delay.nextInt(500));\n      } catch (InterruptedException ie) {\n        System.err.println(\"Producer \" + producerID + \" interrupted. Quitting.\");\n        break;\n      }\n    }\n  }\n```", "```java\n  public void run() {\n    while (keepWorking || !queue.isEmpty()) {\n      String url = queue.getURL();\n      if (url != null) {\n        System.out.println(consumerID + \" consumed \" + url);\n      } else {\n        System.out.println(consumerID + \" skipped empty queue\");\n      }\n      try {\n        Thread.sleep(delay.nextInt(1000));\n      } catch (InterruptedException ie) {\n        System.err.println(\"Consumer \" + consumerID +\n            \" interrupted. Quitting.\");\n        break;\n      }\n    }\n  }\n```", "```java\npublic class URLDemo {\n  public static void main(String args[]) {\n    URLQueue queue = new URLQueue();\n    URLProducer p1 = new URLProducer(\"P1\", 3, queue);\n    URLProducer p2 = new URLProducer(\"P2\", 3, queue);\n    URLConsumer c1 = new URLConsumer(\"C1\", queue);\n    URLConsumer c2 = new URLConsumer(\"C2\", queue);\n    System.out.println(\"Starting...\");\n    Thread tp1 = new Thread(p1);\n    tp1.start();\n    Thread tp2 = new Thread(p2);\n    tp2.start();\n    Thread tc1 = new Thread(c1);\n    tc1.start();\n    Thread tc2 = new Thread(c2);\n    tc2.start();\n    try {\n      // Wait for the producers to finish creating urls\n      tp1.join();\n      tp2.join();\n    } catch (InterruptedException ie) {\n      System.err.println(\"Interrupted waiting for producers to finish\");\n    }\n    c1.setKeepWorking(false);\n    c2.setKeepWorking(false);\n    try {\n      // Now wait for the workers to clean out the queue\n      tc1.join();\n      tc2.join();\n    } catch (InterruptedException ie) {\n      System.err.println(\"Interrupted waiting for consumers to finish\");\n    }\n    System.out.println(\"Done\");\n  }\n}\n```", "```java\nStarting...\nC1 skipped empty queue\nC2 skipped empty queue\nP2 produced https://some.url/at/path/1\nP1 produced https://some.url/at/path/1\nP1 produced https://some.url/at/path/2\nP2 produced https://some.url/at/path/2\nC2 consumed P2 https://some.url/at/path/1\nP2 produced https://some.url/at/path/3\nP1 produced https://some.url/at/path/3\nC1 consumed P1 https://some.url/at/path/1\nC1 consumed P1 https://some.url/at/path/2\nC2 consumed P2 https://some.url/at/path/2\nC1 consumed P2 https://some.url/at/path/3\nC1 consumed P1 https://some.url/at/path/3\nDone\n```", "```java\n// file: URLDemo2.java\n    System.out.println(\"Starting virtual threads...\");\n    // Convert these two-step lines:\n    //Thread tp1 = new Thread(p1);\n    //tp1.start();\n\n    // To these simpler, create-and-start lines:\n    Thread vp1 = Thread.startVirtualThread(p1);\n    Thread vp2 = Thread.startVirtualThread(p2);\n    Thread vc1 = Thread.startVirtualThread(c1);\n    Thread vc2 = Thread.startVirtualThread(c2);\n```", "```java\n    Thread [] threads = new Thread [ 64 ]; // max threads to show\n    int num = Thread.enumerate(threads);\n    for(int i = 0; i < num; i++)\n       System.out.println(threads[i] +\":\"+ threads[i].getState());\n```", "```java\npublic class Thready {\n  public static void main(String args []) {\n    new Thread(new ShowThread(\"Foo\")).start();\n    new Thread(new ShowThread(\"Bar\")).start();\n  }\n\n  static class ShowThread implements Runnable {\n    String message;\n\n    ShowThread(String message) {\n      this.message = message;\n    }\n    public void run() {\n      while (true)\n        System.out.println(message);\n    }\n  }\n}\n```", "```java\nclass Thready2 {\n  public static void main(String args []) {\n    Thread foo = new ShowThread(\"Foo\");\n    foo.setPriority(Thread.MIN_PRIORITY);\n    Thread bar = new ShowThread(\"Bar\");\n    bar.setPriority(Thread.MAX_PRIORITY);\n\n    foo.start();\n    bar.start();\n  }\n}\n```", "```java\n    // Create and populate our shared queue object\n    URLQueue queue = new URLQueue();\n    for (int u = 1; u <= count; u++) {\n      queue.addURL(\"http://some.url/path/\" + u);\n    }\n\n    // Now the fun begins! Make one consumer for every URL\n    for (int c = 0; c < count; c++) {\n      URLConsumer3 consumer = new URLConsumer3(\"C\" + c, queue);\n      if (useVirtual) {\n        Thread.startVirtualThread(consumer);\n      } else {\n        new Thread(consumer).start();\n      }\n    }\n```", "```java\n// Directory: ch09/examples\n// in URLDemo4.java\n    ConcurrentLinkedQueue<String> queue =\n        new ConcurrentLinkedQueue<>();\n\n// in URLProducer4.java, just \"add\" instead of \"addURL\"\n    queue.add(producerID + \" \" + url);\n\n// in URLConsumer4.java, \"poll\" rather than \"getURL\"\n    String url = queue.poll();\n    // ...\n```", "```java\n  AtomicBoolean keepWorking;\n  //...\n\n  public void run() {\n    while (keepWorking.get() || !queue.isEmpty()) {\n      String url = queue.poll();\n      //...\n    }\n  }\n\n  public void setKeepWorking(boolean newState) {\n    keepWorking.set(newState);\n  }\n```"]