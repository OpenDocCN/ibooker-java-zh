- en: Appendix C. Examples Repository Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C. 示例仓库设置
- en: 'The [examples repository](https://github.com/bonigarcia/selenium-webdriver-java)
    is a vital ingredient of this book as it contains all the covered examples and
    the complete configuration of Maven and Gradle. In addition, this repo uses several
    services provided by GitHub, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例仓库](https://github.com/bonigarcia/selenium-webdriver-java) 是本书的重要组成部分，因为它包含了所有涵盖的示例以及
    Maven 和 Gradle 的完整配置。此外，此仓库使用 GitHub 提供的多项服务，如：'
- en: '[GitHub Pages](https://pages.github.com)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub Pages](https://pages.github.com)'
- en: 'A service that allows hosting public websites configured straight from a GitHub
    repository. I use a simple website linked to the examples repository to showcase
    web pages used as SUT in the Selenium WebDriver test examples: [*https://bonigarcia.dev/selenium-webdriver-java*](https://bonigarcia.dev/selenium-webdriver-java).
    As you can see, it contains different HTML pages using [Bootstrap](https://getbootstrap.com)
    as a CSS framework.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个允许从 GitHub 仓库直接配置公共网站的服务。我使用一个简单的网站链接到示例仓库，展示用作 Selenium WebDriver 测试示例中 SUT
    的网页：[*https://bonigarcia.dev/selenium-webdriver-java*](https://bonigarcia.dev/selenium-webdriver-java)。正如您所见，它包含了使用
    [Bootstrap](https://getbootstrap.com) 作为 CSS 框架的不同 HTML 页面。
- en: '[GitHub Actions](https://github.com/features/actions)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub Actions](https://github.com/features/actions)'
- en: A CI/CD build server for GitHub repositories. I use this service to build and
    test the whole repo with each new commit. You can see the details about the workflow
    configuration at the end of this section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 GitHub 仓库的 CI/CD 构建服务器。我使用此服务在每次新提交时构建和测试整个仓库。您可以在本节末尾看到有关工作流配置的详细信息。
- en: '[Dependabot](https://github.com/dependabot)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dependabot](https://github.com/dependabot)'
- en: A bot that automatically updates the project dependencies. When this bot detects
    a new version for any Maven and Gradle dependencies (see the following subsection
    for more details), it creates a pull request with the corresponding update.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自动更新项目依赖的机器人。当此机器人检测到任何 Maven 和 Gradle 依赖的新版本（有关更多详情，请参见下一小节）时，它将创建相应的拉取请求。
- en: In the rest of this appendix, you will find the configuration details for the
    examples repository. This configuration includes the Maven and Gradle dependencies
    declaration and other aspects, and it should be sufficient for standard projects
    using Selenium WebDriver. In addition, the final part of this appendix explains
    how to configure the logging libraries, Dependabot, and GitHub Actions (to build
    and test the project following a CI approach).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录的其余部分，您将找到示例仓库的配置详细信息。此配置包括 Maven 和 Gradle 依赖声明以及其他方面，并且对于使用 Selenium WebDriver
    的标准项目应该是足够的。此外，本附录的最后部分解释了如何配置日志库、Dependabot 和 GitHub Actions（以 CI 方法构建和测试项目）。
- en: Project Layout
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目布局
- en: '[Figure C-1](#examples-repo-layout) shows the schematic representation of the
    examples repository layout.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 C-1](#examples-repo-layout) 显示了示例仓库布局的示意图。'
- en: '![hosw ac01](assets/hosw_ac01.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![hosw ac01](assets/hosw_ac01.png)'
- en: Figure C-1\. Layout of the examples repository (hosted on GitHub)
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 C-1\. 示例仓库布局（托管在 GitHub 上）
- en: 'Since I am providing each example in four flavors (JUnit 4, JUnit 5, JUnit
    5 plus Selenium-Jupiter, and TestNG), the configuration in both Maven and Gradle
    is based on *multiprojects*. This way, the examples repository has four modules,
    one per testing framework: `selenium-webdriver-junit4`, `selenium-webdriver-junit5`,
    `selenium-webdriver-junit5-seljup`, and `selenium-webdriver-testng`. In Maven,
    the multiproject setup is in the `pom.xml` located in the root folder, and in
    the file `settings.gradle` in Gradle.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我为每个示例提供了四种风格（JUnit 4、JUnit 5、JUnit 5 加 Selenium-Jupiter 和 TestNG），因此 Maven
    和 Gradle 中的配置基于 *多项目*。这样，示例仓库就有四个模块，每个测试框架一个：`selenium-webdriver-junit4`、`selenium-webdriver-junit5`、`selenium-webdriver-junit5-seljup`
    和 `selenium-webdriver-testng`。在 Maven 中，多项目设置位于根文件夹中的 `pom.xml` 中，在 Gradle 中则位于
    `settings.gradle` 文件中。
- en: As you can see in [Figure C-1](#examples-repo-layout), each module has the same
    structure. You can find the test source code in `src/test/java` folder. I use
    Java packages to divide the examples per chapter (e.g., `io.github.bonigarcia.webdriver.jupiter.ch02.helloworld`).
    Then, each project needs its own Logback configuration file. I use the general
    configuration file (i.e., `logback.xml`) placed under the folder `src/main/resources`.
    I follow this convention since it is quite usual to use logging also for the application,
    and in case you plan to reuse this project structure, this is the standard approach.
    Finally, at the root of each subproject, you can find the specific configuration
    file for Maven (`pom.xml`) and Gradle (`build.gradle`). You can find the declaration
    for the dependencies in these files, as explained in the following section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在[图 C-1](#examples-repo-layout)中，每个模块都有相同的结构。你可以在`src/test/java`文件夹中找到测试源代码。我使用Java包将示例按章节分开（例如，`io.github.bonigarcia.webdriver.jupiter.ch02.helloworld`）。接下来，每个项目都需要自己的Logback配置文件。我使用通用配置文件（即`logback.xml`），放置在`src/main/resources`文件夹下。我遵循这种约定，因为通常也会将日志记录用于应用程序，并且如果你计划重用这个项目结构，这是标准做法。最后，在每个子项目的根目录下，你可以找到用于Maven（`pom.xml`）和Gradle（`build.gradle`）的特定配置文件。你可以在这些文件中找到依赖项的声明，如下一节所述。
- en: Maven
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven
- en: 'A core concept in Maven is the *build lifecycle*, the name given to the process
    of building and distributing a particular project. There are three standard build
    lifecycles in Maven: `default` (for project deployment), `clean` (for project
    cleaning), and `site` (for documentation). These build lifecycles have a list
    of *build phases*, wherein each phase represents a stage in the lifecycle. The
    primary phases of the `default` lifecycle are:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Maven中的核心概念之一是*构建生命周期*，这是指构建和分发特定项目的过程。在Maven中有三个标准的构建生命周期：`default`（用于项目部署），`clean`（用于项目清理）和`site`（用于文档）。这些构建生命周期包含一系列*构建阶段*，每个阶段代表生命周期中的一个阶段。`default`生命周期的主要阶段包括：
- en: '`validate`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate`'
- en: Assess the project is correct and all necessary information is available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 确保项目正确并且所有必要信息都可用。
- en: '`compile`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`compile`'
- en: Compile the source code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编译源代码。
- en: '`test`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`'
- en: Execute test using a unit testing framework.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单元测试框架执行测试。
- en: '`package`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`package`'
- en: Bundle the compiled code into a distributable format, such as a Java ARchive
    (JAR) file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译后的代码打包成可分发的格式，如Java ARchive（JAR）文件。
- en: '`verify`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`verify`'
- en: Execute further tests (typically integration or other high-level tests).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 执行进一步的测试（通常是集成或其他高级测试）。
- en: '`install`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`'
- en: Install the package into the local repository.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将包安装到本地仓库。
- en: '`deploy`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy`'
- en: Install the package into a remote repository or server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将包安装到远程仓库或服务器。
- en: 'We can use the shell to invoke Maven, using the command `mvn`. For instance,
    the following command invokes the `clean` lifecycle (i.e., clean the `target`
    folder and all its content) and then it invokes in cascade all the phases of the
    `default` lifecycle until `package` (i.e., `validate`, `compile`, `test`, and
    finally, `package`):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Shell来调用Maven，使用命令`mvn`。例如，以下命令调用`clean`生命周期（即清理`target`文件夹及其所有内容），然后按顺序调用`default`生命周期的所有阶段直到`package`（即`validate`，`compile`，`test`，最后是`package`）：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another core element in Maven is the concept of *plug-ins*. A plug-in is a
    built-in artifact that executes the phases mentioned above. In this book, we are
    particularly interested in testing. Therefore, we focus on the phases `test` and
    `verify` and their corresponding plug-ins: `maven-surefire-plugin` and `maven-failsafe-plugin`,
    respectively. [Table C-1](#mvn_plugins) summarizes the main differences between
    these two plug-ins.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Maven中的另一个核心元素是*插件*的概念。插件是一个内置的工件，用于执行上述阶段。在本书中，我们特别关注测试。因此，我们着重介绍`test`和`verify`阶段及其对应的插件：`maven-surefire-plugin`和`maven-failsafe-plugin`。[表
    C-1](#mvn_plugins)总结了这两个插件之间的主要差异。
- en: Table C-1\. Differences between the Surefire and Failsafe Maven plug-ins
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表 C-1\. Surefire和Failsafe Maven插件之间的差异
- en: '|  | `maven-surefire-plugin` | `maven-failsafe-plugin` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  | `maven-surefire-plugin` | `maven-failsafe-plugin` |'
- en: '| --- | --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Description | Maven plug-in to execute tests before packaging | Maven plug-in
    to execute tests after packaging |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 在打包前执行测试的Maven插件 | 在打包后执行测试的Maven插件 |'
- en: '| Classic use | Unit tests | Integration (and other high-level) tests |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 经典用法 | 单元测试 | 集成（和其他高级）测试 |'
- en: '| Basic command | `mvn test` | `mvn verify` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 基本命令 | `mvn test` | `mvn verify` |'
- en: '| Type | Default plug-in (i.e., we can use it without declaring it in the `pom.xml`)
    | Not default plug-in (i.e., we need to declare it in the `pom.xml` to use it)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 默认插件（即，我们可以在 `pom.xml` 中不声明而使用） | 非默认插件（即，我们需要在 `pom.xml` 中声明才能使用） |'
- en: '| Used version | Defined internally in Maven | Latest available version |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 使用的版本 | Maven 内部定义的版本 | 最新可用版本 |'
- en: '| Test name pattern | `**/Test*.java` `**/*Test.java`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| 测试名称模式 | `**/Test*.java` `**/*Test.java`'
- en: '`**/*Tests.java`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`**/*Tests.java`'
- en: '`**/*TestCase.java` | `**/IT*.java` `**/*IT.java`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`**/*TestCase.java` | `**/IT*.java` `**/*IT.java`'
- en: '`**/*ITCase.java` |'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`**/*ITCase.java` |'
- en: For simplicity, I use only `maven-surefire-plugin` for executing tests in the
    examples repository. Although these tests are not a unit (in fact, they are end-to-end),
    it is not a problem to run them with `maven-surefire-plugin` (i.e., after compilation
    and before packaging). [Table C-2](#mvn_test) summarizes the basic commands to
    run tests from the shell using this plug-in.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我在示例库中仅使用 `maven-surefire-plugin` 执行测试。尽管这些测试不是单元测试（事实上，它们是端到端测试），但使用
    `maven-surefire-plugin` 运行它们不成问题（即，在编译后和打包前）。[表 C-2](#mvn_test) 总结了使用此插件从 shell
    中运行测试的基本命令。
- en: Table C-2\. Basic commands for running tests with `maven-surefire-plugin`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表 C-2\. 使用 `maven-surefire-plugin` 运行测试的基本命令
- en: '| Command | Description |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `mvn test` | Run all tests in the project |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `mvn test` | 运行项目中的所有测试 |'
- en: '| `mvn test -Dtest=MyClass` | Run all tests in a single class |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `mvn test -Dtest=MyClass` | 运行单个类中的所有测试 |'
- en: '| `mvn test -Dtest=MyClass#myMethod` | Run a single test in a single class
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `mvn test -Dtest=MyClass#myMethod` | 运行单个类中的单个测试 |'
- en: Nevertheless, if you want to use `maven-failsafe-plugin` to execute tests, you
    need to use the setup shown in [Example C-1](#failsafe) in your `pom.xml` file.
    Finally, you can run the tests using the command `mvn verify` (i.e., run tests
    after packaging).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您想要使用 `maven-failsafe-plugin` 执行测试，您需要在 `pom.xml` 文件中使用 [示例 C-1](#failsafe)
    中展示的设置。最后，您可以使用命令 `mvn verify` 运行测试（即，在打包后运行测试）。
- en: Example C-1\. Required Maven configuration for using `maven-failsafe-plugin`
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-1\. 使用 `maven-failsafe-plugin` 执行测试所需的 Maven 配置
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Common Setup
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共设置
- en: '[Example C-2](#pom_common) contains the common parts of the Maven configuration
    in the examples repository.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 C-2](#pom_common) 包含示例库中 Maven 配置的公共部分。'
- en: Example C-2\. Common Maven dependencies in the examples repository
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-2\. 示例库中的常见 Maven 依赖项
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO1-1)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO1-1)'
- en: We use Java 8 in this project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中我们使用 Java 8。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO1-2)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO1-2)'
- en: We specify the common dependencies. On the one hand, we declare Selenium WebDriver,
    AssertJ, and WebDriverManager using the `test` scope. This way, we can use these
    dependencies only from the test logic (i.e., Java classes under the `src/test/java`
    folder). On the other hand, the scope of Simple Logging Facade for Java (SLF4J)
    and Logback is missing, and therefore Maven uses the default, which is `compile`.
    This means we can use these dependencies from both the application and the test
    logic. Finally, notice we use Maven properties to declare the dependency versions
    (e.g., `${selenium.version}`). You can find the precise version in the online
    repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了常见的依赖项。一方面，我们声明 Selenium WebDriver、AssertJ 和 WebDriverManager，并将其范围设置为
    `test`。这样，我们只能从测试逻辑中（即位于 `src/test/java` 文件夹下的 Java 类）使用这些依赖项。另一方面，缺少 Simple Logging
    Facade for Java (SLF4J) 和 Logback 的范围，默认情况下 Maven 使用 `compile`。这意味着我们可以从应用程序和测试逻辑中使用这些依赖项。最后，请注意我们使用
    Maven 属性来声明依赖项的版本（例如 `${selenium.version}`）。您可以在在线库中找到确切的版本。
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO1-3)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO1-3)'
- en: We need to declare a specific version of `maven-surefire-plugin`. As explained
    in [Table C-1](#mvn_plugins), the version used for this plug-in is defined internally
    by Maven. But to make the most of this plug-in, we need to specify a newer version.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要声明特定版本的 `maven-surefire-plugin`。如 [表 C-1](#mvn_plugins) 所述，此插件的版本由 Maven
    内部定义。但为了充分利用此插件，我们需要指定一个更新的版本。
- en: JUnit 4
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: 'In a Maven project using JUnit 4 as the unit testing framework, we also need
    to declare the following dependency:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个使用 JUnit 4 作为单元测试框架的 Maven 项目中，我们还需要声明以下依赖：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JUnit 5
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: 'Although JUnit 5 is a modular framework, we can declare a single dependency
    to use the Jupiter programming model in a Maven project. As you can see in the
    snippet below, this artifact is called `junit-jupiter`, and it transitively pulls
    the following JUnit 5 artifacts:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然JUnit 5是一个模块化框架，但我们可以在Maven项目中声明单个依赖项来使用Jupiter编程模型。如下片段所示，这个构件被称为`junit-jupiter`，并且它传递地拉取以下JUnit
    5的构件：
- en: '`junit-jupiter-api`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit-jupiter-api`'
- en: For developing tests
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 用于开发测试
- en: '`junit-jupiter-engine`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit-jupiter-engine`'
- en: For executing tests in the JUnit Platform
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在JUnit平台中执行测试
- en: '`junit-jupiter-params`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`junit-jupiter-params`'
- en: For developing parameterized tests (see [Chapter 8](ch08.html#ch08))
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用于开发参数化测试（参见[第8章](ch08.html#ch08)）
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Selenium-Jupiter
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: When using Jupiter in conjunction with Selenium-Jupiter, in addition to the
    previous artifacts (`junit-jupiter` and `maven-surefire-plugin`), we need to include
    the coordinates of Selenium-Jupiter (see the next code sample). In this case,
    we can remove the coordinates of WebDriverManager since Selenium-Jupiter transitively
    pulls it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当与Selenium-Jupiter一起使用Jupiter时，除了以前的构件（`junit-jupiter`和`maven-surefire-plugin`），我们还需要包含Selenium-Jupiter的坐标（请参见下一个代码示例）。在这种情况下，我们可以移除WebDriverManager的坐标，因为Selenium-Jupiter会传递地拉取它。
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: TestNG
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: 'Finally, the coordinates we need to include in our `pom.xml` to use TestNG
    are:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的`pom.xml`中包含TestNG所需的坐标是：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although not used in the examples repository, TestNG tests can also be executed
    on the JUnit Platform. If you want to enable this mode, you need to add the TestNG
    engine for the JUnit Platform to your project setup. You can see more information
    about that on the [TestNG engine page](https://github.com/junit-team/testng-engine).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在示例仓库中没有使用，但TestNG测试也可以在JUnit平台上执行。如果要启用此模式，需要在项目设置中添加JUnit平台的TestNG引擎。有关此信息，请参阅[TestNG引擎页面](https://github.com/junit-team/testng-engine)。
- en: Other Dependencies
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他依赖项
- en: This book explains other dependencies used in conjunction with Selenium WebDriver.
    [Table C-3](#other-dependencies) summarizes these dependencies and the chapter
    in which they are presented.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本书解释了与Selenium WebDriver结合使用的其他依赖项。[表C-3](#other-dependencies)总结了这些依赖项及其所在的章节。
- en: Table C-3\. Dependencies for third-party integration in the example repository
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表C-3\. 示例仓库中用于第三方集成的依赖项
- en: '| Dependency | Chapter | `groupId` | `artifactId` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Dependency | Chapter | `groupId` | `artifactId` |'
- en: '| --- | --- | --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| HtmlUnitDriver | [Chapter 1](ch01.html#ch01) | `org.seleniumhq.selenium`
    | `htmlunit-driver` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| HtmlUnitDriver | [第1章](ch01.html#ch01) | `org.seleniumhq.selenium` | `htmlunit-driver`
    |'
- en: '| Selenium Grid | [Chapter 6](ch06.html#ch06) | `org.seleniumhq.selenium` |
    `selenium-grid` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| Selenium Grid | [第6章](ch06.html#ch06) | `org.seleniumhq.selenium` | `selenium-grid`
    |'
- en: '| rerunner-jupiter | [Chapter 8](ch08.html#ch08) | `io.github.artsok` | `rerunner-jupiter`
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| rerunner-jupiter | [第8章](ch08.html#ch08) | `io.github.artsok` | `rerunner-jupiter`
    |'
- en: '| JUnit Platform Launcher | [Chapter 8](ch08.html#ch08) | `org.junit.platform`
    | `junit-platform-launcher` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| JUnit 平台启动器 | [第8章](ch08.html#ch08) | `org.junit.platform` | `junit-platform-launcher`
    |'
- en: '| Awaitility | [Chapter 9](ch09.html#ch09) | `org.awaitility` | `awaitility`
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| Awaitility | [第9章](ch09.html#ch09) | `org.awaitility` | `awaitility` |'
- en: '| BrowserMob | [Chapter 9](ch09.html#ch09) | `net.lightbody.bmp` | `browsermob-core`
    |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| BrowserMob | [第9章](ch09.html#ch09) | `net.lightbody.bmp` | `browsermob-core`
    |'
- en: '| OWASP ZAP Client API | [Chapter 9](ch09.html#ch09) | `org.zaproxy` | `zap-clientapi`
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| OWASP ZAP 客户端 API | [第9章](ch09.html#ch09) | `org.zaproxy` | `zap-clientapi`
    |'
- en: '| Axe Selenium Integration | [Chapter 9](ch09.html#ch09) | `com.deque.html.axe-core`
    | `selenium` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| Axe Selenium 集成 | [第9章](ch09.html#ch09) | `com.deque.html.axe-core` | `selenium`
    |'
- en: '| Selenide | [Chapter 9](ch09.html#ch09) | `com.codeborne` | `selenide` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| Selenide | [第9章](ch09.html#ch09) | `com.codeborne` | `selenide` |'
- en: '| JavaFaker | [Chapter 9](ch09.html#ch09) | `com.github.javafaker` | `javafaker`
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| JavaFaker | [第9章](ch09.html#ch09) | `com.github.javafaker` | `javafaker`
    |'
- en: '| Extent Reports | [Chapter 9](ch09.html#ch09) | `com.aventstack` | `extentreports`
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| Extent Reports | [第9章](ch09.html#ch09) | `com.aventstack` | `extentreports`
    |'
- en: '| Allure | [Chapter 9](ch09.html#ch09) | `io.qameta.allure` | `io.qameta.allure`
    `allure-junit5`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '| Allure | [第9章](ch09.html#ch09) | `io.qameta.allure` | `io.qameta.allure`
    `allure-junit5`'
- en: '`allure-testng` |'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`allure-testng` |'
- en: '| Cucumber Java | [Chapter 9](ch09.html#ch09) | `io.cucumber` | `cucumber-java`
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| Cucumber Java | [第9章](ch09.html#ch09) | `io.cucumber` | `cucumber-java` |'
- en: '| Cucumber JUnit 4, 5 or TestNG | [Chapter 9](ch09.html#ch09) | `io.cucumber`
    | `cucumber-junit` `cucumber-junit-platform-engine`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '| Cucumber JUnit 4, 5 或 TestNG | [第9章](ch09.html#ch09) | `io.cucumber` | `cucumber-junit`
    `cucumber-junit-platform-engine`'
- en: '`cucumber-testng` |'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`cucumber-testng` |'
- en: '| Spring-Boot Web | [Chapter 9](ch09.html#ch09) | `org.springframework.boot`
    | `spring-boot-starter-web` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| Spring-Boot Web | [第9章](ch09.html#ch09) | `org.springframework.boot` | `spring-boot-starter-web`
    |'
- en: '| Spring-Boot Test | [Chapter 9](ch09.html#ch09) | `org.springframework.boot`
    | `spring-boot-starter-test` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| Spring-Boot 测试 | [第9章](ch09.html#ch09) | `org.springframework.boot` | `spring-boot-starter-test`
    |'
- en: '| Appium Java client | [Chapter 10](ch10.html#ch10) | `io.appium` | `java-client`
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Appium Java 客户端 | [第10章](ch10.html#ch10) | `io.appium` | `java-client` |'
- en: '| REST Assured | [Chapter 10](ch10.html#ch10) | `io.rest-assured` | `rest-assured`
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| REST Assured | [第10章](ch10.html#ch10) | `io.rest-assured` | `rest-assured`
    |'
- en: In addition, the plug-ins statement needs some extra setup for using some of
    these third-party dependencies. The following snippet shows this new setup.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用一些这些第三方依赖项需要插件声明进行一些额外设置。以下代码片段显示了这个新的设置。
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO2-1)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO2-1)'
- en: This setup (from this line to `<!-- /Allure -->`) is required only if you plan
    to use Allure to generate a test report. If you do not use it, you can safely
    remove it from your project.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划使用 Allure 生成测试报告，则需要从这一行到 `<!-- /Allure -->` 进行设置。如果不使用它，可以安全地从项目中删除它。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO2-2)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO2-2)'
- en: 'The listener class changes for the different unit testing frameworks:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不同单元测试框架的监听器类有所不同：
- en: '`io.qameta.allure.junit4.AllureJunit4` for JUnit 4'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.qameta.allure.junit4.AllureJunit4` 适用于 JUnit 4'
- en: '`io.qameta.allure.junit5.AllureJunit5` for JUnit 5 (and JUnit 5 plus Selenium-Jupiter)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.qameta.allure.junit5.AllureJunit5` 适用于 JUnit 5（以及 JUnit 5 加 Selenium-Jupiter）'
- en: No listener is required for TestNG
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestNG 不需要监听器
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO2-3)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO2-3)'
- en: In addition to the listener, the Allure plug-in is required when using this
    reporter tool.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了监听器外，使用此报告工具还需要 Allure 插件。
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO2-4)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_examples_repository_setup_CO2-4)'
- en: The Spring-Boot plug-in is recommended when using Spring-Boot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Spring-Boot 时建议使用 Spring-Boot 插件。
- en: Gradle
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle
- en: 'Each Gradle project is composed of several *tasks*. Each task represents an
    atomic piece of work within the build. Typical examples of tasks in a Java project
    are:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Gradle 项目由多个 *任务* 组成。每个任务代表构建中的一个原子工作单元。在 Java 项目中，任务的典型示例包括：
- en: '`compileJava`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`compileJava`'
- en: Compiles the application logic (i.e., Java classes in the folder `src/main/java`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编译应用程序逻辑（即位于文件夹 `src/main/java` 的 Java 类）。
- en: '`processResources`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`processResources`'
- en: Copies the application resources (i.e., files in the folder `src/main/resources`)
    into the output folder (`build`).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 复制应用程序资源（即位于文件夹 `src/main/resources` 的文件）到输出文件夹（`build`）。
- en: '`compileTestJava`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`compileTestJava`'
- en: Compiles the test logic (i.e., Java classes in the folder `src/test/java`).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 编译测试逻辑（即位于文件夹 `src/test/java` 的 Java 类）。
- en: '`processTestResources`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`processTestResources`'
- en: Copies the test resources (i.e., files in the folder `src/test/resources`) into
    the output folder.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 复制测试资源（即位于文件夹 `src/test/resources` 的文件）到输出文件夹中。
- en: '`test`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`'
- en: Runs the tests using JUnit or TestNG. [Table C-4](#gradle_test) summarizes common
    commands to run Gradle tests in the shell.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JUnit 或 TestNG 运行测试。[表 C-4](#gradle_test) 总结了在 shell 中运行 Gradle 测试的常见命令。
- en: '`clean`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean`'
- en: Deletes the project output folder and its content.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 删除项目输出文件夹及其内容。
- en: Table C-4\. Basic commands for running tests with Gradle
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 表 C-4\. 使用 Gradle 运行测试的基本命令
- en: '| Command | Description |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `gradle test` | Run all tests in the project |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `gradle test` | 运行项目中的所有测试 |'
- en: '| `gradle test --rerun-tasks` | Run all tests in the project (even if everything
    is up-to-date) |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `gradle test --rerun-tasks` | 运行项目中的所有测试（即使一切都是最新的） |'
- en: '| `gradle test --tests MyClass` | Run all tests in a single class |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `gradle test --tests MyClass` | 运行单个类中的所有测试 |'
- en: '| `gradle test --tests MyClass.MyMethod` | Run a single test in a single class
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `gradle test --tests MyClass.MyMethod` | 运行单个类中的单个测试 |'
- en: '[Example C-3](#gradle_common) contains the common configuration for all the
    subprojects of the examples repository. I explain the relevant parts of this snippet
    next.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 C-3](#gradle_common) 包含示例存储库所有子项目的通用配置。接下来我将解释这个片段的相关部分。'
- en: Example C-3\. Common setup for Gradle projects
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-3\. Gradle 项目的通用设置
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO3-1)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO3-1)'
- en: Since we are implementing a Java project, we need to declare the [`java` plug-in](https://docs.gradle.org/current/userguide/java_plugin.html).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在实现一个 Java 项目，因此需要声明 [`java` 插件](https://docs.gradle.org/current/userguide/java_plugin.html)。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO3-2)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO3-2)'
- en: For compiling the tests, we use Java 8.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译测试时，我们使用 Java 8。
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO3-3)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO3-3)'
- en: Although not mandatory, we force writing the test logs in the standard output.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是强制的，但我们强制将测试日志写入标准输出。
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO3-4)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_examples_repository_setup_CO3-4)'
- en: This allows passing Java system properties in the command line (as explained
    in [Example B-1](app02.html#shell_props)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许在命令行中传递 Java 系统属性（如 [示例 B-1](app02.html#shell_props) 中所述）。
- en: '[![5](assets/5.png)](#co_examples_repository_setup_CO3-5)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_examples_repository_setup_CO3-5)'
- en: 'This clause allows using the property `excludeTests` at the command line to
    exclude some tests. For instance, the following command excludes those tests starting
    with the word Docker: `gradle test -PexcludeTests=**/Docker*`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此子句允许在命令行中使用属性 `excludeTests` 来排除一些测试。例如，以下命令排除以 Docker 开头的测试：`gradle test -PexcludeTests=**/Docker*`
- en: '[![6](assets/6.png)](#co_examples_repository_setup_CO3-6)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_examples_repository_setup_CO3-6)'
- en: These lines allow running tests in parallel using the command `gradle test ​-⁠Pparallel`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行允许使用命令 `gradle test -Pparallel` 来并行运行测试。
- en: '[![7](assets/7.png)](#co_examples_repository_setup_CO3-7)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_examples_repository_setup_CO3-7)'
- en: The following clauses gather the failed test in the property `failedTests` and
    display this information in the standard output at the end of the test suite execution.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下列子句将失败的测试汇总到 `failedTests` 属性，并在测试套件执行结束时将此信息显示在标准输出中。
- en: '[![8](assets/8.png)](#co_examples_repository_setup_CO3-8)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_examples_repository_setup_CO3-8)'
- en: We use [Maven Central](https://search.maven.org) to pull dependencies.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [Maven 中央仓库](https://search.maven.org) 来获取依赖项。
- en: '[![9](assets/9.png)](#co_examples_repository_setup_CO3-9)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_examples_repository_setup_CO3-9)'
- en: The common dependencies are Selenium WebDriver, AssertJ, WebDriverManager (for
    tests), and SLF4J and Logback (for the whole project).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 常用依赖项包括 Selenium WebDriver、AssertJ、WebDriverManager（用于测试）、SLF4J 和 Logback（整个项目）。
- en: JUnit 4
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 4
- en: 'The specific setup for JUnit 4 is as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 4 的具体设置如下：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO4-1)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO4-1)'
- en: We use an extra configuration to allow filtering tests using the class name
    (see [“Categorizing and Filtering Tests”](ch08.html#categorizing_and_filtering)).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用额外的配置来允许使用类名进行测试筛选（参见 [“分类和筛选测试”](ch08.html#categorizing_and_filtering)）。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO4-2)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO4-2)'
- en: We include the JUnit 4 dependency.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了 JUnit 4 依赖。
- en: JUnit 5
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit 5
- en: When using JUnit 5, we need to specify the `junit-jupiter` artifact (like in
    Maven, it depends on `junit-jupiter-api` `junit-jupiter-engine`, and `junit-jupiter-params`).
    In addition, we need to select the JUnit Platform for executing by using the clause
    `useJUnitPlatform()` in the `test` task setup.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 JUnit 5 时，我们需要指定 `junit-jupiter` 构件（就像 Maven 中依赖于 `junit-jupiter-api` `junit-jupiter-engine`
    和 `junit-jupiter-params`）。此外，我们需要使用 `test` 任务设置中的 `useJUnitPlatform()` 子句来选择使用
    JUnit 平台执行。
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Selenium-Jupiter
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Selenium-Jupiter
- en: If you use Selenium-Jupiter, in addition to the previous configuration for JUnit
    5, you need to include the following dependency. In this case, we can remove WebDriverManager
    since it is pulled transitively by Selenium-Jupiter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 Selenium-Jupiter，除了之前配置 JUnit 5 的设置外，还需要包含以下依赖项。在这种情况下，我们可以移除 WebDriverManager，因为它被
    Selenium-Jupiter 传递性地引入。
- en: '[PRE11]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: TestNG
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TestNG
- en: 'Finally, for using TestNG as the unit testing framework, we need to include
    the following setup:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将 TestNG 作为单元测试框架使用，我们需要包含以下设置：
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO5-1)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO5-1)'
- en: We include these statements to allow filtering by class name.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含这些语句以允许按类名进行筛选。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO5-2)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO5-2)'
- en: This property needs to be set to false to match the include and exclude patterns
    in the filtering process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性需要设置为 false，以匹配筛选过程中的包含和排除模式。
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO5-3)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO5-3)'
- en: We include the TestNG dependency.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了 TestNG 依赖。
- en: Other Dependencies
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他依赖项
- en: 'We need to include additional dependencies in the Gradle setup to use third-party
    libraries. [Table C-3](#other-dependencies) (in the previous section) summarizes
    the coordinates for these dependencies and the chapter in which they are presented.
    In addition, a couple of additional plug-ins are required in the Gradle setup
    (for using Allure and Spring-Boot, respectively). For using Allure, you also need
    to define an extra repository, as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 Gradle 设置中添加额外的依赖项，以使用第三方库。[表 C-3](#other-dependencies)（在前一节中）总结了这些依赖项的坐标及其所述章节。此外，还需要在
    Gradle 设置中使用一些额外的插件（用于使用 Allure 和 Spring-Boot，分别）。要使用 Allure，还需要定义一个额外的仓库，如下所示：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Logging
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录
- en: 'I use two logging libraries in the examples repository:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我在示例库中使用了两个日志库：
- en: '[Logback](https://logback.qos.ch)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[Logback](https://logback.qos.ch)'
- en: This is the actual logging framework (also called *logger*). Logback is used
    by many relevant Java projects, such as Spring Framework and Groovy, to name a
    couple.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实际的日志记录框架（也称为*记录器*）。Logback 被许多重要的 Java 项目使用，例如 Spring Framework 和 Groovy
    等。
- en: '[Simple Logging Facade for Java (SLF4J)](https://www.slf4j.org)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[Simple Logging Facade for Java (SLF4J)](https://www.slf4j.org)'
- en: This is a popular utility based on the facade design pattern that decouples
    the underlying logger. It supports the main logging frameworks (e.g., Logback,
    Log4j, or SimpleLogger, among others). As summarized in [Table C-5](#log_levels),
    SLF4J defines five logging levels depending on the severity of the message.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于外观设计模式的流行实用工具，用于解耦底层记录器。它支持主要的日志框架（例如 Logback、Log4j 或 SimpleLogger 等）。正如在[表
    C-5](#log_levels)中总结的那样，SLF4J 根据消息的严重性定义了五个日志级别。
- en: Table C-5\. Log levels in SLF4J
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 表 C-5. SLF4J 中的日志级别
- en: '| Log level | Description |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 日志级别 | 描述 |'
- en: '| --- | --- |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ERROR` | Used to report flaws in our application. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `ERROR` | 用于报告应用程序中的缺陷。 |'
- en: '| `WARN` | Something unexpected happened, but it does not affect the expected
    application behavior. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `WARN` | 发生了一些意外情况，但不影响预期的应用行为。 |'
- en: '| `INFO` | Informative messages, such as the application entered a given state,
    etc. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `INFO` | 提供信息的消息，例如应用程序进入了特定状态等。 |'
- en: '| `DEBUG` | Information for diagnosing and troubleshooting. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `DEBUG` | 用于诊断和故障排除的信息。 |'
- en: '| `TRACE` | Finest-grained information. We use this level only in exceptional
    cases where we need a complete understanding of what is happening in our application.
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `TRACE` | 最精细的信息。我们仅在需要完全了解应用程序发生情况的特殊情况下使用此级别。 |'
- en: As usual, to use these libraries, we need to resolve the corresponding dependencies
    (see next section for details in Maven and Gradle). Then, we need to configure
    Logback properly. For that, we need to include an XML configuration file in our
    project classpath. If we are configuring the logging for the whole project (i.e.,
    application plus test logic), the name of this file should be `logback.xml`. In
    this case, it should be available within the application resources, typically
    under the `src/main/resources` folder (see next section for further information
    about the project layout). If we are logging only for tests, the name of the configuration
    file is `logback-test.xml` and is stored within the tests resources (e.g., in
    `src/test/resources` folder).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，要使用这些库，我们需要解决相应的依赖关系（详见 Maven 和 Gradle 的下一节）。然后，我们需要正确配置 Logback。为此，我们需要在项目类路径中包含一个
    XML 配置文件。如果我们正在为整个项目配置日志记录（即应用程序加测试逻辑），则此文件的名称应为 `logback.xml`。在这种情况下，它应该在应用程序资源中可用，通常位于
    `src/main/resources` 文件夹下（有关项目布局的更多信息，请参见下一节）。如果我们仅用于测试日志记录，配置文件的名称为 `logback-test.xml`，存储在测试资源中（例如位于
    `src/test/resources` 文件夹下）。
- en: The syntax in both cases (`logback.xml` and `logback-test.xml`) is the same.
    [Example C-4](#logback) shows an example of a configuration file. This XML file
    sets the pattern for each logging line, composed by the timestamp, the thread
    name, the trace level, the source (package, class name, and code line), and the
    message. In this example, `INFO` is the default logging level. This way, every
    trace of this level or more severe ones (i.e., `WARN`, `ERROR`, and `FATAL`) is
    displayed, but not the following (i.e., `DEBUG` and `TRACE`). In addition, the
    traces from the package `io.github.bonigarcia` (used in the test examples, WebDriverManager,
    and Selenium-Jupiter) is `DEBUG`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下的语法（`logback.xml`和`logback-test.xml`）是相同的。[示例 C-4](#logback)展示了配置文件的示例。这个XML文件设置了每条日志行的模式，由时间戳、线程名称、跟踪级别、源（包、类名和代码行）和消息组成。在这个示例中，`INFO`是默认的日志级别。这样，每个这个级别或更严重的追踪（即`WARN`、`ERROR`和`FATAL`）都会显示，但不包括以下级别（即`DEBUG`和`TRACE`）。此外，来自包`io.github.bonigarcia`的追踪（用于测试示例、WebDriverManager和Selenium-Jupiter）为`DEBUG`。
- en: Example C-4\. Logback configuration file
  id: totrans-206
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: C-4\. Logback配置文件
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The final step is using a variable for logging in our Java classes. To that
    aim, we can use the code of [Example C-5](#logger). This snippet provides a handy
    way to get the current class using reflection through the method `lookup()`. Then,
    we declare the variable for logging (called `log` in this example) and using the
    SLF4J’s method `getLogger()`. Finally, we can use the variable `log` in any method
    of this class to log messages of different levels.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在我们的Java类中使用变量记录日志。为此，我们可以使用[示例 C-5](#logger)中的代码。这段代码通过`lookup()`方法提供了一种方便的方式来获取当前类的反射信息。然后，我们声明记录日志的变量（在这个示例中称为`log`），并使用SLF4J的`getLogger()`方法。最后，我们可以在这个类的任何方法中使用变量`log`记录不同级别的消息。
- en: Example C-5\. Example of logging messages
  id: totrans-209
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: C-5\. 记录消息的示例
- en: '[PRE15]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: GitHub Actions
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions
- en: I use GitHub Actions as the CI server for the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java/actions).
    This way, each time I commit a new change to the repo, GitHub Actions builds the
    project and executes all the tests. [Example C-6](#github_actions) shows the configuration
    to carry out this process.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用GitHub Actions作为[示例仓库](https://github.com/bonigarcia/selenium-webdriver-java/actions)的CI服务器。这样，每次我向仓库提交新更改时，GitHub
    Actions都会构建项目并执行所有测试。[示例 C-6](#github_actions)展示了执行此过程的配置。
- en: Example C-6\. GitHub Actions workflow configuration
  id: totrans-213
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: C-6\. GitHub Actions工作流配置
- en: '[PRE16]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO6-1)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO6-1)'
- en: The events that trigger the workflow are `push` (new commits in the repository)
    and `pull_request` (commits proposed by other developers).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 触发工作流的事件是`push`（仓库中的新提交）和`pull_request`（其他开发人员提出的提交）。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO6-2)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO6-2)'
- en: 'Two environment variables are required:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 需要两个环境变量：
- en: '`DISPLAY`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`DISPLAY`'
- en: The browsers controlled by Selenium WebDriver, by default, need to be executed
    in an operating system with a graphical user interface. On the other side, the
    Linux distributions available in GitHub Actions are *headless* (i.e., without
    a graphical user interface). Thus, we use Xvfb (X virtual framebuffer) to run
    WebDriver tests on these Linux distributions. Xvfb is an in-memory display server
    for Unix-like systems that requires the declaration of the environment variable
    `DISPLAY` with the screen number for the graphical system in Linux (X11).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，由Selenium WebDriver控制的浏览器需要在带有图形用户界面的操作系统中执行。另一方面，GitHub Actions中提供的Linux发行版是*无头*的（即没有图形用户界面）。因此，我们使用Xvfb（X虚拟帧缓冲）在这些Linux发行版上运行WebDriver测试。Xvfb是Unix-like系统的内存中显示服务器，需要在Linux（X11）中声明带有屏幕号的环境变量`DISPLAY`。
- en: '`WDM_GITHUBTOKEN`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`WDM_GITHUBTOKEN`'
- en: GitHub hosts some of the drivers required by Selenium WebDriver (e.g., geckodriver
    or operadriver). When external clients (like WebDriverManager) make many consecutive
    requests to GitHub, it eventually returns an HTTP error response (403, forbidden)
    due to its rate limit. WebDriverManager can make authenticated requests using
    a *personal access token* to avoid this problem. [Figure C-2](#github-pat) shows
    the permissions granted to this token in the examples repository. All in all,
    this environment variable exports the value of this token. I keep the actual value
    of this token as a GitHub repository secret.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 托管 Selenium WebDriver 需要的一些驱动程序（如 geckodriver 或 operadriver）。当外部客户端（如
    WebDriverManager）连续向 GitHub 发送多个请求时，GitHub 最终会返回 HTTP 错误响应（403，禁止），原因是其速率限制。WebDriverManager
    可以使用*个人访问令牌*进行身份验证请求，以避免此问题。[图 C-2](#github-pat)展示了授予此令牌的权限在示例仓库中。总之，此环境变量导出了此令牌的值。我将此令牌的实际值保存为
    GitHub 仓库的机密。
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO6-3)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO6-3)'
- en: 'For the sake of completeness, I execute the workflow in three different operating
    systems: Ubuntu (i.e., Linux), Windows, and macOS, using Java 8 in all of them.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我在三种不同的操作系统中执行工作流程：Ubuntu（即 Linux）、Windows 和 macOS，所有操作系统均使用 Java 8。
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO6-4)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_examples_repository_setup_CO6-4)'
- en: 'The workflow has five steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程包括五个步骤：
- en: Check out the repository.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出仓库。
- en: Set up Java 8 using [Eclipse Adoptium](https://adoptium.net).
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[Eclipse Adoptium](https://adoptium.net)设置 Java 8。
- en: Start X virtual framebuffer.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 X 虚拟帧缓冲区。
- en: Run all tests with Maven.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Maven 运行所有测试。
- en: Run all tests with Gradle.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Gradle 运行所有测试。
- en: '![hosw ac02](assets/hosw_ac02.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![hosw ac02](assets/hosw_ac02.png)'
- en: Figure C-2\. Permissions of the GitHub personal access token used in the examples
    repository
  id: totrans-233
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 C-2\. GitHub 仓库示例中使用的个人访问令牌的权限
- en: Dependabot
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dependabot
- en: To configure Dependabot, we need to include a file called `dependabot.yml` in
    the folder `.github` of our repository. [Example C-7](#dependabot) shows this
    content in the examples repository.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 Dependabot，我们需要在仓库的 `.github` 文件夹中包含名为 `dependabot.yml` 的文件。[示例 C-7](#dependabot)展示了示例仓库中的内容。
- en: Example C-7\. Dependabot configuration
  id: totrans-236
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 C-7\. Dependabot 配置
- en: '[PRE17]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO7-1)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_examples_repository_setup_CO7-1)'
- en: We check daily the updates for the Maven dependencies.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天检查 Maven 依赖项的更新情况。
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO7-2)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_examples_repository_setup_CO7-2)'
- en: We check daily the updates for the Gradle dependencies.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天检查 Gradle 依赖项的更新情况。
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO7-3)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_examples_repository_setup_CO7-3)'
- en: We check daily the updates for the GitHub Actions setup.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天检查 GitHub Actions 设置的更新情况。
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: All the examples presented in this book are available in a public [GitHub repository](https://github.com/bonigarcia/selenium-webdriver-java).
    This appendix showed the fine-grained configuration details for the build tools
    (Maven and Gradle), dependencies (Selenium WebDriver, JUnit, TestNG, Selenium-Jupiter,
    WebDriverManager, etc.), logging (Logback and SLF4J), and other services (GitHub
    Actions, GitHub Pages, and Dependabot).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中所有示例都可在公共[GitHub 仓库](https://github.com/bonigarcia/selenium-webdriver-java)中找到。本附录展示了构建工具（Maven
    和 Gradle）、依赖项（Selenium WebDriver、JUnit、TestNG、Selenium-Jupiter、WebDriverManager
    等）、日志记录（Logback 和 SLF4J）以及其他服务（GitHub Actions、GitHub Pages 和 Dependabot）的详细配置。
