- en: Appendix C. Examples Repository Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The [examples repository](https://github.com/bonigarcia/selenium-webdriver-java)
    is a vital ingredient of this book as it contains all the covered examples and
    the complete configuration of Maven and Gradle. In addition, this repo uses several
    services provided by GitHub, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub Pages](https://pages.github.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A service that allows hosting public websites configured straight from a GitHub
    repository. I use a simple website linked to the examples repository to showcase
    web pages used as SUT in the Selenium WebDriver test examples: [*https://bonigarcia.dev/selenium-webdriver-java*](https://bonigarcia.dev/selenium-webdriver-java).
    As you can see, it contains different HTML pages using [Bootstrap](https://getbootstrap.com)
    as a CSS framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub Actions](https://github.com/features/actions)'
  prefs: []
  type: TYPE_NORMAL
- en: A CI/CD build server for GitHub repositories. I use this service to build and
    test the whole repo with each new commit. You can see the details about the workflow
    configuration at the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Dependabot](https://github.com/dependabot)'
  prefs: []
  type: TYPE_NORMAL
- en: A bot that automatically updates the project dependencies. When this bot detects
    a new version for any Maven and Gradle dependencies (see the following subsection
    for more details), it creates a pull request with the corresponding update.
  prefs: []
  type: TYPE_NORMAL
- en: In the rest of this appendix, you will find the configuration details for the
    examples repository. This configuration includes the Maven and Gradle dependencies
    declaration and other aspects, and it should be sufficient for standard projects
    using Selenium WebDriver. In addition, the final part of this appendix explains
    how to configure the logging libraries, Dependabot, and GitHub Actions (to build
    and test the project following a CI approach).
  prefs: []
  type: TYPE_NORMAL
- en: Project Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Figure C-1](#examples-repo-layout) shows the schematic representation of the
    examples repository layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw ac01](assets/hosw_ac01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure C-1\. Layout of the examples repository (hosted on GitHub)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Since I am providing each example in four flavors (JUnit 4, JUnit 5, JUnit
    5 plus Selenium-Jupiter, and TestNG), the configuration in both Maven and Gradle
    is based on *multiprojects*. This way, the examples repository has four modules,
    one per testing framework: `selenium-webdriver-junit4`, `selenium-webdriver-junit5`,
    `selenium-webdriver-junit5-seljup`, and `selenium-webdriver-testng`. In Maven,
    the multiproject setup is in the `pom.xml` located in the root folder, and in
    the file `settings.gradle` in Gradle.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in [Figure C-1](#examples-repo-layout), each module has the same
    structure. You can find the test source code in `src/test/java` folder. I use
    Java packages to divide the examples per chapter (e.g., `io.github.bonigarcia.webdriver.jupiter.ch02.helloworld`).
    Then, each project needs its own Logback configuration file. I use the general
    configuration file (i.e., `logback.xml`) placed under the folder `src/main/resources`.
    I follow this convention since it is quite usual to use logging also for the application,
    and in case you plan to reuse this project structure, this is the standard approach.
    Finally, at the root of each subproject, you can find the specific configuration
    file for Maven (`pom.xml`) and Gradle (`build.gradle`). You can find the declaration
    for the dependencies in these files, as explained in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A core concept in Maven is the *build lifecycle*, the name given to the process
    of building and distributing a particular project. There are three standard build
    lifecycles in Maven: `default` (for project deployment), `clean` (for project
    cleaning), and `site` (for documentation). These build lifecycles have a list
    of *build phases*, wherein each phase represents a stage in the lifecycle. The
    primary phases of the `default` lifecycle are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`validate`'
  prefs: []
  type: TYPE_NORMAL
- en: Assess the project is correct and all necessary information is available.
  prefs: []
  type: TYPE_NORMAL
- en: '`compile`'
  prefs: []
  type: TYPE_NORMAL
- en: Compile the source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`test`'
  prefs: []
  type: TYPE_NORMAL
- en: Execute test using a unit testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: '`package`'
  prefs: []
  type: TYPE_NORMAL
- en: Bundle the compiled code into a distributable format, such as a Java ARchive
    (JAR) file.
  prefs: []
  type: TYPE_NORMAL
- en: '`verify`'
  prefs: []
  type: TYPE_NORMAL
- en: Execute further tests (typically integration or other high-level tests).
  prefs: []
  type: TYPE_NORMAL
- en: '`install`'
  prefs: []
  type: TYPE_NORMAL
- en: Install the package into the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: '`deploy`'
  prefs: []
  type: TYPE_NORMAL
- en: Install the package into a remote repository or server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the shell to invoke Maven, using the command `mvn`. For instance,
    the following command invokes the `clean` lifecycle (i.e., clean the `target`
    folder and all its content) and then it invokes in cascade all the phases of the
    `default` lifecycle until `package` (i.e., `validate`, `compile`, `test`, and
    finally, `package`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another core element in Maven is the concept of *plug-ins*. A plug-in is a
    built-in artifact that executes the phases mentioned above. In this book, we are
    particularly interested in testing. Therefore, we focus on the phases `test` and
    `verify` and their corresponding plug-ins: `maven-surefire-plugin` and `maven-failsafe-plugin`,
    respectively. [Table C-1](#mvn_plugins) summarizes the main differences between
    these two plug-ins.'
  prefs: []
  type: TYPE_NORMAL
- en: Table C-1\. Differences between the Surefire and Failsafe Maven plug-ins
  prefs: []
  type: TYPE_NORMAL
- en: '|  | `maven-surefire-plugin` | `maven-failsafe-plugin` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Description | Maven plug-in to execute tests before packaging | Maven plug-in
    to execute tests after packaging |'
  prefs: []
  type: TYPE_TB
- en: '| Classic use | Unit tests | Integration (and other high-level) tests |'
  prefs: []
  type: TYPE_TB
- en: '| Basic command | `mvn test` | `mvn verify` |'
  prefs: []
  type: TYPE_TB
- en: '| Type | Default plug-in (i.e., we can use it without declaring it in the `pom.xml`)
    | Not default plug-in (i.e., we need to declare it in the `pom.xml` to use it)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Used version | Defined internally in Maven | Latest available version |'
  prefs: []
  type: TYPE_TB
- en: '| Test name pattern | `**/Test*.java` `**/*Test.java`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**/*Tests.java`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**/*TestCase.java` | `**/IT*.java` `**/*IT.java`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**/*ITCase.java` |'
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, I use only `maven-surefire-plugin` for executing tests in the
    examples repository. Although these tests are not a unit (in fact, they are end-to-end),
    it is not a problem to run them with `maven-surefire-plugin` (i.e., after compilation
    and before packaging). [Table C-2](#mvn_test) summarizes the basic commands to
    run tests from the shell using this plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-2\. Basic commands for running tests with `maven-surefire-plugin`
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mvn test` | Run all tests in the project |'
  prefs: []
  type: TYPE_TB
- en: '| `mvn test -Dtest=MyClass` | Run all tests in a single class |'
  prefs: []
  type: TYPE_TB
- en: '| `mvn test -Dtest=MyClass#myMethod` | Run a single test in a single class
    |'
  prefs: []
  type: TYPE_TB
- en: Nevertheless, if you want to use `maven-failsafe-plugin` to execute tests, you
    need to use the setup shown in [Example C-1](#failsafe) in your `pom.xml` file.
    Finally, you can run the tests using the command `mvn verify` (i.e., run tests
    after packaging).
  prefs: []
  type: TYPE_NORMAL
- en: Example C-1\. Required Maven configuration for using `maven-failsafe-plugin`
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Common Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example C-2](#pom_common) contains the common parts of the Maven configuration
    in the examples repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Example C-2\. Common Maven dependencies in the examples repository
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use Java 8 in this project.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the common dependencies. On the one hand, we declare Selenium WebDriver,
    AssertJ, and WebDriverManager using the `test` scope. This way, we can use these
    dependencies only from the test logic (i.e., Java classes under the `src/test/java`
    folder). On the other hand, the scope of Simple Logging Facade for Java (SLF4J)
    and Logback is missing, and therefore Maven uses the default, which is `compile`.
    This means we can use these dependencies from both the application and the test
    logic. Finally, notice we use Maven properties to declare the dependency versions
    (e.g., `${selenium.version}`). You can find the precise version in the online
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to declare a specific version of `maven-surefire-plugin`. As explained
    in [Table C-1](#mvn_plugins), the version used for this plug-in is defined internally
    by Maven. But to make the most of this plug-in, we need to specify a newer version.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a Maven project using JUnit 4 as the unit testing framework, we also need
    to declare the following dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although JUnit 5 is a modular framework, we can declare a single dependency
    to use the Jupiter programming model in a Maven project. As you can see in the
    snippet below, this artifact is called `junit-jupiter`, and it transitively pulls
    the following JUnit 5 artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`junit-jupiter-api`'
  prefs: []
  type: TYPE_NORMAL
- en: For developing tests
  prefs: []
  type: TYPE_NORMAL
- en: '`junit-jupiter-engine`'
  prefs: []
  type: TYPE_NORMAL
- en: For executing tests in the JUnit Platform
  prefs: []
  type: TYPE_NORMAL
- en: '`junit-jupiter-params`'
  prefs: []
  type: TYPE_NORMAL
- en: For developing parameterized tests (see [Chapter 8](ch08.html#ch08))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Jupiter in conjunction with Selenium-Jupiter, in addition to the
    previous artifacts (`junit-jupiter` and `maven-surefire-plugin`), we need to include
    the coordinates of Selenium-Jupiter (see the next code sample). In this case,
    we can remove the coordinates of WebDriverManager since Selenium-Jupiter transitively
    pulls it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, the coordinates we need to include in our `pom.xml` to use TestNG
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Although not used in the examples repository, TestNG tests can also be executed
    on the JUnit Platform. If you want to enable this mode, you need to add the TestNG
    engine for the JUnit Platform to your project setup. You can see more information
    about that on the [TestNG engine page](https://github.com/junit-team/testng-engine).
  prefs: []
  type: TYPE_NORMAL
- en: Other Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book explains other dependencies used in conjunction with Selenium WebDriver.
    [Table C-3](#other-dependencies) summarizes these dependencies and the chapter
    in which they are presented.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-3\. Dependencies for third-party integration in the example repository
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Chapter | `groupId` | `artifactId` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| HtmlUnitDriver | [Chapter 1](ch01.html#ch01) | `org.seleniumhq.selenium`
    | `htmlunit-driver` |'
  prefs: []
  type: TYPE_TB
- en: '| Selenium Grid | [Chapter 6](ch06.html#ch06) | `org.seleniumhq.selenium` |
    `selenium-grid` |'
  prefs: []
  type: TYPE_TB
- en: '| rerunner-jupiter | [Chapter 8](ch08.html#ch08) | `io.github.artsok` | `rerunner-jupiter`
    |'
  prefs: []
  type: TYPE_TB
- en: '| JUnit Platform Launcher | [Chapter 8](ch08.html#ch08) | `org.junit.platform`
    | `junit-platform-launcher` |'
  prefs: []
  type: TYPE_TB
- en: '| Awaitility | [Chapter 9](ch09.html#ch09) | `org.awaitility` | `awaitility`
    |'
  prefs: []
  type: TYPE_TB
- en: '| BrowserMob | [Chapter 9](ch09.html#ch09) | `net.lightbody.bmp` | `browsermob-core`
    |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP ZAP Client API | [Chapter 9](ch09.html#ch09) | `org.zaproxy` | `zap-clientapi`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Axe Selenium Integration | [Chapter 9](ch09.html#ch09) | `com.deque.html.axe-core`
    | `selenium` |'
  prefs: []
  type: TYPE_TB
- en: '| Selenide | [Chapter 9](ch09.html#ch09) | `com.codeborne` | `selenide` |'
  prefs: []
  type: TYPE_TB
- en: '| JavaFaker | [Chapter 9](ch09.html#ch09) | `com.github.javafaker` | `javafaker`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Extent Reports | [Chapter 9](ch09.html#ch09) | `com.aventstack` | `extentreports`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Allure | [Chapter 9](ch09.html#ch09) | `io.qameta.allure` | `io.qameta.allure`
    `allure-junit5`'
  prefs: []
  type: TYPE_NORMAL
- en: '`allure-testng` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Cucumber Java | [Chapter 9](ch09.html#ch09) | `io.cucumber` | `cucumber-java`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber JUnit 4, 5 or TestNG | [Chapter 9](ch09.html#ch09) | `io.cucumber`
    | `cucumber-junit` `cucumber-junit-platform-engine`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cucumber-testng` |'
  prefs: []
  type: TYPE_NORMAL
- en: '| Spring-Boot Web | [Chapter 9](ch09.html#ch09) | `org.springframework.boot`
    | `spring-boot-starter-web` |'
  prefs: []
  type: TYPE_TB
- en: '| Spring-Boot Test | [Chapter 9](ch09.html#ch09) | `org.springframework.boot`
    | `spring-boot-starter-test` |'
  prefs: []
  type: TYPE_TB
- en: '| Appium Java client | [Chapter 10](ch10.html#ch10) | `io.appium` | `java-client`
    |'
  prefs: []
  type: TYPE_TB
- en: '| REST Assured | [Chapter 10](ch10.html#ch10) | `io.rest-assured` | `rest-assured`
    |'
  prefs: []
  type: TYPE_TB
- en: In addition, the plug-ins statement needs some extra setup for using some of
    these third-party dependencies. The following snippet shows this new setup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This setup (from this line to `<!-- /Allure -->`) is required only if you plan
    to use Allure to generate a test report. If you do not use it, you can safely
    remove it from your project.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The listener class changes for the different unit testing frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`io.qameta.allure.junit4.AllureJunit4` for JUnit 4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`io.qameta.allure.junit5.AllureJunit5` for JUnit 5 (and JUnit 5 plus Selenium-Jupiter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No listener is required for TestNG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the listener, the Allure plug-in is required when using this
    reporter tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring-Boot plug-in is recommended when using Spring-Boot.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each Gradle project is composed of several *tasks*. Each task represents an
    atomic piece of work within the build. Typical examples of tasks in a Java project
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compileJava`'
  prefs: []
  type: TYPE_NORMAL
- en: Compiles the application logic (i.e., Java classes in the folder `src/main/java`).
  prefs: []
  type: TYPE_NORMAL
- en: '`processResources`'
  prefs: []
  type: TYPE_NORMAL
- en: Copies the application resources (i.e., files in the folder `src/main/resources`)
    into the output folder (`build`).
  prefs: []
  type: TYPE_NORMAL
- en: '`compileTestJava`'
  prefs: []
  type: TYPE_NORMAL
- en: Compiles the test logic (i.e., Java classes in the folder `src/test/java`).
  prefs: []
  type: TYPE_NORMAL
- en: '`processTestResources`'
  prefs: []
  type: TYPE_NORMAL
- en: Copies the test resources (i.e., files in the folder `src/test/resources`) into
    the output folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`test`'
  prefs: []
  type: TYPE_NORMAL
- en: Runs the tests using JUnit or TestNG. [Table C-4](#gradle_test) summarizes common
    commands to run Gradle tests in the shell.
  prefs: []
  type: TYPE_NORMAL
- en: '`clean`'
  prefs: []
  type: TYPE_NORMAL
- en: Deletes the project output folder and its content.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-4\. Basic commands for running tests with Gradle
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `gradle test` | Run all tests in the project |'
  prefs: []
  type: TYPE_TB
- en: '| `gradle test --rerun-tasks` | Run all tests in the project (even if everything
    is up-to-date) |'
  prefs: []
  type: TYPE_TB
- en: '| `gradle test --tests MyClass` | Run all tests in a single class |'
  prefs: []
  type: TYPE_TB
- en: '| `gradle test --tests MyClass.MyMethod` | Run a single test in a single class
    |'
  prefs: []
  type: TYPE_TB
- en: '[Example C-3](#gradle_common) contains the common configuration for all the
    subprojects of the examples repository. I explain the relevant parts of this snippet
    next.'
  prefs: []
  type: TYPE_NORMAL
- en: Example C-3\. Common setup for Gradle projects
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are implementing a Java project, we need to declare the [`java` plug-in](https://docs.gradle.org/current/userguide/java_plugin.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: For compiling the tests, we use Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Although not mandatory, we force writing the test logs in the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: This allows passing Java system properties in the command line (as explained
    in [Example B-1](app02.html#shell_props)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_examples_repository_setup_CO3-5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This clause allows using the property `excludeTests` at the command line to
    exclude some tests. For instance, the following command excludes those tests starting
    with the word Docker: `gradle test -PexcludeTests=**/Docker*`'
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_examples_repository_setup_CO3-6)'
  prefs: []
  type: TYPE_NORMAL
- en: These lines allow running tests in parallel using the command `gradle test ​-⁠Pparallel`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_examples_repository_setup_CO3-7)'
  prefs: []
  type: TYPE_NORMAL
- en: The following clauses gather the failed test in the property `failedTests` and
    display this information in the standard output at the end of the test suite execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_examples_repository_setup_CO3-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We use [Maven Central](https://search.maven.org) to pull dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_examples_repository_setup_CO3-9)'
  prefs: []
  type: TYPE_NORMAL
- en: The common dependencies are Selenium WebDriver, AssertJ, WebDriverManager (for
    tests), and SLF4J and Logback (for the whole project).
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The specific setup for JUnit 4 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use an extra configuration to allow filtering tests using the class name
    (see [“Categorizing and Filtering Tests”](ch08.html#categorizing_and_filtering)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We include the JUnit 4 dependency.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using JUnit 5, we need to specify the `junit-jupiter` artifact (like in
    Maven, it depends on `junit-jupiter-api` `junit-jupiter-engine`, and `junit-jupiter-params`).
    In addition, we need to select the JUnit Platform for executing by using the clause
    `useJUnitPlatform()` in the `test` task setup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you use Selenium-Jupiter, in addition to the previous configuration for JUnit
    5, you need to include the following dependency. In this case, we can remove WebDriverManager
    since it is pulled transitively by Selenium-Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, for using TestNG as the unit testing framework, we need to include
    the following setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We include these statements to allow filtering by class name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This property needs to be set to false to match the include and exclude patterns
    in the filtering process.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We include the TestNG dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Other Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to include additional dependencies in the Gradle setup to use third-party
    libraries. [Table C-3](#other-dependencies) (in the previous section) summarizes
    the coordinates for these dependencies and the chapter in which they are presented.
    In addition, a couple of additional plug-ins are required in the Gradle setup
    (for using Allure and Spring-Boot, respectively). For using Allure, you also need
    to define an extra repository, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I use two logging libraries in the examples repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Logback](https://logback.qos.ch)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the actual logging framework (also called *logger*). Logback is used
    by many relevant Java projects, such as Spring Framework and Groovy, to name a
    couple.
  prefs: []
  type: TYPE_NORMAL
- en: '[Simple Logging Facade for Java (SLF4J)](https://www.slf4j.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a popular utility based on the facade design pattern that decouples
    the underlying logger. It supports the main logging frameworks (e.g., Logback,
    Log4j, or SimpleLogger, among others). As summarized in [Table C-5](#log_levels),
    SLF4J defines five logging levels depending on the severity of the message.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-5\. Log levels in SLF4J
  prefs: []
  type: TYPE_NORMAL
- en: '| Log level | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ERROR` | Used to report flaws in our application. |'
  prefs: []
  type: TYPE_TB
- en: '| `WARN` | Something unexpected happened, but it does not affect the expected
    application behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| `INFO` | Informative messages, such as the application entered a given state,
    etc. |'
  prefs: []
  type: TYPE_TB
- en: '| `DEBUG` | Information for diagnosing and troubleshooting. |'
  prefs: []
  type: TYPE_TB
- en: '| `TRACE` | Finest-grained information. We use this level only in exceptional
    cases where we need a complete understanding of what is happening in our application.
    |'
  prefs: []
  type: TYPE_TB
- en: As usual, to use these libraries, we need to resolve the corresponding dependencies
    (see next section for details in Maven and Gradle). Then, we need to configure
    Logback properly. For that, we need to include an XML configuration file in our
    project classpath. If we are configuring the logging for the whole project (i.e.,
    application plus test logic), the name of this file should be `logback.xml`. In
    this case, it should be available within the application resources, typically
    under the `src/main/resources` folder (see next section for further information
    about the project layout). If we are logging only for tests, the name of the configuration
    file is `logback-test.xml` and is stored within the tests resources (e.g., in
    `src/test/resources` folder).
  prefs: []
  type: TYPE_NORMAL
- en: The syntax in both cases (`logback.xml` and `logback-test.xml`) is the same.
    [Example C-4](#logback) shows an example of a configuration file. This XML file
    sets the pattern for each logging line, composed by the timestamp, the thread
    name, the trace level, the source (package, class name, and code line), and the
    message. In this example, `INFO` is the default logging level. This way, every
    trace of this level or more severe ones (i.e., `WARN`, `ERROR`, and `FATAL`) is
    displayed, but not the following (i.e., `DEBUG` and `TRACE`). In addition, the
    traces from the package `io.github.bonigarcia` (used in the test examples, WebDriverManager,
    and Selenium-Jupiter) is `DEBUG`.
  prefs: []
  type: TYPE_NORMAL
- en: Example C-4\. Logback configuration file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The final step is using a variable for logging in our Java classes. To that
    aim, we can use the code of [Example C-5](#logger). This snippet provides a handy
    way to get the current class using reflection through the method `lookup()`. Then,
    we declare the variable for logging (called `log` in this example) and using the
    SLF4J’s method `getLogger()`. Finally, we can use the variable `log` in any method
    of this class to log messages of different levels.
  prefs: []
  type: TYPE_NORMAL
- en: Example C-5\. Example of logging messages
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I use GitHub Actions as the CI server for the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java/actions).
    This way, each time I commit a new change to the repo, GitHub Actions builds the
    project and executes all the tests. [Example C-6](#github_actions) shows the configuration
    to carry out this process.
  prefs: []
  type: TYPE_NORMAL
- en: Example C-6\. GitHub Actions workflow configuration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The events that trigger the workflow are `push` (new commits in the repository)
    and `pull_request` (commits proposed by other developers).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Two environment variables are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DISPLAY`'
  prefs: []
  type: TYPE_NORMAL
- en: The browsers controlled by Selenium WebDriver, by default, need to be executed
    in an operating system with a graphical user interface. On the other side, the
    Linux distributions available in GitHub Actions are *headless* (i.e., without
    a graphical user interface). Thus, we use Xvfb (X virtual framebuffer) to run
    WebDriver tests on these Linux distributions. Xvfb is an in-memory display server
    for Unix-like systems that requires the declaration of the environment variable
    `DISPLAY` with the screen number for the graphical system in Linux (X11).
  prefs: []
  type: TYPE_NORMAL
- en: '`WDM_GITHUBTOKEN`'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub hosts some of the drivers required by Selenium WebDriver (e.g., geckodriver
    or operadriver). When external clients (like WebDriverManager) make many consecutive
    requests to GitHub, it eventually returns an HTTP error response (403, forbidden)
    due to its rate limit. WebDriverManager can make authenticated requests using
    a *personal access token* to avoid this problem. [Figure C-2](#github-pat) shows
    the permissions granted to this token in the examples repository. All in all,
    this environment variable exports the value of this token. I keep the actual value
    of this token as a GitHub repository secret.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO6-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of completeness, I execute the workflow in three different operating
    systems: Ubuntu (i.e., Linux), Windows, and macOS, using Java 8 in all of them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_examples_repository_setup_CO6-4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow has five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check out the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up Java 8 using [Eclipse Adoptium](https://adoptium.net).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start X virtual framebuffer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run all tests with Maven.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run all tests with Gradle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![hosw ac02](assets/hosw_ac02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure C-2\. Permissions of the GitHub personal access token used in the examples
    repository
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Dependabot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To configure Dependabot, we need to include a file called `dependabot.yml` in
    the folder `.github` of our repository. [Example C-7](#dependabot) shows this
    content in the examples repository.
  prefs: []
  type: TYPE_NORMAL
- en: Example C-7\. Dependabot configuration
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_examples_repository_setup_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We check daily the updates for the Maven dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_examples_repository_setup_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We check daily the updates for the Gradle dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_examples_repository_setup_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We check daily the updates for the GitHub Actions setup.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the examples presented in this book are available in a public [GitHub repository](https://github.com/bonigarcia/selenium-webdriver-java).
    This appendix showed the fine-grained configuration details for the build tools
    (Maven and Gradle), dependencies (Selenium WebDriver, JUnit, TestNG, Selenium-Jupiter,
    WebDriverManager, etc.), logging (Logback and SLF4J), and other services (GitHub
    Actions, GitHub Pages, and Dependabot).
  prefs: []
  type: TYPE_NORMAL
