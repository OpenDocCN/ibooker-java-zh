- en: Chapter 9\. Mobile Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 移动工作流
- en: Stephen Chin
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Stephen Chin
- en: Program testing can be a very effective way to show the presence of bugs, but
    is hopelessly inadequate for showing their absence.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 程序测试可以非常有效地显示存在的 bug，但却无法有效地证明其不存在。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Edsger Dijkstra
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Edsger Dijkstra
- en: Coverage of DevOps wouldn’t be complete without talking about mobile development
    and smartphones, which is the fastest growing segment of computer ownership. The
    past decade has seen a meteoric rise in smartphone usage, with billions of smartphones
    owned globally, as shown in [Figure 9-1](#smartphone_users).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的覆盖范围如果不包括移动开发和智能手机的话，就不完整了，后者是计算机拥有量增长最快的领域。过去十年间，智能手机的使用量飙升，全球拥有数以十亿计的智能手机，详见[图 9-1](#smartphone_users)。
- en: Smartphone ownership is expected to continue to rise since many large countries
    such as India and China have less than 70% ownership. With over 3.6 billion smartphones
    in the world today and an expected 4.3 billion smartphones by the year 2023, this
    is a market and user base that can’t be ignored.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于像印度和中国等大国的智能手机拥有率不到70%，预计智能手机的拥有量将继续上升。如今全球拥有36亿部智能手机，到2023年预计将达到43亿部，这是一个不容忽视的市场和用户群体。
- en: 'Smartphones also have another property that makes DevOps an essential practice:
    they fall into a class of internet-connected devices where continuous updates
    are expected by default, because they are targeted at consumers who are less technical
    and need to maintain their devices with minimal user involvement. This has been
    propelled by the app ecosystem built around smartphones, which makes downloading
    new software as well as receiving software updates easy and relatively low risk
    for end users.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机还具有另一个性质，使得 DevOps 成为一种必不可少的实践：它们属于一类需要连续更新的互联网连接设备，这是因为它们面向的是不那么技术熟练的消费者，需要以最少的用户参与来维护设备。这种趋势受到围绕智能手机建立的应用程序生态系统的推动，使得下载新软件以及接收软件更新对终端用户来说变得轻松且风险相对较低。
- en: '![Chart showing growth of smartphone ownership from 2012 through 2023](Images/dtjd_0901.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![显示从2012年到2023年全球智能手机拥有量增长情况的图表](Images/dtjd_0901.png)'
- en: Figure 9-1\. Number of smartphone users in the world from 2012 through 2023
    according to [Statista](https://oreil.ly/k8dk1) (prediction for 2023 marked with
    *)
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1 2012年至2023年间全球智能手机用户数，数据来自[Statista](https://oreil.ly/k8dk1)（2023年的预测标有*）
- en: 'You may want to update your app for several functional reasons:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多种功能原因，你可能希望更新你的应用程序：
- en: Adding new features for users
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为用户添加新功能
- en: Most apps are released quickly and with a minimum viable set of features to
    reduce time to market. This allows for frequent small feature updates to add useful
    functionality for end users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序快速发布，具备最小可行特性集，以缩短上市时间。这使得可以频繁发布小的功能更新，以增加终端用户的实用功能。
- en: Fixing bugs and improving the stability of your application
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 修复 bug 并提高应用程序的稳定性
- en: More mature applications have lots of updates that fix small bugs, stability
    issues, and user experience improvements. These changes are typically minor and
    can be released frequently.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 成熟的应用程序经常有很多修复小 bug、提高稳定性和改进用户体验的更新。这些改动通常较小，可以频繁发布。
- en: Patching security vulnerabilities or exploits
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 修补安全漏洞或利用
- en: Mobile applications typically have a large attack surface that includes the
    locally installed app, the backend that supplies data, and user authentication
    workflows for app and cloud service logins.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序通常具有广泛的攻击面，包括本地安装的应用程序、提供数据的后端以及用于应用程序和云服务登录的用户认证工作流程。
- en: 'In addition, a lot of app updates are driven by the need to increase market
    share and improve engagement with users. Some examples of updates that help to
    grow market share of your app include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多应用程序更新驱动于增加市场份额和改善与用户的互动。一些增加应用市场份额的更新的例子包括以下内容：
- en: Aligning with major platform releases
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与主要平台发布保持一致
- en: Whenever a major platform release occurs, apps that are certified against the
    new version and updated to take advantage of new functionality will see an increase
    in downloads.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每当主要平台发布新版本时，经过认证并更新以利用新功能的应用程序将看到下载量的增加。
- en: Raising visibility of your app in the store
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 提升应用在商店中的可见性
- en: App stores reward apps that frequently update by retaining user ratings between
    releases and highlighting new releases. The release notes also give you a chance
    to increase searchable content in the store. In contrast, if your app stagnates
    with no updates, it will naturally drop in search engine optimization.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 应用商店奖励那些频繁更新的应用程序，通过保留用户评分和突出新发布的方式。发布说明还为您在商店中增加可搜索内容提供了机会。相反，如果您的应用停滞不前没有更新，其在搜索引擎优化中的排名自然会下降。
- en: Reminding current users about your application to increase utilization
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒当前用户关于您的应用程序，以增加使用率
- en: Mobile platforms prompt users about updates to their existing apps and sometimes
    display badges or other reminders that will increase engagement.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台会提示用户更新其现有应用程序，并有时显示徽章或其他提醒，以增加用户参与度。
- en: The top applications in the app stores know the importance of continuous updates
    and update frequently. According to [Appbot](https://oreil.ly/CdW2A), of the 200
    top free apps, the median time since the last update was 7.8 days! With this pace
    of updates, if you do not use a continuous release process, you won’t be able
    to keep up.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应用商店中排名靠前的应用程序知道持续更新的重要性并经常更新。根据[Appbot](https://oreil.ly/CdW2A)的数据，排名前200的免费应用中，自上次更新以来的中位时间为7.8天！在这种更新速度下，如果您不使用持续发布流程，将无法跟上步伐。
- en: Java developers have great options for building mobile applications. These include
    mobile-focused web development with responsive web apps that adapt to constrained
    devices. Other options include dedicated mobile applications written in Java for
    Android devices. Finally, several cross-platform options for building applications
    work across Android and iOS devices, including Gluon Mobile and Electron.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Java开发者在构建移动应用程序时有很好的选择。这些选择包括专注于移动端的Web开发，使用响应式Web应用程序适配受限设备。其他选项包括专门为Android设备编写的Java移动应用程序。最后，还有几个跨平台的选项可用于在Android和iOS设备上构建应用程序，包括Gluon
    Mobile和Electron。
- en: This chapter focuses primarily on Android application development. However,
    all the same mobile DevOps techniques and considerations apply across these Java-based
    mobile platforms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要关注Android应用程序开发。然而，所有这些基于Java的移动DevOps技术和考虑因素同样适用于这些平台。
- en: Fast-Paced DevOps Workflows for Mobile
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动端快速DevOps工作流
- en: 'Here are some of the business benefits you will realize from investing in mobile
    DevOps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是投资于移动DevOps将实现的一些业务收益：
- en: Better customer experience
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的客户体验
- en: With the easy and accessible rating systems available in the app store, customer
    experience is king. By being able to respond quickly to customer issues and test
    on a large variety of devices, you will ensure an optimal customer experience.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用商店中易用且便捷的评分系统，客户体验至关重要。能够快速响应客户问题并在多种设备上进行测试，将确保最佳的客户体验。
- en: Faster innovation
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更快的创新
- en: By continuously releasing to production, you will be able to get new features
    and capabilities to your customers at a higher velocity than your competitors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过持续发布到生产环境，您将能够以比竞争对手更高的速度将新功能和能力提供给客户。
- en: Higher software quality
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更高的软件质量
- en: With the large number and high fragmentation of Android devices, thoroughly
    testing your application manually is impossible. But with an automated mobile
    testing strategy that hits the key device characteristics of your user base, you
    will reduce the number of issues reported by end users.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Android设备的数量众多且碎片化严重，通过手动彻底测试您的应用程序是不可能的。但通过自动化的移动测试策略，覆盖用户群体的关键设备特性，您将能够减少最终用户报告的问题数量。
- en: Reduced risk
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 降低风险
- en: The majority of executable code in modern applications has open source dependencies
    that expose you to known security vulnerabilities. By having a mobile DevOps pipeline
    that allows you to test new versions of dependencies and update frequently, you
    will be able to quickly fix any known vulnerabilities in your application before
    they can be taken advantage of.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序中大多数可执行代码都有开源依赖项，这些依赖项会暴露您面临的已知安全漏洞。通过具备移动DevOps管道，允许您测试新版本的依赖项并频繁更新，您将能够在这些漏洞被利用之前快速修复应用程序中的问题。
- en: 'The same principles and best practices outlined in the rest of this book apply
    to mobile application development, but are amplified 10 times by the size and
    expectations of this market. When planning out a mobile DevOps pipeline for Android
    devices, here are the stages you need to consider:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书其余部分提到的原则和最佳实践同样适用于移动应用程序开发，但由于市场的规模和期望，这些因素会放大10倍。在为Android设备规划移动DevOps管道时，以下是您需要考虑的阶段：
- en: Build.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建。
- en: Android build scripts are usually written in Gradle. As a result, you can use
    any continuous integration server of your choice, including Jenkins, CircleCI,
    Travis CI, or JFrog Pipelines.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android构建脚本通常使用Gradle编写。因此，您可以使用您选择的任何持续集成服务器，包括Jenkins、CircleCI、Travis CI或JFrog
    Pipelines。
- en: Test.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试。
- en: Unit tests
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试
- en: Android unit tests are typically written in JUnit, which can easily be automated.
    Higher-level Android unit tests are often written in some sort of UI test framework
    like Espresso, Appium, Calabash, or Robotium.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android单元测试通常使用JUnit编写，可以轻松自动化。更高级别的Android单元测试通常使用一些UI测试框架，如Espresso、Appium、Calabash或Robotium。
- en: Integration tests
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集成测试
- en: Besides testing your own application, it is important to test interactions between
    applications with tools like UI Automator that are focused on integration testing
    and can test across multiple Android applications.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了测试您自己的应用程序外，还重要测试应用程序之间的交互，使用诸如UI Automator之类的工具进行集成测试，并可以跨多个Android应用程序进行测试。
- en: Functional tests
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能测试
- en: Overall application verification is important. You can do this manually, but
    automated tools can simulate user input like the previously mentioned UI automation
    tools. Another option is to run robotic crawler tools like Google’s App Crawler
    in order to inspect your application’s user interface and automatically issue
    user actions.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整体应用程序验证很重要。您可以手动执行此操作，但是自动化工具可以模拟用户输入，例如先前提到的UI自动化工具。另一种选择是运行像Google的App爬虫这样的机器人爬虫工具，以检查您的应用程序的用户界面并自动发出用户操作。
- en: Package.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包。
- en: In the package step, you aggregate all of the scripts, configuration files,
    and binaries needed for deployment. By using a package management tool like Artifactory,
    you retain all the build and test information and can easily track dependencies
    for traceability and debugging.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在打包步骤中，您需要聚合部署所需的所有脚本、配置文件和二进制文件。通过使用像Artifactory这样的软件包管理工具，您可以保留所有构建和测试信息，并轻松跟踪依赖关系以进行可追溯性和调试。
- en: Release.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布。
- en: One of the best parts of mobile app development is that releasing mobile applications
    ends with the app store submission; the final deployment to devices is managed
    by the Google Play infrastructure. The challenging parts are that you have to
    prepare your build to make sure the app store submission is successful, and you’ll
    be penalized for any mistakes in building, testing, and packaging by delays if
    you do not fully automate the submission process.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移动应用开发最好的部分之一是发布移动应用程序以结束应用商店提交; 最终部署到设备的管理由Google Play基础设施管理。具有挑战性的部分是您必须准备您的构建以确保应用商店提交成功，并且如果您没有完全自动化提交过程，构建、测试和打包中的任何错误都会导致延迟而受到惩罚。
- en: As you can see, the biggest difference in DevOps for Android development comes
    with testing. There is a lot of investment in UI test frameworks for Android apps,
    because automated testing is the only solution to the problem of testing across
    a highly fragmented device ecosystem. We will find out exactly how severe the
    Android device fragmentation is in the next section and talk about ways to mitigate
    this later in the chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Android开发中DevOps的最大区别在于测试。对Android应用程序的UI测试框架进行了大量投资，因为自动化测试是解决在高度碎片化的设备生态系统中进行测试问题的唯一解决方案。我们将在下一节中了解到Android设备碎片化有多严重，并在本章后面讨论缓解这一问题的方法。
- en: Android Device Fragmentation
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android设备碎片化
- en: The iOS ecosystem is tightly controlled by Apple, which limits the number of
    hardware models available, the variations in screen size, and the set of hardware
    sensors and features on its phones. Since 2007 when the first iPhone debuted,
    only 29 different devices have been produced, only 7 of which are currently sold.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: iOS生态系统受到Apple严格控制，限制了可用的硬件型号数量、屏幕大小的变化以及手机上的硬件传感器和功能集。自2007年首款iPhone推出以来，仅生产了29种不同的设备，其中仅有7种目前在售。
- en: In contrast, the Android ecosystem is open to a plethora of device manufacturers
    who customize everything from the screen size and resolution to the processor
    and hardware sensors, and even produce unique form factors like foldable screens.
    There are over 24,000 different devices from 1,300 different manufacturers, which
    is 1,000 times more fragmentation than for iOS devices. This makes testing for
    Android platforms much more difficult to execute.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Android生态系统向众多设备制造商开放，他们定制从屏幕大小和分辨率到处理器和硬件传感器，甚至生产像折叠屏这样的独特形态因素的一切。来自1,300个不同制造商的超过24,000种不同设备，这比iOS设备的碎片化高出1,000倍。这使得为Android平台进行测试变得更加困难。
- en: 'When it comes to fragmentation, several key differences make it hard to uniformly
    test different Android devices:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在碎片化方面，几个关键差异使得统一测试不同 Android 设备变得困难：
- en: Android version
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Android 版本
- en: Android device manufacturers do not always provide updates for older devices
    to the latest Android version, so users may be stuck on old Android OS versions
    until they buy a new device. The drop-off in use of old Android versions is gradual,
    with active devices still running Android 4.*x* releases that are more than seven
    years old, including Jelly Bean and KitKat.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Android 设备制造商并不总是为旧设备提供最新的 Android 版本更新，因此用户可能会被困在旧的 Android 操作系统版本上，直到购买新设备。旧
    Android 版本的使用减少是逐渐的，目前仍在运行 Android 4.*x* 版本的活跃设备超过七年，包括 Jelly Bean 和 KitKat。
- en: Screen size and resolution
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕尺寸和分辨率
- en: Android devices come in a wide array of form factors and hardware configurations,
    with a trend toward larger and more pixel-dense displays. A well-designed application
    needs to scale in order to work well across a range of screen sizes and resolutions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Android 设备涵盖广泛的形态因素和硬件配置，趋势是向更大和像素密度更高的显示器发展。一个设计良好的应用程序需要能够在各种屏幕尺寸和分辨率下良好地扩展。
- en: 3D support
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 支持
- en: Particularly for games, it is critical to know what level of 3D support you
    will get on devices, in terms of APIs and performance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于游戏而言，了解设备在 API 和性能方面的 3D 支持水平至关重要。
- en: Hardware features
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件特性
- en: Most Android devices come with basic hardware sensors (camera, accelerometer,
    GPS), but support varies for newer hardware APIs such as near-field communication
    (NFC), barometers, magnetometers, proximity and pressure sensors, thermometers,
    and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Android 设备配备基本的硬件传感器（摄像头、加速计、GPS），但对于新的硬件 API（如近场通信（NFC）、气压计、磁力计、接近传感器、压力传感器、温度计等），支持有所不同。
- en: Android OS Fragmentation
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 操作系统碎片化
- en: Android version fragmentation affects device testing at two levels. The first
    is the major Android version, which determines the number of Android API versions
    you need to build for and test against. And the second is the OS customization
    done by original equipment manufacturers (OEMs) to support specific hardware configurations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Android 版本碎片化影响设备测试的两个层面。首先是主要的 Android 版本，它决定了您需要构建和测试的 Android API 版本数量。第二个是由原始设备制造商（OEM）进行的操作系统定制，以支持特定的硬件配置。
- en: In the case of iOS, since Apple controls the hardware and the operating system,
    it is able to push out updates for all supported devices simultaneously. This
    keeps the adoption level of minor updates for performance and security fixes high.
    Apple also puts a lot of features and marketing into major releases to push the
    installed base to upgrade to the latest version quickly. As a result, Apple was
    able to achieve [86% adoption](https://oreil.ly/3GYL8) of iOS 14 only seven months
    after its initial release.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 iOS 而言，由于苹果控制硬件和操作系统，它能够同时为所有支持的设备推送更新。这保持了针对性能和安全修复的小版本更新的高采纳率。苹果还在主要发布中投入了许多功能和市场推广，以快速推动用户群体升级到最新版本。因此，仅在初始发布后的七个月内，苹果就能够实现
    iOS 14 的 [86% 采纳率](https://oreil.ly/3GYL8)。
- en: The Android market is significantly more complex since OEMs modify and test
    custom versions of Android OSs for their devices. In addition, they are reliant
    on system-on-a-chip (SoC) manufacturers to provide code updates for different
    hardware components. This means that devices created by major vendors are likely
    to receive only a couple of major OS version updates, and devices from smaller
    vendors may never see an OS upgrade even when they are under support.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Android 市场的复杂性显著增加，因为 OEM 修改并测试其设备的定制 Android OS 版本。此外，他们依赖于系统芯片（SoC）制造商为不同的硬件组件提供代码更新。这意味着主要供应商创建的设备可能仅会收到几个主要操作系统版本的更新，而小型供应商的设备即使在支持期内也可能永远不会看到操作系统升级。
- en: To help you decide how far back you should support different Android OS versions,
    Google provides information in Android Studio on the device adoption by API level.
    The distribution of users as of August 2021 is shown in [Figure 9-2](#android_version_usage).
    To achieve > 86% adoption comparable to the latest iOS version, you need to support
    at least Android 5.1 Lollipop, a release that came out in 2014\. Even then you
    are still missing out on over 5% of users who are still using Android 4–based
    devices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您决定支持不同Android OS版本的范围，Google在Android Studio中提供了有关设备按API级别采用情况的信息。截至2021年8月的用户分布如[图9-2](#android_version_usage)所示。要实现与最新iOS版本相当的>
    86％采用率，您需要至少支持Android 5.1 Lollipop，这是2014年发布的一个版本。即使如此，您仍然错过了仍在使用基于Android 4的设备的超过5％的用户。
- en: '![List of Android versions with information on usage and features](Images/dtjd_0902.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![带有使用和功能信息的Android版本列表](Images/dtjd_0902.png)'
- en: Figure 9-2\. Android Studio showing the distribution of users on different versions
    of the Android platform (Android 11 has < 1% adoption)
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-2\. Android Studio显示Android平台不同版本用户的分布（Android 11采用率<1％）
- en: To further complicate the situation, every OEM modifies the Android OS it ships
    for its devices, so it is not enough to simply test one device per major Android
    version. This is a result of the way Android uses the Linux kernel to access hardware
    devices.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步复杂化情况的是，每个OEM都会修改其提供给设备的Android OS，因此仅仅测试每个主要Android版本的一个设备是不够的。这是Android使用Linux内核访问硬件设备的方式导致的结果。
- en: The Linux kernel is the heart of the operating system and provides the low-level
    device driver code to access cameras, accelerometers, the display, and other hardware
    on the device. To the Linux kernel that Android is based on, Google adds in Android-specific
    features and patches, SoC vendors add in hardware-specific support, and OEMs further
    modify it for their specific devices. Therefore, each device has a range of variation
    in performance, security, and potential bugs that could affect your application
    when a user runs it on a new device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核是操作系统的核心，并提供用于访问摄像头、加速计、显示器和设备上其他硬件的低级设备驱动程序代码。在Google基于的Linux内核中，Google添加了Android特定的功能和补丁，SoC供应商添加了硬件特定的支持，OEM进一步为其特定设备修改了它。因此，每个设备在性能、安全性和可能影响应用程序的潜在错误方面都存在一定的变化范围，当用户在新设备上运行时可能会受到影响。
- en: Google worked toward improving this situation with Android 8.0 Oreo, which includes
    a new hardware abstraction layer allowing device-specific code to run outside
    the kernel. This allows OEMs to update to new Android kernel versions from Google
    without waiting for device driver updates from SoC vendors, which reduces the
    amount of redevelopment and testing required for OS upgrades. However, other than
    Pixel devices that Google handles OS updates for, the majority of Android device
    upgrades are in the hands of OEMs, which are still slow to upgrade to new Android
    versions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Google致力于改善这种情况，通过Android 8.0 Oreo，其中包括一个新的硬件抽象层，允许设备特定的代码在内核外运行。这使得OEM厂商可以在没有等待SoC供应商的设备驱动程序更新的情况下，从Google更新到新的Android内核版本，从而减少了操作系统升级所需的重新开发和测试的数量。然而，除了Google负责OS更新的Pixel设备外，大多数Android设备升级仍由OEM厂商掌控，它们仍然很慢地升级到新的Android版本。
- en: Building for Disparate Screens
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建不同屏幕尺寸的应用
- en: Given the diversity in hardware manufacturers and over 24,000 models, as discussed
    in the previous section, it should be no surprise that a huge variation also exists
    in screen sizes and resolutions. New screen dimensions are constantly being introduced,
    such as the enormous HP Slate 21, which uses a 21.5-inch touchscreen, and the
    Samsung Galaxy Fold with a vertical 1680 × 720 cover display that opens to reveal
    a double-wide inner display with a resolution of 2152 × 1536.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于在硬件制造商和超过24,000个型号中的多样性，如前一节所讨论的，屏幕尺寸和分辨率也存在巨大差异是毫不奇怪的。不断推出新的屏幕尺寸，例如使用21.5英寸触摸屏的巨大HP
    Slate 21，以及带有垂直1680 × 720盖板显示器，打开后显示2152 × 1536分辨率的双宽内部显示器的三星Galaxy Fold。
- en: Besides the huge variation in screen sizes, there is a constant battle over
    achieving higher pixel density as well. Higher pixel densities allow for clearer
    text and sharper graphics, providing a better viewing experience.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了屏幕尺寸的巨大变化外，还存在着不断追求更高像素密度的战斗。更高的像素密度可以实现更清晰的文本和更锐利的图形，从而提供更好的视觉体验。
- en: The current front-runner in pixel density is the Sony Xperia XZ, which packs
    a 3840 × 2160 UHS-1 display in a screen that measures only 5.2 inches diagonally.
    This gives a density of 806.93 pixels per inch (PPI), which is getting close to
    the maximum resolution the human eye can distinguish.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当前像素密度的领先者是Sony Xperia XZ，在仅5.2英寸对角线的屏幕上配备了3840 × 2160的UHS-1显示屏。这使得像素密度达到806.93像素每英寸（PPI），接近人眼可区分的最大分辨率。
- en: Applied Materials, one of the leading manufacturers of LCD and OLED displays,
    did research on human perception of pixel density on handheld displays. It found
    that at a distance of 4 inches from the eye, [a human with 20/20 vision can distinguish
    876 PPI](https://oreil.ly/OecRt). Therefore, smartphone displays are quickly approaching
    the theoretical limit on pixel density; however, other form factors like virtual
    reality headsets may drive the density even further.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 应用材料是LCD和OLED显示器的主要制造商之一，对手持显示器上的像素密度的人类感知进行了研究。它发现，在距离眼睛4英寸的距离上，20/20视力的人能够区分876
    PPI。因此，智能手机显示屏迅速接近像素密度的理论极限；然而，其他形式因素如虚拟现实头显可能会进一步推动密度。
- en: 'To handle variation in pixel densities, Android categorizes screens into the
    following pixel density ranges:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理像素密度的变化，Android将屏幕分类为以下像素密度范围：
- en: ldpi, ~120 dpi (.75x scale)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ldpi，约120 dpi（0.75倍比例）
- en: Used on a limited number of very low-resolution devices like the HTC Tattoo,
    Motorola Flipout, and Sony X10 Mini, all of which have a screen resolution of
    240 × 320 pixels.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用于少数非常低分辨率设备，如HTC Tattoo，Motorola Flipout和Sony X10 Mini，它们的屏幕分辨率为240 × 320像素。
- en: mdpi, ~160 dpi (1x scale)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: mdpi，约160 dpi（1倍比例）
- en: This is the original screen resolution for Android devices such as the HTC Hero
    and Motorola Droid.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是像HTC Hero和Motorola Droid这样的Android设备的原始屏幕分辨率。
- en: tvdpi, ~213 dpi (1.33x scale)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: tvdpi，约213 dpi（1.33倍比例）
- en: Resolution intended for televisions such as the Google Nexus 7, but not considered
    a “primary” density group.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 电视分辨率，如Google Nexus 7，但不被视为“主要”密度组。
- en: hdpi, ~240 dpi (1.5x scale)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: hdpi，约240 dpi（1.5倍比例）
- en: The second generation of phones such as the HTC Nexus One and Samsung Galaxy
    Ace increased resolution by 50%.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二代手机，如HTC Nexus One和Samsung Galaxy Ace，将分辨率提高了50%。
- en: xhdpi, ~320 dpi (2x scale)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: xhdpi，约320 dpi（2倍比例）
- en: One of the first phones to use this 2*x* resolution was the Sony Xperia S, followed
    by phones like the Samsung Galaxy S III and HTC One.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一批使用这种2倍分辨率的手机之一是Sony Xperia S，随后是Samsung Galaxy S III和HTC One等手机。
- en: xxhdpi, ~480 dpi (3x scale)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: xxhdpi，约480 dpi（3倍比例）
- en: The first xxhdpi device was the Nexus 10 by Google, which was only 300 dpi but
    needed large icons since it was in tablet form.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款xxhdpi设备是Google的Nexus 10，它只有300 dpi，但因为是平板形式，需要大图标。
- en: xxxhdpi, ~640 dpi (4x scale)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: xxxhdpi，约640 dpi（4倍比例）
- en: This is currently the highest resolution used by devices like the Nexus 6 and
    Samsung Galaxy S6 Edge.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是像Nexus 6和Samsung Galaxy S6 Edge这样的设备目前使用的最高分辨率。
- en: As displays continue to increase in pixel density, Google probably wishes it
    had chosen a better convention for high-resolution displays than just adding more
    *x*s!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着显示器像素密度的持续增加，Google可能希望选择比仅添加更多*x*更好的高分辨率显示约定！
- en: To give the best user experience for your end users, it is important to have
    your application look and behave consistently across the full range of available
    resolutions. Given the wide variety of screen resolutions, it is not enough to
    simply hardcode your application for each resolution.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给最终用户提供最佳的用户体验，重要的是确保您的应用程序在所有可用分辨率下看起来和行为一致。考虑到各种屏幕分辨率的广泛变化，简单地为每种分辨率硬编码是不够的。
- en: 'Here are some best practices to make sure that your application will work across
    the full range of resolutions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些最佳实践，确保您的应用程序在各种分辨率下都能正常工作：
- en: 'Always use density-independent and scalable pixels:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终使用密度独立和可伸缩像素：
- en: Density-independent pixels (dp)
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密度独立像素（dp）
- en: Pixel unit that adjusts based on the resolution of the device. For an mdpi screen,
    1 pixel (px) = 1 dp. For other screen resolutions, px = dp × (dpi / 160).
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据设备分辨率调整的像素单位。对于mdpi屏幕，1像素（px）= 1 dp。对于其他屏幕分辨率，px = dp ×（dpi / 160）。
- en: Scalable pixels (sp)
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可伸缩像素（sp）
- en: Scalable pixel unit used for text or other user-resizable elements. This starts
    at 1 sp = 1 dp and adjusts based on the user-defined text zoom value.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于文本或其他用户可调整大小元素的可伸缩像素单位。它以1 sp = 1 dp开始，并根据用户定义的文本缩放值进行调整。
- en: 'Provide alternate bitmaps for all available resolutions:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有可用分辨率提供备用位图：
- en: Android allows you to provide alternate bitmaps for different resolutions by
    putting them in subfolders named *drawable-?dpi*, where *?dpi* is one of the supported
    density ranges.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 允许您通过将其放入名为 *drawable-?dpi* 的子文件夹中来为不同分辨率提供备用位图，其中 *?dpi* 是支持的密度范围之一。
- en: The same applies for your app icon, except you should use subfolders named *mipmap-?dpi*
    so the resources aren’t removed when you build density-specific APKs, because
    app icons are often upscaled beyond the device resolution.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于应用程序图标也是如此，不过您应该使用名为 *mipmap-?dpi* 的子文件夹，以便在构建特定密度的 APK 时资源不被移除，因为应用程序图标通常会放大超出设备分辨率。
- en: 'Better yet, use vector graphics whenever possible:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的做法是尽可能使用矢量图形：
- en: Android Studio provides a tool called Vector Asset Studio that allows you to
    convert an SVG or PSD into an Android Vector file that can be used as a resource
    in your application, as shown in [Figure 9-3](#convert_svg).
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 提供了一个名为 Vector Asset Studio 的工具，允许您将 SVG 或 PSD 文件转换为 Android
    矢量文件，可以作为应用程序资源使用，如[图 9-3](#convert_svg)所示。
- en: '![Dialog from Android Studio for converting SVG and PSD files to vector resources](Images/dtjd_0903.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio 中用于将 SVG 和 PSD 文件转换为矢量资源的对话框](Images/dtjd_0903.png)'
- en: Figure 9-3\. Conversion of an SVG file to an Android Vector format
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 将 SVG 文件转换为 Android 矢量格式
- en: Building applications that cleanly scale to different screen sizes and resolutions
    is complicated to get right and needs to be tested on devices with differing resolutions.
    To help focus your testing efforts, Google provides user-mined [data](https://oreil.ly/Aqw18)
    on the usage of different device resolutions, as shown in [Table 9-1](#sizes_and_densities).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 开发能够清晰适配不同屏幕尺寸和分辨率的应用程序是非常复杂的，需要仔细测试不同分辨率的设备。为了帮助集中测试工作，Google 提供了用户提取的[数据](https://oreil.ly/Aqw18)，显示了不同设备分辨率的使用情况，如[表 9-1](#sizes_and_densities)所示。
- en: Table 9-1\. Android screen size and density distribution
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-1\. Android 屏幕大小和密度分布
- en: '|  | ldpi | mdpi | tvdpi | hdpi | xdpi | xxhdpi | Total |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '|  | ldpi | mdpi | tvdpi | hdpi | xdpi | xxhdpi | 总计 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| Small | 0.1% |  |  |  | 0.1% |  | 0.2% |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 小型 | 0.1% |  |  |  | 0.1% |  | 0.2% |'
- en: '| Normal |  | 0.3% | 0.3% | 14.8% | 41.3% | 26.1% | 82.8% |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 普通 |  | 0.3% | 0.3% | 14.8% | 41.3% | 26.1% | 82.8% |'
- en: '| Large |  | 1.7% | 2.2% | 0.8% | 3.2% | 2.0% | 9.9% |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 大型 |  | 1.7% | 2.2% | 0.8% | 3.2% | 2.0% | 9.9% |'
- en: '| Xlarge |  | 4.2% | 0.2% | 2.3% | 0.4% |  | 7.1% |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 超大 |  | 4.2% | 0.2% | 2.3% | 0.4% |  | 7.1% |'
- en: '| Total | 0.1% | 6.2% | 2.7% | 17.9% | 45.0% | 28.1% |  |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 总计 | 0.1% | 6.2% | 2.7% | 17.9% | 45.0% | 28.1% |  |'
- en: As you can see, some resolutions are not prevalent and, unless your application
    targets these users or legacy device types, you can prune them from your device-testing
    matrix. The ldpi density is used on only a small segment of Android devices and
    with only 0.1% market share—few applications are optimized for this very small
    resolution screen. Also, tvdpi is a niche screen resolution with only 2.7% usage
    and can be safely ignored since Android will automatically downscale hdpi assets
    in order to fit this screen resolution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，某些分辨率并不常见，除非您的应用程序针对这些用户或遗留设备类型，否则可以从设备测试矩阵中删除它们。ldpi 分辨率仅用于 Android 设备的一小部分，并且市场份额仅为
    0.1% —— 很少有应用程序针对这种非常小的分辨率屏幕进行优化。此外，tvdpi 是一种使用率仅为 2.7% 的小众屏幕分辨率，可以安全地忽略，因为 Android
    将自动缩放 hdpi 资源以适应此屏幕分辨率。
- en: This still leaves you with five device densities to support and a potentially
    innumerable number of screen resolutions and aspect ratios to test. I discuss
    testing strategies later, but you will likely be using a mix of emulated devices
    and physical devices to make sure that you provide the best user experience across
    the fragmented Android ecosystem.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然需要您支持五种设备密度，并且可能需要测试无数种屏幕分辨率和宽高比。我稍后会讨论测试策略，但您可能需要同时使用模拟设备和物理设备，以确保在碎片化的
    Android 生态系统中提供最佳用户体验。
- en: Hardware and 3D Support
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件和 3D 支持
- en: The very first Android device was the HTC Dream (a.k.a. T-Mobile G1), shown
    in [Figure 9-4](#tmobile_g1). It had a medium density touchscreen of 320 × 480
    px, a hardware keyboard, speaker, microphone, five buttons, a clickable trackball,
    and a rear-mounted camera. While primitive by modern smartphone standards, it
    was a great platform to launch Android, which lacked support for software keyboards
    at the time.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一台 Android 设备是 HTC Dream（又称 T-Mobile G1），如[图 9-4](#tmobile_g1)所示。它具有中密度触摸屏，分辨率为
    320 × 480 像素，硬件键盘、扬声器、麦克风、五个按钮、可点击的轨迹球和后置摄像头。虽然在现代智能手机标准下算是原始，但它是推出 Android 的良好平台，当时尚未支持软键盘。
- en: 'Compared to modern smartphone standards, this was a modest hardware set. The
    Qualcomm MSM7201A processor that drove the HTC Dream was a 528 MHz Arm11 processor
    with support for only OpenGL ES 1.1\. In comparison, the Samsung Galaxy S21 Ultra
    5G sports a 3200 × 1440 resolution screen with the following sensors:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与现代智能手机标准相比，这套硬件设备显得比较适中。驱动HTC Dream的高通MSM7201A处理器是一款528 MHz Arm11处理器，仅支持OpenGL
    ES 1.1。相比之下，三星Galaxy S21 Ultra 5G配备3200 × 1440分辨率屏幕和以下传感器：
- en: 2.9 GHz 8-core processor
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.9 GHz 8核处理器
- en: Arm Mali-G78 MP14 GPU with support for Vulkan 1.1, OpenGL ES 3.2, and OpenCL
    2.0
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arm Mali-G78 MP14 GPU，支持Vulkan 1.1、OpenGL ES 3.2和OpenCL 2.0
- en: Five cameras (one front, four rear)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个摄像头（一个前置，四个后置）
- en: Three microphones (one bottom, two top)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个麦克风（一个底部，两个顶部）
- en: Stereo speakers
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立体声扬声器
- en: Ultrasonic fingerprint reader
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超声波指纹识别器
- en: Accelerometer
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计
- en: Barometer
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气压计
- en: Gyro sensor (gyroscope)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 陀螺仪传感器（陀螺仪）
- en: Geomagnetic sensor (magnetometer)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地磁传感器（磁力计）
- en: Hall sensor
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hall传感器
- en: Proximity sensor
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接近传感器
- en: Ambient light sensor
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境光传感器
- en: NFC
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFC
- en: '![Photo of a smartphone with the screen retracted to show a hardware keyboard.](Images/dtjd_0904.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![显示智能手机的照片，显示屏幕已收起，显示出硬件键盘。](Images/dtjd_0904.png)'
- en: Figure 9-4\. The T-Mobile G1 (a.k.a. HTC Dream), which was the [first smartphone](https://oreil.ly/ijUOh)
    to run the Android operating system (photo used under [Creative Commons license](https://oreil.ly/GLSPZ))
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-4\. T-Mobile G1（又名HTC Dream），这是第一款运行Android操作系统的智能手机（照片在[创意共享许可](https://oreil.ly/GLSPZ)下使用）
- en: 'The flagship Samsung phones are at the high end of the spectrum when it comes
    to hardware support, and include almost all of the supported sensor types. Phones
    meant for mass market may choose to use less powerful chipsets and leave off sensors
    to reduce cost. Android uses the data from the available physical sensors to also
    create “virtual” sensors in software that are used by applications:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 三星旗舰手机在硬件支持方面处于高端，包括几乎所有支持的传感器类型。面向大众市场的手机可能选择使用性能较低的芯片组，并省略一些传感器以降低成本。Android使用可用物理传感器的数据还在软件中创建“虚拟”传感器，应用程序使用这些传感器：
- en: Game rotation vector
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏旋转向量
- en: Combination of data from the accelerometer and gyroscope
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计和陀螺仪数据的组合
- en: Gravity
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 重力
- en: Combination of data from the accelerometer and gyroscope (or magnetometer if
    no gyroscope is present)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计和陀螺仪（如果没有陀螺仪，则为磁力计）数据的组合
- en: Geomagnetic rotational vector
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 地磁旋转向量
- en: Combination of data from the accelerometer and magnetometer
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计和磁力计数据的组合
- en: Linear acceleration
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 线性加速度
- en: Combination of data from the accelerometer and gyroscope (or magnetometer if
    no gyroscope is present)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计和陀螺仪（如果没有陀螺仪，则为磁力计）数据的组合
- en: Rotation vector
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转向量
- en: Combination of data from the accelerometer, magnetometer, and gyroscope
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计、磁力计和陀螺仪数据的组合
- en: Significant motion
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 显著动作
- en: Data from the accelerometer (and possibly substitutes other sensor data when
    in low-power mode)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计数据（在低功耗模式下可能替代其他传感器数据）
- en: Step detector/counter
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 步数检测器/计数器
- en: Data from the accelerometer (and possibly substitutes other sensor data when
    in low-power mode)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由加速度计数据（在低功耗模式下可能替代其他传感器数据）
- en: These virtual sensors are available only if a sufficient set of physical sensors
    is present. Most phones contain an accelerometer, but may choose to omit either
    a gyroscope or magnetometer or both, reducing the precision of motion detection
    and disabling certain virtual sensors.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些虚拟传感器仅在足够的物理传感器集合存在时才可用。大多数手机包含加速度计，但可能选择省略陀螺仪或磁力计或两者，从而降低运动检测的精度并禁用某些虚拟传感器。
- en: Hardware sensors can be emulated, but it is much harder to simulate real-world
    conditions for testing. Also, much more variation occurs in hardware chipset and
    SoC vendor-driver implementation, producing a huge test matrix required to verify
    your application across a range of devices.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件传感器可以模拟，但要模拟测试真实世界条件则更加困难。此外，硬件芯片组和SoC供应商驱动程序的实现有很大差异，需要大量测试矩阵以验证应用程序在各种设备上的运行。
- en: The other aspect of hardware that is particularly important for game developers,
    but increasingly is part of the basic graphics stack and expected performance
    of applications, is 3D API support. Almost all mobile processors support some
    basic 3D APIs, including the first Android phone, which had support for OpenGL
    ES 1.1, a mobile-specific version of the OpenGL 3D standard. Modern phones support
    later versions of the OpenGL ES standard, including OpenGL ES 2.0, 3.0, 3.1, and
    now 3.2.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于游戏开发人员尤为重要的硬件另一个方面，但越来越成为基本图形堆栈和应用程序预期性能的一部分，是3D API支持。几乎所有移动处理器都支持一些基本的3D
    API，包括第一款Android手机，支持OpenGL ES 1.1，这是OpenGL 3D标准的移动特定版本。现代手机支持OpenGL ES标准的较新版本，包括OpenGL
    ES 2.0、3.0、3.1，以及现在的3.2版本。
- en: OpenGL ES 2.0 introduced a dramatic shift in the programming model, switching
    from a functional pipeline to a programmable pipeline, allowing for more direct
    control to create complex effects through the use of shaders. OpenGL ES 3.0 further
    increased the performance and hardware independence of 3D graphics by supporting
    features like vertex array objects, instanced rendering, and device-independent
    compression formats (ETC2/EAC).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL ES 2.0引入了编程模型的显著转变，从功能管线转变为可编程管线，通过着色器的使用允许更直接的控制来创建复杂效果。OpenGL ES 3.0通过支持顶点数组对象、实例化渲染和设备独立压缩格式（ETC2/EAC）等功能，进一步提高了3D图形的性能和硬件独立性。
- en: OpenGL ES adoption has been rather quick, with all modern devices supporting
    at least OpenGL ES 2.0\. According to Google’s device data shown in [Figure 9-5](#opengl_es_adoption),
    the majority of devices (67.54%) support OpenGL ES 3.2, the latest version of
    the standard released in August 2015.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL ES的采用速度相当快，所有现代设备至少支持OpenGL ES 2.0。根据Google在[图 9-5](#opengl_es_adoption)中展示的设备数据，大多数设备（67.54%）支持OpenGL
    ES 3.2，这是2015年8月发布的标准的最新版本。
- en: '![Pie chart showing of OpenGL ES version adoption](Images/dtjd_0905.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![显示OpenGL ES版本采用的饼状图](Images/dtjd_0905.png)'
- en: Figure 9-5\. Percentage of Android devices adopting different versions of OpenGL
    ES from [Google’s Distribution Dashboard](https://oreil.ly/18xDQ)
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-5\. Android设备采用不同版本OpenGL ES的百分比，来自[Google的分布仪表板](https://oreil.ly/18xDQ)
- en: Vulkan is a newer graphics API that modern graphics chipsets support. It has
    the advantage of being portable between desktop and mobile devices, allowing for
    easier porting of desktop code as computing platforms continue to converge. Also,
    it allows an even finer level of control over threads and memory management, and
    an asynchronous API for buffering and sequencing commands across multiple threads,
    making better use of multicore processors and high-end hardware.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Vulkan是一种现代图形芯片组支持的新的图形API。它具有在桌面和移动设备之间可移植性的优势，随着计算平台继续融合，更容易移植桌面代码。此外，它允许更精细的线程和内存管理控制，以及用于跨多个线程缓冲和排序命令的异步API，更好地利用多核处理器和高端硬件。
- en: Since Vulkan is a newer API, adoption has not been as quick as OpenGL ES; however,
    64% of Android devices have some level of Vulkan support. According to Google’s
    device statistics visualized in [Figure 9-6](#vulkan_adoption), this is split
    between Vulkan 1.1, which is supported by 42% of devices, and the remaining 22%
    of devices that support only the Vulkan 1.0.3 API level.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vulkan是一种较新的API，其采用速度不及OpenGL ES快；但是，64%的Android设备具有某种程度的Vulkan支持。根据Google在[图 9-6](#vulkan_adoption)中可视化的设备统计数据，这分为支持42%设备的Vulkan
    1.1版本，以及仅支持Vulkan 1.0.3 API级别的剩余22%设备。
- en: Similar to hardware sensor testing, a large variety of 3D chipsets are implemented
    by different manufacturers. Therefore, the only way to reliably test for bugs
    and performance issues in your application is to execute device testing on different
    phone models, covered in the next section.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与硬件传感器测试类似，许多不同制造商实现了大量的3D芯片组。因此，在您的应用程序中可靠地测试错误和性能问题的唯一方法是在不同手机型号上执行设备测试，将在下一节中详述。
- en: '![Pie chart showing Vulkan version adoption](Images/dtjd_0906.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![显示Vulkan版本采用的饼状图](Images/dtjd_0906.png)'
- en: Figure 9-6\. Percentage of Android devices adopting different versions of Vulkan
    from [Google’s Distribution Dashboard](https://oreil.ly/K9FZd)
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-6\. Android设备采用不同版本Vulkan的百分比，来自[Google的分布仪表板](https://oreil.ly/K9FZd)
- en: Continuous Testing on Parallel Devices
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在并行设备上进行持续测试
- en: The preceding section discussed the large amount of fragmentation in the Android
    device ecosystem. This is forced by technological factors like the Android OS
    architecture as well as the complex ecosystem of OEMs and SoC vendors. Also, the
    sheer popularity of the Android platform, with 1,300 manufacturers producing over
    24,000 devices, creates a continuous testing and deployment challenge.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分讨论了 Android 设备生态系统中的大量碎片化。这是由技术因素（如 Android 操作系统架构）以及 OEM 和 SoC 供应商复杂的生态系统所迫使的。另外，Android
    平台的普及度极高，有 1,300 多家制造商生产超过 24,000 种设备，这造成了持续的测试和部署挑战。
- en: Device emulators are great for development and basic testing of applications,
    but cannot possibly simulate the complex interactions of unique hardware configurations,
    device drivers, custom kernels, and real-world sensor behavior. Therefore, a high
    level of manual and automated testing on devices is required to ensure a good
    experience for end users.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 设备仿真器适用于开发和应用程序的基本测试，但无法模拟独特硬件配置、设备驱动程序、定制内核和真实传感器行为的复杂交互。因此，需要在设备上进行高水平的手动和自动化测试，以确保终端用户获得良好的体验。
- en: Two basic approaches are used for hardware testing at scale. The first is to
    build out your own device lab with shared devices. This is a practical approach
    to get started with testing, since you likely have a large collection of Android
    devices available that could be put to better use with proper infrastructure and
    automation. However, depending on the number of device configurations you want
    to support, this can be quite a large and expensive endeavor. Also, the ongoing
    maintenance and upkeep for a large device farm can be costly in both materials
    and labor.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件规模测试中有两种基本方法。第一种是建立共享设备的设备实验室。这是一个实用的方法来开始测试，因为您可能已经有大量可用的 Android 设备，通过适当的基础设施和自动化可以更好地利用这些设备。然而，根据您想支持的设备配置数量，这可能是一个相当大而昂贵的事业。此外，对于一个大型设备农场的持续维护和维护在材料和劳动力方面都是昂贵的。
- en: The second option is to outsource your device testing to a cloud service. Given
    the advances in remote control of Android devices and stability of the platform,
    it is convenient to be able to select your matrix of devices and have your automated
    tests fired off in the cloud. Most cloud services offer detailed screenshots and
    diagnostic logs that can be used to trace build failures as well as the ability
    to manually control a device for debugging purposes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项是将设备测试外包给云服务。考虑到远程控制 Android 设备的进展以及平台的稳定性，能够选择设备矩阵并在云中触发自动化测试是很方便的。大多数云服务提供详细的屏幕截图和诊断日志，可以用于跟踪构建失败，并且可以手动控制设备进行调试。
- en: Building a Device Farm
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建设设备农场
- en: Building your own device farm, even at a small scale, is a great way to leverage
    Android devices that you already have and increase their utility for your entire
    organization. At scale, device farms can significantly reduce the run rate cost
    of Android development once you have made the up-front investment in hardware.
    Keep in mind, though, running a large device lab is a full-time job and has ongoing
    costs that need to be accounted for.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 即使只是小规模地建立自己的设备农场，也是充分利用您已有的 Android 设备并增加其在整个组织中效用的好方法。在大规模运作时，设备农场可以显著降低 Android
    开发的运行成本，一旦您投入了硬件的前期投资。但请记住，管理一个大型设备实验室是一项全职工作，并且有持续的成本需要考虑。
- en: A popular open source library for managing Android devices is Device Farmer
    (formerly Open STF). Device Farmer allows you to remotely control an Android device
    from your web browser with a real-time view of the device screen, as shown in
    [Figure 9-7](#device_farmer). For manual tests, you can type from your desktop
    keyboard and use your mouse to input single or multitouch gestures. For automated
    tests, a REST API allows you to use test automation frameworks like Appium.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理 Android 设备的流行开源库是 Device Farmer（前身为 Open STF）。Device Farmer 允许您通过 Web 浏览器远程控制
    Android 设备，实时查看设备屏幕，如 [图 9-7](#device_farmer) 所示。对于手动测试，您可以从桌面键盘输入，并使用鼠标输入单点触摸或多点触控手势。对于自动化测试，REST
    API 允许您使用像 Appium 这样的测试自动化框架。
- en: '![Picture of a volunteer built device lab at a conference](Images/dtjd_0907.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![在会议上建立的志愿者设备实验室的图片](Images/dtjd_0907.png)'
- en: Figure 9-7\. Device Farmer [user interface](https://oreil.ly/2MQpN) (photo used
    under [Creative Commons](https://oreil.ly/bPhIL))
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-7\. Device Farmer 的 [用户界面](https://oreil.ly/2MQpN)（照片使用 [知识共享](https://oreil.ly/bPhIL)
    许可）
- en: Device Farmer also helps you manage your inventory of devices. It shows you
    which devices are connected, who is using each device, and the hardware spec for
    your devices, and it assists with physically locating devices in a large lab.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Device Farmer 还帮助你管理设备清单。它会显示已连接的设备、每个设备的使用者以及你设备的硬件规格，并协助在大型实验室中物理定位设备。
- en: Finally, Device Farmer also has a system for booking and partitioning groups
    of devices. You can split your device inventory into distinct groups that have
    owners and associated properties. These groups can then be permanently allocated
    to projects or organizations or they can be booked for a specific time period.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Device Farmer 还有一个预订和分区设备组的系统。你可以将你的设备清单分成具有所有者和相关属性的不同组。这些组可以永久分配给项目或组织，也可以预订一段特定的时间。
- en: 'To set up a device lab, you also need hardware to support the devices. The
    basic hardware setup includes the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立一个设备实验室，你还需要硬件来支持这些设备。基本的硬件设置包括以下内容：
- en: Driver computer
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动计算机
- en: Even though Device Farmer can run on any operating system, it is recommended
    to run it on a Linux-based host for ease of administration and the best stability.
    A good option for getting started with this is a compact, but powerful, computer
    like the Intel NUC.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Device Farmer 可以在任何操作系统上运行，但建议在基于 Linux 的主机上运行，以便管理和最佳稳定性。一个很好的开始选项是像 Intel
    NUC 这样的小巧但功能强大的计算机。
- en: USB hub
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: USB 集线器
- en: Both for device connectivity and to supply stable power, a powered USB hub is
    recommended. Getting a reliable USB hub is important since this will affect the
    stability of your lab.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设备的连接和稳定供电，建议使用一个带电源的 USB 集线器。获得可靠的 USB 集线器很重要，因为这会影响到你实验室的稳定性。
- en: Wireless router
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 无线路由器
- en: The devices will get their network connectivity from a wireless router, so this
    is an important part of the device setup. Having a dedicated network for your
    devices will increase reliability and reduce contention with other devices on
    your network.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 设备将通过无线路由器获取网络连接，因此这是设备设置中的一个重要部分。为你的设备拥有一个专用的网络将增加可靠性，并减少与网络上其他设备的争用。
- en: Android devices
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备
- en: And the most important part, of course, is having plenty of Android devices
    to test against. Start with devices that are the most common and popular with
    your target user base and add devices to hit the desired test matrix of Android
    OS versions, screen sizes, and hardware support as discussed in the previous section.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，最重要的部分是有大量的安卓设备进行测试。从与你的目标用户群最常见和最受欢迎的设备开始，并根据前面部分讨论的 Android 操作系统版本、屏幕尺寸和硬件支持来添加设备，以达到所需的测试矩阵。
- en: Plenty of cables
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 大量的电缆
- en: You will need longer cables than usual for efficient cable management of devices
    to the USB hub. It is important to leave enough space between individual devices
    and hardware components to avoid overheating.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要比平常更长的电缆来有效管理设备与 USB 集线器的连接。在设备和硬件组件之间留出足够的空间以避免过热是很重要的。
- en: With a little bit of work, you will be able to create a fully automated device
    lab similar to [Figure 9-8](#open_device_lab), which was the world’s first conference
    device lab featured at the beyond tellerrand conference in Düsseldorf, Germany.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一点点工作，你将能够创建一个类似于[图 9-8](#open_device_lab)的完全自动化设备实验室，这是世界上第一个在德国杜塞尔多夫举行的
    beyond tellerrand 大会上展示的设备实验室。
- en: '![Picture of a volunteer built device lab at a conference](Images/dtjd_0908.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![会议上自愿建造的设备实验室的图片](Images/dtjd_0908.png)'
- en: Figure 9-8\. [Open device lab](https://oreil.ly/QgEr9) at the beyond tellerrand
    conference in Düsseldorf, Germany (photo used under [Creative Commons](https://oreil.ly/Xv18U))
  id: totrans-191
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-8\. [开放设备实验室](https://oreil.ly/QgEr9) 在德国杜塞尔多夫举行的 beyond tellerrand 大会上（照片使用[知识共享许可](https://oreil.ly/Xv18U)）
- en: Device Farmer is split into microservices to allow for scalability of the platform
    to thousands of devices. Out of the box, it easily supports 15 devices, after
    which you will run into port limitations with Android Debug Bridge (ADB). This
    can be scaled out by running multiple instances of the Device Farmer ADB and Provider
    services up to the limit of the number of USB devices that your machine can support.
    For Intel architectures, this is 96 endpoints (including other peripherals), and
    for AMD, you can get up to 254 USB endpoints. By using multiple Device Farmer
    servers, you can scale into the thousands of devices, which should be enough to
    support mobile testing and verification of enterprise Android applications.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 设备农民被分为微服务，以支持平台的可伸缩性，可扩展到数千台设备。直接使用，它轻松支持15台设备，之后您将遇到Android调试桥（ADB）的端口限制。可以通过运行多个Device
    Farmer ADB和Provider服务的实例来扩展到您的机器支持的USB设备数量限制。对于Intel架构，这是96个端点（包括其他外围设备），对于AMD，可以达到254个USB端点。通过使用多个Device
    Farmer服务器，您可以扩展到数千台设备，这应该足以支持企业Android应用的移动测试和验证。
- en: One example of a large-scale mobile device lab is Facebook’s mobile device lab
    at its Prineville, Oregon, data center, shown in [Figure 9-9](#facebook_mobile_device_lab).
    The company built a customer server rack enclosure for holding mobile devices
    that is deigned to block WiFi signals to prevent interference among devices in
    the data center. Each enclosure can support 32 devices and is powered by 4 OCP
    Leopard servers that connect to the devices. This provides a stable and scalable
    hardware setup that allowed the company to reach its target device farm size of
    2,000 devices.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个大规模移动设备实验室的示例是Facebook在其俄勒冈州Prineville数据中心的移动设备实验室，如图9-9所示。该公司构建了一个客户服务器机架封装来容纳移动设备，设计用于阻挡WiFi信号，以防止数据中心设备之间的干扰。每个封装可以支持32台设备，由4台OCP
    Leopard服务器供电，并连接到设备。这提供了一个稳定且可扩展的硬件设置，使公司能够达到其2000台设备的目标设备农场规模。
- en: '![Photo of a data center holding mobile devices in rack enclosures.](Images/dtjd_0909.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![一张数据中心中装有机架式设备的照片。](Images/dtjd_0909.png)'
- en: Figure 9-9\. The Facebook mobile device lab in its Prineville data center ([photo
    by Antoine Reversat](https://oreil.ly/fbj35))
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-9\. Facebook在其Prineville数据中心的移动设备实验室（[Antoine Reversat拍摄的照片](https://oreil.ly/fbj35)）
- en: 'Running a large-scale device lab has challenges:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 运行大规模设备实验室存在一些挑战：
- en: Device maintenance
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 设备维护
- en: Android devices are not meant to be run 24/7 for automated testing. As a result,
    you are likely to experience higher than normal device failure and have to replace
    batteries or entire devices every year or two. Spacing out devices and keeping
    them well cooled will help with this.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备不适合全天候自动化测试。因此，您可能会经历比正常情况更高的设备故障，并且每一两年需要更换电池或整个设备。合理间隔设备并保持良好的冷却有助于解决这个问题。
- en: WiFi interference/connectivity
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: WiFi干扰/连接性
- en: WiFi networks, especially consumer-targeted WiFi routers, are not highly stable,
    especially with a large number of devices. Reducing the broadcast signal power
    of the WiFi routers and making sure they are on noncompeting network bands can
    reduce interference.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: WiFi网络，尤其是面向消费者的WiFi路由器，稳定性不高，特别是在设备数量较多的情况下。降低WiFi路由器的广播信号功率，并确保它们处于不竞争的网络频段，可以减少干扰。
- en: Cable routing
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 网线布线
- en: Running cables among all the devices and the USB hubs or computers can create
    a tangled mess. Besides being hard to maintain, this can also cause connectivity
    and charging issues. Make sure to remove all loops in the cables and use shielded
    cables and ferrite cores as necessary to reduce electromagnetic interference.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有设备和USB集线器或计算机之间布线可能会造成一团乱麻。除了难以维护外，这也可能导致连接和充电问题。确保移除所有电缆中的环圈，并根据需要使用屏蔽电缆和铁氧体磁芯以减少电磁干扰。
- en: Device reliability
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 设备可靠性
- en: Running a device lab on consumer devices comes with the general risk that consumer
    devices are not reliable. Limiting automated test runs to a finite duration will
    help prevent tests from becoming blocked on nonresponsive devices. Between tests,
    some housekeeping to remove data and free memory will help with performance and
    reliability. Finally, the Android devices as well as the servers running them
    will need to be rebooted periodically.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在消费设备上运行设备实验室有普遍风险，因为消费设备不够可靠。将自动化测试运行限制在有限的时间段内有助于防止测试因设备无响应而被阻塞。在测试之间，进行一些清理工作以删除数据并释放内存有助于提升性能和可靠性。最后，需要定期重新启动安卓设备及其运行它们的服务器。
- en: Tip
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Starting on a small scale with devices you already own is easy and can improve
    the ability to test across a range of devices and fire off automated tests in
    parallel. At a large scale, this is an effective solution to solving testing across
    the fragmented Android ecosystem, but comes with high up-front costs and ongoing
    support and maintenance.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 从您已拥有的设备开始，逐步扩展规模，并能够跨范围设备进行测试并并行启动自动化测试。在大规模上，这是解决跨碎片化的Android生态系统进行测试的有效解决方案，但需要高昂的前期成本及持续的支持和维护。
- en: The next section talks about device labs that you can get started with today
    on a simple pay-as-you-go basis.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分讨论了可以立即在简单的按需付费基础上开始使用的设备实验室。
- en: Mobile Pipelines in the Cloud
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云中的移动管道
- en: If the prospect of building your own device lab seems daunting, an easy and
    inexpensive way to get started with testing across a large range of devices is
    to use a device farm running on public cloud infrastructure. Mobile device clouds
    have the advantage of being easy to get started with and maintenance free for
    the end user. You simply select the devices you want to run tests on, and fire
    off either manual or automated tests of your application against a pool of devices.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搭建自己的设备实验室似乎令人望而却步，那么一个简单且低成本的方法是使用运行在公共云基础设施上的设备农场，以跨大范围设备进行测试。移动设备云的优势在于易于开始和对最终用户无需维护。您只需选择要运行测试的设备，并对您的应用程序针对设备池进行手动或自动化测试。
- en: Some mobile device clouds also support automated robot tests that will attempt
    to exercise all the visible UI elements of your application to identify performance
    or stability issues with your application. Once tests are run, you get a full
    report of any failures, device logs for debugging, and screenshots for tracing
    issues.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一些移动设备云还支持自动化机器人测试，这些测试将尝试操作应用程序的所有可见UI元素，以识别应用程序的性能或稳定性问题。测试运行后，您将获得任何失败的完整报告、用于调试的设备日志以及用于追踪问题的屏幕截图。
- en: Many mobile device clouds are available, with some dating back to the feature
    phone era. However, the most popular and modern device clouds have ended up aligning
    with the top three cloud providers—Amazon, Google, and Microsoft. They all have
    sizable investments in mobile test infrastructure that you can try for a reasonable
    price and have a large range of emulated and real devices to test against.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 许多移动设备云可供选择，其中一些可以追溯到功能手机时代。然而，最受欢迎和现代化的设备云已经与三大主要云服务提供商——亚马逊、谷歌和微软——达成了一致。它们都在移动测试基础设施上投入了大量资金，您可以以合理的价格尝试并使用大量模拟和真实设备进行测试。
- en: AWS device farm
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS设备农场
- en: Amazon offers a mobile device cloud as part of its public cloud services. Using
    AWS Device Farm, you can run automated tests on a variety of real-world devices
    by using your AWS account.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供了作为其公共云服务一部分的移动设备云。通过使用AWS设备农场，您可以在各种真实设备上使用您的AWS账户运行自动化测试。
- en: 'The steps to create a new AWS Device Farm test are as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的AWS设备农场测试的步骤如下：
- en: '*Upload your APK file*: To start, upload your compiled APK file or choose from
    recently updated files.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*上传您的APK文件*：首先，上传您编译的APK文件或从最近更新的文件中选择。'
- en: '*Configure your test automation*: AWS Device Farm supports a variety of test
    frameworks, including Appium tests (written in Java, Python, Node.js, or Ruby),
    Calabash, Espresso, Robotium, or UI Automator. If you don’t have automated tests,
    AWS provides two robot app testers called Fuzz and Explorer.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*配置您的测试自动化*：AWS设备农场支持多种测试框架，包括使用Java、Python、Node.js或Ruby编写的Appium测试，以及Calabash、Espresso、Robotium或UI
    Automator。如果您没有自动化测试，AWS提供了两个名为Fuzz和Explorer的机器人应用测试工具。'
- en: '*Select devices to run on*: Pick the devices that you want to run your test
    on from a user-created pool of devices or the default pool of the five most popular
    devices, as shown in [Figure 9-10](#aws_device_farm_select_device).'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*选择要运行的设备*：从用户创建的设备池或默认的五款最流行设备池中选择要在其上运行测试的设备，如[图9-10](#aws_device_farm_select_device)所示。'
- en: '*Set up the device state*: To set up the device before starting the tests,
    you can specify data or other dependent apps to install, set the radio states
    (WiFi, Bluetooth, GPS, and NFC), change the GPS coordinates, change the locale,
    and set up a network profile.'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*设置设备状态*：在开始测试之前设置设备状态，您可以指定要安装的数据或其他依赖应用程序，设置无线电状态（WiFi、蓝牙、GPS和NFC），更改GPS坐标、更改语言环境并设置网络配置文件。'
- en: '*Run your test*: Finally, you can run your test on the selected devices with
    a specified execution time-out of up to 150 minutes per device. If your tests
    execute more quickly, this can finish earlier, but this also sets a maximum cap
    on the cost of your test run.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*运行你的测试*: 最后，你可以在所选设备上运行测试，每台设备的执行超时时间可长达 150 分钟。如果你的测试执行速度更快，测试将提前结束，但同时也设置了测试运行成本的最大上限。'
- en: '![Screenshot of creating a new run on the AWS Device Farm.](Images/dtjd_0910.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![在 AWS Device Farm 上创建新运行的截图。](Images/dtjd_0910.png)'
- en: Figure 9-10\. Selecting devices to run on in the AWS Device Farm wizard
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-10\. 在 AWS Device Farm 向导中选择要运行的设备
- en: AWS Device Farm offer a free quota for individual developers to get started
    with test automation, low per-minute pricing for additional device testing, and
    monthly plans to do parallel testing on multiple devices at once. All of these
    plans operate on a shared pool of devices, which at the time of writing included
    91 total devices, 54 of which were Android devices, as shown in [Figure 9-11](#aws_device_farm_list).
    However, most of these devices were highly available, indicating that they had
    a large number of identical devices to test against. This means that you are less
    likely to get blocked in a queue or have a device you need to test against become
    unavailable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Device Farm 为个人开发者提供免费的配额以启动测试自动化，额外设备测试按分钟计费，还有月度计划可同时在多台设备上进行并行测试。所有这些计划都基于共享设备池运行，截至撰写本文时，共有
    91 台设备，其中 54 台为安卓设备，如图 [9-11](#aws_device_farm_list) 所示。然而，大多数这些设备都具有高可用性，这意味着它们有大量相同的设备可供测试。这意味着你不太可能在队列中被阻塞，或者需要测试的设备不可用。
- en: '![Screenshot of a table of devices.](Images/dtjd_0911.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![设备表格的截图。](Images/dtjd_0911.png)'
- en: Figure 9-11\. List of available devices in the AWS Device Farm
  id: totrans-224
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-11\. AWS Device Farm 中可用设备的列表
- en: Finally, AWS Device Farm offers a couple of integrations to run automated tests.
    From within Android Studio, you can run tests on the AWS Device Farm by using
    its Gradle plug-in. If you want to launch AWS Device Farm tests from your continuous
    integration system, Amazon offers a Jenkins plug-in that you can use to start
    device tests right after your local build and test automation completes.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，AWS Device Farm 提供了几种集成方式来运行自动化测试。从 Android Studio 内部，你可以使用其 Gradle 插件在 AWS
    Device Farm 上运行测试。如果你希望从持续集成系统启动 AWS Device Farm 测试，亚马逊提供了一个 Jenkins 插件，你可以在本地构建和自动化测试完成后立即使用它来启动设备测试。
- en: Google Firebase Test Lab
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Google Firebase Test Lab
- en: After Google’s acquisition of Firebase, it has been continually expanding and
    improving the offering. Firebase Test Lab is its mobile device-testing platform
    that provides similar functionality to AWS Device Farm. To get started, Google
    offers a free quota for developers to run a limited number of tests per day. Beyond
    that, you can upgrade to a pay-as-you-go plan with a flat fee per device hour.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google 收购 Firebase 后，其一直在不断扩展和改进其提供的功能。Firebase Test Lab 是其移动设备测试平台，提供与 AWS
    Device Farm 类似的功能。开始时，Google 为开发者提供免费的配额，每天运行有限数量的测试。超出此配额后，你可以升级到按设备小时计费的按需付费计划。
- en: 'Firebase Test Lab offers several ways you can fire off tests on the service:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 提供了几种可以启动服务上的测试的方式：
- en: Android Studio
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio
- en: Firebase Test Lab is integrated in Android Studio and allows you to run tests
    in its mobile device cloud just as easily as you would on local devices.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Test Lab 已集成在 Android Studio 中，使你能够在其移动设备云中轻松运行测试，就像在本地设备上运行一样。
- en: Firebase Web UI
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase Web UI
- en: From the Firebase web console, you can upload your APK and will start by running
    your first app in an automated Robo test, as shown in [Figure 9-12](#firebase_test_lab_robo).
    In addition, you can run your own automated tests using Espresso, Robotium, or
    UI Automator. Game developers have the option to run an integrated game loop that
    simulates user scenarios.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Firebase 网页控制台，你可以上传你的 APK，并将从运行你的第一个应用程序开始进行自动化的 Robo 测试，如图 [9-12](#firebase_test_lab_robo)
    所示。此外，你可以使用 Espresso、Robotium 或 UI Automator 运行你自己的自动化测试。游戏开发者可以选择运行模拟用户场景的集成游戏循环。
- en: Automated command-line scripts
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化命令行脚本
- en: You can easily integrate Firebase Test Lab into your CI system by using its
    command-line API. This allows you to integrate with Jenkins, CircleCI, JFrog Pipelines,
    or your favorite CI/CD system.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用其命令行 API 将 Firebase Test Lab 轻松集成到你的 CI 系统中。这使你能够与 Jenkins、CircleCI、JFrog
    Pipelines 或你喜欢的 CI/CD 系统集成。
- en: '![Screenshot of the Firebase web console testing an app.](Images/dtjd_0912.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![Firebase 网页控制台测试应用程序的截图。](Images/dtjd_0912.png)'
- en: Figure 9-12\. Firebase web user interface running an automated Robo test
  id: totrans-236
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-12\. Firebase web用户界面运行自动化Robo测试
- en: At the time of writing, Firebase Test Lab offered a larger collection of Android
    devices than AWS Device Farm, with 109 devices supported, as well as multiple
    API levels for popular devices. Given the tight integration with Google’s Android
    tooling and the generous free quota for individuals, this is an easy way to get
    your development team started building test automation.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Firebase测试实验室提供了比AWS设备农场更多的Android设备，支持109种设备，并支持流行设备的多个API级别。鉴于与Google的Android工具集成紧密以及个人免费配额的慷慨，这是一个让您的开发团队开始构建测试自动化的简单方法。
- en: Microsoft Visual Studio App Center
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio App Center
- en: Microsoft Visual Studio App Center, formerly Xamarin Test Cloud, offers the
    most impressive device list of any of the clouds, with 349 Android device types
    for you to run tests on, as shown in [Figure 9-13](#vs_app_center_devices). However,
    unlike AWS Device Farm and Firebase Test Lab, no free tier exists for developers
    to use the service. Microsoft does offer a 30-day trial on its service to use
    a single physical device to run tests, and paid plans where you pay by the number
    of concurrent devices you want to use, which makes sense for large enterprises.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio App Center，前身为Xamarin测试云，在所有云服务中提供了最令人印象深刻的设备列表，拥有349种Android设备类型供您进行测试，如[图9-13](#vs_app_center_devices)所示。然而，与AWS设备农场和Firebase测试实验室不同，Microsoft没有为开发者提供免费的使用服务层。Microsoft确实为其服务提供了30天的试用期，用于使用单个物理设备进行测试，并且有按并发设备数量付费的计划，这对大型企业是合理的选择。
- en: '![Screenshot of the device list in VS App Center.](Images/dtjd_0913.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![VS App Center中设备列表的屏幕截图。](Images/dtjd_0913.png)'
- en: Figure 9-13\. Visual Studio App Center device selection screen
  id: totrans-241
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-13\. Visual Studio App Center设备选择屏幕
- en: Visual Studio App Center also is missing some of the user-friendly features
    like a robot tester and simple test execution via the web console. Instead, it
    focuses on the command-line integration with the App Center CLI. From the App
    Center CLI, you can easily fire off automated tests using Appium, Calabash, Espresso,
    or XamarainUITest. Also, this makes integration with CI/CD tools straightforward.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio App Center也缺少一些用户友好的功能，比如机器人测试和通过Web控制台简单执行测试。相反，它专注于与App Center
    CLI的命令行集成。从App Center CLI，您可以轻松地使用Appium、Calabash、Espresso或XamarinUITest启动自动化测试。此外，这使得与CI/CD工具的集成变得简单直接。
- en: Overall, Visual Studio App Center wins on device coverage and has a clear focus
    on enterprise mobile device testing. However, for independent developers or smaller
    teams, it is less approachable and has higher up-front costs, but it will work
    well as you scale.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Visual Studio App Center在设备覆盖率上胜出，并且明确专注于企业移动设备测试。然而，对于独立开发者或较小团队来说，它不太易接近，并且前期成本较高，但在扩展过程中将表现良好。
- en: Planning a Device-Testing Strategy
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备测试策略的规划
- en: Now that you’ve seen the basics of setting up your own device lab and leveraging
    cloud infrastructure, you should have a better idea of how these map to your mobile
    device-testing needs.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了设置自己的设备实验室并利用云基础设施的基础知识，您应该更清楚这些如何映射到您的移动设备测试需求。
- en: 'These are advantages of going with a cloud service:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是选择云服务的优势：
- en: Low startup costs
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 初创成本低
- en: Cloud plans often offer a limited number of free device tests for developers
    and utilization-based pricing for testing on devices. When starting out with device
    testing, this is the easiest and least costly way to begin exploring manual and
    automated device testing.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 云计划通常为开发者提供有限数量的免费设备测试，并提供基于利用率的定价来进行设备测试。在开始设备测试时，这是开始探索手动和自动化设备测试的最简单和成本最低的方法。
- en: Large selection of devices
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 大量设备选择
- en: Since cloud testing providers support a large installed base of customers, they
    have a huge inventory of current and legacy phones to test against. This makes
    it possible to precisely target the device types, profiles, and configurations
    that your users are most likely to have.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云测试提供商支持大量的客户安装基地，他们拥有大量的当前和传统的手机库存进行测试。这使得能够精确地针对您的用户最有可能拥有的设备类型、配置和配置文件进行测试成为可能。
- en: Fast scale-out
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 快速扩展
- en: App development is all about viral marketing and scaling quickly. Rather than
    investing in costly infrastructure up front, cloud services allow you to scale
    up the testing as the size and popularity of your application requires a larger
    device test matrix.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 应用开发主要是关于病毒营销和快速扩展。与其一开始投资昂贵的基础设施，云服务允许您根据应用程序的大小和流行度需求扩展测试，需要更大的设备测试矩阵。
- en: Reduced capital expenditures
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 降低资本支出
- en: Building a large device lab is a costly up-front capital expenditure. By paying
    as you go for cloud infrastructure, you can delay the costs, maximizing your capital
    efficiency.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 建立一个大型设备实验室是一项高昂的前期资本支出。通过按需支付云基础设施费用，您可以延迟成本，最大化您的资本效率。
- en: Global access
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 全球访问
- en: With remote and distributed teams becoming the norm, clouds by design allow
    for easy access from your entire team, no matter where they are located.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 随着远程和分布式团队成为常态，云服务的设计允许您的整个团队轻松访问，无论他们位于何处。
- en: 'However, even given all of these benefits, the traditional approach of building
    a device lab has unique advantages. Here are some reasons you may want to build
    your own device lab:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使有了所有这些好处，建立设备实验室的传统方法也具有独特的优势。以下是您可能希望建立自己设备实验室的一些原因：
- en: Reduced cost at scale
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 规模化降低成本
- en: The total cost of ownership for a device lab that you run and maintain at scale
    is much lower than the total monthly costs from a cloud provider over the device’s
    usable lifetime. For a small team, this threshold is hard to hit, but if you are
    a large mobile corporation, this can be significant savings.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 运行和维护规模化设备实验室的总拥有成本远低于设备可用寿命期间从云服务提供商处支付的总月费用。对于小团队来说，这个门槛很难达到，但如果你是一个大型移动公司，这将是显著的节省。
- en: Fast and predictable cycle time
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 快速和可预测的周期时间
- en: With control over the device farm, you can guarantee that the tests will run
    in parallel and complete in a predictable time frame to enable responsive builds.
    Cloud providers have limited device availability and queued wait times for popular
    configurations that can limit your ability to iterate quickly.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 控制设备农场，您可以保证测试并行运行，并在可预测的时间范围内完成，以支持响应性构建。云服务提供商的设备可用性有限，并且流行配置的排队等待时间可能会限制您快速迭代的能力。
- en: No session limits
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 无会话限制
- en: Device clouds typically put hardcoded session limits on their service to prevent
    tests from hanging because of test or device failure. As the complexity of your
    test suite grows, a 30-minute hard limit can become an obstacle to completing
    testing of a complex user flow.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 设备云通常会对其服务设置硬编码会话限制，以防止因测试或设备故障而导致测试挂起。随着测试套件复杂性的增加，30分钟的硬限制可能会成为完成复杂用户流程测试的障碍。
- en: Regulatory requirements
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 法规要求
- en: In certain regulated industries such as finance and defense, security requirements
    can restrict or prohibit the ability to deploy applications and execute tests
    outside the corporate firewall. This class of corporations would require an on-premises
    device lab setup.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融和国防等特定受监管行业，安全要求可能会限制或禁止在企业防火墙之外部署应用程序和执行测试的能力。这类公司需要一个本地设备实验室设置。
- en: IoT device integration
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备集成
- en: If your use case requires the integration of mobile devices with IoT devices
    and sensors, this is not a configuration that cloud providers would provide as
    a service out of the box. You are probably better off creating a device lab with
    the IoT and mobile configuration that best matches your real-world scenario.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的用例要求将移动设备与物联网设备和传感器集成，这不是云服务提供商能够直接提供的配置。您可能最好创建一个设备实验室，配置最适合您实际场景的物联网和移动配置。
- en: Tip
  id: totrans-268
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: In some scenarios, it also makes sense to do a mix of both cloud testing and
    local device lab testing. Based on your specific requirements for cycle time,
    maintenance cost, device scale-out, and regulatory requirements, this can allow
    you to get the best of both approaches to testing.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，同时进行云测试和本地设备实验室测试也是有意义的。根据您对周期时间、维护成本、设备扩展和法规要求的具体需求，这可以让您同时获得两种测试方法的最佳效果。
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Android is the most popular mobile platform on the planet, because of its huge
    ecosystem of manufacturers and application developers. However, this is also the
    challenge with Android development: an incredibly fragmented device market with
    thousands of manufacturers producing tens of thousands of devices. Given this
    scale of fragmentation and device inconsistency, having a fully automated DevOps
    pipeline for mobile development is a necessity for success.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Android 是全球最流行的移动平台，因其庞大的制造商和应用开发者生态系统。然而，这也是 Android 开发面临的挑战之一：一个拥有数千家制造商生产数万款设备的极度分散的设备市场。鉴于这种规模的碎片化和设备不一致性，对于移动开发的成功来说，拥有完全自动化的移动开发运维管道是必不可少的。
- en: The equivalent to DevOps for web application development would be if, instead
    of three major browsers, there were thousands of unique browser types. You would
    be forced to automate to obtain any level of quality assurance, which is exactly
    why there is so much focus in the mobile space on UI test automation running on
    real devices.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 应用程序开发中，类似于 DevOps 的等价物是，如果不是三种主要的浏览器，而是成千上万种独特的浏览器类型。你将被迫自动化以获得任何质量保证水平，这正是为什么在移动领域如此关注在真实设备上运行的
    UI 测试自动化的原因。
- en: Using the tools and techniques you learned in this chapter, paired with the
    overall DevOps knowledge on source control, build promotion, and security, you
    should be ahead of your mobile DevOps peers to face the challenge of continuous
    deployments to millions of devices globally.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章学到的工具和技术，结合整体的 DevOps 知识，包括源代码控制、构建推广和安全性，你应该领先于你的移动 DevOps 同行，以面对全球数百万设备的持续部署挑战。
