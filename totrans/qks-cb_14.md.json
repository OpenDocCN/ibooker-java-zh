["```java\n./mvnw quarkus:add-extension -Dextensions=\"spring-di\"\n```", "```java\nmvn io.quarkus:quarkus-maven-plugin:1.4.1.Final:create \\\n -DprojectGroupId=org.acme.quickstart \\\n -DprojectArtifactId=spring-di-quickstart \\\n -DclassName=\"org.acme.quickstart.GreeterResource\" \\\n -Dpath=\"/greeting\" \\\n -Dextensions=\"spring-di\"\n```", "```java\ngreetings.message=Hello World\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.function.Function;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration ![1](Images/1.png)\npublic class AppConfiguration {\n\n    @Bean(name = \"suffix\") ![2](Images/2.png)\n    public Function<String, String> exclamation() {\n        return new Function<String, String>() { ![3](Images/3.png)\n            @Override\n            public String apply(String t) {\n                return t + \"!!\";\n            }\n        };\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport org.springframework.stereotype.Service;\n\n@Service ![1](Images/1.png)\npublic class PrefixService {\n\n    public String appendPrefix(String message) {\n        return \"- \" + message;\n    }\n\n}\n```", "```java\nprivate PrefixService prefixService;\n\npublic GreetingResource(PrefixService prefixService) { ![1](Images/1.png)\n    this.prefixService = prefixService;\n}\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    String prefixed = prefixService.appendPrefix(message);\n    return this.suffixComponent.apply(prefixed);\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl http://localhost:8080/greeting\n\n- Hello World!!\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"spring-web\"\n```", "```java\npackage org.acme.quickstart;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController ![1](Images/1.png)\n@RequestMapping(\"/greeting\") ![2](Images/2.png)\npublic class SpringController {\n\n  @GetMapping ![3](Images/3.png)\n  public ResponseEntity<String> getMessage() { ![4](Images/4.png)\n    return ResponseEntity.ok(\"Hello\");\n  }\n\n  @GetMapping(\"/{name}\")\n  public String hello(@PathVariable(name = \"name\") String name) { ![5](Images/5.png)\n    return \"hello \" + name;\n  }\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"spring-data-jpa\"\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.List;\n\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface DeveloperRepository extends CrudRepository<Developer, Long> { ![1](Images/1.png)\n    List<Developer> findByName(String name); ![2](Images/2.png)\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"name\":\"Ada\"}' -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 201 Created\n< Content-Length: 0\n< Location: http://localhost:8080/developer/1\n<\n* Connection #0 to host localhost left intact\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-spring-security, quarkus-spring-web, \\\n quarkus-elytron-security-properties-file\"\n```", "```java\npackage org.acme.quickstart;\n\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/hello\")\npublic class GreetingController {\n    @GetMapping\n    @Secured(\"admin\") ![1](Images/1.png)\n    public String helloAdmin() {\n        return \"hello from admin\";\n    }\n\n    @PreAuthorize(\"hasAnyRole('user')\") ![2](Images/2.png)\n    @GetMapping\n    @RequestMapping(\"/any\")\n    public String helloUsers() {\n        return \"hello from users\";\n    }\n}\n```", "```java\nquarkus.security.users.embedded.enabled=true\nquarkus.security.users.embedded.plain-text=true\nquarkus.security.users.embedded.users.alexandra=aixa\nquarkus.security.users.embedded.roles.alexandra=admin,user\nquarkus.security.users.embedded.users.ada=dev\nquarkus.security.users.embedded.roles.ada=user\n```", "```java\n@PreAuthorize(\"hasRole('admin')\")\n@PreAuthorize(\"hasRole(@roles.USER)\") ![1](Images/1.png)\n\n@PreAuthorize(\"hasAnyRole(@roles.USER, 'view')\")\n\n@PreAuthorize(\"permitAll()\")\n@PreAuthorize(\"denyAll()\")\n\n@PreAuthorize(\"isAnonymous()\")\n@PreAuthorize(\"isAuthenticated()\")\n```", "```java\n@PreAuthorize(\"#person.name == authentication.principal.username\")\npublic void doSomethingElse(Person person){}\n\n@PreAuthorize(\"@personChecker.check(#person,\n authentication.principal.username)\")\npublic void doSomething(Person person){}\n\n@Component\npublic class PersonChecker {\n    public boolean check(Person person, String username) {\n        return person.getName().equals(username);\n    }\n}\n\n@PreAuthorize(\"hasAnyRole('user', 'admin') AND #user == principal.username\")\npublic void allowedForUser(String user) {}\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-spring-di, quarkus-spring-web, \\\n quarkus-spring-boot-properties,\n quarkus-hibernate-validator\"\n```", "```java\ngreeting.message=Hello World\ngreeting.configuration.uppercase=true\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.validation.constraints.Size;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"greeting\") ![1](Images/1.png)\npublic class GreetingConfiguration {\n\n    @Size(min = 2) ![2](Images/2.png)\n    private String message;\n    private Configuration configuration; ![3](Images/3.png)\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setConfiguration(Configuration configuration) {\n        this.configuration = configuration;\n    }\n\n    public Configuration getConfiguration() {\n        return configuration;\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\npublic class Configuration {\n\n    private boolean uppercase;\n\n    public boolean isUppercase() {\n        return uppercase;\n    }\n\n    public void setUppercase(boolean uppercase) {\n        this.uppercase = uppercase;\n    }\n}\n```", "```java\n@Autowired ![1](Images/1.png)\nGreetingConfiguration greetingConfiguration;\n\n@GetMapping\npublic String hello() {\n    if (greetingConfiguration.getConfiguration().isUppercase()) { ![2](Images/2.png)\n        return greetingConfiguration.getMessage().toUpperCase();\n    }\n    return greetingConfiguration.getMessage();\n}\n```"]