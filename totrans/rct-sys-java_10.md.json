["```java\nUni<UserProfile> uni = users.getUserByName(name);\nreturn uni\n        .onItem().transform(user -> user.name)\n        .onFailure().recoverWithItem(\"anonymous\");\n```", "```java\nMulti<UserProfile> users = this.users.getAllUsers();\nreturn users\n        .onItem().transform(user -> user.name);\n```", "```java\nMulti<UserProfile> multi = users.getAllUsers();\nmulti\n        .onItem().transform(user -> user.name.toLowerCase())\n        .select().where(name -> name.startsWith(\"l\"))\n        .collect().asList()\n        .subscribe().with(\n                list -> System.out.println(\"User names starting with `l`\" + list)\n);\n```", "```java\nUni<UserProfile> uni = users.getUserByName(\"leia\");\nMulti<UserProfile> multi = users.getAllUsers();\n\nuni.subscribe().with(\n        user -> System.out.println(\"User is \" + user.name),\n        failure -> System.out.println(\"D'oh! \" + failure)\n);\n\nmulti.subscribe().with(\n        user -> System.out.println(\"User is \" + user.name),\n        failure -> System.out.println(\"D'oh! \" + failure),\n        () -> System.out.println(\"No more user\")\n);\n```", "```java\n@GET\n@Path(\"/user/{name}\")\npublic Uni<String> getUser(@PathParam(\"name\") String name) {\n    //tag::uni[]\n    Uni<UserProfile> uni = users.getUserByName(name);\n    return uni\n            .onItem().transform(user -> user.name)\n            .onFailure().recoverWithItem(\"anonymous\");\n    //end::uni[]\n}\n```", "```java\npublic Multi<Product> getRecommendations() {\n    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n            .onOverflow().drop()\n            .onItem().transformToUniAndConcatenate(\n                x -> products.getRecommendedProduct());\n}\n```", "```java\nmulti\n        .onSubscribe().invoke(sub -> System.out.println(\"Subscribed!\"))\n        .onCancellation().invoke(() -> System.out.println(\"Cancelled\"))\n        .onItem().invoke(s -> System.out.println(\"Item: \" + s))\n        .onFailure().invoke(f -> System.out.println(\"Failure: \" + f))\n        .onCompletion().invoke(() -> System.out.println(\"Completed!\"))\n        .subscribe().with(\n                item -> System.out.println(\"Received: \" + item)\n);\n```", "```java\n@POST\n@Path(\"/users/{name}\")\npublic Uni<Long> createUser(@QueryParam(\"name\") String name) {\n    return users.createUser(name)\n            .onItem().invoke(\n                l -> System.out.println(\"User created: \" + name + \", id: \" + l))\n            .onFailure().invoke(t -> System.out.println(\n                    \"Cannot create user \" + name + \": \" + t.getMessage())\n            );\n}\n```", "```java\n> curl -X POST http://localhost:8080/shop/users?name=neo\n```", "```java\nMulti<String> transformed = multi\n        .onItem().transform(String::toUpperCase)\n        .onFailure().transform(MyBusinessException::new);\n```", "```java\n@GET\n@Path(\"/products\")\npublic Multi<ProductModel> products() {\n    return products.getAllProducts()\n            .onItem().transform(p -> captializeAllFirstLetter(p.name))\n            .onItem().transform(ProductModel::new);\n}\n```", "```java\nuni\n    .onItem().transformToUni(item -> callMyRemoteService(item))\n    .subscribe().with(s -> System.out.println(\"Received: \" + s));\n\nuni\n    .onItem().transformToMulti(s -> getAMulti(s))\n    .subscribe().with(\n        s -> System.out.println(\"Received item: \" + s),\n        () -> System.out.println(\"Done!\")\n);\n```", "```java\n@GET\n@Path(\"/orders/{user}\")\npublic Multi<Order> getOrdersForUser(@PathParam(\"user\") String username) {\n    return users.getUserByName(username)\n            .onItem().transformToMulti(user -> orders.getOrderForUser(user));\n}\n```", "```java\n@GET\n@Path(\"/orders\")\npublic Multi<Order> getOrdersPerUser() {\n    return users.getAllUsers()\n            .onItem().transformToMultiAndConcatenate(\n                user -> orders.getOrderForUser(user));\n\n}\n```", "```java\n@GET\n@Path(\"/orders\")\npublic Multi<Order> getOrdersPerUser() {\n    return users.getAllUsers()\n        .onItem().transformToMultiAndMerge(user -> orders.getOrderForUser(user));\n}\n```", "```java\npublic Uni<String> addUser(String name) {\n    return users.createUser(name)\n            .onItem().transform(id -> \"New User \" + name + \" inserted\")\n            .onFailure().recoverWithItem(\n                failure -> \"User not inserted: \" + failure.getMessage());\n}\n```", "```java\npublic Uni<String> addUser(String name) {\n    return users.createUser(name)\n            .onItem().transform(id -> \"New User \" + name + \" inserted\")\n            .onFailure().retry().atMost(3);\n}\n```", "```java\nUni<String> retryAtMost = uni\n        .onFailure().retry()\n            .withBackOff(Duration.ofSeconds(3))\n            .atMost(5);\n```", "```java\n@GET\n@Path(\"/random-recommendation\")\npublic Uni<String> getRecommendation() {\n    Uni<UserProfile> uni1 = users.getRandomUser();\n    Uni<Product> uni2 = products.getRecommendedProduct();\n    return Uni.combine().all().unis(uni1, uni2).asTuple()\n            .onItem().transform(tuple -> \"Hello \" + tuple.getItem1().name +\n                    \", we recommend you \"\n                    + tuple.getItem2().name);\n}\n```", "```java\n@GET\n@Path(\"/random-recommendations\")\npublic Multi<String> getRandomRecommendations() {\n    Multi<UserProfile> u = Multi.createFrom().\n        ticks().every(Duration.ofSeconds(1)).onOverflow().drop()\n        .onItem().transformToUniAndConcatenate(\n            x -> users.getRandomUser());\n    Multi<Product> p = Multi.createFrom().ticks().every(\n        Duration.ofSeconds(1)).onOverflow().drop()\n        .onItem().transformToUniAndConcatenate(\n            x -> products.getRecommendedProduct());\n\n    return Multi.createBy().combining().streams(u, p).asTuple()\n            .onItem().transform(tuple -> \"Hello \"\n                    + tuple.getItem1().name\n                        + \", we recommend you \"\n                    + tuple.getItem2().name);\n}\n```", "```java\npublic Multi<Order> getLargeOrders() {\n    return getAllOrders()\n            .select().where(order -> order.products.size() > 3);\n}\n```", "```java\npublic Multi<Order> getOrdersForUsername(String username) {\n    return getAllOrders()\n            .select().when(order ->\n                    users.getUserByName(username)\n                        .onItem().transform(u -> u.name.equalsIgnoreCase(username))\n            );\n}\n```", "```java\npublic Multi<Product> getAllOrderedProducts() {\n    return orders.getAllOrders()\n            .onItem().transformToIterable(order -> order.products)\n            .select().distinct();\n}\n```", "```java\npublic Uni<List<Product>> getAllOrderedProductsAsList() {\n    return getAllOrderedProducts()\n            .collect().asList();\n}\n```", "```java\nUni<List<String>> itemsAsList = multi.collect().asList();\nUni<Map<String, String>> itemsAsMap = multi.collect().asMap(item ->\n    getKeyForItem(item));\nUni<Long> count = multi.collect().with(Collectors.counting());\n```"]