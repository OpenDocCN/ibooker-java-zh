- en: Appendix A. Java Then and Now
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. Java 的过去与现在
- en: 'Introduction: Always in Motion the Java Is'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言：Java 总是在不断变化
- en: 'Java has always been a moving target for developers and writers. I meet developers
    in my commercial training programs who are still not aware of some of the features
    added to ancient Java releases, let alone current ones. This appendix looks at
    each of the major releases of Java. See Jon Byous’s Sun Microsystems article “Java
    Technology: The Early Years” for a review of Java’s early history. You can also
    find a copy at the Paderborn University website.^([1](app01.html#idm45290619364584))'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java 一直是开发者和作者的移动目标。在我的商业培训项目中，我会遇到一些开发者，他们甚至还不知道一些早期的 Java 发行版新增的功能，更不用说现在了。本附录将审视每个主要的
    Java 发行版。请参阅乔恩·拜厄斯的 Sun Microsystems 文章《Java 技术：早期岁月》以了解 Java 的早期历史。你也可以在帕德博恩大学网站找到一份副本。^([1](app01.html#idm45290619364584))
- en: Details on releases prior to Java 8 are considered ancient history and have
    been moved to my website, [*https://darwinsys.com/java/ancientHistory.html*](https://darwinsys.com/java/ancientHistory.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 之前的发布详情被视为古代历史，并已移至我的网站，[*https://darwinsys.com/java/ancientHistory.html*](https://darwinsys.com/java/ancientHistory.html)。
- en: What Was New in Java 8
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 8 中的新功能
- en: Java 8 Language Changes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 8 语言变更
- en: The biggest new feature in the Java 8 language is lambda expressions. After
    a decade of debate on how to implement them, closures, or lambda expressions,
    finally arrived with Java 8. This is such a vast topic that it gets an entire
    chapter in this edition; see [Chapter 9](ch09.html#javacook-fp).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 语言中最重要的新特性是 lambda 表达式。经过十年的讨论如何实现闭包或 lambda 表达式，它们终于在 Java 8 中到来了。这个话题如此广泛，以至于在本版本中专门有一章来讨论；请参阅
    [第 9 章](ch09.html#javacook-fp)。
- en: Annotations can now be placed on structured types.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在结构化类型上放置注解。
- en: Java 8 API Changes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 8 API 变更
- en: Java 8 brings in the new date/time API from JSR-310\. This provides a more consistent
    and sensible set of classes and routines for dealing with time. [Chapter 6](ch06.html#javacook-dates)
    has been completely rewritten to use the new API, ending with a recipe showing
    various conversions between the old and new APIs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 引入了来自 JSR-310 的新日期/时间 API。这提供了一组更一致和合理的类和例程来处理时间。[第 6 章](ch06.html#javacook-dates)
    已完全重写以使用新 API，并以一个示例展示了旧 API 和新 API 之间的各种转换。
- en: Java 8 introduced functional programming techniques such as closures, `Streams`,
    and parallel collections, which we discuss in [Chapter 9](ch09.html#javacook-fp).
    In support of `Streams`, there are new methods in interfaces such as `List`, `Map`,
    and `Set`, which had until now been largely unchanged since the long-gone days
    of Java 1.1. Fortunately the Java 8 language support adds a `default` method type
    in interfaces, so your custom implementations of these interfaces are not required
    to change (as long as you make sure you change your IDE settings to an up-to-date
    compiler level).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8 引入了闭包、`Streams` 和并行集合等函数式编程技术，我们将在 [第 9 章](ch09.html#javacook-fp) 中讨论它们。为了支持
    `Streams`，接口中有了新的方法，如 `List`、`Map` 和 `Set`，这些接口自 Java 1.1 以来基本没有变化。幸运的是，Java 8
    语言支持在接口中添加了一种 `default` 方法类型，因此你的自定义接口实现不需要更改（只要确保将 IDE 设置为最新的编译器级别）。
- en: 'As one example of `default` methods in action, `Iterable` gets a new `default`
    method called `forEach()`, which lets you write code like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为默认方法的一个示例，`Iterable` 获得了一个名为 `forEach()` 的新默认方法，使你可以编写这样的代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is discussed further in [“Iterable.forEach method (Java 8)”](ch07.html#javacook-structure-iterate.Iterable.forEach).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 [“Iterable.forEach method (Java 8)”](ch07.html#javacook-structure-iterate.Iterable.forEach)
    中进一步讨论。
- en: A new JavaScript implementation codenamed *Nashorn* is available via `javax.script`
    (see [Recipe 18.3](ch18.html#javacook-otherlang-scripting)) and can also be run
    from the command line.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一种名为 *Nashorn* 的新 JavaScript 实现现在通过 `javax.script` 可用（参见 [Recipe 18.3](ch18.html#javacook-otherlang-scripting)），也可以从命令行运行。
- en: Javadoc (see [Recipe 15.2](ch15.html#javacook-packages-javadoc)) was extended
    to the `javax.tools` API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc（参见 [Recipe 15.2](ch15.html#javacook-packages-javadoc)）已扩展到 `javax.tools`
    API。
- en: Annotations can be repeated, obviating the need to manually code wrapper annotations,
    for example, `javax.persistence.NamedQueries` (plural), which is just a container
    for a list of `javax.persistence.NamedQuery` (singular) annotations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注解可以重复使用，无需手动编写包装注解，例如 `javax.persistence.NamedQueries`（复数形式），它只是 `javax.persistence.NamedQuery`（单数形式）注解的一个容器。
- en: Finally, Java provides support for Base 64 encoding/decoding in the form of
    `java.util.Base64` with two nested classes for encoding and decoding.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Java 提供了对 Base 64 编码/解码的支持，形式为 `java.util.Base64`，其中包括用于编码和解码的两个嵌套类。
- en: There were also dozens of other small changes, such as those covered by [OpenJDK](http://openjdk.java.net/projects/jdk8/features).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他小的变更，例如那些由 [OpenJDK](http://openjdk.java.net/projects/jdk8/features) 讨论的。
- en: What Was New in Java 9
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9 中的新功能
- en: Java 9 is best known for introducing the Java Platform Module System, JPMS.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 以引入 Java 平台模块系统（JPMS）而闻名。
- en: Since the JDK itself is modularized (the original intention of JPMS!), the new
    `jlink` tool lets you build a minimal JDK with only the parts needed for your
    modularized application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JDK 本身已经模块化（JPMS 的最初意图！），新的 `jlink` 工具允许您仅为模块化应用程序构建仅包含所需部分的最小 JDK。
- en: Another new tool is JShell, a REPL (Read-Evaluate-Print-Loop) expression evaluator
    for Java. Also known as an interactive Java, JShell is useful for prototyping,
    trying out new ideas, and so on. JShell is covered in [Recipe 1.4](ch01.html#javacook-getstarted-JSHELL).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新工具是 JShell，一个用于 Java 的 REPL（读取-求值-打印-循环）表达式求值器。也被称为交互式 Java，JShell 对于原型设计、尝试新想法等非常有用。JShell
    在 [Recipe 1.4](ch01.html#javacook-getstarted-JSHELL) 中有介绍。
- en: This release also marked the beginning of the six-month major release cadence,
    in which a new major release (Java 10, Java 11, etc) would be made available every
    six months. At the same time, Java 8 and Java 11 were declared to be LTS (Long-Term
    Support) releases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本还标志着每六个月发布一个新的主要版本（Java 10、Java 11 等）的开始。同时，Java 8 和 Java 11 被宣布为 LTS（长期支持）版本。
- en: Java 9 Language Changes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 9 语言变更
- en: The new *module-info* file introduces several pseudokeywords, words which have
    reserved meaning only in a *module-info* file, but can still be used as user-defined
    names in Java classes. These include module, requires, exports, provides, with,
    and a few others. This also impacts the meaning of the visibility modifiers when
    used within a module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 *module-info* 文件引入了几个伪关键字，这些词在 *module-info* 文件中具有保留意义，但仍可用作 Java 类中的用户定义名称。其中包括
    module、requires、exports、provides、with 等。这也影响了在模块内部使用时的可见性修饰符的含义。
- en: Interfaces (which added default methods in Java 8) now allow private methods
    as well, for use by default methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接口（在 Java 8 中添加了默认方法）现在还允许私有方法，供默认方法使用。
- en: Java 9 API Changes
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 9 API 变更
- en: Improvements to the Streams API, with several new methods in the `Stream` interface.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 流 API 的改进，`Stream` 接口新增了几种新方法。
- en: Improvements to the Collections API, including the `of()` factory method to
    quickly create a `List` or `Set` from several values.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 改进的集合 API，包括 `of()` 工厂方法，可以快速创建包含多个值的 `List` 或 `Set`。
- en: What Was New in Java 10 (March 2018)
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 10 新特性（2018 年 3 月）
- en: Java 10 is famous for the `var` keyword and the first actual release on the
    six-month cadence.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Java 10 以 `var` 关键字及首次实现六个月发布周期而闻名。
- en: Java 10 introduces GraalVM, a just-in-time compiler (like HotSpot) but written
    in Java.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Java 10 引入了 GraalVM，一个基于 Java 编写的即时编译器（类似于 HotSpot）。
- en: In Java 10, the OpenJDK version of the *cacerts* file is fully populated, making
    it far more likely that connecting via `https` will work out of the box.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 10 中，OpenJDK 版本的 *cacerts* 文件已完全填充，使得通过 `https` 连接的工作更加顺利。
- en: The `javah` tool for native code headers is removed, replaced by equivalent-or-better
    functionality in `javac` itself.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本地代码头文件工具 `javah` 被移除，其功能由 `javac` 自身提供了等效或更好的功能。
- en: Java 10 Language Changes
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 10 语言变更
- en: 'The `var` keyword, for local variables only, allows you to not fuss over the
    actual type of a variable. Of course the compiler must be able to infer the type
    of the variable. Let’s explore some options in `jshell`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`var` 关键字仅适用于局部变量，允许您不必担心变量的实际类型。当然，编译器必须能够推断出变量的类型。让我们在 `jshell` 中探索一些选项：'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Somewhat surprisingly, `var` is not actually a language keyword, so this word
    can still be used as a user-defined name:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有些出人意料的是，`var` 实际上不是语言关键字，因此此词仍可用作用户定义名称：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See [*https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html*](https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html)
    for explanation and more details on `var`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html*](https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html)
    了解关于 `var` 的解释和更多细节。
- en: Java 10 API Changes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 10 API 变更
- en: '`List` and `Set` add the new `copyOf()` method to make a truly unmodifiable
    copy; the previous `List.unmodifiableList()` made an *unmodifiable view*, which
    would appear to change if the underlying `List` were changed.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`List` 和 `Set` 添加了新的 `copyOf()` 方法来创建真正的不可修改副本；以前的 `List.unmodifiableList()`
    创建了一个*不可修改视图*，如果底层 `List` 更改，它将会发生变化。'
- en: See Also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Quite a few old features were removed or deprecated; see this [list on DZone](https://dzone.com/articles/java-10-new-features-and-enhancements).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 删除或弃用了相当多的旧功能；请参阅这个[DZone 上的列表](https://dzone.com/articles/java-10-new-features-and-enhancements)。
- en: Simon Ritter has an article titled [“Java 10 Pitfalls for the Unwary”](https://www.azul.com/jdk-10-pitfalls-for-the-unwary).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Simon Ritter 撰写了一篇题为[“Java 10 不慎落入陷阱”](https://www.azul.com/jdk-10-pitfalls-for-the-unwary)的文章。
- en: What Was New in Java 11 (September 2018)
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 11 的新特性（2018 年 9 月）
- en: 'Java 11 introduced what I call “single-file run-from-source” (JEP 330); you
    can now type the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Java 11 引入了我所称之为“从源码单文件运行”（JEP 330）；您现在可以输入以下内容：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and the Java command will both compile and run the named program. This makes
    it *much* easier to work with single files, which is the primary thing it works
    with. If you have two or more files, the second through *n*th must be compiled
    and on your `CLASSPATH`; the source file you specify on the command line must
    be the one with `main()` and must not be compiled on your `CLASSPATH`. So it’s
    good for simple things, but not for complex applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 `java` 命令将编译并运行指定的程序。这使得处理单个文件变得*更加*容易，这也是它的主要应用。如果您有两个或更多文件，则必须在 `CLASSPATH`
    上编译第二个到 *n* 个文件；您在命令行中指定的源文件必须是带有 `main()` 方法的文件，并且不能在 `CLASSPATH` 上编译。因此，对于简单的事物很有用，但对于复杂的应用则不适用。
- en: See also this [list on DZone](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 还请参阅[DZone 上的此列表](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11)。
- en: Java 11 API Changes
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 11 API 变更
- en: For a more complete list of Java 11 changes, see [this DZone list](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Java 11 变更的更完整列表，请参阅[此 DZone 列表](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11)。
- en: What Was New in Java 12 (March 2019)
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 12 的新变更（2019 年 3 月）
- en: Java 12 introduced the notion of *Preview Changes*, features added to the JDK
    but not yet made part of the official specification. This is basically what others
    might have called beta mode; if enough users indicate that they have serious issues
    with a Preview Mode feature, the JDK team can fix it or even kill it off before
    declaring it part of the JDK specification (or declaring it dead).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Java 12 引入了*预览变更*的概念，向 JDK 中添加的功能尚未成为官方规范的一部分。这基本上是其他人可能称之为测试模式；如果足够多的用户表示对预览模式功能有严重问题，JDK
    团队可以在将其声明为 JDK 规范的一部分之前修复或淘汰它。
- en: Java 12 Language Changes
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 12 语言变更
- en: '`switch` statements that can yield a value (Preview)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch` 语句可以返回一个值（预览版）'
- en: Java 12 API Changes
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 12 API 变更
- en: 'Some of the more visible changes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更显著的变更：
- en: A Tee Collector for `Stream`s (copies input to multiple output `Stream`s).
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 `Stream` 的 Tee Collector（将输入复制到多个输出 `Stream`）。
- en: A `CompactNumberFormat`, replacing my `ScaledNumberFormat` (prints the number
    2,048 as 2K, for example).
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompactNumberFormat` 替换了我的 `ScaledNumberFormat`（例如，将数字 2,048 打印为 2K）。'
- en: '`String.indent(n)` returns a copy of the `String` with *n* spaces prepended.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String.indent(n)` 返回在 `String` 前面添加了 *n* 个空格的副本。'
- en: 'GC improvements (JEP 189: Shenandoah: Low-Pause-Time GC); pause-time improvements
    to G1 GC.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集改进（JEP 189：Shenandoah：低暂停时间 GC）；G1 GC 的暂停时间改进。
- en: There are numerous other minor changes; see [*https://www.azul.com/39-new-features-and-apis-in-jdk-12*](https://www.azul.com/39-new-features-and-apis-in-jdk-12)
    and [*https://openjdk.java.net/projects/jdk/12*](https://openjdk.java.net/projects/jdk/12).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他次要变更，请参阅[*https://www.azul.com/39-new-features-and-apis-in-jdk-12*](https://www.azul.com/39-new-features-and-apis-in-jdk-12)和[*https://openjdk.java.net/projects/jdk/12*](https://openjdk.java.net/projects/jdk/12)。
- en: What Is New in Java 13 (September 2019)
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 13 的新特性（2019 年 9 月）
- en: 'Java 13 was the latest official release as of this writing. It includes the
    following features:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 至撰写本文时，Java 13 是最新的正式版本。它包括以下功能：
- en: Improved garbage collection (again)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的垃圾收集（再次）
- en: Improved application class-data sharing (AppCDS) to allow writing an archive
    of all classes used in an app
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的应用程序类数据共享（AppCDS）允许编写一个包含应用程序中所有使用的类的归档文件。
- en: '[Text blocks](http://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html)
    to replace and simplify multiline `String` literals (Preview)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文本块](http://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html)来替代和简化多行
    `String` 文字（预览版）'
- en: Improvements to `switch` statements that can yield a value
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的 `switch` 语句，可以返回一个值
- en: Rewrite of the `Socket` and `ServerSocket` implementation (not changing the
    API)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写了`Socket`和`ServerSocket`的实现（不改变API）。
- en: See also [this JavaWorld article](https://www.javaworld.com/article/3341388/jdk-13-the-new-features-coming-to-java-13.html).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[这篇JavaWorld文章](https://www.javaworld.com/article/3341388/jdk-13-the-new-features-coming-to-java-13.html)。
- en: Looking Ahead
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来
- en: There will be a Java 14 in 2020, around the time that this book goes to press.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年将会有一个Java 14，大约在本书印刷时期。
- en: 'These are some of the features that are in the works:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是正在开发中的一些功能：
- en: Record types (in Preview; see [Recipe 7.18](ch07.html#javacook-structure-record)).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录类型（在预览中；参见[Recipe 7.18](ch07.html#javacook-structure-record)）。
- en: 'Sealed types, which permit a class designer to control subclassing by enumerating
    all the allowed subclasses. The syntax at present looks like this:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封闭类型，允许类设计者通过列出所有允许的子类来控制子类化。目前的语法看起来是这样的：
- en: '[PRE4]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Text blocks, a.k.a. multiline text strings, delimited with a triplet of double
    quotes:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本块，即用三重双引号括起来的多行文本字符串：
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A new packaging tool, `jpackage`, which will generate a complete self-installing
    application on the main supported operating systems.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的打包工具，`jpackage`，将在主要支持的操作系统上生成一个完整的自安装应用程序。
- en: There are several other interesting JEPs for Java 14. A complete list can be
    found at [OpenJDK](https://openjdk.java.net/projects/jdk/14). The JEPs linked
    from that page are interesting reading for those interested in the rationale for
    (and the amount of work that goes into) each of these new features.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Java 14还有几个其他有趣的JEPs。完整列表可在[OpenJDK](https://openjdk.java.net/projects/jdk/14)找到。从该页面链接的JEP对于那些对每个新功能的原因（以及所需工作量）感兴趣的人来说是有趣的阅读。
- en: There will also be a Java 15 in 2020, but it entered Early Access just as this
    book was going to print, so we don’t have coverage of it in this edition. “Always
    in motion Java’s future is,” Yoda says.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年还将有一个Java 15，但它在本书印刷时刚进入早期访问阶段，因此我们在这个版本中没有覆盖它。“Java的未来总是在变动中”，如Yoda所言。
- en: '^([1](app01.html#idm45290619364584-marker)) Sun Microsystems, “Java Technology:
    The Early Years” article can be found at [*https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html*](https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html)
    and on the Paderborn University website at [*http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf*](http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](app01.html#idm45290619364584-marker)) Sun Microsystems，“Java技术：早期岁月”的文章可以在[*https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html*](https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html)和Paderborn大学网站[*http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf*](http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf)找到。
