- en: Appendix A. Java Then and Now
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Introduction: Always in Motion the Java Is'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java has always been a moving target for developers and writers. I meet developers
    in my commercial training programs who are still not aware of some of the features
    added to ancient Java releases, let alone current ones. This appendix looks at
    each of the major releases of Java. See Jon Byous’s Sun Microsystems article “Java
    Technology: The Early Years” for a review of Java’s early history. You can also
    find a copy at the Paderborn University website.^([1](app01.html#idm45290619364584))'
  prefs: []
  type: TYPE_NORMAL
- en: Details on releases prior to Java 8 are considered ancient history and have
    been moved to my website, [*https://darwinsys.com/java/ancientHistory.html*](https://darwinsys.com/java/ancientHistory.html).
  prefs: []
  type: TYPE_NORMAL
- en: What Was New in Java 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 8 Language Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The biggest new feature in the Java 8 language is lambda expressions. After
    a decade of debate on how to implement them, closures, or lambda expressions,
    finally arrived with Java 8. This is such a vast topic that it gets an entire
    chapter in this edition; see [Chapter 9](ch09.html#javacook-fp).
  prefs: []
  type: TYPE_NORMAL
- en: Annotations can now be placed on structured types.
  prefs: []
  type: TYPE_NORMAL
- en: Java 8 API Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java 8 brings in the new date/time API from JSR-310\. This provides a more consistent
    and sensible set of classes and routines for dealing with time. [Chapter 6](ch06.html#javacook-dates)
    has been completely rewritten to use the new API, ending with a recipe showing
    various conversions between the old and new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Java 8 introduced functional programming techniques such as closures, `Streams`,
    and parallel collections, which we discuss in [Chapter 9](ch09.html#javacook-fp).
    In support of `Streams`, there are new methods in interfaces such as `List`, `Map`,
    and `Set`, which had until now been largely unchanged since the long-gone days
    of Java 1.1. Fortunately the Java 8 language support adds a `default` method type
    in interfaces, so your custom implementations of these interfaces are not required
    to change (as long as you make sure you change your IDE settings to an up-to-date
    compiler level).
  prefs: []
  type: TYPE_NORMAL
- en: 'As one example of `default` methods in action, `Iterable` gets a new `default`
    method called `forEach()`, which lets you write code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is discussed further in [“Iterable.forEach method (Java 8)”](ch07.html#javacook-structure-iterate.Iterable.forEach).
  prefs: []
  type: TYPE_NORMAL
- en: A new JavaScript implementation codenamed *Nashorn* is available via `javax.script`
    (see [Recipe 18.3](ch18.html#javacook-otherlang-scripting)) and can also be run
    from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Javadoc (see [Recipe 15.2](ch15.html#javacook-packages-javadoc)) was extended
    to the `javax.tools` API.
  prefs: []
  type: TYPE_NORMAL
- en: Annotations can be repeated, obviating the need to manually code wrapper annotations,
    for example, `javax.persistence.NamedQueries` (plural), which is just a container
    for a list of `javax.persistence.NamedQuery` (singular) annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Java provides support for Base 64 encoding/decoding in the form of
    `java.util.Base64` with two nested classes for encoding and decoding.
  prefs: []
  type: TYPE_NORMAL
- en: There were also dozens of other small changes, such as those covered by [OpenJDK](http://openjdk.java.net/projects/jdk8/features).
  prefs: []
  type: TYPE_NORMAL
- en: What Was New in Java 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 9 is best known for introducing the Java Platform Module System, JPMS.
  prefs: []
  type: TYPE_NORMAL
- en: Since the JDK itself is modularized (the original intention of JPMS!), the new
    `jlink` tool lets you build a minimal JDK with only the parts needed for your
    modularized application.
  prefs: []
  type: TYPE_NORMAL
- en: Another new tool is JShell, a REPL (Read-Evaluate-Print-Loop) expression evaluator
    for Java. Also known as an interactive Java, JShell is useful for prototyping,
    trying out new ideas, and so on. JShell is covered in [Recipe 1.4](ch01.html#javacook-getstarted-JSHELL).
  prefs: []
  type: TYPE_NORMAL
- en: This release also marked the beginning of the six-month major release cadence,
    in which a new major release (Java 10, Java 11, etc) would be made available every
    six months. At the same time, Java 8 and Java 11 were declared to be LTS (Long-Term
    Support) releases.
  prefs: []
  type: TYPE_NORMAL
- en: Java 9 Language Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new *module-info* file introduces several pseudokeywords, words which have
    reserved meaning only in a *module-info* file, but can still be used as user-defined
    names in Java classes. These include module, requires, exports, provides, with,
    and a few others. This also impacts the meaning of the visibility modifiers when
    used within a module.
  prefs: []
  type: TYPE_NORMAL
- en: Interfaces (which added default methods in Java 8) now allow private methods
    as well, for use by default methods.
  prefs: []
  type: TYPE_NORMAL
- en: Java 9 API Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improvements to the Streams API, with several new methods in the `Stream` interface.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements to the Collections API, including the `of()` factory method to
    quickly create a `List` or `Set` from several values.
  prefs: []
  type: TYPE_NORMAL
- en: What Was New in Java 10 (March 2018)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 10 is famous for the `var` keyword and the first actual release on the
    six-month cadence.
  prefs: []
  type: TYPE_NORMAL
- en: Java 10 introduces GraalVM, a just-in-time compiler (like HotSpot) but written
    in Java.
  prefs: []
  type: TYPE_NORMAL
- en: In Java 10, the OpenJDK version of the *cacerts* file is fully populated, making
    it far more likely that connecting via `https` will work out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: The `javah` tool for native code headers is removed, replaced by equivalent-or-better
    functionality in `javac` itself.
  prefs: []
  type: TYPE_NORMAL
- en: Java 10 Language Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `var` keyword, for local variables only, allows you to not fuss over the
    actual type of a variable. Of course the compiler must be able to infer the type
    of the variable. Let’s explore some options in `jshell`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Somewhat surprisingly, `var` is not actually a language keyword, so this word
    can still be used as a user-defined name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See [*https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html*](https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html)
    for explanation and more details on `var`.
  prefs: []
  type: TYPE_NORMAL
- en: Java 10 API Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`List` and `Set` add the new `copyOf()` method to make a truly unmodifiable
    copy; the previous `List.unmodifiableList()` made an *unmodifiable view*, which
    would appear to change if the underlying `List` were changed.'
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quite a few old features were removed or deprecated; see this [list on DZone](https://dzone.com/articles/java-10-new-features-and-enhancements).
  prefs: []
  type: TYPE_NORMAL
- en: Simon Ritter has an article titled [“Java 10 Pitfalls for the Unwary”](https://www.azul.com/jdk-10-pitfalls-for-the-unwary).
  prefs: []
  type: TYPE_NORMAL
- en: What Was New in Java 11 (September 2018)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java 11 introduced what I call “single-file run-from-source” (JEP 330); you
    can now type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: and the Java command will both compile and run the named program. This makes
    it *much* easier to work with single files, which is the primary thing it works
    with. If you have two or more files, the second through *n*th must be compiled
    and on your `CLASSPATH`; the source file you specify on the command line must
    be the one with `main()` and must not be compiled on your `CLASSPATH`. So it’s
    good for simple things, but not for complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also this [list on DZone](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11).
  prefs: []
  type: TYPE_NORMAL
- en: Java 11 API Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a more complete list of Java 11 changes, see [this DZone list](https://dzone.com/articles/90-new-features-and-apis-in-jdk-11).
  prefs: []
  type: TYPE_NORMAL
- en: What Was New in Java 12 (March 2019)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 12 introduced the notion of *Preview Changes*, features added to the JDK
    but not yet made part of the official specification. This is basically what others
    might have called beta mode; if enough users indicate that they have serious issues
    with a Preview Mode feature, the JDK team can fix it or even kill it off before
    declaring it part of the JDK specification (or declaring it dead).
  prefs: []
  type: TYPE_NORMAL
- en: Java 12 Language Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`switch` statements that can yield a value (Preview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 12 API Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the more visible changes:'
  prefs: []
  type: TYPE_NORMAL
- en: A Tee Collector for `Stream`s (copies input to multiple output `Stream`s).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `CompactNumberFormat`, replacing my `ScaledNumberFormat` (prints the number
    2,048 as 2K, for example).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String.indent(n)` returns a copy of the `String` with *n* spaces prepended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GC improvements (JEP 189: Shenandoah: Low-Pause-Time GC); pause-time improvements
    to G1 GC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are numerous other minor changes; see [*https://www.azul.com/39-new-features-and-apis-in-jdk-12*](https://www.azul.com/39-new-features-and-apis-in-jdk-12)
    and [*https://openjdk.java.net/projects/jdk/12*](https://openjdk.java.net/projects/jdk/12).
  prefs: []
  type: TYPE_NORMAL
- en: What Is New in Java 13 (September 2019)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java 13 was the latest official release as of this writing. It includes the
    following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved garbage collection (again)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved application class-data sharing (AppCDS) to allow writing an archive
    of all classes used in an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text blocks](http://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html)
    to replace and simplify multiline `String` literals (Preview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvements to `switch` statements that can yield a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewrite of the `Socket` and `ServerSocket` implementation (not changing the
    API)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also [this JavaWorld article](https://www.javaworld.com/article/3341388/jdk-13-the-new-features-coming-to-java-13.html).
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be a Java 14 in 2020, around the time that this book goes to press.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are some of the features that are in the works:'
  prefs: []
  type: TYPE_NORMAL
- en: Record types (in Preview; see [Recipe 7.18](ch07.html#javacook-structure-record)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sealed types, which permit a class designer to control subclassing by enumerating
    all the allowed subclasses. The syntax at present looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Text blocks, a.k.a. multiline text strings, delimited with a triplet of double
    quotes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A new packaging tool, `jpackage`, which will generate a complete self-installing
    application on the main supported operating systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several other interesting JEPs for Java 14. A complete list can be
    found at [OpenJDK](https://openjdk.java.net/projects/jdk/14). The JEPs linked
    from that page are interesting reading for those interested in the rationale for
    (and the amount of work that goes into) each of these new features.
  prefs: []
  type: TYPE_NORMAL
- en: There will also be a Java 15 in 2020, but it entered Early Access just as this
    book was going to print, so we don’t have coverage of it in this edition. “Always
    in motion Java’s future is,” Yoda says.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](app01.html#idm45290619364584-marker)) Sun Microsystems, “Java Technology:
    The Early Years” article can be found at [*https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html*](https://web.archive.org/web/20090311011509/http://java.sun.com/features/1998/05/birthday.html)
    and on the Paderborn University website at [*http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf*](http://gcc.upb.de/www/WI/WI2/wi2_lit.nsf/7544f3043ee53927c12573e70058bbb6/abf8d70f07c12eb3c1256de900638899/$FILE/Java%20Technology%20-%20An%20early%20history.pdf).'
  prefs: []
  type: TYPE_NORMAL
