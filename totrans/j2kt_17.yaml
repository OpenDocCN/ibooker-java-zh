- en: Chapter 17\. Mocks to Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 17 章 Mocks 到 Maps
- en: Mocks are a common technique to decouple object-oriented code from its production
    dependencies. Are better solutions available in Kotlin?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Mocks 是一种常见的技术，用于将面向对象的代码与其生产依赖解耦。在 Kotlin 中是否有更好的解决方案？
- en: 'This is a short bonus chapter, following on from [Chapter 16](ch16.html#interfaces-to-functions).
    In that chapter, we saw that our tests used mocks because they had to implement
    two multimethod interfaces, even though most of those methods were not used. We
    left the refactoring, having replaced dependencies on multimethod interfaces with
    a dependency on just the two operations that were actually required to perform
    the task. The tests, though, still mock the whole interface, and then pass a reference
    to the required methods to the subject under test (`Recommendations`):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的额外章节，接续于 [第 16 章](ch16.html#interfaces-to-functions)。在那一章中，我们看到我们的测试使用了
    Mocks，因为它们必须实现两个多方法接口，尽管大多数方法并未使用。我们完成了重构，将多方法接口的依赖替换为仅需要执行任务的两个操作的依赖。尽管如此，测试仍然模拟整个接口，并将所需方法的引用传递给被测试对象（`Recommendations`）：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 17.1 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.1&show=diff)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.1 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.1&show=diff)'
- en: 'The tests abstract the mocking behind methods `givenFeaturedDestinationsFor`
    and `givenADistanceBetween`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将模拟抽象为方法 `givenFeaturedDestinationsFor` 和 `givenADistanceBetween`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 17.2 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.2&show=diff)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.2 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.2&show=diff)'
- en: 'Here is the implementation of `givenADistanceBetween`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `givenADistanceBetween` 的实现：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 17.3 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.3&show=diff)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.3 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.3&show=diff)'
- en: Nat is keen to point out that the mocks that he and Steve Freeman wrote about
    in [*Growing Object-Oriented Software Guided by Tests*](bibliography01.html#FP_GOOSGBT_2009)
    were never supposed to be used to implement query functionality like `findCloseTo`
    and `distanceInMetersBetween`, but only methods that change state. Duncan doesn’t
    remember noticing that, and is personally not against using mocks in this way,
    because they are still a nice way to specify what we expect of collaborators when
    practicing outside-in test-driven development, whether reading-from or writing-to.
    In the end, maybe it doesn’t matter, because in both of our experiences, most
    Java codebases have mocks that are used in this way, and most Kotlin codebases
    would be better off without them.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Nat 渴望指出，他和 Steve Freeman 在 [*Growing Object-Oriented Software Guided by Tests*](bibliography01.html#FP_GOOSGBT_2009)
    中写到的 Mocks 实际上从未打算用于实现像 `findCloseTo` 和 `distanceInMetersBetween` 这样的查询功能，而仅限于改变状态的方法。但
    Duncan 并不记得注意到这一点，而且个人并不反对以这种方式使用 Mocks，因为在实践外部驱动测试开发时，无论是读取还是写入，它们仍然是指定协作对象期望的一种好方式。最终，也许这并不重要，因为根据我们的经验，大多数
    Java 代码库都使用这种方式的 Mocks，而大多数 Kotlin 代码库在没有它们的情况下表现更好。
- en: For now though, we are still mocking, but our previous refactoring has resulted
    in our passing narrow interfaces (the function types) to the code under test.
    Now that we don’t need to implement uncalled methods, do we still need the mocks?
    Let’s see where pulling that thread takes us.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不过目前我们仍在使用 Mocks，但之前的重构导致我们向被测代码传递了窄接口（函数类型）。既然我们不需要实现未调用的方法，那么我们是否仍然需要 Mocks
    呢？让我们看看这条线索会引导我们走向何方。
- en: Replacing Mocks with Maps
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Maps 替换 Mocks
- en: Before we go on, we’ll convert the tests to Kotlin, because it has better support
    for function types. We could stay in Java, but then we would have to work out
    which of the Java function types (`Function`, `BiFunction`, etc.) expresses the
    operations. And we’d still have Java.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们将测试转换为 Kotlin，因为它对函数类型有更好的支持。我们可以继续使用 Java，但那样我们就必须弄清楚 Java 函数类型（`Function`、`BiFunction`
    等）中哪些表达了操作。而且我们仍将拥有 Java。
- en: 'The automated conversion is quite smooth, although for some reason the converter
    created lambdas rather than using method references in the `Recommendations` constructor
    call that we have to replace by hand, leaving the setup as:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自动转换非常顺利，尽管由于某种原因，转换器在`Recommendations`构造函数调用中创建了Lambda表达式而不是使用方法引用，我们必须手动替换设置为：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 17.5 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.5&show=diff)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.5 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.5&show=diff)'
- en: We could use Kotlin reified types to avoid those `::class.java` arguments, but
    we’re moving away from mocks, not toward them, so we resist.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Kotlin的具体化类型来避免那些`::class.java`参数，但我们正在摆脱模拟，而不是朝着它们前进，所以我们抵制。
- en: 'The term `when` is a keyword in Kotlin, but the converter is smart enough to
    quote it where required:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`when`这个术语是Kotlin中的关键字，但转换器足够智能，在需要时引用它：'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 17.6 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.6&show=diff)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.6 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.6&show=diff)'
- en: To see how to remove the mocking, it helps to view a function type as a mapping
    between its input parameters (as a tuple) and its result. So `destinationFinder`
    is a mapping between a single `Location` and a `List<FeaturedDestination>`, and
    `distanceInMetersBetween` is a mapping between `Pair<Location, Location>` and
    `Int`. The `Map` data structure is our way of expressing a set of mappings—the
    name isn’t accidental. So we can fake a function by populating a `Map` with parameter
    keys and result values, and replacing the function call with a lookup of the supplied
    parameters. You may have used this trick to cache the result of expensive calculations.
    Here, we won’t cache, but seed the `Map` with the parameters and result that we
    expect to see.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解如何去除嘲讽，有助于将函数类型视为其输入参数（作为元组）与其结果之间的映射。因此，`destinationFinder`是一个将单个`Location`映射到`List<FeaturedDestination>`的映射，`distanceInMetersBetween`是将`Pair<Location,
    Location>`映射到`Int`的映射。`Map`数据结构是我们表达一组映射的方式——名称不是偶然的。因此，我们可以通过使用参数键和预期结果值填充`Map`来伪造一个函数，并用提供的参数查找替换函数调用。您可能已经使用此技巧来缓存昂贵计算的结果。在这里，我们不会缓存，而是用参数和预期结果填充`Map`。
- en: 'Taking the `destinationFinder` case first, we’ll create a property to hold
    the `Map`, `featuredDestinations`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先处理`destinationFinder`案例，我们将创建一个属性来持有`Map`，`featuredDestinations`：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 17.7 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.7&show=diff)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.7 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.7&show=diff)'
- en: '`givenFeaturedDestinationsFor` can populate the `destinationLookup` `Map` rather
    than setting expectations on a mock:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`givenFeaturedDestinationsFor`可以填充`destinationLookup` `Map`，而不是在模拟上设置期望：'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 17.8 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.8&show=diff)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.8 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.8&show=diff)'
- en: 'If we make `Recommendations` read out of the `featuredDestinations` `Map`,
    we have passing tests:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使`Recommendations`从`featuredDestinations` `Map`中读取，我们的测试通过了：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 17.9 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.9&show=diff)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.9 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.9&show=diff)'
- en: '`getValue` is an extension on `Map`. It acts like `get` but respects the defaults
    set up by the `Map.withDefault` (in this case to return an `emptyList()`) and,
    hence, does not return a nullable result.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`getValue`是`Map`的扩展。它的作用类似于`get`，但遵循由`Map.withDefault`设置的默认值（在本例中返回`emptyList()`），因此不返回可空结果。'
- en: 'It won’t surprise you when we do the same for `distanceInMetersBetween`, removing
    all our dependency on Mockito:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对`distanceInMetersBetween`执行相同操作时，将会让我们完全摆脱对Mockito的依赖：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 17.10 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.10&show=diff)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.10 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.10&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.10&show=diff)'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 17.11 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.11&show=diff)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.11 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.11&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.11&show=diff)'
- en: It might take a couple of passes to see how that works; these are the details
    that mocking frameworks hide for us. You can safely ignore them and come back
    here if you ever execute this refactoring yourself.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或许需要多次尝试才能看到它的运作方式；这些是模拟框架为我们隐藏的细节。您可以放心地忽略它们，如果您将来执行此重构，请回到这里。
- en: Having to use a lambda rather than a method reference in the `Recommendations`
    constructor invocation is a bit irritating. We can tidy that up with a local `getValue`
    extension function. Did we mention how much we like extension functions?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Recommendations` 构造函数调用中，必须使用 lambda 而不是方法引用有点恼人。我们可以通过一个本地的 `getValue` 扩展函数来整理它。我们提到了我们有多喜欢扩展函数吗？
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 17.12 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.12&show=diff)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.12 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.12&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.12&show=diff)'
- en: 'This lets us say:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们说：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 17.13 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.13&show=diff)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.13 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.13&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.13&show=diff)'
- en: 'Oh, and we can improve the readability of the test methods with some judicious
    parameter naming and helper methods. Previously, we had plain function calls:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我们还可以通过一些谨慎的参数命名和辅助方法提高测试方法的可读性。以前，我们只是普通的函数调用：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Example 17.14 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.14&show=diff)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.14 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.14&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.14&show=diff)'
- en: 'A little effort yields:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一点努力就可以得到：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Example 17.15 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.15&show=diff)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.15 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.15&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.15&show=diff)'
- en: 'Sometimes defining a tiny local function like `of` can go a long way to letting
    our brains just read code rather than spending effort interpreting it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时像 `of` 这样定义一个微小的本地函数可以大幅减少我们的大脑阅读代码时的努力，而不是花费精力去解释它：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 17.16 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.16&show=diff)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.16 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.16&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=17.16&show=diff)'
- en: Faking in Kotlin
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kotlin 中伪造
- en: 'There will be times, even in Kotlin, when we want to implement just some of
    an interface’s methods for testing. On the JVM, we can combine dynamic proxies
    with anonymous objects, delegation, and selective overriding to write the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，即使在 Kotlin 中，我们也希望只为测试实现接口的一些方法。在 JVM 上，我们可以结合动态代理、匿名对象、委托和选择性重写来编写以下内容：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Have We Really Weaned Off Mocks, Though?
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 但我们真的已经摆脱了模拟吗？
- en: Ah, now that is a good question!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，现在这是一个好问题！
- en: 'In some ways, we have just implemented a poor imitation of a mocking framework:
    we have no parameter matchers, no way of failing if a method isn’t called, and
    no way of expressing execution order.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，我们只是实现了一个贫乏的模拟框架：我们没有参数匹配器，没有方法未被调用时失败的方式，也没有表达执行顺序的方式。
- en: Looked at another way though, we have implemented the recommendation engine’s
    dependencies as two maps. `Recommendations.recommendationsFor` is beginning to
    look like a simple calculation ([“Calculations”](ch07.html#calculations)). The
    result of that calculation depends on the `journey` parameter and on the contents
    of those maps that enable us to look up featured destinations and distances. We
    know that in reality *when* we call `recommendationsFor` does matter; it is really
    an action ([“Actions”](ch07.html#actions)). The distance between locations probably
    won’t change over time, but which destinations we find around a location will
    as we add or remove them from whatever database they are held in. In our tests,
    though, the distinction is moot, and we could treat `recommendationsFor` as a
    calculation in much the same way as we saw with `InMemoryTrips` in [Chapter 7](ch07.html#actions-to-calculations).
    Calculations are easier to test than actions—we just check that a given input
    returns a given output—so let’s pull on this thread.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，换个角度看，我们已经将推荐引擎的依赖项实现为两个映射。`Recommendations.recommendationsFor`开始看起来像一个简单的计算（[“计算”](ch07.html#calculations)）。该计算的结果取决于`journey`参数以及启用我们查找特色目的地和距离的那些映射的内容。实际上，我们知道*当*我们调用`recommendationsFor`确实很重要；它实际上是一个动作（[“动作”](ch07.html#actions)）。位置之间的距离可能不会随时间改变，但是我们在周围找到的目的地将会随着我们将它们从任何数据库中添加或删除而改变。不过，在我们的测试中，这种区别不重要，我们可以将`recommendationsFor`视为一种计算，就像我们在[第7章](ch07.html#actions-to-calculations)中看到的`InMemoryTrips`一样。计算比动作更容易测试——我们只需检查给定输入返回给定输出——因此让我们深入研究一下这个问题。
- en: At the moment, *when* we call `recommendationsFor` in the tests matters too,
    because the result will depend on the contents of the `featuredDestinations` and
    `distanceInMetersBetween` maps. These are initially empty, and are populated by
    calls to `givenFeaturedDestinationsFor` and `givenADistanceFrom`. That’s a time
    sensitivity right there. What we need is some way to convert an action to a calculation,
    and we can do that by manipulating scope.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，*当*我们在测试中调用`recommendationsFor`时，也很重要，因为结果将取决于`featuredDestinations`和`distanceInMetersBetween`映射的内容。这些初始为空，并通过调用`givenFeaturedDestinationsFor`和`givenADistanceFrom`进行填充。这就是时间敏感性。我们需要的是一种将动作转换为计算的方式，我们可以通过操作作用域来实现。
- en: 'In [Chapter 16](ch16.html#interfaces-to-functions), we saw that we can view
    methods as functions with some of their arguments partially applied by capturing
    them as fields. In tests, we can reverse this process. We can write a function
    that creates the object from its dependencies once for each invocation. If we
    call the populated object the *subject* of the tests, we can create it from the
    test state like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第16章](ch16.html#interfaces-to-functions)中，我们看到我们可以将方法视为通过将它们作为字段捕获而部分应用其某些参数的函数。在测试中，我们可以反向进行此过程。我们可以编写一个函数，每次调用时从其依赖项创建对象。如果我们将填充对象称为测试的*主题*，我们可以像这样从测试状态创建它：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 17.17 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.17&show=diff)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.17 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.17&show=diff)'
- en: Here we create a new instance of `Recommendations` every call so that it can
    capture immutable maps representing the state of the system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们每次调用`Recommendations`时都创建一个新的实例，以便它可以捕获代表系统状态的不可变映射。
- en: 'Now we can write a `resultFor` function that uses `subjectFor`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一个使用`subjectFor`的`resultFor`函数：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 17.18 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.18&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.18&show=diff)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17.18 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.18&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.18&show=diff)'
- en: Outside of the scope of the `resultFor` function, there is no time sensitivity,
    so it is effectively a calculation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resultFor`函数的作用域之外，没有时间敏感性，因此它实际上是一个计算。
- en: Now that we have a simple mapping of input to output (`resultFor`), we can write
    simple tests that call it. Each test can just specify the input parameters and
    check that the result is as expected, with no need for state in the test at all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了输入到输出的简单映射（`resultFor`），我们可以编写简单的测试调用它。每个测试只需指定输入参数并检查结果是否符合预期，测试中根本不需要状态。
- en: 'Every test can then be of the form:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，每个测试可以是以下形式：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Example 17.19 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.19&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.19&show=diff)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives a pleasing simplicity to the previously confusing tests:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[Example 17.20 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.20&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.20&show=diff)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s instructive to compare this with an original test:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Example 17.21 [interfaces-to-funs.0:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.21&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.21&show=diff)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, this is Java, and broken up a bit by the `givenADistanceBetween`
    calls, but you can see how this refactoring has migrated our tests from woolly
    functions that may or may not have a common structure to a clear testing of inputs
    against outputs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Moving On
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocks have their place in software, and outside-in test-driven development (TDD)
    can certainly improve our designs by allowing us to prototype how to distribute
    functionality between collaborating objects without having to commit to complete
    implementations. However, they have a habit of masking design problems by allowing
    us to test designs expressed as object interactions that would be better seen
    as data flows.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we’ve seen how focusing on data can simplify our tests, especially
    where we are only reading values. In [Chapter 20, *Performing I/O to Passing Data*](ch20.html#performing-io-to-passing-data),
    we explore how we can apply this technique to writing as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
