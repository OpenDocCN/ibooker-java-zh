- en: Chapter 17\. Mocks to Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocks are a common technique to decouple object-oriented code from its production
    dependencies. Are better solutions available in Kotlin?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This is a short bonus chapter, following on from [Chapter 16](ch16.html#interfaces-to-functions).
    In that chapter, we saw that our tests used mocks because they had to implement
    two multimethod interfaces, even though most of those methods were not used. We
    left the refactoring, having replaced dependencies on multimethod interfaces with
    a dependency on just the two operations that were actually required to perform
    the task. The tests, though, still mock the whole interface, and then pass a reference
    to the required methods to the subject under test (`Recommendations`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.1 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.1&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests abstract the mocking behind methods `givenFeaturedDestinationsFor`
    and `givenADistanceBetween`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.2 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.2&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the implementation of `givenADistanceBetween`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.3 [interfaces-to-funs.7:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.3&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Nat is keen to point out that the mocks that he and Steve Freeman wrote about
    in [*Growing Object-Oriented Software Guided by Tests*](bibliography01.html#FP_GOOSGBT_2009)
    were never supposed to be used to implement query functionality like `findCloseTo`
    and `distanceInMetersBetween`, but only methods that change state. Duncan doesn’t
    remember noticing that, and is personally not against using mocks in this way,
    because they are still a nice way to specify what we expect of collaborators when
    practicing outside-in test-driven development, whether reading-from or writing-to.
    In the end, maybe it doesn’t matter, because in both of our experiences, most
    Java codebases have mocks that are used in this way, and most Kotlin codebases
    would be better off without them.
  prefs: []
  type: TYPE_NORMAL
- en: For now though, we are still mocking, but our previous refactoring has resulted
    in our passing narrow interfaces (the function types) to the code under test.
    Now that we don’t need to implement uncalled methods, do we still need the mocks?
    Let’s see where pulling that thread takes us.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing Mocks with Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go on, we’ll convert the tests to Kotlin, because it has better support
    for function types. We could stay in Java, but then we would have to work out
    which of the Java function types (`Function`, `BiFunction`, etc.) expresses the
    operations. And we’d still have Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'The automated conversion is quite smooth, although for some reason the converter
    created lambdas rather than using method references in the `Recommendations` constructor
    call that we have to replace by hand, leaving the setup as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.5 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.5&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: We could use Kotlin reified types to avoid those `::class.java` arguments, but
    we’re moving away from mocks, not toward them, so we resist.
  prefs: []
  type: TYPE_NORMAL
- en: 'The term `when` is a keyword in Kotlin, but the converter is smart enough to
    quote it where required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.6 [mocks-to-maps.0:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.6&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: To see how to remove the mocking, it helps to view a function type as a mapping
    between its input parameters (as a tuple) and its result. So `destinationFinder`
    is a mapping between a single `Location` and a `List<FeaturedDestination>`, and
    `distanceInMetersBetween` is a mapping between `Pair<Location, Location>` and
    `Int`. The `Map` data structure is our way of expressing a set of mappings—the
    name isn’t accidental. So we can fake a function by populating a `Map` with parameter
    keys and result values, and replacing the function call with a lookup of the supplied
    parameters. You may have used this trick to cache the result of expensive calculations.
    Here, we won’t cache, but seed the `Map` with the parameters and result that we
    expect to see.
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking the `destinationFinder` case first, we’ll create a property to hold
    the `Map`, `featuredDestinations`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.7 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.7&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '`givenFeaturedDestinationsFor` can populate the `destinationLookup` `Map` rather
    than setting expectations on a mock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.8 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.8&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we make `Recommendations` read out of the `featuredDestinations` `Map`,
    we have passing tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.9 [mocks-to-maps.1:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.9&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '`getValue` is an extension on `Map`. It acts like `get` but respects the defaults
    set up by the `Map.withDefault` (in this case to return an `emptyList()`) and,
    hence, does not return a nullable result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It won’t surprise you when we do the same for `distanceInMetersBetween`, removing
    all our dependency on Mockito:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.10 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.10&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.11 [mocks-to-maps.2:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.11&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: It might take a couple of passes to see how that works; these are the details
    that mocking frameworks hide for us. You can safely ignore them and come back
    here if you ever execute this refactoring yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Having to use a lambda rather than a method reference in the `Recommendations`
    constructor invocation is a bit irritating. We can tidy that up with a local `getValue`
    extension function. Did we mention how much we like extension functions?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.12 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.12&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This lets us say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.13 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.13&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Oh, and we can improve the readability of the test methods with some judicious
    parameter naming and helper methods. Previously, we had plain function calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.14 [mocks-to-maps.3:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.14&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A little effort yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.15 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.15&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes defining a tiny local function like `of` can go a long way to letting
    our brains just read code rather than spending effort interpreting it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.16 [mocks-to-maps.4:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.16&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Faking in Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There will be times, even in Kotlin, when we want to implement just some of
    an interface’s methods for testing. On the JVM, we can combine dynamic proxies
    with anonymous objects, delegation, and selective overriding to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Have We Really Weaned Off Mocks, Though?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ah, now that is a good question!
  prefs: []
  type: TYPE_NORMAL
- en: 'In some ways, we have just implemented a poor imitation of a mocking framework:
    we have no parameter matchers, no way of failing if a method isn’t called, and
    no way of expressing execution order.'
  prefs: []
  type: TYPE_NORMAL
- en: Looked at another way though, we have implemented the recommendation engine’s
    dependencies as two maps. `Recommendations.recommendationsFor` is beginning to
    look like a simple calculation ([“Calculations”](ch07.html#calculations)). The
    result of that calculation depends on the `journey` parameter and on the contents
    of those maps that enable us to look up featured destinations and distances. We
    know that in reality *when* we call `recommendationsFor` does matter; it is really
    an action ([“Actions”](ch07.html#actions)). The distance between locations probably
    won’t change over time, but which destinations we find around a location will
    as we add or remove them from whatever database they are held in. In our tests,
    though, the distinction is moot, and we could treat `recommendationsFor` as a
    calculation in much the same way as we saw with `InMemoryTrips` in [Chapter 7](ch07.html#actions-to-calculations).
    Calculations are easier to test than actions—we just check that a given input
    returns a given output—so let’s pull on this thread.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, *when* we call `recommendationsFor` in the tests matters too,
    because the result will depend on the contents of the `featuredDestinations` and
    `distanceInMetersBetween` maps. These are initially empty, and are populated by
    calls to `givenFeaturedDestinationsFor` and `givenADistanceFrom`. That’s a time
    sensitivity right there. What we need is some way to convert an action to a calculation,
    and we can do that by manipulating scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 16](ch16.html#interfaces-to-functions), we saw that we can view
    methods as functions with some of their arguments partially applied by capturing
    them as fields. In tests, we can reverse this process. We can write a function
    that creates the object from its dependencies once for each invocation. If we
    call the populated object the *subject* of the tests, we can create it from the
    test state like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.17 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.17&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Here we create a new instance of `Recommendations` every call so that it can
    capture immutable maps representing the state of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can write a `resultFor` function that uses `subjectFor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.18 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.18&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.18&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Outside of the scope of the `resultFor` function, there is no time sensitivity,
    so it is effectively a calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a simple mapping of input to output (`resultFor`), we can write
    simple tests that call it. Each test can just specify the input parameters and
    check that the result is as expected, with no need for state in the test at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every test can then be of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.19 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.19&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.19&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives a pleasing simplicity to the previously confusing tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.20 [mocks-to-maps.5:src/test/java/travelator/recommendations/RecommendationsTests.kt]](https://java-to-kotlin.dev/code.html?ref=17.20&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.20&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s instructive to compare this with an original test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 17.21 [interfaces-to-funs.0:src/test/java/travelator/recommendations/RecommendationsTests.java]](https://java-to-kotlin.dev/code.html?ref=17.21&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=17.21&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, this is Java, and broken up a bit by the `givenADistanceBetween`
    calls, but you can see how this refactoring has migrated our tests from woolly
    functions that may or may not have a common structure to a clear testing of inputs
    against outputs.
  prefs: []
  type: TYPE_NORMAL
- en: Moving On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocks have their place in software, and outside-in test-driven development (TDD)
    can certainly improve our designs by allowing us to prototype how to distribute
    functionality between collaborating objects without having to commit to complete
    implementations. However, they have a habit of masking design problems by allowing
    us to test designs expressed as object interactions that would be better seen
    as data flows.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we’ve seen how focusing on data can simplify our tests, especially
    where we are only reading values. In [Chapter 20, *Performing I/O to Passing Data*](ch20.html#performing-io-to-passing-data),
    we explore how we can apply this technique to writing as well.
  prefs: []
  type: TYPE_NORMAL
