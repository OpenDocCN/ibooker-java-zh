- en: Chapter 4\. Browser-Agnostic Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter reviews those features of Selenium WebDriver that are interoperable
    in different web browsers. In this group, a relevant multipurpose characteristic
    is executing JavaScript. Also, the Selenium WebDriver API allows configuring timeouts
    for page and script loading. Another convenient feature is making screenshots
    of the browser screen, or only the portion corresponding to a given element. Then,
    we can manage different aspects of the controlled browser using WebDriver, such
    as browser size and position, history, or cookies. Then, WebDriver provides various
    assets for controlling specific web elements, such as dropdown lists (i.e., HTML
    select fields and data lists), navigation targets (i.e., windows, tabs, frames,
    and iframes), or dialog boxes (i.e., alerts, prompts, confirmations, and modal
    dialogs). Finally, we discover how to handle local and session data using web
    storage, implement event listeners, and use the exceptions provided by the Selenium
    WebDriver API.
  prefs: []
  type: TYPE_NORMAL
- en: Executing JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript is a high-level programming language supported by all major browsers.
    We can use JavaScript in the client side of web applications for a wide variety
    of operations, such as DOM manipulation, user interaction, handling requests-responses
    from remote servers, or working with regular expressions, among many other functions.
    Luckily for test automation, Selenium WebDriver allows injecting and executing
    arbitrary pieces of JavaScript. To that aim, Selenium WebDriver API provides the
    interface `JavascriptExecutor`. [Table 4-1](#js-methods) introduces the available
    public methods in this interface grouped into three categories: synchronous, pinned,
    and asynchronous scripts. The subsections following provide more details and illustrate
    their use through different examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-1\. JavascriptExecutor methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Category | Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Synchronous scripts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Execute JavaScript code on the current page. |'
  prefs: []
  type: TYPE_TB
- en: '| Pinned scripts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| Attach a piece of JavaScript to a WebDriver session. The *pinned* scripts
    can be used multiple times while the WebDriver session is alive. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| Detach a previously pinned script to the WebDriver session. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| Collect all pinned scripts (each one identified by a unique `ScriptKey`).
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| Call previously pinned script (identified with its `ScriptKey`). |'
  prefs: []
  type: TYPE_TB
- en: '| Asynchronous scripts |'
  prefs: []
  type: TYPE_TB
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| Execute JavaScript code (typically an asynchronous operation) on the current
    page. The difference with `executeScript()` is that scripts executed with `executeAsyncScript()`
    must explicitly signal their termination by invoking a callback function. By convention,
    this callback is injected into the script as its last argument. |'
  prefs: []
  type: TYPE_TB
- en: Any driver object that inherits from the class `RemoteWebDriver` also implements
    the `JavascriptExecutor` interface. Therefore, when using a major browser (e.g.,
    `ChromeDriver`, `FirefoxDriver`, etc.) declared using the generic `WebDriver`
    interface, we can cast it to `JavascriptExecutor` as shown in the following snippet.
    Then, we can use the executor (using variable `js` in the example) to invoke the
    methods presented in [Table 4-1](#js-methods).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Synchronous Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The method `executeScript()` of a `JavascriptExecutor` object allows executing
    a piece of JavaScript in the context of the current web page in a WebDriver session.
    The invocation of this method (in Java) blocks the control flow until the script
    terminates. Therefore, we typically use this method for executing synchronous
    scripts in a web page under test. The method `executeScript()` allows two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`String script`'
  prefs: []
  type: TYPE_NORMAL
- en: Mandatory JavaScript fragment to be executed. This code is executed in the body
    of the current page as an anonymous function (i.e., a JavaScript function without
    a name).
  prefs: []
  type: TYPE_NORMAL
- en: '`Object... args`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional arguments script. These arguments must be one of the following types:
    number, boolean, string, `WebElement`, or a `List` of these types (otherwise,
    WebDriver throws an exception). These arguments are available in the injected
    script using the `arguments` built-in JavaScript variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the script returns some value (i.e., the code contains a `return` statement),
    the Selenium WebDriver `executeScript()` method also returns a value in Java (otherwise,
    `executeScript()` returns `null`). The possible returned types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WebElement`'
  prefs: []
  type: TYPE_NORMAL
- en: When returning an HTML element
  prefs: []
  type: TYPE_NORMAL
- en: '`Double`'
  prefs: []
  type: TYPE_NORMAL
- en: For decimals
  prefs: []
  type: TYPE_NORMAL
- en: '`Long`'
  prefs: []
  type: TYPE_NORMAL
- en: For nondecimal numbers
  prefs: []
  type: TYPE_NORMAL
- en: '`Boolean`'
  prefs: []
  type: TYPE_NORMAL
- en: For boolean values
  prefs: []
  type: TYPE_NORMAL
- en: '`List<Object>`'
  prefs: []
  type: TYPE_NORMAL
- en: For arrays
  prefs: []
  type: TYPE_NORMAL
- en: '`Map<String, Object>`'
  prefs: []
  type: TYPE_NORMAL
- en: For key-value collections
  prefs: []
  type: TYPE_NORMAL
- en: '`String`'
  prefs: []
  type: TYPE_NORMAL
- en: For all other cases
  prefs: []
  type: TYPE_NORMAL
- en: 'The situations that require executing JavaScript with Selenium WebDriver are
    very heterogeneous. The following subsections review two cases where the Selenium
    WebDriver does not provide built-in features, and instead, we need to use JavaScript
    to automate them: scrolling a web page and handling a color picker in a web form.'
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained in [Chapter 3](ch03.html#ch03), Selenium WebDriver allows impersonating
    different mouse actions, including click, right-click, or double-click, among
    others. Nevertheless, scrolling down or up a web page is not possible using the
    Selenium WebDriver API. Instead, we can achieve this automation easily by executing
    a simple JavaScript line. [Example 4-1](#scrolling-example-1) shows a basic example
    using a practice web page (see the URL of this page in the first line of the test
    method).
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-1\. Test executing JavaScript to scroll down a pixels amount
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Open a practice web page containing very long text (see [Figure 4-1](#long-page)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Cast the `driver` object to `JavascriptExecutor`. We will use the variable `js`
    to execute JavaScript in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Execute a piece of JavaScript code. In this case, we call the JavaScript function
    `scrollBy()` to scroll the document by a given amount (in this case, 1,000 px
    down). Notice that this fragment does not use `return`, and therefore, we do not
    receive any returned object in the Java logic. In addition, we are not passing
    any argument to the script.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0401](assets/hosw_0401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. Practice web page with long content
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Example 4-2](#scrolling-example-2) shows another test using scrolling and
    the same example web page as before. This time, instead of moving a fixed number
    of pixels, we move the document scroll until the last paragraph in the web page.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-2\. Test executing JavaScript to scroll down to a given element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: To make this test robust, we specify an implicit timeout. Otherwise, the test
    might fail if the page is not entirely loaded when executing the subsequent commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We locate the last paragraph in the web page using a CSS selector.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We define the script to be injected into the page. Notice the script does not
    return any value, but as a novelty, it uses the first function argument to invoke
    the JavaScript function `scrollIntoView()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We execute the previous script, passing the located `WebElement` as an argument.
    This element will be the first argument for the script (i.e., `arguments[0]`).
  prefs: []
  type: TYPE_NORMAL
- en: The last example of scrolling is *infinite scroll*. This technique enables the
    dynamic loading of more content when the user reaches the end of the web page.
    Automating this kind of web page is an instructive use case since it involves
    different aspects of the Selenium WebDriver API. For example, you can use a similar
    approach to crawl web pages using Selenium WebDriver. [Example 4-3](#scrolling-example-3)
    shows a test using an infinite scroll page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-3\. Test executing JavaScript in an infinite scroll page
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define an explicit wait since we need to pause the test until the new content
    is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We find the initial number of paragraphs on the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We locate the last paragraph of the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We scroll down into this element.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO3-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We wait until more paragraphs are available on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Color picker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *color picker* in HTML is an input type that allows users to select a color
    by clicking and dragging the cursor using a graphical area. The practice web form
    contains one of these elements (see [Figure 4-2](#color-picker)).
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0402](assets/hosw_0402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. Color picker in the practice web form
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The following code shows the HTML markup for the color picker. Notice that it
    sets an initial color value (otherwise, the default color is black).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 4-4](#color-picker-example) illustrates how to interact with this
    color picker. Because the Selenium WebDriver API does not provide any asset to
    control color pickers, we use JavaScript. In addition, this test also illustrates
    the use of `Color`, a support class available in the Selenium WebDriver API for
    working with colors.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-4\. Test executing JavaScript to interact with a color picker
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We locate the color picker by name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the initial value of the color picker (it should be `#563d7c`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We define a color to work with using the following RGBA components: red=255
    (maximum value), green=0 (minimum value), blue=0 (minimum value), and alpha=1
    (maximum value, i.e., fully opaque).'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use JavaScript to change the value selected in the color picker. Alternatively,
    we can change the selected color invoking the statement `colorPicker.sendKeys(red.asHex());`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO4-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the resulting value of the color picker (it should be `#ff0000`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO4-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert that the color is different from the initial value, but as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Pinned Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Selenium WebDriver API allows you to *pin* scripts in Selenium WebDriver
    4\. This feature enables attaching JavaScript fragments to a WebDriver session,
    assigning a unique key to each snippet, and executing these snippets on demand
    (even on different web pages). [Example 4-5](#pinned-script-example) shows a test
    using *pinned* scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-5\. Test executing JavaScript as pinned scripts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We attach a JavaScript fragment to locate an element in the web page. Notice
    that we could do the same with the standard WebDriver API. Nevertheless, we use
    this approach for demo purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We attach another piece of JavaScript that returns whatever we pass to it as
    a first parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the set of pinned scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the number of pinned scripts is as expected (i.e., `2`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO5-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We execute the first pinned script. As a result, we get the third link in the
    web page as a `WebElement` in Java.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO5-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on this link, which should correspond to the practice web link. As
    a result, the browser should navigate to that page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_agnostic_features_CO5-7)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the current URL is different from the initial one.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_agnostic_features_CO5-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We execute the second pinned script. Notice that it is possible to run the pinned
    script even though the page has changed in the browser (since the script is attached
    to the session and not to a single page).
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_browser_agnostic_features_CO5-9)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the returned message is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[![10](assets/10.png)](#co_browser_agnostic_features_CO5-10)'
  prefs: []
  type: TYPE_NORMAL
- en: We unpin one of the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '[![11](assets/11.png)](#co_browser_agnostic_features_CO5-11)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the number of pinned scripts is as expected (i.e., `1` at this point).
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous Scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The method `executeAsyncScript()` of the `JavascriptExecutor` interface allows
    executing JavaScript scripts in the context of a web page using Selenium WebDriver.
    In the same way that `executeScript()` explained previously, `executeAsyncScript()`
    executes an anonymous function with the provided JavaScript code in the body of
    the current page. The execution of this function blocks the Selenium WebDriver
    control flow. The difference is that in `executeAsyncScript()`, we must explicitly
    signal the script termination by invoking a *done* callback. This callback is
    injected into the executed script as the last argument (i.e., `arguments[arguments.length
    - 1]`) in the corresponding anonymous function. [Example 4-6](#async-script-example)
    shows a test using this mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-6\. Test executing asynchronous JavaScript
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define a pause time of `2` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We define the script to be executed. In the first line, we define a constant
    for the callback (i.e., the last script argument). After that, we use the JavaScript
    function `window.setTimeout()` to pause the script execution for a given amount
    of time.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO6-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the current system time (in milliseconds).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO6-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We execute the script. If everything works as expected, the test execution blocks
    in this line for second seconds (as defined in step 1).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO6-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We calculate the time required to execute the previous line.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO6-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the elapsed time is as expected (typically, some milliseconds above
    the defined pause time).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can find an additional example that executes an asynchronous script on [“Notifications”](ch05.html#push_notifications).
  prefs: []
  type: TYPE_NORMAL
- en: Timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver allows specifying three types of timeouts. We can use them
    by invoking the method `manage().timeouts()` in the Selenium WebDriver API. The
    first timeout is the implicit wait, already explained in [“Implicit Wait”](ch03.html#implicit_wait)
    (as part of waiting strategies). The other options are page loading and script
    loading timeouts, explained next.
  prefs: []
  type: TYPE_NORMAL
- en: Page Loading Timeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *page loading timeout* provides a time limit to interrupt a navigation attempt.
    In other words, this timeout limits the time in which a web page is loaded. When
    this timeout (which has a default value of 30 seconds) is exceeded, an exception
    is thrown. [Example 4-7](#page-loading-timeout) shows an example of this timeout.
    As you can see, this piece of code is a dummy implementation of a *negative* test.
    In other words, it checks unexpected conditions in the SUT.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-7\. Test using a page loading timeout
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the minimum possible page loading timeout, which is one millisecond.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We load a web page. This invocation (implemented as Java lambda) will fail since
    it is impossible to load that web page in less than one millisecond. For this
    reason, the exception `TimeoutException` is expected to be thrown in the lambda,
    using the AssertJ method `assertThatThrownBy`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can play with this test by removing the timeout declaration (i.e., step
    1). If you do that, the test will fail since an exception is expected but not
    thrown.
  prefs: []
  type: TYPE_NORMAL
- en: Script Loading Timeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *script loading timeout* provides a time limit to interrupt a script that
    is being evaluated. This timeout has a default value of three hundred seconds.
    [Example 4-8](#script-timeout) shows a test using a script loading timeout.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-8\. Test using a script loading timeout
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define a script timeout of three seconds. This means that a script lasting
    for more than that time will throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We execute an asynchronous script that pauses the execution of five seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The script execution time is greater than the configured script timeout, resulting
    in a `ScriptTimeoutException`. Again, this example is a negative test, i.e., designed
    to expect this exception.
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selenium WebDriver is used mainly to carry out end-to-end functional testing
    of web applications. In other words, we use it to verify that web applications
    behave as expected by interacting with their user interface (i.e., using a web
    browser). This approach is very convenient to automate high-level user scenarios,
    but it also presents different difficulties. One of the main challenges in end-to-end
    testing is to diagnose the underlying cause of a failed test. Supposing the failure
    is legitimate (i.e., not induced by a poorly implemented test), the root cause
    might be diverse: the client side (e.g., incorrect JavaScript logic), the server
    side (e.g., internal exception), or the integration with other components (e.g.,
    inadequate access to the database), among other reasons. One of the most pervasive
    mechanisms used in Selenium WebDriver for failure analysis is making browser screenshots.
    This section presents the mechanisms provided by the Selenium WebDriver API.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[“Failure Analysis”](ch08.html#failure_analysis) reviews the framework-specific
    techniques to determine when a test has failed to carry out different failure
    analysis techniques, such as screenshots, recordings, and log gathering.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium WebDriver provides the interface `TakesScreenshot` for making browser
    screenshots. Any driver object inheriting from `RemoteWebDriver` (see [Figure 2-2](ch02.html#webdriver-hierarchy))
    also implements this interface. Thus, we can cast a `WebDriver` object that instantiates
    one of the major browsers (e.g., `ChromeDriver`, `FirefoxDriver`, etc.) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The interface `TakesScreenshot` only provides a method called `getScreenshotAs(OutputType<X>
    target)` to make screenshots. The parameter `OutputType<X> target` determines
    the screenshot type and the returned value. [Table 4-2](#output-types-for-screenshots)
    shows the available alternatives for this parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-2\. OutputType parameters
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description | Return | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '| Make screenshot as a PNG file (located in a temporary system directory) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '| Make a screenshot in Base64 format (i.e., encoded as an ASCII string) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '| Make a screenshot as a raw byte array |'
  prefs: []
  type: TYPE_TB
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The method `getScreenshotAs()` allows making screenshots of the browser viewport.
    In addition, Selenium WebDriver 4 allows creating full-page screenshots using
    different mechanisms (see [“Full-page screenshot”](ch05.html#fullpage-screenshot)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 4-9](#screenshots-example-1) shows a test for taking a browser screenshot
    in PNG format. [Example 4-10](#screenshots-example-2) shows another test for creating
    a screenshot as a Base64 string. The resulting screenshot is shown in [Figure 4-3](#screenshot).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-9\. Test making a screenshot as a PNG file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We make the browser screen a PNG file.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This file is located in a temporary folder by default, so we move it to a new
    file called `screenshot.png` (in the root project folder).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use standard Java to move the screenshot file to the new location.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO9-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use assertions to verify that the target file exists.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0403](assets/hosw_0403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-3\. Browser screenshot of the practice site index page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 4-10\. Test making a screenshot as Base64
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We make the browser screen in Base64 format.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We append the prefix `data:image/png;base64,` to the Base64 string and log it
    in the standard output. You can copy and paste this resulting string in a browser
    navigation bar to display the picture.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert that the screenshot string has content.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Logging the screenshot in Base64 as presented in the previous example could
    be very useful for diagnosing failures when running tests in CI servers in which
    we do not have access to the file system (e.g., GitHub Actions).
  prefs: []
  type: TYPE_NORMAL
- en: WebElement Screenshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `WebElement` interface extends the `TakesScreenshot` interface. This way,
    it is possible to make partial screenshots of the visible content of a given web
    element. (See [Example 4-11](#screenshots-example-3).) Notice that this test is
    very similar to the previous one using PNG files, but in this case, we invoke
    the method `getScreenshotAs()` directly using a web element. [Figure 4-4](#webelement-screenshot)
    shows the resulting screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-11\. Test making a partial screenshot as a PNG file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![hosw 0404](assets/hosw_0404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-4\. Partial screenshot of the practice web form
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Window Size and Position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Selenium WebDriver API allows manipulating browser size and position very
    easily using the `Window` interface. This type is accessible from a driver object
    using the following statement. [Table 4-3](#window-methods) shows the available
    methods in this interface. Then, [Example 4-12](#window-example-1) shows a basic
    test about this feature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Table 4-3\. Window methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '| Get the current window size. It returns the outer window dimension, not just
    the *viewport* (i.e., the visible area of a web page for end users). |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '| Change the current window size (again, its outer dimension, and not the viewport).
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '| Get current window position (relative to the upper left corner of the screen).
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '| Change the current window position (again, relative to the screen’s upper
    left corner). |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '| Maximize the current window. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '| Minimize the current window. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '| Fullscreen the current window. |'
  prefs: []
  type: TYPE_TB
- en: Example 4-12\. Test reading and changing the browser size and position
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the window position.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the window size.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO11-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We maximize the browser window.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO11-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the maximized position (and size, in the following line) is different
    from the original window.
  prefs: []
  type: TYPE_NORMAL
- en: Browser History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium WebDriver allows manipulating the browser history through the `Navigation`
    interface. The following statement illustrates how to access this interface from
    a `WebDriver` object. Using this interface is quite simple. [Table 4-4](#navigation-methods)
    shows its public methods, and [Example 4-13](#navigation-example-1) shows a basic
    example. Notice that this test navigates into different web pages using these
    methods, and at the end of the test, it verifies the web page URL is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Table 4-4\. Navigation methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '| Go back in the browser history |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '| Go forward in the browser history |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '| Load a new web page in the current window |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '| Refresh the current page |'
  prefs: []
  type: TYPE_TB
- en: Example 4-13\. Test using navigation methods
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The Shadow DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As introduced in [“The Document Object Model (DOM)”](ch03.html#dom), the DOM
    is a programming interface that allows us to represent and manipulate a web page
    using a tree structure. The *shadow DOM* is a feature of this programming interface
    that enables the creation of scoped subtrees inside the regular DOM tree. The
    shadow DOM allows the encapsulation of a group of a DOM subtree (called *shadow
    tree*, as represented in [Figure 4-5](#shadow-dom-representation)) that can specify
    different CSS styles from the original DOM. The node in the regular DOM in which
    the shadow tree is attached is called the *shadow host*. The root node of the
    shadow tree is called the *shadow root*. As represented in [Figure 4-5](#shadow-dom-representation),
    the shadow tree is flattened into the original DOM in a single composed tree to
    be rendered in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0405](assets/hosw_0405.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5\. Schematic representation of the shadow DOM
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The shadow DOM is part of the standard suite (together with HTML templates or
    custom elements) that allows the implementation of [web components](https://github.com/WICG/webcomponents)
    (i.e., reusable custom elements for web applications).
  prefs: []
  type: TYPE_NORMAL
- en: The shadow DOM allows the creation of self-contained components. In other words,
    the shadow tree is isolated from the original DOM. This feature is useful for
    web design and composition, but it can be challenging for automated testing with
    Selenium WebDriver (since the regular location strategies cannot find web elements
    within the shadow tree). Luckily, Selenium WebDriver 4 provides a `WebElement`
    method that allows access to the shadow DOM. [Example 4-14](#shadow_dom_example)
    demonstrates this use.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-14\. Test reading the shadow DOM
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We open the practice web page that contains a shadow tree. You can inspect the
    source code of this page to check the JavaScript method used to create a shadow
    tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We locate the shadow host element.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO12-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the shadow root from the host element. As a result, we get an instance
    of `SearchContext`, an interface implemented by `WebDriver` and `WebElement`,
    that allows us to find elements using the methods `findElement()` and `find​Ele⁠ments()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO12-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We find the first paragraph element in the shadow tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO12-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the text content of the shadow element is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This feature of the W3C WebDriver specification is recent at the time of this
    writing, and therefore might not be implemented in all drivers (e.g., chromedriver,
    geckodriver). For instance, it is available starting with version 96 of both Chrome
    and Edge.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP 1.x is a stateless protocol, meaning that the server does not track the
    user state. In other words, web servers do not remember users across different
    requests. The cookies mechanism is an extension to HTTP that allows tracking users
    by sending small pieces of text called *cookies* from server to client. These
    cookies must be sent back by clients, and this way, servers remember their clients.
    Cookies allow you to maintain web sessions or personalize the user experience
    on the website, among other functions.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers allow managing the browser cookies manually. Selenium WebDriver
    enables an equivalent manipulation, but programmatically. The Selenium WebDriver
    API provides the methods shown in [Table 4-5](#cookies-methods) to accomplish
    this. They are accessible through the `manage()` function of a `WebDriver` object.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-5\. Cookies management methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '| Add a new cookie |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '| Delete an existing cookie by name |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '| Delete an existing cookie by instance |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '| Delete all cookies |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '| Get all cookies |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '| Get a cookie by name |'
  prefs: []
  type: TYPE_TB
- en: 'As this table shows, the `Cookie` class provides an abstraction to a single
    cookie in Java. [Table 4-6](#cookie-methods) summarizes the methods available
    in this class. In addition, this class has several constructors, which positionally
    accept the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`String name`'
  prefs: []
  type: TYPE_NORMAL
- en: Cookie name (mandatory)
  prefs: []
  type: TYPE_NORMAL
- en: '`String value`'
  prefs: []
  type: TYPE_NORMAL
- en: Cookie value (mandatory)
  prefs: []
  type: TYPE_NORMAL
- en: '`String domain`'
  prefs: []
  type: TYPE_NORMAL
- en: Domain in which the cookie is visible (optional)
  prefs: []
  type: TYPE_NORMAL
- en: '`String path`'
  prefs: []
  type: TYPE_NORMAL
- en: Path in which the cookie is visible (optional)
  prefs: []
  type: TYPE_NORMAL
- en: '`Date expiry`'
  prefs: []
  type: TYPE_NORMAL
- en: Cookie expiration date (optional)
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean isSecure`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the cookie requires a secure connection (optional)
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean isHttpOnly`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether this cookie is an HTTP-only cookie, i.e., the cookie is not accessible
    through a client-side script (optional)
  prefs: []
  type: TYPE_NORMAL
- en: '`String sameSite`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether this cookie is a same-site cookie, i.e., the cookie is restricted to
    a first-party or same-site context (optional)
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-6\. Cookie methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie name |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie value |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie domain |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie path |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '| Read if cookie requires a secure connection |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '| Read if cookie is HTTP-only |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie expiry date |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '| Read cookie same-site context |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '| Check the different fields of the cookie and throw an `IllegalArgumen⁠t​Exception`
    if it encounters any problem |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '| Map cookie values as a key-value map |'
  prefs: []
  type: TYPE_TB
- en: 'The following examples show different tests managing web cookies with the Selenium
    WebDriver API. These examples use a practice web page that shows the site cookies
    on the GUI (see [Figure 4-6](#cookies)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 4-15](#read-cookies) illustrates how to read the existing cookies
    of a website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 4-16](#add-cookies) shows how to add new cookies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 4-17](#edit-cookies) explains how to edit existing cookies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 4-18](#delete-cookies) demonstrates how to delete cookies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![hosw 0406](assets/hosw_0406.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-6\. Practice web page for web cookies
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 4-15\. Test reading existing cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the `Options` object used to manage cookies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We read all the cookies available on this page. It should contain two cookies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the cookie with the name `username`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO13-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The value of the previous cookie should be `John Doe`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO13-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The last statement does not affect the test. We invoke this command to check
    the cookies in the browser GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-16\. Test adding new cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new cookie.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We add the cookie to the current page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO14-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the value of the cookie just added.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO14-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify this value is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-17\. Test editing existing cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We read an existing cookie.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO15-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a new cookie reusing the previous cookie name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO15-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We add the new cookie to the web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO15-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the cookie just added.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO15-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the cookie has been correctly edited.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-18\. Test deleting existing cookies
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We read all cookies.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO16-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the cookie with the name `username`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO16-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We delete the previous cookie.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO16-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the size of the cookies is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Dropdown Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A typical element in web forms is dropdown lists. These fields allow users
    to select one or more elements within an option list. The classical HTML tags
    used to render these fields are `<select>` and `<options>`. As usual, the practice
    web form contains one of these elements (see [Figure 4-7](#select)), defined in
    HTML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '![hosw 0407](assets/hosw_0407.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-7\. Select field in the practice web form
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These elements are very spread out in web forms. For this reason, Selenium WebDriver
    provides a helper class called `Select` to simplify their manipulation. This class
    wraps a select `WebElement` and provides a wide variety of features. [Table 4-7](#select-methods)
    summarizes the public methods available in the `Select` class. After that, [Example 4-19](#select_test)
    shows a basic test using this class.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-7\. Select methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '| Constructor using a `WebElement` as parameter (it must be a `<select>` element);
    otherwise it throws an `UnexpectedTagNameException` |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '| Get wrapped `WebElement` (i.e., the one used in the constructor) |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '| Whether the select element supports selecting multiple options |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '| Read all options that belong to the select element |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '| Read all selected options |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '| Read first selected option |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '| Select all options that match a given displayed text |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '| Select an option by index number |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '| Select option(s) by value attribute |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '| Deselect all options |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '| Deselect option(s) by value attribute |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '| Deselect by index number |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '| Deselect options that match a given displayed text |'
  prefs: []
  type: TYPE_TB
- en: Example 4-19\. Test interacting with a select field
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We find the select element by name and use the resulting `WebElement` to instantiate
    a `Select` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We select one of the options available in this select, using a by-text strategy.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the selected option text is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Data List Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to implement dropdown lists in HTML is using *data lists*. Although
    data lists are very similar to select elements from a graphical point of view,
    there is a clear distinction between them. On the one hand, select fields display
    an options list, and users choose one (or several) of the available options. On
    the other hand, data lists show a list of suggested options associated with an
    input form (text) field, and users are free to select one of those suggested values
    or type a custom value. The practice web form contains one of these data lists.
    You can find its markup in the following snippet and a screenshot in [Figure 4-8](#datalist).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '![hosw 0408](assets/hosw_0408.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-8\. Data list field in the practice web form
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Selenium WebDriver does not provide a custom helper class to manipulate data
    lists. Instead, we need to interact with them as standard input texts, with the
    distinction that their options are displayed when clicking on the input field.
    [Example 4-20](#datalist_test) shows a test illustrating this.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-20\. Test interacting with a data list field
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO18-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We locate the input field used for the data list.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO18-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on it to display its options.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO18-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We find the second option.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO18-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the value of the located option.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO18-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We type that value in the input field.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO18-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the option value is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation Targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When navigating web pages using a browser, by default, we use a single page
    corresponding to the URL in the navigation bar. Then, we can open another page
    in a new browser tab. This second tab can be explicitly opened when a link defines
    the attribute `target`, or the user can force navigation to a new tab, typically
    by using the modifier key Ctrl (or Cmd in macOS) together with the mouse click
    into a web link. Another possibility is opening web pages in new windows. For
    this, web pages typically use the JavaScript command `window.open(url)`. Another
    way of displaying different pages at the same time is using *frames* and *iframes*.
    A frame is an HTML element type that defines a particular area (into a set called
    *frameset*) where a web page can be displayed. An iframe is another HTML element
    that allows embedding an HTML page into the current one.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using frames is not encouraged since these elements have many drawbacks, such
    as performance and accessibility problems. I explain how to use them through Selenium
    WebDriver for compatibility reasons. Nevertheless, I strongly recommend avoiding
    frames on brand-new web applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Selenium WebDriver API provides the interface `TargetLocator` to deal with
    the previously mentioned targets (i.e., tabs, windows, frames, and iframes). This
    interface allows changing the focus of the future commands of a `WebDriver` object
    (to a new tab, windows, etc.). This interface is accessible by invoking the method
    `switchTo()` in a `WebDriver` object. [Table 4-8](#targetlocator-methods) describes
    its public methods.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-8\. TargetLocator methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '| Change focus to a frame (or iframe) by index number. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '| Change focus to a frame (or iframe) by name or id. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '| Change focus to a frame (or iframe) previously located as a WebElement. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '| Change focus to the parent context. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '| Switch the focus to another window, by name or *handle*. A window handle
    is a hexadecimal string that univocally identifies a window or tab. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '| Creates a new browser window (using `WindowType.WINDOW`) or tab (`WindowType.TAB`)
    and switches the focus to it. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '| Select the main document (when using iframes) or the first frame on the page
    (when using a frameset). |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '| Get the element currently selected. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '| Change focus to a window alert (see [“Dialog Boxes”](#dialog_boxes_sect)
    for further details). |'
  prefs: []
  type: TYPE_TB
- en: Tabs and Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 4-21](#tabs_example) shows a test where we open a new tab for navigating
    a second web page. [Example 4-22](#window_example) shows an equivalent case but
    for opening a new window for the second web page. Notice that the difference between
    these examples is only the parameter `WindowType.TAB` and `WindowType.WINDOW`.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-21\. Test opening a new tab
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO19-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We navigate to a web page.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO19-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We get the current window handle.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO19-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a new tab and change the focus to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO19-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We open another web page (since the focus is in the second tab, the page is
    opened in the second tab).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO19-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the number of window handles at this point is 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO19-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We change the focus to the initial window (using its handle).
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_agnostic_features_CO19-7)'
  prefs: []
  type: TYPE_NORMAL
- en: We close only the current window. The second tab remains open.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_agnostic_features_CO19-8)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the number of window handles now is 1.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-22\. Test opening a new window
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO20-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This line is different in the examples. In this case, we open a new window (instead
    of a tab) and focus on it.
  prefs: []
  type: TYPE_NORMAL
- en: Frames and Iframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 4-23](#iframe_example) shows a test in which the web page under test
    contains an iframe. [Example 4-24](#frame_example) shows the equivalent case but
    using a frameset.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-23\. Test handling iframes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO21-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a web page that contains an iframe (see [Figure 4-9](#iframes)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO21-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use an explicit wait for waiting for the frame and switching to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO21-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use another explicit wait to pause until the paragraphs contained in the
    iframe are available.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO21-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the number of paragraphs is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0409](assets/hosw_0409.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-9\. Practice web page using an iframe
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 4-24\. Test handling frames
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO22-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a web page that contains a frameset (see [Figure 4-10](#frames)).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO22-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We wait for the frame to be available. Note that steps 2 and 3 in [Example 4-23](#iframe_example)
    are equivalent to this step.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO22-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We change the focus to this frame.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0410](assets/hosw_0410.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-10\. Practice web page using frames
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Dialog Boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript provides different dialog boxes (sometimes called *pop-ups*) to
    interact with the user, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Alert
  prefs: []
  type: TYPE_NORMAL
- en: To show a message and wait for the user to press the button OK (only choice
    in the dialog). For instance, the following code will open a dialog that displays
    “Hello world!” and waits for the user to press the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Confirm
  prefs: []
  type: TYPE_NORMAL
- en: 'To show a dialog box with a question and two buttons: OK and Cancel. For instance,
    the following code will open a dialog showing the message “Is this correct?” and
    prompting the user to click on OK or Cancel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Prompt
  prefs: []
  type: TYPE_NORMAL
- en: To show a dialog box with a text message, an input text field, and the buttons
    OK and Cancel. For example, the following code shows a pop-up displaying “Please
    enter your name,” a dialog box in which the user can type, and two buttons (OK
    and Cancel).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: In addition, CSS allows implementing another type of dialog box called *modal
    window*. This dialog disables the main window (but keeps it visible) while overlaying
    a child pop-up, typically showing a message and some buttons. You can find a sample
    page on the practice web page containing all these dialog boxes (alert, confirm,
    prompt, and modal). [Figure 4-11](#dialog-boxes) shows a screenshot of this page
    when the modal dialog is active.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0411](assets/hosw_0411.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-11\. Practice web page with dialog boxes (alert, confirm, prompt, and
    modal)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Alerts, Confirms, and Prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Selenium WebDriver API provides the interface `Alert` to manipulate JavaScript
    dialogs (i.e., alerts, confirms, and prompts). [Table 4-9](#alert-methods) describes
    the methods provided by this interface. Then, [Example 4-25](#alert_example) shows
    a basic test interacting with an alert.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-9\. Alert methods
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '| To click OK |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '| To read the dialog message |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '| To click Cancel (not available in alerts) |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '| To type some string in the input text (only available in prompts) |'
  prefs: []
  type: TYPE_TB
- en: Example 4-25\. Test handling an alert dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO23-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We open the practice web page that launches dialog boxes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO23-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on the left button to launch a JavaScript alert.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO23-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We wait until the alert dialog is displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO23-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We change the focus to the alert pop-up.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO23-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the alert text is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO23-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on the OK button of the alert dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can replace steps 3 and 4 with a single explicit wait statement, as follows
    (you can find it in a second test in the same class in the examples repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: The next test ([Example 4-26](#confirm_example)) illustrates how to deal with
    a confirm dialog. Notice this example is quite similar to the previous one, but
    in this case, we can invoke the method `dismiss()` to click on the Cancel button
    available on the confirm dialog. Finally, [Example 4-27](#prompt_example) shows
    how to manage a prompt dialog. In this case, we can type a string into the input
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-26\. Test handling a confirm dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Example 4-27\. Test handling a prompt dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Modal Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modal windows are dialog boxes built with basic CSS and HTML. For this reason,
    Selenium WebDriver does not provide any specific utility for manipulating them.
    Instead, we use the standard WebDriver API (locators, waits, etc.) to interact
    with modal windows. [Example 4-28](#modal_example) shows a basic test using the
    practice web page that contains dialog boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-28\. Test handling a modal dialog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Web Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The [Web Storage API](https://html.spec.whatwg.org/multipage/webstorage.html)
    allows web applications to store data locally in the client file system. This
    API provides two JavaScript objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`window.localStorage`'
  prefs: []
  type: TYPE_NORMAL
- en: To store data permanently
  prefs: []
  type: TYPE_NORMAL
- en: '`window.sessionStorage`'
  prefs: []
  type: TYPE_NORMAL
- en: To store data during the session time (data is deleted when the browser tab
    is closed)
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium WebDriver provides the interface `WebStorage` for manipulating the
    Web Storage API. Most of the `WebDriver` types supported by Selenium WebDriver
    inherit this interface: `ChromeDriver`, `EdgeDriver`, `FirefoxDriver`, `OperaDriver`,
    and `SafariDriver`. This way, we can use this feature of these browsers. [Example 4-29](#web_storage)
    demonstrates this use in Chrome. This test uses both types of web storage (local
    and session).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-29\. Test using web storage
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO24-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We cast the driver object to `WebStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO24-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We log the number of elements of local storage.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO24-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We log the session storage (it should contain two elements).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO24-4)'
  prefs: []
  type: TYPE_NORMAL
- en: After adding a new element, there should be three elements in the session storage.
  prefs: []
  type: TYPE_NORMAL
- en: Event Listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Selenium WebDriver API allows creating *listeners* that notify events happening
    in `WebDriver` and derived objects. In former versions of Selenium WebDriver,
    this feature was accessible through the class `EventFiringWebDriver`. This class
    is deprecated as of Selenium WebDriver 4, and instead, we should use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EventFiringDecorator`'
  prefs: []
  type: TYPE_NORMAL
- en: Wrapper class for `WebDriver` and derived objects (e.g., `WebElement`, `TargetLocator`,
    etc.). It allows registering one or more listeners (i.e., `WebDriverListener`
    instances).
  prefs: []
  type: TYPE_NORMAL
- en: '`WebDriverListener`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interface that should implement the listeners registered in the decorator.
    It supports three types of events:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Before* events'
  prefs: []
  type: TYPE_NORMAL
- en: Logic inserted just before some event starts
  prefs: []
  type: TYPE_NORMAL
- en: '*After* events'
  prefs: []
  type: TYPE_NORMAL
- en: Logic inserted just after some event terminates
  prefs: []
  type: TYPE_NORMAL
- en: '*Error* events'
  prefs: []
  type: TYPE_NORMAL
- en: Logic inserted before an exception is thrown
  prefs: []
  type: TYPE_NORMAL
- en: To implement an event listener, first, we should create a listener class. In
    other words, we need to create a class that implements the `WebDriverListener`.
    This interface defines all its methods using the `default` keyword, and therefore,
    it is optional to override their methods. Thanks to that feature (available as
    of Java 8), our class should only implement the method we need. There are plenty
    of listener methods available, for instance, `afterGet()` (executed *after* calling
    to the method `get()` in a `WebDriver` instance), or `beforeQuit()` (executed
    *before* calling to the `quit()` method in a `WebDriver` instance), to name a
    few. My recommendation for checking all these listeners is to use your favorite
    IDE to discover the possible methods to be overridden/implemented. [Figure 4-12](#webdriverlistener)
    shows the wizard for doing this in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0412](assets/hosw_0412.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-12\. WebDriverListener methods in Eclipse
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once we have implemented our listener, we need to create the decorator class.
    There are two ways to do that. If we want to decorate a `WebDriver` object, we
    can create an instance of `EventFiringDecorator` (passing the listener as the
    argument to the constructor) and then invoke the method `decorate()` to pass the
    `WebDriver` object. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way is to decorate other objects of the Selenium WebDriver API,
    namely `WebElement`, `TargetLocator`, `Navigation`, `Options`, `Timeouts`, `Window`,
    `Alert`, or `VirtualAuthenticator`. In this case, we need to invoke the method
    `createDecorated()` in an `EventFiringDecorator` object to get a `Decorated<T>`
    generic class. The following snippet shows an example using a `WebElement` as
    a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at a completed example. First, [Example 4-30](#eventlistener) shows
    the class that implements the `WebDriverListener` interface. Notice this class
    implements two methods: `afterGet()` and `beforeQuit()`. Both methods call `takeScreenshot()`
    to take a browser screenshot. All in all, we are collecting browser screenshots
    just after loading a web page (typically at the beginning of the test) and before
    quitting (typically at the end of the test). Then, [Example 4-31](#eventfiringdecorator)
    shows the test that uses this listener.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-30\. Event listener implementing methods afterGet() and beforeQuit()
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO25-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We override this method to execute custom logic *after* loading web pages with
    the `WebDriver` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO25-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We override this method to execute custom logic *before* quitting the `WebDriver`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO25-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use a unique name for the PNG screenshots. For that, we get the system date
    (date and time) plus the session identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-31\. Test using EventFiringDecorator and the previous listener
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO26-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a decorated `WebDriver` object using an instance on `MyEventListener`.
    We use the resulting `driver` to control the browser in the `@Test` logic.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO26-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We click on a web link to change the page. The resulting two screenshots taken
    in the listener should be different.
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the exceptions provided by the WebDriver API inherit from the class `WebDriverException`
    and are *unchecked* (see the following sidebar if you are unfamiliar with this
    terminology). [Figure 4-13](#webdriver-exceptions) shows these exceptions in Selenium
    WebDriver 4\. As this image shows, there are many different exception types. [Table 4-10](#webdriver-exceptions-table)
    summarizes some of the most common causes.
  prefs: []
  type: TYPE_NORMAL
- en: '![hosw 0413](assets/hosw_0413.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-13\. Selenium WebDriver exceptions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Table 4-10\. Usual WebDriver exceptions and common causes
  prefs: []
  type: TYPE_NORMAL
- en: '| Exception | Description | Common causes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '| Web element not available |'
  prefs: []
  type: TYPE_TB
- en: Invalid locator strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The element has not been rendered (maybe you need to wait for it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '| Dialog (alert, prompt, or confirm) not available | Trying to perform an action
    (e.g., `accept()` or `dismiss()`) into an unavailable dialog |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '| Window or tab not available | Trying to switch into an unavailable window
    or tab |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '| Frame or iframe not available | Trying to switch into an unavailable frame
    or iframe |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '| Incorrect argument when calling some method of the Selenium WebDriver API
    |'
  prefs: []
  type: TYPE_TB
- en: Bad URL in navigation methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonexistent path when uploading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bad argument type in a JavaScript script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '| The element is *stale*, i.e., it no longer appears on the page | The DOM
    gets updated when trying to interact with a previously located element |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '| Problem communicating with the browser |'
  prefs: []
  type: TYPE_TB
- en: The connection with the remote browser could not be established
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The browser died in the middle of a WebDriver session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '| Page loading timeout | Some web page takes longer than expected to load |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '| Script loading timeout | Some script takes longer than expected to execute
    |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '| The element is on the DOM but is not visible/selectable/clickable |'
  prefs: []
  type: TYPE_TB
- en: Insufficient (or nonexistent) wait until the element is displayed/selectable/clickable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page layout (perhaps caused by viewport change) makes that element overlay
    on the element we try to interact with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Outlook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided a comprehensive review of those WebDriver API features
    interoperable in different web browsers. Among them, you discovered how to execute
    JavaScript with Selenium WebDriver, with synchronous, pinned (i.e., attached to
    a WebDriver session), and asynchronous scripts. Then, you learned about timeouts,
    used to specify a time limit interval for page loading and script execution. Also,
    you saw how to manage several browser aspects, such as size and position, navigation
    history, the shadow DOM, and cookies. Next, you discovered how to interact with
    specific web elements, such as dropdown lists (select and data lists), navigation
    targets (windows, tabs, frames, and iframes), and dialog boxes (alerts, prompts,
    confirms, and modals). Finally, we reviewed the mechanism for implementing web
    storage and event listeners in Selenium WebDriver 4 and the most relevant WebDriver
    exceptions (and their common causes).
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter continues to expose the features of the Selenium WebDriver
    API. The chapter explains those aspects specific to a given browser (e.g., Chrome,
    Firefox, etc.), including browser capabilities (e.g., `ChromeOptions`, `FirefoxOptions`,
    etc.), the Chrome DevTools Protocol (CDP), network interception, mocking geolocation
    coordinates, the WebDriver BiDirectional (BiDi) protocol, authentication mechanisms,
    or printing web pages to PDF, among other features.
  prefs: []
  type: TYPE_NORMAL
