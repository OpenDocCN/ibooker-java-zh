- en: Chapter 4\. Browser-Agnostic Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 浏览器无关特性
- en: This chapter reviews those features of Selenium WebDriver that are interoperable
    in different web browsers. In this group, a relevant multipurpose characteristic
    is executing JavaScript. Also, the Selenium WebDriver API allows configuring timeouts
    for page and script loading. Another convenient feature is making screenshots
    of the browser screen, or only the portion corresponding to a given element. Then,
    we can manage different aspects of the controlled browser using WebDriver, such
    as browser size and position, history, or cookies. Then, WebDriver provides various
    assets for controlling specific web elements, such as dropdown lists (i.e., HTML
    select fields and data lists), navigation targets (i.e., windows, tabs, frames,
    and iframes), or dialog boxes (i.e., alerts, prompts, confirmations, and modal
    dialogs). Finally, we discover how to handle local and session data using web
    storage, implement event listeners, and use the exceptions provided by the Selenium
    WebDriver API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章回顾了 Selenium WebDriver 中在不同 Web 浏览器中可互操作的特性。在此组中，一个相关的多功能特性是执行 JavaScript。此外，Selenium
    WebDriver API 允许配置页面和脚本加载的超时时间。另一个方便的功能是对浏览器屏幕进行截图，或仅截取给定元素对应的部分。然后，我们可以使用 WebDriver
    管理受控浏览器的不同方面，如浏览器大小和位置、历史记录或 cookies。然后，WebDriver 提供了各种资产来控制特定的 Web 元素，如下拉列表（即
    HTML 选择字段和数据列表）、导航目标（即窗口、选项卡、框架和 iframe）或对话框（即警报、提示、确认和模态对话框）。最后，我们学习如何使用 Web
    存储处理本地和会话数据，实现事件侦听器，并使用 Selenium WebDriver API 提供的异常。
- en: Executing JavaScript
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行 JavaScript
- en: 'JavaScript is a high-level programming language supported by all major browsers.
    We can use JavaScript in the client side of web applications for a wide variety
    of operations, such as DOM manipulation, user interaction, handling requests-responses
    from remote servers, or working with regular expressions, among many other functions.
    Luckily for test automation, Selenium WebDriver allows injecting and executing
    arbitrary pieces of JavaScript. To that aim, Selenium WebDriver API provides the
    interface `JavascriptExecutor`. [Table 4-1](#js-methods) introduces the available
    public methods in this interface grouped into three categories: synchronous, pinned,
    and asynchronous scripts. The subsections following provide more details and illustrate
    their use through different examples.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种高级编程语言，被所有主要浏览器支持。我们可以在 Web 应用程序的客户端使用 JavaScript 进行各种操作，如 DOM
    操作、用户交互、处理来自远程服务器的请求-响应或与正则表达式工作等。对于测试自动化而言，幸运的是 Selenium WebDriver 允许注入和执行任意
    JavaScript 片段。为此，Selenium WebDriver API 提供了 `JavascriptExecutor` 接口。[表格 4-1](#js-methods)
    介绍了此接口中可用的公共方法，分为同步、固定和异步脚本三类。随后的小节提供了更多详细信息，并通过不同示例展示了它们的使用。
- en: Table 4-1\. JavascriptExecutor methods
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 4-1\. JavascriptExecutor 方法
- en: '| Category | Method | Return | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 分类 | 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Synchronous scripts |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 同步脚本 |'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Execute JavaScript code on the current page. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 在当前页面上执行 JavaScript 代码。 |'
- en: '| Pinned scripts |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 固定脚本 |'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| Attach a piece of JavaScript to a WebDriver session. The *pinned* scripts
    can be used multiple times while the WebDriver session is alive. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 将 JavaScript 片段附加到 WebDriver 会话中。*固定* 脚本可在 WebDriver 会话处于活动状态时多次使用。 |'
- en: '|'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Detach a previously pinned script to the WebDriver session. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 分离先前固定的脚本与 WebDriver 会话。 |'
- en: '|'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Collect all pinned scripts (each one identified by a unique `ScriptKey`).
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 收集所有固定脚本（每个脚本由唯一的 `ScriptKey` 标识）。 |'
- en: '|'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| Call previously pinned script (identified with its `ScriptKey`). |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 调用先前固定的脚本（使用其 `ScriptKey` 标识）。 |'
- en: '| Asynchronous scripts |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 异步脚本 |'
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| Execute JavaScript code (typically an asynchronous operation) on the current
    page. The difference with `executeScript()` is that scripts executed with `executeAsyncScript()`
    must explicitly signal their termination by invoking a callback function. By convention,
    this callback is injected into the script as its last argument. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 在当前页面上执行 JavaScript 代码（通常是异步操作）。与 `executeScript()` 的区别在于，使用 `executeAsyncScript()`
    执行的脚本必须显式地通过调用回调函数来标识其终止。按照惯例，此回调函数作为其最后一个参数注入到脚本中。 |'
- en: Any driver object that inherits from the class `RemoteWebDriver` also implements
    the `JavascriptExecutor` interface. Therefore, when using a major browser (e.g.,
    `ChromeDriver`, `FirefoxDriver`, etc.) declared using the generic `WebDriver`
    interface, we can cast it to `JavascriptExecutor` as shown in the following snippet.
    Then, we can use the executor (using variable `js` in the example) to invoke the
    methods presented in [Table 4-1](#js-methods).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Synchronous Scripts
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The method `executeScript()` of a `JavascriptExecutor` object allows executing
    a piece of JavaScript in the context of the current web page in a WebDriver session.
    The invocation of this method (in Java) blocks the control flow until the script
    terminates. Therefore, we typically use this method for executing synchronous
    scripts in a web page under test. The method `executeScript()` allows two arguments:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '`String script`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Mandatory JavaScript fragment to be executed. This code is executed in the body
    of the current page as an anonymous function (i.e., a JavaScript function without
    a name).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '`Object... args`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional arguments script. These arguments must be one of the following types:
    number, boolean, string, `WebElement`, or a `List` of these types (otherwise,
    WebDriver throws an exception). These arguments are available in the injected
    script using the `arguments` built-in JavaScript variable.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'When the script returns some value (i.e., the code contains a `return` statement),
    the Selenium WebDriver `executeScript()` method also returns a value in Java (otherwise,
    `executeScript()` returns `null`). The possible returned types are:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '`WebElement`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: When returning an HTML element
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`Double`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: For decimals
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`Long`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: For nondecimal numbers
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '`Boolean`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: For boolean values
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '`List<Object>`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: For arrays
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`Map<String, Object>`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: For key-value collections
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`String`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: For all other cases
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The situations that require executing JavaScript with Selenium WebDriver are
    very heterogeneous. The following subsections review two cases where the Selenium
    WebDriver does not provide built-in features, and instead, we need to use JavaScript
    to automate them: scrolling a web page and handling a color picker in a web form.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As explained in [Chapter 3](ch03.html#ch03), Selenium WebDriver allows impersonating
    different mouse actions, including click, right-click, or double-click, among
    others. Nevertheless, scrolling down or up a web page is not possible using the
    Selenium WebDriver API. Instead, we can achieve this automation easily by executing
    a simple JavaScript line. [Example 4-1](#scrolling-example-1) shows a basic example
    using a practice web page (see the URL of this page in the first line of the test
    method).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-1\. Test executing JavaScript to scroll down a pixels amount
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO1-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Open a practice web page containing very long text (see [Figure 4-1](#long-page)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO1-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Cast the `driver` object to `JavascriptExecutor`. We will use the variable `js`
    to execute JavaScript in the browser.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将`driver`对象转换为`JavascriptExecutor`。我们将使用变量`js`在浏览器中执行JavaScript。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO1-3)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO1-3)'
- en: Execute a piece of JavaScript code. In this case, we call the JavaScript function
    `scrollBy()` to scroll the document by a given amount (in this case, 1,000 px
    down). Notice that this fragment does not use `return`, and therefore, we do not
    receive any returned object in the Java logic. In addition, we are not passing
    any argument to the script.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一段JavaScript代码。在这种情况下，我们调用JavaScript函数`scrollBy()`来按给定的数量（在本例中为1,000像素）向下滚动文档。请注意，此片段不使用`return`，因此在Java逻辑中我们不会接收任何返回的对象。此外，我们也没有向脚本传递任何参数。
- en: '![hosw 0401](assets/hosw_0401.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0401](assets/hosw_0401.png)'
- en: Figure 4-1\. Practice web page with long content
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 具有长内容的实践网页
- en: '[Example 4-2](#scrolling-example-2) shows another test using scrolling and
    the same example web page as before. This time, instead of moving a fixed number
    of pixels, we move the document scroll until the last paragraph in the web page.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 4-2](#scrolling-example-2)展示了另一个使用滚动和同样的网页示例的测试。这次，我们不是移动固定数量的像素，而是将文档滚动到网页中的最后一个段落。'
- en: Example 4-2\. Test executing JavaScript to scroll down to a given element
  id: totrans-74
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-2\. 测试执行JavaScript以滚动到给定元素
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO2-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO2-1)'
- en: To make this test robust, we specify an implicit timeout. Otherwise, the test
    might fail if the page is not entirely loaded when executing the subsequent commands.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使此测试更加健壮，我们指定了一个隐式超时时间。否则，在执行后续命令时，如果页面没有完全加载，测试可能会失败。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO2-2)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO2-2)'
- en: We locate the last paragraph in the web page using a CSS selector.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用CSS选择器找到网页中的最后一个段落。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO2-3)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO2-3)'
- en: We define the script to be injected into the page. Notice the script does not
    return any value, but as a novelty, it uses the first function argument to invoke
    the JavaScript function `scrollIntoView()`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义要注入页面的脚本。请注意，此脚本不返回任何值，但作为新颖之处，它使用第一个函数参数调用JavaScript函数`scrollIntoView()`。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO2-4)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO2-4)'
- en: We execute the previous script, passing the located `WebElement` as an argument.
    This element will be the first argument for the script (i.e., `arguments[0]`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行先前的脚本，将定位的`WebElement`作为参数传递。此元素将是脚本的第一个参数（即`arguments[0]`）。
- en: The last example of scrolling is *infinite scroll*. This technique enables the
    dynamic loading of more content when the user reaches the end of the web page.
    Automating this kind of web page is an instructive use case since it involves
    different aspects of the Selenium WebDriver API. For example, you can use a similar
    approach to crawl web pages using Selenium WebDriver. [Example 4-3](#scrolling-example-3)
    shows a test using an infinite scroll page.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个滚动示例是*无限滚动*。当用户滚动到网页底部时，这种技术可以动态加载更多内容。自动化这种网页是一个有教育意义的用例，因为它涉及到Selenium
    WebDriver API的不同方面。例如，您可以使用类似的方法使用Selenium WebDriver爬取网页。[Example 4-3](#scrolling-example-3)展示了使用无限滚动页面的测试。
- en: Example 4-3\. Test executing JavaScript in an infinite scroll page
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-3\. 在无限滚动页面中执行JavaScript的测试
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO3-1)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO3-1)'
- en: We define an explicit wait since we need to pause the test until the new content
    is loaded.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个显式等待，因为我们需要暂停测试直到新内容加载完成。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO3-2)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO3-2)'
- en: We find the initial number of paragraphs on the page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到页面上段落的初始数量。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO3-3)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO3-3)'
- en: We locate the last paragraph of the page.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位页面的最后一个段落。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO3-4)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO3-4)'
- en: We scroll down into this element.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们滚动到这个元素中。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO3-5)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO3-5)'
- en: We wait until more paragraphs are available on the page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等待直到页面上有更多的段落可用。
- en: Color picker
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色选择器
- en: A *color picker* in HTML is an input type that allows users to select a color
    by clicking and dragging the cursor using a graphical area. The practice web form
    contains one of these elements (see [Figure 4-2](#color-picker)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 中的*颜色选择器*是一种输入类型，允许用户通过点击和拖动光标来选择颜色。实践中的 Web 表单包含了这种元素（参见 [图 4-2](#color-picker)）。
- en: '![hosw 0402](assets/hosw_0402.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0402](assets/hosw_0402.png)'
- en: Figure 4-2\. Color picker in the practice web form
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 实践中的颜色选择器
- en: The following code shows the HTML markup for the color picker. Notice that it
    sets an initial color value (otherwise, the default color is black).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了颜色选择器的 HTML 标记。注意它设置了一个初始颜色值（否则，默认颜色是黑色）。
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 4-4](#color-picker-example) illustrates how to interact with this
    color picker. Because the Selenium WebDriver API does not provide any asset to
    control color pickers, we use JavaScript. In addition, this test also illustrates
    the use of `Color`, a support class available in the Selenium WebDriver API for
    working with colors.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-4](#color-picker-example) 展示了如何与这个颜色选择器交互。因为 Selenium WebDriver API 不提供控制颜色选择器的任何方法，所以我们使用
    JavaScript。此外，这个测试还展示了在 Selenium WebDriver API 中可用的支持类 `Color` 来处理颜色的使用。'
- en: Example 4-4\. Test executing JavaScript to interact with a color picker
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-4\. 执行 JavaScript 与颜色选择器交互的测试
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO4-1)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO4-1)'
- en: We locate the color picker by name.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过名称定位颜色选择器。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO4-2)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO4-2)'
- en: We read the initial value of the color picker (it should be `#563d7c`).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取颜色选择器的初始值（应该是 `#563d7c`）。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO4-3)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO4-3)'
- en: 'We define a color to work with using the following RGBA components: red=255
    (maximum value), green=0 (minimum value), blue=0 (minimum value), and alpha=1
    (maximum value, i.e., fully opaque).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个颜色，使用以下 RGBA 组件：红色=255（最大值），绿色=0（最小值），蓝色=0（最小值），alpha=1（最大值，即完全不透明）。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO4-4)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO4-4)'
- en: We use JavaScript to change the value selected in the color picker. Alternatively,
    we can change the selected color invoking the statement `colorPicker.sendKeys(red.asHex());`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 JavaScript 来改变颜色选择器中选择的值。或者，我们可以调用语句 `colorPicker.sendKeys(red.asHex());`
    来改变选择的颜色。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO4-5)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO4-5)'
- en: We read the resulting value of the color picker (it should be `#ff0000`).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取颜色选择器的结果值（应该是 `#ff0000`）。
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO4-6)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_agnostic_features_CO4-6)'
- en: We assert that the color is different from the initial value, but as expected.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言颜色与初始值不同，但是符合预期。
- en: Pinned Scripts
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定脚本
- en: The Selenium WebDriver API allows you to *pin* scripts in Selenium WebDriver
    4\. This feature enables attaching JavaScript fragments to a WebDriver session,
    assigning a unique key to each snippet, and executing these snippets on demand
    (even on different web pages). [Example 4-5](#pinned-script-example) shows a test
    using *pinned* scripts.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 允许您在 Selenium WebDriver 4 中*固定*脚本。这个功能允许将 JavaScript
    片段附加到 WebDriver 会话，并为每个片段分配一个唯一的键，并在需要时（甚至在不同的网页上）执行这些片段。[示例 4-5](#pinned-script-example)
    展示了使用*固定*脚本的测试。
- en: Example 4-5\. Test executing JavaScript as pinned scripts
  id: totrans-120
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-5\. 作为固定脚本执行 JavaScript 的测试
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO5-1)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO5-1)'
- en: We attach a JavaScript fragment to locate an element in the web page. Notice
    that we could do the same with the standard WebDriver API. Nevertheless, we use
    this approach for demo purposes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们附加了一个 JavaScript 片段来定位网页中的一个元素。请注意，我们可以使用标准的 WebDriver API 做同样的事情。然而，出于演示目的，我们使用了这种方法。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO5-2)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO5-2)'
- en: We attach another piece of JavaScript that returns whatever we pass to it as
    a first parameter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们附加了另一段 JavaScript，它返回我们传递给它的第一个参数。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO5-3)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO5-3)'
- en: We read the set of pinned scripts.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取了一组固定脚本。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO5-4)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO5-4)'
- en: We assert the number of pinned scripts is as expected (i.e., `2`).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言固定脚本的数量与预期相同（即`2`）。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO5-5)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO5-5)'
- en: We execute the first pinned script. As a result, we get the third link in the
    web page as a `WebElement` in Java.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行第一个固定脚本。结果，我们在 Java 中作为 `WebElement` 得到网页中的第三个链接。
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO5-6)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_agnostic_features_CO5-6)'
- en: We click on this link, which should correspond to the practice web link. As
    a result, the browser should navigate to that page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击此链接，应对应实践网页链接。结果，浏览器应该导航到该页面。
- en: '[![7](assets/7.png)](#co_browser_agnostic_features_CO5-7)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_browser_agnostic_features_CO5-7)'
- en: We assert the current URL is different from the initial one.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言当前 URL 与初始 URL 不同。
- en: '[![8](assets/8.png)](#co_browser_agnostic_features_CO5-8)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_browser_agnostic_features_CO5-8)'
- en: We execute the second pinned script. Notice that it is possible to run the pinned
    script even though the page has changed in the browser (since the script is attached
    to the session and not to a single page).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行第二个固定脚本。注意，尽管页面在浏览器中已更改（因为脚本附加到会话而不是单个页面），但仍可以运行固定脚本。
- en: '[![9](assets/9.png)](#co_browser_agnostic_features_CO5-9)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_browser_agnostic_features_CO5-9)'
- en: We assert the returned message is as expected.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言返回的消息符合预期。
- en: '[![10](assets/10.png)](#co_browser_agnostic_features_CO5-10)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![10](assets/10.png)](#co_browser_agnostic_features_CO5-10)'
- en: We unpin one of the scripts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取消固定其中一个脚本。
- en: '[![11](assets/11.png)](#co_browser_agnostic_features_CO5-11)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![11](assets/11.png)](#co_browser_agnostic_features_CO5-11)'
- en: We verify the number of pinned scripts is as expected (i.e., `1` at this point).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证固定脚本的数量符合预期（即此时为 `1`）。
- en: Asynchronous Scripts
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步脚本
- en: The method `executeAsyncScript()` of the `JavascriptExecutor` interface allows
    executing JavaScript scripts in the context of a web page using Selenium WebDriver.
    In the same way that `executeScript()` explained previously, `executeAsyncScript()`
    executes an anonymous function with the provided JavaScript code in the body of
    the current page. The execution of this function blocks the Selenium WebDriver
    control flow. The difference is that in `executeAsyncScript()`, we must explicitly
    signal the script termination by invoking a *done* callback. This callback is
    injected into the executed script as the last argument (i.e., `arguments[arguments.length
    - 1]`) in the corresponding anonymous function. [Example 4-6](#async-script-example)
    shows a test using this mechanism.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`JavascriptExecutor` 接口的 `executeAsyncScript()` 方法允许使用 Selenium WebDriver 在网页上下文中执行
    JavaScript 脚本。与之前解释的 `executeScript()` 类似，`executeAsyncScript()` 执行提供的 JavaScript
    代码在当前页面的匿名函数中。该函数的执行会阻塞 Selenium WebDriver 的控制流。不同之处在于，在 `executeAsyncScript()`
    中，我们必须通过调用 *done* 回调显式地标记脚本终止。该回调作为相应匿名函数的最后一个参数注入到执行的脚本中（即 `arguments[arguments.length
    - 1]`）。[示例 4-6](#async-script-example) 展示了使用这种机制的测试。'
- en: Example 4-6\. Test executing asynchronous JavaScript
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-6\. 测试执行异步 JavaScript
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO6-1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO6-1)'
- en: We define a pause time of `2` seconds.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个暂停时间为 `2` 秒。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO6-2)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO6-2)'
- en: We define the script to be executed. In the first line, we define a constant
    for the callback (i.e., the last script argument). After that, we use the JavaScript
    function `window.setTimeout()` to pause the script execution for a given amount
    of time.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义要执行的脚本。在第一行中，我们为回调定义一个常量（即最后一个脚本参数）。然后，我们使用 JavaScript 函数 `window.setTimeout()`
    来暂停给定时间的脚本执行。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO6-3)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO6-3)'
- en: We get the current system time (in milliseconds).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取当前系统时间（以毫秒为单位）。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO6-4)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO6-4)'
- en: We execute the script. If everything works as expected, the test execution blocks
    in this line for second seconds (as defined in step 1).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行脚本。如果一切正常，测试执行会在这一行中阻塞 second 秒（如步骤 1 中定义）。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO6-5)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO6-5)'
- en: We calculate the time required to execute the previous line.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算执行前一行所需的时间。
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO6-6)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_agnostic_features_CO6-6)'
- en: We assert the elapsed time is as expected (typically, some milliseconds above
    the defined pause time).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言经过的时间符合预期（通常高于定义的暂停时间几毫秒）。
- en: Tip
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can find an additional example that executes an asynchronous script on [“Notifications”](ch05.html#push_notifications).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到一个额外的示例，执行 [“Notifications”](ch05.html#push_notifications) 上的异步脚本。
- en: Timeouts
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超时
- en: Selenium WebDriver allows specifying three types of timeouts. We can use them
    by invoking the method `manage().timeouts()` in the Selenium WebDriver API. The
    first timeout is the implicit wait, already explained in [“Implicit Wait”](ch03.html#implicit_wait)
    (as part of waiting strategies). The other options are page loading and script
    loading timeouts, explained next.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 允许指定三种类型的超时。我们可以通过在 Selenium WebDriver API 中调用 `manage().timeouts()`
    方法来使用它们。第一个超时是隐式等待，已在[“隐式等待”](ch03.html#implicit_wait)（作为等待策略的一部分）中解释过。其他选项是页面加载和脚本加载超时，稍后进行解释。
- en: Page Loading Timeout
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面加载超时
- en: The *page loading timeout* provides a time limit to interrupt a navigation attempt.
    In other words, this timeout limits the time in which a web page is loaded. When
    this timeout (which has a default value of 30 seconds) is exceeded, an exception
    is thrown. [Example 4-7](#page-loading-timeout) shows an example of this timeout.
    As you can see, this piece of code is a dummy implementation of a *negative* test.
    In other words, it checks unexpected conditions in the SUT.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*页面加载超时* 提供了中断导航尝试的时间限制。换句话说，此超时限制了加载网页的时间。当超过此超时（默认值为30秒）时，将抛出异常。[示例 4-7](#page-loading-timeout)
    展示了此超时的示例。正如您所见，此代码片段是 SUT 中的一个虚拟实现的*负面*测试。换句话说，它检查 SUT 中的意外条件。'
- en: Example 4-7\. Test using a page loading timeout
  id: totrans-166
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-7\. 使用页面加载超时的测试
- en: '[PRE20]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO7-1)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO7-1)'
- en: We specify the minimum possible page loading timeout, which is one millisecond.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了最小可能的页面加载超时，即一毫秒。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO7-2)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO7-2)'
- en: We load a web page. This invocation (implemented as Java lambda) will fail since
    it is impossible to load that web page in less than one millisecond. For this
    reason, the exception `TimeoutException` is expected to be thrown in the lambda,
    using the AssertJ method `assertThatThrownBy`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载一个网页。这个调用（实现为Java lambda）将失败，因为不可能在少于一毫秒的时间内加载该网页。因此，预期在 lambda 中抛出 `TimeoutException`
    异常，使用 AssertJ 方法 `assertThatThrownBy`。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You can play with this test by removing the timeout declaration (i.e., step
    1). If you do that, the test will fail since an exception is expected but not
    thrown.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过删除超时声明（即第一步）来测试它。如果这样做，测试将失败，因为预期会抛出异常，但未抛出。
- en: Script Loading Timeout
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本加载超时
- en: The *script loading timeout* provides a time limit to interrupt a script that
    is being evaluated. This timeout has a default value of three hundred seconds.
    [Example 4-8](#script-timeout) shows a test using a script loading timeout.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*脚本加载超时* 提供了中断正在评估的脚本的时间限制。此超时的默认值为三百秒。[示例 4-8](#script-timeout) 展示了使用脚本加载超时的测试。'
- en: Example 4-8\. Test using a script loading timeout
  id: totrans-176
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-8\. 使用脚本加载超时的测试
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO8-1)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO8-1)'
- en: We define a script timeout of three seconds. This means that a script lasting
    for more than that time will throw an exception.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了三秒的脚本超时。这意味着超过此时间的脚本将抛出异常。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO8-2)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO8-2)'
- en: We execute an asynchronous script that pauses the execution of five seconds.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行一个异步脚本，暂停执行五秒钟。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO8-3)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO8-3)'
- en: The script execution time is greater than the configured script timeout, resulting
    in a `ScriptTimeoutException`. Again, this example is a negative test, i.e., designed
    to expect this exception.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行时间大于配置的脚本超时，导致 `ScriptTimeoutException`。同样，此示例是一个*负面*测试，即预期此异常。
- en: Screenshots
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 截图
- en: 'Selenium WebDriver is used mainly to carry out end-to-end functional testing
    of web applications. In other words, we use it to verify that web applications
    behave as expected by interacting with their user interface (i.e., using a web
    browser). This approach is very convenient to automate high-level user scenarios,
    but it also presents different difficulties. One of the main challenges in end-to-end
    testing is to diagnose the underlying cause of a failed test. Supposing the failure
    is legitimate (i.e., not induced by a poorly implemented test), the root cause
    might be diverse: the client side (e.g., incorrect JavaScript logic), the server
    side (e.g., internal exception), or the integration with other components (e.g.,
    inadequate access to the database), among other reasons. One of the most pervasive
    mechanisms used in Selenium WebDriver for failure analysis is making browser screenshots.
    This section presents the mechanisms provided by the Selenium WebDriver API.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 主要用于执行 Web 应用程序的端到端功能测试。换句话说，我们使用它与用户界面交互（即使用 Web 浏览器）来验证
    Web 应用程序的行为是否符合预期。这种方法非常方便地自动化高级用户场景，但也存在不同的困难。端到端测试的主要挑战之一是诊断测试失败的根本原因。假设失败是合理的（即不是由于实现不良的测试引起的），根本原因可能多种多样：客户端（例如，不正确的
    JavaScript 逻辑）、服务器端（例如，内部异常）或与其他组件的集成（例如，对数据库的访问不足），等等。在 Selenium WebDriver 中用于失败分析的最普遍机制之一是进行浏览器截图。本节介绍了
    Selenium WebDriver API 提供的机制。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[“Failure Analysis”](ch08.html#failure_analysis) reviews the framework-specific
    techniques to determine when a test has failed to carry out different failure
    analysis techniques, such as screenshots, recordings, and log gathering.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[“失败分析”](ch08.html#failure_analysis)回顾了确定测试何时失败以及执行不同失败分析技术（如截图、录制和日志收集）的框架特定技术。'
- en: 'Selenium WebDriver provides the interface `TakesScreenshot` for making browser
    screenshots. Any driver object inheriting from `RemoteWebDriver` (see [Figure 2-2](ch02.html#webdriver-hierarchy))
    also implements this interface. Thus, we can cast a `WebDriver` object that instantiates
    one of the major browsers (e.g., `ChromeDriver`, `FirefoxDriver`, etc.) as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 提供了接口`TakesScreenshot`来进行浏览器截图。从`RemoteWebDriver`继承的任何驱动程序对象（参见[图 2-2](ch02.html#webdriver-hierarchy)）也实现了此接口。因此，我们可以将一个实例化了其中一个主要浏览器（例如`ChromeDriver`、`FirefoxDriver`等）的`WebDriver`对象进行强制类型转换，如下所示：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The interface `TakesScreenshot` only provides a method called `getScreenshotAs(OutputType<X>
    target)` to make screenshots. The parameter `OutputType<X> target` determines
    the screenshot type and the returned value. [Table 4-2](#output-types-for-screenshots)
    shows the available alternatives for this parameter.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接口`TakesScreenshot`仅提供一个名为`getScreenshotAs(OutputType<X> target)`的方法来进行截图。参数`OutputType<X>
    target`确定截图类型和返回值。[表 4-2](#output-types-for-screenshots)展示了此参数的可用替代方案。
- en: Table 4-2\. OutputType parameters
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-2\. OutputType 参数
- en: '| Parameter | Description | Return | Example |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 | 返回 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '|'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| Make screenshot as a PNG file (located in a temporary system directory) |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 将截图保存为 PNG 文件（位于临时系统目录中） |'
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '| Make a screenshot in Base64 format (i.e., encoded as an ASCII string) |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 将截图保存为 Base64 格式（即编码为 ASCII 字符串） |'
- en: '[PRE27]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '| Make a screenshot as a raw byte array |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 将截图保存为原始字节数组 |'
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE31]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Tip
  id: totrans-215
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The method `getScreenshotAs()` allows making screenshots of the browser viewport.
    In addition, Selenium WebDriver 4 allows creating full-page screenshots using
    different mechanisms (see [“Full-page screenshot”](ch05.html#fullpage-screenshot)).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`getScreenshotAs()`允许对浏览器视窗进行截图。此外，Selenium WebDriver 4 还允许使用不同的机制创建全页截图（参见[“全页截图”](ch05.html#fullpage-screenshot)）。
- en: '[Example 4-9](#screenshots-example-1) shows a test for taking a browser screenshot
    in PNG format. [Example 4-10](#screenshots-example-2) shows another test for creating
    a screenshot as a Base64 string. The resulting screenshot is shown in [Figure 4-3](#screenshot).'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-9](#screenshots-example-1)展示了一个以 PNG 格式进行浏览器截图的测试。[示例 4-10](#screenshots-example-2)展示了另一个以
    Base64 字符串创建截图的测试。生成的截图显示在[图 4-3](#screenshot)中。'
- en: Example 4-9\. Test making a screenshot as a PNG file
  id: totrans-218
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-9\. 将浏览器截图保存为 PNG 文件
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO9-1)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO9-1)'
- en: We make the browser screen a PNG file.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将浏览器屏幕保存为 PNG 文件。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO9-2)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO9-2)'
- en: This file is located in a temporary folder by default, so we move it to a new
    file called `screenshot.png` (in the root project folder).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此文件位于临时文件夹中，因此我们将其移动到名为`screenshot.png`的新文件（位于根项目文件夹中）。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO9-3)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO9-3)'
- en: We use standard Java to move the screenshot file to the new location.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标准的Java将截图文件移动到新位置。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO9-4)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO9-4)'
- en: We use assertions to verify that the target file exists.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用断言来验证目标文件是否存在。
- en: '![hosw 0403](assets/hosw_0403.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0403](assets/hosw_0403.png)'
- en: Figure 4-3\. Browser screenshot of the practice site index page
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-3\. 练习网站首页的浏览器截图
- en: Example 4-10\. Test making a screenshot as Base64
  id: totrans-230
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-10\. 测试制作Base64格式的截图
- en: '[PRE33]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO10-1)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO10-1)'
- en: We make the browser screen in Base64 format.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将浏览器屏幕制作成Base64格式。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO10-2)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO10-2)'
- en: We append the prefix `data:image/png;base64,` to the Base64 string and log it
    in the standard output. You can copy and paste this resulting string in a browser
    navigation bar to display the picture.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Base64字符串前追加前缀`data:image/png;base64,`并将其记录在标准输出中。您可以将生成的字符串复制粘贴到浏览器导航栏中以显示图片。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO10-3)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO10-3)'
- en: We assert that the screenshot string has content.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言截图字符串具有内容。
- en: Note
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Logging the screenshot in Base64 as presented in the previous example could
    be very useful for diagnosing failures when running tests in CI servers in which
    we do not have access to the file system (e.g., GitHub Actions).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 将截图记录为Base64格式，正如前面示例中所述，在没有文件系统访问权限的CI服务器（例如GitHub Actions）中运行测试时，这非常有用。
- en: WebElement Screenshots
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebElement截图
- en: The `WebElement` interface extends the `TakesScreenshot` interface. This way,
    it is possible to make partial screenshots of the visible content of a given web
    element. (See [Example 4-11](#screenshots-example-3).) Notice that this test is
    very similar to the previous one using PNG files, but in this case, we invoke
    the method `getScreenshotAs()` directly using a web element. [Figure 4-4](#webelement-screenshot)
    shows the resulting screenshot.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebElement`接口扩展了`TakesScreenshot`接口。这样，可以对给定的网页元素的可见内容进行部分截图（参见[Example 4-11](#screenshots-example-3)）。请注意，此测试与使用PNG文件的上一个测试非常相似，但在本例中，我们直接使用网页元素调用`getScreenshotAs()`方法。[Figure 4-4](#webelement-screenshot)展示了生成的截图。'
- en: Example 4-11\. Test making a partial screenshot as a PNG file
  id: totrans-242
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-11\. 测试制作部分PNG文件截图
- en: '[PRE34]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![hosw 0404](assets/hosw_0404.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0404](assets/hosw_0404.png)'
- en: Figure 4-4\. Partial screenshot of the practice web form
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-4\. 练习网页表单的部分截图
- en: Window Size and Position
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口大小和位置
- en: The Selenium WebDriver API allows manipulating browser size and position very
    easily using the `Window` interface. This type is accessible from a driver object
    using the following statement. [Table 4-3](#window-methods) shows the available
    methods in this interface. Then, [Example 4-12](#window-example-1) shows a basic
    test about this feature.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API允许轻松地使用`Window`接口来操作浏览器的大小和位置。可以通过驱动器对象访问这种类型，使用以下语句。[Table 4-3](#window-methods)显示了此接口中可用的方法。接着，[Example 4-12](#window-example-1)展示了关于此功能的基本测试。
- en: '[PRE35]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Table 4-3\. Window methods
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-3\. 窗口方法
- en: '| Method | Return | Description |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE36]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE37]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '| Get the current window size. It returns the outer window dimension, not just
    the *viewport* (i.e., the visible area of a web page for end users). |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 获取当前窗口大小。返回的是外部窗口尺寸，而不仅仅是*视口*（即网页的对终端用户可见的可见区域）。 |'
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE38]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '| Change the current window size (again, its outer dimension, and not the viewport).
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 更改当前窗口大小（再次指的是其外部尺寸，而不是视口）。 |'
- en: '|'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE40]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE41]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '| Get current window position (relative to the upper left corner of the screen).
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 获取当前窗口位置（相对于屏幕左上角）。 |'
- en: '|'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '| Change the current window position (again, relative to the screen’s upper
    left corner). |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 更改当前窗口位置（再次相对于屏幕左上角）。 |'
- en: '|'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE45]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '| Maximize the current window. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| 最大化当前窗口。 |'
- en: '|'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '|'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE47]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '| Minimize the current window. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 最小化当前窗口。 |'
- en: '|'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE48]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE49]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '| Fullscreen the current window. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 全屏当前窗口。 |'
- en: Example 4-12\. Test reading and changing the browser size and position
  id: totrans-287
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-12\. 测试读取和更改浏览器大小和位置
- en: '[PRE50]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO11-1)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO11-1)'
- en: We read the window position.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取窗口位置。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO11-2)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO11-2)'
- en: We read the window size.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取窗口大小。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO11-3)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO11-3)'
- en: We maximize the browser window.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将浏览器窗口最大化。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO11-4)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO11-4)'
- en: We verify that the maximized position (and size, in the following line) is different
    from the original window.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证最大化的位置（以及下一行中的大小）与原始窗口不同。
- en: Browser History
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器历史
- en: Selenium WebDriver allows manipulating the browser history through the `Navigation`
    interface. The following statement illustrates how to access this interface from
    a `WebDriver` object. Using this interface is quite simple. [Table 4-4](#navigation-methods)
    shows its public methods, and [Example 4-13](#navigation-example-1) shows a basic
    example. Notice that this test navigates into different web pages using these
    methods, and at the end of the test, it verifies the web page URL is as expected.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 允许通过 `Navigation` 接口操纵浏览器历史。以下语句说明了如何从 `WebDriver` 对象中访问此接口。使用此接口非常简单。[表 4-4](#navigation-methods)
    显示了其公共方法，[示例 4-13](#navigation-example-1) 展示了一个基本示例。请注意，此测试使用这些方法导航到不同的网页，并在测试结束时验证网页
    URL 是否符合预期。
- en: '[PRE51]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Table 4-4\. Navigation methods
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-4\. 导航方法
- en: '| Method | Return | Description |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE52]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE53]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '| Go back in the browser history |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 在浏览器历史中后退 |'
- en: '|'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE54]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '|'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE55]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '| Go forward in the browser history |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| 在浏览器历史中前进 |'
- en: '|'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE56]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE57]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '| Load a new web page in the current window |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| 在当前窗口中加载新的网页 |'
- en: '|'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE58]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '|'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE59]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '| Refresh the current page |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 刷新当前页面 |'
- en: Example 4-13\. Test using navigation methods
  id: totrans-323
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-13\. 使用导航方法进行测试
- en: '[PRE60]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The Shadow DOM
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阴影 DOM
- en: As introduced in [“The Document Object Model (DOM)”](ch03.html#dom), the DOM
    is a programming interface that allows us to represent and manipulate a web page
    using a tree structure. The *shadow DOM* is a feature of this programming interface
    that enables the creation of scoped subtrees inside the regular DOM tree. The
    shadow DOM allows the encapsulation of a group of a DOM subtree (called *shadow
    tree*, as represented in [Figure 4-5](#shadow-dom-representation)) that can specify
    different CSS styles from the original DOM. The node in the regular DOM in which
    the shadow tree is attached is called the *shadow host*. The root node of the
    shadow tree is called the *shadow root*. As represented in [Figure 4-5](#shadow-dom-representation),
    the shadow tree is flattened into the original DOM in a single composed tree to
    be rendered in the browser.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[“文档对象模型（DOM）”](ch03.html#dom)中介绍的那样，DOM 是一个编程接口，允许我们使用树结构来表示和操作网页。*阴影 DOM*
    是这个编程接口的一个特性，它允许在常规 DOM 树内创建作用域子树。阴影 DOM 允许封装 DOM 子树的一个组（称为*阴影树*，如[图 4-5](#shadow-dom-representation)
    中所示），可以指定与原始 DOM 不同的 CSS 样式。阴影树附加到的常规 DOM 中的节点称为*阴影宿主*。阴影树的根节点称为*阴影根*。如[图 4-5](#shadow-dom-representation)
    所示，阴影树被展平到原始 DOM 中，形成一个单一的组合树，以在浏览器中呈现。
- en: '![hosw 0405](assets/hosw_0405.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0405](assets/hosw_0405.png)'
- en: Figure 4-5\. Schematic representation of the shadow DOM
  id: totrans-328
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. 阴影 DOM 的示意图
- en: Note
  id: totrans-329
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The shadow DOM is part of the standard suite (together with HTML templates or
    custom elements) that allows the implementation of [web components](https://github.com/WICG/webcomponents)
    (i.e., reusable custom elements for web applications).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影 DOM 是标准套件的一部分（与 HTML 模板或自定义元素一起），它允许实现[web 组件](https://github.com/WICG/webcomponents)（即用于
    Web 应用程序的可重用自定义元素）。
- en: The shadow DOM allows the creation of self-contained components. In other words,
    the shadow tree is isolated from the original DOM. This feature is useful for
    web design and composition, but it can be challenging for automated testing with
    Selenium WebDriver (since the regular location strategies cannot find web elements
    within the shadow tree). Luckily, Selenium WebDriver 4 provides a `WebElement`
    method that allows access to the shadow DOM. [Example 4-14](#shadow_dom_example)
    demonstrates this use.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影 DOM 允许创建自包含组件。换句话说，阴影树与原始 DOM 隔离开来。这个特性对于网页设计和组合非常有用，但对于使用 Selenium WebDriver
    进行自动化测试可能具有挑战性（因为常规的定位策略无法在阴影树内找到网页元素）。幸运的是，Selenium WebDriver 4 提供了一个 `WebElement`
    方法，允许访问阴影 DOM。[示例 4-14](#shadow_dom_example) 演示了这个用法。
- en: Example 4-14\. Test reading the shadow DOM
  id: totrans-332
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-14\. 测试读取阴影 DOM
- en: '[PRE61]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO12-1)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO12-1)'
- en: We open the practice web page that contains a shadow tree. You can inspect the
    source code of this page to check the JavaScript method used to create a shadow
    tree.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开包含影子树的实践网页。 您可以检查此页面的源代码，以检查用于创建影子树的 JavaScript 方法。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO12-2)'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO12-2)'
- en: We locate the shadow host element.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位影子主机元素。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO12-3)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO12-3)'
- en: We get the shadow root from the host element. As a result, we get an instance
    of `SearchContext`, an interface implemented by `WebDriver` and `WebElement`,
    that allows us to find elements using the methods `findElement()` and `find​Ele⁠ments()`.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从主机元素获取影子根。 结果，我们得到一个 `SearchContext` 的实例，它是由 `WebDriver` 和 `WebElement` 实现的接口，允许我们使用
    `findElement()` 和 `find​Ele⁠ments()` 方法查找元素。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO12-4)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO12-4)'
- en: We find the first paragraph element in the shadow tree.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在影子树中找到第一个段落元素。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO12-5)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO12-5)'
- en: We verify the text content of the shadow element is as expected.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证影子元素的文本内容是否符合预期。
- en: Warning
  id: totrans-344
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This feature of the W3C WebDriver specification is recent at the time of this
    writing, and therefore might not be implemented in all drivers (e.g., chromedriver,
    geckodriver). For instance, it is available starting with version 96 of both Chrome
    and Edge.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 此 W3C WebDriver 规范的功能在撰写本文时较新，因此可能尚未在所有驱动程序中实现（例如，chromedriver、geckodriver）。
    例如，它从 Chrome 和 Edge 的 96 版本开始可用。
- en: Cookies
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cookies
- en: HTTP 1.x is a stateless protocol, meaning that the server does not track the
    user state. In other words, web servers do not remember users across different
    requests. The cookies mechanism is an extension to HTTP that allows tracking users
    by sending small pieces of text called *cookies* from server to client. These
    cookies must be sent back by clients, and this way, servers remember their clients.
    Cookies allow you to maintain web sessions or personalize the user experience
    on the website, among other functions.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 1.x 是一种无状态协议，这意味着服务器不跟踪用户状态。 换句话说，Web 服务器不会跨不同请求记住用户。 Cookie 机制是 HTTP 的一个扩展，它允许通过从服务器发送小段文本（称为*cookie*）来跟踪用户。
    这些 Cookie 必须由客户端发送回来，这样，服务器就记住了它们的客户端。 Cookie 允许您维护 Web 会话或在网站上个性化用户体验，等等。
- en: Web browsers allow managing the browser cookies manually. Selenium WebDriver
    enables an equivalent manipulation, but programmatically. The Selenium WebDriver
    API provides the methods shown in [Table 4-5](#cookies-methods) to accomplish
    this. They are accessible through the `manage()` function of a `WebDriver` object.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 'Web 浏览器允许手动管理浏览器 Cookie。 Selenium WebDriver 可以通过编程方式实现等效操作。 Selenium WebDriver
    API 提供了 [表 4-5](#cookies-methods) 中显示的方法来完成此操作。 它们可通过 `WebDriver` 对象的 `manage()`
    函数访问。 '
- en: Table 4-5\. Cookies management methods
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-5\. Cookie 管理方法
- en: '| Method | Return | Description |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE62]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE63]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '| Add a new cookie |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 添加新 Cookie |'
- en: '|'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE64]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '|'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE65]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '| Delete an existing cookie by name |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| 通过名称删除现有的 Cookie |'
- en: '|'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE66]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '|'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE67]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '| Delete an existing cookie by instance |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| 通过实例删除现有的 Cookie |'
- en: '|'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE68]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '|'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE69]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '| Delete all cookies |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 删除所有 Cookie |'
- en: '|'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE70]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '|'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE71]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '| Get all cookies |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| 获取所有 Cookie |'
- en: '|'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE72]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '|'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE73]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '| Get a cookie by name |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| 通过名称获取 Cookie |'
- en: 'As this table shows, the `Cookie` class provides an abstraction to a single
    cookie in Java. [Table 4-6](#cookie-methods) summarizes the methods available
    in this class. In addition, this class has several constructors, which positionally
    accept the following parameters:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 正如此表所示，`Cookie` 类在 Java 中提供了对单个 Cookie 的抽象。 [表 4-6](#cookie-methods) 总结了此类中可用的方法。
    此外，此类具有几个构造函数，它们按位置接受以下参数：
- en: '`String name`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`String name`'
- en: Cookie name (mandatory)
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 名称（必需）
- en: '`String value`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`String value`'
- en: Cookie value (mandatory)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 值（必需）
- en: '`String domain`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`String domain`'
- en: Domain in which the cookie is visible (optional)
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 可见的域（可选）
- en: '`String path`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`String path`'
- en: Path in which the cookie is visible (optional)
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 可见的路径（可选）
- en: '`Date expiry`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date expiry`'
- en: Cookie expiration date (optional)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 过期日期（可选）
- en: '`boolean isSecure`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`boolean isSecure`'
- en: Whether the cookie requires a secure connection (optional)
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 是否需要安全连接（可选）
- en: '`boolean isHttpOnly`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`boolean isHttpOnly`'
- en: Whether this cookie is an HTTP-only cookie, i.e., the cookie is not accessible
    through a client-side script (optional)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Cookie 是否为 HTTP-only Cookie，即 Cookie 不可通过客户端脚本访问（可选）
- en: '`String sameSite`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`String sameSite`'
- en: Whether this cookie is a same-site cookie, i.e., the cookie is restricted to
    a first-party or same-site context (optional)
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 该 cookie 是否为同站点 cookie，即限定为第一方或同站点上下文（可选）
- en: Table 4-6\. Cookie methods
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-6\. Cookie 方法
- en: '| Method | Return | Description |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE74]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '|'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE75]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '| Read cookie name |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 名称 |'
- en: '|'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE76]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '|'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE77]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '| Read cookie value |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 值 |'
- en: '|'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE78]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '|'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE79]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '| Read cookie domain |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 域名 |'
- en: '|'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE80]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '|'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE81]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '| Read cookie path |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 路径 |'
- en: '|'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE82]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '|'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE83]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '| Read if cookie requires a secure connection |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 是否需要安全连接 |'
- en: '|'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE84]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '|'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE85]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '| Read if cookie is HTTP-only |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 是否为 HTTP-only |'
- en: '|'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE86]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '|'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE87]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '| Read cookie expiry date |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 过期日期 |'
- en: '|'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE88]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '|'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE89]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '| Read cookie same-site context |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| 读取 cookie 同站点上下文 |'
- en: '|'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE90]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '|'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE91]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '| Check the different fields of the cookie and throw an `IllegalArgumen⁠t​Exception`
    if it encounters any problem |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| 检查 cookie 的不同字段，并在遇到任何问题时抛出 `IllegalArgumentException` |'
- en: '|'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE92]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '|'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE93]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '| Map cookie values as a key-value map |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| 将 cookie 值映射为键值对 |'
- en: 'The following examples show different tests managing web cookies with the Selenium
    WebDriver API. These examples use a practice web page that shows the site cookies
    on the GUI (see [Figure 4-6](#cookies)):'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了使用 Selenium WebDriver API 管理网页 cookie 的不同测试。这些示例使用一个练习网页，在 GUI 上显示网站的
    cookie（见 [图 4-6](#cookies)）：
- en: '[Example 4-15](#read-cookies) illustrates how to read the existing cookies
    of a website.'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 4-15](#read-cookies) 展示了如何读取网站现有的 cookie。'
- en: '[Example 4-16](#add-cookies) shows how to add new cookies.'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 4-16](#add-cookies) 展示了如何添加新的 cookie。'
- en: '[Example 4-17](#edit-cookies) explains how to edit existing cookies.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 4-17](#edit-cookies) 解释了如何编辑现有 cookie。'
- en: '[Example 4-18](#delete-cookies) demonstrates how to delete cookies.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例 4-18](#delete-cookies) 演示了如何删除 cookie。'
- en: '![hosw 0406](assets/hosw_0406.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0406](assets/hosw_0406.png)'
- en: Figure 4-6\. Practice web page for web cookies
  id: totrans-458
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6\. 网页 cookie 的练习页面
- en: Example 4-15\. Test reading existing cookies
  id: totrans-459
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-15\. 测试读取现有 cookie
- en: '[PRE94]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO13-1)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO13-1)'
- en: We get the `Options` object used to manage cookies.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取用于管理 cookie 的 `Options` 对象。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO13-2)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO13-2)'
- en: We read all the cookies available on this page. It should contain two cookies.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取此页面上所有可用的 cookie。应该包含两个 cookie。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO13-3)'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO13-3)'
- en: We read the cookie with the name `username`.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取名称为 `username` 的 cookie。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO13-4)'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO13-4)'
- en: The value of the previous cookie should be `John Doe`.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 cookie 值应为 `John Doe`。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO13-5)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO13-5)'
- en: The last statement does not affect the test. We invoke this command to check
    the cookies in the browser GUI.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条语句不影响测试。我们调用此命令来检查浏览器 GUI 中的 cookie。
- en: Example 4-16\. Test adding new cookies
  id: totrans-471
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-16\. 测试添加新 cookie
- en: '[PRE95]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO14-1)'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO14-1)'
- en: We create a new cookie.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的 cookie。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO14-2)'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO14-2)'
- en: We add the cookie to the current page.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 cookie 添加到当前页面。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO14-3)'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO14-3)'
- en: We read the value of the cookie just added.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取刚刚添加的 cookie 的值。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO14-4)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO14-4)'
- en: We verify this value is as expected.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证该值是否符合预期。
- en: Example 4-17\. Test editing existing cookies
  id: totrans-481
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-17\. 测试编辑现有 cookie
- en: '[PRE96]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO15-1)'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO15-1)'
- en: We read an existing cookie.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取一个已存在的 cookie。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO15-2)'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO15-2)'
- en: We create a new cookie reusing the previous cookie name.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个新的 cookie，并重用之前的 cookie 名称。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO15-3)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO15-3)'
- en: We add the new cookie to the web page.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向网页添加新的 cookie。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO15-4)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO15-4)'
- en: We read the cookie just added.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取刚刚添加的 cookie。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO15-5)'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO15-5)'
- en: We verify the cookie has been correctly edited.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证 cookie 已正确编辑。
- en: Example 4-18\. Test deleting existing cookies
  id: totrans-493
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-18\. 测试删除现有的 cookie
- en: '[PRE97]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO16-1)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO16-1)'
- en: We read all cookies.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取所有的 cookie。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO16-2)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO16-2)'
- en: We read the cookie with the name `username`.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 读取名为`username`的cookie。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO16-3)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO16-3)'
- en: We delete the previous cookie.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 删除先前的cookie。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO16-4)'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO16-4)'
- en: We verify the size of the cookies is as expected.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证cookie的大小是否符合预期。
- en: Dropdown Lists
  id: totrans-503
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下拉列表
- en: 'A typical element in web forms is dropdown lists. These fields allow users
    to select one or more elements within an option list. The classical HTML tags
    used to render these fields are `<select>` and `<options>`. As usual, the practice
    web form contains one of these elements (see [Figure 4-7](#select)), defined in
    HTML as follows:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 网页表单中典型的元素是下拉列表。这些字段允许用户在选项列表中选择一个或多个元素。用于呈现这些字段的经典HTML标签是`<select>`和`<option>`。通常，实践中的网页表单包含其中一个元素（见[图 4-7](#select)），其HTML定义如下：
- en: '[PRE98]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '![hosw 0407](assets/hosw_0407.png)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0407](assets/hosw_0407.png)'
- en: Figure 4-7\. Select field in the practice web form
  id: totrans-507
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. 实践网页表单中的选择字段
- en: These elements are very spread out in web forms. For this reason, Selenium WebDriver
    provides a helper class called `Select` to simplify their manipulation. This class
    wraps a select `WebElement` and provides a wide variety of features. [Table 4-7](#select-methods)
    summarizes the public methods available in the `Select` class. After that, [Example 4-19](#select_test)
    shows a basic test using this class.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素在网页表单中分布广泛。因此，Selenium WebDriver 提供了一个名为`Select`的辅助类，用于简化它们的操作。这个类封装了一个选择`WebElement`，并提供了各种功能。[表 4-7](#select-methods)
    总结了`Select`类中的公共方法。之后，[示例 4-19](#select_test) 展示了使用这个类的基本测试。
- en: Table 4-7\. Select methods
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-7\. 选择方法
- en: '| Method | Return | Description |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE99]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '|'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE100]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '| Constructor using a `WebElement` as parameter (it must be a `<select>` element);
    otherwise it throws an `UnexpectedTagNameException` |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| 使用`WebElement`作为参数的构造函数（必须是`<select>`元素），否则会抛出`UnexpectedTagNameException`
    |'
- en: '|'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE101]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '|'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE102]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '| Get wrapped `WebElement` (i.e., the one used in the constructor) |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| 获取包装的`WebElement`（即构造函数中使用的那个） |'
- en: '|'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE103]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '|'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE104]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '| Whether the select element supports selecting multiple options |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| 选择元素是否支持选择多个选项 |'
- en: '|'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE105]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '|'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE106]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '| Read all options that belong to the select element |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| 读取属于选择元素的所有选项 |'
- en: '|'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE107]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '|'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE108]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '| Read all selected options |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| 读取所有选定的选项 |'
- en: '|'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE109]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '|'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE110]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '| Read first selected option |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| 读取第一个选定选项 |'
- en: '|'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE111]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '|'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE112]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '| Select all options that match a given displayed text |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| 取消选择所有与给定显示文本匹配的选项 |'
- en: '|'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE113]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '|'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE114]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '| Select an option by index number |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| 根据索引号选择一个选项 |'
- en: '|'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE115]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '|'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE116]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '| Select option(s) by value attribute |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| 根据值属性选择选项 |'
- en: '|'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE117]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '|'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE118]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '| Deselect all options |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| 取消选择所有选项 |'
- en: '|'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE119]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '|'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE120]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '| Deselect option(s) by value attribute |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| 根据值属性取消选择选项 |'
- en: '|'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE121]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '|'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE122]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '| Deselect by index number |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| 根据索引号取消选择 |'
- en: '|'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE123]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '|'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE124]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '| Deselect options that match a given displayed text |'
  id: totrans-576
  prefs: []
  type: TYPE_TB
  zh: '| 取消选择与给定显示文本匹配的选项 |'
- en: Example 4-19\. Test interacting with a select field
  id: totrans-577
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-19\. 测试与选择字段交互
- en: '[PRE125]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO17-1)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO17-1)'
- en: We find the select element by name and use the resulting `WebElement` to instantiate
    a `Select` object.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过名称找到选择元素，并使用生成的`WebElement`实例化一个`Select`对象。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO17-2)'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO17-2)'
- en: We select one of the options available in this select, using a by-text strategy.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用按文本策略选择其中一个可用的选项。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO17-3)'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO17-3)'
- en: We verify the selected option text is as expected.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证选定的选项文本是否符合预期。
- en: Data List Elements
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据列表元素
- en: Another way to implement dropdown lists in HTML is using *data lists*. Although
    data lists are very similar to select elements from a graphical point of view,
    there is a clear distinction between them. On the one hand, select fields display
    an options list, and users choose one (or several) of the available options. On
    the other hand, data lists show a list of suggested options associated with an
    input form (text) field, and users are free to select one of those suggested values
    or type a custom value. The practice web form contains one of these data lists.
    You can find its markup in the following snippet and a screenshot in [Figure 4-8](#datalist).
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中实现下拉列表的另一种方法是使用*数据列表*。虽然数据列表在图形上与选择元素非常相似，但它们之间有明显区别。一方面，选择字段显示选项列表，用户选择其中一个（或多个）可用选项。另一方面，数据列表显示与输入表单（文本）字段关联的建议选项列表，用户可以自由选择其中一个建议值或输入自定义值。实践中的网页表单包含了其中一个数据列表。您可以在以下代码片段中找到其标记，以及
    [图 4-8](#datalist) 中的截图。
- en: '[PRE126]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '![hosw 0408](assets/hosw_0408.png)'
  id: totrans-588
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0408](assets/hosw_0408.png)'
- en: Figure 4-8\. Data list field in the practice web form
  id: totrans-589
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-8\. 实践中的数据列表字段
- en: Selenium WebDriver does not provide a custom helper class to manipulate data
    lists. Instead, we need to interact with them as standard input texts, with the
    distinction that their options are displayed when clicking on the input field.
    [Example 4-20](#datalist_test) shows a test illustrating this.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 不提供自定义辅助类来操作数据列表。相反，我们需要像操作标准输入文本一样与它们交互，唯一的区别是点击输入字段时会显示它们的选项。示例
    [4-20](#datalist_test) 展示了说明此功能的测试。
- en: Example 4-20\. Test interacting with a data list field
  id: totrans-591
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-20\. 与数据列表字段交互的测试
- en: '[PRE127]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO18-1)'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO18-1)'
- en: We locate the input field used for the data list.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位用于数据列表的输入字段。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO18-2)'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO18-2)'
- en: We click on it to display its options.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击它以显示其选项。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO18-3)'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO18-3)'
- en: We find the second option.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到第二个选项。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO18-4)'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO18-4)'
- en: We read the value of the located option.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取定位选项的值。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO18-5)'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO18-5)'
- en: We type that value in the input field.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在输入字段中键入该值。
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO18-6)'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_agnostic_features_CO18-6)'
- en: We assert the option value is as expected.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言选项的值符合预期。
- en: Navigation Targets
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航目标
- en: When navigating web pages using a browser, by default, we use a single page
    corresponding to the URL in the navigation bar. Then, we can open another page
    in a new browser tab. This second tab can be explicitly opened when a link defines
    the attribute `target`, or the user can force navigation to a new tab, typically
    by using the modifier key Ctrl (or Cmd in macOS) together with the mouse click
    into a web link. Another possibility is opening web pages in new windows. For
    this, web pages typically use the JavaScript command `window.open(url)`. Another
    way of displaying different pages at the same time is using *frames* and *iframes*.
    A frame is an HTML element type that defines a particular area (into a set called
    *frameset*) where a web page can be displayed. An iframe is another HTML element
    that allows embedding an HTML page into the current one.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用浏览器导航网页时，默认情况下，我们使用导航栏中的 URL 对应的单个页面。然后，我们可以在新的浏览器标签中打开另一个页面。当链接定义属性`target`时，可以显式打开这第二个标签，或者用户可以通过按住修改键
    Ctrl（或 macOS 中的 Cmd）并与鼠标点击网页链接一起强制导航到新标签。另一种可能性是在新窗口中打开网页。为此，网页通常使用 JavaScript
    命令`window.open(url)`。同时，显示不同页面的另一种方式是使用*frames*和*iframes*。框架是定义特定区域（在*frameset*集合中）的
    HTML 元素类型，用于显示网页的区域。iframe 是另一个 HTML 元素，允许将 HTML 页面嵌入当前页面。
- en: Warning
  id: totrans-607
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Using frames is not encouraged since these elements have many drawbacks, such
    as performance and accessibility problems. I explain how to use them through Selenium
    WebDriver for compatibility reasons. Nevertheless, I strongly recommend avoiding
    frames on brand-new web applications.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议使用框架，因为这些元素有许多缺点，例如性能和可访问性问题。出于兼容性考虑，我解释了如何在 Selenium WebDriver 中使用它们。尽管如此，我强烈建议在全新的网页应用程序中避免使用框架。
- en: The Selenium WebDriver API provides the interface `TargetLocator` to deal with
    the previously mentioned targets (i.e., tabs, windows, frames, and iframes). This
    interface allows changing the focus of the future commands of a `WebDriver` object
    (to a new tab, windows, etc.). This interface is accessible by invoking the method
    `switchTo()` in a `WebDriver` object. [Table 4-8](#targetlocator-methods) describes
    its public methods.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-8\. TargetLocator methods
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '|'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '| Change focus to a frame (or iframe) by index number. |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '|'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '| Change focus to a frame (or iframe) by name or id. |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '|'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '| Change focus to a frame (or iframe) previously located as a WebElement. |'
  id: totrans-627
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '|'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '| Change focus to the parent context. |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '|'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '| Switch the focus to another window, by name or *handle*. A window handle
    is a hexadecimal string that univocally identifies a window or tab. |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '|'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '| Creates a new browser window (using `WindowType.WINDOW`) or tab (`WindowType.TAB`)
    and switches the focus to it. |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '|'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '| Select the main document (when using iframes) or the first frame on the page
    (when using a frameset). |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '|'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '| Get the element currently selected. |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '|'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '| Change focus to a window alert (see [“Dialog Boxes”](#dialog_boxes_sect)
    for further details). |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
- en: Tabs and Windows
  id: totrans-658
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 4-21](#tabs_example) shows a test where we open a new tab for navigating
    a second web page. [Example 4-22](#window_example) shows an equivalent case but
    for opening a new window for the second web page. Notice that the difference between
    these examples is only the parameter `WindowType.TAB` and `WindowType.WINDOW`.'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-21\. Test opening a new tab
  id: totrans-660
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE146]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO19-1)'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: We navigate to a web page.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO19-2)'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: We get the current window handle.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO19-3)'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: We open a new tab and change the focus to it.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO19-4)'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: We open another web page (since the focus is in the second tab, the page is
    opened in the second tab).
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO19-5)'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the number of window handles at this point is 2.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO19-6)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: We change the focus to the initial window (using its handle).
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_browser_agnostic_features_CO19-7)'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: We close only the current window. The second tab remains open.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_browser_agnostic_features_CO19-8)'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: We verify that the number of window handles now is 1.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: Example 4-22\. Test opening a new window
  id: totrans-678
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE147]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO20-1)'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: This line is different in the examples. In this case, we open a new window (instead
    of a tab) and focus on it.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: Frames and Iframes
  id: totrans-682
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 4-23](#iframe_example) shows a test in which the web page under test
    contains an iframe. [Example 4-24](#frame_example) shows the equivalent case but
    using a frameset.'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-23](#iframe_example) 显示了一个测试，其中被测试的网页包含一个 iframe。[示例 4-24](#frame_example)
    显示了相同的情况，但使用了框架集。'
- en: Example 4-23\. Test handling iframes
  id: totrans-684
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-23\. 处理 iframes 的测试
- en: '[PRE148]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO21-1)'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO21-1)'
- en: We open a web page that contains an iframe (see [Figure 4-9](#iframes)).
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个包含 iframe 的网页（见 [图 4-9](#iframes)）。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO21-2)'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO21-2)'
- en: We use an explicit wait for waiting for the frame and switching to it.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用显式等待来等待框架并切换到它。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO21-3)'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO21-3)'
- en: We use another explicit wait to pause until the paragraphs contained in the
    iframe are available.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用另一个显式等待来暂停，直到 iframe 中包含的段落可用。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO21-4)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO21-4)'
- en: We assert the number of paragraphs is as expected.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言段落的数量与预期相同。
- en: '![hosw 0409](assets/hosw_0409.png)'
  id: totrans-694
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0409](assets/hosw_0409.png)'
- en: Figure 4-9\. Practice web page using an iframe
  id: totrans-695
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-9\. 使用 iframe 的练习网页
- en: Example 4-24\. Test handling frames
  id: totrans-696
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-24\. 框架处理测试
- en: '[PRE149]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO22-1)'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO22-1)'
- en: We open a web page that contains a frameset (see [Figure 4-10](#frames)).
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开一个包含框架集的网页（见 [图 4-10](#frames)）。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO22-2)'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO22-2)'
- en: We wait for the frame to be available. Note that steps 2 and 3 in [Example 4-23](#iframe_example)
    are equivalent to this step.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等待框架可用。注意，[示例 4-23](#iframe_example) 中的步骤 2 和 3 等同于此步骤。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO22-3)'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO22-3)'
- en: We change the focus to this frame.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将焦点切换到这个框架。
- en: '![hosw 0410](assets/hosw_0410.png)'
  id: totrans-704
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0410](assets/hosw_0410.png)'
- en: Figure 4-10\. Practice web page using frames
  id: totrans-705
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-10\. 使用框架的练习网页
- en: Dialog Boxes
  id: totrans-706
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话框
- en: 'JavaScript provides different dialog boxes (sometimes called *pop-ups*) to
    interact with the user, namely:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 提供了不同的对话框（有时称为 *弹出窗口*）与用户交互，包括：
- en: Alert
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: To show a message and wait for the user to press the button OK (only choice
    in the dialog). For instance, the following code will open a dialog that displays
    “Hello world!” and waits for the user to press the OK button.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个消息并等待用户按下 OK 按钮（对话框中的唯一选择）。例如，以下代码将打开一个对话框，显示“你好，世界！”并等待用户按下 OK 按钮。
- en: '[PRE150]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Confirm
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 确认
- en: 'To show a dialog box with a question and two buttons: OK and Cancel. For instance,
    the following code will open a dialog showing the message “Is this correct?” and
    prompting the user to click on OK or Cancel.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个带有问题和两个按钮（确定和取消）的对话框。例如，以下代码将打开一个对话框，显示消息“这正确吗？”并提示用户单击确定或取消。
- en: '[PRE151]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Prompt
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To show a dialog box with a text message, an input text field, and the buttons
    OK and Cancel. For example, the following code shows a pop-up displaying “Please
    enter your name,” a dialog box in which the user can type, and two buttons (OK
    and Cancel).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示一个带有文本消息、输入文本字段和 OK 和 Cancel 按钮的对话框。例如，以下代码显示了一个弹出窗口，显示“请输入您的姓名”，用户可以在其中输入，以及两个按钮（确定和取消）。
- en: '[PRE152]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: In addition, CSS allows implementing another type of dialog box called *modal
    window*. This dialog disables the main window (but keeps it visible) while overlaying
    a child pop-up, typically showing a message and some buttons. You can find a sample
    page on the practice web page containing all these dialog boxes (alert, confirm,
    prompt, and modal). [Figure 4-11](#dialog-boxes) shows a screenshot of this page
    when the modal dialog is active.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CSS 允许实现另一种称为 *模态窗口* 的对话框。此对话框会禁用主窗口（但保持可见性），同时覆盖一个子弹出窗口，通常显示消息和一些按钮。你可以在包含所有这些对话框（警告、确认、提示和模态）的练习网页上找到一个示例页面。[图 4-11](#dialog-boxes)
    显示了此页面的截图，模态对话框处于活动状态。
- en: '![hosw 0411](assets/hosw_0411.png)'
  id: totrans-718
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0411](assets/hosw_0411.png)'
- en: Figure 4-11\. Practice web page with dialog boxes (alert, confirm, prompt, and
    modal)
  id: totrans-719
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-11\. 包含对话框（警告、确认、提示和模态）的练习网页
- en: Alerts, Confirms, and Prompts
  id: totrans-720
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告、确认和提示
- en: The Selenium WebDriver API provides the interface `Alert` to manipulate JavaScript
    dialogs (i.e., alerts, confirms, and prompts). [Table 4-9](#alert-methods) describes
    the methods provided by this interface. Then, [Example 4-25](#alert_example) shows
    a basic test interacting with an alert.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API提供了`Alert`接口来操作JavaScript对话框（如警告、确认和提示框）。[表 4-9](#alert-methods)
    描述了此接口提供的方法。接下来，[示例 4-25](#alert_example) 展示了与警告交互的基本测试。
- en: Table 4-9\. Alert methods
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-9\. 警告方法
- en: '| Method | Return | Description |'
  id: totrans-723
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 返回 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-724
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE153]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '|'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE154]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '| To click OK |'
  id: totrans-729
  prefs: []
  type: TYPE_TB
  zh: '| 单击确定 |'
- en: '|'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE155]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '|'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE156]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '| To read the dialog message |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
  zh: '| 读取对话框消息 |'
- en: '|'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE157]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '|'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE158]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '| To click Cancel (not available in alerts) |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
  zh: '| 单击取消（在警告中不可用） |'
- en: '|'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE159]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '|'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE160]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '| To type some string in the input text (only available in prompts) |'
  id: totrans-744
  prefs: []
  type: TYPE_TB
  zh: '| 在输入文本框中输入一些字符串（仅适用于提示） |'
- en: Example 4-25\. Test handling an alert dialog
  id: totrans-745
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-25\. 测试处理警告对话框
- en: '[PRE161]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO23-1)'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO23-1)'
- en: We open the practice web page that launches dialog boxes.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开启动对话框的练习网页。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO23-2)'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO23-2)'
- en: We click on the left button to launch a JavaScript alert.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 我们单击左侧按钮启动JavaScript警告。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO23-3)'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO23-3)'
- en: We wait until the alert dialog is displayed on the screen.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 我们等待警告对话框显示在屏幕上。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO23-4)'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO23-4)'
- en: We change the focus to the alert pop-up.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 我们切换焦点到警告弹出窗口。
- en: '[![5](assets/5.png)](#co_browser_agnostic_features_CO23-5)'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_browser_agnostic_features_CO23-5)'
- en: We verify that the alert text is as expected.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证警告文本是否符合预期。
- en: '[![6](assets/6.png)](#co_browser_agnostic_features_CO23-6)'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_browser_agnostic_features_CO23-6)'
- en: We click on the OK button of the alert dialog.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击警告对话框的确定按钮。
- en: 'We can replace steps 3 and 4 with a single explicit wait statement, as follows
    (you can find it in a second test in the same class in the examples repository):'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用一个显式等待语句来替换步骤3和4，如下所示（您可以在示例库中同一类中的第二个测试中找到它）：
- en: '[PRE162]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: The next test ([Example 4-26](#confirm_example)) illustrates how to deal with
    a confirm dialog. Notice this example is quite similar to the previous one, but
    in this case, we can invoke the method `dismiss()` to click on the Cancel button
    available on the confirm dialog. Finally, [Example 4-27](#prompt_example) shows
    how to manage a prompt dialog. In this case, we can type a string into the input
    text.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个测试（[示例 4-26](#confirm_example)）说明了如何处理确认对话框。请注意，这个示例与前一个示例非常相似，但在这种情况下，我们可以调用`dismiss()`方法单击确认对话框上的取消按钮。最后，[示例 4-27](#prompt_example)
    展示了如何处理提示对话框。在这种情况下，我们可以在输入文本框中输入字符串。
- en: Example 4-26\. Test handling a confirm dialog
  id: totrans-762
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-26\. 测试处理确认对话框
- en: '[PRE163]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Example 4-27\. Test handling a prompt dialog
  id: totrans-764
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-27\. 测试处理提示对话框
- en: '[PRE164]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Modal Windows
  id: totrans-766
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模态窗口
- en: Modal windows are dialog boxes built with basic CSS and HTML. For this reason,
    Selenium WebDriver does not provide any specific utility for manipulating them.
    Instead, we use the standard WebDriver API (locators, waits, etc.) to interact
    with modal windows. [Example 4-28](#modal_example) shows a basic test using the
    practice web page that contains dialog boxes.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 模态窗口是由基本的CSS和HTML构建的对话框。因此，Selenium WebDriver不提供任何特定于操作它们的工具。相反，我们使用标准的WebDriver
    API（定位器、等待等）与模态窗口进行交互。[示例 4-28](#modal_example) 展示了使用包含对话框的练习网页的基本测试。
- en: Example 4-28\. Test handling a modal dialog
  id: totrans-768
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-28\. 测试处理模态对话框
- en: '[PRE165]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Web Storage
  id: totrans-770
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web存储
- en: 'The [Web Storage API](https://html.spec.whatwg.org/multipage/webstorage.html)
    allows web applications to store data locally in the client file system. This
    API provides two JavaScript objects:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '[Web Storage API](https://html.spec.whatwg.org/multipage/webstorage.html) 允许Web应用在客户端文件系统中本地存储数据。此API提供两个JavaScript对象：'
- en: '`window.localStorage`'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.localStorage`'
- en: To store data permanently
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 永久存储数据
- en: '`window.sessionStorage`'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.sessionStorage`'
- en: To store data during the session time (data is deleted when the browser tab
    is closed)
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 在会话期间存储数据（当浏览器选项卡关闭时，数据将被删除）
- en: 'Selenium WebDriver provides the interface `WebStorage` for manipulating the
    Web Storage API. Most of the `WebDriver` types supported by Selenium WebDriver
    inherit this interface: `ChromeDriver`, `EdgeDriver`, `FirefoxDriver`, `OperaDriver`,
    and `SafariDriver`. This way, we can use this feature of these browsers. [Example 4-29](#web_storage)
    demonstrates this use in Chrome. This test uses both types of web storage (local
    and session).'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 为操作 Web Storage API 提供了 `WebStorage` 接口。由 Selenium WebDriver
    支持的大多数 `WebDriver` 类型都继承了此接口：`ChromeDriver`、`EdgeDriver`、`FirefoxDriver`、`OperaDriver`
    和 `SafariDriver`。这样，我们可以在这些浏览器中使用此功能。[Example 4-29](#web_storage) 在 Chrome 中展示了这一用法。此测试使用了本地存储和会话存储两种类型的
    Web Storage。
- en: Example 4-29\. Test using web storage
  id: totrans-777
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 4-29\. 使用 Web Storage 的测试
- en: '[PRE166]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO24-1)'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO24-1)'
- en: We cast the driver object to `WebStorage`.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动对象转换为 `WebStorage`。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO24-2)'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO24-2)'
- en: We log the number of elements of local storage.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 我们记录本地存储元素的数量。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO24-3)'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO24-3)'
- en: We log the session storage (it should contain two elements).
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 我们记录会话存储（它应该包含两个元素）。
- en: '[![4](assets/4.png)](#co_browser_agnostic_features_CO24-4)'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_browser_agnostic_features_CO24-4)'
- en: After adding a new element, there should be three elements in the session storage.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新元素后，会话存储中应该有三个元素。
- en: Event Listeners
  id: totrans-787
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件监听器
- en: 'The Selenium WebDriver API allows creating *listeners* that notify events happening
    in `WebDriver` and derived objects. In former versions of Selenium WebDriver,
    this feature was accessible through the class `EventFiringWebDriver`. This class
    is deprecated as of Selenium WebDriver 4, and instead, we should use the following:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 允许创建*监听器*，通知发生在 `WebDriver` 及其派生对象中的事件。在之前的 Selenium
    WebDriver 版本中，可以通过 `EventFiringWebDriver` 类访问此功能。随着 Selenium WebDriver 4 的推出，该类已被弃用，现在应改用以下内容：
- en: '`EventFiringDecorator`'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '`EventFiringDecorator`'
- en: Wrapper class for `WebDriver` and derived objects (e.g., `WebElement`, `TargetLocator`,
    etc.). It allows registering one or more listeners (i.e., `WebDriverListener`
    instances).
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 `WebDriver` 及其派生对象（例如 `WebElement`、`TargetLocator` 等）的包装类。它允许注册一个或多个监听器（即
    `WebDriverListener` 实例）。
- en: '`WebDriverListener`'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriverListener`'
- en: 'Interface that should implement the listeners registered in the decorator.
    It supports three types of events:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 应实现注册在装饰器中的监听器的接口。它支持三种类型的事件：
- en: '*Before* events'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '*Before* 事件'
- en: Logic inserted just before some event starts
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个事件开始前插入的逻辑
- en: '*After* events'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '*After* 事件'
- en: Logic inserted just after some event terminates
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个事件终止后插入的逻辑
- en: '*Error* events'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '*Error* 事件'
- en: Logic inserted before an exception is thrown
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 在抛出异常之前插入的逻辑
- en: To implement an event listener, first, we should create a listener class. In
    other words, we need to create a class that implements the `WebDriverListener`.
    This interface defines all its methods using the `default` keyword, and therefore,
    it is optional to override their methods. Thanks to that feature (available as
    of Java 8), our class should only implement the method we need. There are plenty
    of listener methods available, for instance, `afterGet()` (executed *after* calling
    to the method `get()` in a `WebDriver` instance), or `beforeQuit()` (executed
    *before* calling to the `quit()` method in a `WebDriver` instance), to name a
    few. My recommendation for checking all these listeners is to use your favorite
    IDE to discover the possible methods to be overridden/implemented. [Figure 4-12](#webdriverlistener)
    shows the wizard for doing this in Eclipse.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现事件监听器，首先我们应创建一个监听器类。换句话说，我们需要创建一个实现 `WebDriverListener` 的类。此接口使用 `default`
    关键字定义了所有方法，因此可选择性地重写这些方法。得益于这个特性（从 Java 8 开始提供），我们的类只需实现我们需要的方法即可。有许多监听器方法可用，例如
    `afterGet()`（在调用 `get()` 方法后执行）、`beforeQuit()`（在调用 `quit()` 方法前执行），等等。建议使用您喜欢的
    IDE 查看可以重写/实现的可能方法。[Figure 4-12](#webdriverlistener) 在 Eclipse 中展示了执行此操作的向导。
- en: '![hosw 0412](assets/hosw_0412.png)'
  id: totrans-800
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0412](assets/hosw_0412.png)'
- en: Figure 4-12\. WebDriverListener methods in Eclipse
  id: totrans-801
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-12\. Eclipse 中的 WebDriverListener 方法
- en: 'Once we have implemented our listener, we need to create the decorator class.
    There are two ways to do that. If we want to decorate a `WebDriver` object, we
    can create an instance of `EventFiringDecorator` (passing the listener as the
    argument to the constructor) and then invoke the method `decorate()` to pass the
    `WebDriver` object. For instance:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们实现了我们的监听器，我们需要创建装饰类。有两种方法可以做到这一点。如果我们想要装饰一个 `WebDriver` 对象，我们可以创建一个 `EventFiringDecorator`
    实例（将监听器作为参数传递给构造函数），然后调用 `decorate()` 方法来传递 `WebDriver` 对象。例如：
- en: '[PRE167]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'The second way is to decorate other objects of the Selenium WebDriver API,
    namely `WebElement`, `TargetLocator`, `Navigation`, `Options`, `Timeouts`, `Window`,
    `Alert`, or `VirtualAuthenticator`. In this case, we need to invoke the method
    `createDecorated()` in an `EventFiringDecorator` object to get a `Decorated<T>`
    generic class. The following snippet shows an example using a `WebElement` as
    a parameter:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是装饰 Selenium WebDriver API 的其他对象，即 `WebElement`、`TargetLocator`、`Navigation`、`Options`、`Timeouts`、`Window`、`Alert`
    或 `VirtualAuthenticator`。在这种情况下，我们需要在 `EventFiringDecorator` 对象中调用 `createDecorated()`
    方法以获得一个 `Decorated<T>` 泛型类。以下片段展示了使用 `WebElement` 作为参数的示例：
- en: '[PRE168]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Let’s look at a completed example. First, [Example 4-30](#eventlistener) shows
    the class that implements the `WebDriverListener` interface. Notice this class
    implements two methods: `afterGet()` and `beforeQuit()`. Both methods call `takeScreenshot()`
    to take a browser screenshot. All in all, we are collecting browser screenshots
    just after loading a web page (typically at the beginning of the test) and before
    quitting (typically at the end of the test). Then, [Example 4-31](#eventfiringdecorator)
    shows the test that uses this listener.'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个完成的示例。首先，[示例 4-30](#eventlistener) 展示了实现 `WebDriverListener` 接口的类。请注意，此类实现了两个方法：`afterGet()`
    和 `beforeQuit()`。这两个方法都调用 `takeScreenshot()` 来获取浏览器截图。总之，我们在加载网页后（通常在测试开始时）和退出之前（通常在测试结束时）收集浏览器截图。接下来，[示例
    4-31](#eventfiringdecorator) 展示了使用此监听器的测试。
- en: Example 4-30\. Event listener implementing methods afterGet() and beforeQuit()
  id: totrans-807
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-30\. 实现 `afterGet()` 和 `beforeQuit()` 方法的事件监听器
- en: '[PRE169]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO25-1)'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO25-1)'
- en: We override this method to execute custom logic *after* loading web pages with
    the `WebDriver` object.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写此方法以在使用 `WebDriver` 对象加载网页后执行自定义逻辑 *后*。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO25-2)'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO25-2)'
- en: We override this method to execute custom logic *before* quitting the `WebDriver`
    object.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重写此方法以在退出 `WebDriver` 对象之前执行自定义逻辑 *之前*。
- en: '[![3](assets/3.png)](#co_browser_agnostic_features_CO25-3)'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_browser_agnostic_features_CO25-3)'
- en: We use a unique name for the PNG screenshots. For that, we get the system date
    (date and time) plus the session identifier.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 PNG 截图使用唯一的名称。为此，我们获取系统日期（日期和时间）加上会话标识符。
- en: Example 4-31\. Test using EventFiringDecorator and the previous listener
  id: totrans-815
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-31\. 使用 `EventFiringDecorator` 和前一个监听器进行测试
- en: '[PRE170]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[![1](assets/1.png)](#co_browser_agnostic_features_CO26-1)'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_browser_agnostic_features_CO26-1)'
- en: We create a decorated `WebDriver` object using an instance on `MyEventListener`.
    We use the resulting `driver` to control the browser in the `@Test` logic.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `MyEventListener` 实例创建装饰后的 `WebDriver` 对象。我们使用生成的 `driver` 在 `@Test` 逻辑中控制浏览器。
- en: '[![2](assets/2.png)](#co_browser_agnostic_features_CO26-2)'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_browser_agnostic_features_CO26-2)'
- en: We click on a web link to change the page. The resulting two screenshots taken
    in the listener should be different.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 我们单击网页链接以更改页面。监听器中获取的两个结果截图应不同。
- en: WebDriver Exceptions
  id: totrans-821
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebDriver 异常
- en: All the exceptions provided by the WebDriver API inherit from the class `WebDriverException`
    and are *unchecked* (see the following sidebar if you are unfamiliar with this
    terminology). [Figure 4-13](#webdriver-exceptions) shows these exceptions in Selenium
    WebDriver 4\. As this image shows, there are many different exception types. [Table 4-10](#webdriver-exceptions-table)
    summarizes some of the most common causes.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriver API 提供的所有异常都继承自 `WebDriverException` 类，且为 *unchecked* 异常（如果您对此术语不熟悉，请参阅以下边栏）。[图
    4-13](#webdriver-exceptions) 展示了 Selenium WebDriver 4 中的这些异常。正如此图所示，有许多不同的异常类型。[表
    4-10](#webdriver-exceptions-table) 总结了一些最常见的原因。
- en: '![hosw 0413](assets/hosw_0413.png)'
  id: totrans-823
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0413](assets/hosw_0413.png)'
- en: Figure 4-13\. Selenium WebDriver exceptions
  id: totrans-824
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-13\. Selenium WebDriver 异常
- en: Table 4-10\. Usual WebDriver exceptions and common causes
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-10\. 常见 WebDriver 异常及其常见原因
- en: '| Exception | Description | Common causes |'
  id: totrans-826
  prefs: []
  type: TYPE_TB
  zh: '| 异常 | 描述 | 常见原因 |'
- en: '| --- | --- | --- |'
  id: totrans-827
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE171]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '| Web element not available |'
  id: totrans-830
  prefs: []
  type: TYPE_TB
  zh: '| Web 元素不可用 |'
- en: Invalid locator strategy
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定位策略无效
- en: The element has not been rendered (maybe you need to wait for it)
  id: totrans-832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素尚未渲染（可能需要等待它）
- en: '|'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE172]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '| Dialog (alert, prompt, or confirm) not available | Trying to perform an action
    (e.g., `accept()` or `dismiss()`) into an unavailable dialog |'
  id: totrans-836
  prefs: []
  type: TYPE_TB
  zh: '| 对话框（警报、提示或确认框）不可用 | 尝试执行无法使用的对话框操作（例如 `accept()` 或 `dismiss()`） |'
- en: '|'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE173]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '| Window or tab not available | Trying to switch into an unavailable window
    or tab |'
  id: totrans-839
  prefs: []
  type: TYPE_TB
  zh: '| 窗口或标签不可用 | 尝试切换到不可用的窗口或标签 |'
- en: '|'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE174]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '| Frame or iframe not available | Trying to switch into an unavailable frame
    or iframe |'
  id: totrans-842
  prefs: []
  type: TYPE_TB
  zh: '| 框架或 iframe 不可用 | 尝试切换到不可用的框架或 iframe |'
- en: '|'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE175]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '| Incorrect argument when calling some method of the Selenium WebDriver API
    |'
  id: totrans-845
  prefs: []
  type: TYPE_TB
  zh: '| 调用 Selenium WebDriver API 某些方法时参数不正确 |'
- en: Bad URL in navigation methods
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航方法中的错误 URL
- en: Nonexistent path when uploading files
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传文件时路径不存在
- en: Bad argument type in a JavaScript script
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 脚本中的错误参数类型
- en: '|'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE176]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '| The element is *stale*, i.e., it no longer appears on the page | The DOM
    gets updated when trying to interact with a previously located element |'
  id: totrans-852
  prefs: []
  type: TYPE_TB
  zh: '| 元素已经 *过时*，即不再出现在页面上 | 当尝试与先前定位的元素交互时，DOM 被更新 |'
- en: '|'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE177]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '| Problem communicating with the browser |'
  id: totrans-855
  prefs: []
  type: TYPE_TB
  zh: '| 与浏览器通信问题 |'
- en: The connection with the remote browser could not be established
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法建立与远程浏览器的连接
- en: The browser died in the middle of a WebDriver session
  id: totrans-857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebDriver 会话中浏览器在中途崩溃
- en: '|'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE178]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '| Page loading timeout | Some web page takes longer than expected to load |'
  id: totrans-861
  prefs: []
  type: TYPE_TB
  zh: '| 页面加载超时 | 某些网页加载时间超过预期 |'
- en: '|'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE179]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '| Script loading timeout | Some script takes longer than expected to execute
    |'
  id: totrans-864
  prefs: []
  type: TYPE_TB
  zh: '| 脚本加载超时 | 某些脚本执行时间超过预期 |'
- en: '|'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE180]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '| The element is on the DOM but is not visible/selectable/clickable |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
  zh: '| 元素在 DOM 中但不可见/可选择/可点击 |'
- en: Insufficient (or nonexistent) wait until the element is displayed/selectable/clickable
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待直到元素显示/可选择/可点击不足（或不存在）
- en: The page layout (perhaps caused by viewport change) makes that element overlay
    on the element we try to interact with
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面布局（可能由视口变化引起）导致该元素覆盖我们尝试与之交互的元素
- en: '|'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Summary and Outlook
  id: totrans-871
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述与展望
- en: This chapter provided a comprehensive review of those WebDriver API features
    interoperable in different web browsers. Among them, you discovered how to execute
    JavaScript with Selenium WebDriver, with synchronous, pinned (i.e., attached to
    a WebDriver session), and asynchronous scripts. Then, you learned about timeouts,
    used to specify a time limit interval for page loading and script execution. Also,
    you saw how to manage several browser aspects, such as size and position, navigation
    history, the shadow DOM, and cookies. Next, you discovered how to interact with
    specific web elements, such as dropdown lists (select and data lists), navigation
    targets (windows, tabs, frames, and iframes), and dialog boxes (alerts, prompts,
    confirms, and modals). Finally, we reviewed the mechanism for implementing web
    storage and event listeners in Selenium WebDriver 4 and the most relevant WebDriver
    exceptions (and their common causes).
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 本章全面回顾了在不同 Web 浏览器中可互操作的 WebDriver API 特性。您在其中了解了如何使用 Selenium WebDriver 执行
    JavaScript，包括同步、固定（即附加到 WebDriver 会话）和异步脚本。然后，您学习了超时的使用，用于指定页面加载和脚本执行的时间限制间隔。此外，您还看到了如何管理多个浏览器方面，如大小和位置、导航历史、阴影
    DOM 和 cookies。接下来，您了解了如何与特定的 Web 元素交互，如下拉列表（选择框和数据列表）、导航目标（窗口、标签、框架和 iframe）和对话框（警报、提示、确认框和模态框）。最后，我们回顾了在
    Selenium WebDriver 4 中实现 Web 存储和事件监听器的机制以及最相关的 WebDriver 异常（及其常见原因）。
- en: The next chapter continues to expose the features of the Selenium WebDriver
    API. The chapter explains those aspects specific to a given browser (e.g., Chrome,
    Firefox, etc.), including browser capabilities (e.g., `ChromeOptions`, `FirefoxOptions`,
    etc.), the Chrome DevTools Protocol (CDP), network interception, mocking geolocation
    coordinates, the WebDriver BiDirectional (BiDi) protocol, authentication mechanisms,
    or printing web pages to PDF, among other features.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章继续揭示 Selenium WebDriver API 的特性。该章节详细解释了针对特定浏览器（例如 Chrome、Firefox 等）的特定方面，包括浏览器功能（例如
    `ChromeOptions`、`FirefoxOptions` 等）、Chrome DevTools Protocol（CDP）、网络拦截、地理位置模拟坐标、WebDriver
    双向协议（BiDi）、认证机制或打印网页为 PDF 等功能。
