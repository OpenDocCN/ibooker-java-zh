["```java\napiVersion: tekton.dev/v1alpha1\nkind: Pipeline\nmetadata:\n  name: inventory-pipeline\nspec:\n  resources:\n  - name: app-git\n    type: git\n  - name: app-image\n    type: image\n  tasks:\n  - name: build\n    taskRef:\n      name: s2i-java-11\n    params:\n      - name: TLSVERIFY\n        value: \"false\"\n    resources:\n      inputs:\n      - name: source\n        resource: app-git\n      outputs:\n      - name: image\n        resource: app-image\n  - name: deploy\n    taskRef:\n      name: kubectl\n    runAfter:\n      - build\n    params:\n    - name: ARGS\n      value:\n        - rollout\n        - latest\n        - inventory-pipeline\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>io.fabric8</groupId>\n            <artifactId>tekton-client</artifactId>\n            <version>${tekton-client.version}</version>\n        </dependency>\n    </dependencies>\n    <properties>\n        <tekton-client.version>4.12.0</tekton-client.version>\n    </properties>\n```", "```java\npackage io.fabric8.tekton.api.examples;\n\nimport io.fabric8.tekton.client.*;\nimport io.fabric8.tekton.resource.v1alpha1.PipelineResource;\nimport io.fabric8.tekton.resource.v1alpha1.PipelineResourceBuilder;\n\npublic class PipelineResourceCreate {\n\n  public static void main(String[] args) {\n    try ( TektonClient client = ClientFactory.newClient(args)) {\n      String namespace = \"coolstore\";\n      PipelineResource resource = new PipelineResourceBuilder()\n        .withNewMetadata()\n        .withName(\"client-repo\")\n        .endMetadata()\n        .withNewSpec()\n        .withType(\"git\")\n        .addNewParam()\n        .withName(\"revision\")\n        .withValue(\"v4.2.2\")\n        .endParam()\n        .addNewParam()\n        .withName(\"url\")\n        .withValue(\"https://github.com/modernizing-java-applications-book/\n inventory-quarkus.git\")\n        .endParam()\n        .endSpec()\n        .build();\n\n      System.out.println(\"Created:\" + client.v1alpha1().pipelineResources().\n        inNamespace(namespace).create(resource).getMetadata().getName());\n    }\n  }\n}\n```", "```java\nkubectl port-forward service/inventory-quarkus 5005:5005\n```", "```java\njdb -sourcepath $(pwd)/src/main/java -attach localhost:5005\n```", "```java\nquarkus.package.type=mutable-jar ![1](Images/1.png) quarkus.live-reload.password=changeit ![2](Images/2.png) quarkus.live-reload.url=http://my.cluster.host.com:8080 ![3](Images/3.png)\n```", "```java\neval $(minikube docker-env)\n```", "```java\nmvn clean install -DskipTests -Dquarkus.kubernetes.deploy=true\n```", "```java\nmvn quarkus:remote-dev\n```", "```java\n$ telepresence connect\n```", "```java\nConnected to context minikube (https://192.168.39.69:8443)\n```", "```java\n$ telepresence list\n```", "```java\ninventory-quarkus-deploy: ready to intercept (traffic-agent not yet installed)\n```", "```java\n$ kubectl get svc inventory-quarkus-service\n```", "```java\nNAME                      TYPE      CLUSTER-IP     EXTERNAL-IP PORT(S)  AGE\ninventory-quarkus-service ClusterIP 172.30.117.178 <none>      8080/TCP 84m\n```", "```java\n$ telepresence intercept inventory-quarkus-deploy --port 8080:http --env-file\n  inventory.env\n```", "```java\nUsing Deployment inventory-quarkus-deploy\nintercepted\n    Intercept name         : inventory-quarkus-deploy\n    State                  : ACTIVE\n    Workload kind          : Deployment\n    Destination            : 127.0.0.1:8080\n    Service Port Identifier: http\n    Volume Mount Point     : /tmp/telfs-844792531\n    Intercepting           : all TCP connections\n```", "```java\nINVENTORY_QUARKUS_SERVICE_PORT=tcp://172.30.117.178:8080\nINVENTORY_QUARKUS_SERVICE_PORT_8080_TCP=tcp://172.30.117.178:8080\nINVENTORY_QUARKUS_SERVICE_PORT_8080_TCP_ADDR=172.30.117.178\nINVENTORY_QUARKUS_SERVICE_PORT_8080_TCP_PORT=8080\nINVENTORY_QUARKUS_SERVICE_PORT_8080_TCP_PROTO=tcp\nINVENTORY_QUARKUS_SERVICE_SERVICE_HOST=172.30.117.178\nINVENTORY_QUARKUS_SERVICE_SERVICE_PORT=8080\nINVENTORY_QUARKUS_SERVICE_SERVICE_PORT_HTTP=8080\nKO_DATA_PATH=/var/run/ko\nKUBERNETES_PORT=tcp://172.30.0.1:443\nKUBERNETES_PORT_443_TCP=tcp://172.30.0.1:443\nKUBERNETES_PORT_443_TCP_ADDR=172.30.0.1\nKUBERNETES_PORT_443_TCP_PORT=443\nKUBERNETES_PORT_443_TCP_PROTO=tcp\nKUBERNETES_SERVICE_HOST=172.30.0.1\nKUBERNETES_SERVICE_PORT=443\nKUBERNETES_SERVICE_PORT_HTTPS=443\nLOG_LEVEL=debug\nNSS_SDB_USE_CACHE=no\nTELEPRESENCE_CONTAINER=inventory-quarkus\nTELEPRESENCE_MOUNTS=/var/run/secrets/kubernetes.io\nTELEPRESENCE_ROOT=/tmp/telfs-777636888\nTERM=xterm\n```", "```java\ncurl http://inventory-quarkus-service.coolstore:8080/api/inventory/329299\n```", "```java\n{\"id\":\"329299\",\"quantity\":35}\n```"]