["```java\n// Java objects\nBigInteger five = new BigInteger(5);\nBigInteger twelve = new BigInteger(12);\nBigInteger sum = five.add(twelve);\n\n// Clojure\n(def five 5)\n(def twelve 12)\n(def sum (+ five twelve))\n\n// C\nint five = 5;\nint twelve = 12;\nint sum = five + twelve;\n```", "```java\npublic class VirtualDemo2 {\n  public static void main(String args[]) throws Exception {\n    Runnable runnable = new Runnable() {\n      public void run() {\n        System.out.println(\"Hello thread! ID: \" +\n            Thread.currentThread().threadId());\n      }\n    };\n    Thread t = Thread.startVirtualThread(runnable);\n    t.join();\n  }\n}\n```", "```java\n% java --enable-preview VirtualDemo2\nHello thread! ID: 20\n```", "```java\npublic class VirtualDemo3 {\n  public static void main(String args[]) throws Exception {\n    Thread t = Thread.startVirtualThread(() ->\n      System.out.println(\"Hello thread! ID: \" +\n          Thread.currentThread().threadId())\n    );\n    t.join();\n  }\n}\n```", "```java\n// File: Field.java\n  protected void paintComponent(Graphics g) {\n    g.setColor(fieldColor);\n    g.fillRect(0,0, getWidth(), getHeight());\n    for (Tree t : trees) {\n      t.draw(g);\n    }\n    // ...\n  }\n```", "```java\n// File: Field.java\n  protected void paintComponent(Graphics g) {\n    g.setColor(fieldColor);\n    g.fillRect(0,0, getWidth(), getHeight());\n    trees.forEach(t -> t.draw(g));\n    // ...\n  }\n```", "```java\n    trees.forEach(t -> {\n      t.setLeafColor(getSeasonalColor());\n      t.draw(g);\n    });\n```", "```java\npublic class Position {\n  int x, y;\n\n  public Position(int x, int y) {\n    this.x = x;\n    this.y = y;\n  }\n  // ...\n}\n```", "```java\nx -> x + 1\n```", "```java\nx -> {\n  System.out.println(\"Input: \" + x);\n  return x + 1;\n}\n```", "```java\njshell> x -> x + 1\n|  Error:\n|  incompatible types: java.lang.Object is not a functional interface\n|  x -> x + 1\n|  ^--------^\n```", "```java\njshell> var inc = x -> x + 1\n|  Error:\n|  cannot infer type for local variable inc\n|    (lambda expression needs an explicit target-type)\n|  var inc = x -> x + 1;\n|  ^-------------------^\n```", "```java\njshell> import java.util.function.*\n\njshell> IntFunction inc = x -> x + 1\ninc ==> $Lambda$24/0x0000000840087840@23ab930d\n```", "```java\njshell> inc.apply(7)\n$16 ==> 8\n```", "```java\njshell> List<String> names = new ArrayList<>()\nnames ==> []\njshell> names.add(\"Kermit\");\n$3 ==> true\njshell> names.add(\"Fozzie\");\n$4 ==> true\njshell> names.add(\"Gonzo\");\n$5 ==> true\njshell> names.add(\"Piggy\");\n$6 ==> true\n\njshell> names.forEach(n -> System.out.println(n))\nKermit\nFozzie\nGonzo\nPiggy\n```", "```java\njshell> names.forEach(System.out::println)\nKermit\nFozzie\nGonzo\nPiggy\n```", "```java\njshell> Consumer<String> printer = System.out::println\nprinter ==> $Lambda$27/0x0000000840087440@63c12fb0\n```", "```java\njshell> Collections.sort(names, (a, b) -> a.compareTo(b))\n\njshell> names\nnames ==> [Fozzie, Gonzo, Kermit, Piggy]\n```", "```java\njshell> Collections.sort(names, (a, b) -> b.compareTo(a))\n\njshell> names\nnames ==> [Piggy, Kermit, Gonzo, Fozzie]\n```", "```java\nCollections.sort(trees, (t1, t2) -> {\n  var t1x = t1.getPositionX();\n  var t1y = t1.getPositionY();\n  var t2x = t2.getPositionX();\n  var t2y = t2.getPositionY();\n  var dist1 = Math.sqrt(t1x * t1x + t1y * t1Y);\n  var dist2 = Math.sqrt(t2x * t2x + t2y * t2y);\n  return dist1 - dist2;\n});\n```", "```java\njshell> names\nnames ==> [Fozzie, Gonzo, Kermit, Piggy]\n\njshell> names.stream().count()\n$24 ==> 4\n```", "```java\njshell> names.stream().forEach(System.out::println)\nFozzie\nGonzo\nKermit\nPiggy\n```", "```java\njshell> Stream<String> nameStream = names.stream()\nnameStream ==> java.util.stream.ReferencePipeline$Head@621be5d1\n\njshell> nameStream.count()\n$27 ==> 4\n\njshell> nameStream.forEach(System.out::println)\n|  Exception java.lang.IllegalStateException: stream has\n|     already been operated upon or closed\n|        at AbstractPipeline.sourceStageSpliterator\n|           (AbstractPipeline.java:279)\n|        at ReferencePipeline$Head.forEach\n|           (ReferencePipeline.java:658)\n|        at (#28:1)\n```", "```java\njshell> Stream.generate(() -> 42).limit(3).forEach(System.out::println)\n42\n42\n42\n```", "```java\nimport java.util.Random;\nimport java.util.stream.Stream;\nimport java.util.function.Supplier;\n\npublic class WeekDayGenerator implements Supplier<String> {\n  private static String[] days =\n    { \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" };\n  private Random randSrc = new Random();\n\n  public String get() {\n    return days[randSrc.nextInt(days.length)];\n  }\n\n  public static void main(String args[]) {\n    Stream.generate(new WeekDayGenerator())\n          .limit(5)\n          .forEach(System.out::println);\n  }\n}\n```", "```java\n% cd ch11/examples\n% javac WeekDayGenerator.java\n% java WeekDayGenerator\nSun\nThu\nFri\nSun\nMon\n```", "```java\njshell> IntStream.iterate(1, i -> i + 1).limit(5).forEach(System.out::println)\n1\n2\n3\n4\n5\n```", "```java\njshell> import java.time.LocalDate\n\njshell> import java.time.temporal.ChronoUnit\n\njshell> Stream.iterate(LocalDate.now(),\n   ...>   d -> d.plus(1, ChronoUnit.DAYS)).limit(5).forEach(System.out::println)\n2023-02-10\n2023-02-11\n2023-02-12\n2023-02-13\n2023-02-14\n```", "```java\njshell> names.stream().filter(n -> n.indexOf(\"o\") > -1).count()\n$30 ==> 2\n```", "```java\njshell> names.add(\"Gonzo\")\n$32 ==> true\n\njshell> names\nnames ==> [Fozzie, Gonzo, Kermit, Piggy, Gonzo]\n\njshell> names.stream().\n   ...> filter(n -> n.indexOf(\"o\") > -1).count()\n$34 ==> 3\n\njshell> names.stream().\n   ...> filter(n -> n.indexOf(\"o\") > -1).\n   ...> distinct().count()\n$35 ==> 2\n```", "```java\njshell> double[] prices = { 5.99, 9.99, 20.0, 8.5};\nprices ==> double[4] { 5.99, 9.99, 20.0, 8.5 }\n\njshell> DoubleStream.of(prices).forEach(System.out::println)\n5.99\n9.99\n20.0\n8.5\n\njshell> DoubleStream.of(prices).map(p -> p*1.05).\n   ...>   forEach(System.out::println)\n6.2895\n10.489500000000001\n21.0\n8.925\n```", "```java\njshell> DoubleStream.of(prices).map(p -> p*1.05).sum()\n$7 ==> 46.70400000000001\n```", "```java\npublic class PaidEmployee {\n  private int id;\n  private String name;\n  private int salary; // annual, in whole dollars\n\n  public PaidEmployee(String fullname, int id, int salary) {\n    this.name = fullname;\n    this.id = id;\n    this.salary = salary;\n  }\n\n  public String getName() { return name; }\n  public int getID() { return id; }\n  public int getSalary() { return salary; }\n}\n```", "```java\nimport java.util.*;\n\npublic class Report {\n  List<PaidEmployee> employees = new ArrayList<>();\n\n  void buildEmployeeList() {\n    employees.add(new PaidEmployee(\"Fozzie\", 4, 30_000));\n    employees.add(new PaidEmployee(\"Gonzo\", 2, 50_000));\n    employees.add(new PaidEmployee(\"Kermit\", 1, 60_000));\n    employees.add(new PaidEmployee(\"Piggy\", 3, 80_000));\n  }\n\n  public void publishNames() {\n    employees.stream().map(e -> e.getName()).forEach(System.out::println);\n  }\n\n  public static void main(String args[]) {\n    Report r = new Report();\n    r.buildEmployeeList();\n    r.publishNames();\n  }\n}\n```", "```java\n  public void publishBudget() {\n    int b = employees.stream().mapToInt(e -> e.getSalary()).sum();\n    System.out.println(\"Annual budget is \" + b);\n  }\n```", "```java\njshell> int[][] board = {\n   ...>   { 2, 0, 4, 2 },\n   ...>   { 0, 3, 0, 1 },\n   ...>   { 5, 0, 1, 0 },\n   ...>   { 2, 3, 0, 2 } }\nboard ==> int[4][] { int[4] ... , int[4] { 2, 3, 4, 2 } }\n\njshell> Arrays.stream(board).forEach(System.out::println)\n[I@5a10411\n[I@2ef1e4fa\n[I@306a30c7\n[I@b81eda8\n```", "```java\njshell> Arrays.stream(board[0]).forEach(System.out::println)\n2\n3\n4\n2\n```", "```java\njshell> Arrays.stream(board).\n   ...>   flatMapToInt(r -> Arrays.stream(r)).\n   ...>   forEach(System.out::println)\n2\n3\n4\n2\n0\n0\n0\n0\n0\n0\n0\n0\n2\n3\n4\n2\n```", "```java\n54.152.182.118 - - [20/Sep/2020:08:28:46 -0400] \"GET / ...\n107.150.59.82 - - [20/Sep/2020:09:33:02 -0400] \"GET / ...\n66.249.65.234 - - [20/Sep/2020:09:33:54 -0400] \"GET /robots.txt ...\n66.249.65.243 - - [20/Sep/2020:09:33:54 -0400] \"GET /robots.txt ...\n```", "```java\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\nimport java.util.zip.GZIPInputStream;\nimport java.io.*;\n\npublic class UniqueIPs {\n  public static void main(String args[]) {\n    Pattern separator = Pattern.compile(\"\\\\s+\");\n    Pattern ipAddress = Pattern.compile(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\");\n    try {\n      // Open the file...\n      FileInputStream fis = new FileInputStream(\"sample-access.log.gz\");\n      // Then decompress the file with a wrapper...\n      GZIPInputStream gis = new GZIPInputStream(fis);\n      // Then wrap the decompressed input in a reader\n      InputStreamReader ir = new InputStreamReader(gis);\n      // Then layer on a buffered reader...\n      BufferedReader br = new BufferedReader(ir);\n\n      // That finally gives us our stream!\n      // Now let's process that stream to get some interesting information\n      long result = br.lines()\n          .flatMap(ls -> separator.splitAsStream(ls))\n          .filter(word -> ipAddress.matcher(word).matches())\n          .distinct()\n          .count();\n      System.out.println(\"Found \" + result + \" unique IPs.\");\n\n    } catch (IOException ioe) {\n      System.err.println(\"Oh no! Something went wrong: \" + ioe);\n    }\n  }\n}\n```", "```java\njshell> List<String> names = new ArrayList<>()\nnames ==> []\n\njshell> names.add(\"Kermit\")\njshell> names.add(\"Fozzie\")\njshell> names.add(\"Gonzo\")\njshell> names.add(\"Piggy\")\n\njshell> names\nnames ==> [Kermit, Fozzie, Gonzo, Piggy]\n```", "```java\njshell> Optional matched = names.stream().\n   ...>   filter(n -> n.indexOf(\"o\") > -1).findFirst()\nmatched ==> Optional[Fozzie]\n\njshell> System.out.println(matched.isPresent() ?\n   ...>   matched.get() : \"N/A\")\nFozzie\n\njshell> Optional matched = names.stream().\n   ...>   filter(n -> n.indexOf(\"a\") > -1).findFirst()\nmatched ==> Optional.empty\n\njshell> System.out.println(matched.isPresent() ?\n   ...>   matched.get() : \"N/A\")\nN/A\n```", "```java\njshell> 5 * 4 * 3 * 2 * 1\n$17 ==> 120\n\n// we already know what 5! is, so reuse that value\njshell> 10 * 9 * 8 * 7 * 6 * 120\n$18 ==> 3628800\n\njshell> 12 * 11 * 3628800\n$19 ==> 479001600\n```", "```java\n// First make a quick alias for our \"1\" value\njshell> one = BigInteger.ONE\none ==> 1\n\n// Test with 12!\njshell> Stream.iterate(one, count -> count.add(one)).\n   ...>   limit(12).reduce(one, (a, b) -> a.multiply(b))\n$32 ==> 479001600\n\n// It matches. Yay! Can we get 13!?\njshell> Stream.iterate(one, count -> count.add(one)).\n   ...>   limit(13).reduce(one, (a, b) -> a.multiply(b))\n$33 ==> 6227020800\n\n// Hooray. Big test next, can we get 21!?\njshell> Stream.iterate(one, count -> count.add(one)).\n   ...>   limit(21).reduce(one, (a, b) -> a.multiply(b))\n$36 ==> 51090942171709440000\n\n// Sure did! Now, just to be silly, try 99!\njshell> Stream.iterate(one, count -> count.add(one)).\n   ...>   limit(99).reduce(one, (a, b) -> a.multiply(b))\n$37 ==> 933262154439441526816992388562667004907159682643\n        816214685929638952175999932299156089414639761565\n        182862536979208272237582511852109168640000000000\n        000000000000\n```", "```java\njshell> List<String> onames = names.stream().\n   ...>   filter(n -> n.indexOf(\"o\") > -1).\n   ...>   collect(Collectors.toList())\nonames ==> [Fozzie, Gonzo]\n```", "```java\nimport java.util.function.DoubleUnaryOperator;\n\npublic class Adjuster {\n  public static double adjust(double val,\n                              DoubleUnaryOperator adjustment)\n  {\n    return adjustment.applyAsDouble(val);\n  }\n\n  public static void main(String args[]) {\n    double sample = 70.2;\n    System.out.println(\"Initial reading: \" + sample);\n    System.out.print(\"Adding 3: \");\n    System.out.println(adjust(sample, s -> s + 3));\n    System.out.print(\"Reducing by 10%: \");\n    System.out.println(adjust(sample, s -> s * 0.9));\n  }\n}\n```", "```java\n$ java Adjuster\nInitial reading: 70.2\nAdding 3: 73.2\nReducing by 10%: 63.18000000000001\n```"]