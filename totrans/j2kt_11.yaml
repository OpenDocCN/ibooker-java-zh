- en: Chapter 11\. Methods to Properties
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java does not distinguish between property access methods and other types. Kotlin,
    on the other hand, treats properties differently than member functions. When should
    we prefer a computed property to a function returning a result?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fields, Accessors, and Properties
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most programming languages allow us to group data together in some way, giving
    names (and often types) to the properties of a composite.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Here, for example, is a *record*, composed of three *fields*, in ALGOL W, one
    of the first general-purpose languages to support record types. (ALGOL W was also
    the language in which Tony Hoare introduced null references.)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Things were different then: real programmers only had CAPITAL LETTERS, and
    gender was a Boolean.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'In ALGOL W, we can (well OK, could) update the age held in a `PERSON` record:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case the compiler will emit the instructions to reach into the memory
    of the record, find the bytes representing Wilma’s age, and increment it. Records,
    also known as *structs* (for structure) in other languages, are a convenience
    for grouping related data. There is no information hiding here, just composition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Most early object-oriented systems (C++ in particular) were based on this record
    mechanism. Instance variables were simply record fields, and methods (aka member
    functions) were fields holding pointers to functions. Smalltalk was different.
    Smalltalk objects can have instance variables, but access to this state is by
    sending a message to the object asking for the value. Messages, not fields, is
    the fundamental abstraction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The Java implementers took a little of each approach. Objects can have public
    fields, but clients can’t just reach into their memory to retrieve them; they
    have to call bytecode instructions to access their values. This allows us to treat
    classes as records while allowing the runtime to enforce private field access.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Although direct access to fields was *permitted*, from the outset it was discouraged.
    We can’t change the internal representation of data if clients access fields directly,
    at least not without changing those clients too. We also cannot maintain any invariant
    relationships between fields if clients can mutate them directly, and as we’ve
    seen in [Chapter 5](ch05.html#beans-to-values), in those days objects were all
    about mutation. Fields access is also not polymorphic, so subclasses cannot change
    their implementation. In those days, objects were all about the subclassing too.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'So instead of direct field access in Java, we usually write *accessor* methods:
    getters and (if need be) setters. Getters usually do nothing except return the
    value of a field, but they may instead compute a value from other fields. Setters
    may maintain invariants or fire events as well as update a field or, perhaps,
    more than one field.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, though, data is just data. When it is, then direct access to public
    fields may be fine, especially when we have immutable values (which is to say,
    final fields of immutable types). For more complicated models, polymorphic behavior
    and/or a uniform way of accessing values from either a field or a calculation
    become useful, and accessor methods come into their own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The Kotlin designers choose to take the decision away from us and only support
    accessor methods. The language doesn’t support giving direct access to fields.
    Kotlin will generate code to access public fields of Java classes but does not
    define public fields itself. (A special annotation, `@JvmField`, provides a back
    door if you really need it.) They did this to encourage us to use accessors so
    that we can change representations without affecting clients.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: To encourage accessors further, Kotlin allows us to generate both a private
    member-variable and an accessor in a single *property* declaration.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'So in Java we can give access to a field directly:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or, we can write our own accessor:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Kotlin, we only have properties:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This declaration will generate private fields: `givenName`, `familyName`, and
    `dateOfBirth`, accessor methods `getGivenName()` and so on, and a constructor
    to initialize all the fields.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'In Java, we can access (visible) fields directly or call accessors:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In Kotlin, we can access visible fields (from Java classes) directly or call
    accessors as if they were fields:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Properties are a convenience backed by some compiler magic. They make it as
    simple to use fields and accessors in Kotlin as plain old fields in Java, so we
    will naturally write code that can take advantage of encapsulation. For example,
    we might find that we want to define a property in an interface or compute a property
    that we previously stored.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '*Computed* properties are those not backed by a field. If we have `givenName`
    and `familyName` backed by fields, there is no need to store `fullName`; we can
    compute it when we need it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we use direct-field access in Java, there is now a difference between the
    way we access the stored and computed properties:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This isn’t the case in Kotlin, even when accessing the Java fields and methods,
    which is nice:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Kotlin, we define computed properties outside the constructor:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, in Java, we *can* define classes that give direct access to fields, but
    *should* generally use accessors, which are just methods named (by convention
    but not always) with a `get` or `set` prefix. In Kotlin, we cannot define fields
    and accessors separately. When we define a property in Kotlin, the compiler generates
    a field and accessors that follow the Java naming convention. When we refer to
    a property in Kotlin, the syntax is the same as Java’s syntax for field access,
    but the compiler generates a call to the accessor. This even applies across the
    interop boundary: when we refer to properties of Java objects, the compiler will
    generate a call to the accessor if one exists and follows the Java naming convention.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在Java中，我们*可以*定义直接访问字段的类，但*通常*应该使用访问器，这些访问器只是以`get`或`set`前缀（按照约定，但不总是这样）命名的方法。在Kotlin中，我们不能单独定义字段和访问器。当我们在Kotlin中定义属性时，编译器会生成一个字段和遵循Java命名约定的访问器。当我们在Kotlin中引用属性时，语法与Java中的字段访问语法相同，但如果存在并且遵循Java命名约定，编译器将生成对访问器的调用。这甚至适用于互操作边界：当我们引用Java对象的属性时，如果存在并且遵循Java命名约定，编译器将生成对访问器的调用。
- en: How to Choose
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何选择
- en: 'Returning to the question at the beginning of the chapter: given that computed
    properties are just methods with sugar on top, when should we choose a computed
    property, and when should we choose a method?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本章开头的问题：考虑到计算属性只是带有糖封装的方法，我们何时应选择计算属性，何时应选择方法？
- en: A good rule of thumb is to use a property when it depends only on other properties
    on the type and is cheap to compute. This applies to `fullName`, so that is a
    good computed property. What about a person’s age?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的经验法则是，当属性仅依赖于类型上的其他属性并且计算成本低廉时，使用属性是一个好主意。这适用于`fullName`，因此这是一个好的计算属性。那么一个人的年龄呢？
- en: We can compute age easily (ignoring time zones) from the `dateOfBirth` property,
    so we might be tempted in Java to write `fred.getAge()`. But this doesn’t depend
    only on other properties, it also depends on when we call it. Unlikely though
    it is, `fred.age == fred.age` can return `false`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`dateOfBirth`属性轻松计算年龄（忽略时区），因此在Java中我们可能会写成`fred.getAge()`。但这不仅取决于其他属性，还取决于调用的时间。尽管可能性不大，`fred.age
    == fred.age`可能会返回`false`。
- en: 'Age is an action ([“Actions”](ch07.html#actions)); its result depends on when
    it is called. Properties should be calculations ([“Calculations”](ch07.html#calculations)),
    timeless and dependent only on their inputs, in this case the `dateOfBirth` property.
    Hence `age()` should be a function, not a property:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 年龄是一个动作（[“动作”](ch07.html#actions)）；其结果取决于调用的时间。属性应该是计算（[“计算”](ch07.html#calculations)），是无时间限制且仅依赖于它们的输入，在这种情况下是`dateOfBirth`属性。因此，`age()`应该是一个函数，而不是属性：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What about a cryptographic hash of all the other properties of the object?
    This is a calculation (for immutable objects), but if it is expensive to compute,
    it should be a method `hash()` not a property `hash`. We might even want to hint
    at the cost of the method in its name:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么对象的所有其他属性的加密哈希呢？对于不可变对象来说，这是一个计算，但如果计算成本高昂，应该是一个方法`hash()`，而不是属性`hash`。我们甚至可能想在其名称中暗示方法的成本：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We could make a property by calculating it up front and storing it in a field:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过预先计算并将其存储在字段中来创建一个属性：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This has the disadvantage of making every instance slow to create, whether
    or not its `hash` is ever accessed. We might split the difference with a lazy
    property:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的缺点是使每个实例创建变慢，无论其`hash`是否被访问。我们可以通过惰性属性来分担这一差异：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a limited scope this would be fine, but if the class was more widely used,
    we should at least hint at the potential first-invocation performance issue by
    hiding the computed property behind a function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在有限的范围内这样做可能还可以，但如果该类被广泛使用，我们至少应该通过将计算属性隐藏在函数背后来暗示潜在的首次调用性能问题：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this case, we might consider an extension property. As we saw in [Chapter 10](ch10.html#functions-to-extension-functions),
    though, extension properties can only be computed rather than backed by a field
    and so cannot be lazy. Apart from that, most of the discussion here also applies
    to extension functions versus extension properties.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以考虑使用扩展属性。正如我们在[第10章](ch10.html#functions-to-extension-functions)中看到的，扩展属性只能计算，而不能由字段支持，因此不能延迟加载。除此之外，这里的大部分讨论也适用于扩展函数与扩展属性的比较。
- en: Mutable Properties
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变属性
- en: So what of mutable properties? Kotlin allows us to define properties as `var`,
    for variable.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么可变属性呢？Kotlin允许我们将属性定义为`var`，表示可变。
- en: If you’ve read this far, you’ll know that your authors like to keep their data
    ([Chapter 5](ch05.html#beans-to-values)) and collections ([Chapter 6](ch06.html#java-to-kotlin-collections))
    immutable. We can *imagine* using Kotlin to define a mutable property to integrate
    with some Java code that required it, but very, very rarely use mutable public
    properties in practice. We might occasionally define a property that will change
    over time (to give access to a count, for example), but almost never one that
    clients can set. In practice, we find that data classes with copy methods work
    better in almost all situations that might have called for a setter; in fact,
    we would go as far as to say that allowing `var` properties in data classes was
    a language design mistake.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读到这里，你会知道我们的作者喜欢保持其数据（[第5章](ch05.html#beans-to-values)）和集合（[第6章](ch06.html#java-to-kotlin-collections)）的不可变性。我们可以*想象*使用
    Kotlin 定义一个可变属性，以便与某些需要它的 Java 代码集成，但实际上几乎从不在公共属性中使用可变性。我们可能偶尔会定义一个随时间变化的属性（例如提供对计数的访问），但几乎从不允许客户端设置它们。事实上，我们发现带有复制方法的数据类在几乎所有可能需要使用
    setter 的情况下效果更好；实际上，我们甚至可以说允许数据类中使用`var`属性是一种语言设计上的错误。
- en: Refactoring to Properties
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构为属性
- en: IntelliJ provides excellent refactoring support for converting between Kotlin
    methods and properties. This is on the one hand simple, because both are simply
    method calls, and on the other complicated, because Java interop relies on naming
    conventions to identify accessors. Let’s look at an example from Travelator.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ 提供了出色的重构支持，可以在 Kotlin 方法和属性之间进行转换。这在某种程度上很简单，因为两者只是方法调用，但在与 Java 互操作时又有些复杂，因为它依赖命名约定来识别访问器。让我们从
    Travelator 中看一个例子。
- en: 'Some of our hardier clients like to camp, so we list campsites in the application:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些喜欢露营的坚韧客户，因此我们在应用程序中列出了露营地：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 11.1 [methods-to-properties.0:src/main/java/travelator/CampSite.java]](https://java-to-kotlin.dev/code.html?ref=11.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.1&show=diff)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.1 [methods-to-properties.0:src/main/java/travelator/CampSite.java]](https://java-to-kotlin.dev/code.html?ref=11.1&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.1&show=diff)'
- en: This is typical of a domain class that has grown over the years. It has lots
    of properties, some backed by fields like `id` and `name`, and some computed (for
    low values of compute) like `countryCode` and `region`. Someone ignored bean conventions
    by naming an accessor `region` rather than `getRegion`, but it is clear to us
    what they meant.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是多年来增长的域类的典型案例。它有很多属性，有些由字段支持，如`id`和`name`，有些计算的（计算量较小），如`countryCode`和`region`。有人没有遵循
    bean 约定，通过将访问器命名为`region`而不是`getRegion`，但我们清楚地知道他们的意图。
- en: 'Here’s some code that uses the accessors:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些使用访问器的代码：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 11.2 [methods-to-properties.0:src/main/java/travelator/CampSites.java]](https://java-to-kotlin.dev/code.html?ref=11.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.2&show=diff)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.2 [methods-to-properties.0:src/main/java/travelator/CampSites.java]](https://java-to-kotlin.dev/code.html?ref=11.2&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.2&show=diff)'
- en: 'Let’s convert `Campsite` to Kotlin with IntelliJ (and then make it a data class):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 IntelliJ 将`Campsite`转换为 Kotlin（然后将其作为数据类）：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Example 11.3 [methods-to-properties.1:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.3&show=diff)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.3 [methods-to-properties.1:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.3&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.3&show=diff)'
- en: 'Our field-backed properties have become constructor properties, and the computed
    `countryCode` a computed property. However, IntelliJ has not realized that `region`
    is a property, because it didn’t obey getter naming conventions and has simply
    converted the method. The net result is that client code doesn’t need to change.
    If we want to correct the oversight, we can Alt-Enter on `region` and “Convert
    function to property”, yielding:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的字段支持的属性已成为构造函数属性，而计算的`countryCode`成为计算属性。然而，IntelliJ 没有意识到`region`是一个属性，因为它没有遵守
    getter 命名约定，只是简单地转换了方法。最终结果是客户端代码无需更改。如果我们想要纠正这个疏忽，我们可以在`region`上按 Alt-Enter，并选择“将函数转换为属性”，得到：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[Example 11.4 [methods-to-properties.2:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.4&show=diff)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.4 [methods-to-properties.2:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.4&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.4&show=diff)'
- en: 'As with most computed properties, this is better as a single expression (see
    [Chapter 9](ch09.html#multi-to-single-expression-functions)):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数计算属性一样，这更适合作为单个表达式（参见[第 9 章](ch09.html#multi-to-single-expression-functions)）：
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Example 11.5 [methods-to-properties.3:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.5&show=diff)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.5 [methods-to-properties.3:src/main/java/travelator/CampSite.kt]](https://java-to-kotlin.dev/code.html?ref=11.5&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.5&show=diff)'
- en: 'Changing the Kotlin `region` method to a property means that the accessor method
    will now be named `getRegion`; thankfully, IntelliJ is smart enough to fix up
    our clients for us:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Kotlin 的`region`方法更改为属性意味着访问器方法现在将被命名为`getRegion`；值得庆幸的是，IntelliJ 足够智能，可以为我们修复我们的客户端：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[Example 11.6 [methods-to-properties.3:src/main/java/travelator/CampSites.java]](https://java-to-kotlin.dev/code.html?ref=11.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.6&show=diff)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.6 [methods-to-properties.3:src/main/java/travelator/CampSites.java]](https://java-to-kotlin.dev/code.html?ref=11.6&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.6&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO19-1)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO19-1)'
- en: '`campsite.region()` has been replaced by `campsite.getRegion()`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`campsite.region()`已被`campsite.getRegion()`替换。'
- en: 'If we now convert `sitesInRegion` to Kotlin, we get the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在将`sitesInRegion`转换为 Kotlin，我们得到以下结果：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[Example 11.7 [methods-to-properties.4:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.7&show=diff)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.7 [methods-to-properties.4:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.7&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.7&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO20-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO20-1)'
- en: '`campsite.getRegion()` is now invoked by `campsite.region`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`campsite.getRegion()`现在被`campsite.region`调用。'
- en: 'We saw how to move `sitesInRegion` to the top level in [Chapter 8](ch08.html#static-methods-to-top-level-functions),
    and to an extension function in [Chapter 10](ch10.html#functions-to-extension-functions):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如何将`sitesInRegion`移动到[第 8 章](ch08.html#static-methods-to-top-level-functions)的顶层，以及移动到[第
    10 章](ch10.html#functions-to-extension-functions)的扩展函数中：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[Example 11.8 [methods-to-properties.5:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.8&show=diff)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.8 [methods-to-properties.5:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.8&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.8&show=diff)'
- en: '*Streams to Iterables to Sequences* ([Chapter 13](ch13.html#streams-to-sequences))
    and *Multi- to Single-Expression Functions* ([Chapter 9](ch09.html#multi-to-single-expression-functions))
    show how to finish the job to:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*流到迭代器到序列*（[第 13 章](ch13.html#streams-to-sequences)）和*多到单表达式函数*（[第 9 章](ch09.html#multi-to-single-expression-functions)）展示了如何完成任务：'
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[Example 11.9 [methods-to-properties.6:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.9&show=diff)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.9 [methods-to-properties.6:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.9&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.9&show=diff)'
- en: Due to the excellent tooling and interop around methods, accessors, and properties,
    this has been a mercifully short refactor. So we crave your indulgence while we
    add just one more tweak.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于围绕方法、访问器和属性的出色工具和互操作性，这是一次幸运的简短重构。因此，在我们添加最后一个微调时，我们期待着您的谅解。
- en: '`sitesInRegion` is a bit of an odd method. It is making up for a deficiency
    in our modeling, which is that regions are just strings not entities. Without
    the country code, if we filter just on region name “Hampshire,” we risk returning
    a set of sites, most of which are in an English county, but where one (Moonlight
    Camping—it sounds lovely) is on a Canadian island. Until we can fix that, what
    if we pull the filter predicate out into its own method?'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`sitesInRegion`是一个有点奇怪的方法。它弥补了我们建模的不足之处，即区域只是字符串而不是实体。如果我们只根据区域名称“Hampshire”进行过滤，没有国家代码，我们有可能返回一个站点集合，其中大多数位于英格兰的县，但有一个（月光露营——听起来很可爱）在加拿大的一个岛上。在我们能够修复之前，如果我们将过滤断言提取到自己的方法中会怎样？'
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[Example 11.10 [methods-to-properties.7:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.10&show=diff)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.10 [methods-to-properties.7:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.10&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.10&show=diff)'
- en: 'Now that we have `Campsite.isIn(...)`, maybe `sitesInRegion` could be inlined
    into the places that call it, because the code is now really quite self-explanatory.
    We prefer to find and publish the fundamental operations that clients can build
    on, rather than hiding them inside functions. Pulling on this thread, we might
    expand the functionality of `isIn` by making `region` optional:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`Campsite.isIn(...)`，也许`sitesInRegion`可以内联到调用它的地方，因为现在代码真的很容易理解。我们更喜欢找出并公开客户端可以构建的基本操作，而不是将它们隐藏在函数内部。顺著这条线索，我们可以通过使`region`可选来扩展`isIn`的功能：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[Example 11.11 [methods-to-properties.8:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.11&show=diff)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.11 [方法到属性.8:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.11&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.11&show=diff)'
- en: 'Nat prefers the same, but with an Elvis operator:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 纳特更喜欢相同的，但带有Elvis运算符：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[Example 11.12 [methods-to-properties.9:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=11.12&show=diff)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 11.12 [方法到属性.9:src/main/java/travelator/CampSites.kt]](https://java-to-kotlin.dev/code.html?ref=11.12&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=11.12&show=diff)'
- en: Duncan likes a good Elvis but thinks the code is clearer his way. Your team
    will probably have these little battles (choose Duncan’s way).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 邓肯喜欢好的Elvis，但认为他的方法代码更清晰。你的团队可能会有这些小冲突（选择邓肯的方式）。
- en: A fundamental operation like `isIn` might now be promoted to a method (as opposed
    to an extension function) on `Campsite` or, even better, `Address`. This way,
    the problem of regions not being entities is confined to the type closest to the
    problem, and fixing it there will have the least effect on the rest of the codebase.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 像`isIn`这样的基本操作现在可能被提升为`Campsite`的一个方法（而不是一个扩展函数），或者更好地，是`Address`的一个方法。这样，区域不是实体的问题就限制在最接近问题的类型上，修复起来对代码库的其余部分影响最小。
- en: Moving On
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前进
- en: Kotlin provides a convenient syntax for both field-backed and computed properties
    that allows us to express the difference between accessing a property and calling
    a function, even if they are the same message-passing mechanism under the hood.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin提供了一种方便的语法，用于支持基于字段和计算的属性，使我们能够表达访问属性和调用函数之间的差异，即使它们在幕后是相同的消息传递机制。
- en: We should prefer a property to a method when it applies to a value type, depends
    only on the value, and is not expensive to compute. In these cases, refactoring
    from a method to a property is simple and makes our code easier to understand.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当它适用于值类型，仅依赖于值并且计算成本不高时，我们应该优先选择属性而不是方法。在这些情况下，从方法重构为属性是简单的，能使我们的代码更易于理解。
