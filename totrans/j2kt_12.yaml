- en: Chapter 12\. Functions to Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we have a large Java codebase, our Java and Kotlin will have to coexist for
    some time. What can we do to support the conventions of both languages as we gradually
    translate the system to Kotlin?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So far, we have shown the translation of code from Java to Kotlin happening
    all in one go. We have used automatic refactorings to perform the translation
    safely, but by the end, all the affected code has been converted to idiomatic
    Kotlin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In large codebases, this is not always possible. We must continue to evolve
    features in Java while we are introducing Kotlin. Where there is a boundary between
    the two, we want to use conventional Java on one side and conventional Kotlin
    on the other. This is especially true when we convert foundational classes that
    support a lot of our system’s functionality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'A Foundational Class: Money'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every system contains some foundational classes that many parts of the codebase
    use. An example in Travelator is the `Money` class, which we first saw in [Chapter 3](ch03.html#java-to-kotlin-classes).
    Travelers need to budget for their trips. They want to compare costs of different
    travel options, see those costs converted to the their preferred currency, book
    things, pay for things, and so on. The `Money` class is so widely used that we
    cannot convert it and all the code that depends on it to idiomatic Kotlin in one
    fell swoop. We have to continue working on features that use `Money` in both Java
    and Kotlin while the conversion is ongoing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: This leaves us between Scylla and Charybdis. Do we leave `Money` as a Java class
    while we convert code that depends on it to Kotlin, but in the meantime limit
    the Kotlin features we can use in that dependent code? Or do we convert the `Money`
    class to Kotlin while we still have Java code using it, allowing us to use Kotlin
    features in dependent code but leaving the remaining Java code inconsistent and
    unconventional?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The fact that we even have these options is a testament to how well Kotlin/Java
    interop works in both directions. In practice, we don’t have to choose. With some
    cunning refactoring tactics and a few annotations to control how the Kotlin compiler
    generates code for the JVM, we can get the best of both worlds. We can define
    `Money` in Kotlin, allowing us to take advantage of Kotlin’s features, and still
    provide an idiomatic API for Java code that we are maintaining.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We converted the `Money` class to Kotlin in [Chapter 3](ch03.html#java-to-kotlin-classes).
    Since we left it at the end of that chapter, we have (without you, sorry) been
    able to make the code more concise without affecting Java code that depends on
    it. We refactored most of the methods to single-expression form ([Chapter 9](ch09.html#multi-to-single-expression-functions)),
    and we took advantage of Kotlin’s flow-sensitive type inference to simplify the
    `equals` method greatly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is `Money` now. It isn’t significantly different but has a lot less syntactic
    noise:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 12.1 [operators.0:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.1&show=diff)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.1 [operators.0:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.1&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.1&show=diff)'
- en: However, it still retains the grain of Java, as does the Kotlin code that uses
    it. The `Money` class follows conventions for value types that are common in [Modern
    Java](ch01.html#modern-java-style), but are not the way things are usually done
    in Kotlin. In particular, it uses methods of a companion object to create values,
    and it uses methods rather than operators for arithmetic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它仍保留了Java的风格，正如使用它的Kotlin代码所示。`Money`类遵循了[现代Java](ch01.html#modern-java-style)中常见的值类型的约定，但这并不是Kotlin中通常的做法。特别是，它使用伴生对象的方法创建值，并且对于算术运算，它使用方法而不是运算符。
- en: In a monolingual codebase, it would be pretty straightforward to address those
    issues. However, we still have plenty of Java code that uses the `Money` class.
    We’ll continue to make changes in Java *and* Kotlin, until Kotlin has edged Java
    out altogether. In the meantime, we want to ensure that code that uses `Money`
    in either language is conventional enough not to frighten the horses.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在单语言代码库中，解决这些问题将会相当直接。然而，我们仍然有大量使用`Money`类的Java代码。我们将继续在Java和Kotlin中进行更改，直到Kotlin完全取代Java。与此同时，我们希望确保使用`Money`的代码在任一语言中都足够传统，以免惊扰读者。
- en: Adding a User-Defined Operator
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户定义的运算符
- en: 'Kotlin code that calculates with `Money` values is still rather clumsy:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Money`值进行计算的Kotlin代码仍然相当笨拙：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is not significantly different from the equivalent Java:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它与等价的Java代码没有显著不同：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using methods for arithmetic operations makes the calculation harder to read.
    It’s the best we can do in Java, but in Kotlin we can define arithmetic operators
    for our own classes, allowing us to write that calculation as:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用算术操作方法会使计算变得难以阅读。在Java中，这是我们能做的最好的事情，但在Kotlin中，我们可以为自己的类定义算术运算符，使我们可以将该计算写为：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Taking addition as an example, let’s take a look at how we can give our `Money`
    class arithmetic operators.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以加法为例，让我们看看如何给我们的`Money`类添加算术运算符。
- en: 'We give a class the `+` operator by writing an operator method or extension
    function called `plus`. For our `Money` class, we can rename the existing `add`
    method to `plus` and add the `operator` modifier:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写一个名为`plus`的运算符方法或扩展函数，我们为类赋予了`+`运算符。对于我们的`Money`类，我们可以将现有的`add`方法重命名为`plus`并添加`operator`修饰符：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 12.2 [operators.2:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.2&show=diff)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.2 [operators.2:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.2&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.2&show=diff)'
- en: With this change, our Kotlin code can add `Money` values with the + operator,
    whereas the Java code calls `plus` as a method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个改变，我们的Kotlin代码可以使用+运算符添加`Money`值，而Java代码则调用`plus`作为方法。
- en: When we go to check in, though, we find that our rename has rippled across hundreds
    of files of Java code, introducing a name that doesn’t follow Java conventions.
    Java classes in the standard library with arithmetic operations, such as `BigDecimal`
    and `BigInteger`, all use the name `add`, not `plus`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们准备检入时，我们发现我们的重命名已经波及了数百个Java代码文件，引入了一个不遵循Java约定的名称。标准库中具有算术操作的Java类，如`BigDecimal`和`BigInteger`，都使用名称`add`，而不是`plus`。
- en: 'We can make a function appear to have different names in Java and Kotlin by
    annotating its definition with the `@JvmName` annotation. Let’s revert the change
    we just made and take another run at it, starting by annotating the method with
    `@JvmName("add")`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在其定义中使用`@JvmName`注解使函数在Java和Kotlin中呈现不同的名称。让我们撤销刚刚做出的更改，再试一次，首先用`@JvmName("add")`注解方法：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 12.3 [operators.3:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.3&show=diff)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.3 [operators.3:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.3&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.3&show=diff)'
- en: 'Now when we rename the method to `plus`, our Java code is unchanged, and marking
    it as an operator allows both Java and Kotlin code to call the method according
    to their respective language conventions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们将方法重命名为`plus`时，我们的Java代码保持不变，并且将其标记为运算符允许Java和Kotlin代码根据各自的语言约定调用该方法：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 12.4 [operators.4:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.4&show=diff)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.4 [operators.4:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.4&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.4&show=diff)'
- en: Is this desirable? It can be quite confusing to have the same method appear
    under different names in different parts of the same codebase. On the other hand,
    because it’s an operator method, the name `plus` should only appear in the definition
    of the method, and all uses of the method from Kotlin should be via the `+` operator.
    The phrase `operator fun plus` is more like a language keyword than a method name.
    IntelliJ navigates seamlessly between calls to `add` in Java and the definition
    of `operator plus` in Kotlin. On balance, your authors think it’s worth using
    the `@JvmName` annotation in this case, but in general you will need to come to
    an agreement within your team about how you use the `@JvmName` annotation to adjust
    Kotlin classes to Java clients.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可取的吗？在同一代码库的不同部分中以不同的名称出现相同的方法可能会相当令人困惑。另一方面，因为它是一个运算符方法，所以`plus`名称只应出现在方法的定义中，而
    Kotlin 中所有对该方法的使用都应通过`+`运算符进行。短语`operator fun plus`更像是一个语言关键字而不是方法名。IntelliJ 在
    Java 中调用`add`和 Kotlin 中定义的`operator plus`之间可以无缝导航。总的来说，您的作者认为在这种情况下使用`@JvmName`注解是值得的，但通常您需要就如何使用`@JvmName`注解调整
    Kotlin 类以满足 Java 客户端的要求达成一致。
- en: Calling Our Operator from Existing Kotlin Code
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从现有的 Kotlin 代码调用我们的运算符
- en: Looking at our Kotlin client code, we find we still have a problem. At the time
    of writing, IntelliJ does not have an automated refactoring to replace all direct
    calls to an operator method with use of the respective operator. Any of our Kotlin
    code that had been calling the `Money.add` method before we turned it into an
    operator will be left calling `Money.plus` as a method instead of using the `+`
    operator. IntelliJ can automatically refactor each of those call sites from a
    method call to an operator, but we would have to go through them one by one, invoking
    the refactoring individually.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的 Kotlin 客户端代码，我们发现我们仍然有问题。在撰写本文时，IntelliJ 没有自动重构来替换对运算符方法的所有直接调用，而是使用相应运算符。在我们将其转换为运算符之前，我们的任何
    Kotlin 代码都会调用`Money.add`方法的任何部分将保持调用`Money.plus`作为方法而不是使用`+`运算符。IntelliJ 可以自动将这些调用点从方法调用重构为运算符，但我们必须一个接一个地处理它们，逐个调用重构。
- en: To address this problem, we can use a sequence of refactoring steps to switch
    *all* our Kotlin code over to use the `+` operator at once, and leave in the code
    the capability to replay the steps as we convert more Java classes to Kotlin.
    So let’s re-revert our change and take yet another run at the conversion.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，我们可以使用一系列重构步骤一次性将 *所有* 我们的 Kotlin 代码切换到同时使用`+`运算符，并在代码中保留重新播放步骤的能力，以便将更多的
    Java 类转换为 Kotlin。所以让我们重新还原我们的改动，并再次尝试转换。
- en: 'This time, we’ll extract the entire body of the `add` method as a method called
    `plus` and make it a public, operator method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将整个`add`方法的主体提取为名为`plus`的方法，并将其作为公共的运算符方法：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 12.5 [operators.6:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.5&show=diff)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.5 [operators.6:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.5&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.5&show=diff)'
- en: 'Using IntelliJ’s automatic refactoring, we make `this` explicit in the call
    to `plus`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IntelliJ 的自动重构，我们在调用`plus`时明确了`this`：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 12.6 [operators.7:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.6&show=diff)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.6 [operators.7:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.6&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.6&show=diff)'
- en: 'From this form, IntelliJ lets us automatically refactor from method call to
    operator:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从此形式，IntelliJ 让我们自动重构从方法调用到运算符：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 12.7 [operators.8:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.7&show=diff)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.7 [operators.8:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.7&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.7&show=diff)'
- en: 'Finally we can transform the `add` method to single-expression form:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将`add`方法转换为单表达式形式：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 12.8 [operators.9:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.8&show=diff)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.8 [operators.9:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.8&show=diff)'
- en: We now have two methods for addition. The `plus` operator implements the addition
    logic and is what we’d like all our Kotlin code to use in the future, but nothing
    calls it directly yet. The `add` method will remain for use by our Java code,
    while it exists, and its body contains the ideal syntax we would like to use in
    our Kotlin code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两种加法方法。`plus`运算符实现了加法逻辑，并且这是我们希望所有将来的Kotlin代码使用的，但目前没有直接调用它的代码。`add`方法将继续供我们的Java代码使用，只要它存在，并且它的主体包含我们希望在Kotlin代码中使用的理想语法。
- en: We can convert all our Kotlin code that adds `Money` values to use the operator
    syntax by inlining the `Money.add` method. When we do, IntelliJ reports that it
    was unable to inline all the uses of `add`. That’s just what we want! We can’t
    inline Kotlin code into Java, so IntelliJ has inlined the body of the `add` method
    only into the Kotlin call sites and has kept its definition in the `Money` class
    because it is still called by Java. All our Kotlin code is now using the `+` operator,
    and our Java code is unchanged.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将所有添加`Money`值的Kotlin代码转换为使用操作符语法，通过内联`Money.add`方法来实现。当我们这样做时，IntelliJ报告说无法内联所有`add`的使用。这正是我们想要的！我们不能将Kotlin代码内联到Java中，因此IntelliJ仅将`add`方法的主体内联到Kotlin调用位置，并保留其在`Money`类中的定义，因为它仍然被Java调用。现在我们所有的Kotlin代码都使用`+`运算符，而我们的Java代码则保持不变。
- en: In the future, when we translate more Java classes that add `Money` values to
    Kotlin, we can inline the `add` method again to make the converted Kotlin class
    use the `+` operator instead of method call syntax. As long as there is Java code
    in our codebase that calls it, IntelliJ will preserve the `add` method. After
    we’ve converted the last Java class that adds `Money`, IntelliJ will remove the
    now unused `add` method as part of the inline refactoring. Our codebase will then
    only use the `+` operator.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在将更多将`Money`值添加到Kotlin的Java类翻译成Kotlin的未来中，我们可以再次内联`add`方法，以便转换后的Kotlin类使用`+`运算符而不是方法调用语法。只要我们的代码库中还有调用它的Java代码，IntelliJ就会保留`add`方法。在我们转换了最后一个将`Money`添加的Java类之后，IntelliJ将删除这个现在不再使用的`add`方法作为内联重构的一部分。我们的代码库随后将只使用`+`运算符。
- en: Operators for Existing Java Classes
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现有Java类的操作符
- en: 'While we’re working on the `plus` method, we can also take the opportunity
    to use the `+` operator *inside* the method. The `Money` class represents its
    `amount` property as a `BigDecimal`, a class from the Java standard library. We
    can replace the call to the `Big​Deci⁠mal.add` method with the + operator:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们处理`plus`方法时，我们还可以利用机会在方法*内部*使用`+`运算符。`Money`类将其`amount`属性表示为`BigDecimal`，这是Java标准库中的一个类。我们可以将对`Big​Deci⁠mal.add`方法的调用替换为+运算符：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 12.9 [operators.11:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.9&show=diff)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.9 [operators.11:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.9&show=diff)'
- en: Our code continues to compile. How is that possible?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码继续编译。这是如何可能的？
- en: 'The Kotlin standard library includes extension functions that define operators
    for classes in the Java standard library: mathematical classes, such as `BigInteger`
    and `BigDecimal`, and collections, such as `List<T>` or `Set<T>`. Because these
    extension functions are defined in the `kotlin` package, they are available to
    any package automatically: we don’t need to import them.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin标准库包括为Java标准库中的类定义操作符的扩展函数：数学类，如`BigInteger`和`BigDecimal`，以及集合类，如`List<T>`或`Set<T>`。由于这些扩展函数在`kotlin`包中定义，它们对任何包都是自动可用的：我们不需要导入它们。
- en: Conventions for Denoting Values
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表示值的惯例
- en: The static `of` functions on the companion object, used to denote `Money` values,
    also break Kotlin conventions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 伴生对象上的静态`of`函数用于表示`Money`值，也打破了Kotlin的惯例。
- en: Java syntax distinguishes between instantiating a class with the `new` operator
    and obtaining an object as the result of a method call. A [Modern Java](ch01.html#modern-java-style)
    convention is that stateful objects, for which identity is significant, are constructed
    with the new operator, and values are denoted by calls to static factory functions.
    For example, the expression `new ArrayList<>()` constructs a new mutable list
    distinct from any other mutable list, while the expression `List.of("a","b","c")`
    denotes an immutable list value.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Java 语法区分了使用 `new` 操作符实例化一个类和获取方法调用结果的对象。[现代 Java](ch01.html#modern-java-style)
    的一个约定是，对于具有显著标识的有状态对象，使用 `new` 操作符进行构造，而对于值则使用静态工厂函数进行表示。例如，表达式 `new ArrayList<>()`
    构造一个新的可变列表，与任何其他可变列表不同，而表达式 `List.of("a","b","c")` 表示一个不可变列表值。
- en: 'Kotlin does not draw a distinction between constructing objects and calling
    functions: the syntax for instantiating a class is the same as that for calling
    a function. Nor are there coding conventions to distinguish between constructing
    a new stateful object that has a distinct identity and denoting values that do
    not.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 不区分对象的构造和函数的调用：实例化类的语法与调用函数的语法相同。也没有编码约定来区分构造具有不同标识的新有状态对象和表示不变量的值。
- en: Warning
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Although the Kotlin code for calling a function and instantiating a class look
    the same, they are implemented by different JVM bytecode. A source-compatible
    change between calling a constructor and a function will not be binary compatible.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Kotlin 代码中调用函数和实例化类的语法看起来相同，但它们由不同的 JVM 字节码实现。在调用构造函数和函数之间进行源代码兼容的更改将不会是二进制兼容的。
- en: 'Where a class needs multiple factory functions, as does our `Money` class,
    they are usually defined as top-level functions, not on the companion object of
    the class. IntelliJ does its bit to nudge one toward this style: it is much better
    at autosuggesting top-level functions than methods on a companion object.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要多个工厂函数的类，如我们的`Money`类，通常将它们定义为顶级函数，而不是类的伴生对象中的方法。IntelliJ 在这种风格上有所帮助：它更擅长自动建议顶级函数而不是类的伴生对象中的方法。
- en: So, it would be more conventional if we created `Money` instances with expressions
    like `Money(...)` or, alternatively, `moneyOf(...)`, rather than `Money.of(...)`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们像`Money(...)`或者另外一种选择`moneyOf(...)`这样的表达式来创建`Money`的实例，会更加常规化，而不是`Money.of(...)`。
- en: As we saw in [Chapter 3](ch03.html#java-to-kotlin-classes), `Money` has a private
    constructor (and isn’t a data class) to preserve the relationship between its
    currency and the precision of its `amount`. So it looks like the easiest option
    would be to define top-level `moneyOf` functions in the same source file as the
    `Money` class. However, those `moneyOf` functions would have to call the `Money`
    class’s constructor. They can’t call it if it is still declared as `private`,
    but could if we change the constructor to `internal`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第 3 章](ch03.html#java-to-kotlin-classes)中看到的，`Money` 具有私有构造函数（并不是数据类），以保留其货币与其`amount`精度之间的关系。因此，最简单的选择似乎是在与`Money`类相同的源文件中定义顶级`moneyOf`函数。然而，这些`moneyOf`函数如果需要调用`Money`类的构造函数，如果其仍然声明为`private`则无法调用，但如果我们将构造函数更改为`internal`则可以调用。
- en: Internal visibility would make the constructor visible to any Kotlin code in
    the same compilation unit (Gradle subproject or IntelliJ module) but prevent it
    from being called by Kotlin code in other compilation units. The compilation unit,
    rather than the class, would be responsible for guaranteeing the invariants of
    the `Money` class by never calling its constructor inappropriately. That would
    be safe enough if it wasn’t for those Java parts of our system that we will continue
    to maintain during our system’s transition to Kotlin.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 内部可见性将使构造函数对同一编译单元（Gradle 子项目或 IntelliJ 模块）中的任何 Kotlin 代码可见，但阻止其被其他编译单元中的 Kotlin
    代码调用。编译单元而不是类，负责通过不适当调用其构造函数来保证 `Money` 类的不变量。如果不是我们系统转换为 Kotlin 过程中将继续维护的那些 Java
    部分，这种做法已经足够安全了。
- en: Java and the JVM do not have the concept of internal visibility. The Kotlin
    compiler translates internal features of a class to a public feature in the JVM
    class files it generates, and records the internal visibility as additional metadata
    that is processed by the Kotlin compiler but ignored by the Java compiler. As
    a result, Kotlin features declared as internal appear to be public to the Java
    compiler and JVM, allowing us to create invalid `Money` values accidentally when
    we’re working in the Java code of our project. That makes top-level `moneyOf`
    functions an unattractive option.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Java和JVM没有内部可见性的概念。Kotlin编译器将类的内部特性翻译为生成的JVM类文件中的公共特性，并将内部可见性记录为额外的元数据，这些元数据由Kotlin编译器处理但被Java编译器忽略。因此，Kotlin中声明为内部的特性在Java编译器和JVM中表现为公共的，这使得我们在项目的Java代码中意外地创建无效的`Money`值。这使得顶级的`moneyOf`函数成为一个不太吸引人的选项。
- en: 'Instead, we can lean on Kotlin’s operator overloading again. If we define a
    function call operator for the `Money` class’s companion object, Kotlin code can
    create `Money` values by using the same syntax as if they were directly calling
    the constructor:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以再次依赖于Kotlin的运算符重载。如果我们为`Money`类的伴生对象定义一个函数调用运算符，Kotlin代码可以使用与直接调用构造函数相同的语法创建`Money`值：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It won’t actually be a constructor call, though; in longhand it is:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上这并不是一个构造函数调用；长写法是：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Just as we found when renaming the `add` method to `plus`, if we try to achieve
    this by merely renaming `of` to `invoke`, we will have a knock-on effect on our
    Java code. Java code that creates `Money` values changes from reading as `Money.of(BigDecimal(100),
    EUR)` to `Money.invoke(BigDecimal(100), EUR)`. The `of` methods had *two* responsibilities:
    to enforce the class invariants when constructing `Money` values, and to provide
    syntactic sugar in the caller that conforms to Modern Java conventions for denoting
    values. Renaming from `of` to `invoke` doesn’t affect the former but messes up
    the latter.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在将`add`方法重命名为`plus`时所发现的那样，如果仅仅将`of`重命名为`invoke`，这将对我们的Java代码产生连锁效应。创建`Money`值的Java代码将从读作`Money.of(BigDecimal(100),
    EUR)`变为`Money.invoke(BigDecimal(100), EUR)`。`of`方法有*两个*责任：在构造`Money`值时强制执行类不变量，并在调用者中提供符合现代Java约定表示值的语法糖。从`of`重命名为`invoke`不影响前者，但破坏了后者。
- en: We can use the same combination of extract method and refactor the call to the
    extracted method and inline method to avoid any negative effects on our Java code
    as we refactor our Kotlin code to follow Kotlin conventions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重构我们的Kotlin代码遵循Kotlin约定时，我们可以使用相同的提取方法和重构调用提取方法和内联方法的组合来避免对我们的Java代码产生任何负面影响。
- en: 'First, extract the `of` method’s entire body as a method called `invoke`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`of`方法的整个主体提取为一个名为`invoke`的方法：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 12.10 [operators.12:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.10&show=diff)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.10 [operators.12:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.10&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.10&show=diff)'
- en: 'Then make `invoke` a public operator method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`invoke`作为公共操作符方法：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Example 12.11 [operators.13:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.11&show=diff)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.11 [operators.13:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.11&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=12.11&show=diff)'
- en: 'We can now call the `Money` companion object as a function that looks like
    a constructor. So how come the call to `Money(...)` in the body of the `invoke`
    method does not overflow the call stack? Inside the `invoke` method, the call
    to `Money(...)` is not a recursive call to `invoke` but actually calls the private
    `Money` constructor. Outside the class, a call to `Money(...)` calls the companion
    object’s `invoke` method, because the private constructor is not visible. We have
    the best of both worlds: conventional syntax for creating instances of the class,
    and an encapsulation boundary that guarantees the class’s invariants.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将`Money`伴生对象称为一个看起来像构造函数的函数。那么在`invoke`方法体中调用`Money(...)`为什么不会溢出调用栈？在`invoke`方法内部，对`Money(...)`的调用并不是对`invoke`的递归调用，而是实际调用了私有的`Money`构造函数。在类外部，对`Money(...)`的调用会调用伴生对象的`invoke`方法，因为私有构造函数不可见。我们拥有了两全其美的局面：用于创建类实例的传统语法，以及确保类不变量的封装边界。
- en: 'To make existing Kotlin code use the new syntax, we need to first make the
    companion object’s `of` method call itself as a function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让现有的 Kotlin 代码使用新的语法，我们首先需要让伴生对象的`of`方法调用自身作为函数：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 12.12 [operators.14:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.12&show=diff)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.12 [operators.14:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=12.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.12&show=diff)'
- en: Then, we inline the `of` method into our Kotlin code. Again, Java code will
    not be affected, and when no Java code is calling the `of` method, the IDE will
    remove it for us.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`of`方法内联到我们的 Kotlin 代码中。再次强调，Java 代码不会受到影响，当没有 Java 代码调用`of`方法时，IDE 会自动为我们移除它。
- en: 'Before the inline refactoring, Kotlin code that creates `Money` values looks
    like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在内联重构之前，创建`Money`值的 Kotlin 代码看起来像这样：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 12.13 [operators.16:src/main/java/travelator/money/ExchangeRates.kt]](https://java-to-kotlin.dev/code.html?ref=12.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.13&show=diff)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.13 [operators.16:src/main/java/travelator/money/ExchangeRates.kt]](https://java-to-kotlin.dev/code.html?ref=12.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.13&show=diff)'
- en: 'After the inline refactoring, it looks like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在内联重构之后，看起来像这样：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Example 12.14 [operators.17:src/main/java/travelator/money/ExchangeRates.kt]](https://java-to-kotlin.dev/code.html?ref=12.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.14&show=diff)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12.14 [operators.17:src/main/java/travelator/money/ExchangeRates.kt]](https://java-to-kotlin.dev/code.html?ref=12.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=12.14&show=diff)'
- en: We’re left with a class that is conventional and convenient, whether we’re using
    it from Kotlin or Java.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是从 Kotlin 还是 Java 中使用它，我们都得到了一个传统和方便的类。
- en: Moving On
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续前进
- en: Java and Kotlin have different conventions that work with the different grains
    of the two languages.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Java 和 Kotlin 有不同的规范，适用于这两种语言的不同粒度。
- en: We don’t want our use of Kotlin to have a negative effect on our Java or leave
    our Kotlin code as mere Java in Kotlin syntax.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望我们对 Kotlin 的使用对我们的 Java 产生负面影响，也不希望将我们的 Kotlin 代码仅仅留在 Kotlin 语法中作为 Java。
- en: Using annotations and delegation, we can ensure that both Kotlin and Java code
    follow their respective language conventions during the transition to Kotlin.
    The extract-and-inline refactoring combination makes this easy to add to our codebase,
    and to remove when no longer needed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注解和委托，我们可以确保 Kotlin 和 Java 代码在转换为 Kotlin 时遵循各自的语言约定。提取和内联重构组合使得将其添加到我们的代码库变得容易，并且在不再需要时也容易移除。
