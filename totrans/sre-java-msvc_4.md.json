["```java\npublic class MyService {\n  MeterRegistry registry;\n\n  public void call() {\n    try (Timer.ResourceSample t = Timer.resource(registry, \"calls\")\n        .description(\"calls to something\")\n        .publishPercentileHistogram()\n        .serviceLevelObjectives(Duration.ofSeconds(1))\n        .tags(\"service\", \"hi\")) {\n      try {\n        // Do something\n        t.tag(\"outcome\", \"success\");\n      } catch (Exception e) {\n        t.tags(\"outcome\", \"error\", \"exception\", e.getClass().getName());\n      }\n    }\n  }\n}\n```", "```java\npublic class MyService {\n  Meter meter = OpenTelemetry.getMeter(\"registry\");\n  Map<String, AtomicLong> callSum = Map.of(\n      \"success\", new AtomicLong(0),\n      \"failure\", new AtomicLong(0)\n  );\n\n  public MyService() {\n    registerCallSum(\"success\");\n    registerCallSum(\"failure\");\n  }\n\n  private void registerCallSum(String outcome) {\n    meter.doubleSumObserverBuilder(\"calls.sum\")\n        .setDescription(\"calls to something\")\n        .setConstantLabels(Map.of(\"service\", \"hi\"))\n        .build()\n        .setCallback(result -> result.observe(\n            (double) callSum.get(outcome).get() / 1e9,\n            \"outcome\", outcome));\n  }\n\n  public void call() {\n    DoubleCounter.Builder callCounter = meter\n        .doubleCounterBuilder(\"calls.count\")\n        .setDescription(\"calls to something\")\n        .setConstantLabels(Map.of(\"service\", \"hi\"))\n        .setUnit(\"requests\");\n\n    long start = System.nanoTime();\n    try {\n      // Do something\n      callCounter.build().add(1, \"outcome\", \"success\");\n      callSum.get(\"success\").addAndGet(System.nanoTime() - start);\n    } catch (Exception e) {\n      callCounter.build().add(1, \"outcome\", \"failure\",\n          \"exception\", e.getClass().getName());\n      callSum.get(\"failure\").addAndGet(System.nanoTime() - start);\n    }\n  }\n}\n```", "```java\nname,cache.gets,:eq,\n```", "```java\nrate(cache_gets[2m])\n```", "```java\nsum(gradle_task_seconds_count) by (gradle_root_project_name) -\n(\n  sum(gradle_task_seconds_count offset 10s) by (gradle_root_project_name) > 0 or\n  (\n    (sum(gradle_task_seconds_count) by (gradle_root_project_name)) * 0\n  )\n)\n```", "```java\nTimer.Sample sample = Timer.start();\ntry {\n  // Some operation that might fail... \n  sample.stop(\n    registry.timer(\n      \"my.operation\",\n      Tags.of(\n        \"exception\", \"none\", ![1](../images/00112.png)\n        \"outcome\", \"success\"\n      )\n    )\n  );\n} catch(Exception e) {\n  sample.stop(\n    registry.timer(\n      \"my.operation\",\n      Tags.of(\n        \"exception\", e.getClass().getName(), ![2](../images/00059.png)\n        \"outcome\", \"failure\"\n      )\n    )\n  );\n}\n```", "```java\n# don't do this because it fluctuates with throughput!\nname,http.server.requests,:eq,\noutcome,SERVER_ERROR,:eq,\n:and,\nuri,$ENDPOINT,:eq,:cq\n```", "```java\n# don't do this because it fluctuates with throughput!\nsum(\n  rate(\n    http_server_requests_seconds_count{outcome=\"SERVER_ERROR\", uri=\"$ENDPOINT\"}[2m]\n  )\n)\n```", "```java\nname,http.server.requests,:eq,\n:dup,\noutcome,SERVER_ERROR,:eq,\n:div,\nuri,$ENDPOINT,:eq,:cq\n```", "```java\nsum(\n  rate(\n    http_server_requests_seconds_count{outcome=\"SERVER_ERROR\", uri=\"$ENDPOINT\"}[2m]\n  )\n) /\nsum(\n  rate(\n    http_server_requests_seconds_count{uri=\"$ENDPOINT\"}[2m]\n  )\n)\n```", "```java\n@Timed(histogram = true)\n@GetMapping(\"/api/something\")\nSomething getSomething() {\n  ...\n}\n```", "```java\n@Bean\nMeterFilter histogramsForSomethingEndpoints() {\n  return new MeterFilter() {\n    @Override\n    public DistributionStatisticConfig configure(Meter.Id id,\n        DistributionStatisticConfig config) {\n      if(id.getName().equals(\"http.server.requests\") &&\n          id.getTag(\"uri\").startsWith(\"/api/something\")) {\n        return DistributionStatisticConfig.builder()\n            .percentilesHistogram(true)\n            .build()\n            .merge(config);\n      }\n      return config;\n    }\n  };\n}\n```", "```java\nname,http.server.requests,:eq,\nstatistic,max,:eq,\n:and,\n$THRESHOLD,\n:gt\n```", "```java\nhttp_server_requests_seconds_max > $THRESHOLD\n```", "```java\n@Configuration\npublic class MetricsConfiguration {\n  @Bean\n  WebMvcTagsProvider customizeRestMetrics() throws IOException, ParseException {\n    UserAgentParser userAgentParser = new UserAgentService().loadParser();\n\n    return new DefaultWebMvcTagsProvider() {\n      @Override\n      public Iterable<Tag> getTags(HttpServletRequest request,\n        HttpServletResponse response, Object handler, Throwable exception) {\n\n        Capabilities capabilities = userAgentParser.parse(request\n          .getHeader(\"User-Agent\"));\n\n        return Tags\n          .concat(\n            super.getTags(request, response, handler, exception),\n            \"browser\", capabilities.getBrowser(),\n            \"browser.version\", capabilities.getBrowserMajorVersion()\n          );\n      }\n    };\n  }\n}\n```", "```java\n@Configuration\npublic class MetricsConfiguration {\n  @Bean\n  WebFluxTagsProvider customizeRestMetrics() throws IOException, ParseException {\n      UserAgentParser userAgentParser = new UserAgentService().loadParser();\n\n      return new DefaultWebFluxTagsProvider() {\n          @Override\n          public Iterable<Tag> httpRequestTags(ServerWebExchange exchange,\n              Throwable exception) {\n\n            Capabilities capabilities = userAgentParser.parse(exchange.getRequest()\n              .getHeaders().getFirst(\"User-Agent\"));\n\n            return Tags\n              .concat(\n                super.httpRequestTags(exchange, exception),\n                \"browser\", capabilities.getBrowser(),\n                \"browser.version\", capabilities.getBrowserMajorVersion()\n              );\n          }\n      };\n  }\n}\n```", "```java\ntopk(\n  1,\n  sum(\n    rate(\n      http_client_requests_seconds_max{serviceName=\"CALLED\", uri=\"/api/...\"}[2m]\n    )\n  ) by (clientName)\n) > $THRESHOLD\n```", "```java\n@RestController\npublic class CustomerController { ![1](../images/00112.png)\n  private final RestTemplate client;\n\n  public CustomerController(RestTemplate client) {\n    this.client = client;\n  }\n\n  @GetMapping(\"/customers\")\n  public Customer findCustomer(@RequestParam String q) {\n    String customerId;\n    // ... Look up customer ID according to 'q' \n    return client.getForEntity(\n      \"http://customerService/customer/{id}?detail={detail}\",\n      Customer.class,\n      customerId,\n      \"no-address\"\n    );\n  }\n}\n\n...\n\n@Configuration\npublic class RestTemplateConfiguration {\n  @Bean\n  RestTemplateBuilder restTemplateBuilder() { ![2](../images/00059.png)\n    return new RestTemplateBuilder()\n      .addAdditionalInterceptors(..)\n      .build();\n  }\n}\n```", "```java\n@RestController\npublic class CustomerController { ![1](../images/00112.png)\n  private final WebClient client;\n\n  public CustomerController(WebClient client) {\n    this.client = client;\n  }\n\n  @GetMapping(\"/customers\")\n  public Mono<Customer> findCustomer(@RequestParam String q) {\n    Mono<String> customerId;\n    // ... Look up customer ID according to 'q', hopefully in a non-blocking way \n    return customerId\n      .flatMap(id -> webClient\n          .get()\n          .uri(\n            \"http://customerService/customer/{id}?detail={detail}\",\n            id,\n            \"no-address\"\n          )\n          .retrieve()\n          .bodyToMono(Customer.class)\n      );\n  }\n}\n\n...\n\n@Configuration\npublic class WebClientConfiguration {\n  @Bean\n  WebClient.Builder webClientBuilder() { ![2](../images/00059.png)\n    return WebClient\n      .builder();\n  }\n}\n```", "```java\n@Configuration\npublic class MetricsConfiguration {\n  @Bean\n  RestTemplateExchangeTagsProvider customizeRestTemplateMetrics() {\n    return new DefaultRestTemplateExchangeTagsProvider() {\n      @Override\n      public Iterable<Tag> getTags(String urlTemplate,\n        HttpRequest request, ClientHttpResponse response) {\n\n        return Tags.concat(\n          super.getTags(urlTemplate, request, response),\n          \"subscription.level\",\n          Optional\n            .ofNullable(response.getHeaders().getFirst(\"subscription\")) ![1](../images/00112.png)\n            .orElse(\"basic\")\n        );\n      }\n    };\n  }\n}\n```", "```java\n@Configuration\npublic class MetricsConfiguration {\n  @Bean\n  WebClientExchangeTagsProvider webClientExchangeTagsProvider() {\n    return new DefaultWebClientExchangeTagsProvider() {\n      @Override\n      public Iterable<Tag> tags(ClientRequest request,\n        ClientResponse response, Throwable throwable) {\n\n        return Tags.concat(\n          super.tags(request, response, throwable),\n          \"subscription.level\",\n          response.headers().header(\"subscription\").stream()\n            .findFirst()\n            .orElse(\"basic\")\n        );\n      }\n    };\n  }\n}\n```", "```java\nsum( ![1](../images/00112.png)\n  sum_over_time( ![2](../images/00059.png)\n    sum(increase(jvm_gc_pause_seconds_sum[2m])[1m:] ![3](../images/00067.png)\n  )\n) / 60 ![4](../images/00016.png)\n```", "```java\nMeterRegistry registry = ...\n\nnew JvmHeapPressureMetrics(\n  Tags.empty(),\n  Duration.ofMinutes(1), ![1](../images/00112.png)\n  Duration.ofSeconds(30)\n).register(meterRegistry);\n```", "```java\nmax_over_time(\n  (\n    jvm_memory_used_bytes{id=\"G1 Old Gen\"} /\n    jvm_memory_committed_bytes{id=\"G1 Old Gen\"}\n  )[5m:]\n)\n```", "```java\nname,process.cpu.usage,:eq,\n0.8,\n:gt\n```", "```java\nprocess_cpu_usage > 0.8\n```", "```java\n$ ulimit -a\n...\nopen files (-n) 1024 ![1](../images/00112.png)\n...\ncpu time (seconds, -t) unlimited\nmax user processes (-u) 63796\nvirtual memory (kbytes, -v) unlimited\n```", "```java\njava.net.SocketException: Too many open files\n  at java.net.PlainSocketImpl.socketAccept(Native Method)\n  at java.net.AbstractPlainSocketImpl.accept(AbstractPlainSocketImpl.java:398)\n```", "```java\njava.io.FileNotFoundException: /myfile (Too many open files)\n  at java.io.FileInputStream.open(Native Method)\n```", "```java\nname,process.open.fds,:eq,\nname,process.max.fds,:eq,\n:div,\n0.8,\n:gt\n```", "```java\nprocess_open_fds / process_max_fds > 0.8\n```", "```java\nname,http.server.requests,:eq,\nstatus,403,:eq,\n:and,\nuri,$ENDPOINT,:eq,:cq\n```", "```java\nsum(\n  rate(\n    http_server_requests_seconds_count{status=\"403\", uri=\"$ENDPOINT\"}[2m]\n  )\n)\n```", "```java\n@Timed(name = \"policy.renewal.batch\", longTask = true)\n@Scheduled(fixedRateString = \"P1D\")\nvoid renewPolicies() {\n  // Bill and renew insurance policies that are beginning new terms today\n}\n```", "```java\nname,policy.renewal.batch.max,:eq,\n3.6e12, ![1](../images/00112.png)\n:gt\n```", "```java\npolicy_renewal_batch_max_seconds > 3600\n```", "```java\nname,requestsPerSecond,:eq,\n:dup,\n0.5,:mul, ![1](../images/00112.png)\n1m,:offset, ![2](../images/00059.png)\n:rot,\n:lt\n```", "```java\nalpha,0.2,:set,\ncoefficient,(,alpha,:get,1,alpha,:get,:sub,),:set,\nname,requestsPerSecond,:eq,\n:dup,:dup,:dup,:dup,:dup,:dup,\n0,:roll,1m,:offset,coefficient,:fcall,0,:pow,:mul,:mul,\n1,:roll,2m,:offset,coefficient,:fcall,1,:pow,:mul,:mul,\n2,:roll,3m,:offset,coefficient,:fcall,2,:pow,:mul,:mul,\n3,:roll,4m,:offset,coefficient,:fcall,3,:pow,:mul,:mul,\n4,:roll,5m,:offset,coefficient,:fcall,4,:pow,:mul,:mul,\n5,:roll,6m,:offset,coefficient,:fcall,5,:pow,:mul,:mul,\n:add,:add,:add,:add,:add,\n0.83,:mul, ![1](../images/00112.png)\n:lt,\n```", "```java\nUniversalScalabilityLawForecast\n    .builder(\n      registry\n        .find(\"http.server.requests\") ![1](../images/00112.png)\n        .tag(\"uri\", \"/myendpoint\") ![2](../images/00059.png)\n        .tag(\"status\", s -> s.startsWith(\"2\")) ![3](../images/00067.png)\n    )\n    .independentVariable(UniversalScalabilityLawForecast.Variable.THROUGHPUT) ![4](../images/00016.png)\n    // In this case, forecast to up to 1,000 requests/second (throughput)\n    .maximumForecast(1000)\n    .register(registry);\n```"]