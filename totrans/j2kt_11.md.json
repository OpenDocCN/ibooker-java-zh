["```java\nRECORD PERSON (\n    STRING(20) NAME;\n    INTEGER AGE;\n    LOGICAL MALE;\n);\n```", "```java\nAGE(WILMA) := AGE(WILMA) + 1;\n```", "```java\npublic class PersonWithPublicFields {\n    public final String givenName;\n    public final String familyName;\n    public final LocalDate dateOfBirth;\n\n    public PersonWithPublicFields(\n        String givenName,\n        String familyName,\n        LocalDate dateOfBirth\n    ) {\n        this.givenName = givenName;\n        this.familyName = familyName;\n        this.dateOfBirth = dateOfBirth;\n    }\n}\n```", "```java\npublic class PersonWithAccessors {\n    private final String givenName;\n    private final String familyName;\n    private final LocalDate dateOfBirth;\n\n    public PersonWithAccessors(\n        ...\n    }\n\n    public String getGivenName() {\n        return givenName;\n    }\n\n    public String getFamilyName() {\n        return familyName;\n    }\n\n    ...\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n}\n```", "```java\npublic static String accessField(PersonWithPublicFields person) {\n    return person.givenName;\n}\n\npublic static String callAccessor(PersonWithAccessors person) {\n    return person.getGivenName();\n}\n\npublic static String callKotlinAccessor(PersonWithProperties person) {\n    return person.getGivenName();\n}\n```", "```java\nfun accessField(person: PersonWithPublicFields): String =\n    person.givenName\n\nfun callAccessor(person: PersonWithAccessors): String =\n    person.givenName\n\nfun callKotlinAccessor(person: PersonWithProperties): String =\n    person.givenName\n```", "```java\npublic class PersonWithPublicFields {\n    public final String givenName;\n    public final String familyName;\n    public final LocalDate dateOfBirth;\n\n    public PersonWithPublicFields(\n        ...\n    }\n\n    public String getFullName() {\n        return givenName + \" \" + familyName;\n    }\n}\n```", "```java\npublic static String fieldAndAccessor(PersonWithPublicFields person) {\n    return\n        person.givenName + \" \" +\n        person.getFullName();\n}\n```", "```java\nfun fieldAndAccessor(person: PersonWithPublicFields) =\n    person.givenName + \" \" +\n    person.fullName\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    val fullName get() = \"$givenName $familyName\"\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    fun age() = Period.between(dateOfBirth, LocalDate.now()).years\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    fun computeHash(): ByteArray =\n        someSlowHashOf(givenName, familyName, dateOfBirth.toString())\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    val hash: ByteArray =\n        someSlowHashOf(givenName, familyName, dateOfBirth.toString())\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    val hash: ByteArray by lazy {\n        someSlowHashOf(givenName, familyName, dateOfBirth.toString())\n    }\n}\n```", "```java\ndata class PersonWithProperties(\n    val givenName: String,\n    val familyName: String,\n    val dateOfBirth: LocalDate\n) {\n    private val hash: ByteArray by lazy {\n        someSlowHashOf(givenName, familyName, dateOfBirth.toString())\n    }\n    fun hash() = hash\n}\n```", "```java\npublic class CampSite {\n    private final String id;\n    private final String name;\n    private final Address address;\n    ...\n\n    public CampSite(\n        String id,\n        String name,\n        Address address\n        ...\n    ) {\n        this.id = id;\n        this.name = name;\n        this.address = address;\n        ...\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getCountryCode() {\n        return address.getCountryCode();\n    }\n\n    public String region() {\n        return address.getRegion();\n    }\n\n    ...\n}\n```", "```java\npublic class CampSites {\n\n    public static Set<CampSite> sitesInRegion(\n        Set<CampSite> sites,\n        String countryISO,\n        String region\n    ) {\n        return sites.stream()\n            .filter( campSite ->\n                campSite.getCountryCode().equals(countryISO) &&\n                    campSite.region().equalsIgnoreCase(region)\n            )\n            .collect(toUnmodifiableSet());\n    }\n}\n```", "```java\ndata class CampSite(\n    val id: String,\n    val name: String,\n    val address: Address,\n    ...\n) {\n    val countryCode: String\n        get() = address.countryCode\n\n    fun region(): String {\n        return address.region\n    }\n\n    ...\n}\n```", "```java\nval region: String\n    get() {\n        return address.region\n    }\n```", "```java\nval region: String get() = address.region\n```", "```java\npublic static Set<CampSite> sitesInRegion(\n    Set<CampSite> sites,\n    String countryISO,\n    String region\n) {\n    return sites.stream()\n        .filter( campSite ->\n            campSite.getCountryCode().equals(countryISO) &&\n                campSite.getRegion().equalsIgnoreCase(region) ![1](assets/1.png)\n        )\n        .collect(toUnmodifiableSet());\n}\n```", "```java\nobject CampSites {\n    fun sitesInRegion(\n        sites: Set<CampSite>,\n        countryISO: String,\n        region: String?\n    ): Set<CampSite> {\n        return sites.stream()\n            .filter { campSite: CampSite ->\n                campSite.countryCode == countryISO &&\n                    campSite.region.equals(region, ignoreCase = true) ![1](assets/1.png)\n            }\n            .collect(Collectors.toUnmodifiableSet())\n    }\n}\n```", "```java\nfun Set<CampSite>.sitesInRegion(\n    countryISO: String,\n    region: String\n): Set<CampSite> {\n    return stream()\n        .filter { campSite: CampSite ->\n            campSite.countryCode == countryISO &&\n                campSite.region.equals(region, ignoreCase = true)\n        }\n        .collect(Collectors.toUnmodifiableSet())\n}\n```", "```java\nfun Iterable<CampSite>.sitesInRegion(\n    countryISO: String,\n    region: String\n): Set<CampSite> =\n    filter { site ->\n        site.countryCode == countryISO &&\n            site.region.equals(region, ignoreCase = true)\n    }.toSet()\n```", "```java\nfun Iterable<CampSite>.sitesInRegion(\n    countryISO: String,\n    region: String\n): Set<CampSite> =\n    filter { site ->\n        site.isIn(countryISO, region)\n    }.toSet()\n\nfun CampSite.isIn(countryISO: String, region: String) =\n    countryCode == countryISO &&\n        this.region.equals(region, ignoreCase = true)\n```", "```java\nfun CampSite.isIn(countryISO: String, region: String? = null) =\n    when (region) {\n        null -> countryCode == countryISO\n        else -> countryCode == countryISO &&\n            region.equals(this.region, ignoreCase = true)\n    }\n```", "```java\nfun CampSite.isIn(countryISO: String, region: String? = null) =\n    countryCode == countryISO &&\n        region?.equals(this.region, ignoreCase = true) ?: true\n```"]