- en: Chapter 6\. Packaging Quarkus Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 打包Quarkus应用程序
- en: In this chapter, you will learn about packaging a Quarkus service into a JVM
    or a native format so that it can be distributed and deployed. Today, when containers
    are becoming the standard way to distribute applications, you need to know how
    to containerize them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将Quarkus服务打包成JVM或本地格式，以便分发和部署。如今，随着容器成为分发应用程序的标准方式，您需要了解如何将其容器化。
- en: 'We’ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下主题：
- en: How to package a Quarkus application for running in the JVM
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Quarkus应用程序打包以在JVM中运行
- en: How to package a Quarkus application in a native executable
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Quarkus应用打包成本地可执行文件
- en: How to containerize a Quarkus application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将Quarkus应用程序容器化
- en: 6.1 Running in Command Mode
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.1 在命令模式下运行
- en: Problem
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a CLI application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您想创建一个CLI应用程序。
- en: Solution
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: With Quarkus, you can also write applications that run and then optionally exit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Quarkus，您还可以编写运行后可选择退出的应用程序。
- en: 'To enable command mode in Quarkus, you need to create a class that implements
    the `io.quarkus.runtime.QuarkusApplication` interface:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Quarkus中启用命令模式，您需要创建一个实现 `io.quarkus.runtime.QuarkusApplication` 接口的类：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO1-1)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO1-1)'
- en: Interface to set Quarkus in command mode
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Quarkus以命令模式运行的接口
- en: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO1-2)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO1-2)'
- en: The method executed when the `main` is called
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `main` 方法时执行的方法
- en: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO1-3)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO1-3)'
- en: Do not exit but wait until Quarkus process is stopped
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不要退出，而是等待Quarkus进程停止
- en: 'Then you can implement the well-known Java `main` method. One of the requirements
    is that the class with the `main` method must be annotated with the `@io.quarkus.runtime.annotations.QuarkusMain`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以实现众所周知的Java `main` 方法。其中一个要求是带有 `main` 方法的类必须用 `@io.quarkus.runtime.annotations.QuarkusMain`
    注解进行注释：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO2-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO2-1)'
- en: Sets the class as `main`
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将类设置为 `main`
- en: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO2-2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO2-2)'
- en: Starts the process
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 启动进程
- en: 'If you want to access the command arguments, you can inject them using the
    `@io.quarkus.runtime.annotations.CommandLineArguments` annotation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想访问命令行参数，可以使用`@io.quarkus.runtime.annotations.CommandLineArguments`注解来注入它们：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO3-1)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO3-1)'
- en: Injects the command-line arguments
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注入命令行参数
- en: 'Finally, you can build the project and run it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以构建项目并运行它：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discussion
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Two different methods can be used to implement applications that exit. We explained
    the first method in the previous section; the second method is by annotating the
    class that is implementing the `io.quarkus.runtime.QuarkusApplication` interface
    with `@io.quarkus.runtime.annotations.QuarkusMain annotation`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用两种不同的方法来实现退出的应用程序。我们在前一节中解释了第一种方法；第二种方法是通过将实现 `io.quarkus.runtime.QuarkusApplication`
    接口的类用 `@io.quarkus.runtime.annotations.QuarkusMain` 注解进行注释。
- en: The drawback of the second solution is that you cannot run it from the IDE,
    and this is the reason we suggest you use the former approach.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案的缺点是无法从IDE中运行，这也是我们建议您使用前一种方法的原因。
- en: As you’ve seen in the example, if you want to run some logic on startup and
    then run it like a normal application (i.e., not exit), then you should call `Quarkus.waitForExit`
    from the main thread. If you don’t call this method, then the Quarkus application
    is started and then terminated, so your application effectively behaves like any
    other CLI program.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在示例中看到的那样，如果您希望在启动时运行一些逻辑，然后像普通应用程序一样运行它（即不退出），则应从主线程调用 `Quarkus.waitForExit`
    方法。如果您不调用此方法，则Quarkus应用程序将启动然后终止，因此您的应用程序实际上会像任何其他CLI程序一样运行。
- en: 6.2 Creating a Runnable JAR File
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2 创建一个可运行的JAR文件
- en: Problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create a runnable JAR file to be distributed/containerized into
    a machine with a JVM installed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您想创建一个可分发/容器化到安装了JVM的机器上的可运行JAR文件。
- en: Solution
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the *Quarkus Maven plug-in* to create a runnable JAR.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Quarkus Maven插件*创建可运行的JAR包。
- en: 'The Quarkus Maven plug-in is installed by default if you have scaffolded the
    project using any of the starters mentioned in previous recipes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用之前提到的任何启动器生成了项目，Quarkus Maven插件将会默认安装：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then run `package` goal to build the JAR file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行 `package` 目标以构建 JAR 文件：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `target` directory contains the following contents:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`target` 目录包含以下内容：'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO4-1)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO4-1)'
- en: An executable JAR (not über-JAR)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可执行 JAR（而不是超级 JAR）
- en: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO4-2)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO4-2)'
- en: Location of dependencies
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项的位置
- en: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO4-3)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO4-3)'
- en: Lib folder with application dependencies
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应用依赖的 Lib 文件夹
- en: If you want to deploy the application, it is important to copy together the
    *executable JAR* with the `lib` directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要部署应用程序，重要的是将 *可执行 JAR* 与 `lib` 目录一起复制。
- en: 'You can run the application by running the next command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来运行应用程序：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running Quarkus in this way is known as running Quarkus in the *JVM mode*. This
    means that you are not producing a native compilation but are running your application
    inside the JVM.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以 JVM 模式运行 Quarkus 被称为在 *JVM 模式* 下运行 Quarkus。这意味着您没有进行本地编译，而是在 JVM 内运行应用程序。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to package a Quarkus application in JVM mode into a container, we
    recommend using this approach because the layers created during the container
    build stage are cached to be reused later. Libraries are something that do not
    usually change, so this dependency layer might be reused several times in future
    executions, speeding up the container build time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将 JVM 模式下的 Quarkus 应用程序打包到容器中，我们建议使用这种方法，因为在容器构建阶段创建的层将被缓存以供将来重复使用。库通常不会改变，因此这个依赖层可能在未来的执行中被多次重用，加快容器构建时间。
- en: Discussion
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'To create a runnable JAR file with Gradle, you can run the `quarkusBuild` task:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gradle 创建可运行的 JAR 文件，您可以运行 `quarkusBuild` 任务：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See Also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you are interested in how to create an über-JAR or how to containerize a
    Quarkus application, see [Recipe 6.3](#uber_jar_packaging).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解如何创建超级 JAR 或如何将 Quarkus 应用程序容器化，请参阅 [Recipe 6.3](#uber_jar_packaging)。
- en: 6.3 Über-JAR Packaging
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 超级 JAR 打包
- en: Problem
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to create an über-JAR of your Quarkus application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望创建一个 Quarkus 应用程序的超级 JAR。
- en: Solution
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus Maven plug-in supports the generation of über-JARs by specifying an
    `uberJar` configuration option in your *pom.xml*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus Maven 插件通过在 *pom.xml* 中设置 `uberJar` 配置选项来支持生成超级 JAR：
- en: 'To create an über-JAR, a JAR that contains your code `runnable classes` and
    all required dependencies, you need to configure Quarkus accordingly in the *application.properties*
    file by setting `quarkus.package.uber-jar` to `true`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个包含您的代码 `可运行类` 和所有必需依赖项的超级 JAR，您需要在 *application.properties* 文件中相应地配置 Quarkus，将
    `quarkus.package.uber-jar` 设置为 `true`：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 6.4 Building a Native Executable
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4 构建本地可执行文件
- en: Problem
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to build your Quarkus application as a native executable file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将 Quarkus 应用程序构建为本地可执行文件。
- en: Solution
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use Quarkus and GraalVM to build a native runnable file that is ideal for containers
    and serverless loads.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Quarkus 和 GraalVM 构建适用于容器和无服务器负载的本地可运行文件。
- en: Native executables make Quarkus applications ideal for containers and serverless
    workloads. Quarkus relies on [GraalVM](https://www.graalvm.org) to build a Java
    application as a native executable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本地可执行文件使 Quarkus 应用程序非常适合于容器和无服务器工作负载。Quarkus 依赖于 [GraalVM](https://www.graalvm.org)
    来将 Java 应用程序构建为本地可执行文件。
- en: Before building a native executable, make sure to have the `GRAALVM_HOME` environment
    variable set to the GraalVM 19.3.1 or 20.0.0 installation directory.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建原生可执行文件之前，请确保设置了 `GRAALVM_HOME` 环境变量，指向 GraalVM 19.3.1 或 20.0.0 的安装目录。
- en: Important
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If you are using macOS, the variable should point to the *Home* sub-directory:
    `export GRAALVM_HOME=<installation_dir>/Development/graalvm/Contents/Home/`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 macOS，该变量应指向 *Home* 子目录：`export GRAALVM_HOME=<installation_dir>/Development/graalvm/Contents/Home/`。
- en: 'When a Quarkus project is generated using any of the methods explained before,
    it registers a default Maven profile with the name `native` that can be used to
    build a Quarkus native executable application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用之前解释过的任何方法生成 Quarkus 项目时，它会注册一个名为 `native` 的默认 Maven 配置文件，可用于构建 Quarkus 本地可执行应用程序：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you need to build the project with the `native` profile enabled:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后需要使用启用了 `native` 配置文件的项目构建：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After a few minutes, a native executable will be present in `target` directory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，`target` 目录中将出现一个本地可执行文件：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'To build a native executable in Gradle, you can use the `buildNative` task:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Gradle 中构建本机可执行文件，可以使用 `buildNative` 任务：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 6.5 Building a Docker Container for JAR File
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5 为 JAR 文件构建 Docker 容器
- en: Problem
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to build a container with the JAR built in the [Recipe 6.2](#runnable_jar)
    recipe.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望构建一个包含在 [Recipe 6.2](#runnable_jar) 配方中构建的 JAR 的容器。
- en: Solution
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the *Dockerfile.jvm* file provided to build the container.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用提供的 *Dockerfile.jvm* 文件构建容器。
- en: 'When a Quarkus project is generated using any of the methods explained before,
    two Dockerfiles are created in *src/main/docker*: one for generating a Docker
    container using Quarkus in the JVM mode and another one for the native executable.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用之前解释的任何方法生成 Quarkus 项目时，会在 *src/main/docker* 中创建两个 Dockerfile：一个用于使用 JVM
    模式下的 Quarkus 生成 Docker 容器，另一个用于本机可执行文件。
- en: To generate a container for running Quarkus inside the JVM (no native), you
    can use the *Dockerfile.jvm* file to build the container. This Dockerfile adds
    the *lib* directory and the runnable JAR and exposes JMX.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个用于在 JVM 中运行 Quarkus 的容器（非本机），您可以使用 *Dockerfile.jvm* 文件来构建容器。此 Dockerfile
    添加了 *lib* 目录和可运行的 JAR 并暴露了 JMX。
- en: 'To build the Docker image, you need to package the project as shown in [Recipe
    6.2](#runnable_jar) and then build the container:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Docker 镜像，您需要按照 [Recipe 6.2](#runnable_jar) 中所示的步骤对项目进行打包，然后构建容器：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The container can be started by running the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以通过运行以下命令启动：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 6.6 Building a Docker Container for Native File
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.6 为本机文件构建 Docker 容器
- en: Problem
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to build a native executable container image.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望构建一个本机可执行文件容器映像。
- en: Solution
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: To generate a container for running a Quarkus native executable, you can use
    the *Dockerfile.native* file to build the container.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成用于运行 Quarkus 本机可执行文件的容器，可以使用 *Dockerfile.native* 文件来构建容器。
- en: To build the Docker image, you need to create a native file that can be run
    in a Docker container. For this reason, don’t use local GraalVM to build the native
    executable because the result file will be specific to your operating system and
    will not be able to run inside a container.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 Docker 镜像，您需要创建一个可以在 Docker 容器中运行的本机文件。因此，请勿使用本地 GraalVM 来构建本机可执行文件，因为结果文件将针对您的操作系统进行特定的处理，将无法在容器中运行。
- en: 'To create an executable that will run in a container, use the following command
    in your terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端中使用以下命令创建可以在容器中运行的可执行文件：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command creates a Docker image that contains GraalVM installed to produce
    a 64-bit Linux executable from your code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建一个包含 GraalVM 安装的 Docker 镜像，用于从您的代码生成 64 位 Linux 可执行文件。
- en: Important
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要
- en: You need to have `native` profile defined in your *pom.xml*, as explained in
    the [Recipe 6.4](#native_executable) recipe.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在 *pom.xml* 中定义 `native` 配置文件，如 [Recipe 6.4](#native_executable) 配方所述。
- en: 'The last step is to build the Docker image with the native executable that
    was generated in the previous step:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用在上一步中生成的本机可执行文件构建 Docker 镜像：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then the container can be started by running the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过运行以下命令来启动容器：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Discussion
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'By default, Quarkus uses `docker` to build the container. The container runtime
    can be changed by using the `quarkus.native.container-runtime` property. At the
    time of writing the book, `docker` and `podman` are the supported options:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Quarkus 使用 `docker` 来构建容器。可以使用 `quarkus.native.container-runtime` 属性更改容器运行时。在编写本书时，`docker`
    和 `podman` 是支持的选项：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 6.7 Build and Dockerize a Native SSL Application
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.7 构建和 Docker 化本机 SSL 应用程序
- en: Problem
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: When building a native executable, you want to secure connections to prevent
    an attacker from stealing sensitive information.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建本机可执行文件时，您希望保护连接，以防止攻击者窃取敏感信息。
- en: Solution
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Enable Quarkus to use SSL to secure connections in a native executable.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本机可执行文件中启用 Quarkus 使用 SSL 来保护连接。
- en: If you are running the Quarkus application in JVM mode, SSL is supported without
    any problem, just as any other JVM application. But SSL is not supported out of
    the box in the case of native executables, and some extra steps (especially when
    Dockerizing the application) must be executed to enable SSL support.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 JVM 模式下运行 Quarkus 应用程序，则 SSL 支持没有任何问题，就像任何其他 JVM 应用程序一样。但是在本机可执行文件的情况下，SSL
    并不是默认支持的，必须执行一些额外的步骤（特别是在 Docker 化应用程序时）来启用 SSL 支持。
- en: 'Let’s enable SSL support for native executables in Quarkus by adding the `quarkus.ssl.native`
    configuration property at *application.properties*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 *application.properties* 中添加 `quarkus.ssl.native` 配置属性来启用 Quarkus 在本机可执行文件中使用
    SSL 保护连接：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Enabling this property allows the Graal VM `native-image` process to enable
    SSL. Create a native executable using the next command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此属性允许Graal VM的`native-image`过程启用SSL。使用以下命令创建本地可执行文件：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following are the important flags that are added automatically by the process
    to enable SSL:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是由进程自动添加以启用SSL的重要标志：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To Dockerize this native executable, the Docker-related scripts need to be modified
    slightly to support SSL.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此本地可执行文件Docker化，需要稍微修改与SSL支持相关的Docker脚本。
- en: 'Open `.dockeringnore` and add the `keystore.jks` file as a nonignorable file
    to be added into the resulted container. This is necessary because the keystore
    file needs to be copied together with the executable:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`.dockeringnore`并将`keystore.jks`文件添加为不可忽略的文件，以便将其添加到生成的容器中。这是必要的，因为keystore文件需要与可执行文件一起复制：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The *src/main/docker/Dockerfile.native* file must also be adapted to package
    the following elements:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*src/main/docker/Dockerfile.native*文件还必须适应以下元素的打包：'
- en: The SunEC library
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SunEC库
- en: The collection of trusted certificate authority files needed to verify certificates
    used in the application.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集用于验证应用程序中使用的证书的受信任证书颁发机构文件集合。
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO5-1)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_packaging_quarkus_applications_CO5-1)'
- en: Gets SunEC library and `cacerts` from GraalVM Docker image
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从GraalVM Docker镜像获取SunEC库和`cacerts`
- en: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO5-2)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_packaging_quarkus_applications_CO5-2)'
- en: Copies custom `keystore.jks` at root working directory
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将自定义的`keystore.jks`复制到根工作目录
- en: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO5-3)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_packaging_quarkus_applications_CO5-3)'
- en: Sets up permissions
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 设置权限
- en: '[![4](Images/4.png)](#co_packaging_quarkus_applications_CO5-4)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_packaging_quarkus_applications_CO5-4)'
- en: Exposes HTTPS port
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 暴露HTTPS端口
- en: '[![5](Images/5.png)](#co_packaging_quarkus_applications_CO5-5)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_packaging_quarkus_applications_CO5-5)'
- en: Loads SunEC and `cacerts` when running the application
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序时加载SunEC和`cacerts`
- en: 'The container image can be built by running the next command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过运行以下命令构建容器镜像：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Discussion
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Security and SSL are common now, and it is good practice to always have all
    your services communicate using SSL. For this reason, Quarkus enables SSL support
    automatically when any of the following extensions are registered:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和SSL现在很常见，始终使所有服务使用SSL进行通信是一个良好的做法。因此，当注册以下任何扩展时，Quarkus会自动启用SSL支持：
- en: Agroal connection pooling
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Agroal连接池
- en: Amazon DynamoDB
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon DynamoDB
- en: Hibernate Search Elasticsearch
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hibernate Search Elasticsearch
- en: Infinispan Client
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Infinispan客户端
- en: Jaeger
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jaeger
- en: JGit
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JGit
- en: Keycloak
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keycloak
- en: Kubernetes client
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes客户端
- en: Mailer
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mailer
- en: MongoDB
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB
- en: Neo4j
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neo4j
- en: OAuth2
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2
- en: REST client
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST客户端
- en: As long as you have one of those extensions in your project, the `quarkus.native.ssl`
    property is set to `true` by default.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 只要在项目中有其中一个扩展，`quarkus.native.ssl`属性默认设置为`true`。
