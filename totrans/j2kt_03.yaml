- en: Chapter 3\. Java to Kotlin Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：Java 到 Kotlin 类
- en: The class is the basic unit of code organization in Java. How do we convert
    our Java classes to Kotlin, and what differences will we see when we have?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 类是Java中代码组织的基本单位。我们如何将Java类转换为Kotlin，当我们这样做时会看到什么不同？
- en: In this book, we’ll work together on the code in Travelator, our fictional trip-planning
    web app. Imagine that we have a feature to implement, but we want to take the
    opportunity to make our code a little better before we do. You’re pairing with
    one of Nat or Duncan (choose your favorite, just don’t let Nat know). The pair
    is the *we* in our refactoring discussions; not just your author, but also you
    as part of the team working on Travelator. Welcome aboard!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将一起在Travelator中工作，这是我们虚构的旅行计划Web应用程序。想象一下，我们有一个要实现的功能，但我们想趁机把我们的代码做得更好一些。你和Nat或Duncan之一成对工作（选择你最喜欢的，只是不要让Nat知道）。这对是我们重构讨论中的“我们”，不仅仅是你的作者，还有作为Travelator团队一部分的你。欢迎加入！
- en: A Simple Value Type
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的值类型
- en: 'Let’s jump into the deep end of the codebase and convert some of our existing
    Java to Kotlin, starting with `EmailAddress`. This is a value type that holds
    the two parts of, you guessed it, an email address:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入代码库的深处，并转换一些现有的Java代码为Kotlin，从`EmailAddress`开始。这是一个值类型，保存了，你猜对了，电子邮件地址的两个部分：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 3.1 [classes.0:src/main/java/travelator/EmailAddress.java]](https://java-to-kotlin.dev/code.html?ref=3.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.1&show=diff)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.1 [classes.0:src/main/java/travelator/EmailAddress.java]](https://java-to-kotlin.dev/code.html?ref=3.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.1&show=diff)'
- en: 'This class is very simple; it does nothing more than wrap two strings and provides
    no operations of its own. Even so, it has a lot of code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类非常简单；它除了包装两个字符串外，不提供任何操作。即便如此，它也有很多代码：
- en: '[![1](assets/1.png)](#co_introduction_CO1-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO1-1)'
- en: Values are immutable, so the class declares its fields as final.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 值是不可变的，因此该类将其字段声明为final。
- en: '[![2](assets/2.png)](#co_introduction_CO1-2)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_CO1-2)'
- en: There is a static factory method to `parse` an `EmailAddress` from a string;
    this calls the primary constructor.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个静态工厂方法来从字符串`parse`一个`EmailAddress`；这调用了主构造函数。
- en: '[![3](assets/3.png)](#co_introduction_CO1-3)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introduction_CO1-3)'
- en: The fields are initialized in a constructor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 字段在构造函数中初始化。
- en: '[![4](assets/4.png)](#co_introduction_CO1-4)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_introduction_CO1-4)'
- en: The accessor methods of its properties follow the JavaBean naming conventions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其属性的访问方法遵循JavaBean命名约定。
- en: '[![5](assets/5.png)](#co_introduction_CO1-6)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_introduction_CO1-6)'
- en: The class implements the `equals` and `hashCode` methods to ensure that two
    `EmailAddress` values with equal fields compare as equal.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该类实现了`equals`和`hashCode`方法，以确保具有相同字段的两个`EmailAddress`值比较为相等。
- en: '[![6](assets/6.png)](#co_introduction_CO1-8)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_introduction_CO1-8)'
- en: '`toString` returns the canonical form.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString`返回规范形式。'
- en: Your authors come from the school of Java that assumes that everything we pass,
    store, or return is not null unless explicitly indicated otherwise. You can’t
    see that convention, because it results in an absence of `@Nullable` annotations
    or null checks of parameters ([Chapter 4](ch04.html#optional-to-nullable) discusses
    nullability). What you *can* see is the amount of boilerplate code required to
    express a value composed of two other values. Happily, our IDE generated the `equals`
    and `hashCode` methods for us, but we have to remember to delete and regenerate
    those methods if we change the fields of the class to avoid confusing bugs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你的作者来自Java学派，假设我们传递、存储或返回的所有内容都不是null，除非显式指定。你看不到这个约定，因为它导致参数缺少`@Nullable`注解或空检查（[第
    4 章](ch04.html#optional-to-nullable)讨论了可空性）。你能看到的是，为了表示由其他两个值组成的值，需要大量的样板代码。幸运的是，我们的IDE为我们生成了`equals`和`hashCode`方法，但是如果更改了类的字段，我们必须记得删除并重新生成这些方法，以避免混淆的错误。
- en: So much for the Java; we’re here for the Kotlin. How do we convert? Helpfully,
    IntelliJ has an action called “Convert Java File to Kotlin File”. When we invoke
    it, IntelliJ offers to change other files if necessary to keep things consistent.
    Because the conversion can potentially modify files throughout the project, it’s
    best to say yes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Java就到此为止；我们这里是为了Kotlin。我们如何转换？IntelliJ很有帮助地提供了一个名为“将Java文件转换为Kotlin文件”的操作。当我们调用它时，IntelliJ会询问是否需要更改其他文件以保持一致。因为转换可能会修改整个项目中的文件，最好是同意。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Make sure you have no uncommitted changes before converting Java source to Kotlin
    so that you can easily see the impact of the conversion on the rest of your codebase
    and revert the conversion if it does something you didn’t expect.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在将Java源代码转换为Kotlin之前，请确保没有未提交的更改，这样您可以轻松查看转换对代码库其余部分的影响，并在转换做出意外操作时进行还原。
- en: 'In this case, IntelliJ doesn’t have to change any other files. It has replaced
    our *EmailAddress.java* file with *EmailAddress.kt* in the same directory, though:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，IntelliJ不必更改任何其他文件。它已将我们的*EmailAddress.java*文件替换为同一目录下的*EmailAddress.kt*，尽管：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 3.2 [classes.2:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.2&show=diff)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.2 [classes.2:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.2&show=diff)'
- en: 'The Kotlin class is noticeably more succinct because it declares its properties
    in the primary constructor: the parameters after the class name. Parameters marked
    `val` are considered properties and so stand in for all this Java:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin类明显更为简洁，因为它在主构造函数中声明了其属性：在类名之后的参数。用`val`标记的参数被视为属性，因此代替了所有这些Java代码：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 3.3 [classes.1:src/main/java/travelator/EmailAddress.java]](https://java-to-kotlin.dev/code.html?ref=3.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.3&show=diff)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.3 [classes.1:src/main/java/travelator/EmailAddress.java]](https://java-to-kotlin.dev/code.html?ref=3.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.3&show=diff)'
- en: 'The primary constructor syntax is convenient, but it does interfere with the
    scanability of the class. Java classes that follow the standard coding conventions
    always define their elements in the same order: class name, superclass, interfaces,
    and then, within the class body, fields, constructors, and methods. This makes
    it easy to skim-read the class and quickly locate the features you’re interested
    in.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 主构造函数的语法很方便，但它确实影响了类的可扫描性。遵循标准编码约定的Java类总是以相同的顺序定义它们的元素：类名、超类、接口，然后，在类主体内部，字段、构造函数和方法。这使得快速浏览类并快速定位感兴趣的特性变得很容易。
- en: It’s not quite so easy to find the parts of a Kotlin class. A Kotlin class definition
    has a header part with the class name, primary constructor (which can contain
    parameters and/or property definitions), superclass (which may also be the call
    to the superclass’s constructor), and interfaces. Then, within the class body,
    there are more properties and more constructors, methods, and companion objects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到Kotlin类的各个部分就没那么容易了。Kotlin类定义有一个头部部分，包括类名、主构造函数（可以包含参数和/或属性定义）、超类（也可能是对超类构造函数的调用）和接口。然后，在类主体内部，还有更多的属性、更多的构造函数、方法和伴生对象。
- en: 'Coming from Java, Nat and Duncan definitely found it harder to read classes
    at first, and although we got used to it eventually, we still find it hard at
    times to format classes for maximum readability, especially if there is a lot
    going on in the header part. One easy fix is to lay out the constructor parameter
    list line by line. With the cursor inside the parameter list, we can do that with
    Alt-Enter and “Put parameters on separate lines”. Sometimes a blank line after
    the header part helps, too:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从Java过来，Nat和Duncan起初确实发现阅读类更加困难，尽管我们最终习惯了，但有时我们仍然发现难以将类格式化为最大可读性，特别是头部有很多内容时。一个简单的解决方法是逐行布置构造函数参数列表。在参数列表内部，我们可以使用Alt-Enter和“Put
    parameters on separate lines”来实现这一点。有时，在头部之后加一行空行也有帮助：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 3.4 [classes.3:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.4&show=diff)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.4 [classes.3:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.4&show=diff)'
- en: One place where Kotlin is noticeably less succinct than Java is where it uses
    companion objects to host static state and methods, in this case `parse()`. In
    Kotlin, we often prefer top-level state and functions to these class-scoped members.
    [Chapter 8](ch08.html#static-methods-to-top-level-functions) discusses the pros
    and cons.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin显然比Java更加冗长的一个地方是在它使用伴生对象来托管静态状态和方法的地方，比如`parse()`。在Kotlin中，我们通常更喜欢顶层状态和函数而不是这些类作用域的成员。[第8章](ch08.html#static-methods-to-top-level-functions)讨论了其利弊。
- en: 'We currently have Java code that uses the static method, for example, the tests:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前有使用静态方法的Java代码，例如测试：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 3.5 [classes.0:src/test/java/travelator/EmailAddressTests.java]](https://java-to-kotlin.dev/code.html?ref=3.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.5&show=diff)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.5 [classes.0:src/test/java/travelator/EmailAddressTests.java]](https://java-to-kotlin.dev/code.html?ref=3.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.5&show=diff)'
- en: The companion object, combined with the `@JVMStatic` annotation, means this
    didn’t have to change when we converted the class to Kotlin, so we’ll leave `parse`
    as it is for now. We’ll discuss how to refactor to top-level functions in [Chapter 8](ch08.html#static-methods-to-top-level-functions).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 伴生对象与`@JVMStatic`注解结合使用，意味着在将类转换为Kotlin时不必更改此内容，因此我们暂时保留`parse`如其现状。我们将在[第8章](ch08.html#static-methods-to-top-level-functions)中讨论如何重构为顶级函数。
- en: 'If you’re new to Kotlin, you may wonder what happened to the `getLocalPart()`
    and `getDomain()` accessor methods. Declaring the `domain` property causes the
    compiler to generate a private `domain` field and a `getDomain()` method so that
    Java code can still call it. Here is a little throwaway code to support a marketing
    plan:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Kotlin的新手，您可能想知道`getLocalPart()`和`getDomain()`访问器方法去哪了。声明`domain`属性会导致编译器生成一个私有的`domain`字段和一个`getDomain()`方法，以便Java代码仍然可以调用它。这是一段支持营销计划的临时代码：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[Example 3.6 [classes.3:src/main/java/travelator/Marketing.java]](https://java-to-kotlin.dev/code.html?ref=3.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.6&show=diff)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.6 [classes.3:src/main/java/travelator/Marketing.java]](https://java-to-kotlin.dev/code.html?ref=3.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.6&show=diff)'
- en: You can see that Java is accessing the domain property through the `getDomain()`
    method. Conversely, when the class was Java and had an explicit `getDomain()`
    method, Kotlin code could have called it as `address.domain`. We’ll discuss properties
    in more detail in [Chapter 11](ch11.html#methods-to-properties).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Java通过`getDomain()`方法访问域属性。相反，当类是Java并且具有显式的`getDomain()`方法时，Kotlin代码可以调用它作为`address.domain`。我们将在[第11章](ch11.html#methods-to-properties)中更详细地讨论属性。
- en: 'So far, converting our class to Kotlin has saved us 14 lines of code, but we
    aren’t done yet. Value types like this are so useful, but so tedious to get right
    and keep right, that Kotlin supports them at a language level. If we mark the
    class with the `data` modifier, the compiler generates any undefined `equals`,
    `hashCode`, and `toString` methods for us. That reduces the `EmailAddress` class
    to:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，将我们的类转换为Kotlin已经为我们节省了14行代码，但我们还没有完成。像这样的值类型非常有用，但正确和保持正确是如此乏味，Kotlin在语言级别支持它们。如果我们使用`data`修饰符标记类，编译器将为我们生成任何未定义的`equals`、`hashCode`和`toString`方法。这将`EmailAddress`类减少到：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Example 3.7 [classes.4:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.7&show=diff)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3.7 [classes.4:src/main/java/travelator/EmailAddress.kt]](https://java-to-kotlin.dev/code.html?ref=3.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.7&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO2-1)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO2-1)'
- en: We don’t want the generated `toString()` method, so we define the one we do
    want.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想要生成的`toString()`方法，因此我们定义我们需要的方法。
- en: Frankly, that `parse` method still rankles; it’s taking up a disproportionate
    amount of space for the work it is doing. We’ll finally relieve this tension in
    [Chapter 9](ch09.html#multi-to-single-expression-functions). For now, though,
    we’re done with converting our `EmailAddress` Java class to Kotlin.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，`parse`方法仍然让人不爽；它占用了不成比例的空间来执行它的工作。我们将在[第9章](ch09.html#multi-to-single-expression-functions)中最终解决这种紧张情况。不过目前，我们已经将我们的`EmailAddress`
    Java类转换为Kotlin。
- en: The Limitations of Data Classes
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类的局限性
- en: A drawback of data classes is that they offer no encapsulation. We saw how the
    compiler generates `equals`, `hashCode`, and `toString` methods for data classes
    but didn’t mention that it also generates a `copy` method that creates a new copy
    of the value with different values for one or more of its properties.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类的一个缺点是它们没有封装性。我们看到编译器为数据类生成了`equals`、`hashCode`和`toString`方法，但没有提到它还生成了一个`copy`方法，用于创建具有不同属性值的新副本。
- en: 'For example, the following code creates a copy of an `EmailAddress` with a
    `localPart` of “postmaster” and the same domain:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码创建一个`EmailAddress`的副本，其`localPart`为“postmaster”，域相同：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For many types, this is very convenient. However, when a class abstracts its
    internal representation or maintains invariants between its properties, that `copy`
    method allows client code direct access to the internal state of a value, which
    can break its invariants.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多类型，这非常方便。然而，当一个类抽象其内部表示或在其属性之间维持不变性时，那个`copy`方法允许客户端代码直接访问值的内部状态，这可能会破坏其不变性。
- en: 'Let’s look at an abstract data type in the Travelator application, the `Money`
    class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Travelator应用中的一个抽象数据类型，`Money`类：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 3.8 [values.4:src/main/java/travelator/money/Money.java]](https://java-to-kotlin.dev/code.html?ref=3.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.8&show=diff)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例3.8 [values.4:src/main/java/travelator/money/Money.java]](https://java-to-kotlin.dev/code.html?ref=3.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.8&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO3-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO3-1)'
- en: The constructor is private. Other classes obtain `Money` values by calling the
    static `Money.of` method, which guarantees that the scale of the amount is consistent
    with the number of minor units of the currency. Most currencies have one hundred
    minor units (two digits), but some have fewer and some more. For example, the
    Japanese yen has no minor units, and the Jordanian dinar is made up of one thousand
    fils.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数是私有的。其他类通过调用静态的`Money.of`方法来获取`Money`值，这保证了金额的刻度与货币的最小单位数量一致。大多数货币有一百个最小单位（两位数），但有些货币少一些，有些多一些。例如，日本日元没有最小单位，约旦第纳尔由一千菲尔组成。
- en: The `of` method follows a coding convention of [Modern Java](ch01.html#modern-java-style)
    that draws a distinction in the source between objects with identity, which are
    constructed by the new operator, and values, which are obtained from static methods.
    This convention is followed by the Java time API (for example, `LocalDate.of(2020,8,17)`)
    and recent additions to the collections API (for example, `List.of(1,2,3)` creates
    an immutable list).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`of`方法遵循了[现代Java](ch01.html#modern-java-style)的编码规范，在源代码中区分具有身份的对象（由new操作符构造）和从静态方法获取的值。这个规范由Java时间API（例如，`LocalDate.of(2020,8,17)`）和集合API的最新添加（例如，`List.of(1,2,3)`创建一个不可变列表）所遵循。'
- en: The class provides some convenient overloads of the `of` method for String or
    int amounts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该类提供了一些方便的`of`方法重载，用于字符串或整数金额。
- en: '[![2](assets/2.png)](#co_introduction_CO3-3)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_CO3-3)'
- en: A `Money` value exposes its amount and currency properties using JavaBean conventions,
    even though it is not actually a JavaBean.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Money`值使用JavaBean约定公开其金额和货币属性，即使它实际上不是JavaBean。
- en: '[![3](assets/3.png)](#co_introduction_CO3-4)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introduction_CO3-4)'
- en: The `equals` and `hashCode` methods implement value semantics.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`equals`和`hashCode`方法实现了值语义。'
- en: '[![4](assets/4.png)](#co_introduction_CO3-7)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_introduction_CO3-7)'
- en: The `toString` method returns a representation of its properties that can be
    shown to the user, not just for debugging.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString`方法返回一个属性的表示形式，可以展示给用户，而不仅仅是用于调试。'
- en: '[![5](assets/5.png)](#co_introduction_CO3-8)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_introduction_CO3-8)'
- en: '`Money` provides operations for calculating with money values. For example,
    you can add monetary values together. The `add` method constructs new `Money`
    values by calling the constructor directly (rather than using `Money.of`), because
    the result of `BigDecimal.add` already has the correct scale, so we can avoid
    the overhead of setting the scale in `Money.of`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Money`提供了用于计算货币值的操作。例如，你可以将货币值相加。`add`方法通过直接调用构造函数（而不是使用`Money.of`）来构造新的`Money`值，因为`BigDecimal.add`的结果已经具有正确的刻度，因此我们可以避免在`Money.of`中设置刻度的开销。'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The method `BigDecimal.setScale` is confusing. Although named like a JavaBean
    setter, it does not actually mutate the BigDecimal object. Like our `EmailAddress`
    and `Money` classes, `BigDecimal` is an immutable value type, so `setScale` returns
    a new `BigDecimal` value with the specified scale.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`BigDecimal.setScale`方法令人困惑。虽然其名称类似于JavaBean的setter方法，但它实际上并不会改变BigDecimal对象。像我们的`EmailAddress`和`Money`类一样，`BigDecimal`是一个不可变的值类型，因此`setScale`返回一个具有指定刻度的新`BigDecimal`值。'
- en: Sun added the `BigDecimal` class to the standard library in Java 1.1\. This
    release also included the first version of the JavaBeans API. The hype around
    the Beans API popularized the JavaBeans coding conventions, and they were widely
    adopted, even for classes that, like `BigDecimal`, were not JavaBeans (see [“Bean
    Style”](ch01.html#bean-java-style)). There were no Java conventions for value
    types.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Sun在Java 1.1标准库中添加了`BigDecimal`类。此版本还包括JavaBeans API的第一个版本。围绕Beans API的炒作推广了JavaBeans编码约定，并被广泛采用，即使是对于像`BigDecimal`这样的不是JavaBeans的类（参见[“Bean
    Style”](ch01.html#bean-java-style)）。没有Java约定来定义值类型。
- en: 'Today, we avoid the “set” prefix for methods that do not mutate their receiver
    and instead use names that emphasize when the method returns a transformation
    of the receiver. A common convention is to use the prefix “with” for transformations
    that affect a single property, which would make the code in our `Money` class
    read as:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们避免为不改变其接收器的方法使用“set”前缀，并改用强调方法返回接收器变换的名称。一个常见的约定是为影响单个属性的变换使用前缀“with”，这将使我们的`Money`类中的代码读起来如下：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Kotlin we can write extension functions to fix such historical accidents.
    If we were writing a lot of code that calculated with `BigDecimal`s, it might
    be worth doing so to improve the clarity of the code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，我们可以编写扩展函数来修复这样的历史错误。如果我们要编写大量使用`BigDecimal`进行计算的代码，这样做可能会值得，以提高代码的清晰度：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Converting `Money` to Kotlin produces the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Money`转换为Kotlin会生成以下代码：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 3.9 [values.5:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=3.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.9&show=diff)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例3.9 [values.5:src/main/java/travelator/money/Money.kt]](https://java-to-kotlin.dev/code.html?ref=3.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=3.9&show=diff)'
- en: 'The Kotlin class still has a primary constructor, but that constructor is now
    marked private. The syntax for this is a little clumsy: we’ve reformatted the
    code that the translator produced in an attempt to make it easier to scan. Like
    `EmailAddress.parse`, the static `of` factory functions are now methods on a companion
    object annotated as `@JvmStatic`. Overall, the code is not much more concise than
    the original Java.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin类仍然有一个主构造函数，但该构造函数现在标记为私有。语法有些笨拙：我们重新格式化了翻译器生成的代码，以使其更易于扫描。像`EmailAddress.parse`一样，静态的`of`工厂函数现在是伴生对象上的方法，并标记为`@JvmStatic`。总体而言，该代码比原始Java代码并没有更加简洁。
- en: Can we shrink it even further by making it a data class?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将其变为数据类来进一步缩小吗？
- en: 'When we change `class` to `data class`, IntelliJ highlights the `private` keyword
    of the primary constructor with a warning:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`class`改为`data class`时，IntelliJ会用警告突出主构造函数的`private`关键字：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What’s that all about?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是怎么回事？
- en: There is a detail hiding in the implementation of `Money`. The class maintains
    an invariant between its properties, guaranteeing that the scale of the amount
    field is equal to the default number of minor currency digits of the currency
    field. The private constructor prevents code outside the `Money` class from creating
    values that violate the invariant. The `Money.of(BigDecimal,Currency)` method
    ensures the invariant is true for new `Money` values. The `add` method maintains
    the invariant because adding two `BigDecimal` values with the same scale produces
    a `BigDecimal` that also has the same scale, and it can therefore call the constructor
    directly. The constructor, therefore, need only assign fields, safe in the knowledge
    that it is never called with parameters that violate the class invariant.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Money`的实现中隐藏了一个细节。该类在其属性之间维护不变性，保证金额字段的比例等于货币字段的默认小货币位数。私有构造函数阻止`Money`类外的代码创建违反不变性的值。`Money.of(BigDecimal,Currency)`方法确保新的`Money`值符合不变性。`add`方法维护不变性，因为将具有相同比例的两个`BigDecimal`值相加会产生一个具有相同比例的`BigDecimal`，因此可以直接调用构造函数。因此，构造函数只需分配字段，确信从不会使用违反类不变性的参数调用它。
- en: However, the `copy` method of a data class is always public and so *would* allow
    client code to create `Money` values that violate the invariant. Unlike `EmailAddress`,
    an abstract data type like the `Money` class cannot be implemented by a Kotlin
    data class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数据类的`copy`方法总是公开的，因此*可以*允许客户端代码创建违反不变性的`Money`值。与`EmailAddress`不同，像`Money`类这样的抽象数据类型不能由Kotlin数据类实现。
- en: Warning
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Don’t define a value type as a data class if it must maintain invariants between
    its properties.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果必须在其属性之间保持不变性，请勿将值类型定义为数据类。
- en: We can still make the class more concise and convenient with Kotlin features
    that we will encounter in later chapters. So we’ll leave the `Money` class for
    now and come back to it in [Chapter 12](ch12.html#functions-to-operators) to give
    it a thorough makeover.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然可以通过Kotlin的特性使类更加简洁和便利，这些特性我们将在后续章节中遇到。所以我们暂时将`Money`类放在一边，并在[第12章](ch12.html#functions-to-operators)重新审视它，进行彻底的改造。
- en: Moving On
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来
- en: For most classes, it is quick and easy to convert Java to Kotlin. The result
    is completely compatible with existing Java code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数类来说，将Java转换为Kotlin是快速且简单的。结果与现有的Java代码完全兼容。
- en: 'If we want value semantics, `data` classes allow us to remove even more boilerplate
    for simple classes like `EmailAddress`. Because data classes are so quick and
    easy to create, and require no maintenance, we use them to define new value types
    far more frequently in Kotlin than in Java: to declare application-specific “micro-types”
    that wrap primitive values, to hold intermediate results of a calculation pipeline,
    or to pivot data into temporary structures that make it easier to write application
    logic.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要值语义，`data`类允许我们为像`EmailAddress`这样的简单类去除更多样板代码。因为数据类创建起来如此迅速简便，并且无需维护，所以我们在Kotlin中更频繁地使用它们来定义新的值类型，而不像在Java中那样：声明特定于应用程序的“微类型”，包装原始值，保存计算管道的中间结果，或将数据转换为更易于编写应用逻辑的临时结构。
- en: If our value types must maintain invariants or encapsulate their representation,
    data classes are not suitable. In that case we have to implement value semantics
    ourselves.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的值类型必须保持不变或封装它们的表示，数据类就不适合。在这种情况下，我们必须自己实现值语义。
- en: We left both `EmailAddress` and `Money` still looking rather Java-y…Java-ish?…Java-esque?…whatever.
    In the following chapters, we will explore how to apply Kotlin idioms to make
    code more concise, more type safe, and easier to build code upon. [Chapter 9,
    *Multi- to Single-Expression Functions*](ch09.html#multi-to-single-expression-functions),
    looks at how we can make calculation functions and methods, such as the `toString`
    method of both classes, or `equals` and `hashCode` of `Money`, more concise by
    refactoring them to single expression form. In [Chapter 12, *Functions to Operators*](ch12.html#functions-to-operators),
    we make the `Money` type more convenient to use in Kotlin by defining operators
    instead of methods.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`EmailAddress`和`Money`仍然看起来很像Java…Java风格？...Java-esque？...不管怎样。在接下来的章节中，我们将探讨如何应用Kotlin习惯用语，使代码更加简洁、类型安全，更易于构建代码。[第9章，*从多表达式函数到单表达式函数*](ch09.html#multi-to-single-expression-functions)，探讨了如何通过重构将计算函数和方法，比如这两个类的`toString`方法或者`equals`和`hashCode`方法，改为单表达式形式，使之更为简洁。在[第12章，*从函数到操作符*](ch12.html#functions-to-operators)，我们通过定义操作符而非方法，使`Money`类型在Kotlin中更便于使用。
- en: Not all our Java classes are value types. The prevalent Java coding style favors
    mutable objects. In [Chapter 5, *Beans to Values*](ch05.html#beans-to-values),
    we look at the advantages of using value types where Java would use mutable objects,
    and show how to refactor code from mutating objects to transforming values.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 并非我们所有的Java类都是值类型。盛行的Java编码风格偏爱可变对象。在[第5章，*从Bean到值类型*](ch05.html#beans-to-values)，我们研究了在Java使用可变对象的地方使用值类型的优势，并展示了如何将代码从变异对象重构为转换值。
- en: Many classes in Java code exist to hold static utility methods. In Kotlin, functions
    and data are first class features. They do not need to be declared as members
    of classes. [Chapter 8, *Static Methods to Top-Level Functions*](ch08.html#static-methods-to-top-level-functions),
    explores how to convert Java classes of utility methods into top-level declarations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Java代码中的许多类存在于保存静态实用方法。在Kotlin中，函数和数据是一流的功能。它们不需要声明为类的成员。[第8章，*从静态方法到顶层函数*](ch08.html#static-methods-to-top-level-functions)，探讨了如何将实用方法的Java类转换为顶层声明。
