- en: Chapter 4\. Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn the following about setting configuration parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: How to configure a Quarkus service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to inject configuration parameters in the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply values depending on the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to correctly configure the logging system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create customizations for the configuration system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.1 Configuring the Application with Custom Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to configure the Quarkus application with custom properties.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus makes use of a number of the Eclipse MicroProfile specifications. One
    of those is the Configuration specification; however, to simplify configuration,
    Quarkus uses just one file for all configurations, *application.properties*, which
    must be placed in the root of the classpath.
  prefs: []
  type: TYPE_NORMAL
- en: This file can be used to configure Quarkus properties such as logging or default
    path, Quarkus extensions like data source or Kafka, or custom properties that
    you define for the application. You are going to see all of them in the book,
    but in this recipe, you’ll see the latter one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the *src/main/resources/application.properties* file and add the following
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can inject the property value defined in *application.properties* by using
    the `org.eclipse.microprofile.config.inject.ConfigProperty` annotation in a field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `org.acme.quickstart.GreetingResource.java` and inject `greeting.message`
    property value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Injects the value of `greeting.message` property
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Places fields in package-protected scope
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the configured value
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For performance reasons when using GraalVM and reflection, we encourage you
    to use *protected-package* scope on fields that will be injected at runtime. You
    can read more about it in the [Quarkus CDI Reference Guide](https://oreil.ly/8e1Sd).
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window, make a request to `/hello` to see that the output
    message is the configured value in *application.properties*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you want to make a configuration field not mandatory and provide a default
    value, you can use the `defaultValue` attribute of `@ConfigProperty` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `org.acme.quickstart.GreetingResource.java` file and inject the `greeting.upper-case`
    property value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the default of `greeting.upper-case` property to true
  prefs: []
  type: TYPE_NORMAL
- en: 'And in a terminal window, make a request to `/hello/optional` to see that the
    output message is in upper case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Multivalue properties are supported—you need to define only the field type as
    one of `Arrays`, `java.util.List` or `java.util.Set`, depending on your requirements/preference.
    The delimiter for the property value is a comma (`,`) and the escape character
    is the backslash (`\`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the *src/main/resources/application.properties* file and add the following
    property with three values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open *org.acme.quickstart.GreetingResource.java* and inject `greeting.suffix`
    property values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And in a terminal window make a request to `/hello/list` to see that the output
    message contains the second suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The YAML format is also supported for configuring the application. In this case,
    the file is named *application.yaml* or *application.yml*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using the YAML configuration file, you need to add the `config-yaml`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Given the following configuration file using the `properties` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent in YAML format follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Simple properties are set as a structure
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Profiles are supported wrapped in quotation marks
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: When there are subkeys the `~` is used to refer to the unprefixed part
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Eclipse MicroProfile Configuration comes with the following built-in converters
    to map a configuration value into a Java object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`boolean` and `java.lang.Boolean`; the values for true are `true`, `1`, `YES`,
    `Y`, and `ON`, while any other value is considered `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`byte` and `java.lang.Byte`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short` and `java.lang.Short`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int` and `java.lang.Integer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`long` and `java.lang.Long`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float` and `java.lang.Float`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double` and `java.lang.Double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`char` and `java.lang.Character`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.lang.Class` based on the result of the call of `Class.forName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a built-in converter or custom converter does not exist, then the following
    methods are checked in the target object. If a built-in converter or custom converter
    *does* exist, the discovered/found method is used to instantiate the converter
    object and the string argument is passed for conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: Target type has `public static T of(String)` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target type has `public static T valueOf(String)` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target type has public constructor with a `String` parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target type has `public static T parse(CharSequence)` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2 Accessing Configuration Properties Programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to access configuration properties programmatically instead of injecting
    them using the `org.eclipse.microprofile.config.inject.ConfigProperty` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inject the `org.eclipse.microprofile.config.Config` class in the object for
    which you want to access properties programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: The Eclipse MicroProfile Configuration spec allows you to inject `org.eclipse.microprofile.config.Config`
    to get properties programmatically instead of injecting directly with `ConfigProperty`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `org.acme.quickstart.GreetingResource.java` and inject `Config` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Use `Inject` CDI annotation to inject the instance
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: You can now access the list of properties
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Property needs to be cast to final type
  prefs: []
  type: TYPE_NORMAL
- en: You can access the `Config` class without using CDI by calling `ConfigProvider.getConfig()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Overwriting Configuration Values Externally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to overwrite any configuration value at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can overwrite any property at runtime by setting it as a system property
    or environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus lets you overwrite any configuration property by setting a configuration
    as a system property (`-Dproperty.name=value`) and/or as an environment variable
    (`export PROPERTY_NAME=value`). System properties have more priority than environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of externalizing these properties can be a database URL, username,
    or password because they are known only in the target environment. But you need
    to know that there is a trade-off because the more runtime properties are available,
    the less build time prework Quarkus can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s package the application used in [Recipe 4.1](#config-app-with-cust-properties)
    and override the `greeting.message` property by setting a system property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new terminal window, validate that the property has been overridden from
    `Hello World` to `Aloha` by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of environment variables, three naming conventions for a given
    property name are supported. This is because some operating systems allow only
    alphabetic characters and underscores (`_`) but no other characters, like dots
    (`.`). To support all possible cases, the following rules are used:'
  prefs: []
  type: TYPE_NORMAL
- en: Exactly match (`greeting.message`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace nonalphanumeric characters to underscore (`greeting_message`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace nonalphanumeric characters to underscore and convert the rest to upper
    case (`GREETING_MESSAGE`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the *application.properties* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can override its value using any of the following environment variable
    names because all of them are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There is also a special place where you can put the *application.properties*
    file outside the application itself, inside a directory named *config* where the
    application runs. Any runtime properties defined in that file will override the
    default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*config/application.properties* works in development mode as well, but you
    need to add it on your build tool output directory to make it work (in case of
    the Maven, the *target* directory; in case of Gradle, *build*), so you need to
    be aware of the need to re-create it when running the `clean` task.'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from environment variables and the *application.properties* file, you
    can also place a *.env* file in the current working directory to override configuration
    values, following the environment variables format (`GREETING_MESSAGE=Aloha`).
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Configuring with Profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to overwrite configuration values depending on the environment in which
    you are running Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus supports the notion of configuration profiles. These allow you to have
    multiple configuration values for the same property in the same file and enable
    different values to suit the environment in which you are running the service.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax for configuration profiles is `%{profile}.config.key=value`.
  prefs: []
  type: TYPE_NORMAL
- en: Discuss
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus comes with three built-in profiles.
  prefs: []
  type: TYPE_NORMAL
- en: dev
  prefs: []
  type: TYPE_NORMAL
- en: Activated when in development mode (i.e., `quarkus:dev`).
  prefs: []
  type: TYPE_NORMAL
- en: test
  prefs: []
  type: TYPE_NORMAL
- en: Activated when running tests.
  prefs: []
  type: TYPE_NORMAL
- en: prod
  prefs: []
  type: TYPE_NORMAL
- en: The default profile when not running in development or test mode; you don’t
    need to set it in *application.properties*, as it is implicitly set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* file and set to start Quarkus
    at port 8181 in development mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After this change, start the service to again check that the listening port
    is 8181 instead of the default one (8080):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Notice that now the listening address is [*http://0.0.0.0:8181*](http://0.0.0.0:8181)
    instead of the default one.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, rollback to 8080 port, remove `%dev.quarkus.http.port=8181` line in
    *application.properties* to align with the port that is used in the rest of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Changing Logger Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to change the default logging configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus uses a unified configuration model in which all configuration properties
    are placed in the same file. In the case of Quarkus, this file is *application.properties*,
    and you can configure many aspects of logging there.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to change the logging level, you just set `quarkus.log.level`
    to the minimum log level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now start the application to see that a lot of new logging messages are printed
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We had to span multiple lines for formatting in the book; we have used the backslash
    to indicate this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also enable storing logs in a file by using `quarkus.log.file.enable`
    property. The output is written by default to a file named *quarkus.log*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While you are in development and working out of the source directory, your logging
    file will be in *target* directory.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 Adding Application Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add log lines to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time, your applications need to write their own logging messages
    and not rely solely on the default logs provided by Quarkus. Applications may
    use any of the supported APIs for logging, and the logs will be merged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarkus supports these logging libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: JDK java.util.logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Commons Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see how to use `JBoss Logging` to log content. Open `org.acme.quickstart.GreetingResource.java`
    and log a message when an special endpoint is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates the logger instance
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint subpath is */log*
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Logs at `info` level
  prefs: []
  type: TYPE_NORMAL
- en: 'Now start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new terminal, window make a request to `/hello/log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you inspect the terminal where you started Quarkus, you’ll see the next
    logline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logging is done on a per-category basis. A configuration that applies to a category
    also applies to all subcategories of that category, unless there is a more specific
    matching subcategory configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Categories are represented by class location (i.e., the package, or subpackages,
    where they are defined). For example, if you want to set Undertow security logging
    to trace level, you need to set the `quarkus.log.category."io.undertow.request.security".level=TRACE`
    property in *application.properties*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the previous example, let’s restrict log lines from classes residing
    in `org.acme.quickstart` (and subclasses) so the minimum log level is `WARNING`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Double quotes are mandatory to set the category
  prefs: []
  type: TYPE_NORMAL
- en: If you repeat the request to [*http://localhost:8080/hello/log*](http://localhost:8080/hello/log),
    logline is no longer written down.
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 Advanced Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to centrally log all your services.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with microservice architectures and Kubernetes, logging is an important
    thing to take into consideration because each service is logging individually;
    but as a developer or operator, you might want to have all the logs centralized
    in one place so they can be consumed as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus logging also supports JSON and GELF output.
  prefs: []
  type: TYPE_NORMAL
- en: 'These logs can be written in JSON format instead of plain text for machine
    processing by registering the `logging-json` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Use the GELF extension to produce logs in GELF format and send them using either
    TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: '*Graylog extended log format* (GELF) is understood by three of the most centralized
    logs systems that are used nowadays:'
  prefs: []
  type: TYPE_NORMAL
- en: Graylog (MongoDB, Elasticsearch, Graylog)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ELK (Elasticsearch, Logstash, Kibana)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EFK (Elasticsearch, Fluentd, Kibana)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start logging in GELF format, all you need to do is add the `logging-gelf`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Logging code is not changing, so the same interfaces are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates the logger instance
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint subpath is */log*
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Logs at `info` level
  prefs: []
  type: TYPE_NORMAL
- en: 'The GELF handler must be configured in *application.properties*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Enables extension
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets host where log messages are sent
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the endpoint port
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you are using Logstash (ELK), you need to enable the Input plug-in that
    understands the GELF format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you are using Fluentd (EFK), you need to enable the Input plug-in that understands
    the GELF format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Quarkus logging also supports syslog format by default without the requirement
    of adding any extension. Syslog format can be used in Fluentd as an alternative
    to GELF format in Quarkus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You need to enable the Input plug-in that understands the syslog format in
    Fluentd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Kubernetes, the simplest way to log is to log to the console
    and install into the cluster a central log manager that collects all log lines.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about advanced logging topics, visit the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Logstash/Gelf Loggers](https://oreil.ly/Mj9Ha)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.8 Configuring with Custom Profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to set different configuration values for the custom profiles you’ve
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you’ve seen that Quarkus comes with built-in profiles so that you can
    set different configuration values for the same property and enable them to suit
    the environment. But with Quarkus, you can also set your own profiles.
  prefs: []
  type: TYPE_NORMAL
- en: The only thing you need to do is specify which profile you want to enable by
    either using the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment
    variable. If both are set, the system property takes precedence over the environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: Then the only thing you need to do is create the property with the profile name
    and set the current profile to that name. Let’s create a new *staging* profile
    that overwrites the listening port of Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* file and set to start Quarkus
    at port 8182 when the `staging` profile is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then start the application with `staging` profile enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the system property approach is used, but you could also set it
    using the `QUARKUS_PROFILE` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to set the running profile in tests, you only need to set the `quarkus.test.profile`
    system property to the given profile in your build script—for example, in Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'or, in Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can change the default production profile. The built-in profile in
    Quarkus is `prod`, so when you are running your application without any profile,
    this is the default one where the values are taken. But you can change that at
    build time so that, without specifying any profile, your profile is the default
    one when the application is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing you need to do is build the application using the `quarkus.profile`
    system property with the profile value you want set as the default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The command will run with the `prod-kubernetes` profile enabled by default
  prefs: []
  type: TYPE_NORMAL
- en: 4.9 Creating Custom Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to load configuration parameters from any other source instead of/apart
    from *application.properties* file.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus uses the Eclipse MicroProfile Configuration spec to implement all the
    logic regarding configuration. The specification offers `o⁠r⁠g⁠.⁠e⁠c⁠l⁠i⁠p⁠s⁠e⁠.⁠m⁠i⁠c⁠r⁠o⁠p⁠r⁠o⁠f⁠i⁠l⁠e​.⁠c⁠o⁠n⁠f⁠i⁠g⁠.⁠s⁠p⁠i⁠.⁠C⁠o⁠n⁠f⁠i⁠g⁠S⁠o⁠u⁠r⁠c⁠e`
    [Java SPI](https://oreil.ly/o0A51) interface to implement a custom way to load
    configuration properties instead of/apart from the default one provided by Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could load configuration properties from a database, an XML
    file, or a REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a simple *in-memory config source* that gets configuration properties
    from `Map` populated at instantiation time. Create a new class called `org.acme.quickstart.InMemoryConfigSource.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Populates map with a property
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Used to determine the importance of the values; the highest ordinal takes precedence
    over the lower-priority ordinal
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets all properties as `Map`; in this case it is direct
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_configuration_CO10-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets the value for a single property
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_configuration_CO10-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the name of this config source
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you need to register this as a Java SPI. Create the *services* folder
    at *src/main/resources/META-INF*. Next, create a file inside *services* named
    *org.eclipse.microprofile.config.spi.ConfigSource* with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can modify the `org.acme.quickstart.GreetingResource.java` class
    to inject this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Inject the value of the property defined in the `InMemoryConfigSource`
  prefs: []
  type: TYPE_NORMAL
- en: 'And in a terminal window make a request to `/hello/color` to see that the output
    message is the configured value in the custom source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each `ConfigSource` has a specified ordinal, which is used to set the importance
    of the values taken from the `ConfigSource` in the case of multiple config sources
    defined for the same application. A higher ordinal `ConfigSource` is used over
    a `ConfigSource` with a lower value. Using the defaults in the following list
    as a reference, a system property will be used over everything, and the *application.properties*
    file in the *src/main/resources* directory will be used if no other `ConfigSources`
    are found:'
  prefs: []
  type: TYPE_NORMAL
- en: System properties to 400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables to 300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*application.properties* at *config* directory to 260'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*application.properties* at project to 250'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.10 Creating Custom Converters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to implement a custom converter.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can convert a property from `String` to any kind of object by implementing
    the `org.eclipse.microprofile.config.spi.Converter` Java SPI.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus uses the Eclipse MicroProfile Configuration spec to implement all the
    logic regarding configuration. The specification offers the `org.eclipse.microprofile.config.spi.Converter`
    [Java SPI](https://oreil.ly/kcqQw) interface to implement the conversion of configuration
    values to a custom type.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could transform a percentage value (i.e., 15%) to a `Percentage`
    type, wrapping the percentage as `double` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new POJO class `org.acme.quickstart.Percentage.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And then create a class `org.acme.quickstart.PercentageConverter.java` that
    converts from `String` representation to `Percentage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the priority; in this specific case it might be optional
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generic type that sets the type to convert to
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you need to register this as a Java SPI. Create the *services* folder
    at *src/main/resources/META-INF*. Next, create a file inside the *services* folder
    named *org.eclipse.microprofile.config.spi.Converter* with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can modify the `org.acme.quickstart.GreetingResource.java` class
    to inject this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, you will need to add a new property into the *application.properties*
    file in your *src/main/resources* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And in a terminal window, make a request to `/hello/vat` to see that the output
    message is the transformed vat as double:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, if no `@Priority` annotation can be found on a converter, it is
    registered with a priority of 100. Quarkus converters are registered with a priority
    of 200, so if you want to replace a Quarkus converter, you should use a higher
    value; if you don’t need to replace a Quarkus converter, then the default one
    is perfectly fine.
  prefs: []
  type: TYPE_NORMAL
- en: A list of Quarkus core converters has been shown in [Recipe 4.1](#config-app-with-cust-properties).
  prefs: []
  type: TYPE_NORMAL
- en: 4.11 Grouping Configuration Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to avoid setting the common prefix of a configuration property over
    and over again.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can group common properties (those with the same prefix) using the `@⁠i⁠o​.⁠q⁠u⁠a⁠r⁠k⁠u⁠s⁠.⁠a⁠r⁠c⁠.⁠c⁠o⁠n⁠f⁠i⁠g⁠.⁠C⁠o⁠n⁠f⁠i⁠g⁠P⁠r⁠o⁠p⁠e⁠r⁠t⁠i⁠e⁠s`
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: When you are creating ad hoc configuration properties in your application, typically
    these properties will have the same prefix (i.e., `greetings`). To inject all
    these properties, you can use the `@ConfigProperty` annotation (as shown in [Recipe
    4.1](#config-app-with-cust-properties)), or you can use the `io.quarkus.arc.config.ConfigProperties`
    annotation to group properties together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the *application.properties* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'let’s implement a class that maps the configuration properties into Java objects
    using the `io.quarkus.arc.config.ConfigProperties` annotation. Create a new class
    `org.acme.quickstart.GreetingConfiguration.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets this as a configuration POJO with a common prefix
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Maps the `greeting.message` property
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The default value for `greeting.suffix` in case the property is not set
  prefs: []
  type: TYPE_NORMAL
- en: One of the important things to notice in the preceding code is that the `prefix`
    attribute is not mandatory. If it is not set, then the prefix to be used will
    be determined by the class name (removing the suffix part `Configuration`). In
    this case, the `prefix` attribute could be auto-resolved to `greeting`.
  prefs: []
  type: TYPE_NORMAL
- en: Then you can inject this configuration POJO to start consuming the configuration
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can modify the `org.acme.quickstart.GreetingResource.java` class to inject
    this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration is injected with the CDI `@Inject` annotation
  prefs: []
  type: TYPE_NORMAL
- en: 'And in a terminal window make a request to `/hello/configurations` to see that
    the configuration values are populated inside Java, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you can now see, you don’t need to annotate every field by using `@ConfigProperty`—you
    just leverage the class definition to get the property name or the default value.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Furthermore, Quarkus supports nested object configuration so that you can also
    map subcategories by using inner classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we add a new property named `greeting.output.recipients` in *application.properties*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You could use an inner class to map it into the configuration object. Modify
    the class `org.acme.quickstart.GreetingConfiguration.java`. Then add a new inner
    class representing the subcategory `output` and register it as a field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the subcategory is the field name (`output`)
  prefs: []
  type: TYPE_NORMAL
- en: Then you can access the `greetingConfiguration.output.recipients` field to get
    the value. You can also annotate the fields with Bean Validation annotations to
    validate at start-up time that all configuration values are valid. If they are
    not valid, the application will fail to start and will indicate the validation
    errors in the log.
  prefs: []
  type: TYPE_NORMAL
- en: 4.12 Validating Configuration Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to validate that configuration values are correct.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Bean Validation specification to validate that a property value is valid
    when it is injected using the `@ConfigProperty` annotation on a class.
  prefs: []
  type: TYPE_NORMAL
- en: The Bean Validation spec allows you to set constraints on objects using annotations.
    Quarkus integrates the Eclipse MicroProfile Configuration spec with the Bean Validation
    spec so you can use them together to validate that a configuration value meets
    certain criteria. This verification is executed at boot time, and if there is
    any violation, an error message is shown in the console and the boot process is
    aborted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to do is to register the *Quarkus Bean Validation*
    dependency. You can do it manually by editing your *pom.xml* or by running the
    next Maven command from the root directory of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: After that, you will need to create a configuration object, which you learned
    about in the previous recipe. In the next example, a constraint on the `greeting.repeat`
    configuration property is set so that repetitions outside of the range 1–3 inclusive
    cannot be set.
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate integer range, the following Bean Validation annotations are used:
    `j⁠a⁠v⁠a⁠x​.⁠v⁠a⁠l⁠i⁠d⁠a⁠t⁠i⁠o⁠n⁠.⁠c⁠o⁠n⁠s⁠t⁠r⁠a⁠i⁠n⁠t⁠s⁠.⁠M⁠a⁠x` and `javax.validation.constraints.Min`.
    Open `org.acme.quickstart.GreetingConfiguration.java` and add Bean Validation
    annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_configuration_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Min value accepted
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO16-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Max value accepted
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* file and set the `greeting.repeat`
    configuration property to 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the application, and you’ll see an error message notifying that a configuration
    value is violating one of the defined constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, you’ve seen a brief introduction to Bean Validation specification,
    as well as some annotations you can use to validate fields. However, more constraints
    are supported by Hibernate Validation and the Bean Validation implementation used,
    such as `@Digits`, `@Email`, `@NotNull`, and `@NotBlank`.
  prefs: []
  type: TYPE_NORMAL
