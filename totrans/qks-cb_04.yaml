- en: Chapter 4\. Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 配置
- en: 'In this chapter, you’ll learn the following about setting configuration parameters:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关设置配置参数的以下内容：
- en: How to configure a Quarkus service
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置Quarkus服务
- en: How to inject configuration parameters in the service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在服务中注入配置参数
- en: How to apply values depending on the environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何根据环境应用值
- en: How to correctly configure the logging system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何正确配置日志系统
- en: How to create customizations for the configuration system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为配置系统创建自定义项
- en: 4.1 Configuring the Application with Custom Properties
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.1 使用自定义属性配置应用程序
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to configure the Quarkus application with custom properties.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用自定义属性配置Quarkus应用程序。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus makes use of a number of the Eclipse MicroProfile specifications. One
    of those is the Configuration specification; however, to simplify configuration,
    Quarkus uses just one file for all configurations, *application.properties*, which
    must be placed in the root of the classpath.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus利用了多个Eclipse MicroProfile规范之一。其中之一是配置规范；但是，为了简化配置，Quarkus仅使用一个文件来进行所有配置，即*application.properties*，该文件必须放置在类路径的根目录下。
- en: This file can be used to configure Quarkus properties such as logging or default
    path, Quarkus extensions like data source or Kafka, or custom properties that
    you define for the application. You are going to see all of them in the book,
    but in this recipe, you’ll see the latter one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件可用于配置Quarkus属性，如日志或默认路径，Quarkus扩展如数据源或Kafka，或者您为应用程序定义的自定义属性。您将在本书中看到所有这些内容，但在本节中，您将看到后者。
- en: 'Open the *src/main/resources/application.properties* file and add the following
    property:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*src/main/resources/application.properties*文件，并添加以下属性：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can inject the property value defined in *application.properties* by using
    the `org.eclipse.microprofile.config.inject.ConfigProperty` annotation in a field.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`org.eclipse.microprofile.config.inject.ConfigProperty`注解在字段中注入*application.properties*中定义的属性值。
- en: 'Open `org.acme.quickstart.GreetingResource.java` and inject `greeting.message`
    property value:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`org.acme.quickstart.GreetingResource.java`并注入`greeting.message`属性值：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_configuration_CO1-1)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO1-1)'
- en: Injects the value of `greeting.message` property
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注入`greeting.message`属性的值
- en: '[![2](Images/2.png)](#co_configuration_CO1-2)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO1-2)'
- en: Places fields in package-protected scope
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将字段置于包保护范围内
- en: '[![3](Images/3.png)](#co_configuration_CO1-3)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO1-3)'
- en: Returns the configured value
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 返回配置的数值
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: For performance reasons when using GraalVM and reflection, we encourage you
    to use *protected-package* scope on fields that will be injected at runtime. You
    can read more about it in the [Quarkus CDI Reference Guide](https://oreil.ly/8e1Sd).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能原因，在使用GraalVM和反射时，我们建议您在运行时注入的字段上使用*protected-package*范围。您可以在[Quarkus CDI参考指南](https://oreil.ly/8e1Sd)中了解更多信息。
- en: 'In a new terminal window, make a request to `/hello` to see that the output
    message is the configured value in *application.properties*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的终端窗口中，向`/hello`发出请求，查看输出消息是否为*application.properties*中配置的值：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to make a configuration field not mandatory and provide a default
    value, you can use the `defaultValue` attribute of `@ConfigProperty` annotation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使配置字段非强制且提供默认值，可以使用`@ConfigProperty`注解的`defaultValue`属性。
- en: 'Open the `org.acme.quickstart.GreetingResource.java` file and inject the `greeting.upper-case`
    property value:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`org.acme.quickstart.GreetingResource.java`文件并注入`greeting.upper-case`属性值：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_configuration_CO2-1)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO2-1)'
- en: Sets the default of `greeting.upper-case` property to true
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将`greeting.upper-case`属性的默认值设置为true
- en: 'And in a terminal window, make a request to `/hello/optional` to see that the
    output message is in upper case:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在终端窗口，向`/hello/optional`发出请求，查看输出消息是否为大写：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Multivalue properties are supported—you need to define only the field type as
    one of `Arrays`, `java.util.List` or `java.util.Set`, depending on your requirements/preference.
    The delimiter for the property value is a comma (`,`) and the escape character
    is the backslash (`\`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 支持多值属性——您只需将字段类型定义为`Arrays`、`java.util.List`或`java.util.Set`之一，具体取决于您的需求/偏好。属性值的分隔符是逗号（`,`），转义字符是反斜杠（`\`）。
- en: 'Open the *src/main/resources/application.properties* file and add the following
    property with three values:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*src/main/resources/application.properties*文件，并添加具有三个值的以下属性：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open *org.acme.quickstart.GreetingResource.java* and inject `greeting.suffix`
    property values:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *org.acme.quickstart.GreetingResource.java* 并注入 `greeting.suffix` 属性值：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And in a terminal window make a request to `/hello/list` to see that the output
    message contains the second suffix:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并在终端窗口中发出 `/hello/list` 请求，以查看输出消息是否包含第二后缀：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The YAML format is also supported for configuring the application. In this case,
    the file is named *application.yaml* or *application.yml*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 格式也支持配置应用程序。在这种情况下，文件名为 *application.yaml* 或 *application.yml*。
- en: 'To start using the YAML configuration file, you need to add the `config-yaml`
    extension:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 YAML 配置文件，您需要添加 `config-yaml` 扩展：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Given the following configuration file using the `properties` format:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下使用 `properties` 格式的配置文件：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The equivalent in YAML format follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 格式中的等效格式如下：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_configuration_CO3-1)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO3-1)'
- en: Simple properties are set as a structure
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简单属性被设置为一个结构
- en: '[![2](Images/2.png)](#co_configuration_CO3-2)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO3-2)'
- en: Profiles are supported wrapped in quotation marks
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 支持包含在引号中的配置文件
- en: '[![3](Images/3.png)](#co_configuration_CO3-3)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO3-3)'
- en: When there are subkeys the `~` is used to refer to the unprefixed part
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在子键时，使用 `~` 来引用无前缀部分
- en: Discussion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Eclipse MicroProfile Configuration comes with the following built-in converters
    to map a configuration value into a Java object:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile 配置带有以下内置转换器，以将配置值映射为 Java 对象：
- en: '`boolean` and `java.lang.Boolean`; the values for true are `true`, `1`, `YES`,
    `Y`, and `ON`, while any other value is considered `false`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean` 和 `java.lang.Boolean`；true 的值为 `true`、`1`、`YES`、`Y` 和 `ON`，其他任何值都被视为
    `false`'
- en: '`byte` and `java.lang.Byte`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte` 和 `java.lang.Byte`'
- en: '`short` and `java.lang.Short`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short` 和 `java.lang.Short`'
- en: '`int` and `java.lang.Integer`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int` 和 `java.lang.Integer`'
- en: '`long` and `java.lang.Long`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long` 和 `java.lang.Long`'
- en: '`float` and `java.lang.Float`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float` 和 `java.lang.Float`'
- en: '`double` and `java.lang.Double`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double` 和 `java.lang.Double`'
- en: '`char` and `java.lang.Character`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char` 和 `java.lang.Character`'
- en: '`java.lang.Class` based on the result of the call of `Class.forName`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于调用 `Class.forName` 的结果的 `java.lang.Class`
- en: 'If a built-in converter or custom converter does not exist, then the following
    methods are checked in the target object. If a built-in converter or custom converter
    *does* exist, the discovered/found method is used to instantiate the converter
    object and the string argument is passed for conversion:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在内置转换器或自定义转换器，则在目标对象中检查以下方法。如果存在内置转换器或自定义转换器，则使用找到的方法实例化转换器对象，并将字符串参数传递进行转换：
- en: Target type has `public static T of(String)` method
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型具有 `public static T of(String)` 方法
- en: Target type has `public static T valueOf(String)` method
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型具有 `public static T valueOf(String)` 方法
- en: Target type has public constructor with a `String` parameter
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型具有带有 `String` 参数的公共构造函数
- en: Target type has `public static T parse(CharSequence)` method
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型具有 `public static T parse(CharSequence)` 方法
- en: 4.2 Accessing Configuration Properties Programmatically
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.2 以编程方式访问配置属性
- en: Problem
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to access configuration properties programmatically instead of injecting
    them using the `org.eclipse.microprofile.config.inject.ConfigProperty` annotation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望以编程方式访问配置属性，而不是使用 `org.eclipse.microprofile.config.inject.ConfigProperty`
    注解进行注入。
- en: Solution
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Inject the `org.eclipse.microprofile.config.Config` class in the object for
    which you want to access properties programmatically.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在您希望以编程方式访问属性的对象中注入 `org.eclipse.microprofile.config.Config` 类。
- en: The Eclipse MicroProfile Configuration spec allows you to inject `org.eclipse.microprofile.config.Config`
    to get properties programmatically instead of injecting directly with `ConfigProperty`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile 配置规范允许您注入 `org.eclipse.microprofile.config.Config` 以便以编程方式获取属性，而不是直接使用
    `ConfigProperty` 进行注入。
- en: 'Open `org.acme.quickstart.GreetingResource.java` and inject `Config` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `org.acme.quickstart.GreetingResource.java` 并注入 `Config` 类：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_configuration_CO4-1)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO4-1)'
- en: Use `Inject` CDI annotation to inject the instance
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Inject` CDI 注解来注入实例
- en: '[![2](Images/2.png)](#co_configuration_CO4-2)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO4-2)'
- en: You can now access the list of properties
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以访问属性列表
- en: '[![3](Images/3.png)](#co_configuration_CO4-3)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO4-3)'
- en: Property needs to be cast to final type
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 需要将属性转换为最终类型
- en: You can access the `Config` class without using CDI by calling `ConfigProvider.getConfig()`
    method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用 `ConfigProvider.getConfig()` 方法访问 `Config` 类，而无需使用 CDI。
- en: 4.3 Overwriting Configuration Values Externally
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.3 在外部覆盖配置值
- en: Problem
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to overwrite any configuration value at runtime.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在运行时覆盖任何配置值。
- en: Solution
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You can overwrite any property at runtime by setting it as a system property
    or environment variable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将其设置为系统属性或环境变量来在运行时覆盖任何属性。
- en: Quarkus lets you overwrite any configuration property by setting a configuration
    as a system property (`-Dproperty.name=value`) and/or as an environment variable
    (`export PROPERTY_NAME=value`). System properties have more priority than environment
    variables.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus允许你通过将配置设置为系统属性（`-Dproperty.name=value`）和/或环境变量（`export PROPERTY_NAME=value`）来覆盖任何配置属性。系统属性比环境变量具有更高的优先级。
- en: Examples of externalizing these properties can be a database URL, username,
    or password because they are known only in the target environment. But you need
    to know that there is a trade-off because the more runtime properties are available,
    the less build time prework Quarkus can do.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 外部化这些属性的示例可以是数据库URL、用户名或密码，因为它们仅在目标环境中知道。但是你需要知道这是一种权衡，因为可用的运行时属性越多，Quarkus能够执行的构建时间预处理就越少。
- en: 'Let’s package the application used in [Recipe 4.1](#config-app-with-cust-properties)
    and override the `greeting.message` property by setting a system property:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对[配方 4.1](#config-app-with-cust-properties)中使用的应用程序进行打包，并通过设置系统属性覆盖`greeting.message`属性：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In a new terminal window, validate that the property has been overridden from
    `Hello World` to `Aloha` by running:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的终端窗口中运行以下命令验证属性已从`Hello World`覆盖为`Aloha`：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the case of environment variables, three naming conventions for a given
    property name are supported. This is because some operating systems allow only
    alphabetic characters and underscores (`_`) but no other characters, like dots
    (`.`). To support all possible cases, the following rules are used:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于环境变量，针对给定属性名称支持三种命名约定。这是因为一些操作系统只允许字母字符和下划线(`_`），而不允许其他字符，如点(`.`）。为了支持所有可能的情况，使用以下规则：
- en: Exactly match (`greeting.message`).
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全匹配（`greeting.message`）。
- en: Replace nonalphanumeric characters to underscore (`greeting_message`).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将非字母数字字符替换为下划线（`greeting_message`）。
- en: Replace nonalphanumeric characters to underscore and convert the rest to upper
    case (`GREETING_MESSAGE`).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将非字母数字字符替换为下划线，并将其余字符转换为大写（`GREETING_MESSAGE`）。
- en: 'Here is the *application.properties* file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*application.properties*文件：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can override its value using any of the following environment variable
    names because all of them are equivalent:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下任何环境变量名称来覆盖其值，因为它们都是等效的：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is also a special place where you can put the *application.properties*
    file outside the application itself, inside a directory named *config* where the
    application runs. Any runtime properties defined in that file will override the
    default configuration.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个特殊的地方，你可以将*application.properties*文件放在应用程序之外，放在一个名为*config*的目录内，该目录位于应用程序运行的地方。该文件中定义的任何运行时属性都将覆盖默认配置。
- en: Important
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要提示
- en: '*config/application.properties* works in development mode as well, but you
    need to add it on your build tool output directory to make it work (in case of
    the Maven, the *target* directory; in case of Gradle, *build*), so you need to
    be aware of the need to re-create it when running the `clean` task.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*config/application.properties*也适用于开发模式，但是您需要将其添加到构建工具的输出目录才能使其正常工作（在Maven的情况下，是*target*目录；在Gradle的情况下，是*build*），因此您需要注意在运行`clean`任务时重新创建它的需要。'
- en: Apart from environment variables and the *application.properties* file, you
    can also place a *.env* file in the current working directory to override configuration
    values, following the environment variables format (`GREETING_MESSAGE=Aloha`).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了环境变量和*application.properties*文件之外，您还可以将*.env*文件放在当前工作目录中，以覆盖配置值，遵循环境变量格式（`GREETING_MESSAGE=Aloha`）。
- en: 4.4 Configuring with Profiles
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.4 配置与配置文件
- en: Problem
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to overwrite configuration values depending on the environment in which
    you are running Quarkus.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望根据运行Quarkus的环境覆盖配置值。
- en: Solution
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus supports the notion of configuration profiles. These allow you to have
    multiple configuration values for the same property in the same file and enable
    different values to suit the environment in which you are running the service.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus支持配置文件的概念。这允许您在同一文件中为同一属性具有多个配置值，并使不同的值适合您正在运行服务的环境。
- en: The syntax for configuration profiles is `%{profile}.config.key=value`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的语法是`%{profile}.config.key=value`。
- en: Discuss
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Quarkus comes with three built-in profiles.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus带有三个内置配置文件。
- en: dev
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Activated when in development mode (i.e., `quarkus:dev`).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: test
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Activated when running tests.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: prod
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The default profile when not running in development or test mode; you don’t
    need to set it in *application.properties*, as it is implicitly set.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* file and set to start Quarkus
    at port 8181 in development mode:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After this change, start the service to again check that the listening port
    is 8181 instead of the default one (8080):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that now the listening address is [*http://0.0.0.0:8181*](http://0.0.0.0:8181)
    instead of the default one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Finally, rollback to 8080 port, remove `%dev.quarkus.http.port=8181` line in
    *application.properties* to align with the port that is used in the rest of the
    book.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 Changing Logger Configuration
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to change the default logging configuration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus uses a unified configuration model in which all configuration properties
    are placed in the same file. In the case of Quarkus, this file is *application.properties*,
    and you can configure many aspects of logging there.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to change the logging level, you just set `quarkus.log.level`
    to the minimum log level.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Open *src/main/resources/application.properties* and add the following content:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now start the application to see that a lot of new logging messages are printed
    in the console:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We had to span multiple lines for formatting in the book; we have used the backslash
    to indicate this.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also enable storing logs in a file by using `quarkus.log.file.enable`
    property. The output is written by default to a file named *quarkus.log*:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While you are in development and working out of the source directory, your logging
    file will be in *target* directory.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 Adding Application Logs
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to add log lines to your application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time, your applications need to write their own logging messages
    and not rely solely on the default logs provided by Quarkus. Applications may
    use any of the supported APIs for logging, and the logs will be merged.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarkus supports these logging libraries:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: JDK java.util.logging
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss logging
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Commons Logging
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see how to use `JBoss Logging` to log content. Open `org.acme.quickstart.GreetingResource.java`
    and log a message when an special endpoint is called:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](Images/1.png)](#co_configuration_CO5-1)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Creates the logger instance
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_configuration_CO5-2)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint subpath is */log*
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_configuration_CO5-3)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Logs at `info` level
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Now start the application:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In a new terminal, window make a request to `/hello/log`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you inspect the terminal where you started Quarkus, you’ll see the next
    logline:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Discussion
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logging is done on a per-category basis. A configuration that applies to a category
    also applies to all subcategories of that category, unless there is a more specific
    matching subcategory configuration.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Categories are represented by class location (i.e., the package, or subpackages,
    where they are defined). For example, if you want to set Undertow security logging
    to trace level, you need to set the `quarkus.log.category."io.undertow.request.security".level=TRACE`
    property in *application.properties*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 分类由类的位置表示（即定义它们的包或子包）。例如，如果要将Undertow安全日志设置为跟踪级别，需要在*application.properties*中设置`quarkus.log.category."io.undertow.request.security".level=TRACE`属性。
- en: 'Following the previous example, let’s restrict log lines from classes residing
    in `org.acme.quickstart` (and subclasses) so the minimum log level is `WARNING`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随前面的示例，让我们限制来自`org.acme.quickstart`包（及其子类）的日志行，以确保最低日志级别为`WARNING`：
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](Images/1.png)](#co_configuration_CO6-1)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO6-1)'
- en: Double quotes are mandatory to set the category
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 引号是设置类别的必需部分
- en: If you repeat the request to [*http://localhost:8080/hello/log*](http://localhost:8080/hello/log),
    logline is no longer written down.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重复请求[*http://localhost:8080/hello/log*](http://localhost:8080/hello/log)，则日志行不再被记录。
- en: 4.7 Advanced Logging
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.7 高级日志
- en: Problem
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to centrally log all your services.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望将所有服务的日志集中记录。
- en: Solution
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: When working with microservice architectures and Kubernetes, logging is an important
    thing to take into consideration because each service is logging individually;
    but as a developer or operator, you might want to have all the logs centralized
    in one place so they can be consumed as a whole.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理微服务架构和Kubernetes时，日志记录是需要考虑的重要事项，因为每个服务都会单独记录日志；但作为开发人员或操作员，您可能希望将所有日志集中到一个位置，以便作为整体使用。
- en: Quarkus logging also supports JSON and GELF output.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus日志还支持JSON和GELF输出。
- en: 'These logs can be written in JSON format instead of plain text for machine
    processing by registering the `logging-json` extension:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志可以以JSON格式而不是纯文本形式编写，以供通过注册`logging-json`扩展进行机器处理：
- en: '[PRE26]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Use the GELF extension to produce logs in GELF format and send them using either
    TCP or UDP.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GELF扩展以生成GELF格式的日志，并使用TCP或UDP发送它们。
- en: '*Graylog extended log format* (GELF) is understood by three of the most centralized
    logs systems that are used nowadays:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*Graylog扩展日志格式*（GELF）现在被三个最常用的集中式日志系统所支持：'
- en: Graylog (MongoDB, Elasticsearch, Graylog)
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Graylog（MongoDB，Elasticsearch，Graylog）
- en: ELK (Elasticsearch, Logstash, Kibana)
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK（Elasticsearch，Logstash，Kibana）
- en: EFK (Elasticsearch, Fluentd, Kibana)
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EFK（Elasticsearch，Fluentd，Kibana）
- en: 'To start logging in GELF format, all you need to do is add the `logging-gelf`
    extension:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始以GELF格式记录日志，您只需添加`logging-gelf`扩展即可：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Logging code is not changing, so the same interfaces are used:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 日志代码不会更改，因此仍使用相同的接口：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](Images/1.png)](#co_configuration_CO7-1)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO7-1)'
- en: Creates the logger instance
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 创建记录器实例
- en: '[![2](Images/2.png)](#co_configuration_CO7-2)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO7-2)'
- en: Endpoint subpath is */log*
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 终端子路径为*/log*
- en: '[![3](Images/3.png)](#co_configuration_CO7-3)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO7-3)'
- en: Logs at `info` level
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`info`级别的日志'
- en: 'The GELF handler must be configured in *application.properties*:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在*application.properties*中配置GELF处理程序：
- en: '[PRE29]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](Images/1.png)](#co_configuration_CO8-1)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO8-1)'
- en: Enables extension
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 启用扩展
- en: '[![2](Images/2.png)](#co_configuration_CO8-2)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO8-2)'
- en: Sets host where log messages are sent
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 设置发送日志消息的主机
- en: '[![3](Images/3.png)](#co_configuration_CO8-3)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO8-3)'
- en: Sets the endpoint port
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 设置端点端口
- en: Important
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要
- en: 'If you are using Logstash (ELK), you need to enable the Input plug-in that
    understands the GELF format:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Logstash（ELK），则需要启用能够理解GELF格式的输入插件：
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Important
  id: totrans-211
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要
- en: 'If you are using Fluentd (EFK), you need to enable the Input plug-in that understands
    the GELF format:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Fluentd（EFK），则需要启用能够理解GELF格式的输入插件：
- en: '[PRE31]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Discussion
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Quarkus logging also supports syslog format by default without the requirement
    of adding any extension. Syslog format can be used in Fluentd as an alternative
    to GELF format in Quarkus:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus日志还通过默认支持syslog格式，无需添加任何扩展。在Fluentd中，syslog格式可用作Quarkus中GELF格式的替代：
- en: '[PRE32]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Important
  id: totrans-217
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 重要
- en: 'You need to enable the Input plug-in that understands the syslog format in
    Fluentd:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要启用能够理解Fluentd中syslog格式的输入插件：
- en: '[PRE33]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If you are using Kubernetes, the simplest way to log is to log to the console
    and install into the cluster a central log manager that collects all log lines.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Kubernetes，最简单的日志记录方式是记录到控制台，并在集群中安装一个中央日志管理器以收集所有日志行。
- en: See Also
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about advanced logging topics, visit the following website:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多高级日志主题，请访问以下网站：
- en: '[Logstash/Gelf Loggers](https://oreil.ly/Mj9Ha)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Logstash/Gelf记录器](https://oreil.ly/Mj9Ha)'
- en: 4.8 Configuring with Custom Profiles
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.8 使用自定义配置文件配置
- en: Problem
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to set different configuration values for the custom profiles you’ve
    created.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望为您创建的自定义配置文件设置不同的配置值。
- en: Solution
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: So far, you’ve seen that Quarkus comes with built-in profiles so that you can
    set different configuration values for the same property and enable them to suit
    the environment. But with Quarkus, you can also set your own profiles.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经看到Quarkus具有内置的配置文件，因此您可以为同一属性设置不同的配置值，并使它们适应环境。但是，使用Quarkus，您也可以设置自己的配置文件。
- en: The only thing you need to do is specify which profile you want to enable by
    either using the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment
    variable. If both are set, the system property takes precedence over the environment
    variable.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您唯一需要做的就是指定要启用的配置文件，要么使用`quarkus.profile`系统属性，要么使用`QUARKUS_PROFILE`环境变量。如果两者都设置了，系统属性优先于环境变量。
- en: Then the only thing you need to do is create the property with the profile name
    and set the current profile to that name. Let’s create a new *staging* profile
    that overwrites the listening port of Quarkus.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要做的唯一一件事是创建带有配置文件名的属性，并将当前配置文件设置为该名称。让我们创建一个名为*staging*的新配置文件，该配置文件将覆盖Quarkus的侦听端口。
- en: 'Open *src/main/resources/application.properties* file and set to start Quarkus
    at port 8182 when the `staging` profile is enabled:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*src/main/resources/application.properties*文件，并设置在启用`staging`配置文件时将Quarkus启动到端口8182：
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then start the application with `staging` profile enabled:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`staging`配置文件启动应用程序：
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this case, the system property approach is used, but you could also set it
    using the `QUARKUS_PROFILE` environment variable.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用系统属性方法，但您也可以使用`QUARKUS_PROFILE`环境变量设置它。
- en: Discussion
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'If you want to set the running profile in tests, you only need to set the `quarkus.test.profile`
    system property to the given profile in your build script—for example, in Maven:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在测试中设置运行配置文件，则只需要在构建脚本中将`quarkus.test.profile`系统属性设置为给定配置文件即可，例如，在Maven中：
- en: '[PRE36]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'or, in Gradle:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在Gradle中：
- en: '[PRE37]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Also, you can change the default production profile. The built-in profile in
    Quarkus is `prod`, so when you are running your application without any profile,
    this is the default one where the values are taken. But you can change that at
    build time so that, without specifying any profile, your profile is the default
    one when the application is running.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您可以更改默认的生产配置文件。Quarkus中内置的配置文件是`prod`，因此当您在不指定任何配置文件的情况下运行应用程序时，这是默认配置文件，其中包含的值被使用。但是，您可以在构建时更改该配置文件，以便在应用程序运行时不指定任何配置文件时，您的配置文件是默认配置文件。
- en: 'The only thing you need to do is build the application using the `quarkus.profile`
    system property with the profile value you want set as the default:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的唯一一件事是使用`quarkus.profile`系统属性构建应用程序，并将要设置为默认值的配置文件命名为配置文件值：
- en: '[PRE38]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](Images/1.png)](#co_configuration_CO9-1)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO9-1)'
- en: The command will run with the `prod-kubernetes` profile enabled by default
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，该命令将使用`prod-kubernetes`配置文件启用
- en: 4.9 Creating Custom Sources
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.9 创建自定义源
- en: Problem
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to load configuration parameters from any other source instead of/apart
    from *application.properties* file.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望从除*application.properties*文件之外的任何其他源加载配置参数。
- en: Solution
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus uses the Eclipse MicroProfile Configuration spec to implement all the
    logic regarding configuration. The specification offers `o⁠r⁠g⁠.⁠e⁠c⁠l⁠i⁠p⁠s⁠e⁠.⁠m⁠i⁠c⁠r⁠o⁠p⁠r⁠o⁠f⁠i⁠l⁠e​.⁠c⁠o⁠n⁠f⁠i⁠g⁠.⁠s⁠p⁠i⁠.⁠C⁠o⁠n⁠f⁠i⁠g⁠S⁠o⁠u⁠r⁠c⁠e`
    [Java SPI](https://oreil.ly/o0A51) interface to implement a custom way to load
    configuration properties instead of/apart from the default one provided by Quarkus.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus使用Eclipse MicroProfile Configuration规范来实现有关配置的所有逻辑。该规范提供了`org.eclipse.microprofile.config.spi.ConfigSource`
    [Java SPI](https://oreil.ly/o0A51) 接口，用于实现一种自定义加载配置属性的方式，而不是使用Quarkus提供的默认方式。
- en: For example, you could load configuration properties from a database, an XML
    file, or a REST API.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以从数据库、XML文件或REST API加载配置属性。
- en: 'Let’s create a simple *in-memory config source* that gets configuration properties
    from `Map` populated at instantiation time. Create a new class called `org.acme.quickstart.InMemoryConfigSource.java`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的*内存配置源*，该源在实例化时从`Map`中获取配置属性。创建一个名为`org.acme.quickstart.InMemoryConfigSource.java`的新类：
- en: '[PRE39]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](Images/1.png)](#co_configuration_CO10-1)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO10-1)'
- en: Populates map with a property
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 用属性填充映射
- en: '[![2](Images/2.png)](#co_configuration_CO10-2)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO10-2)'
- en: Used to determine the importance of the values; the highest ordinal takes precedence
    over the lower-priority ordinal
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定值的重要性；最高的序数优先于优先级较低的序数
- en: '[![3](Images/3.png)](#co_configuration_CO10-3)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO10-3)'
- en: Gets all properties as `Map`; in this case it is direct
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有属性作为 `Map`；在这种情况下，它是直接的
- en: '[![4](Images/4.png)](#co_configuration_CO10-4)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_configuration_CO10-4)'
- en: Gets the value for a single property
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 获取单个属性的值
- en: '[![5](Images/5.png)](#co_configuration_CO10-5)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_configuration_CO10-5)'
- en: Returns the name of this config source
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此配置源的名称
- en: 'Then you need to register this as a Java SPI. Create the *services* folder
    at *src/main/resources/META-INF*. Next, create a file inside *services* named
    *org.eclipse.microprofile.config.spi.ConfigSource* with the following content:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要将其注册为 Java SPI。在 *src/main/resources/META-INF* 下创建 *services* 文件夹。接下来，在
    *services* 文件夹内创建一个名为 *org.eclipse.microprofile.config.spi.ConfigSource* 的文件，其内容如下：
- en: '[PRE40]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, you can modify the `org.acme.quickstart.GreetingResource.java` class
    to inject this property:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以修改 `org.acme.quickstart.GreetingResource.java` 类来注入这个属性：
- en: '[PRE41]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[![1](Images/1.png)](#co_configuration_CO11-1)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO11-1)'
- en: Inject the value of the property defined in the `InMemoryConfigSource`
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 注入在 `InMemoryConfigSource` 中定义的属性值
- en: 'And in a terminal window make a request to `/hello/color` to see that the output
    message is the configured value in the custom source:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在终端窗口中对 `/hello/color` 发出请求，以查看输出消息是否为自定义源中配置的值：
- en: '[PRE42]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Discussion
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'Each `ConfigSource` has a specified ordinal, which is used to set the importance
    of the values taken from the `ConfigSource` in the case of multiple config sources
    defined for the same application. A higher ordinal `ConfigSource` is used over
    a `ConfigSource` with a lower value. Using the defaults in the following list
    as a reference, a system property will be used over everything, and the *application.properties*
    file in the *src/main/resources* directory will be used if no other `ConfigSources`
    are found:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `ConfigSource` 都有一个指定的序数，用于在同一应用程序中对多个配置源定义的情况下设置值的重要性。如果有多个 `ConfigSource`，则使用较高的序数
    `ConfigSource` 而不是具有较低值的 `ConfigSource`。使用以下列表中的默认值作为参考，系统属性将优先于一切，如果没有找到其他 `ConfigSources`，则使用
    *src/main/resources* 目录中的 *application.properties* 文件：
- en: System properties to 400
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将系统属性设为 400
- en: Environment variables to 300
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将环境变量设为 300
- en: '*application.properties* at *config* directory to 260'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*config* 目录下的 *application.properties* 至 260'
- en: '*application.properties* at project to 250'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目中的 *application.properties* 至 250
- en: 4.10 Creating Custom Converters
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.10 创建自定义转换器
- en: Problem
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to implement a custom converter.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要实现一个自定义转换器。
- en: Solution
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You can convert a property from `String` to any kind of object by implementing
    the `org.eclipse.microprofile.config.spi.Converter` Java SPI.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过实现 `org.eclipse.microprofile.config.spi.Converter` Java SPI 将属性从 `String`
    转换为任何类型的对象。
- en: Quarkus uses the Eclipse MicroProfile Configuration spec to implement all the
    logic regarding configuration. The specification offers the `org.eclipse.microprofile.config.spi.Converter`
    [Java SPI](https://oreil.ly/kcqQw) interface to implement the conversion of configuration
    values to a custom type.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 使用 Eclipse MicroProfile Configuration 规范来实现所有关于配置的逻辑。该规范提供了 `org.eclipse.microprofile.config.spi.Converter`
    [Java SPI](https://oreil.ly/kcqQw) 接口，用于将配置值转换为自定义类型。
- en: For example, you could transform a percentage value (i.e., 15%) to a `Percentage`
    type, wrapping the percentage as `double` type.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以将百分比值（即，15%）转换为 `Percentage` 类型，将百分比包装为 `double` 类型。
- en: 'Create a new POJO class `org.acme.quickstart.Percentage.java`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 POJO 类 `org.acme.quickstart.Percentage.java`：
- en: '[PRE43]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And then create a class `org.acme.quickstart.PercentageConverter.java` that
    converts from `String` representation to `Percentage`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个名为 `org.acme.quickstart.PercentageConverter.java` 的类，将 `String` 表示转换为
    `Percentage`：
- en: '[PRE44]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](Images/1.png)](#co_configuration_CO12-1)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO12-1)'
- en: Sets the priority; in this specific case it might be optional
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 设置优先级；在这种特定情况下可能是可选的
- en: '[![2](Images/2.png)](#co_configuration_CO12-2)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO12-2)'
- en: Generic type that sets the type to convert to
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型类型，将其类型设置为要转换的类型
- en: 'Then you need to register this as a Java SPI. Create the *services* folder
    at *src/main/resources/META-INF*. Next, create a file inside the *services* folder
    named *org.eclipse.microprofile.config.spi.Converter* with the following content:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要将其注册为 Java SPI。在 *src/main/resources/META-INF/services* 下创建 *services*
    文件夹。接下来，在 *services* 文件夹内创建一个名为 *org.eclipse.microprofile.config.spi.Converter*
    的文件，其内容如下：
- en: '[PRE45]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, you can modify the `org.acme.quickstart.GreetingResource.java` class
    to inject this property:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以修改 `org.acme.quickstart.GreetingResource.java` 类以注入此属性：
- en: '[PRE46]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Lastly, you will need to add a new property into the *application.properties*
    file in your *src/main/resources* directory:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要在 *src/main/resources* 目录中的 *application.properties* 文件中添加一个新属性：
- en: '[PRE47]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And in a terminal window, make a request to `/hello/vat` to see that the output
    message is the transformed vat as double:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在终端窗口中，发出请求 `/hello/vat`，以查看输出消息是否将增值税转换为双倍：
- en: '[PRE48]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Discussion
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: By default, if no `@Priority` annotation can be found on a converter, it is
    registered with a priority of 100. Quarkus converters are registered with a priority
    of 200, so if you want to replace a Quarkus converter, you should use a higher
    value; if you don’t need to replace a Quarkus converter, then the default one
    is perfectly fine.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果在转换器上找不到 `@Priority` 注释，则将其注册为优先级为 100。Quarkus 转换器注册为优先级 200，因此如果要替换
    Quarkus 转换器，应使用更高的值；如果不需要替换 Quarkus 转换器，则默认转换器完全合适。
- en: A list of Quarkus core converters has been shown in [Recipe 4.1](#config-app-with-cust-properties).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[Recipe 4.1](#config-app-with-cust-properties) 中展示了一些 Quarkus 核心转换器的列表。'
- en: 4.11 Grouping Configuration Values
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.11 分组配置值
- en: Problem
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to avoid setting the common prefix of a configuration property over
    and over again.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望避免一遍又一遍地设置配置属性的公共前缀。
- en: Solution
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: You can group common properties (those with the same prefix) using the `@⁠i⁠o​.⁠q⁠u⁠a⁠r⁠k⁠u⁠s⁠.⁠a⁠r⁠c⁠.⁠c⁠o⁠n⁠f⁠i⁠g⁠.⁠C⁠o⁠n⁠f⁠i⁠g⁠P⁠r⁠o⁠p⁠e⁠r⁠t⁠i⁠e⁠s`
    annotation.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `@⁠i⁠o​.⁠q⁠u⁠a⁠r⁠k⁠u⁠s⁠.⁠a⁠r⁠c⁠.⁠c⁠o⁠n⁠f⁠i⁠g⁠.⁠C⁠o⁠n⁠f⁠i⁠g⁠P⁠r⁠o⁠p⁠e⁠r⁠t⁠i⁠e⁠s`
    注释来分组共同的属性（具有相同的前缀）。
- en: When you are creating ad hoc configuration properties in your application, typically
    these properties will have the same prefix (i.e., `greetings`). To inject all
    these properties, you can use the `@ConfigProperty` annotation (as shown in [Recipe
    4.1](#config-app-with-cust-properties)), or you can use the `io.quarkus.arc.config.ConfigProperties`
    annotation to group properties together.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中创建临时配置属性时，通常这些属性将具有相同的前缀（即 `greetings`）。要注入所有这些属性，您可以使用 `@ConfigProperty`
    注释（如 [Recipe 4.1](#config-app-with-cust-properties) 中所示），或者您可以使用 `io.quarkus.arc.config.ConfigProperties`
    注释将属性组合在一起。
- en: 'Using the *application.properties* file:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *application.properties* 文件：
- en: '[PRE49]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'let’s implement a class that maps the configuration properties into Java objects
    using the `io.quarkus.arc.config.ConfigProperties` annotation. Create a new class
    `org.acme.quickstart.GreetingConfiguration.java`:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个类，使用 `io.quarkus.arc.config.ConfigProperties` 注释将配置属性映射到 Java 对象中。创建一个新类
    `org.acme.quickstart.GreetingConfiguration.java`：
- en: '[PRE50]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[![1](Images/1.png)](#co_configuration_CO13-1)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO13-1)'
- en: Sets this as a configuration POJO with a common prefix
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为具有共同前缀的配置 POJO
- en: '[![2](Images/2.png)](#co_configuration_CO13-2)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO13-2)'
- en: Maps the `greeting.message` property
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 映射 `greeting.message` 属性
- en: '[![3](Images/3.png)](#co_configuration_CO13-3)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_configuration_CO13-3)'
- en: The default value for `greeting.suffix` in case the property is not set
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未设置该属性，则 `greeting.suffix` 的默认值
- en: One of the important things to notice in the preceding code is that the `prefix`
    attribute is not mandatory. If it is not set, then the prefix to be used will
    be determined by the class name (removing the suffix part `Configuration`). In
    this case, the `prefix` attribute could be auto-resolved to `greeting`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中需要注意的一点是，`prefix` 属性并非强制性。如果未设置，那么将由类名（去除 `Configuration` 后缀部分）确定要使用的前缀。在这种情况下，`prefix`
    属性可以自动解析为 `greeting`。
- en: Then you can inject this configuration POJO to start consuming the configuration
    values.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以注入此配置 POJO 开始使用配置值。
- en: 'You can modify the `org.acme.quickstart.GreetingResource.java` class to inject
    this class:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以修改 `org.acme.quickstart.GreetingResource.java` 类以注入此类：
- en: '[PRE51]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[![1](Images/1.png)](#co_configuration_CO14-1)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO14-1)'
- en: The configuration is injected with the CDI `@Inject` annotation
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 配置通过 CDI `@Inject` 注释注入
- en: 'And in a terminal window make a request to `/hello/configurations` to see that
    the configuration values are populated inside Java, for instance:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在终端窗口中，发出请求 `/hello/configurations`，以查看配置值在 Java 内部被填充，例如：
- en: '[PRE52]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: As you can now see, you don’t need to annotate every field by using `@ConfigProperty`—you
    just leverage the class definition to get the property name or the default value.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您现在所看到的，您无需通过使用 `@ConfigProperty` 注释每个字段，只需利用类定义即可获取属性名称或默认值。
- en: Discussion
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Furthermore, Quarkus supports nested object configuration so that you can also
    map subcategories by using inner classes.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Quarkus支持嵌套对象配置，因此您也可以使用内部类映射子类别。
- en: 'Suppose we add a new property named `greeting.output.recipients` in *application.properties*:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在*application.properties*中添加了一个名为`greeting.output.recipients`的新属性：
- en: '[PRE53]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You could use an inner class to map it into the configuration object. Modify
    the class `org.acme.quickstart.GreetingConfiguration.java`. Then add a new inner
    class representing the subcategory `output` and register it as a field:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用内部类将其映射到配置对象中。修改`org.acme.quickstart.GreetingConfiguration.java`类。然后添加一个代表子类别`output`的新内部类，并将其注册为字段：
- en: '[PRE54]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[![1](Images/1.png)](#co_configuration_CO15-1)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO15-1)'
- en: Name of the subcategory is the field name (`output`)
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 子类别的名称是字段名称（`output`）
- en: Then you can access the `greetingConfiguration.output.recipients` field to get
    the value. You can also annotate the fields with Bean Validation annotations to
    validate at start-up time that all configuration values are valid. If they are
    not valid, the application will fail to start and will indicate the validation
    errors in the log.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以访问`greetingConfiguration.output.recipients`字段以获取该值。您还可以使用Bean Validation注解对字段进行注释，以验证所有配置值在启动时是否有效。如果它们无效，应用程序将无法启动，并将在日志中指示验证错误。
- en: 4.12 Validating Configuration Values
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.12 验证配置数值
- en: Problem
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to validate that configuration values are correct.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望验证配置数值是否正确。
- en: Solution
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the Bean Validation specification to validate that a property value is valid
    when it is injected using the `@ConfigProperty` annotation on a class.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bean Validation规范验证通过`@ConfigProperty`注解注入的属性值是否有效。
- en: The Bean Validation spec allows you to set constraints on objects using annotations.
    Quarkus integrates the Eclipse MicroProfile Configuration spec with the Bean Validation
    spec so you can use them together to validate that a configuration value meets
    certain criteria. This verification is executed at boot time, and if there is
    any violation, an error message is shown in the console and the boot process is
    aborted.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: Bean Validation规范允许您使用注解在对象上设置约束。Quarkus将Eclipse MicroProfile配置规范与Bean Validation规范集成在一起，因此您可以一起使用它们验证配置值是否符合某些标准。此验证在启动时执行，如果有任何违规，控制台将显示错误消息，并且启动过程将中止。
- en: 'The first thing you need to do is to register the *Quarkus Bean Validation*
    dependency. You can do it manually by editing your *pom.xml* or by running the
    next Maven command from the root directory of the project:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要注册*Quarkus Bean Validation*依赖项。您可以通过手动编辑*pom.xml*或从项目根目录运行下一个Maven命令来执行此操作：
- en: '[PRE55]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: After that, you will need to create a configuration object, which you learned
    about in the previous recipe. In the next example, a constraint on the `greeting.repeat`
    configuration property is set so that repetitions outside of the range 1–3 inclusive
    cannot be set.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您需要创建一个配置对象，这是您在前一篇章节学到的。在下一个示例中，设置对`greeting.repeat`配置属性的约束，以便不能设置超出1到3范围之外的重复次数。
- en: 'To validate integer range, the following Bean Validation annotations are used:
    `j⁠a⁠v⁠a⁠x​.⁠v⁠a⁠l⁠i⁠d⁠a⁠t⁠i⁠o⁠n⁠.⁠c⁠o⁠n⁠s⁠t⁠r⁠a⁠i⁠n⁠t⁠s⁠.⁠M⁠a⁠x` and `javax.validation.constraints.Min`.
    Open `org.acme.quickstart.GreetingConfiguration.java` and add Bean Validation
    annotations:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证整数范围，使用以下Bean Validation注解：`j⁠a⁠v⁠a⁠x​.⁠v⁠a⁠l⁠i⁠d⁠a⁠t⁠i⁠o⁠n⁠.⁠c⁠o⁠n⁠s⁠t⁠r⁠a⁠i⁠n⁠t⁠s⁠.⁠M⁠a⁠x`
    和 `javax.validation.constraints.Min`。打开`org.acme.quickstart.GreetingConfiguration.java`并添加Bean
    Validation注解：
- en: '[PRE56]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[![1](Images/1.png)](#co_configuration_CO16-1)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_configuration_CO16-1)'
- en: Min value accepted
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 最小接受值
- en: '[![2](Images/2.png)](#co_configuration_CO16-2)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_configuration_CO16-2)'
- en: Max value accepted
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 最大接受值
- en: 'Open *src/main/resources/application.properties* file and set the `greeting.repeat`
    configuration property to 7:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 打开*src/main/resources/application.properties*文件，并将`greeting.repeat`配置属性设置为7：
- en: '[PRE57]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Start the application, and you’ll see an error message notifying that a configuration
    value is violating one of the defined constraints:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序，您将看到一个错误消息，通知某个配置值违反了定义的约束之一：
- en: '[PRE58]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Discussion
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: In this example, you’ve seen a brief introduction to Bean Validation specification,
    as well as some annotations you can use to validate fields. However, more constraints
    are supported by Hibernate Validation and the Bean Validation implementation used,
    such as `@Digits`, `@Email`, `@NotNull`, and `@NotBlank`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
