["```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.rsocket.RSocketRequester;\n\n@Configuration\npublic class RSocketRequesterConfig {\n    @Bean\n    RSocketRequester requester(RSocketRequester.Builder builder) {\n        return builder.tcp(\"localhost\", 7635);\n    }\n}\n```", "```java\npublic PositionController(AircraftRepository repository,\n                          RSocketRequester requester) {\n    this.repository = repository;\n    this.requester = requester;\n}\n```", "```java\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Service\npublic class PositionService {\n    private final AircraftRepository repo;\n    private WebClient client = WebClient.create(\n        \"http://localhost:7634/aircraft\");\n\n    public PositionService(AircraftRepository repo) {\n        this.repo = repo;\n    }\n\n    public Flux<Aircraft> getAllAircraft() {\n        return repo.deleteAll()\n                .thenMany(client.get()\n                        .retrieve()\n                        .bodyToFlux(Aircraft.class)\n                        .filter(plane -> !plane.getReg().isEmpty()))\n                .flatMap(repo::save)\n                .thenMany(repo.findAll());\n    }\n\n    public Mono<Aircraft> getAircraftById(Long id) {\n        return repo.findById(id);\n    }\n\n    public Flux<Aircraft> getAircraftByReg(String reg) {\n        return repo.findAircraftByReg(reg);\n    }\n}\n```", "```java\nimport org.springframework.http.MediaType;\nimport org.springframework.messaging.rsocket.RSocketRequester;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport reactor.core.publisher.Flux;\n\n@Controller\npublic class PositionController {\n    private final PositionService service;\n    private final RSocketRequester requester;\n\n    public PositionController(PositionService service,\n            RSocketRequester requester) {\n        this.service = service;\n        this.requester = requester;\n    }\n\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        model.addAttribute(\"currentPositions\", service.getAllAircraft());\n\n        return \"positions\";\n    }\n\n    @ResponseBody\n    @GetMapping(value = \"/acstream\", produces =\n        MediaType.TEXT_EVENT_STREAM_VALUE)\n    public Flux<Aircraft> getCurrentACPositionsStream() {\n        return requester.route(\"acstream\")\n                .data(\"Requesting aircraft positions\")\n                .retrieveFlux(Aircraft.class);\n    }\n}\n```", "```java\n@ResponseBody\n@GetMapping(\"/acpos/search\")\npublic Publisher<Aircraft>\n        searchForACPosition(@RequestParam Map<String, String> searchParams) {\n\n    if (!searchParams.isEmpty()) {\n        Map.Entry<String, String> setToSearch =\n                searchParams.entrySet().iterator().next();\n\n        if (setToSearch.getKey().equalsIgnoreCase(\"id\")) {\n            return service.getAircraftById(Long.valueOf(setToSearch.getValue()));\n        } else {\n            return service.getAircraftByReg(setToSearch.getValue());\n        }\n    } else {\n        return Mono.empty();\n    }\n}\n```", "```java\nimport org.reactivestreams.Publisher;\nimport org.springframework.http.MediaType;\nimport org.springframework.messaging.rsocket.RSocketRequester;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Map;\n\n@Controller\npublic class PositionController {\n    private final PositionService service;\n    private final RSocketRequester requester;\n\n    public PositionController(PositionService service,\n            RSocketRequester requester) {\n        this.service = service;\n        this.requester = requester;\n    }\n\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        model.addAttribute(\"currentPositions\", service.getAllAircraft());\n\n        return \"positions\";\n    }\n\n    @ResponseBody\n    @GetMapping(\"/acpos\")\n    public Flux<Aircraft> getCurrentACPositions() {\n        return service.getAllAircraft();\n    }\n\n    @ResponseBody\n    @GetMapping(\"/acpos/search\")\n    public Publisher<Aircraft> searchForACPosition(@RequestParam Map<String,\n            String> searchParams) {\n\n        if (!searchParams.isEmpty()) {\n            Map.Entry<String, String> setToSearch =\n                searchParams.entrySet().iterator().next();\n\n            if (setToSearch.getKey().equalsIgnoreCase(\"id\")) {\n                return service.getAircraftById(Long.valueOf\n                    (setToSearch.getValue()));\n            } else {\n                return service.getAircraftByReg(setToSearch.getValue());\n            }\n        } else {\n            return Mono.empty();\n        }\n    }\n\n    @ResponseBody\n    @GetMapping(value = \"/acstream\", produces =\n            MediaType.TEXT_EVENT_STREAM_VALUE)\n    public Flux<Aircraft> getCurrentACPositionsStream() {\n        return requester.route(\"acstream\")\n                .data(\"Requesting aircraft positions\")\n                .retrieveFlux(Aircraft.class);\n    }\n}\n```", "```java\nimport org.springframework.data.repository.reactive.ReactiveCrudRepository;\nimport reactor.core.publisher.Flux;\n\npublic interface AircraftRepository extends\n        ReactiveCrudRepository<Aircraft, Long> {\n    Flux<Aircraft> findAircraftByReg(String reg);\n}\n```", "```java\n@WebFluxTest(controllers = {PositionController.class})\nclass PositionControllerTest {\n    @Autowired\n    private WebTestClient client;\n\n    @MockBean\n    private PositionService service;\n    @MockBean\n    private RSocketRequester requester;\n\n    private Aircraft ac1, ac2, ac3;\n\n    ...\n\n}\n```", "```java\n@BeforeEach\nvoid setUp(ApplicationContext context) {\n    // Spring Airlines flight 001 en route, flying STL to SFO,\n    // at 30000' currently over Kansas City\n    ac1 = new Aircraft(1L, \"SAL001\", \"sqwk\", \"N12345\", \"SAL001\",\n            \"STL-SFO\", \"LJ\", \"ct\",\n            30000, 280, 440, 0, 0,\n            39.2979849, -94.71921, 0D, 0D, 0D,\n            true, false,\n            Instant.now(), Instant.now(), Instant.now());\n\n    // Spring Airlines flight 002 en route, flying SFO to STL,\n    // at 40000' currently over Denver\n    ac2 = new Aircraft(2L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n            \"SFO-STL\", \"LJ\", \"ct\",\n            40000, 65, 440, 0, 0,\n            39.8560963, -104.6759263, 0D, 0D, 0D,\n            true, false,\n            Instant.now(), Instant.now(), Instant.now());\n\n    // Spring Airlines flight 002 en route, flying SFO to STL,\n    // at 40000' currently just past DEN\n    ac3 = new Aircraft(3L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n            \"SFO-STL\", \"LJ\", \"ct\",\n            40000, 65, 440, 0, 0,\n            39.8412964, -105.0048267, 0D, 0D, 0D,\n            true, false,\n            Instant.now(), Instant.now(), Instant.now());\n\n    Mockito.when(service.getAllAircraft()).thenReturn(Flux.just(ac1, ac2, ac3));\n    Mockito.when(service.getAircraftById(1L)).thenReturn(Mono.just(ac1));\n    Mockito.when(service.getAircraftById(2L)).thenReturn(Mono.just(ac2));\n    Mockito.when(service.getAircraftById(3L)).thenReturn(Mono.just(ac3));\n    Mockito.when(service.getAircraftByReg(\"N12345\"))\n        .thenReturn(Flux.just(ac1));\n    Mockito.when(service.getAircraftByReg(\"N54321\"))\n        .thenReturn(Flux.just(ac2, ac3));\n}\n```", "```java\n@Test\nvoid getCurrentACPositions() {\n    StepVerifier.create(client.get()\n            .uri(\"/acpos\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n            .returnResult(Aircraft.class)\n            .getResponseBody())\n        .expectNext(ac1)\n        .expectNext(ac2)\n        .expectNext(ac3)\n        .verifyComplete();\n}\n```", "```java\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.4.0)\n\n: Starting PositionControllerTest on mheckler-a01.vmware.com with PID 21211\n: No active profile set, falling back to default profiles: default\n: Started PositionControllerTest in 2.19 seconds (JVM running for 2.879)\n\nProcess finished with exit code 0\n```", "```java\n@Test\nvoid searchForACPositionById() {\n    StepVerifier.create(client.get()\n            .uri(\"/acpos/search?id=1\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n            .returnResult(Aircraft.class)\n            .getResponseBody())\n        .expectNext(ac1)\n        .verifyComplete();\n}\n```", "```java\n@Test\nvoid searchForACPositionByReg() {\n    StepVerifier.create(client.get()\n            .uri(\"/acpos/search?reg=N54321\")\n            .exchange()\n            .expectStatus().isOk()\n            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n            .returnResult(Aircraft.class)\n            .getResponseBody())\n        .expectNext(ac2)\n        .expectNext(ac3)\n        .verifyComplete();\n}\n```", "```java\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.messaging.rsocket.RSocketRequester;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport reactor.test.StepVerifier;\n\nimport java.time.Instant;\n\n@WebFluxTest(controllers = {PositionController.class})\nclass PositionControllerTest {\n    @Autowired\n    private WebTestClient client;\n\n    @MockBean\n    private PositionService service;\n    @MockBean\n    private RSocketRequester requester;\n\n    private Aircraft ac1, ac2, ac3;\n\n    @BeforeEach\n    void setUp() {\n        // Spring Airlines flight 001 en route, flying STL to SFO, at 30000'\n        // currently over Kansas City\n        ac1 = new Aircraft(1L, \"SAL001\", \"sqwk\", \"N12345\", \"SAL001\",\n                \"STL-SFO\", \"LJ\", \"ct\",\n                30000, 280, 440, 0, 0,\n                39.2979849, -94.71921, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        // Spring Airlines flight 002 en route, flying SFO to STL, at 40000'\n        // currently over Denver\n        ac2 = new Aircraft(2L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n                \"SFO-STL\", \"LJ\", \"ct\",\n                40000, 65, 440, 0, 0,\n                39.8560963, -104.6759263, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        // Spring Airlines flight 002 en route, flying SFO to STL, at 40000'\n        // currently just past DEN\n        ac3 = new Aircraft(3L, \"SAL002\", \"sqwk\", \"N54321\", \"SAL002\",\n                \"SFO-STL\", \"LJ\", \"ct\",\n                40000, 65, 440, 0, 0,\n                39.8412964, -105.0048267, 0D, 0D, 0D,\n                true, false,\n                Instant.now(), Instant.now(), Instant.now());\n\n        Mockito.when(service.getAllAircraft())\n                .thenReturn(Flux.just(ac1, ac2, ac3));\n        Mockito.when(service.getAircraftById(1L))\n                .thenReturn(Mono.just(ac1));\n        Mockito.when(service.getAircraftById(2L))\n                .thenReturn(Mono.just(ac2));\n        Mockito.when(service.getAircraftById(3L))\n                .thenReturn(Mono.just(ac3));\n        Mockito.when(service.getAircraftByReg(\"N12345\"))\n                .thenReturn(Flux.just(ac1));\n        Mockito.when(service.getAircraftByReg(\"N54321\"))\n                .thenReturn(Flux.just(ac2, ac3));\n    }\n\n    @AfterEach\n    void tearDown() {\n    }\n\n    @Test\n    void getCurrentACPositions() {\n        StepVerifier.create(client.get()\n                .uri(\"/acpos\")\n                .exchange()\n                .expectStatus().isOk()\n                .expectHeader().contentType(MediaType.APPLICATION_JSON)\n                .returnResult(Aircraft.class)\n                .getResponseBody())\n            .expectNext(ac1)\n            .expectNext(ac2)\n            .expectNext(ac3)\n            .verifyComplete();\n    }\n\n    @Test\n    void searchForACPositionById() {\n        StepVerifier.create(client.get()\n                .uri(\"/acpos/search?id=1\")\n                .exchange()\n                .expectStatus().isOk()\n                .expectHeader().contentType(MediaType.APPLICATION_JSON)\n                .returnResult(Aircraft.class)\n                .getResponseBody())\n            .expectNext(ac1)\n            .verifyComplete();\n    }\n\n    @Test\n    void searchForACPositionByReg() {\n        StepVerifier.create(client.get()\n                .uri(\"/acpos/search?reg=N54321\")\n                .exchange()\n                .expectStatus().isOk()\n                .expectHeader().contentType(MediaType.APPLICATION_JSON)\n                .returnResult(Aircraft.class)\n                .getResponseBody())\n            .expectNext(ac2)\n            .expectNext(ac3)\n            .verifyComplete();\n    }\n}\n```", "```java\nMockito.when(service.getAllAircraft()).thenReturn(Flux.just(ac1, ac2, ac3));\n```", "```java\nMockito.when(service.getAllAircraft()).thenReturn(\n        Flux.just(ac1, ac2, ac3)\n                .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n);\n```", "```java\n500 Server Error for HTTP GET \"/acpos\"\n\njava.lang.Throwable: Bad position report\n\tat com.thehecklers.aircraftpositions.PositionControllerTest\n        .setUp(PositionControllerTest.java:59) ~[test-classes/:na]\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:\nError has been observed at the following site(s):\n\t|_ checkpoint ⇢ Handler com.thehecklers.aircraftpositions\n        .PositionController\n        #getCurrentACPositions() [DispatcherHandler]\n\t|_ checkpoint ⇢ HTTP GET \"/acpos\" [ExceptionHandlingWebHandler]\nStack trace:\n\t\tat com.thehecklers.aircraftpositions.PositionControllerTest\n        .setUp(PositionControllerTest.java:59) ~[test-classes/:na]\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl\n        .invoke0(Native Method) ~[na:na]\n\t\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl\n        .invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl\n        .invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\t\tat java.base/java.lang.reflect.Method\n        .invoke(Method.java:564) ~[na:na]\n\t\tat org.junit.platform.commons.util.ReflectionUtils\n        .invokeMethod(ReflectionUtils.java:686)\n        ~[junit-platform-commons-1.6.2.jar:1.6.2]\n\t\tat org.junit.jupiter.engine.execution.MethodInvocation\n        .proceed(MethodInvocation.java:60)\n                ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n        $ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n        ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.extension.TimeoutExtension\n        .intercept(TimeoutExtension.java:149)\n        ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.extension.TimeoutExtension\n        .interceptLifecycleMethod(TimeoutExtension.java:126)\n        ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.extension.TimeoutExtension\n        .interceptBeforeEachMethod(TimeoutExtension.java:76)\n        ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution\n        .ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod\n          $0(ExecutableInvoker.java:115)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n        .lambda$invoke$0(ExecutableInvoker.java:105)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n        $InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n        .proceed(InvocationInterceptorChain.java:64)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n        .chainAndInvoke(InvocationInterceptorChain.java:45)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n        .invoke(InvocationInterceptorChain.java:37)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n        .invoke(ExecutableInvoker.java:104)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n        .invoke(ExecutableInvoker.java:98)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor\n        .invokeMethodInExtensionContext(ClassBasedTestDescriptor.java:481)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor\n        .lambda$synthesizeBeforeEachMethodAdapter\n          $18(ClassBasedTestDescriptor.java:466)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .lambda$invokeBeforeEachMethods$2(TestMethodTestDescriptor.java:169)\n          ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs\n            $5(TestMethodTestDescriptor.java:197)\n            ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .invokeBeforeMethodsOrCallbacksUntilExceptionOccurs\n            (TestMethodTestDescriptor.java:197)\n            ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .invokeBeforeEachMethods(TestMethodTestDescriptor.java:166)\n            ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .execute(TestMethodTestDescriptor.java:133)\n            ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n        .execute(TestMethodTestDescriptor.java:71)\n            ~[junit-jupiter-engine-5.6.2.jar:5.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$5(NodeTestTask.java:135)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$7(NodeTestTask.java:125)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.Node\n        .around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$8(NodeTestTask.java:123)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .executeRecursively(NodeTestTask.java:122)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .execute(NodeTestTask.java:80)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1510) ~[na:na]\n\t\tat org.junit.platform.engine.support.hierarchical\n        .SameThreadHierarchicalTestExecutorService\n            .invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n                ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$5(NodeTestTask.java:139)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$7(NodeTestTask.java:125)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.Node\n        .around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$8(NodeTestTask.java:123)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .executeRecursively(NodeTestTask.java:122)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .execute(NodeTestTask.java:80)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1510) ~[na:na]\n\t\tat org.junit.platform.engine.support.hierarchical\n        .SameThreadHierarchicalTestExecutorService\n            .invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n                ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$5(NodeTestTask.java:139)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$7(NodeTestTask.java:125)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.Node\n        .around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .lambda$executeRecursively$8(NodeTestTask.java:123)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n        .execute(ThrowableCollector.java:73)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .executeRecursively(NodeTestTask.java:122)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n        .execute(NodeTestTask.java:80)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical\n        .SameThreadHierarchicalTestExecutorService\n            .submit(SameThreadHierarchicalTestExecutorService.java:32)\n                ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical\n        .HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.engine.support.hierarchical\n        .HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n            ~[junit-platform-engine-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.launcher.core.DefaultLauncher\n        .execute(DefaultLauncher.java:248)\n            ~[junit-platform-launcher-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.launcher.core.DefaultLauncher\n        .lambda$execute$5(DefaultLauncher.java:211)\n            ~[junit-platform-launcher-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.launcher.core.DefaultLauncher\n        .withInterceptedStreams(DefaultLauncher.java:226)\n            ~[junit-platform-launcher-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.launcher.core.DefaultLauncher\n        .execute(DefaultLauncher.java:199)\n            ~[junit-platform-launcher-1.6.2.jar:1.6.2]\n\t\tat org.junit.platform.launcher.core.DefaultLauncher\n        .execute(DefaultLauncher.java:132)\n            ~[junit-platform-launcher-1.6.2.jar:1.6.2]\n\t\tat com.intellij.junit5.JUnit5IdeaTestRunner\n        .startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)\n            ~[junit5-rt.jar:na]\n\t\tat com.intellij.rt.junit.IdeaTestRunner$Repeater\n        .startRunnerWithArgs(IdeaTestRunner.java:33)\n            ~[junit-rt.jar:na]\n\t\tat com.intellij.rt.junit.JUnitStarter\n        .prepareStreamsAndStart(JUnitStarter.java:230)\n            ~[junit-rt.jar:na]\n\t\tat com.intellij.rt.junit.JUnitStarter\n        .main(JUnitStarter.java:58) ~[junit-rt.jar:na]\n\njava.lang.AssertionError: Status expected:<200 OK>\n    but was:<500 INTERNAL_SERVER_ERROR>\n\n> GET /acpos\n> WebTestClient-Request-Id: [1]\n\nNo content\n\n< 500 INTERNAL_SERVER_ERROR Internal Server Error\n< Content-Type: [application/json]\n< Content-Length: [142]\n\n{\"timestamp\":\"2020-11-09T15:41:12.516+00:00\",\"path\":\"/acpos\",\"status\":500,\n        \"error\":\"Internal Server Error\",\"message\":\"\",\"requestId\":\"699a523c\"}\n\n\tat org.springframework.test.web.reactive.server.ExchangeResult\n    .assertWithDiagnostics(ExchangeResult.java:209)\n\tat org.springframework.test.web.reactive.server.StatusAssertions\n    .assertStatusAndReturn(StatusAssertions.java:227)\n\tat org.springframework.test.web.reactive.server.StatusAssertions\n    .isOk(StatusAssertions.java:67)\n\tat com.thehecklers.aircraftpositions.PositionControllerTest\n    .getCurrentACPositions(PositionControllerTest.java:90)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl\n    .invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl\n    .invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl\n    .invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n\tat org.junit.platform.commons.util.ReflectionUtils\n    .invokeMethod(ReflectionUtils.java:686)\n\tat org.junit.jupiter.engine.execution.MethodInvocation\n    .proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n    $ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension\n    .intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension\n    .interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension\n    .interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n    $ReflectiveInterceptorCall\n        .lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n    .lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n    $InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n    .proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n    .chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain\n    .invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n    .invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker\n    .invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n    .lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n    .invokeTestMethod(TestMethodTestDescriptor.java:208)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n    .execute(TestMethodTestDescriptor.java:137)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor\n    .execute(TestMethodTestDescriptor.java:71)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$5(NodeTestTask.java:135)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$7(NodeTestTask.java:125)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$8(NodeTestTask.java:123)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .executeRecursively(NodeTestTask.java:122)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .execute(NodeTestTask.java:80)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1510)\n\tat org.junit.platform.engine.support.hierarchical\n    .SameThreadHierarchicalTestExecutorService\n        .invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$7(NodeTestTask.java:125)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$8(NodeTestTask.java:123)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .executeRecursively(NodeTestTask.java:122)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .execute(NodeTestTask.java:80)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1510)\n\tat org.junit.platform.engine.support.hierarchical\n    .SameThreadHierarchicalTestExecutorService\n        .invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$7(NodeTestTask.java:125)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .lambda$executeRecursively$8(NodeTestTask.java:123)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector\n    .execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .executeRecursively(NodeTestTask.java:122)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask\n    .execute(NodeTestTask.java:80)\n\tat org.junit.platform.engine.support.hierarchical\n    .SameThreadHierarchicalTestExecutorService\n        .submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor\n    .execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine\n    .execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.DefaultLauncher\n    .execute(DefaultLauncher.java:248)\n\tat org.junit.platform.launcher.core.DefaultLauncher\n    .lambda$execute$5(DefaultLauncher.java:211)\n\tat org.junit.platform.launcher.core.DefaultLauncher\n    .withInterceptedStreams(DefaultLauncher.java:226)\n\tat org.junit.platform.launcher.core.DefaultLauncher\n    .execute(DefaultLauncher.java:199)\n\tat org.junit.platform.launcher.core.DefaultLauncher\n    .execute(DefaultLauncher.java:132)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner\n    .startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater\n    .startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter\n    .prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter\n    .main(JUnitStarter.java:58)\nCaused by: java.lang.AssertionError: Status expected:<200 OK>\n        but was:<500 INTERNAL_SERVER_ERROR>\n\tat org.springframework.test.util.AssertionErrors\n    .fail(AssertionErrors.java:59)\n\tat org.springframework.test.util.AssertionErrors\n    .assertEquals(AssertionErrors.java:122)\n\tat org.springframework.test.web.reactive.server.StatusAssertions\n    .lambda$assertStatusAndReturn$4(StatusAssertions.java:227)\n\tat org.springframework.test.web.reactive.server.ExchangeResult\n    .assertWithDiagnostics(ExchangeResult.java:206)\n\t... 66 more\n```", "```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport reactor.core.publisher.Hooks;\n\n@SpringBootApplication\npublic class AircraftPositionsApplication {\n\n\tpublic static void main(String[] args) {\n\t\tHooks.onOperatorDebug();\n\t\tSpringApplication.run(AircraftPositionsApplication.class, args);\n\t}\n\n}\n```", "```java\nHooks.onOperatorDebug();\nMockito.when(service.getAllAircraft()).thenReturn(\n        Flux.just(ac1, ac2, ac3)\n                .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n);\n```", "```java\n//Hooks.onOperatorDebug();      Comment out or remove\nMockito.when(service.getAllAircraft()).thenReturn(\n    Flux.just(ac1, ac2, ac3)\n        .checkpoint()\n        .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n        .checkpoint()\n);\n```", "```java\n//Hooks.onOperatorDebug();      Comment out or remove\nMockito.when(service.getAllAircraft()).thenReturn(\n    Flux.just(ac1, ac2, ac3)\n        .checkpoint(\"All Aircraft: after all good positions reported\")\n        .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n        .checkpoint(\"All Aircraft: after appending bad position report\")\n);\n```", "```java\n//Hooks.onOperatorDebug();      Comment out or remove\nMockito.when(service.getAllAircraft()).thenReturn(\n    Flux.just(ac1, ac2, ac3)\n        .checkpoint(\"All Aircraft: after all good positions reported\", true)\n        .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n        .checkpoint(\"All Aircraft: after appending bad position report\", true)\n);\n```", "```java\n<dependency>\n    <groupId>io.projectreactor</groupId>\n    <artifactId>reactor-tools</artifactId>\n</dependency>\n```", "```java\n//Hooks.onOperatorDebug();\nReactorDebugAgent.init();       // Add this line\nMockito.when(service.getAllAircraft()).thenReturn(\n        Flux.just(ac1, ac2, ac3)\n                .concatWith(Flux.error(new Throwable(\"Bad position report\")))\n);\n```"]