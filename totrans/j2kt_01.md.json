["```java\nval sum = numbers.fold(0, Int::plus)\n```", "```java\npublic interface Function2 {\n    Object apply(Object arg1, Object arg2);\n}\n```", "```java\npublic class Vectors {\n    public static Object fold(Vector l, Object initial, Function2 f) {\n        Object result = initial;\n        for (int i = 0; i < l.size(); i++) {\n            result = f.apply(result, l.get(i));\n        }\n        return result;\n    }\n\n    ... and other operations on vectors\n}\n```", "```java\npublic class AddIntegers implements Function2 {\n    public Object apply(Object arg1, Object arg2) {\n        int i1 = ((Integer) arg1).intValue();\n        int i2 = ((Integer) arg2).intValue();\n        return new Integer(i1 + i2);\n    }\n}\n```", "```java\nint sum = ((Integer) Vectors.fold(counts, new Integer(0), new AddIntegers()))\n    .intValue();\n```", "```java\nint sum = 0;\nfor (int i = 0; i < counts.size(); i++) {\n    sum += ((Integer)counts.get(i)).intValue();\n}\n```", "```java\nint sum = ((Integer) Lists.fold(counts, new Integer(0),\n    new Function2() {\n        public Object apply(Object arg1, Object arg2) {\n            int i1 = ((Integer) arg1).intValue();\n            int i2 = ((Integer) arg2).intValue();\n            return new Integer(i1 + i2);\n        }\n    })).intValue();\n```", "```java\npublic interface Function2<A, B, R> {\n    R apply(A arg1, B arg2);\n}\n```", "```java\nint sum = Lists.fold(counts, 0,\n    new Function2<Integer, Integer, Integer>() {\n        @Override\n        public Integer apply(Integer arg1, Integer arg2) {\n            return arg1 + arg2;\n        }\n    });\n```", "```java\nint sum = counts.stream().reduce(0, Integer::sum);\n```"]