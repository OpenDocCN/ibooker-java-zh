["```java\n./mvnw quarkus:add-extensions -Dextensions=\"quarkus-container-image-jib\"\n```", "```java\nquarkus.container-image.group=lordofthejars ![1](Images/1.png)\nquarkus.container-image.registry=quay.io ![2](Images/2.png)\nquarkus.container-image.username=lordofthejars ![3](Images/3.png)\n#quarkus.container-image.password= ![4](Images/4.png)\n```", "```java\n./mvnw clean package -Dquarkus.container-image.push=true \n... [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ greeting-jib --- [INFO] Building jar: /greeting-jib/target/greeting-jib-1.0-SNAPSHOT.jar [INFO] [INFO] --- quarkus-maven-plugin:1.3.0.CR2:build (default) @ greeting-jib --- [INFO] [org.jboss.threads] JBoss Threads version 3.0.1.Final [INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building thin jar:\n greeting-jib/target/greeting-jib-1.0-SNAPSHOT-runner.jar [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor]\n Starting container image build ![1](Images/1.png)\n[WARNING] [io.quarkus.container.image.jib.deployment.JibProcessor]\n Base image 'fabric8/java-alpine-openjdk8-jre' does not use a specific image digest - build may not be reproducible [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] LogEvent\n [level=INFO, message=trying docker-credential-desktop for quay.io] [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] LogEvent\n [level=LIFECYCLE, message=Using credentials from Docker config ($HOME/.docker/config.json) for quay.io/lordofthejars/greeting-jib:1.0-SNAPSHOT] [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] The base image\n requires auth. Trying again for fabric8/java-alpine-openjdk8-jre... [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Using base\n image with digest: sha256:a5d31f17d618032812ae85d12426b112279f02951fa92a7ff8a9d69a6d3411b1 [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Container\n entrypoint set to [java, -Dquarkus.http.host=0.0.0.0, -Djava.util.logging.manager=org.jboss.logmanager.LogManager, -cp, /app/resources:/app/classes:/app/libs/*, io.quarkus.runner.GeneratedMain] [INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Pushed container image quay.io/lordofthejars/greeting-jib:1.0-SNAPSHOT (sha256:e173e0b49bd5ec1f500016f46f2cde03a055f558f72ca8ee1d6cb034a385a657)![2](Images/2.png)\n\n[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed\n in 12980ms\n```", "```java\n./mvnw clean package -Dquarkus.container-image.build=true\n```", "```java\n./mvnw clean package -Dquarkus.container-image.push=true -Pnative \\\n -Dquarkus.native.container-build=true\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-kubernetes\"\n```", "```java\n{\n  \"apiVersion\" : \"v1\",\n  \"kind\" : \"List\",\n  \"items\" : [ {\n    \"apiVersion\" : \"v1\",\n    \"kind\" : \"Service\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\", ![1](Images/1.png)\n        \"version\" : \"1.0-SNAPSHOT\", ![2](Images/2.png)\n        \"group\" : \"alex\" ![3](Images/3.png)\n      },\n      \"name\" : \"getting-started\"\n    },\n    \"spec\" : {\n      \"ports\" : [ {\n        \"name\" : \"http\",\n        \"port\" : 8080,\n        \"targetPort\" : 8080\n      } ],\n      \"selector\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"type\" : \"ClusterIP\"\n    }\n  }, {\n    \"apiVersion\" : \"apps/v1\",\n    \"kind\" : \"Deployment\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"getting-started\"\n    },\n    \"spec\" : {\n      \"replicas\" : 1,\n      \"selector\" : {\n        \"matchLabels\" : {\n          \"app\" : \"getting-started\",\n          \"version\" : \"1.0-SNAPSHOT\",\n          \"group\" : \"alex\"\n        }\n      },\n      \"template\" : {\n        \"metadata\" : {\n          \"labels\" : {\n            \"app\" : \"getting-started\",\n            \"version\" : \"1.0-SNAPSHOT\",\n            \"group\" : \"alex\"\n          }\n        },\n        \"spec\" : {\n          \"containers\" : [ {\n            \"env\" : [ {\n              \"name\" : \"KUBERNETES_NAMESPACE\",\n              \"valueFrom\" : {\n                \"fieldRef\" : {\n                  \"fieldPath\" : \"metadata.namespace\"\n                }\n              }\n            } ],\n            \"image\" : \"alex/getting-started:1.0-SNAPSHOT\",\n            \"imagePullPolicy\" : \"IfNotPresent\",\n            \"name\" : \"getting-started\",\n            \"ports\" : [ {\n              \"containerPort\" : 8080,\n              \"name\" : \"http\",\n              \"protocol\" : \"TCP\"\n            } ]\n          } ]\n        }\n      }\n    }\n  } ]\n}\n```", "```java\nquarkus.container-image.group=redhat\nquarkus.application.name=message-app\n```", "```java\nquarkus.kubernetes.replicas=3 ![1](Images/1.png)\n\nquarkus.container-image.registry=http://my.docker-registry.net ![2](Images/2.png)\nquarkus.kubernetes.labels.environment=prod ![3](Images/3.png)\n\nquarkus.kubernetes.readiness-probe.initial-delay-seconds=10 ![4](Images/4.png)\nquarkus.kubernetes.readiness-probe.period-seconds=30\n```", "```java\n\"image\" : \"alex/getting-started:1.0-SNAPSHOT\",\n\"imagePullPolicy\" : \"IfNotPresent\",\n\"livenessProbe\" : { ![1](Images/1.png)\n    \"failureThreshold\" : 3,\n    \"httpGet\" : {\n        \"path\" : \"/health/live\", ![2](Images/2.png)\n        \"port\" : 8080,\n        \"scheme\" : \"HTTP\"\n        },\n    \"initialDelaySeconds\" : 0,\n    \"periodSeconds\" : 30,\n    \"successThreshold\" : 1,\n    \"timeoutSeconds\" : 10\n},\n\"name\" : \"getting-started\",\n\"ports\" : [ {\n    \"containerPort\" : 8080,\n    \"name\" : \"http\",\n    \"protocol\" : \"TCP\"\n    } ],\n\"readinessProbe\" : { ![3](Images/3.png)\n    \"failureThreshold\" : 3,\n    \"httpGet\" : {\n        \"path\" : \"/health/ready\", ![4](Images/4.png)\n        \"port\" : 8080,\n        \"scheme\" : \"HTTP\"\n    },\n    \"initialDelaySeconds\" : 0,\n    \"periodSeconds\" : 30,\n    \"successThreshold\" : 1,\n    \"timeoutSeconds\" : 10\n}\n```", "```java\n./mvnw package -DskipTests -Pnative -Dquarkus.native.container-build=true ![1](Images/1.png)\n\ndocker build -f src/main/docker/Dockerfile.native \\\n -t alex/geeting-started:1.0-SNAPSHOT . ![2](Images/2.png)\ndocker push docker build -f src/main/docker/Dockerfile.native \\\n -t alex/getting-started:1.0-SNAPSHOT . ![3](Images/3.png)\n\nkubectl apply -f target/kubernetes/kubernetes.json ![4](Images/4.png)\n\nkubectl patch svc getting-started --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]' ![5](Images/5.png)\n\ncurl $(minikube service getting-started --url)/hello ![6](Images/6.png)\n```", "```java\nFROM quay.io/quarkus/centos-quarkus-maven:19.2.1 AS build ![1](Images/1.png)\nCOPY src /usr/src/app/src\nCOPY pom.xml /usr/src/app\nUSER root\nRUN chown -R quarkus /usr/src/app\nUSER quarkus\nRUN mvn -f /usr/src/app/pom.xml -Pnative clean package\n\nFROM registry.access.redhat.com/ubi8/ubi-minimal ![2](Images/2.png)\nWORKDIR /work/\nCOPY --from=build /usr/src/app/target/*-runner /work/application\nRUN chmod 775 /work\nEXPOSE 8080\nCMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n```", "```java\ndocker build -f src/main/docker/Dockerfile.multistage -t docker \\\n build -f src/main/docker/Dockerfile.multistage -t ![1](Images/1.png)\n```", "```java\n{\n  \"apiVersion\" : \"v1\",\n  \"kind\" : \"List\",\n  \"items\" : [ {\n    \"apiVersion\" : \"v1\",\n    \"kind\" : \"Service\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"getting-started\"\n    },\n    \"spec\" : {\n      \"ports\" : [ {\n        \"name\" : \"http\",\n        \"port\" : 8080,\n        \"targetPort\" : 8080\n      } ],\n      \"selector\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"type\" : \"ClusterIP\"\n    }\n  }, {\n    \"apiVersion\" : \"image.openshift.io/v1\",\n    \"kind\" : \"ImageStream\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"getting-started\"\n    }\n  }, {\n    \"apiVersion\" : \"image.openshift.io/v1\",\n    \"kind\" : \"ImageStream\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"s2i-java\"\n    },\n    \"spec\" : {\n      \"dockerImageRepository\" : \"fabric8/s2i-java\"\n    }\n  }, {\n    \"apiVersion\" : \"build.openshift.io/v1\",\n    \"kind\" : \"BuildConfig\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"getting-started\"\n    },\n    \"spec\" : {\n      \"output\" : {\n        \"to\" : {\n          \"kind\" : \"ImageStreamTag\",\n          \"name\" : \"getting-started:1.0-SNAPSHOT\"\n        }\n      },\n      \"source\" : {\n        \"binary\" : { }\n      },\n      \"strategy\" : {\n        \"sourceStrategy\" : {\n          \"from\" : {\n            \"kind\" : \"ImageStreamTag\",\n            \"name\" : \"s2i-java:2.3\"\n          }\n        }\n      }\n    }\n  }, {\n    \"apiVersion\" : \"apps.openshift.io/v1\",\n    \"kind\" : \"DeploymentConfig\",\n    \"metadata\" : {\n      \"labels\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"name\" : \"getting-started\"\n    },\n    \"spec\" : {\n      \"replicas\" : 1,\n      \"selector\" : {\n        \"app\" : \"getting-started\",\n        \"version\" : \"1.0-SNAPSHOT\",\n        \"group\" : \"alex\"\n      },\n      \"template\" : {\n        \"metadata\" : {\n          \"labels\" : {\n            \"app\" : \"getting-started\",\n            \"version\" : \"1.0-SNAPSHOT\",\n            \"group\" : \"alex\"\n          }\n        },\n        \"spec\" : {\n          \"containers\" : [ {\n            \"env\" : [ {\n              \"name\" : \"KUBERNETES_NAMESPACE\",\n              \"valueFrom\" : {\n                \"fieldRef\" : {\n                  \"fieldPath\" : \"metadata.namespace\"\n                }\n              }\n            }, {\n              \"name\" : \"JAVA_APP_JAR\",\n              \"value\" : \"/deployments/getting-started-1.0-SNAPSHOT.jar\"\n            } ],\n            \"image\" : \"\",\n            \"imagePullPolicy\" : \"IfNotPresent\",\n            \"name\" : \"getting-started\",\n            \"ports\" : [ {\n              \"containerPort\" : 8080,\n              \"name\" : \"http\",\n              \"protocol\" : \"TCP\"\n            } ],\n          } ]\n        }\n      },\n      \"triggers\" : [ {\n        \"imageChangeParams\" : {\n          \"automatic\" : true,\n          \"containerNames\" : [ \"getting-started\" ],\n          \"from\" : {\n            \"kind\" : \"ImageStreamTag\",\n            \"name\" : \"getting-started:1.0-SNAPSHOT\"\n          }\n        },\n        \"type\" : \"ImageChange\"\n      } ]\n    }\n  } ]\n}\n```", "```java\n./mvnw quarkus:add-extensions \\\n    -Dextensions=\"quarkus-container-image-jib, quarkus-kubernetes\"\n```", "```java\nquarkus.container-image.group=lordofthejars ![1](Images/1.png)\nquarkus.container-image.registry=quay.io ![2](Images/2.png)\nquarkus.container-image.username=lordofthejars ![3](Images/3.png)\n#quarkus.container-image.password= ![4](Images/4.png)\n```", "```java\n./mvnw clean package -Dquarkus.kubernetes.deploy=true\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-kubernetes\"\n```", "```java\n@ConfigProperty(name = \"greeting.message\")\nString message;\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return \"hello \" + message;\n}\n```", "```java\napiVersion: v1\nkind: ConfigMap ![1](Images/1.png)\nmetadata:\n    name: greeting-config\ndata:\n    greeting: \"Kubernetes\" ![2](Images/2.png)\n```", "```java\nkubectl apply -f src/main/kubernetes/config-greeting.yaml\n```", "```java\ngreeting.message=local\nquarkus.container-image.group=quarkus ![1](Images/1.png)\nquarkus.container-image.name=greeting-app\nquarkus.container-image.tag=1.0-SNAPSHOT\nquarkus.kubernetes.env-vars.greeting-message.value=greeting ![2](Images/2.png)\nquarkus.kubernetes.env-vars.greeting-message.configmap=greeting-config ![3](Images/3.png)\nquarkus.kubernetes.image-pull-policy=if-not-present\n```", "```java\n./mvnw clean package -DskipTests\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t quarkus/greeting-app:1.0-SNAPSHOT .\nkubectl apply -f target/kubernetes/kubernetes.yml\n\nkubectl patch svc greeting-app --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]'\ncurl $(minikube service greeting-app --url)/hello\n```", "```java\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: my-config ![1](Images/1.png)\ndata:\n    greeting: \"Kubernetes\"\n```", "```java\nkubectl apply -f src/main/kubernetes/my-config.yaml\n```", "```java\nsome.property1=prop1\nsome.property2=prop2\n```", "```java\nkubectl create configmap my-file-config \\\n --from-file=./src/main/kubernetes/application.properties\n```", "```java\nquarkus.kubernetes-config.enabled=true ![1](Images/1.png)\nquarkus.kubernetes-config.config-maps=my-config,my-file-config ![2](Images/2.png)\n```", "```java\n@ConfigProperty(name = \"greeting\") ![1](Images/1.png)\nString greeting;\n\n@ConfigProperty(name = \"some.property1\") ![2](Images/2.png)\nString property1;\n\n@ConfigProperty(name = \"some.property2\")\nString property2;\n```", "```java\n./mvnw clean package -DskipTests\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t quarkus/greeting-app:1.0-SNAPSHOT .\nkubectl apply -f target/kubernetes/kubernetes.yml\n\nkubectl patch svc greeting-app-config-ext --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]'\n\ncurl $(minikube service greeting-app-config-ext --url)/hello\nKubernetes\n\ncurl $(minikube service greeting-app-config-ext --url)/hello/p1\nprop1\n\ncurl $(minikube service greeting-app-config-ext --url)/hello/p2\nprop2\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"kubernetes-client\"\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport io.fabric8.kubernetes.client.KubernetesClient;\n\n@Path(\"/pod\")\npublic class PodResource {\n\n    @Inject ![1](Images/1.png)\n    KubernetesClient kubernetesClient;\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @Path(\"/{namespace}\")\n    public List<String> getPods(@PathParam(\"namespace\") String namespace) {\n        return kubernetesClient.pods() ![2](Images/2.png)\n                                .inNamespace(namespace) ![3](Images/3.png)\n                                .list().getItems()\n                                .stream()\n                                .map(p -> p.getMetadata().getGenerateName()) ![4](Images/4.png)\n                                .collect(Collectors.toList());\n    }\n}\n```", "```java\nkubectl proxy --port=8090\n```", "```java\n%dev.quarkus.kubernetes-client.master-url=http://localhost:8090 ![1](Images/1.png)\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl http://localhost:8080/pod/default\n[\"getting-started-5cd97ddd4d-\"]\n```", "```java\n@ApplicationScoped\npublic class KubernetesClientProducer {\n\n    @Produces\n    public KubernetesClient kubernetesClient() {\n        Config config = new ConfigBuilder()\n                              .withMasterUrl(\"https://mymaster.com\")\n                              .build(); ![1](Images/1.png)\n        return new DefaultKubernetesClient(config); ![2](Images/2.png)\n    }\n}\n```", "```java\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: greeting-started\n  namespace: default\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: greeting-started\n  namespace: default\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\"]\n    verbs: [\"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: greeting-started\n  namespace: default\nroleRef:\n  kind: Role\n  name: greeting-started\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n  - kind: ServiceAccount\n    name: greeting-started\n    namespace: default\n```", "```java\npackage org.acme.quickstart;\n\nimport io.fabric8.kubernetes.api.model.Pod;\nimport io.fabric8.kubernetes.api.model.PodBuilder;\nimport io.fabric8.kubernetes.api.model.PodListBuilder;\nimport io.fabric8.kubernetes.client.server.mock.KubernetesMockServer;\nimport io.quarkus.test.common.QuarkusTestResource;\nimport io.quarkus.test.junit.QuarkusTest;\nimport io.quarkus.test.kubernetes.client.KubernetesMockServerTestResource;\nimport io.quarkus.test.kubernetes.client.MockServer;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest\n@QuarkusTestResource(KubernetesMockServerTestResource.class) ![1](Images/1.png)\npublic class PodResourceTest {\n\n    @MockServer ![2](Images/2.png)\n    KubernetesMockServer mockServer;\n\n    @BeforeEach ![3](Images/3.png)\n    public void prepareKubernetesServerAPI() {\n        final Pod pod1 = new PodBuilder()\n                .withNewMetadata()\n                .withName(\"pod1\")\n                .withNamespace(\"test\")\n                .withGenerateName(\"pod1-12345\")\n                .and()\n                .build(); ![4](Images/4.png)\n\n        mockServer\n                .expect()\n                  .get()\n                    .withPath(\"/api/v1/namespaces/test/pods\")\n                    .andReturn(200, new PodListBuilder()\n                        .withNewMetadata()\n                        .withResourceVersion(\"1\")\n                        .endMetadata()\n                        .withItems(pod1).build()) ![5](Images/5.png)\n                .always();\n\n    }\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/pod/test\")\n          .then()\n             .statusCode(200)\n             .body(is(\"[\\\"pod1-12345\\\"]\"));\n    }\n\n}\n```", "```java\ndocker run docker/whalesay cowsay boo\n _____\n< boo >\n -----\n \\\n \\\n \\\n ##        .\n ## ## ##       ==\n ## ## ## ##      ===\n /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n \\______ o          __/\n \\    \\        __/\n \\____\\______/\n```", "```java\napiVersion: v1\nkind: Pod\nmetadata:\n  name: whalesay\nspec:\n  containers:\n  - name: whalesay\n    image: docker/whalesay\n    imagePullPolicy: \"IfNotPresent\"\n    command: [\"cowsay\",\"Hello Alex\"] ![1](Images/1.png)\n```", "```java\n./mvnw quarkus:add-extension \\\n-Dextensions=\"io.quarkus:quarkus-kubernetes-client, io.quarkus:quarkus-jackson\"\n```", "```java\napiVersion: acme.org/v1alpha1\nkind: Hello ![1](Images/1.png)\nmetadata:\n  name: example-hello\nspec:\n  message: Hello Alex ![2](Images/2.png)\n```", "```java\npackage org.acme.quickstart.cr;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport io.fabric8.kubernetes.client.CustomResource;\n\n@JsonDeserialize ![1](Images/1.png)\npublic class HelloResource extends CustomResource { ![2](Images/2.png)\n\n    private HelloResourceSpec spec; ![3](Images/3.png)\n    private HelloResourceStatus status; ![4](Images/4.png)\n\n    public HelloResourceStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(HelloResourceStatus status) {\n        this.status = status;\n    }\n\n    public HelloResourceSpec getSpec() {\n        return spec;\n    }\n\n    public void setSpec(HelloResourceSpec spec) {\n        this.spec = spec;\n    }\n\n    @Override\n    public String toString() {\n        return \"name=\" + getMetadata().getName()\n                + \", version=\" + getMetadata().getResourceVersion()\n                + \", spec=\" + spec;\n    }\n}\n```", "```java\npackage org.acme.quickstart.cr;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@JsonDeserialize\npublic class HelloResourceSpec {\n\n    @JsonProperty(\"message\") ![1](Images/1.png)\n    private String message;\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String toString() {\n        return \"HelloResourceSpec [message=\" + message + \"]\";\n    }\n\n}\n```", "```java\npackage org.acme.quickstart.cr;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\n@JsonDeserialize\npublic class HelloResourceStatus {\n}\n```", "```java\npackage org.acme.quickstart.cr;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n\nimport io.fabric8.kubernetes.client.CustomResourceList;\n\n@JsonDeserialize\npublic class HelloResourceList extends CustomResourceList<HelloResource> { ![1](Images/1.png)\n}\n```", "```java\npackage org.acme.quickstart.cr;\n\nimport io.fabric8.kubernetes.api.builder.Function;\nimport io.fabric8.kubernetes.client.CustomResourceDoneable;\n\npublic class HelloResourceDoneable\n    extends CustomResourceDoneable<HelloResource> { ![1](Images/1.png)\n    public HelloResourceDoneable(HelloResource resource, Function<HelloResource,\n                                 HelloResource> function) {\n        super(resource, function);\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Named;\nimport javax.inject.Singleton;\n\nimport org.acme.quickstart.cr.HelloResource;\nimport org.acme.quickstart.cr.HelloResourceDoneable;\nimport org.acme.quickstart.cr.HelloResourceList;\n\nimport io.fabric8.kubernetes.api.model.apiextensions.CustomResourceDefinition;\nimport io.fabric8.kubernetes.client.DefaultKubernetesClient;\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport io.fabric8.kubernetes.client.dsl.MixedOperation;\nimport io.fabric8.kubernetes.client.dsl.Resource;\nimport io.fabric8.kubernetes.internal.KubernetesDeserializer;\n\npublic class KubernetesProducer {\n\n  @Produces\n  @Singleton\n  @Named(\"namespace\")\n  String findMyCurrentNamespace() throws IOException { ![1](Images/1.png)\n    return new String(Files.readAllBytes(\n          Paths\n            .get(\"/var/run/secrets/kubernetes.io/serviceaccount/namespace\")));\n  }\n\n  @Produces\n  @Singleton\n  KubernetesClient makeDefaultClient(@Named(\"namespace\") String namespace) {\n    return new DefaultKubernetesClient().inNamespace(namespace); ![2](Images/2.png)\n  }\n\n  @Produces\n  @Singleton\n  MixedOperation<HelloResource,\n                 HelloResourceList,\n                 HelloResourceDoneable,\n                 Resource<HelloResource, HelloResourceDoneable>>\n  makeCustomHelloResourceClient(KubernetesClient defaultClient) { ![3](Images/3.png)\n    KubernetesDeserializer\n        .registerCustomKind(\"acme.org/v1alpha1\",\n                            \"Hello\", HelloResource.class); ![4](Images/4.png)\n    CustomResourceDefinition crd = defaultClient.customResourceDefinitions()\n                                      .list()\n                                      .getItems()\n                                      .stream()\n                                      .findFirst()\n      .orElseThrow(RuntimeException::new); ![5](Images/5.png)\n    return defaultClient.customResources(crd, HelloResource.class,\n        HelloResourceList.class,\n        HelloResourceDoneable.class); ![6](Images/6.png)\n  }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.enterprise.event.Observes;\nimport javax.inject.Inject;\n\nimport org.acme.quickstart.cr.HelloResource;\nimport org.acme.quickstart.cr.HelloResourceDoneable;\nimport org.acme.quickstart.cr.HelloResourceList;\n\nimport io.fabric8.kubernetes.api.model.ContainerBuilder;\nimport io.fabric8.kubernetes.api.model.HasMetadata;\nimport io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\nimport io.fabric8.kubernetes.api.model.Pod;\nimport io.fabric8.kubernetes.api.model.PodBuilder;\nimport io.fabric8.kubernetes.api.model.PodSpecBuilder;\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport io.fabric8.kubernetes.client.KubernetesClientException;\nimport io.fabric8.kubernetes.client.Watcher;\nimport io.fabric8.kubernetes.client.dsl.MixedOperation;\nimport io.fabric8.kubernetes.client.dsl.Resource;\nimport io.quarkus.runtime.StartupEvent;\n\npublic class HelloResourceWatcher {\n\n  @Inject\n  KubernetesClient defaultClient; ![1](Images/1.png)\n\n  @Inject\n  MixedOperation<HelloResource,\n    HelloResourceList,\n    HelloResourceDoneable,\n    Resource<HelloResource,\n    HelloResourceDoneable>> crClient; ![2](Images/2.png)\n\n  void onStartup(@Observes StartupEvent event) { ![3](Images/3.png)\n    crClient.watch(new Watcher<HelloResource>() { ![4](Images/4.png)\n      @Override\n      public void eventReceived(Action action, HelloResource resource) {\n        System.out.println(\"Received \" + action\n            + \" event for resource \" + resource);\n        if (action == Action.ADDED) {\n          final String app = resource.getMetadata().getName(); ![5](Images/5.png)\n          final String message = resource.getSpec().getMessage();\n\n          final Map<String, String> labels = new HashMap<>(); ![6](Images/6.png)\n          labels.put(\"app\", app);\n\n          final ObjectMetaBuilder objectMetaBuilder =\n            new ObjectMetaBuilder().withName(app + \"-pod\")\n            .withNamespace(resource.getMetadata()\n                .getNamespace())\n            .withLabels(labels);\n\n          final ContainerBuilder containerBuilder =\n            new ContainerBuilder().withName(\"whalesay\")\n            .withImage(\"docker/whalesay\")\n            .withCommand(\"cowsay\", message); ![7](Images/7.png)\n\n          final PodSpecBuilder podSpecBuilder =\n            new PodSpecBuilder()\n            .withContainers(containerBuilder.build())\n            .withRestartPolicy(\"Never\");\n\n          final PodBuilder podBuilder =\n            new PodBuilder()\n            .withMetadata(objectMetaBuilder.build())\n            .withSpec(podSpecBuilder.build());\n\n          final Pod pod = podBuilder.build(); ![8](Images/8.png)\n          HasMetadata result = defaultClient\n            .resource(pod)\n            .createOrReplace(); ![9](Images/9.png)\n\n          if (result == null) {\n            System.out.println(\"Pod \" + pod\n                + \" couldn't be created\");\n          } else {\n            System.out.println(\"Pod \" + pod + \" created\");\n          }\n        }\n      }\n\n      @Override\n      public void onClose(KubernetesClientException e) { ![10](Images/10.png)\n        if (e != null) {\n          e.printStackTrace();\n          System.exit(-1);\n        }\n      }\n    });\n  }\n}\n```", "```java\nFROM fabric8/java-alpine-openjdk8-jre\n\nRUN apk add --no-cache nss\n```", "```java\n./mvnw clean package\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t lordofthejars/quarkus-operator-example:1.0.0 .\n```", "```java\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: hellos.acme.org ![1](Images/1.png)\nspec:\n  group: acme.org ![2](Images/2.png)\n  names:\n    kind: Hello ![3](Images/3.png)\n    listKind: HelloList ![4](Images/4.png)\n    plural: hellos ![5](Images/5.png)\n    singular: hello ![6](Images/6.png)\n  scope: Namespaced ![7](Images/7.png)\n  subresources:\n    status: {}\n  version: v1alpha1 ![8](Images/8.png)\n```", "```java\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole ![1](Images/1.png)\nmetadata:\n  name: quarkus-operator-example\nrules:\n- apiGroups:\n  - ''\n  resources:\n  - pods ![2](Images/2.png)\n  verbs:\n  - get\n  - list\n  - watch\n  - create\n  - update\n  - delete\n  - patch\n- apiGroups:\n  - apiextensions.k8s.io\n  resources:\n  - customresourcedefinitions\n  verbs:\n  - list\n- apiGroups:\n  - acme.org ![3](Images/3.png)\n  resources:\n  - hellos\n  verbs:\n  - list\n  - watch\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: quarkus-operator-example\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: quarkus-operator-example\nsubjects:\n- kind: ServiceAccount\n  name: quarkus-operator-example\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: quarkus-operator-example\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment ![4](Images/4.png)\nmetadata:\n  name: quarkus-operator-example\nspec:\n  selector:\n    matchLabels:\n      app: quarkus-operator-example\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: quarkus-operator-example\n    spec:\n      serviceAccountName: quarkus-operator-example ![5](Images/5.png)\n      containers:\n      - image: lordofthejars/quarkus-operator-example:1.0.0 ![6](Images/6.png)\n        name: quarkus-operator-example\n        imagePullPolicy: IfNotPresent\n```", "```java\nkubectl apply -f src/main/kubernetes/custom-resource-definition.yaml\nkubectl apply -f src/main/kubernetes/deploy.yaml\n\nkubectl get pods\n\nNAME                                       READY   STATUS    RESTARTS   AGE\nquarkus-operator-example-fb77dc468-8v9xk   1/1     Running   0          5s\n```", "```java\napiVersion: acme.org/v1alpha1\nkind: Hello ![1](Images/1.png)\nmetadata:\n  name: example-hello\nspec:\n  message: Hello Alex ![2](Images/2.png)\n```", "```java\nkubectl apply -f src/main/kubernetes/custom-resource.yaml\n\nkubectl get pods\n\nNAME                                       READY   STATUS      RESTARTS   AGE\nexample-hello-pod                          0/1     Completed   0          2m57s\nquarkus-operator-example-fb77dc468-8v9xk   1/1     Running     0          3m24s\n```", "```java\nkubectl logs example-hello-pod\n\n ____________\n< Hello Alex >\n ------------\n \\\n \\\n \\\n ##        .\n ## ## ##       ==\n ## ## ## ##      ===\n /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n \\______ o          __/\n \\    \\        __/\n \\____\\______/\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-kubernetes, quarkus-container-image-docker\"\n```", "```java\nquarkus.kubernetes.deployment-target=knative ![1](Images/1.png)\nquarkus.container-image.build=true ![2](Images/2.png)\nquarkus.container-image.group=lordofthejars\nquarkus.container-image.registry=dev.local ![3](Images/3.png)\n```", "```java\n{\n  \"apiVersion\" : \"v1\",\n  \"kind\" : \"ServiceAccount\",\n  \"metadata\" : {\n    \"annotations\" : {\n      \"app.quarkus.io/vcs-url\" :\n       \"https://github.com/lordofthejars/quarkus-cookbook.git\",\n      \"app.quarkus.io/build-timestamp\" : \"2020-03-10 - 22:55:08 +0000\",\n      \"app.quarkus.io/commit-id\" : \"17b19a409c41cc933770b20009f635a65f69440e\"\n    },\n    \"labels\" : {\n      \"app.kubernetes.io/name\" : \"greeting-knative\",\n      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n    },\n    \"name\" : \"greeting-knative\"\n  }\n}{\n  \"apiVersion\" : \"serving.knative.dev/v1alpha1\",\n  \"kind\" : \"Service\",\n  \"metadata\" : {\n    \"annotations\" : {\n      \"app.quarkus.io/vcs-url\" :\n        \"https://github.com/lordofthejars/quarkus-cookbook.git\",\n      \"app.quarkus.io/build-timestamp\" : \"2020-03-10 - 22:55:08 +0000\",\n      \"app.quarkus.io/commit-id\" : \"17b19a409c41cc933770b20009f635a65f69440e\"\n    },\n    \"labels\" : {\n      \"app.kubernetes.io/name\" : \"greeting-knative\",\n      \"app.kubernetes.io/version\" : \"1.0-SNAPSHOT\"\n    },\n    \"name\" : \"greeting-knative\"\n  },\n  \"spec\" : {\n    \"runLatest\" : {\n      \"configuration\" : {\n        \"revisionTemplate\" : {\n          \"spec\" : {\n            \"container\" : {\n              \"image\" :\"dev.local/lordofthejars/greeting-knative:1.0-SNAPSHOT\",\n              \"imagePullPolicy\" : \"IfNotPresent\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```", "```java\nkubectl apply -f target/kubernetes/knative.json\n\nserviceaccount/greeting-knative created\nservice.serving.knative.dev/greeting-knative created\n\nkubectl get ksvc\nNAME               URL                                                \\\ngreeting-knative   http://greeting-knative.default.127.0.0.1.nip.io   \\\n\nLATESTCREATED            LATESTREADY              READY   REASON\ngreeting-knative-j8n76   greeting-knative-j8n76   True\n```", "```java\nkubectl get events --sort-by=.metadata.creationTimestamp\n```", "```java\nkubectl port-forward --namespace kourier-system $(kubectl get pod \\\n -n kourier-system -l \"app=3scale-kourier-gateway\" \\\n --output=jsonpath=\"{.items[0].metadata.name}\") \\\n 8080:8080 19000:19000 8443:8443\n\nForwarding from 127.0.0.1:8080 -> 8080\nForwarding from [::1]:8080 -> 8080\nForwarding from 127.0.0.1:19000 -> 19000\nForwarding from [::1]:19000 -> 19000\nForwarding from 127.0.0.1:8443 -> 8443\nForwarding from [::1]:8443 -> 8443\nHandling connection for 8080\nHandling connection for 8080\n```", "```java\ncurl -v -H \"Host: greeting-knative.default.127.0.0.1.nip.io\" \\\n http://localhost:8080/greeting\n\nhello\n```", "```java\nkubectl delete -f target/kubernetes/knative.json\n\nserviceaccount \"greeting-knative\" deleted\nservice.serving.knative.dev \"greeting-knative\" deleted\n```"]