["```java\nCommands:\n  alexa-skills-kit\n  alexa-smart-home\n  apigateway\n  batch\n  cloudformation\n  cloudfront\n  cloudwatch\n  codecommit\n  codepipeline\n```", "```java\nCommands:\n  authorizer  Generates an Amazon API Gateway Authorizer Event\n  aws-proxy   Generates an Amazon API Gateway AWS Proxy Event\n```", "```java\n$ sam local generate-event apigateway aws-proxy\n\n{\n  \"body\": \"eyJ0ZXN0IjoiYm9keSJ9\",\n  \"resource\": \"/{proxy+}\",\n  \"path\": \"/path/to/resource\",\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"queryStringParameters\": {\n    \"foo\": \"bar\"\n  },\n  ....\n```", "```java\npackage book.api;\n\nimport java.util.Map;\n\npublic class APIGatewayEvent {\n  public String path;\n  public Map<String, String> queryStringParameters;\n}\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-lambda-java-events</artifactId>\n    <version>2.2.6</version>\n  </dependency>\n</dependencies>\n```", "```java\npackage book.api;\n\npublic class APIGatewayResponse {\n  public final int statusCode;\n  public final String body;\n\n  public APIGatewayResponse(int statusCode, String body) {\n    this.statusCode = statusCode;\n    this.body = body;\n  }\n}\n```", "```java\nHelloAPIWorldLambda:\n  Type: AWS::Serverless::Function\n  Properties:\n    Runtime: java8\n    MemorySize: 512\n    Handler: book.HelloWorldAPI::handler\n    CodeUri: target/lambda.zip\n    Events:\n      MyApi:\n        Type: Api\n        Properties:\n          Path: /foo\n          Method: get\n```", "```java\n{\n  \"Records\": [\n    {\n      \"messageId\": \"19dd0b57-b21e-4ac1-bd88-01bbb068cb78\",\n      \"receiptHandle\": \"MessageReceiptHandle\",\n      \"body\": \"Hello from SQS!\",\n      \"attributes\": {\n        \"ApproximateReceiveCount\": \"1\",\n        \"SentTimestamp\": \"1523232000000\",\n        \"SenderId\": \"123456789012\",\n        \"ApproximateFirstReceiveTimestamp\": \"1523232000001\"\n      },\n      \"messageAttributes\": {},\n      \"md5OfBody\": \"7b270e59b47ff90a553787216d55d91d\",\n      \"eventSource\": \"aws:sqs\",\n      \"eventSourceARN\": \"arn:aws:sqs:us-east-1:123456789012:MyQueue\",\n      \"awsRegion\": \"us-east-1\"\n    }\n  ]\n}\n```", "```java\n{\n  \"locationName\":\"Brooklyn, NY\",\n  \"temperature\":91,\n  \"timestamp\":1564428897,\n  \"latitude\": 40.70,\n  \"longitude\": -73.99\n}\n```", "```java\npackage book.api;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ApiGatewayRequest {\n  public String body;\n  public Map<String, String> queryStringParameters = new HashMap<>();\n}\n```", "```java\npackage book.api;\n\npublic class ApiGatewayResponse {\n  public Integer statusCode;\n  public String body;\n\n  public ApiGatewayResponse(Integer statusCode, String body) {\n    this.statusCode = statusCode;\n    this.body = body;\n  }\n}\n```", "```java\npackage book.api;\n\npublic class WeatherEventLambda {\n  public ApiGatewayResponse handler(ApiGatewayRequest request) {\n    // process request\n\n    // send response\n    return new ApiGatewayResponse(200, ..).;\n  }\n}\n```", "```java\n{\n  \"body\": \"{\\\"locationName\\\":\\\"Brooklyn, NY\\\", \\\"temperature\\\":91,...\",\n  \"queryStringParameters\": {}\n}\n```", "```java\npackage book.api;\n\nimport com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\nimport com.amazonaws.services.dynamodbv2.document.DynamoDB;\nimport com.amazonaws.services.dynamodbv2.document.Item;\nimport com.amazonaws.services.dynamodbv2.document.Table;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\n\npublic class WeatherEventLambda {\n  private final ObjectMapper objectMapper =\n      new ObjectMapper()\n          .configure(\n              DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n              false);\n  private final DynamoDB dynamoDB = new DynamoDB(\n      AmazonDynamoDBClientBuilder.defaultClient());\n  private final String tableName = System.getenv(\"LOCATIONS_TABLE\");\n\n  public ApiGatewayResponse handler(ApiGatewayRequest request)\n    throws IOException {\n\n    final WeatherEvent weatherEvent = objectMapper.readValue(\n        request.body,\n        WeatherEvent.class);\n\n    final Table table = dynamoDB.getTable(tableName);\n    final Item item = new Item()\n        .withPrimaryKey(\"locationName\", weatherEvent.locationName)\n        .withDouble(\"temperature\", weatherEvent.temperature)\n        .withLong(\"timestamp\", weatherEvent.timestamp)\n        .withDouble(\"longitude\", weatherEvent.longitude)\n        .withDouble(\"latitude\", weatherEvent.latitude);\n    table.putItem(item);\n\n    return new ApiGatewayResponse(200, weatherEvent.locationName);\n  }\n}\n```", "```java\npackage book.api;\n\npublic class WeatherEvent {\n  public String locationName;\n  public Double temperature;\n  public Long timestamp;\n  public Double longitude;\n  public Double latitude;\n\n  public WeatherEvent() {\n  }\n\n  public WeatherEvent(String locationName, Double temperature,\n            Long timestamp, Double longitude, Double latitude) {\n\n    this.locationName = locationName;\n    this.temperature = temperature;\n    this.timestamp = timestamp;\n    this.longitude = longitude;\n    this.latitude = latitude;\n  }\n}\n```", "```java\npackage book.api;\n\nimport com.amazonaws.services.dynamodbv2.AmazonDynamoDB;\nimport com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;\nimport com.amazonaws.services.dynamodbv2.model.ScanRequest;\nimport com.amazonaws.services.dynamodbv2.model.ScanResult;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class WeatherQueryLambda {\n  private final ObjectMapper objectMapper = new ObjectMapper();\n  private final AmazonDynamoDB dynamoDB =\n      AmazonDynamoDBClientBuilder.defaultClient();\n  private final String tableName = System.getenv(\"LOCATIONS_TABLE\");\n\n  private static final String DEFAULT_LIMIT = \"50\";\n\n  public ApiGatewayResponse handler(ApiGatewayRequest request)\n    throws IOException {\n\n    final String limitParam = request.queryStringParameters == null\n        ? DEFAULT_LIMIT\n        : request.queryStringParameters.getOrDefault(\n            \"limit\", DEFAULT_LIMIT);\n    final int limit = Integer.parseInt(limitParam);\n\n    final ScanRequest scanRequest = new ScanRequest()\n        .withTableName(tableName)\n        .withLimit(limit);\n    final ScanResult scanResult = dynamoDB.scan(scanRequest);\n\n    final List<WeatherEvent> events = scanResult.getItems().stream()\n        .map(item -> new WeatherEvent(\n            item.get(\"locationName\").getS(),\n            Double.parseDouble(item.get(\"temperature\").getN()),\n            Long.parseLong(item.get(\"timestamp\").getN()),\n            Double.parseDouble(item.get(\"longitude\").getN()),\n            Double.parseDouble(item.get(\"latitude\").getN())\n        ))\n        .collect(Collectors.toList());\n\n    final String json = objectMapper.writeValueAsString(events);\n\n    return new ApiGatewayResponse(200, json);\n  }\n}\n```", "```java\n<project>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>com.amazonaws</groupId>\n        <artifactId>aws-java-sdk-bom</artifactId>\n        <version>1.11.600</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>aws-lambda-java-core</artifactId>\n      <version>1.2.0</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>aws-java-sdk-dynamodb</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.10.1</version>\n    </dependency>\n  </dependencies>\n\n  <!-- Other sections would follow -->\n</project>\n```", "```java\nAWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: chapter5-api\n\nGlobals:\n  Function:\n    Runtime: java8\n    MemorySize: 512\n    Timeout: 25\n    Environment:\n      Variables:\n        LOCATIONS_TABLE: !Ref LocationsTable\n  Api:\n    OpenApiVersion: '3.0.1'\n\nResources:\n  LocationsTable:\n    Type: AWS::Serverless::SimpleTable\n    Properties:\n      PrimaryKey:\n        Name: locationName\n        Type: String\n\n  WeatherEventLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: target/lambda.zip\n      Handler: book.api.WeatherEventLambda::handler\n      Policies:\n       — DynamoDBCrudPolicy:\n           TableName: !Ref LocationsTable\n      Events:\n        ApiEvents:\n          Type: Api\n          Properties:\n            Path: /events\n            Method: POST\n\n  WeatherQueryLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: target/lambda.zip\n      Handler: book.api.WeatherQueryLambda::handler\n      Policies:\n       — DynamoDBReadPolicy:\n           TableName: !Ref LocationsTable\n      Events:\n        ApiEvents:\n          Type: Api\n          Properties:\n            Path: /locations\n            Method: GET\n```", "```java\n$ curl -d '{\"locationName\":\"Brooklyn, NY\", \"temperature\":91,\n  \"timestamp\":1564428897, \"latitude\": 40.70, \"longitude\": -73.99}' \\\n  -H \"Content-Type: application/json\" \\\n  -X POST https://hnymk3astd.execute-api.us-west-2.amazonaws.com/Prod/events\n```", "```java\nBrooklyn, NY\n```", "```java\n$ curl -d '{\"locationName\":\"Oxford, UK\", \"temperature\":64,\n  \"timestamp\":1564428898, \"latitude\": 51.75, \"longitude\": -1.25}' \\\n  -H \"Content-Type: application/json\" \\\n  -X POST https://hnymk3astd.execute-api.us-west-2.amazonaws.com/Prod/events\n```", "```java\nOxford, UK\n```", "```java\n$ curl https://hnymk3astd.execute-api.us-west-2.amazonaws.com/Prod/locations\n```", "```java\n[{\"locationName\":\"Oxford, UK\",\"temperature\":64.0,\"timestamp\":1564428898,\n  \"longitude\":-1.25,\"latitude\":51.75},\n  {\"locationName\":\"Brooklyn, NY\",\"temperature\":91.0,\n  \"timestamp\":1564428897,\"longitude\":-73.99,\"latitude\":40.7}]\n```", "```java\n{\n  \"Records\": [\n    {\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-1\",\n      \"eventTime\": \"1970-01-01T00:00:00.000Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"s3\": {\n        \"bucket\": {\n          \"name\": \"example-bucket\",\n          \"arn\": \"arn:aws:s3:::example-bucket\"\n        },\n        \"object\": {\n          \"key\": \"test/key\",\n          \"size\": 1024\n        }\n      }\n    }\n  ]\n}\n```", "```java\npublic class BulkEventsLambda {\n  private final ObjectMapper objectMapper =\n      new ObjectMapper()\n          .configure(\n              DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n              false);\n  private final AmazonSNS sns = AmazonSNSClientBuilder.defaultClient();\n  private final AmazonS3 s3 = AmazonS3ClientBuilder.defaultClient();\n  private final String snsTopic = System.getenv(\"FAN_OUT_TOPIC\");\n\n  public void handler(S3Event event) {\n    event.getRecords().forEach(this::processS3EventRecord);\n  }\n\n  private void processS3EventRecord(\n      S3EventNotification.S3EventNotificationRecord record) {\n\n    final List<WeatherEvent> weatherEvents = readWeatherEventsFromS3(\n        record.getS3().getBucket().getName(),\n        record.getS3().getObject().getKey());\n\n    weatherEvents.stream()\n        .map(this::weatherEventToSnsMessage)\n        .forEach(message -> sns.publish(snsTopic, message));\n\n    System.out.println(\"Published \" + weatherEvents.size()\n              + \" weather events to SNS\");\n  }\n\n  private List<WeatherEvent> readWeatherEventsFromS3(String bucket, String key) {\n    try {\n      final S3ObjectInputStream s3is =\n          s3.getObject(bucket, key).getObjectContent();\n      final WeatherEvent[] weatherEvents =\n          objectMapper.readValue(s3is, WeatherEvent[].class);\n      s3is.close();\n      return Arrays.asList(weatherEvents);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  private String weatherEventToSnsMessage(WeatherEvent weatherEvent) {\n    try {\n      return objectMapper.writeValueAsString(weatherEvent);\n    } catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n```", "```java\n{\n  \"Records\": [\n    {\n      \"EventSubscriptionArn\": \"arn:aws:sns:us-east-1::ExampleTopic\",\n      \"Sns\": {\n        \"Type\": \"Notification\",\n        \"MessageId\": \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\",\n        \"TopicArn\": \"arn:aws:sns:us-east-1:123456789012:ExampleTopic\",\n        \"Subject\": \"example subject\",\n        \"Message\": \"example message\",\n        \"Timestamp\": \"1970-01-01T00:00:00.000Z\",\n        }\n      }\n  ]\n}\n```", "```java\npublic class SingleEventLambda {\n  private final ObjectMapper objectMapper =\n      new ObjectMapper()\n          .configure(\n              DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n              false);\n\n  public void handler(SNSEvent event) {\n    event.getRecords().forEach(this::processSNSRecord);\n  }\n\n  private void processSNSRecord(SNSEvent.SNSRecord snsRecord) {\n    try {\n      final WeatherEvent weatherEvent = objectMapper.readValue(\n          snsRecord.getSNS().getMessage(),\n          WeatherEvent.class);\n      System.out.println(\"Received weather event:\");\n      System.out.println(weatherEvent);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n```", "```java\n<project>\n  <groupId>my.groupId</groupId>\n  <artifactId>chapter5-Data-Pipeline</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>common-code</module>\n    <module>bulk-events-stage</module>\n    <module>single-event-stage</module>\n  </modules>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>com.amazonaws</groupId>\n        <artifactId>aws-java-sdk-bom</artifactId>\n        <version>1.11.600</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.amazonaws</groupId>\n        <artifactId>aws-lambda-java-events</artifactId>\n        <version>2.2.6</version>\n      </dependency>\n      <!-- etc -->\n    </dependencies>\n  </dependencyManagement>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>3.1.1</version>\n          <executions>\n            <execution>\n              <id>001-make-assembly</id>\n              <phase>package</phase>\n              <goals>\n                <goal>single</goal>\n              </goals>\n            </execution>\n          </executions>\n          <configuration>\n            <appendAssemblyId>false</appendAssemblyId>\n            <descriptors>\n              <descriptor>src/assembly/lambda-zip.xml</descriptor>\n            </descriptors>\n            <finalName>lambda</finalName>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>io.github.zlika</groupId>\n          <artifactId>reproducible-build-maven-plugin</artifactId>\n          <version>0.10</version>\n          <executions>\n            <execution>\n              <id>002-strip-jar</id>\n              <phase>package</phase>\n              <goals>\n                <goal>strip-jar</goal>\n              </goals>\n            </execution>\n          </executions>\n          <configuration>\n            <outputDirectory>${project.build.directory}</outputDirectory>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n</project>\n```", "```java\n<project>\n  <parent>\n    <groupId>my.groupId</groupId>\n    <artifactId>chapter5-Data-Pipeline</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n\n  <artifactId>common-code</artifactId>\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>reproducible-build-maven-plugin</artifactId>\n        <groupId>io.github.zlika</groupId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```", "```java\n<project>\n  <parent>\n    <groupId>my.groupId</groupId>\n    <artifactId>chapter5-Data-Pipeline</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n\n  <artifactId>bulk-events-stage</artifactId>\n\n  <dependencies>\n    <dependency>\n      <groupId>my.groupId</groupId>\n      <artifactId>common-code</artifactId>\n      <version>${project.parent.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.amazonaws</groupId>\n      <artifactId>aws-lambda-java-events</artifactId>\n    </dependency>\n    <!-- etc. -->\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <artifactId>reproducible-build-maven-plugin</artifactId>\n        <groupId>io.github.zlika</groupId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```", "```java\n.\n+--> bulk-events-stage\n|    +--> src/main/java/book/pipeline/bulk\n|    |                                +--> BulkEventsLambda.java\n|    +--> pom.xml\n+--> common-code\n|    +--> src/main/java/book/pipeline/common\n|    |                                +--> WeatherEvent.java\n|    +--> pom.xml\n+--> single-event-stage\n|    +--> src/main/java/book/pipeline/single\n|    |                                +--> SingleEventLambda.java\n|    +--> pom.xml\n+--> src/assembly\n|        +--> lambda-zip.xml\n+--> pom.xml\n+--> template.yaml\n```", "```java\nAWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: chapter5-data-pipeline\n\nGlobals:\n  Function:\n    Runtime: java8\n    MemorySize: 512\n    Timeout: 10\n\nResources:\n  PipelineStartBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-start\n\n  FanOutTopic:\n    Type: AWS::SNS::Topic\n\n  BulkEventsLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: bulk-events-stage/target/lambda.zip\n      Handler: book.pipeline.bulk.BulkEventsLambda::handler\n      Environment:\n        Variables:\n          FAN_OUT_TOPIC: !Ref FanOutTopic\n      Policies:\n       — S3ReadPolicy:\n           BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-start\n       — SNSPublishMessagePolicy:\n           TopicName: !GetAtt FanOutTopic.TopicName\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref PipelineStartBucket\n            Events: s3:ObjectCreated:\n\n  SingleEventLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: single-event-stage/target/lambda.zip\n      Handler: book.pipeline.single.SingleEventLambda::handler\n      Events:\n        SnsEvent:\n          Type: SNS\n          Properties:\n            Topic: !Ref FanOutTopic\n```", "```java\n!Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-start\n```", "```java\n$ sam deploy \\\n  --s3-bucket $CF_BUCKET \\\n  --stack-name chapter-five-data-pipeline \\\n  --capabilities CAPABILITY_IAM\n```", "```java\n$ PIPELINE_BUCKET=\"$(aws cloudformation describe-stack-resource \\\n  --stack-name chapter-five-data-pipeline \\\n  --logical-resource-id PipelineStartBucket \\\n  --query 'StackResourceDetail.PhysicalResourceId' \\\n  --output text)\"\n```", "```java\n$ aws s3 cp sampledata.json s3://${PIPELINE_BUCKET}/sampledata.json\n```"]