["```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-kubernetes\"\n```", "```java\nkubectl create secret generic greeting-security \\\n--from-literal=github.api.key.token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\\\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\\\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```", "```java\n@ConfigProperty(name = \"github.api.key.token\")\nString githubToken;\n```", "```java\nquarkus.container-image.group=quarkus ![1](Images/1.png)\nquarkus.container-image.name=greeting-started-kubernetes-secrets\nquarkus.container-image.tag=1.0-SNAPSHOT\nquarkus.kubernetes.image-pull-policy=if-not-present\nquarkus.kubernetes.env-vars.github-api-key-token.name=github.api.key.token ![2](Images/2.png)\nquarkus.kubernetes.env-vars.github-api-key-token.secret=greeting-security ![3](Images/3.png)\n```", "```java\n./mvnw clean package -DskipTests\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t quarkus/greeting-started-kubernetes-secrets:1.0-SNAPSHOT .\nkubectl apply -f target/kubernetes/kubernetes.yml\n\nkubectl patch svc greeting-started-kubernetes-secrets \\\n --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]'\ncurl $(minikube service greeting-started-kubernetes-secrets --url)/hello\n```", "```java\nquarkus.kubernetes.mounts.github-token.path=/deployment/github ![1](Images/1.png) ![2](Images/2.png)\nquarkus.kubernetes.mounts.github-token.read-only=true ![3](Images/3.png)\nquarkus.kubernetes.secret-volumes.github-token.secret-name=greeting-security![4](Images/4.png)\nquarkus.kubernetes.secret-volumes.github-token.default-mode=420 ![5](Images/5.png)\n```", "```java\n@GET\n@Path(\"/file\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String ghTokenFile() throws IOException {\n    final byte[] encodedGHToken = Files.readAllBytes(\n        Paths.get(\"/deployment/github/github.api.key.token\")); ![1](Images/1.png)\n    return new String(encodedGHToken);\n}\n```", "```java\n./mvnw clean package -DskipTests\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t quarkus/greeting-started-kubernetes-secrets:1.0-SNAPSHOT .\nkubectl apply -f target/kubernetes/kubernetes.yml\n\nkubectl patch svc greeting-started-kubernetes-secrets --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]'\ncurl $(minikube service greeting-started-kubernetes-secrets --url=/hello/file\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-vault\"\n```", "```java\nquarkus.vault.url=http://localhost:8200 ![1](Images/1.png)\nquarkus.vault.authentication.userpass.username=alex ![2](Images/2.png)\nquarkus.vault.authentication.userpass.password=alex\n\nquarkus.vault.kv-secret-engine-version=2 ![3](Images/3.png)\nquarkus.vault.secret-config-kv-path=myapps/vault-service/config\n```", "```java\n@ConfigProperty(name = \"foo\") ![1](Images/1.png)\nString foo;\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return foo;\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl http://localhost:8080/hello\nsecretbar\n```", "```java\n@Inject\nVaultKVSecretEngine kvSecretEngine;\n\nfinal Map<String, String> secrets = kvSecretEngine\n  .readSecret(\"myapps/vault-service/config\"); ![1](Images/1.png)\nfinal String fooSecret = secrets.get(\"foo\");\n```", "```java\ndocker exec -it dev-vault sh export VAULT_TOKEN=s.ty3QS2uNaxPdiFsSZpCQfjpc ![1](Images/1.png)\n\nvault secrets enable transit ![2](Images/2.png)\n\nvault write -f transit/keys/my_encryption ![3](Images/3.png)\nvault write transit/keys/my-sign-key type=ecdsa-p256 ![4](Images/4.png)\n```", "```java\ncat <<EOF | vault policy write vault-service-policy -\npath \"transit/*\" {\n capabilities = [ \"create\", \"read\", \"update\" ]\n}\nEOF\n```", "```java\nvault auth enable userpass vault write auth/userpass/users/alex password=alex \\\n policies=vault-service-policy ![1](Images/1.png)\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-vault\"\n```", "```java\nquarkus.vault.url=http://localhost:8200 ![1](Images/1.png)\n\nquarkus.vault.authentication.userpass.username=alex ![2](Images/2.png)\nquarkus.vault.authentication.userpass.password=alex\n```", "```java\n@Inject\nVaultTransitSecretEngine transit; ![1](Images/1.png)\n\n@GET\n@Path(\"/encrypt\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String encrypt(@QueryParam(\"text\") String text) {\n    return transit.encrypt(\"my_encryption\", text); ![2](Images/2.png)\n}\n\n@GET\n@Path(\"/decrypt\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String decrypt(@QueryParam(\"text\") String text) {\n    return transit.decrypt(\"my_encryption\", text).asString(); ![3](Images/3.png)\n}\n\n@GET\n@Path(\"/sign\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String sign(@QueryParam(\"text\") String text) {\n    return transit.sign(\"my-sign-key\", text); ![4](Images/4.png)\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl http://localhost:8080/hello/encrypt?text=Ada\nvault:v1:iIunGAElLpbaNWWqZq1yf4cctkEUOFdJE1oRTaSI2g==\n\ncurl http://localhost:8080/hello/decrypt? \\\n text=vault:v1:iIunGAElLpbaNWWqZq1yf4cctkEUOFdJE1oRTaSI2g==\nAda\n\ncurl http://localhost:8080/hello/sign?text=Alexandra\nvault:v1:MEUCIGkgS5VY5KEU2yHqnIn9qwzgfBUv3O2H4bgNAFVrYCK3AiEAnQznfdEZI6b\\\n /Xtko/wEl8WhZLuKZQ/arOYkfsnwBH3M=\n```", "```java\ndocker exec -it dev-vault sh export VAULT_TOKEN=s.ty3QS2uNaxPdiFsSZpCQfjpc ![1](Images/1.png)\n\nvault kv put secret/myapps/vault-service/db password=alex ![2](Images/2.png)\n```", "```java\ncat <<EOF | vault policy write vault-service-policy -\npath \"secret/data/myapps/vault-service/*\" {\n capabilities = [\"read\"]\n}\nEOF\n```", "```java\nvault auth enable userpass vault write auth/userpass/users/alex password=alex \\\n policies=vault-service-policy ![1](Images/1.png)\n```", "```java\ndocker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n --name postgres-quarkus-hibernate -e POSTGRES_USER=alex \\\n -e POSTGRES_PASSWORD=alex -e POSTGRES_DB=mydatabase \\\n -p 5432:5432 postgres:10.5\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-vault, quarkus-hibernate-orm-panache, \\\n quarkus-jdbc-postgresql, quarkus-resteasy-jsonb\"\n```", "```java\nquarkus.datasource.url=jdbc:postgresql://localhost:5432/mydatabase\nquarkus.datasource.driver=org.postgresql.Driver\nquarkus.datasource.username=alex\nquarkus.datasource.credentials-provider=mydatabase ![1](Images/1.png)\nquarkus.vault.credentials-provider.mydatabase\\\n  .kv-path=myapps/vault-service/db ![2](Images/2.png)\nquarkus.vault.url=http://localhost:8200 ![3](Images/3.png)\nquarkus.vault.authentication.userpass.username=alex\nquarkus.vault.authentication.userpass.password=alex\nquarkus.vault.kv-secret-engine-version=2\nquarkus.hibernate-orm.database.generation=drop-and-create\n%dev.quarkus.hibernate-orm.sql-load-script=import.sql\n%dev.quarkus.hibernate-orm.log.sql=true\n```", "```java\nvault secrets enable database\n\ncat <<EOF | vault policy write vault-service-policy -\npath \"database/creds/mydbrole\" {\n capabilities = [ \"read\" ]\n}\nEOF\n\nvault write database/config/mydb\n plugin_name=postgresql-database-plugin \\\n allowed_roles=mydbrole \\\n connection_url=postgresql://{{username}}:{{password}}\\\n @localhost:5432/mydb?sslmode=disable \\\n username=alex \\\n password=alex\n\nvault write database/roles/mydbrole \\\n db_name=mydb \\\n creation_statements=\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD \\\n '{{password}}' VALID UNTIL '{{expiration}}'; \\\n GRANT SELECT,INSERT, UPDATE, DELETE ON ALL \\\n TABLES IN SCHEMA public TO \\\"{{name}}\\\"; \\\n GRANT USAGE, SELECT ON ALL SEQUENCES IN \\\n SCHEMA public to \\\"{{name}}\\\";\" \\\n default_ttl=\"1h\" \\\n revocation_statements=\"ALTER ROLE \\\"{{name}}\\\" NOLOGIN;\" \\\n renew_statements=\"ALTER ROLE \\\"{{name}}\\\" VALID UNTIL '{{expiration}}';\" \\\n max_ttl=\"24h\"\n```", "```java\nquarkus.vault.url=https://localhost:8200\nquarkus.vault.authentication.userpass.username=alex\nquarkus.vault.authentication.userpass.password=alex\n\nquarkus.datasource.driver=org.postgresql.Driver\nquarkus.datasource.url=jdbc:postgresql://localhost:6543/mydb\nquarkus.datasource.username=postgres\n\nquarkus.datasource.credentials-provider=dynamic-ds ![1](Images/1.png)\nquarkus.datasource.credentials-provider-type=vault-credentials-provider\nquarkus.vault.credentials-provider.dynamic-ds.database-credentials-role=\\\n  mydbrole ![2](Images/2.png)\n```", "```java\nkubectl get secret vault-token-mm5qx -o jsonpath='{.data.token}' \\\n | base64 --decode > jwt.txt ![1](Images/1.png) ![2](Images/2.png)\n\ncat jwt.txt eyJhbGciOiJSUzI1NiIsImtpZCI6Inp0WWZBcl8weW1SaTI1bjRNYVNHNmtXOUhCWDV\\ yczhYandVYkVETktzRHMifQ.\n```", "```java\nkubectl get secret vault-token-mm5qx -o jsonpath=\"{.data['ca\\.crt']}\" \\\n | base64 --decode > ca.crt ![1](Images/1.png) ![2](Images/2.png)\n\ncat ca.crt \n-----BEGIN CERTIFICATE----- MIIC5zCCAc+gAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwptaW5p -----END CERTIFICATE-----\n```", "```java\nkubectl port-forward svc/vault 8200:8200\n```", "```java\nexport VAULT_TOKEN=root ![1](Images/1.png)\nexport VAULT_ADDR='http://localhost:8200' \ncat <<EOF | vault policy write vault-service-policy - ![2](Images/2.png)\npath \"secret/data/myapps/vault-service/*\" {\n capabilities = [\"read\"] } EOF \nvault kv put secret/myapps/vault-service/config foo=secretbar ![3](Images/3.png)\n```", "```java\nvault auth enable kubernetes ![1](Images/1.png)\n\nvault write auth/kubernetes/config \\ ![2](Images/2.png)\n token_reviewer_jwt=@jwt.txt \\ ![3](Images/3.png)\n kubernetes_host=https://kubernetes.default.svc \\ ![4](Images/4.png)\n kubernetes_ca_cert=@ca.crt ![5](Images/5.png)\n\nvault write auth/kubernetes/role/example \\ ![6](Images/6.png)\n bound_service_account_names=vault \\ ![7](Images/7.png)\n bound_service_account_namespaces=default \\ ![8](Images/8.png)\n policies=vault-service-policy ![9](Images/9.png)\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-vault, quarkus-kubernetes\"\n```", "```java\n@ConfigProperty(name = \"foo\")\nString foo;\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return foo;\n}\n```", "```java\nquarkus.vault.url=http://vault:8200 ![1](Images/1.png)\nquarkus.vault.kv-secret-engine-version=2\nquarkus.vault.secret-config-kv-path=myapps/vault-service/config\n\nquarkus.vault.authentication.kubernetes.role=example ![2](Images/2.png)\nkubernetes.service-account=vault ![3](Images/3.png)\n\nkubernetes.group=quarkus ![4](Images/4.png)\nkubernetes.name=greeting-app\nkubernetes.version=latest\n```", "```java\n./mvnw clean package -DskipTests\n\ndocker build -f src/main/docker/Dockerfile.jvm \\\n -t quarkus/greeting-started-vault-kubernetes-auth:1.0-SNAPSHOT .\nkubectl apply -f target/kubernetes/kubernetes.yml\n\nkubectl patch svc greeting-app --type='json' \\\n -p '[{\"op\":\"replace\",\"path\":\"/spec/type\",\"value\":\"NodePort\"}]'\ncurl $(minikube service greeting-app --url)/hello\n```", "```java\nkubectl apply -f src/main/kubernetes/vault-dev-deployment.yaml \nkubectl get pods ![1](Images/1.png)\nNAME      READY   STATUS    RESTARTS   AGE vault-0   1/1     Running   0          44s \nkubectl get secrets NAME                  TYPE                                  DATA   AGE default-token-zdw8r   kubernetes.io/service-account-token   3      2d greeting-security     Opaque                                1      3h9m vault-token-mm5qx     kubernetes.io/service-account-token   3      8s ![2](Images/2.png)\n```"]