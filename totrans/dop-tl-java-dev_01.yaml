- en: Chapter 1\. DevOps for (or Possibly Against) Developers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。DevOps 针对（或可能反对）开发人员
- en: Baruch Sadogursky
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 巴鲁克·萨多古斯基
- en: While you here do snoring lie,
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你在这里打呼噜时，
- en: Open-eyed conspiracy His time doth take.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 睁眼的阴谋占据他的时间。
- en: If of life you keep a care,
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你关心生活，
- en: 'Shake off slumber, and beware:'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 摆脱沉睡，小心：
- en: Awake, awake!
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 醒来，醒来！
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: William Shakespeare, *The Tempest*
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 威廉·莎士比亚，《暴风雨》
- en: Some might ask if the DevOps movement is simply an ops-inspired plot against
    developers. Most (if not all) who would do so wouldn’t expect a serious response,
    not least because they intend the question as tongue-in-cheek teasing. It’s also
    because—and regardless of whether your origins are on the development or the operations
    side of the equation—when anyone strikes up a conversation about DevOps, it will
    take approximately 60 seconds before someone inquires, “But what is DevOps *really*?”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会问，DevOps 运动是否只是针对开发人员的运维方面的阴谋。大多数人（如果不是全部的话）这样做并不期望得到严肃的回答，至少因为他们把这个问题当作开玩笑。这也是因为——不管你的起源是开发还是运维方面——当有人谈论
    DevOps 时，大约 60 秒后会有人询问，“但是 DevOps *真的*是什么？”
- en: And you’d think, 11 years after the coining of the term (a decade within which
    industry professionals have spoken, debated, and shouted about it), that we’d
    all have arrived at a standard, no-nonsense, commonly understood definition. But
    this simply isn’t the case. In fact, despite an exponentially increasing corporate
    demand for DevOps personnel, it’s highly doubtful that any five DevOps-titled
    employees, chosen at random, could tell you *precisely* what DevOps is.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你会想，自从这个术语被创造出来以来的 11 年时间内（在这个期间，行业专业人员已经讨论、辩论和喧嚷过它），我们都应该已经达成了一个标准、毫无废话、共同理解的定义。但事实并非如此。事实上，尽管企业对
    DevOps 人员的需求呈指数级增长，但几乎可以肯定地说，随机选择的五个 DevOps 职称的员工中，没有一个人能*精确地*告诉你 DevOps 是什么。
- en: So, don’t be embarrassed if you still find yourself scratching your head when
    the subject comes up. Conceptually, DevOps may not be easy to grok, but it’s not
    impossible either.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果在谈到这个话题时你仍然感到困惑，不要感到尴尬。概念上，DevOps 可能不容易理解，但也不是不可能。
- en: 'But regardless of how we discuss the term or what definition(s) we might agree
    upon, there’s one thing, above all else, that’s critical to bear in mind: DevOps
    is an entirely invented concept, and the inventors came from the ops side of the
    equation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但无论我们如何讨论这个术语或者我们可能同意的定义是什么，有一件事，比其他一切都更重要，那就是必须牢记：DevOps 是一个完全虚构的概念，而发明者来自运维方面。
- en: DevOps Is a Concept Invented by the Ops Side
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 是由运维方面创造的概念
- en: My premise about DevOps may be provocative, but it’s provable too. Let’s start
    with the facts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我关于 DevOps 的假设可能会引起争议，但也可以证明。让我们从事实开始。
- en: 'Exhibit 1: The Phoenix Project'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陈列品 1：《凤凰项目》
- en: '*The Phoenix Project* by Gene Kim et al. (IT Revolution) became a classic since
    published almost a decade ago. It’s not a how-to manual (not in the traditional
    sense, anyway). It’s a novel that tells the story of a highly problematic company
    and its IT manager who is suddenly assigned the task of implementing a make-or-break
    corporate initiative that’s already way over budget and months behind schedule.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*《凤凰项目》* 由吉恩·金等人（IT 革命）出版近十年来成为经典之作。这不是一本传统意义上的操作手册。这是一部小说，讲述了一个问题重重的公司及其突然被分配任务的IT经理，要实施一个已经超出预算和拖延了数月的至关重要的公司倡议的故事。'
- en: 'If you dwell in the realms of software, the rest of the book’s central characters
    will be familiar to you. For the moment, though, let’s have a look at their professional
    titles:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你生活在软件领域，那么这本书的其他主要人物对你来说应该很熟悉。不过，现在让我们来看看他们的专业头衔：
- en: Director, IT service support
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IT 服务支持总监
- en: Director, distributed technology
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式技术总监
- en: Manager, retail sales
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零售销售经理
- en: Lead systems administrator
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主系统管理员
- en: Chief information security officer
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首席信息安全官
- en: Chief financial officer
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首席财务官
- en: Chief executive officer
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首席执行官
- en: Notice the connective tissue between them? They’re the protagonists of one of
    *the* most important books about DevOps ever written and *not one* of them is
    a developer. Even when developers do figure into the plotline, well…let’s just
    say they’re not spoken of in particularly glowing terms.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它们之间的联系了吗？他们是有史以来关于 DevOps 最重要的书籍之一的主人公，而且其中*一个*也不是开发人员。即使开发人员确实出现在情节中，嗯...我们只能说他们的表现并不是特别抢眼。
- en: When victory comes, it’s the hero of the story (together with a supportive board
    member) who invents DevOps, pulls the project’s fat out of the fire, turns his
    company’s fortunes around, and gets rewarded with a promotion to chief information
    officer (CIO) of the enterprise. And everyone lives happily—if not ever after,
    then for at least the two or three years such successes tend to buy you in this
    business before it’s time to prove your worth all over again.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当胜利到来时，故事的英雄（连同一个支持的董事成员）发明了DevOps，拯救了项目的失败，扭转了公司的命运，并被提升为企业的首席信息官（CIO）。每个人都过得很幸福——即使不是永远，至少是在这种成功通常会给你带来两三年时间之前，重新证明自己的价值之前。
- en: 'Exhibit 2: The DevOps Handbook'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陈列2：《DevOps手册》
- en: It’s better to read *The Phoenix Project* before *The DevOps Handbook* by Gene
    Kim et al. (IT Revolution) because the former places you within a highly believable,
    human scenario. It’s not difficult to immerse yourself in the personality types,
    the professional predicaments, and the interpersonal relationships of the characters.
    The hows and whys of DevOps unfold as inevitable and rational responses to a set
    of circumstances, which could have just as easily led to business collapse. The
    stakes, the characters, and the choices they make all seem quite plausible. Parallels
    to your own experience may not be too hard to draw.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最好在Gene Kim等人的《DevOps手册》（IT Revolution）之前阅读《凤凰项目》，因为前者可以将你置于一个高度真实的、人性化的场景中。你可以轻易地沉浸在人物类型、专业困境和人际关系中。DevOps的实现方式和原因会像是对一系列情况的必然和理性回应，这些情况本可以导致业务崩溃。故事中的赌局、人物和他们所做的选择似乎都非常合理。可能很容易与你自己的经验进行类比。
- en: '*The DevOps Handbook* allows you to explore the component conceptual parts
    of DevOps principles and practices in greater depth. As its subtitle suggests,
    the book goes a long way toward explaining *How to Create World-Class Agility,
    Reliability, and Security in Technology Organizations*. But shouldn’t that be
    about development? Whether it should or shouldn’t may be open to debate. What’s
    incontrovertible is that the book’s authors are bright, super-talented professionals
    who are, arguably, the fathers of DevOps. However, Exhibit 2 isn’t included here
    to praise them so much as to take a close look at their backgrounds.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 《DevOps手册》允许你更深入地探索DevOps原则和实践的各个概念部分。正如其副标题所示，这本书在解释“如何在技术组织中创建世界一流的灵活性、可靠性和安全性”方面走得很远。但这是否应该是关于开发的？是否应该或不应该可能存在争议。无可辩驳的是，这本书的作者们都是聪明、超级有才华的专业人士，可以说是DevOps的奠基人。然而，陈列2并非在这里赞扬他们，而是要仔细审视他们的背景。
- en: Let’s start with Gene Kim. He founded the software security and data integrity
    firm Tripwire, serving as its chief technology officer (CTO) for over a decade.
    As a researcher, he’s devoted his professional attention to examining and understanding
    the technological transformations that have and are occurring within large, complex
    businesses and institutions. In addition to coauthoring *The* *Phoenix Project*,
    in 2019 he coauthored *The Unicorn Project* (which I’ll have more to say about
    later). Everything about his career is steeped in ops. Even when *Unicorn* says
    it’s “about Developers,” it’s still developers as seen through the eyes of an
    ops guy!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从吉恩·金（Gene Kim）开始。他创立了软件安全和数据完整性公司Tripwire，并担任首席技术官（CTO）长达十多年。作为一名研究者，他致力于研究和理解大型复杂企业和机构中正在发生和已经发生的技术变革。除了合著《凤凰项目》外，他还于2019年合著了《独角兽项目》（稍后我会详细说说）。他的整个职业生涯都深深植根于运维。即使《独角兽》说它是“关于开发者”，它仍然是从运维人员的角度来看待开发者！
- en: 'As for the other three authors of the *Handbook*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 至于《手册》的其他三位作者：
- en: Jez Humble has held positions including site reliability engineer (SRE), CTO,
    deputy director of Delivery Architecture and Infrastructure Services, and Developer
    Relations. An ops guy! Even though the last of his titles references development,
    the job isn’t *about* that. It’s about relations *with* developers. It’s about
    narrowing the divide between dev and ops, about which he has written, taught,
    and lectured extensively.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杰兹·汉布尔（Jez Humble）曾担任过包括站点可靠性工程师（SRE）、首席技术官（CTO）、交付架构和基础设施服务副主任以及开发者关系的职位。一个运维人员！尽管他的最后一个头衔提到开发，工作并不是关于那个。它是关于与开发者的关系。它是关于缩小开发与运维之间的鸿沟，关于这些他已经广泛地写作、教学和演讲。
- en: Patrick Debois has served as a CTO, director of Market Strategy, and director
    of Dev♥Ops Relations (the heart is his addition). He describes himself as a professional
    who is “bridging the gap between projects and operations by using Agile techniques
    in development, project management, and system administration.” That sure sounds
    like an ops guy.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帕特里克·德博伊斯曾担任首席技术官、市场战略总监和Dev♥Ops关系总监（心形是他添加的）。他将自己描述为一个专业人士，通过在开发、项目管理和系统管理中使用敏捷技术来“弥合项目和运维之间的鸿沟”。这确实听起来像一个运维人员。
- en: John Willis, as of this writing, holds the title of VP of DevOps and Digital
    Practices. Previously, he’s been a director of Ecosystem Development, a VP of
    Solutions, and notably a VP of Training and Services at Opscode (now known as
    Progress Chef). And while John’s career has been a bit more deeply involved with
    development, most of his work has been about ops, particularly to the degree that
    he has focused his attention on tearing down the walls that had once kept developers
    and operations personnel in distinct and separate camps.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至目前为止，约翰·威利斯担任DevOps和数字实践副总裁。此前，他曾担任生态系统开发总监、解决方案副总裁，特别是在Opscode（现在被称为Progress
    Chef）担任过培训与服务副总裁。尽管约翰的职业生涯更深入地涉及开发，但他的大部分工作都与运维有关，特别是他将注意力集中在打破曾经将开发人员和运维人员分为独立阵营的壁垒上。
- en: As you can see, all the authors have an ops background. Coincidence? I think
    *not*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，所有的作者都有运维背景。巧合吗？我认为 *不是*。
- en: Still not convinced that DevOps is ops driven? How about we have a look at the
    leaders trying to sell us on DevOps today.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还不确定DevOps是由运维驱动的？那我们来看看今天试图向我们推销DevOps的领导人吧。
- en: Google It
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌搜索
- en: 'As of this writing, if you typed “What is DevOps?” in a Google search just
    to see what would come up, your first page of results would likely include the
    following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前为止，如果你在谷歌搜索中键入“什么是DevOps？”只是想看看会出现什么，你的第一页结果很可能包括以下内容：
- en: Agile Admin, a system administration company
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷管理，一个系统管理公司
- en: Atlassian, whose products include project and issue tracking, list making, and
    team collaboration platforms
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atlassian，其产品包括项目和问题跟踪、列表制作以及团队协作平台
- en: Amazon Web Services (AWS), Microsoft Azure, and Rackspace Technology, all of
    which sell cloud ops infrastructure
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（AWS）、微软Azure和Rackspace Technology，它们都销售云运维基础设施
- en: Logz.io, which sells log management and analysis services
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logz.io，销售日志管理和分析服务
- en: New Relic, whose specialty is application monitoring
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: New Relic，其专业是应用程序监控
- en: All of these are very ops-focused. Yes, that first page contained one firm that
    was a bit more on the development side and one other that really wasn’t directly
    related to the search. The point is that when you try to look for DevOps, most
    of what you’ll find tends to skew toward ops.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都非常关注运维。是的，第一页包含了一个稍微偏向开发的公司和另一个与搜索无直接关系的公司。重点是，当你试图寻找DevOps时，大部分内容都倾向于运维。
- en: What Does It Do?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是做什么的？
- en: DevOps *is* a thing! It’s in *big* demand. And with this, many will want to
    know, concretely, what DevOps *does*, what it substantively produces. Rather than
    go down that route, let’s look at it structurally, conceptualizing it as you would
    the sideways, figure-eight-shaped infinity symbol. In this light, we see a loop
    of processes that goes from coding to building to testing to release to deployment
    to operations to monitoring, and then back again to begin planning for new features,
    as shown in [Figure 1-1](#devops_infinity_loop).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps *是* 一种事物！它 *非常* 受欢迎。因此，许多人会想要明确知道，DevOps *做* 什么，它实质性地产生了什么。而不是深入探讨这一点，让我们从结构上看待它，将其概念化，就像你会看待侧向的、八字形的无限符号一样。在这种光线下，我们看到一个从编码到构建再到测试再到发布再到部署再到运维再到监控的流程循环，然后再回到开始计划新功能的过程，如
    [图1-1](#devops_infinity_loop) 所示。
- en: '![An image of infinity symbol,broken into 8 steps of DevOps](Images/dtjd_0101.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![一个无限符号的图像，分为8个DevOps步骤](Images/dtjd_0101.png)'
- en: Figure 1-1\. DevOps infinity loop
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. DevOps无限循环
- en: And if this looks familiar to some readers, it should because it bears a conceptual
    similarity to the Agile development cycle ([Figure 1-2](#agile_cycle)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对某些读者看起来很熟悉，那是因为它与敏捷开发周期有概念上的相似性（[图1-2](#agile_cycle)）。
- en: '![An image of a nugget,broken into 6 steps of Agile](Images/dtjd_0102.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![一个鸡块的图像，分为6个敏捷步骤](Images/dtjd_0102.png)'
- en: Figure 1-2\. Agile development cycle
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 敏捷开发周期
- en: There’s no profound difference between these two never-ending stories other
    than the fact that ops folks grafted themselves onto the old world of the Agile
    circle, essentially stretching it into two circles and shoehorning their concerns
    and pains into the domain that was once considered solely the province of developers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个永无止境的故事没有根本的差异，除了运维人员将自己嫁接到敏捷圈的旧世界之外，本质上将其分成两个圈子，并将其关注和痛苦塞入曾被认为只属于开发人员的领域。
- en: State of the Industry
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行业现状
- en: 'Since 2014, further proof that DevOps is an ops-driven phenomenon has come
    packaged in the form of an easy-to-read annual digest of data collected, analyzed,
    and summarized from tens of thousands of industry professionals and organizations
    worldwide. The “Accelerate: State of DevOps” report was primarily the work of
    DevOps Research and Assessment (DORA) and is *the* most important document in
    the software industry to gauge where DevOps is and where it’s likely going. In
    [the 2018 edition](https://oreil.ly/jWjvX), for example, we can see a serious
    focus on questions such as these:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 自2014年以来，进一步证明DevOps是一种由运维驱动的现象，已经打包成了一份易于阅读的年度摘要，其中包含了全球数万名行业专业人士和组织收集、分析和总结的数据。《加速：DevOps现状》报告主要由DevOps研究与评估（DORA）完成，是软件行业中**最重要的文献**，用来衡量DevOps现状及其未来发展方向。例如，在[2018年版](https://oreil.ly/jWjvX)中，我们可以看到对以下问题的严肃关注：
- en: How often do organizations deploy code?
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织多频繁部署代码？
- en: How long does it typically take to go from code commits to successfully running
    in production?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从代码提交到成功运行生产环境通常需要多长时间？
- en: When impairments or outages occur, how long does it generally take to restore
    service?
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生故障或停机时，通常需要多长时间恢复服务？
- en: What percentage of deployed changes result in degraded service or require remediation?
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署变更的百分比导致服务降级或需要补救？
- en: Notice that all of those are very ops-centered concerns.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有这些都是非常侧重于运维的关注点。
- en: What Constitutes Work?
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么构成工作？
- en: 'Now let’s examine how *work* is defined by the “Accelerate: State of DevOps”
    report and *The Phoenix Project*. Well, first, *planned* work focuses on business
    projects and new features, which span both ops and dev. Internal projects, including
    server migrations, software updates, and changes driven by feedback on deployed
    projects can be broad-based and may or may not weight more to one side of the
    DevOps equation than the other.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下《加速：DevOps现状》报告和《凤凰项目》如何定义*工作*。首先，*计划的*工作侧重于业务项目和新功能，涵盖了运维和开发。内部项目包括服务器迁移、软件更新以及对已部署项目反馈驱动的变更可能是广泛的，并且可能或可能不会更多地倾向于DevOps等式的一侧。
- en: But what about *unplanned* activities, such as support escalations and emergency
    outages? Those are ops heavy, as is the coding of new features, bug fixes, and
    refactoring—which are all about how the life of ops can be made easier by *including*
    developers in the DevOps story.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，像支持升级和紧急停机这样的*非计划*活动呢？这些都非常侧重于运维，就像编写新功能、修复错误和重构一样——这一切都是如何通过*将*开发人员包括在DevOps故事中来使运维生活变得更轻松。
- en: If We’re Not About Deployment and Operations, Then Just What Is Our Job?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果我们的工作不是部署和运维，那么我们的工作是什么？
- en: Clearly, DevOps isn’t anything developers were (or are) demanding. It’s an ops
    invention to make everyone else work harder. And assuming this truth, let’s ponder
    what would happen if developers were to rise up as one and say, “Your ops concerns
    are *yours*, not ours.” Fine. But in that case, it would be only right and proper
    to ask the rebelling developers for their definition of “done.” What standards
    do they believe they need to achieve to say, “We did our job well and our part
    is now complete”?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，DevOps并不是开发人员（或者曾经）要求的任何东西。这是一种运维发明，目的是让其他人工作更加努力。假设这是真的，让我们思考一下，如果开发人员能够团结一致地说：“你们的运维问题是*你们的*，而不是我们的。”好吧。但是在这种情况下，询问反抗的开发人员他们对“完成”的定义将是完全正确和合理的。他们认为他们需要达到什么标准才能说：“我们的工作做得很好，我们的部分现在已经完成”？
- en: 'This isn’t a flippant question, and there are sources we can look to for answers.
    One, although imperfect and not infrequently criticized, is the [Manifesto for
    Software Craftsmanship](https://oreil.ly/mTAUe), which puts forth four fundamental
    values that should motivate developers. Let’s consider them:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个轻率的问题，我们可以找到答案的来源。其中之一，尽管并不完美且经常受到批评，是[软件工艺宣言](https://oreil.ly/mTAUe)，提出了四个应激发开发人员的基本价值观。让我们来考虑一下：
- en: Well-crafted software
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 精心打造的软件
- en: Yes, indeed, quality is important.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，质量确实很重要。
- en: Steadily adding value
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 持续增加价值
- en: No argument there. Of course we want to provide services and features that people
    need, want, or would like.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 没有异议。当然，我们希望提供人们需要、想要或愿意的服务和功能。
- en: Community of professionals
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 专业人士的社区
- en: In broad strokes, who could oppose this? Cordiality among industry peers is
    just being professionally neighborly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从宏观角度来看，谁会反对呢？在行业同行之间的友好相处只是职业上的邻里之间的亲切关系。
- en: Productive partnerships
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 富有成效的合作伙伴关系
- en: Collaboration is certainly the name of the game. Developers aren’t against quality
    assurance (QA), ops, or the products themselves. So, in context, this is just
    about being friendly with everybody (so long as other teams don’t start dictating
    what their jobs are supposed to be).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 合作肯定是游戏的名字。开发人员并不反对质量保证（QA）、运维或产品本身。因此，在这种情况下，这只是与每个人友好相处的问题（只要其他团队不开始指定他们的工作职责）。
- en: Just What Constitutes “Done”?
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 到底什么算是“完成”？
- en: With all that we’ve established so far, we can safely say that we need to produce
    code that’s simple, readable, understandable, and easy to deploy. We must be certain
    that nonfunctional requirements (e.g., performance, throughput, memory footprint,
    security, privacy, etc.) are satisfied. We should work diligently to avoid incurring
    any technical baggage and, if we’re lucky, shed some along the way. We have to
    be sure that all tests pass. And we’re obligated to maintain fruitful relations
    with QA teams (when they’re happy, we’re happy).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 借助我们迄今为止建立的一切，我们可以安全地说，我们需要编写简单、可读、易理解和易部署的代码。我们必须确保满足非功能性需求（例如性能、吞吐量、内存占用、安全性、隐私等）。我们应该努力避免产生任何技术负担，并且如果幸运的话，沿途还能减轻一些负担。我们必须确保所有测试都通过。而且我们有责任与质量保证团队保持良好的关系（当他们满意时，我们也会很开心）。
- en: With good-quality code, plus positive team leader and peer reviews, everything
    should be fine out of the gate. With a product team that defines standards for
    value and added value, benchmarks can be firmly established. Through their feedback,
    product owners help to determine whether those benchmarks are (or aren’t) being
    met and by how much. That’s a pretty good thumbnail definition of a good software
    developer having “done” what they needed to do. It also demonstrates that “well
    done” can never adequately be measured (or even known) without the involvement
    of and clear communications with ops personnel.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有了高质量的代码，再加上积极的团队领导和同行评审，一切都应该顺利。通过产品团队为价值和附加值定义标准，可以牢固地建立基准。通过他们的反馈，产品所有者帮助确定这些基准是否（或是否未能）得到满足，以及到了什么程度。这是一个非常好的简略定义，说明了一个优秀的软件开发人员完成了他们需要做的事情。它还表明，“做得好”如果没有与运营人员的参与和清晰的沟通，是无法充分衡量（甚至无法知晓）的。
- en: Rivalry?
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 竞争？
- en: So yes, although it *can* be proven that DevOps really wasn’t anything for which
    developers were clamoring, it can equally be shown that its infinite practice
    benefits everyone. And still there are holdouts; those who imagine a rivalry,
    even an antagonism, between developers and, for example, QA testers. Developers
    work hard on their creations and then feel like the QA teams are almost like hackers,
    out to prove something, just digging and digging until they find a problem.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以是的，尽管*可以*证明 DevOps 真的不是开发人员迫切需要的东西，但同样可以证明它的无限实践对每个人都有好处。但仍然存在一些顽固分子；那些想象开发人员和例如质量保证（QA）测试人员之间存在竞争甚至敌意的人。开发人员努力工作来创建他们的作品，然后感觉
    QA 团队几乎像是黑客，试图证明某些问题，不停地深挖。
- en: This is where DevOps counseling comes in. Every conscientious developer wants
    to be proud of what they’re producing. Finding flaws can seem like criticism,
    when it’s really just conscientious work coming from another direction. Good,
    clear, open, and continuous communication between developers and QA personnel
    helps reinforce the benefits of DevOps, but it also makes plain that *everyone*
    is ultimately working toward the same goal. When QA folks identify bugs, all they’re
    doing is helping their developer colleagues to write better code, to be *better*
    developers. And this example of interplay between those on the ops side and others
    on the dev side demonstrates the useful blurring of the distinctions and separations
    between the two worlds. Their relationship is necessarily symbiotic and, once
    again, works along an endless continuum of activities, with one informing the
    other for the mutual benefit of all.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 DevOps 咨询的用武之地。每个尽责的开发者都希望为自己的工作感到自豪。发现缺陷可能看起来像是批评，但实际上只是来自另一个方向的尽责工作。开发人员和质量保证人员之间良好、清晰、开放和持续的沟通有助于强化
    DevOps 的好处，但也清楚地表明*每个人*最终都在为同一个目标而努力。当质量保证人员发现缺陷时，他们所做的只是帮助他们的开发人员同事编写更好的代码，成为*更好的*开发人员。这种运作方式展示了运维方面与开发方面之间相互作用的例子，显示了这两个世界之间的区别和分离之间的有用模糊。他们的关系必然是共生的，并且再次沿着无穷无尽的活动连续体工作，一个方面为了所有人的共同利益而通知另一个方面。
- en: More Than Ever Before
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前所未有的情况
- en: The increasing demand for DevOps is coming as much from external forces as it
    is from within software companies themselves. And this is because our expectations,
    *all* of our expectations, as people living in a 21st century world, continue
    to change rapidly. The more reliant we become on ever-improving software solutions,
    the less time we have to waste on information and communication gaps, and delays
    between developers and operations personnel.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对 DevOps 的需求增长不仅来自于软件公司内部，也同样来自于外部力量。这是因为我们的期望，*所有*我们的期望，作为生活在 21 世纪世界中的人，继续迅速变化。我们对不断改进的软件解决方案越来越依赖，我们就越没有时间浪费在信息和沟通差距以及开发人员与运营人员之间的延迟上。
- en: Take, for example, banking. A decade ago, most major banks had reasonably adequate
    websites. You could log in to have a look at your accounts, your statements, and
    recent transactions. Maybe you were even beginning to make payments electronically
    through the e-services your bank was offering. And while those services were nice
    and offered a certain amount of convenience, you likely still needed to go (or,
    at least, felt more comfortable going) to your local branch to handle your banking
    affairs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以银行为例。十年前，大多数主要银行都有相当合适的网站。你可以登录查看你的账户、你的对账单和最近的交易。也许你甚至开始通过银行提供的电子服务进行电子支付。尽管这些服务很好，提供了一定程度的便利，但你可能仍然需要去（或者至少感觉更舒服去）你的当地分行处理银行事务。
- en: What didn’t exist is today’s fully digital experience—complete with mobile apps,
    automated account monitoring and alerts, and enough services that make it more
    and more common for average account holders to do *everything* online. You may
    even be among those who not only don’t care if you ever see the inside of your
    bricks-and-mortar branch ever again, but also don’t even *know* where that branch
    is! What’s more, banks are reacting to these rapidly changing banking habits by
    consolidating and closing physical branches, and offering incentives for their
    customers to shift their banking to the online sphere. This accelerated even more
    during the COVID-19 crisis, when access to branches was restricted to appointment-only
    services, limited walk-in access, and shorter hours.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的完全数字化体验是以前所没有的—配有移动应用程序、自动账户监控和警报，以及足够的服务，使得普通账户持有人在线上完成*所有*事情变得越来越普遍。你甚至可能是那些不仅不在乎是否再次进入实体分行，甚至*不知道*那个分行在哪里的人之一！而且，银行正通过整合和关闭实体分行，并为客户转移到在线领域提供激励措施，以应对这些迅速变化的银行习惯。这在
    COVID-19 危机期间加速进行，当时分行的访问仅限预约服务、有限的步行进入以及更短的营业时间。
- en: So, 10 years ago, if your bank’s website went down for 12 hours of maintenance
    while the bank was deploying a better, more secure site, you’d probably have taken
    that in stride. What’s a dozen hours if it’s going to result in higher-quality
    services? You didn’t need 24/7, online banking—and, besides, the local branch
    was there for you. Today, that’s simply not the case. Half a day’s worth of downtime
    is unacceptable. In essence, you expect your bank to *always* be open and available.
    This is because your (and the world’s) definition of *quality* has changed. And
    that change requires DevOps more than ever before.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的银行网站在银行部署更好、更安全的网站时停机维护了12个小时，那么10年前您可能会轻松接受这一情况。如果这将带来更高质量的服务，那么12小时算什么呢？您并不需要全天24/7的在线银行服务，而且当地的分行也可以为您提供服务。然而，今天的情况已经完全不同了。半天的停机时间是不可接受的。实际上，您希望您的银行*始终*开放和可用。这是因为您（以及全世界）对*质量*的定义已经发生了变化。这种变化使得DevOps比以往任何时候都更为重要。
- en: Volume and Velocity
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容量和速度
- en: Another pressure impelling the growth of DevOps is the amount of data that’s
    being stored and handled. And that’s only logical. If more and more of our daily
    lives are reliant on software, a tremendous rise in the amount of data it generates
    will obviously occur. In 2020, the entire global datasphere amounted to nearly
    10 zettabytes. A decade prior, it was 0.5 zettabytes. By 2025, [it’s reasonably
    estimated](https://oreil.ly/hvghC) that it will balloon exponentially to over
    50 zettabytes!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 推动DevOps增长的另一个压力是正在存储和处理的数据量。这是完全合理的。如果我们日常生活中越来越多的依赖软件，那么它产生的数据量显然会大幅增加。到2020年，全球数据领域总量接近10泽字节。十年前，这个数字是0.5泽字节。预计到2025年，[据合理估计](https://oreil.ly/hvghC)，这个数字将以指数方式增长至超过50泽字节！
- en: This isn’t only about behemoths like Google, Netflix, Facebook, Microsoft, Amazon,
    Twitter, and others getting bigger and better, and therefore needing to process
    larger amounts of data. This projection affirms that more and more companies will
    be graduating into the world of big data. With that comes the demands of vastly
    increased data loads, as well as the shift away from traditional staging-server
    environments, which offered exact replicas of given production environments. And
    this shift is predicated on the fact that maintaining such pair-to-pair schemes
    is no longer feasible in terms of size or speed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是像谷歌、Netflix、Facebook、Microsoft、Amazon、Twitter等巨头变得越来越强大，因此需要处理更多的数据。这一预测确认了越来越多的公司将进入大数据的世界。随之而来的是对大量增加的数据负载的需求，以及远离提供给定生产环境精确副本的传统分阶段服务器环境。而这种转变是基于这样一个事实：维护这种一对一方案在规模或速度方面已不再可行。
- en: Happy were the days of yore when everything could be tested before going into
    production, but this isn’t possible anymore. Things are and will increasingly
    be released into production about which software firms don’t have 100% confidence.
    Should this cause us to panic? No. The necessity to release fast and remain competitive
    should inspire innovation and creativity in the ways required to best execute
    controlled rollovers, test procedures, and more *in-*production testing—what’s
    now referred to as *progressive delivery*. This comes along with feature flags
    and observability tools, such as distributed tracing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观的日子已经一去不复返，以往一切都可以在投入生产之前进行测试，但现在不再可能。有些软件公司会发布一些他们并不完全信任的东西进入生产环境。这会导致我们恐慌吗？不会。需要快速发布并保持竞争力的必要性应该激发创新和创造力，以最佳方式执行受控的转换、测试程序以及更多的*在-*生产测试，现在被称为*渐进式交付*。这伴随着特性标志和可观察性工具，如分布式跟踪。
- en: Some equate progressive delivery with the blast radius of an explosive device.
    The idea is that when we deploy to an in-production environment, explosions should
    be expected. Therefore, to optimize such rollouts, the best we can hope for is
    to minimize casualties, to keep the size of the blast radius as small as is possible.
    This is consistently accomplished through improvements in the quality of servers,
    services, and products. And if we agree that quality is a concern of developers
    and its achievement is part of a developer’s definition of “done,” then it means
    *there can be no pause or disconnect between that dev moment of done and the next,
    ops moment of production.* Because no sooner does this happen than we’re looping
    back into development, as bugs are fixed, services restored due to outages, and
    so on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人把渐进式交付与爆炸装置的爆炸半径等同起来。这个想法是，当我们部署到生产环境时，爆炸是可以预料到的。因此，为了优化这样的部署，我们能期望的最好结果就是尽量减少伤亡，尽量减小爆炸半径的大小。通过改进服务器、服务和产品的质量来始终如一地实现这一点。如果我们认同质量是开发者关注的问题，并且其实现是开发者定义中“完成”的一部分，那么这意味着*在开发者“完成”的那一刻和下一个运维生产的那一刻之间不可能有暂停或断开的时刻*。因为这一切发生的时间不会超过我们重新回到开发阶段，就像修复了错误，由于故障而恢复了服务等等。
- en: Done and Done
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成和完成
- en: Maybe it’s becoming clear that the expectations and demands that were and continue
    to be generated from the ops environment, of necessity, drove the push to DevOps.
    And as a result, the increased expectations and demands on developers aren’t coming
    from some festering hatred that ops folks have for their developer colleagues,
    nor is it part of a plot to deprive them of sleep. Rather, *all* of this, all
    of what DevOps represents, is a realpolitik business response to our changing
    world and the changes they’ve forced on the software industry across the board.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或许很明显的是，从运维环境中产生并继续生成的期望和需求的事实，驱动了推动到DevOps。因此，开发者面临的期望和需求的增加，并不是来自运维人员对开发者同事的某种腐烂仇恨，也不是一种剥夺他们睡眠的阴谋。相反，*所有*这一切，DevOps所代表的一切，都是对我们变化世界的实际政治业务响应，以及它们在软件行业整体上所强加的变化的回应。
- en: 'The fact is that everyone has new responsibilities, some of which require professionals
    (certainly many departments) to be at the ready to respond *whenever* duty calls
    because ours is a nonstop world. Here’s another way of putting this: our old definitions
    of “done” are done!'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是每个人都有新的责任，其中一些责任需要专业人士（当然是许多部门），随时准备回应*任何时候*的责任，因为我们的世界是不停止的。这里有另一种说法：我们对“完成”的旧定义已经完成了！
- en: Our new definition is *site reliability engineering* (*SRE*). This Google-coined
    term forever weds dev to ops by bridging any lingering perceived gaps between
    the two. And while SRE areas of focus may be taken up by personnel on either or
    both sides of the DevOps equation, these days companies often have dedicated SRE
    teams that are specifically responsible for examining issues related to performance,
    efficiency, emergency responsiveness, monitoring, capacity planning, and more.
    SRE professionals think like software engineers in devising strategies and solutions
    for system administration issues. They’re the folks who are increasingly making
    automated deployments work.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新定义是*站点可靠性工程*（*SRE*）。这个由Google创造的术语通过弥合任何可能存在的两者之间的悬殊感，永久将开发与运维结合在一起。虽然SRE的关注领域可能被开发人员或运维人员的人员所占据，但这些天，公司通常有专门的SRE团队，专门负责检查与性能、效率、应急响应、监控、容量规划等相关的问题。SRE专业人员像软件工程师一样思考，为系统管理问题制定策略和解决方案。他们是越来越多地使自动化部署工作的人。
- en: When SRE staff are happy, it means builds are becoming ever more reliable, repeatable,
    and fast, particularly because the landscape is one of scalable, backward- and
    forward-compatible code operating in stateless environments that are relying on
    an exploding universe of servers and emitting event streams to allow for real-time
    observability and alerts when something goes wrong. When new builds occur, they
    need to launch rapidly (with the full expectation that some will die equally quickly).
    Services need to return to full functionality as rapidly as possible. When features
    don’t work, we must have an immediate ability to turn them off programmatically
    through an API. When new software is released and users update their clients,
    but then encounter bugs, we must have the ability to execute swift and seamless
    rollbacks. Old clients and old servers need to be able to communicate with new
    clients.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当SRE人员感到满意时，这意味着构建变得更加可靠、可重复和快速，特别是因为现在的情况是在无状态环境中运行的可扩展、向后和向前兼容代码，在一个不断扩展的服务器宇宙中发出事件流，以实现实时可观察性和在出现问题时发出警报。当新的构建发生时，它们需要快速启动（并且预计同样快速地死亡）。服务需要尽快恢复到完全功能状态。当功能失效时，我们必须通过API具有即时关闭它们的能力。当发布新软件并更新其客户端用户时，但遇到错误时，我们必须具有执行快速且无缝回滚的能力。旧客户端和旧服务器需要能够与新客户端进行通信。
- en: And while SRE is assessing and monitoring these activities and laying out strategic
    responses, the work in all of these areas is completely that of developers. Therefore,
    while Dev staff are *doing*, SRE is today’s definition of *done*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当SRE评估和监控这些活动并制定战略响应时，所有这些领域的工作完全由开发人员来完成。因此，虽然开发人员正在*执行*，SRE今天定义了*完成*。
- en: Float Like a Butterfly…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮动如蝴蝶…
- en: 'In addition to all of the considerations already mentioned, a fundamental characteristic
    must define code in our modern DevOps (and related SRE) era: *lean*. And by this
    we’re talking about saving money. “But what,” you may ask, “does code have to
    do with saving money?”'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已提到的所有考虑因素之外，我们现代DevOps（以及相关的SRE）时代必须定义代码的一个基本特征是*精益*。而这里我们指的是节约成本。你可能会问，“但是，代码与节约成本有什么关系呢？”
- en: Well, one illustration might be cloud providers who charge companies for a plethora
    of discrete services. Some of these costs are directly affected by the code being
    output by those corporate cloud service subscribers. *Cost reductions can therefore
    come from the creation and use of innovative developer tools, as well as writing
    and deploying better code.*
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，一个例子可能是云服务提供商向公司收费的种种离散服务。这些成本中有一部分直接受到那些企业云服务订阅者输出的代码的影响。*因此，成本的降低可以来自于创新开发工具的创建和使用，以及编写和部署更好的代码。*
- en: The very nature of a global, we-never-close, software-driven society with a
    constant desire for newer, better software features and services means that DevOps
    can’t be concerned with only production and deployments. It *must* also be attentive
    to the bottom line of business itself. And although this may seem to be yet another
    burden thrown into the mix, think about it the next time the boss says that costs
    must be cut. Instead of negative, knee-jerk solutions, such as employee layoffs
    or reductions in salaries and benefits, needed savings may be found in positive,
    business-profile-enhancing moves like going serverless and moving to the cloud.
    Then, no one gets fired, and the coffee and donuts in the breakroom are still
    free!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 全球化、从不关闭的、由软件驱动的社会的本质，以及对更新、更好的软件功能和服务的持续需求，意味着DevOps不能只关注生产和部署。它*必须*还要关注业务本身的底线。尽管这可能看起来又是抛入混合中的另一个负担，但在老板说必须削减成本的下一次时，考虑一下这个。与其采取消极、膝跳反应的解决方案，比如裁员或减少工资和福利，需要的节约可能可以通过积极的、提高业务形象的举措来实现，比如转向无服务器架构和搬迁至云端。这样，没人会被解雇，休息室里的咖啡和甜甜圈依然是免费的！
- en: Being lean not only saves money, but also gives companies the opportunity to
    improve their marketplace impact. When firms can achieve efficiencies without
    staff reductions, they can retain optimal levels of team strength. When teams
    continue to be well compensated and cared for, they’ll be more motivated to produce
    their best possible work. When that output is achieving success, it means customers
    are grinning. So long as *customers continue to get well-functioning new features
    quickly as a result of faster deployments*, well…they’ll keep coming back for
    more and spreading the word to others. And *that’s* a virtuous cycle that means
    money in the bank.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 精益不仅节省了金钱，还给公司提供了改善市场影响的机会。当公司能够在不裁员的情况下实现效率时，它们可以保持团队力量的最佳水平。当团队继续得到良好的报酬和关心时，他们会更有动力地提供他们可能的最佳工作。当该产出取得成功时，意味着客户很满意。只要*客户继续因为更快的部署而获得良好运行的新功能*，那么…他们会继续回来，并向他人传播这一消息。而*这*是一个良性循环，意味着银行里有钱。
- en: Integrity, Authentication, and Availability
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整性、认证和可用性
- en: Hand in hand, and shoulder to shoulder with any and all DevOps activities is
    the perpetual question of *security*. Of course, some will choose to address this
    concern by hiring a chief information security officer. And that’s great because
    there’ll always be a go-to person to blame when something goes wrong. A better
    option might be to actually analyze, *within* a DevOps framework, how individual
    employees, work teams, and companies as a whole *think* about security and how
    it can be strengthened.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何和所有的DevOps活动一起，一个永恒的问题是*安全性*。当然，有些人会选择通过雇佣一位首席信息安全官来解决这个问题。这是很好的，因为当出了问题时总会有一个可以责怪的人。一个更好的选择可能是在一个DevOps框架内实际分析，个体员工、工作团队和整个公司如何*思考*安全性以及如何加强安全性。
- en: 'We talk much more about this in [Chapter 10](ch10.xhtml#continuous_deployment_patterns_and_antipatterns),
    but for now consider that: breaches, bugs, Structured Query Language (SQL) injections,
    buffer overflows, and more aren’t new. What’s different is the increasing speed
    of their appearance, their rising quantity, and the cleverness with which malicious
    individuals and entities are able to act. It’s not surprising. With more and more
    code being released, more and more problems will follow, with each type demanding
    different solutions.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第十章](ch10.xhtml#continuous_deployment_patterns_and_antipatterns)中更详细地讨论这个问题，但现在可以考虑一下：违规行为、错误、结构化查询语言（SQL）注入、缓冲区溢出等并不是新鲜事。不同的是它们出现的速度越来越快，数量越来越多，以及恶意个体和实体行动的聪明程度。这并不奇怪。随着越来越多的代码发布，越来越多的问题将随之而来，而每种问题都需要不同的解决方案。
- en: With faster deployments, it becomes ever more critical to be more reactive to
    risks and threats. The 2018 discovery of the Meltdown and Spectre security vulnerabilities
    made it clear that some threats are impossible to prevent. We are in a race, and
    *the only thing to do is to deploy fixes as quickly as possible.*
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着部署速度的加快，对风险和威胁的反应变得愈发重要。2018年发现的熔断和幽灵安全漏洞清楚地表明，有些威胁是无法预防的。我们在一场比赛中，*唯一要做的就是尽快部署修复措施*。
- en: Fierce Urgency
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激烈的紧迫性
- en: 'It should be clear by now that *DevOps is not a plot, but a response to evolutionary
    pressures.* It’s a means to an ends that does the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该清楚了，*DevOps不是一个阴谋，而是对进化压力的回应。* 这是一种手段，具有以下功能：
- en: Delivers better quality
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供更好的质量
- en: Produces savings
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省成本
- en: Deploys features faster
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地部署特性
- en: Strengthens security
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加强安全性
- en: And it doesn’t matter who likes it or not, or who came up with the idea first,
    or even its original intent. What matters is covered in the next section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 无论谁喜欢与否，或者谁首先想出了这个想法，甚至它的原始意图都不重要。重要的是在下一节中涵盖的内容。
- en: The Software Industry Has Fully Embraced DevOps
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件行业已完全拥抱DevOps
- en: Bу now, [every company is a DevOps company](https://oreil.ly/tkSSZ). So, get
    on board…because you don’t have any other choice.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，[每家公司都是一家DevOps公司](https://oreil.ly/tkSSZ)。所以，加入进来吧…因为你别无选择。
- en: The DevOps of today, what DevOps has evolved into, is, as stated earlier, an
    infinity loop. It doesn’t mean that groups and departments no longer exist. It
    doesn’t mean that everyone is responsible for their areas of concern along with
    those of everyone else along this continuum.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，今天的DevOps，DevOps已经演变成的样子，是一个无限循环。这并不意味着团体和部门不再存在。这也不意味着每个人都要对自己关注的领域以及沿着这个连续体的每个人的领域负责。
- en: It *does* mean that everyone should be working together. It *does* mean that
    software professionals within a given enterprise must be aware of and taking into
    reasonable consideration the work that all of their other colleagues are doing.
    They need to care about the issues their peers are confronting, how those matters
    can and do impact the work *they* do, the products and services their company
    offers, and how the *totality* of this affects their firm’s marketplace reputation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*确实*意味着每个人都应该一起工作。*确实*意味着企业内的软件专业人员必须意识到并合理考虑所有其他同事正在做的工作。他们需要关心同行正面临的问题，这些问题如何以及会如何影响他们自己的工作，公司提供的产品和服务，以及这种整体性如何影响他们公司在市场上的声誉。'
- en: This is why *DevOps engineer* is a term that makes no sense because it implies
    the existence of someone who can comprehensively and competently do (or is, at
    least, completely versed in) everything that occurs within the DevOps infinity
    loop. No such person exists. They never will. In fact, even *trying* to be a DevOps
    engineer is a mistake because it runs entirely counter to what DevOps is, which
    is eliminating silos where code developers are walled off from QA testers, who
    are walled off from release personnel, and so on.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 *DevOps 工程师* 是一个毫无意义的术语，因为它暗示了存在可以全面和胜任地执行（或至少完全熟悉）DevOps 无限循环中发生的一切的人。这样的人不存在。他们永远也不会存在。事实上，甚至试图成为一个
    DevOps 工程师也是一个错误，因为它完全违背了 DevOps 的本质，即消除代码开发人员与 QA 测试人员、发布人员等之间的隔离。
- en: DevOps is a coming together of efforts, interests, and feedback in a continuous
    effort to create, secure, deploy, and perfect code. DevOps is about *collaboration*.
    And as collaborations are organic, communicative endeavors, well…just as collaboration
    engineering isn’t a thing, neither is DevOps engineering (no matter what any institute
    or university might promise).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是努力的汇聚，利益的结合和反馈，以不断创造、保障、部署和完善代码。DevOps 关乎*协作*。由于协作是有机的、沟通的努力，嗯……正如协作工程不是一回事一样，DevOps
    工程也不是一回事（无论任何学院或大学可能承诺什么）。
- en: Making It Manifest
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使其具体化
- en: Knowing what DevOps is (and isn’t) only establishes a concept. The question
    is, how can it be sensibly and effectively implemented and sustained in software
    firms far and wide? Best advice? Here goes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 知道 DevOps 是什么（以及不是什么）只是建立一个概念。问题是，如何在各个软件公司中明智有效地实施和持续发展它？最好的建议？看这里。
- en: First, you can have DevOps enablers, DevOps evangelists, DevOps consultants
    and coaches (and I know how Scrum spoiled all those terms for all of us, but there
    aren’t any better ones). That’s OK. But DevOps is *not* an engineering discipline.
    We want site/service reliability engineers, production engineers, infrastructure
    engineers, QA engineers, and so on. But once a company has a DevOps engineer,
    the next thing it’s almost guaranteed to have is a DevOps department, which will
    just be another silo that’s likely to be nothing more than an existing department
    that’s been rebranded, so it *looks* like the firm is on the DevOps bandwagon.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以有 DevOps 推动者、DevOps 传道士、DevOps 顾问和教练（我知道 Scrum 已经糟糕透顶了所有这些术语，但没有更好的替代）。那没关系。但是
    DevOps *不是*一个工程学科。我们想要站点/服务可靠性工程师、生产工程师、基础设施工程师、QA 工程师等等。但一旦一家公司有了一个 DevOps 工程师，几乎可以保证接下来会有一个
    DevOps 部门，这只会是另一个可能不过是重新包装的现有部门，以便看起来公司已经跟上了 DevOps 的浪潮。
- en: A DevOps office isn’t a sign of progress. Rather, it’s simply back to the future.
    Then, the next thing that will be needed is a way to foster collaborations between
    Dev and DevOps, which will necessitate the coining of yet another term. How about
    *DevDevOps*?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 办公室并不是进步的标志。相反，它只是回到了未来。然后，接下来需要的是促进 Dev 和 DevOps 之间合作的方法，这将需要创造另一个术语。*DevDevOps*
    怎么样？
- en: Second, DevOps is about nuances and small things. Like cultures (especially
    corporate cultures), it’s about attitudes and relationships. You may not be able
    to clearly define those cultures, but they exist all the same. DevOps is also
    not about code, engineering practices, or technical prowess. No tool you can buy,
    no step-by-step manual, and no home edition board game can help you create DevOps
    in your organization.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，DevOps 关注细微之处和小事情。就像文化（特别是企业文化）一样，它关乎态度和关系。你可能无法明确定义这些文化，但它们依然存在。DevOps 也不仅仅是关于代码、工程实践或技术能力。没有你能购买的工具，没有逐步手册，也没有家庭版棋盘游戏可以帮助你在组织中创建
    DevOps。
- en: It’s about *behaviors* that are encouraged and nurtured within companies. And
    much of this is simply about how rank-and-file staff are treated, the structure
    of the firm, and the titles people hold. It’s about how often people have an opportunity
    to get together (especially in nonmeeting settings), where they sit and eat, talk
    shop and nonshop, tell jokes, etc. It’s in these spaces, not within data centers,
    where cultures form, grow, and change.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这关乎在公司中鼓励和培养的*行为*。而其中大部分只是关于如何对待普通员工，公司的结构以及人们担任的职位。关乎人们有多少机会聚在一起（特别是在非会议设置中），他们坐在哪里吃饭，交流工作和非工作内容，讲笑话等等。正是在这些地方而不是数据中心，文化形成、成长和改变。
- en: Finally, companies should actively seek and invest in T-shaped people (Ж-shaped
    is even better, as my Russian-speaking readers might suggest). As opposed to I-shaped
    individuals (who are absolute experts in one area) or generalists (who know a
    good bit about a lot, but have no mastery of any particular discipline), a T-shaped
    person has world-class expertise in at least one thing. This is the long vertical
    line of the “T” that firmly roots their depth of knowledge and experience. The
    “T” is crossed above by a breadth of accumulated capabilities, know-how, and wisdom
    in other arenas.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，公司应该积极寻找并投资于T型人才（俄语读者可能建议的Ж型更好）。与专精于一领域的I型个体或对许多领域略知一二而无专业技能的全才相对，T型人才在至少一方面拥有世界一流的专业知识。这是“T”形图中长垂直线的基础，坚定地根植于他们的深度知识和经验之中。这个“T”字上面横跨着在其他领域积累的广泛能力、专业知识和智慧。
- en: The total package is someone who demonstrates a clear and keen propensity to
    adapt to circumstances, learn new skills, and meet the challenges of today. In
    fact, this is a nearly perfect definition of an ideal DevOps staffer. T-shaped
    personnel allow businesses to work effectively on prioritized workloads, instead
    of only what companies think their in-house capacities can bear. T-folks can see
    and are intrigued by the big picture. This makes them terrific collaborators,
    which, as a result, leads to the construction of empowered teams.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这样的人表现出了清晰而敏锐的适应环境、学习新技能和应对当今挑战的能力。事实上，这几乎是理想的DevOps员工的完美定义。T型人才使企业能够有效地处理优先工作负载，而不仅仅是公司认为他们内部能力所能承受的。T型人才能看到并对大局感兴趣。这使他们成为出色的合作伙伴，进而导致建立有权力的团队。
- en: We All Got the Message
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们都收到了这个信息
- en: 'The good news is that a decade after ops invented DevOps, they completely understand
    that it’s not only about them. It’s about *everybody*. We can see the change with
    our own eyes. For example, the [2019 “Accelerate: State of DevOps” report](https://oreil.ly/vICAO)
    got more developers to participate in the study than ops or SRE personnel! To
    find more profound evidence that things have changed, we return full circle to
    Gene Kim. Also in 2019, the man who helped novelize the ops end of the equation
    with *The Phoenix Project* released *The Unicorn Project* (IT Revolution). If
    the earlier book gave short shrift to developers, here our hero is Maxine, her
    company’s *lead developer* (and ultimate savior).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，十年后，运维发明了DevOps，他们完全明白这不仅仅是关于他们。这是关乎*每个人*。我们可以用自己的眼睛看到这种变化。例如，[2019年“加速：DevOps现状”报告](https://oreil.ly/vICAO)吸引了更多开发人员参与研究，而不是运维或SRE人员！要找到更深入的证据证明事情已经改变，我们回到了基因·金。同样在2019年，这位帮助将运维方程式搬上小说舞台的人发行了《独角兽项目》（IT革命）。如果早期的书籍对开发人员短视，那么这里的英雄是麦克辛，她公司的*首席开发人员*（也是最终的救世主）。
- en: DevOps began with ops, no question about it. But the motivation wasn’t the subjugation
    of developers, nor the supremacy of operations professionals. It was and remains
    predicated on everyone seeing everyone else, appreciating their value and contributions
    to an enterprise—not simply out of respect or courtesy, but as personal self-interest
    and business survival, competitiveness, and growth.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps始于运维，毫无疑问。但其动机并非要压制开发人员，也不是运维专业人士的至高无上。它的起源和现在仍然是基于每个人都看到每个人，欣赏他们对企业价值和贡献的认识—这不仅仅是出于尊重或礼貌，而是出于个人自身利益以及企业的生存、竞争力和增长。
- en: 'And if you’re scared that DevOps is going to overwhelm you in a sea of ops
    concepts, it’s actually most likely to be the other way around. Just look at [SRE’s
    definition by Google](https://sre.google) (the company that invented the discipline):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你担心DevOps会让你淹没在运维概念的海洋中，实际上情况可能恰恰相反。只需看看[Google定义的SRE](https://sre.google)（这家公司发明了这一学科）：
- en: SRE is what you get when you treat operations as if it’s a software problem.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, the ops folks want to be developers now? Welcome. Software problems belong
    to *all* software professionals *all* the time. We’re in the problem-solving business—which
    means that everyone is a little bit of an SRE, a little bit of a developer, a
    little bit into operations…because it’s all the same thing. They’re all just intertwined
    facets that allow us to devise solutions for the software of today, as well as
    the individual and societal problems of tomorrow.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
