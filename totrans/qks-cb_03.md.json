["```java\npackage org.acme.quickstart;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\") ![1](Images/1.png)\npublic class GreetingResource {\n    @GET ![2](Images/2.png)\n    @Produces(MediaType.TEXT_PLAIN) ![3](Images/3.png)\n    public String hello() {\n        return \"hello\"; ![4](Images/4.png)\n    }\n}\n```", "```java\n@POST ![1](Images/1.png)\n@Consumes(MediaType.TEXT_PLAIN) ![2](Images/2.png)\npublic void create(String message) { ![3](Images/3.png)\n    System.out.println(\"Create\");\n}\n\n@PUT ![4](Images/4.png)\n@Consumes(MediaType.TEXT_PLAIN)\n@Produces(MediaType.TEXT_PLAIN)\npublic String update(String message) {\n    System.out.println(\"Update\");\n    return message;\n}\n\n@DELETE ![5](Images/5.png)\npublic void delete() {\n    System.out.println(\"Delete\");\n}\n```", "```java\npublic static enum Order {\n    desc, asc;\n}\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello(\n                @Context UriInfo uriInfo, ![1](Images/1.png)\n                @QueryParam(\"order\") Order order, ![2](Images/2.png)\n                @NotBlank @HeaderParam(\"authorization\") String authorization ![3](Images/3.png)\n                ) {\n\n    return String.format(\"URI: %s - Order %s - Authorization: %s\",\n                         uriInfo.getAbsolutePath(), order, authorization);\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -X GET \"http://localhost:8080/hello?order=asc\" \\\n -H \"accept: text/plain\" -H \"authorization: XYZ\"\nURI: http://localhost:8080/hello - Order asc - Authorization: XYZ\n\ncurl -X GET \"http://localhost:8080/hello?order=asc\" \\\n -H \"accept: text/plain\" -v\nHTTP/1.1 400 Bad Request\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-undertow\"\n\n./gradlew addExtension --extensions=\"quarkus-undertow\"\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.UriBuilder;\n\n@Path(\"/developer\")\npublic class DeveloperResource {\n\n    @POST\n    @Produces(MediaType.APPLICATION_JSON)\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createDeveloper(Developer developer) {\n        developer.persist();\n        return Response.created( ![1](Images/1.png)\n            UriBuilder\n                .fromResource(DeveloperResource.class) ![2](Images/2.png)\n                .path(Long.toString(developer.getId())) ![3](Images/3.png)\n                .build()\n            )\n            .entity(developer) ![4](Images/4.png)\n            .build(); ![5](Images/5.png)\n    }\n\n    public static class Developer {\n\n        static long counter = 1;\n\n        private long id;\n        private String name;\n\n        public long getId() {\n            return id;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public void persist() {\n            this.id = counter++;\n        }\n    }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -d '{\"name\":\"Ada\"}' -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 201 Created\n< Content-Length: 21\n< Content-Type: application/json\n< Location: http://localhost:8080/developer/1\n<\n{\"id\":1,\"name\":\"Ada\"}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.ws.rs.HttpMethod;\n\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@HttpMethod(\"LOCK\") ![1](Images/1.png)\n@Documented\npublic @interface LOCK {\n}\n```", "```java\n@LOCK ![1](Images/1.png)\n@Produces(MediaType.TEXT_PLAIN)\n@Path(\"{id}\")\npublic String lockResource(@PathParam(\"id\") long id) {\n    return id + \" locked\";\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -X LOCK http://localhost:8080/hello/1\n1 locked\n```", "```java\nquarkus.http.cors=true\nquarkus.http.cors.origins=http://example.com\nquarkus.http.cors.methods=GET,PUT,POST,DELETE\nquarkus.http.cors.headers=accept,authorization,content-type,x-requested-with\n```", "```java\ncurl -d '{\"name\":\"Ada\"}' -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer \\\n -H \"Origin: http://example.com\" --verbose\n```", "```java\nupload completely sent off: 14 out of 14 bytes\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 201 Created\n< access-control-allow-origin: http://example.com\n< access-control-allow-credentials: true\n< Content-Length: 21\n< Content-Type: application/json\n< Location: http://localhost:8080/developer/5\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Observes;\n\nimport io.quarkus.vertx.http.runtime.filters.Filters;\nimport io.quarkus.vertx.web.Route;\nimport io.vertx.core.http.HttpMethod;   ![5](Images/5.png)\nimport io.vertx.ext.web.Router;         ![5](Images/5.png)\nimport io.vertx.ext.web.RoutingContext; ![5](Images/5.png)\n\n@ApplicationScoped ![1](Images/1.png)\npublic class ApplicationRoutes {\n\n    public void routes(@Observes Router router) { ![2](Images/2.png)\n\n        router\n            .get(\"/ok\") ![3](Images/3.png)\n            .handler(rc -> rc.response().end(\"OK from Route\")); ![4](Images/4.png)\n\n    }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl http://localhost:8080/ok\nOK from Route\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-vertx-web\"\n```", "```java\n@Route(path = \"/declarativeok\", methods = HttpMethod.GET) ![1](Images/1.png)\npublic void greetings(RoutingContext routingContext) { ![2](Images/2.png)\n    String name = routingContext.request().getParam(\"name\"); ![3](Images/3.png)\n\n    if (name == null) {\n        name = \"world\";\n    }\n\n    routingContext.response().end(\"OK \" + name + \" you are right\"); ![4](Images/4.png)\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl localhost:8080/declarativeok?name=Alex\nOK Alex you are right\n```", "```java\npublic void filters(@Observes Filters filters) { ![1](Images/1.png)\n    filters\n        .register(\n            rc -> {\n                rc.response() ![2](Images/2.png)\n                    .putHeader(\"V-Header\", \"Header added by VertX Filter\"); ![3](Images/3.png)\n                rc.next(); ![4](Images/4.png)\n            },\n            10); ![5](Images/5.png)\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\necho Reactive-Route\ncurl localhost:8080/ok -v\n< V-Header: Header added by VertX Filter\n< content-length: 13\nOK from Route\n\necho JAX-RS\ncurl -X GET \"http://localhost:8080/hello?order=asc\" \\\n -H \"accept: text/plain\" -H \"authorization: XYZ\" -v\n< V-Header: Header added by VertX Filter\n< content-length: 65\nURI: http://localhost:8080/hello - Order asc - Authorization: XYZ\n```", "```java\npackage org.acme.quickstart;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.container.ContainerRequestContext;\nimport javax.ws.rs.container.ContainerResponseContext;\nimport javax.ws.rs.container.ContainerResponseFilter;\nimport javax.ws.rs.ext.Provider;\n\n@Provider ![1](Images/1.png)\npublic class HeaderAdditionContainerResponseFilter\n                implements ContainerResponseFilter { ![2](Images/2.png)\n\n    @Override\n    public void filter(ContainerRequestContext requestContext,\n                       ContainerResponseContext responseContext)\n            throws IOException {\n                responseContext.getHeaders()\n                  .add(\"X-Header\", \"Header added by JAXRS Filter\"); ![3](Images/3.png)\n    }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\necho Reactive-Route\ncurl localhost:8080/ok -v\n< V-Header: Header added by VertX Filter\n< content-length: 13\nOK from Route\n\necho JAX-RS\ncurl -X GET \"http://localhost:8080/hello?order=asc\" \\\n -H \"accept: text/plain\" -H \"authorization: XYZ\" -v\n< V-Header: Header added by VertX Filter\n< Content-Length: 65\n< Content-Type: text/plain;charset=UTF-8\n< X-Header: Header added by JAXRS Filter\nURI: http://localhost:8080/hello - Order asc - Authorization: XYZ\n```", "```java\nquarkus.http.ssl-port=8443 ![1](Images/1.png)\nquarkus.http.ssl.certificate.key-store-file=keystore.jks ![2](Images/2.png)\nquarkus.http.ssl.certificate.key-store-file-type=jks\nquarkus.http.ssl.certificate.key-store-password=changeit ![3](Images/3.png)\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl --insecure https://localhost:8443/hello\nhello\n```", "```java\n    keytool -genkey -keyalg RSA -alias selfsigned \\\n     -keystore keystore.jks -storepass changeit \\\n     -validity 360 -keysize 2048\n    ```"]