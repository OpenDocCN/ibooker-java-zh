["```java\n@BeforeEach\nvoid setup() throws MalformedURLException {\n    URL seleniumServerUrl = new URL(\"http://localhost:4444/\"); ![1](assets/1.png)\n    assumeThat(isOnline(seleniumServerUrl)).isTrue(); ![2](assets/2.png)\n\n    ChromeOptions options = new ChromeOptions(); ![3](assets/3.png)\n    driver = new RemoteWebDriver(seleniumServerUrl, options); ![4](assets/4.png)\n}\n```", "```java\nBROWSER_NAME\n```", "```java\nbrowserName\n```", "```java\nPLATFORM_NAME\n```", "```java\nplatformName\n```", "```java\nBROWSER_VERSION\n```", "```java\nbrowserVersion\n```", "```java\nSUPPORTS_JAVASCRIPT\n```", "```java\njavascriptEnabled\n```", "```java\nPAGE_LOAD_STRATEGY\n```", "```java\npageLoadStrategy\n```", "```java\nsetBrowserName(String browserName)\n```", "```java\nvoid\n```", "```java\nsetVersion(String version)\n```", "```java\nvoid\n```", "```java\nsetPlatform(Platform platform)\n```", "```java\nvoid\n```", "```java\nsetJavascriptEnabled(boolean\n    javascriptEnabled)\n```", "```java\nvoid\n```", "```java\nsetAcceptInsecureCerts(boolean\n    acceptInsecureCerts)\n```", "```java\nvoid\n```", "```java\nacceptInsecureCerts()\n```", "```java\nvoid\n```", "```java\nmerge(Capabilities\n    extraCapabilities)\n```", "```java\nDesiredCapabilities\n```", "```java\n@BeforeEach\nvoid setup() throws MalformedURLException {\n    URL seleniumServerUrl = new URL(\"http://localhost:4444/\");\n    assumeThat(isOnline(seleniumServerUrl)).isTrue();\n\n    driver = RemoteWebDriver.builder().oneOf(new EdgeOptions())\n            .address(seleniumServerUrl).build();\n}\n```", "```java\n@BeforeEach\nvoid setup() throws MalformedURLException {\n    URL seleniumServerUrl = new URL(\"http://localhost:4444/\");\n    assumeThat(isOnline(seleniumServerUrl)).isTrue();\n\n    driver = WebDriverManager.firefoxdriver()\n            .remoteAddress(seleniumServerUrl).create();\n}\n```", "```java\n@EnabledIfDriverUrlOnline(\"http://localhost:4444/\")\n@ExtendWith(SeleniumJupiter.class)\nclass RemoteChromeSelJupTest {\n\n    @DriverCapabilities\n    ChromeOptions options = new ChromeOptions();\n\n    @Test\n    void testRemote(RemoteWebDriver driver) {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nboni@linux:~/grid$ java -jar webdrivermanager-5.0.3-fat.jar resolveDriverFor chrome ![1](assets/1.png)\n[INFO] Using WebDriverManager to resolve chrome\n[DEBUG] Detecting chrome version using online commands.properties\n[DEBUG] Running command on the shell: [google-chrome, --version]\n[DEBUG] Result: Version=94.0.4606.71\n[DEBUG] Latest version of chromedriver according to\n    https://chromedriver.storage.googleapis.com/LATEST_RELEASE_94 is 94.0.4606.61\n[INFO] Using chromedriver 94.0.4606.61 (resolved driver for Chrome 94)\n[INFO] Reading https://chromedriver.storage.googleapis.com/ to seek\n    chromedriver\n[DEBUG] Driver to be downloaded chromedriver 94.0.4606.61\n[INFO] Downloading https://chromedriver.storage.googleapis.com/94.0.4606.61/\n    chromedriver_linux64.zip\n[INFO] Extracting driver from compressed file chromedriver_linux64.zip\n[INFO] Driver location: /home/boni/grid/chromedriver\n\nboni@linux:~/grid$ java -jar webdrivermanager-5.0.3-fat.jar resolveDriverFor firefox ![2](assets/2.png)\n[INFO] Using WebDriverManager to resolve firefox\n[DEBUG] Detecting firefox version using online commands.properties\n[DEBUG] Running command on the shell: [firefox, -v]\n[DEBUG] Result: Version=92.0.0.7916\n[DEBUG] Getting driver version for firefox92 from online versions.properties\n[INFO] Using geckodriver 0.30.0 (resolved driver for Firefox 92)\n[INFO] Reading https://api.github.com/repos/mozilla/geckodriver/releases to\n    seek geckodriver\n[DEBUG] Driver to be downloaded geckodriver 0.30.0\n[INFO] Downloading https://github.com/mozilla/geckodriver/releases/download/\n    v0.30.0/geckodriver-v0.30.0-linux64.tar.gz\n[INFO] Extracting driver from compressed file geckodriver-v0.30.0-linux64.tar.gz\n[INFO] Driver location: /home/boni/grid/geckodriver\n\nboni@linux:~/grid$ java -jar selenium-server-4.0.0.jar standalone ![3](assets/3.png)\nINFO [LogManager$RootLogger.log] - Using the system default encoding\nINFO [OpenTelemetryTracer.createTracer] - Using OpenTelemetry for tracing\nINFO [NodeOptions.getSessionFactories] - Detected 8 available processors\nINFO [NodeOptions.discoverDrivers] - Discovered 2 driver(s)\nINFO [NodeOptions.report] - Adding Chrome for {\"browserName\": \"chrome\"} 8 times\nINFO [NodeOptions.report] - Adding Firefox for {\"browserName\": \"firefox\"} 8 times\nINFO [Node.<init>] - Binding additional locator mechanisms: name, id, relative\nINFO [LocalDistributor.add] - Added node 41045bd8-ec7e-43c9-84bd-f63f7aca59ed\n    at http://192.168.56.1:4444\\. Health check every 120s\nINFO [GridModel.setAvailability] - Switching node 41045bd8-ec7e-43c9-84bd-\n    f63f7aca59ed (uri: http://192.168.56.1:4444) from DOWN to UP\nINFO [Standalone.execute] - Started Selenium Standalone 4.0.0 (revision\n    3a21814679): http://192.168.56.1:4444\n```", "```java\nWebDriver driver = new RemoteWebDriver(\"http://localhost:4444/\",\n        new ChromeOptions());\n```", "```java\nstatic URL seleniumServerUrl;\n\n@BeforeAll\nstatic void setupAll() throws MalformedURLException {\n    int port = PortProber.findFreePort(); ![1](assets/1.png)\n    WebDriverManager.chromedriver().setup(); ![2](assets/2.png)\n    Main.main(\n            new String[] { \"standalone\", \"--port\", String.valueOf(port) }); ![3](assets/3.png)\n\n    seleniumServerUrl = new URL(\n            String.format(\"http://localhost:%d/\", port)); ![4](assets/4.png)\n}\n\n@BeforeEach\nvoid setup() {\n    driver = new RemoteWebDriver(seleniumServerUrl, new ChromeOptions()); ![5](assets/5.png)\n}\n```", "```java\nC:\\grid>java -jar selenium-server-4.0.0.jar hub ![1](assets/1.png)\nINFO [LogManager$RootLogger.log] - Using the system default encoding\nINFO [OpenTelemetryTracer.createTracer] - Using OpenTelemetry for tracing\nINFO [BoundZmqEventBus.<init>] - XPUB binding to [binding to tcp://*:4442,\n    advertising as tcp://192.168.56.1:4442], XSUB binding to [binding to\n    tcp://*:4443, advertising as tcp://192.168.56.1:4443]\nINFO [UnboundZmqEventBus.<init>] - Connecting to tcp://192.168.56.1:4442 and\n    tcp://192.168.56.1:4443\nINFO [UnboundZmqEventBus.<init>] - Sockets created\nINFO [UnboundZmqEventBus.<init>] - Event bus ready\nINFO [Hub.execute] - Started Selenium Hub 4.0.0 (revision 3a21814679):\n    http://192.168.56.1:4444\nINFO [Node.<init>] - Binding additional locator mechanisms: relative, name, id\nINFO [LocalDistributor.add] - Added node 98c35075-e5f0-4168-be97-c277e4f40d8d\n    at http://192.168.56.1:5555\\. Health check every 120s\nINFO [GridModel.setAvailability] - Switching node 98c35075-e5f0-4168-be97-\n    c277e4f40d8d (uri: http://192.168.56.1:5555) from DOWN to UP\n\nC:\\grid>java -jar selenium-server-4.0.0.jar node ![2](assets/2.png)\nINFO [LogManager$RootLogger.log] - Using the system default encoding\nINFO [OpenTelemetryTracer.createTracer] - Using OpenTelemetry for tracing\nINFO [UnboundZmqEventBus.<init>] - Connecting to tcp://*:4442 and tcp://*:4443\nINFO [UnboundZmqEventBus.<init>] - Sockets created\nINFO [UnboundZmqEventBus.<init>] - Event bus ready\nINFO [NodeServer.createHandlers] - Reporting self as: http://192.168.56.1:5555\nINFO [NodeOptions.getSessionFactories] - Detected 8 available processors\nINFO [NodeOptions.discoverDrivers] - Discovered 2 driver(s)\nINFO [NodeOptions.report] - Adding Chrome for {\"browserName\": \"chrome\"} 8 times\nINFO [NodeOptions.report] - Adding Firefox for {\"browserName\": \"firefox\"} 8\n    times\nINFO [Node.<init>] - Binding additional locator mechanisms: relative, name, id\nINFO [NodeServer$1.start] - Starting registration process for node id\n    98c35075-e5f0-4168-be97-c277e4f40d8d\nINFO [NodeServer.execute] - Started Selenium node 4.0.0 (revision\n    3a21814679): http://192.168.56.1:5555\nINFO [NodeServer$1.lambda$start$1] - Sending registration event...\nINFO [NodeServer.lambda$createHandlers$2] - Node has been added\n```", "```java\njava -jar selenium-server-4.0.0.jar node --hub http://<hub>:4444\n```", "```java\nC:\\grid>java -jar selenium-server-4.0.0.jar event-bus ![1](assets/1.png)\nINFO [BoundZmqEventBus.<init>] - XPUB binding to [binding to tcp://*:4442,\n    advertising as tcp://192.168.56.1:4442], XSUB binding to [binding to\n    tcp://*:4443, advertising as tcp://192.168.56.1:4443]\n...\n\nC:\\grid>java -jar selenium-server-4.0.0.jar sessions ![2](assets/2.png)\n...\nINFO [SessionMapServer.execute] - Started Selenium SessionMap 4.0.0 (revision\n    5fe1af712f): http://192.168.56.1:5556\n\nC:\\grid>java -jar selenium-server-4.0.0.jar sessionqueue ![3](assets/3.png)\n...\nINFO [NewSessionQueueServer.execute] - Started Selenium SessionQueue 4.0.0\n    (revision 5fe1af712f): http://192.168.56.1:5559\n\nC:\\grid>java -jar selenium-server-4.0.0.jar distributor --sessions\n    http://<session_map>:5556 --sessionqueue http://<session_queue>:5559 --bind-bus\n    false ![4](assets/4.png)\n...\nINFO [DistributorServer.execute] - Started Selenium Distributor 4.0.0 (revision\n    5fe1af712f): http://192.168.56.1:5553\n\nC:\\grid>java -jar selenium-server-4.0.0.jar router --sessions\n    http://<session_map>:5556 --distributor http://<distributor_address>:5553\n    --sessionqueue http://>session_queue>:5559 ![5](assets/5.png)\n...\nINFO [RouterServer.execute] - Started Selenium Router 4.0.0 (revision\n    5fe1af712f): http://192.168.56.1:4444\n\nC:\\grid>java -jar selenium-server-4.0.0.jar node --publish-events\n    tcp://<event_bus>:4442 --subscribe-events tcp://<event_bus>:4443 ![6](assets/6.png)\n...\nINFO [NodeOptions.discoverDrivers] - Discovered 2 driver(s)\n...\nINFO [NodeServer$1.lambda$start$1] - Sending registration event...\nINFO [NodeServer.lambda$createHandlers$2] - Node has been added\n```", "```java\njava -jar selenium-server-4.0.0.jar standalone --log-level FINE\n```", "```java\ndocker run --rm -it --name jaeger \\\n  -p 16686:16686 \\ ![1](assets/1.png)\n  -p 14250:14250 \\ ![2](assets/2.png)\n  jaegertracing/all-in-one:1.27\n```", "```java\njava -Dotel.traces.exporter=jaeger \\\n  -Dotel.exporter.jaeger.endpoint=http://localhost:14250 \\ ![1](assets/1.png)\n  -Dotel.resource.attributes=service.name=selenium-standalone \\ ![2](assets/2.png)\n  -jar selenium-server-4.0.0.jar \\\n  --ext $(cs fetch -p \\ ![3](assets/3.png)\n     io.opentelemetry:opentelemetry-exporter-jaeger:1.6.0 \\\n     io.grpc:grpc-netty:1.41.0) \\\n  standalone\n```", "```java\ncurl -X POST -H \"Content-Type: application/json\" --data \\\n    '{\"query\": \"{ grid {maxSession, sessionCount } }\"}' -s \\\n    http://localhost:4444/graphql\n```", "```java\n@BeforeEach\nvoid setup() throws MalformedURLException {\n    String username = System.getProperty(\"sauceLabsUsername\"); ![1](assets/1.png)\n    String accessKey = System.getProperty(\"sauceLabsAccessKey\");\n    assumeThat(username).isNotEmpty(); ![2](assets/2.png)\n    assumeThat(accessKey).isNotEmpty();\n\n    MutableCapabilities capabilities = new MutableCapabilities();\n    capabilities.setCapability(\"username\", username); ![3](assets/3.png)\n    capabilities.setCapability(\"access_key\", accessKey);\n    capabilities.setCapability(\"name\", \"My SauceLabs test\"); ![4](assets/4.png)\n    capabilities.setCapability(\"browserVersion\", \"latest\"); ![5](assets/5.png)\n\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(\"sauce:options\", capabilities); ![6](assets/6.png)\n    URL remoteUrl = new URL(\n            \"https://ondemand.eu-central-1.saucelabs.com:443/wd/hub\"); ![7](assets/7.png)\n\n    driver = new RemoteWebDriver(remoteUrl, options); ![8](assets/8.png)\n}\n```", "```java\ndocker run -d -p 4444:4444 --shm-size=\"2g\" selenium/standalone-chrome:latest\n```", "```java\nWebDriver driver = new RemoteWebDriver(\"http://localhost:4444/\",\n        new ChromeOptions());\n```", "```java\njava -jar selenium-server-4.0.0.jar node -D selenium/standalone-firefox:latest\n        '{\"browserName\": “firefox\"}'\n```", "```java\ndocker network create grid ![1](assets/1.png)\n\ndocker run -d -p 4442-4444:4442-4444 --net grid \\\n    --name selenium-hub selenium/hub:4.0.0 ![2](assets/2.png)\n\ndocker run -d --net grid -e SE_EVENT_BUS_HOST=selenium-hub --shm-size=\"2g\" \\\n    -e SE_EVENT_BUS_PUBLISH_PORT=4442  -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \\\n    selenium/node-chrome:4.0.0 ![3](assets/3.png)\n\ndocker network rm grid ![4](assets/4.png)\n```", "```java\n./cm selenoid start ![1](assets/1.png)\n./cm selenoid-ui start ![2](assets/2.png)\n```", "```java\n@BeforeEach\nvoid setup() throws MalformedURLException {\n    URL seleniumServerUrl = new URL(\"http://localhost:4444/wd/hub\");\n    assumeThat(isOnline(seleniumServerUrl)).isTrue();\n\n    ChromeOptions options = new ChromeOptions();\n    Map<String, Object> selenoidOptions = new HashMap<>();\n    selenoidOptions.put(\"enableVNC\", true); ![1](assets/1.png)\n    options.setCapability(\"selenoid:options\", selenoidOptions); ![2](assets/2.png)\n    driver = new RemoteWebDriver(seleniumServerUrl, options);\n}\n```", "```java\nclass DockerChromeJupiterTest {\n\n    WebDriver driver;\n\n    WebDriverManager wdm = WebDriverManager.chromedriver().browserInDocker(); ![1](assets/1.png)\n\n    @BeforeEach\n    void setupTest() {\n        assumeThat(isDockerAvailable()).isTrue(); ![2](assets/2.png)\n        driver = wdm.create(); ![3](assets/3.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        wdm.quit(); ![4](assets/4.png)\n    }\n\n    @Test\n    void testDockerChrome() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nWebDriverManager wdm = WebDriverManager.firefoxdriver().browserInDocker(); ![1](assets/1.png)\n\nWebDriverManager wdm = WebDriverManager.chromedriver().browserInDocker()\n        .browserVersion(\"beta\"); ![2](assets/2.png)\n\nWebDriverManager wdm = WebDriverManager.chromedriver().browserInDocker()\n        .enableVnc(); ![3](assets/3.png)\n\nWebDriverManager wdm = WebDriverManager.chromedriver().browserInDocker()\n        .enableRecording(); ![4](assets/4.png)\n```", "```java\n@EnabledIfDockerAvailable ![1](assets/1.png)\n@ExtendWith(SeleniumJupiter.class)\nclass DockerChromeSelJupTest {\n\n    @Test\n    void testDockerChrome(@DockerBrowser(type = CHROME) WebDriver driver) {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\n@DockerBrowser(type = FIREFOX) ![1](assets/1.png)\n\n@DockerBrowser(type = CHROME, version = \"beta\") ![2](assets/2.png)\n\n@DockerBrowser(type = CHROME, vnc = true) ![3](assets/3.png)\n\n@DockerBrowser(type = CHROME, recording = true) ![4](assets/4.png)\n```"]