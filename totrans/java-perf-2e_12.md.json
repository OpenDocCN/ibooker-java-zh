["```java\n[0.896s][debug][gc,stringdedup]   Last Exec: 110.434ms, Idle: 729.700ms,\n                                  Blocked: 0/0.000ms\n[0.896s][debug][gc,stringdedup]     Inspected:           62420\n[0.896s][debug][gc,stringdedup]       Skipped:               0(  0.0%)\n[0.896s][debug][gc,stringdedup]       Hashed:            62420(100.0%)\n[0.896s][debug][gc,stringdedup]       Known:                 0(  0.0%)\n[0.896s][debug][gc,stringdedup]       New:               62420(100.0%)\n                                                         3291.7K\n[0.896s][debug][gc,stringdedup]     Deduplicated:        15604( 25.0%)\n                                                         731.4K( 22.2%)\n[0.896s][debug][gc,stringdedup]       Young:                 0(  0.0%)\n                                                         0.0B(  0.0%)\n[0.896s][debug][gc,stringdedup]       Old:               15604(100.0%)\n                                                         731.4K(100.0%)\n```", "```java\nStringTable statistics:\nNumber of buckets       :     60013 =    480104 bytes, avg   8.000\nNumber of entries       :   2002784 =  48066816 bytes, avg  24.000\nNumber of literals      :   2002784 = 606291264 bytes, avg 302.724\nTotal footprint         :           = 654838184 bytes\nAverage bucket size     :    33.373\nVariance of bucket size :    33.459\nStd. dev. of bucket size:     5.784\nMaximum bucket size     :        60\n```", "```java\nNumber of buckets       :     60013 =    480104 bytes, avg   8.000\nNumber of entries       :      2753 =     66072 bytes, avg  24.000\nNumber of literals      :      2753 =    197408 bytes, avg  71.707\nTotal footprint         :           =    743584 bytes\nAverage bucket size     :     0.046\nVariance of bucket size :     0.046\nStd. dev. of bucket size:     0.214\nMaximum bucket size     :         3\n```", "```java\n% jmap -heap process_id\n... other output ...\n36361 interned Strings occupying 3247040 bytes.\n\n```", "```java\nString answer = integerPart + \".\" + mantissa;\n```", "```java\nString answer = new StringBuilder(integerPart).append(\".\")\n                         .append(mantissa).toString();\n```", "```java\n@Benchmark\npublic void testSingleStringBuilder(Blackhole bh) {\n    String s = new StringBuilder(prefix).append(strings[0]).toString();\n    bh.consume(s);\n}\n\n@Benchmark\npublic void testSingleJDK11Style(Blackhole bh) {\n    String s = prefix + strings[0];\n    bh.consume(s);\n}\n\n@Benchmark\npublic void testSingleJDK8Style(Blackhole bh) {\n    String s = new StringBuilder().append(prefix).append(strings[0]).toString();\n    bh.consume(s);\n}\n```", "```java\n@Benchmark\npublic void testDoubleJDK11Style(Blackhole bh) {\n    double d = 1.0;\n    String s = prefix + strings[0] + d;\n    bh.consume(s);\n}\n\n@Benchmark\npublic void testDoubleJDK8Style(Blackhole bh) {\n    double d = 1.0;\n    String s = new StringBuilder().append(prefix).\n                   append(strings[0]).append(d).toString();\n    bh.consume(s);\n}\n```", "```java\n    @Benchmark\n    public void testJDK11Style(Blackhole bh) {\n        String s = \"\";\n        for (int i = 0; i < nStrings; i++) {\n            s = s + strings[i];\n        }\n        bh.consume(s);\n    }\n\n    @Benchmark\n    public void testJDK8Style(Blackhole bh) {\n        String s = \"\";\n        for (int i = 0; i < nStrings; i++) {\n            s = new StringBuilder().append(s).append(strings[i]).toString();\n        }\n        bh.consume(s);\n    }\n\n    @Benchmark\n    public void testStringBuilder(Blackhole bh) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < nStrings; i++) {\n            sb.append(strings[i]);\n        }\n        bh.consume(sb.toString());\n    }\n```", "```java\nprotected void makePrices() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(baos);\n    oos.writeObject(prices);\n    oos.close();\n}\n```", "```java\nprotected void makeZippedPrices() throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    GZIPOutputStream zip = new GZIPOutputStream(baos);\n    BufferedOutputStream bos = new BufferedOutputStream(zip);\n    ObjectOutputStream oos = new ObjectOutputStream(bos);\n    oos.writeObject(prices);\n    oos.close();\n    zip.close();\n}\n```", "```java\n$ java -Xshare:dump -XX:SharedClassListFile=filename \\\n    -XX:SharedArchiveFile=myclasses.jsa \\\n    ... classpath arguments ...\n```", "```java\n$ java -Xshare:auto -XX:SharedArchiveFile=myclasses.jsa ... other args ...\n```", "```java\n[0.080s][info][class,load] java.lang.Comparable source: shared objects file\n```", "```java\nsecurerandom.source=file:/dev/random\n```", "```java\n@Benchmark\npublic void testJavaJavaJava(Blackhole bh) {\n    long l = 0;\n    for (int i = 0; i < nTrials; i++) {\n        long a = calcJavaJava(nValues);\n        l += a / nTrials;\n    }\n    bh.consume(l);\n}\n\nprivate long calcJavaJava(int nValues) {\n    long l = 0;\n    for (int i = 0; i < nValues; i++) {\n        l += calcJava(i);\n    }\n    long a = l / nValues;\n    return a;\n}\n\nprivate long calcJava(int i) {\n    return i * 3 + 15;\n}\n```", "```java\n@Benchmark\npublic void testJavaCC(Blackhole bh) {\n    long l = 0;\n    for (int i = 0; i < nTrials; i++) {\n        long a = calcCC(nValues);\n        l += 50 - a;\n    }\n    bh.consume(l);\n}\n\nprivate native long calcCC(int nValues);\n```", "```java\nprivate static class CheckedExceptionTester implements ExceptionTester {\n    public void test(int nLoops, int pctError, Blackhole bh) {\n        ArrayList<String> al = new ArrayList<>();\n        for (int i = 0; i < nLoops; i++) {\n            try {\n                if ((i % pctError) == 0) {\n                    throw new CheckedException(\"Failed\");\n                }\n                Object o = new Object();\n                al.add(o.toString());\n            } catch (CheckedException ce) {\n                // continue\n            }\n        }\n        bh.consume(al);\n    }\n}\n\nprivate static class UncheckedExceptionTester implements ExceptionTester {\n    public void test(int nLoops, int pctError, Blackhole bh) {\n        ArrayList<String> al = new ArrayList<>();\n        for (int i = 0; i < nLoops; i++) {\n            Object o = null;\n            if ((i % pctError) != 0) {\n                o = new Object();\n            }\n            try {\n                al.add(o.toString());\n            } catch (NullPointerException npe) {\n                // continue\n            }\n        }\n        bh.consume(al);\n    }\n}\n\nprivate static class DefensiveExceptionTester implements ExceptionTester {\n    public void test(int nLoops, int pctError, Blackhole bh) {\n        ArrayList<String> al = new ArrayList<>();\n        for (int i = 0; i < nLoops; i++) {\n            Object o = null;\n            if ((i % pctError) != 0) {\n                o = new Object();\n            }\n            if (o != null) {\n                al.add(o.toString());\n            }\n        }\n        bh.consume(al);\n    }\n}\n```", "```java\nprivate transient Object[] elementData;\n```", "```java\npublic void calc() {\n    IntegerInterface a1 = new IntegerInterface() {\n        public int getInt() {\n            return 1;\n        }\n    };\n    IntegerInterface a2 = new IntegerInterface() {\n        public int getInt() {\n            return 2;\n        }\n    };\n    IntegerInterface a3 = new IntegerInterface() {\n        public int getInt() {\n            return 3;\n        }\n    };\n    sum = a1.get() + a2.get() + a3.get();\n}\n```", "```java\npublic int calc() {\n   IntegerInterface a3 = () -> { return 3; };\n   IntegerInterface a2 = () -> { return 2; };\n   IntegerInterface a1 = () -> { return 1; };\n    return a3.getInt() + a2.getInt() + a1.getInt();\n}\n```", "```java\nprivate IntegerInterface a1 = new IntegerInterface() {\n    public int getInt() {\n        return 1;\n    }\n};\n... Similarly for the other interfaces....\npublic void calc() {\n       return a1.get() + a2.get() + a3.get();\n   }\n}\n```", "```java\n@Benchmark\npublic void calcMulti(Blackhole bh) {\n    Stream<String> stream = al.stream();\n    Optional<String> t = stream.filter(symbol -> symbol.charAt(0) != 'A').\n        filter(symbol -> symbol.charAt(1) != 'A').\n        filter(symbol -> symbol.charAt(2) != 'A').\n        filter(symbol -> symbol.charAt(3) != 'A').findFirst();\n    String answer = t.get();\n    bh.consume(answer);\n}\n```", "```java\nprivate <T> ArrayList<T> calcArray(List<T> src, Predicate<T> p) {\n    ArrayList<T> dst = new ArrayList<>();\n    for (T s : src) {\n        if (p.test(s))\n            dst.add(s);\n    }\n    return dst;\n}\n\n@Benchmark\npublic void calcEager(Blackhole bh) {\n    ArrayList<String> al1 = calcArray(al, 0, 'A');\n    ArrayList<String> al2 = calcArray(al1, 1, 'A');\n    ArrayList<String> al3 = calcArray(al2, 2, 'A');\n    ArrayList<String> al4 = calcArray(al3, 3, 'A');\n    String answer = al4.get(0);\n    bh.consume(answer);\n}\n```", "```java\n@Benchmark\npublic void countFilter(Blackhole bh) {\n    count = 0;\n    Stream<String> stream = al.stream();\n    stream.filter(\n        symbol -> symbol.charAt(0) != 'A' &&\n        symbol.charAt(1) != 'A' &&\n        symbol.charAt(2) != 'A' &&\n        symbol.charAt(3) != 'A').\n          forEach(symbol -> { count++; });\n    bh.consume(count);\n}\n```", "```java\n@Benchmark\npublic void countIterator(Blackhole bh) {\n    int count = 0;\n    for (String symbol : al) {\n      if (symbol.charAt(0) != 'A' &&\n          symbol.charAt(1) != 'A' &&\n          symbol.charAt(2) != 'A' &&\n          symbol.charAt(3) != 'A')\n          count++;\n      }\n    bh.consume(count);\n}\n```", "```java\npublic class Point implements Serializable {\n    private int x;\n    private int y;\n    ...\n}\n```", "```java\npublic class Point implements Serializable {\n    private transient int x;\n    private transient int y;\n    ....\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n\toos.writeInt(x);\n\toos.writeInt(y);\n    }\n    private void readObject(ObjectInputStream ois)\n\t                        throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n\tx = ois.readInt();\n\ty = ois.readInt();\n    }\n}\n```", "```java\npublic class TripHistory implements Serializable {\n    private transient Point[] airportsVisited;\n    ....\n    // THIS CODE IS NOT FUNCTIONALLY CORRECT\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n        oos.writeInt(airportsVisited.length);\n        for (int i = 0; i < airportsVisited.length; i++) {\n            oos.writeInt(airportsVisited[i].getX());\n            oos.writeInt(airportsVisited[i].getY());\n        }\n    }\n\n    private void readObject(ObjectInputStream ois)\n\t                        throws IOException, ClassNotFoundException {\n        ois.defaultReadObject();\n        int length = ois.readInt();\n        airportsVisited = new Point[length];\n        for (int i = 0; i < length; i++) {\n            airportsVisited[i] = new Point(ois.readInt(), ois.readInt();\n        }\n    }\n}\n```", "```java\npublic class StockPriceHistoryImpl implements StockPriceHistory {\n    private String symbol;\n    protected SortedMap<Date, StockPrice> prices = new TreeMap<>();\n    protected Date firstDate;\n    protected Date lastDate;\n    protected boolean needsCalc = true;\n    protected BigDecimal highPrice;\n    protected BigDecimal lowPrice;\n    protected BigDecimal averagePrice;\n    protected BigDecimal stdDev;\n    private Map<BigDecimal, ArrayList<Date>> histogram;\n    ....\n    public StockPriceHistoryImpl(String s, Date firstDate, Date lastDate) {\n        prices = ....\n    }\n}\n```", "```java\npublic class StockPriceHistoryCompress\n\timplements StockPriceHistory, Serializable {\n\n    private byte[] zippedPrices;\n    private transient SortedMap<Date, StockPrice> prices;\n\n    private void writeObject(ObjectOutputStream out)\n    \t\tthrows IOException {\n        if (zippedPrices == null) {\n\t    makeZippedPrices();\n\t}\n\tout.defaultWriteObject();\n    }\n\n    private void readObject(ObjectInputStream in)\n    \t\tthrows IOException, ClassNotFoundException {\n        in.defaultReadObject();\n        unzipPrices();\n    }\n\n    protected void makeZippedPrices() throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        GZIPOutputStream zip = new GZIPOutputStream(baos);\n        ObjectOutputStream oos = new ObjectOutputStream(\n\t\tnew BufferedOutputStream(zip));\n        oos.writeObject(prices);\n        oos.close();\n        zip.close();\n        zippedPrices = baos.toByteArray();\n    }\n\n    protected void unzipPrices()\n    \t\tthrows IOException, ClassNotFoundException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(zippedPrices);\n        GZIPInputStream zip = new GZIPInputStream(bais);\n        ObjectInputStream ois = new ObjectInputStream(\n\t\tnew BufferedInputStream(zip));\n        prices = (SortedMap<Date, StockPrice>) ois.readObject();\n        ois.close();\n        zip.close();\n    }\n}\n```", "```java\nprivate void writeObject(ObjectOutputStream oos) throws IOException {\n    ....\n    for (Map.Entry<K,V> e : entrySet()) {\n        oos.writeObject(e.getKey());\n        oos.writeObject(e.getValue());\n    }\n    ....\n}\n```"]