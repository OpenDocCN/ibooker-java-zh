["```java\npublic class Legs {\n\n    public static Optional<Leg> findLongestLegOver(\n        List<Leg> legs,\n        Duration duration\n    ) {\n        Leg result = null;\n        for (Leg leg : legs) {\n            if (isLongerThan(leg, duration))\n                if (result == null ||\n                    isLongerThan(leg, result.getPlannedDuration())\n                ) {\n                    result = leg;\n                }\n        }\n        return Optional.ofNullable(result);\n    }\n\n    private static boolean isLongerThan(Leg leg, Duration duration) {\n        return leg.getPlannedDuration().compareTo(duration) > 0;\n    }\n}\n```", "```java\npublic class LongestLegOverTests {\n\n    private final List<Leg> legs = List.of(\n        leg(\"one hour\", Duration.ofHours(1)),\n        leg(\"one day\", Duration.ofDays(1)),\n        leg(\"two hours\", Duration.ofHours(2))\n    );\n    private final Duration oneDay = Duration.ofDays(1);\n\n    @Test\n    public void is_absent_when_no_legs() {\n        assertEquals(\n            Optional.empty(),\n            findLongestLegOver(emptyList(), Duration.ZERO)\n        );\n    }\n\n    @Test\n    public void is_absent_when_no_legs_long_enough() {\n        assertEquals(\n            Optional.empty(),\n            findLongestLegOver(legs, oneDay)\n        );\n    }\n\n    @Test\n    public void is_longest_leg_when_one_match() {\n        assertEquals(\n            \"one day\",\n            findLongestLegOver(legs, oneDay.minusMillis(1))\n                .orElseThrow().getDescription()\n        );\n    }\n\n    @Test\n    public void is_longest_leg_when_more_than_one_match() {\n        assertEquals(\n            \"one day\",\n            findLongestLegOver(legs, Duration.ofMinutes(59))\n                .orElseThrow().getDescription()\n        );\n    }\n\n    ...\n}\n```", "```java\nobject Legs {\n    @JvmStatic\n    fun findLongestLegOver(\n        legs: List<Leg>,\n        duration: Duration\n    ): Optional<Leg> {\n        var result: Leg? = null\n        for (leg in legs) {\n            if (isLongerThan(leg, duration))\n                if (result == null ||\n                    isLongerThan(leg, result.plannedDuration))\n                    result = leg\n        }\n        return Optional.ofNullable(result)\n    }\n\n    private fun isLongerThan(leg: Leg, duration: Duration): Boolean {\n        return leg.plannedDuration.compareTo(duration) > 0\n    }\n}\n```", "```java\nclass LongestLegOverTests {\n    ...\n    @Test\n    fun is_absent_when_no_legs() {\n        Assertions.assertEquals(\n            Optional.empty<Any>(),\n            findLongestLegOver(emptyList(), Duration.ZERO)\n        )\n    }\n\n    @Test\n    fun is_absent_when_no_legs_long_enough() {\n        Assertions.assertEquals(\n            Optional.empty<Any>(),\n            findLongestLegOver(legs, oneDay)\n        )\n    }\n\n    @Test\n    fun is_longest_leg_when_one_match() {\n        Assertions.assertEquals(\n            \"one day\",\n            findLongestLegOver(legs, oneDay.minusMillis(1))\n                .orElseThrow().description\n        )\n    }\n\n    @Test\n    fun is_longest_leg_when_more_than_one_match() {\n        Assertions.assertEquals(\n            \"one day\",\n            findLongestLegOver(legs, Duration.ofMinutes(59))\n                .orElseThrow().description\n        )\n    }\n\n    ...\n}\n```", "```java\n@JvmStatic\nfun findLongestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Optional<Leg> {\n    var result: Leg? = null\n    for (leg in legs) {\n        if (isLongerThan(leg, duration))\n            if (result == null ||\n                isLongerThan(leg, result.plannedDuration))\n                result = leg\n    }\n    return Optional.ofNullable(result)\n}\n```", "```java\n@JvmStatic\nfun findLongestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Optional<Leg> {\n    var result: Leg? = longestLegOver(legs, duration)\n    return Optional.ofNullable(result)\n}\n\nfun longestLegOver(legs: List<Leg>, duration: Duration): Leg? {\n    var result: Leg? = null\n    for (leg in legs) {\n        if (isLongerThan(leg, duration))\n            if (result == null ||\n                isLongerThan(leg, result.plannedDuration))\n                result = leg\n    }\n    return result\n}\n```", "```java\n@JvmStatic\nfun findLongestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Optional<Leg> {\n    return Optional.ofNullable(longestLegOver(legs, duration))\n}\n```", "```java\n@Test\nfun is_absent_when_no_legs() {\n    assertEquals(\n        Optional.empty<Any>(),\n        findLongestLegOver(emptyList(), Duration.ZERO)\n    )\n}\n\n@Test\nfun is_absent_when_no_legs_long_enough() {\n    assertEquals(\n        Optional.empty<Any>(),\n        findLongestLegOver(legs, oneDay)\n    )\n}\n```", "```java\n@Test\nfun `is absent when no legs`() {\n    assertNull(longestLegOver(emptyList(), Duration.ZERO))\n}\n\n@Test\nfun `is absent when no legs long enough`() {\n    assertNull(longestLegOver(legs, oneDay))\n}\n```", "```java\n@Test\nfun is_longest_leg_when_one_match() {\n    assertEquals(\n        \"one day\",\n        findLongestLegOver(legs, oneDay.minusMillis(1))\n            .orElseThrow().description\n    )\n}\n\n@Test\nfun is_longest_leg_when_more_than_one_match() {\n    assertEquals(\n        \"one day\",\n        findLongestLegOver(legs, Duration.ofMinutes(59))\n            .orElseThrow().description\n    )\n}\n```", "```java\n@Test\nfun `is longest leg when one match`() {\n    assertEquals(\n        \"one day\",\n        longestLegOver(legs, oneDay.minusMillis(1))\n            !!.description\n    )\n}\n\n@Test\nfun `is longest leg when more than one match`() {\n    assertEquals(\n        \"one day\",\n        longestLegOver(legs, Duration.ofMinutes(59))\n            ?.description\n    )\n}\n```", "```java\nExpected :one day\nActual   :null\n```", "```java\nobject Legs {\n    fun longestLegOver(\n        legs: List<Leg>,\n        duration: Duration\n    ): Leg? {\n        var result: Leg? = null\n        for (leg in legs) {\n            if (isLongerThan(leg, duration))\n                if (result == null ||\n                    isLongerThan(leg, result.plannedDuration))\n                    result = leg\n        }\n        return result\n    }\n\n    private fun isLongerThan(leg: Leg, duration: Duration): Boolean {\n        return leg.plannedDuration.compareTo(duration) > 0\n    }\n}\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    var result: Leg? = null\n    for (leg in legs) {\n        if (isLongerThan(leg, duration))\n            if (result == null ||\n                isLongerThan(leg, result.plannedDuration))\n                result = leg\n    }\n    return result\n}\n\nprivate fun isLongerThan(leg: Leg, duration: Duration) =\n    leg.plannedDuration.compareTo(duration) > 0\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    var result: Leg? = null\n    for (leg in legs) {\n        if (leg.isLongerThan(duration))\n            if (result == null ||\n                leg.isLongerThan(result.plannedDuration))\n                result = leg\n    }\n    return result\n}\n\nprivate fun Leg.isLongerThan(duration: Duration) =\n    plannedDuration.compareTo(duration) > 0\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    val longestLeg: Leg? = legs.maxByOrNull(Leg::plannedDuration)\n    if (longestLeg != null && longestLeg.plannedDuration > duration)\n        return longestLeg\n    else\n        return null\n}\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    val longestLeg: Leg? = legs.maxByOrNull(Leg::plannedDuration)\n    return if (longestLeg != null && longestLeg.plannedDuration > duration)\n        longestLeg\n    else\n        null\n}\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    val longestLeg = legs.maxByOrNull(Leg::plannedDuration) ?:\n        return null\n    return if (longestLeg.plannedDuration > duration)\n        longestLeg\n    else\n        null\n}\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? =\n    legs.maxByOrNull(Leg::plannedDuration)?.let { longestLeg ->\n        if (longestLeg.plannedDuration > duration)\n            longestLeg\n        else\n            null\n    }\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? {\n    val longestLeg = legs.maxByOrNull(Leg::plannedDuration)\n    return when {\n        longestLeg == null -> null\n        longestLeg.plannedDuration > duration -> longestLeg\n        else -> null\n    }\n}\n```", "```java\nfun longestLegOver(\n    legs: List<Leg>,\n    duration: Duration\n): Leg? =\n    legs.maxByOrNull(Leg::plannedDuration)?.takeIf { longestLeg ->\n        longestLeg.plannedDuration > duration\n    }\n```", "```java\nfun List<Leg>.longestOver(duration: Duration): Leg? {\n    val longestLeg = maxByOrNull(Leg::plannedDuration)\n    return when {\n        longestLeg == null -> null\n        longestLeg.plannedDuration > duration -> longestLeg\n        else -> null\n    }\n}\n```", "```java\npublic class Legs {\n\n    public static Optional<Leg> findLongestLegOver(\n        List<Leg> legs,\n        Duration duration\n    ) {\n        Leg result = null;\n        for (Leg leg : legs) {\n            if (isLongerThan(leg, duration))\n                if (result == null ||\n                    isLongerThan(leg, result.getPlannedDuration())\n                ) {\n                    result = leg;\n                }\n        }\n        return Optional.ofNullable(result);\n    }\n\n    private static boolean isLongerThan(Leg leg, Duration duration) {\n        return leg.getPlannedDuration().compareTo(duration) > 0;\n    }\n}\n```", "```java\npublic class Legs {\n\n    public static Optional<Leg> findLongestLegOver(\n        List<Leg> legs,\n        Duration duration\n    ) {\n        var longestLeg = legs.stream()\n            .max(Comparator.comparing(Leg::getPlannedDuration));\n        if (longestLeg.isEmpty()) {\n            return Optional.empty();\n        } else if (isLongerThan(longestLeg.get(), duration)) {\n            return longestLeg;\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    private static boolean isLongerThan(Leg leg, Duration duration) {\n        return leg.getPlannedDuration().compareTo(duration) > 0;\n    }\n}\n```", "```java\npublic static Optional<Leg> findLongestLegOver(\n    List<Leg> legs,\n    Duration duration\n) {\n    return legs.stream()\n        .max(Comparator.comparing(Leg::getPlannedDuration))\n        .filter(leg -> isLongerThan(leg, duration));\n}\n```"]