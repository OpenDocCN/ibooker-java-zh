["```java\nprivate class ForkJoinTask extends RecursiveTask<Integer> {\n    private int first;\n    private int last;\n\n    public ForkJoinTask(int first, int last) {\n        this.first = first;\n        this.last = last;\n    }\n\n    protected Integer compute() {\n        int subCount;\n        if (last - first < 10) {\n            subCount = 0;\n            for (int i = first; i <= last; i++) {\n                if (d[i] < 0.5)\n                    subCount++;\n            }\n        }\n        else {\n            int mid = (first + last) >>> 1;\n            ForkJoinTask left = new ForkJoinTask(first, mid);\n            left.fork();\n            ForkJoinTask right = new ForkJoinTask(mid + 1, last);\n            right.fork();\n            subCount = left.join();\n            subCount += right.join();\n        }\n        return subCount;\n    }\n}\n```", "```java\npublic class ThreadPoolTest {\n    private double[] d;\n\n    private class ThreadPoolExecutorTask implements Callable<Integer> {\n        private int first;\n        private int last;\n\n        public ThreadPoolExecutorTask(int first, int last) {\n            this.first = first;\n            this.last = last;\n        }\n\n        public Integer call() {\n            int subCount = 0;\n            for (int i = first; i <= last; i++) {\n                if (d[i] < 0.5) {\n                    subCount++;\n                }\n            }\n            return subCount;\n        }\n    }\n\n    public static void main(String[] args) {\n        d = createArrayOfRandomDoubles();\n        ThreadPoolExecutor tpe = new ThreadPoolExecutor(4, 4,\n                                        Long.MAX_VALUE,\n                                        TimeUnit.SECONDS,\n                                \tnew LinkedBlockingQueue());\n        Future[] f = new Future[4];\n        int size = d.length / 4;\n        for (int i = 0; i < 3; i++) {\n            f[i] = tpe.submit(\n                       new ThreadPoolExecutorTask(i * size, (i + 1) * size - 1);\n        }\n        f[3] = tpe.submit(new ThreadPoolExecutorTask(3 * size, d.length - 1);\n        int n = 0;\n        for (int i = 0; i < 4; i++) {\n            n += f.get();\n        }\n        System.out.println(\"Found \" + n + \" values\");\n    }\n}\n```", "```java\nfor (int i = first; i <= last; i++) {\n    if (d[i] < 0.5) {\n        subCount++;\n    }\n    for (int j = 0; j < 500; j++) {\n        d[i] *= d[i];\n    }\n}\n```", "```java\nfor (int i = first; i <= last; i++) {\n    if (d[i] < 0.5) {\n        subCount++;\n    }\n    for (int j = 0; j < i; j++) {\n        d[i] += j;\n    }\n}\n```", "```java\nList<String> symbolList = ...;\nStream<String> stream = symbolList.parallelStream();\nstream.forEach(s -> {\n    StockPriceHistory sph = new StockPriceHistoryImpl(s, startDate,\n                                     endDate, entityManager);\n    blackhole.consume(sph);\n});\n```", "```java\nVector v;\nfor (int i = 0; i < v.size(); i++) {\n    process(v.get(i));\n}\n```", "```java\nsynchronized(v) {\n    for (int i = 0; i < v.size(); i++) {\n        process(v.get(i));\n    }\n}\n```", "```java\npublic class Thermometer {\n    private static ThreadLocal<NumberFormat> nfLocal = new ThreadLocal<>() {\n        public NumberFormat initialValue() {\n            NumberFormat nf = NumberFormat.getInstance();\n            nf.setMinumumIntegerDigits(2);\n            return nf;\n        }\n    }\n    public String toString() {\n        NumberFormat nf = nfLocal.get();\n        nf.format(...);\n    }\n}\n```", "```java\nAtomicLong al = new AtomicLong(0);\npublic long doOperation() {\n    return al.getAndIncrement();\n}\n```", "```java\nprivate long al = 0;\npublic synchronized doOperation() {\n    return al++;\n}\n```", "```java\npublic class DataHolder {\n    public volatile long l1;\n    public volatile long l2;\n    public volatile long l3;\n    public volatile long l4;\n}\n```", "```java\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.AverageTime)\npublic class ContendedTest {\n    private static class DataHolder {\n\tprivate volatile long l1 = 0;\n\tprivate volatile long l2 = 0;\n\tprivate volatile long l3 = 0;\n\tprivate volatile long l4 = 0;\n    }\n    private static DataHolder dh = new DataHolder();\n\n    Thread[] threads;\n\n    @Setup(Level.Invocation)\n    public void setup() {\n\tthreads = new Thread[4];\n\tthreads[0] = new Thread(() -> {\n\t\tfor (long i = 0; i < nLoops; i++) {\n\t\t\tdh.l1 += i;\n\t\t}\n\t});\n\tthreads[1] = new Thread(() -> {\n\t\tfor (long i = 0; i < nLoops; i++) {\n\t\t\tdh.l2 += i;\n\t\t}\n\t});\n\t//...similar for 2 and 3...\n    }\n\n    @Benchmark\n    public void test(Blackhole bh) throws InterruptedException {\n        for (int i = 0; i < 4; i++) {\n\t    threads[i].start();\n\t}\n        for (int i = 0; i < 4; i++) {\n\t    threads[i].join();\n\t}\n   }\n}\n```", "```java\npublic class DataHolder {\n    public volatile long l1;\n    pubilc long[] dummy1 = new long[128 / 8];\n    public volatile long l2;\n    pubilc long[] dummy2 = new long[128 / 8];\n    public volatile long l3;\n    pubilc long[] dummy3 = new long[128 / 8];\n    public volatile long l4;\n}\n```", "```java\n% jstack pid > jstack.out\n% java ParseJStack jstack.out\n[Partial output...]\nThreads in start Running\n    8 threads in java.lang.Throwable.getStackTraceElement(Native\nTotal Running Threads: 8\n\nThreads in state Blocked by Locks\n    41 threads running in\n    \tcom.sun.enterprise.loader.EJBClassLoader.getResourceAsStream\n\t(EJBClassLoader.java:801)\nTotal Blocked by Locks Threads: 41\n\nThreads in state Waiting for notify\n    39 threads running in\n    \tcom.sun.enterprise.web.connector.grizzly.LinkedListPipeline.getTask\n\t(LinkedListPipeline.java:294)\n    18 threads running in System Thread\nTotal Waiting for notify Threads: 74\n\nThreads in state Waiting for I/O read\n    14 threads running in com.acme.MyServlet.doGet(MyServlet.java:603)\nTotal Waiting for I/O read Threads: 14\n\n```"]