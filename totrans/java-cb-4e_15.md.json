["```java\npackage com.darwinsys.util;\n```", "```java\njavac -d . *.java\n```", "```java\npublic class JavadocDemo extends JPanel {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n * Construct the GUI\n * @throws java.lang.IllegalArgumentException if constructed on a Sunday.\n */\n    public JavadocDemo() {\n        // We create and add a pushbutton here,\n        // but it doesn't do anything yet.\n        Button b = new Button(\"Hello\");\n        add(b);                        // connect Button into component\n        // Totally capricious example of what you should not do\n        if (Calendar.getInstance().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {\n            throw new IllegalArgumentException(\"Never On A Sunday\");\n        }\n    }\n\n    /** paint() is an AWT Component method, called when the\n * component needs to be painted. This one just draws colored\n * boxes in the window.\n *\n * @param g A java.awt.Graphics that we use for all our\n * drawing methods.\n */\n    public void paint(Graphics g) {\n        int w = getSize().width, h = getSize().height;\n        g.setColor(Color.YELLOW);\n        g.fillRect(0, 0, w/2, h);\n        g.setColor(Color.GREEN);\n        g.fillRect(w/2, 0, w, h);\n        g.setColor(Color.BLACK);\n        g.drawString(\"Welcome to Java\", 50, 50);\n    }\n}\n```", "```java\n$ javadoc -author -version JavadocDemo.java\n```", "```java\npublic boolean equals(MyClass obj) {\n    ...\n}\n```", "```java\n/**\n * AnnotationOverrideDemo - Simple demonstation of Metadata being used to\n * verify that a method does in fact override (not overload) a method\n * from the parent class. This class provides the method.\n */\nabstract class Top {\n    public abstract void myMethod(Object o);\n}\n\n/** Simple demonstation of Metadata being used to verify\n * that a method does in fact override (not overload) a method\n * from the parent class. This class is supposed to do the overriding,\n * but deliberately introduces an error to show how the modern compiler\n * behaves\n */\nclass Bottom {\n\n    @Override\n    public void myMethod(String s) {    // EXPECT COMPILE ERROR\n        // Do something here...\n    }\n}\n```", "```java\nC:> javac AnnotationOverrideDemo.java\nAnnotationOverrideDemo.java:16: method does not override a method\n            from its superclass\n        @Override public void myMethod(String s) {     // EXPECT COMPILE ERROR\n         ^\n1 error\nC:> \n```", "```java\npublic Type getProp( );\npublic void setProp(Type)\n```", "```java\npublic String getText( );\npublic void setText(String newText);\n```", "```java\n// package com.darwinsys.swingui;\npublic class LabelText extends JPanel implements java.io.Serializable {\n\n    private static final long serialVersionUID = -8343040707105763298L;\n    /** The label component */\n    protected JLabel theLabel;\n    /** The text field component */\n    protected JTextField theTextField;\n    /** The font to use */\n    protected Font myFont;\n\n    /** Construct the object with no initial values.\n * To be usable as a JavaBean there must be a no-argument constructor.\n */\n    public LabelText() {\n        this(\"(LabelText)\",  12);\n    }\n\n    /** Construct the object with the label and a default textfield size */\n    public LabelText(String label) {\n        this(label, 12);\n    }\n\n    /** Construct the object with given label and textfield size */\n    public LabelText(String label, int numChars) {\n        this(label, numChars, null);\n    }\n\n    /** Construct the object with given label, textfield size,\n * and \"Extra\" component\n * @param label The text to display\n * @param numChars The size of the text area\n * @param extra A third component such as a cancel button\n * may be null, in which case only the label and textfield exist.\n */\n    public LabelText(String label, int numChars, JComponent extra) {\n        super();\n        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n        theLabel = new JLabel(label);\n        add(theLabel);\n        theTextField = new JTextField(numChars);\n        add(theTextField);\n        if (extra != null) {\n            add(extra);\n        }\n    }\n\n    /** Get the label's horizontal alignment */\n    public int getLabelAlignment() {\n        return theLabel.getHorizontalAlignment();\n    }\n\n    /** Set the label's horizontal alignment */\n    public void setLabelAlignment(int align) {\n        theLabel.setHorizontalAlignment(align);\n    }\n\n    /** Get the text displayed in the text field */\n    public String getText() {\n        return theTextField.getText();\n    }\n\n    /** Set the text displayed in the text field */\n    public void setText(String text) {\n        theTextField.setText(text);\n    }\n\n    /** Get the text displayed in the label */\n    public String getLabel() {\n        return theLabel.getText();\n    }\n\n    /** Set the text displayed in the label */\n    public void setLabel(String text) {\n        theLabel.setText(text);\n    }\n\n    /** Set the font used in both subcomponents. */\n    public void setFont(Font f) {\n        // This class' constructors call to super() can trigger\n        // calls to setFont() (from Swing.LookAndFeel.installColorsAndFont),\n        // before we create our components, so work around this.\n        if (theLabel != null)\n            theLabel.setFont(f);\n        if (theTextField != null)\n            theTextField.setFont(f);\n    }\n\n    /** Adds the ActionListener to receive action events from the textfield */\n    public void addActionListener(ActionListener l) {\n        theTextField.addActionListener(l);\n    }\n\n    /** Remove an ActionListener from the textfield. */\n    public void removeActionListener(ActionListener l) {\n        theTextField.removeActionListener(l);\n    }\n}\n```", "```java\njava -verbose HelloWorld\n```", "```java\njar cvf /tmp/MyClasses.jar .\n```", "```java\nMySillyAttribute: true\nMySillynessLevel: high (5'11\")\n```", "```java\njar -cv -m manifest.stub -f /tmp/com.darwinsys.util.jar .\n```", "```java\nMain-Class: com.somedomainhere.HelloWorld\n```", "```java\nC:> javac HelloWorld.java\nC:> jar cvmf manifest.stub hello.jar HelloWorld.class\nC:> java -jar hello.jar\nHello, World of Java\nC:>\n```", "```java\n<project ...>\n    ...\n    <packaging>jar</packaging>\n    ...\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>2.4</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addclasspath>true</addclasspath>\n                            <mainClass>${main.class}</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```", "```java\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>2.6</version>\n    <configuration>\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <archive>\n            <manifest>\n                <addDefaultImplementationEntries>true\n                </addDefaultImplementationEntries>\n                <mainClass>${main.class}</mainClass>\n                <!-- <manifestFile>manifest.stub</manifestFile> -->\n            </manifest>\n            <manifestEntries>\n                <Vendor-URL>http://YOURDOMAIN.com/SOME_PATH/</Vendor-URL>\n            </manifestEntries>\n        </archive>\n    </configuration>\n</plugin>\n```", "```java\nProject Root Directory\n├── README.asciidoc\n├── index.html - typical web pages\n|── signup.jsp - ditto\n├── WEB-INF Server directory\n    ├── classes - Directory for individual .class files\n    ├── lib    - Directory for Jar files needed by app\n    └── web.xml - web app Descriptor (\"Configuration file\")\n```", "```java\nProject Root Directory\n├── README.asciidoc\n├── pom.xml\n└── src\n    └── main\n        ├── java\n        │   └── foo\n        │       └── WebTierClass.java\n        └── webapp\n            ├── WEB-INF\n            │   ├── classes\n            │   ├── lib\n            │   └── web.xml\n            ├── index.html\n            └── signup.jsp\n```", "```java\n$ javac -d . src/*.java\n$ jar cvf demo.jar module-info.class  demo\n```", "```java\n$ jdeps --module-path . demo.jar\ndemo\n [file:///Users/ian/workspace/javasrc/jlink/./]\n   requires mandated java.base (@11.0.2)\ndemo -> java.base\n   demo          -> java.io        java.base\n   demo          -> java.lang      java.base\n```", "```java\njlink --module-path . --no-header-files \\\n    --no-man-pages --compress=2 --strip-debug \\\n    --launcher rundemo=demo/demo.Hello \\\n    --add-modules demo --output mini-java\n```", "```java\n$ mini-java/bin/java demo.Hello\nHello, world.\n$ mini-java/bin/rundemo\nHello, world.\n$\n```", "```java\nmodule foo {\n    // Empty\n}\n```", "```java\nrequire java.desktop\n```", "```java\nrequires mail;\n```", "```java\n[WARNING] *********************************************************************\n[WARNING] * Required filename-based automodules detected. Please don't publish\n            this project to a public artifact repository! *\n[WARNING] *********************************************************************\n```", "```java\nexports com.darwinsys.calendar;\nexports com.darwinsys.csv;\nexports com.darwinsys.database;\n...\n```", "```java\nrequires com.foo.interfacemodule;\nprovides com.foo.interfacemodule.Interface with com.foo.implmodule.ImplClass;\n```", "```java\nmodule com.darwinsys.api {\n\n    requires java.desktop;\n    requires java.persistence;\n    requires java.prefs;\n    requires java.sql;\n    requires java.sql.rowset;\n    requires javax.servlet.api;\n    requires mail;\n    requires junit;\n\n    exports com.darwinsys.calendar;\n    exports com.darwinsys.csv;\n    exports com.darwinsys.database;\n    exports com.darwinsys.diff;\n    exports com.darwinsys.formatting;\n    exports com.darwinsys.locks;\n    provides com.darwinsys.locks.LockManager\n        with com.darwinsys.locks.LockManagerImpl;\n    exports com.darwinsys.model;\n    opens com.darwinsys.model;\n    // another dozen and a half packages...\n\n}\n```", "```java\nimport java.util.ServiceLoader;\nimport java.util.Optional;\n\nOptional<LockManager> opt = ServiceLoader.load(LockManager.class).findFirst();\nif (!opt.isPresent()) {\n    throw new RuntimeException(\"Could not find implementation of LockManager\");\n}\nLockManager mgr = opt.get();\n```"]