["```java\nclass DownloadChromeJupiterTest {\n\n    WebDriver driver;\n\n    File targetFolder;\n\n    @BeforeEach\n    void setup() {\n        targetFolder = new File(System.getProperty(\"user.home\"), \"Downloads\"); ![1](assets/1.png)\n        Map<String, Object> prefs = new HashMap<>();\n        prefs.put(\"download.default_directory\", targetFolder.toString()); ![2](assets/2.png)\n        ChromeOptions options = new ChromeOptions();\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        driver = WebDriverManager.chromedriver().capabilities(options).create();\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testDownloadChrome() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/download.html\"); ![3](assets/3.png)\n\n        driver.findElement(By.xpath(\"(//a)[2]\")).click(); ![4](assets/4.png)\n        driver.findElement(By.xpath(\"(//a)[3]\")).click();\n\n        ConditionFactory await = Awaitility.await()\n                .atMost(Duration.ofSeconds(5)); ![5](assets/5.png)\n        File wdmLogo = new File(targetFolder, \"webdrivermanager.png\");\n        await.until(() -> wdmLogo.exists()); ![6](assets/6.png)\n\n        File wdmDoc = new File(targetFolder, \"webdrivermanager.pdf\");\n        await.until(() -> wdmDoc.exists()); ![7](assets/7.png)\n    }\n\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    FirefoxOptions options = new FirefoxOptions();\n    targetFolder = new File(\".\"); ![1](assets/1.png)\n    options.addPreference(\"browser.download.dir\",\n            targetFolder.getAbsolutePath()); ![2](assets/2.png)\n    options.addPreference(\"browser.download.folderList\", 2); ![3](assets/3.png)\n    options.addPreference(\"browser.helperApps.neverAsk.saveToDisk\",\n            \"image/png, application/pdf\"); ![4](assets/4.png)\n    options.addPreference(\"pdfjs.disabled\", true); ![5](assets/5.png)\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\nclass DownloadHttpClientJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testDownloadHttpClient() throws IOException {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/download.html\"); ![1](assets/1.png)\n\n        WebElement pngLink = driver.findElement(By.xpath(\"(//a)[2]\")); ![2](assets/2.png)\n        File pngFile = new File(\".\", \"webdrivermanager.png\");\n        download(pngLink.getAttribute(\"href\"), pngFile); ![3](assets/3.png)\n        assertThat(pngFile).exists();\n\n        WebElement pdfLink = driver.findElement(By.xpath(\"(//a)[3]\")); ![4](assets/4.png)\n        File pdfFile = new File(\".\", \"webdrivermanager.pdf\");\n        download(pdfLink.getAttribute(\"href\"), pdfFile);\n        assertThat(pdfFile).exists();\n    }\n\n    void download(String link, File destination) throws IOException {\n        try (CloseableHttpClient client = HttpClientBuilder.create().build()) { ![5](assets/5.png)\n            HttpUriRequestBase request = new HttpGet(link);\n            try (CloseableHttpResponse response = client.execute(request)) { ![6](assets/6.png)\n                FileUtils.copyInputStreamToFile(\n                        response.getEntity().getContent(), destination); ![7](assets/7.png)\n            }\n        }\n    }\n\n}\n```", "```java\nclass CaptureNetworkTrafficFirefoxJupiterTest {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    WebDriver driver;\n\n    BrowserMobProxy proxy;\n\n    @BeforeEach\n    void setup() {\n        proxy = new BrowserMobProxyServer(); ![1](assets/1.png)\n        proxy.start(); ![2](assets/2.png)\n        proxy.newHar(); ![3](assets/3.png)\n        proxy.enableHarCaptureTypes(CaptureType.REQUEST_CONTENT,\n                CaptureType.RESPONSE_CONTENT); ![4](assets/4.png)\n\n        Proxy seleniumProxy = ClientUtil.createSeleniumProxy(proxy); ![5](assets/5.png)\n        FirefoxOptions options = new FirefoxOptions();\n        options.setProxy(seleniumProxy); ![6](assets/6.png)\n        options.setAcceptInsecureCerts(true); ![7](assets/7.png)\n\n        driver = WebDriverManager.firefoxdriver().capabilities(options)\n                .create();\n    }\n\n    @AfterEach\n    void teardown() {\n        proxy.stop(); ![8](assets/8.png)\n        driver.quit();\n    }\n\n    @Test\n    void testCaptureNetworkTrafficFirefox() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n\n        List<HarEntry> logEntries = proxy.getHar().getLog().getEntries();\n        logEntries.forEach(logEntry -> { ![9](assets/9.png)\n            log.debug(\"Request: {} - Response: {}\",\n                    logEntry.getRequest().getUrl(),\n                    logEntry.getResponse().getStatus());\n        });\n    }\n\n}\n```", "```java\nclass HarCreatorJupiterTest {\n\n    WebDriver driver;\n\n    BrowserMobProxy proxy;\n\n    @BeforeEach\n    void setup() {\n        proxy = new BrowserMobProxyServer(); ![1](assets/1.png)\n        proxy.start();\n        proxy.newHar();\n        proxy.enableHarCaptureTypes(CaptureType.REQUEST_CONTENT,\n                CaptureType.RESPONSE_CONTENT);\n\n        Proxy seleniumProxy = ClientUtil.createSeleniumProxy(proxy);\n        ChromeOptions options = new ChromeOptions();\n        options.setProxy(seleniumProxy);\n        options.setAcceptInsecureCerts(true);\n\n        driver = WebDriverManager.chromedriver().capabilities(options).create();\n    }\n\n    @AfterEach\n    void teardown() throws IOException {\n        Har har = proxy.getHar(); ![2](assets/2.png)\n        File harFile = new File(\"login.har\");\n        har.writeTo(harFile);\n\n        proxy.stop();\n        driver.quit();\n    }\n\n    @Test\n    void testHarCreator() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/login-form.html\");\n\n        driver.findElement(By.id(\"username\")).sendKeys(\"user\");\n        driver.findElement(By.id(\"password\")).sendKeys(\"user\");\n        driver.findElement(By.cssSelector(\"button\")).click();\n        String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n        assertThat(bodyText).contains(\"Login successful\");\n    }\n\n}\n```", "```java\nclass LoadJupiterTest {\n\n    static final int NUM_BROWSERS = 5;\n\n    final Logger log = getLogger(lookup().lookupClass());\n\n    List<WebDriver> driverList;\n\n    WebDriverManager wdm = WebDriverManager.chromedriver().browserInDocker(); ![1](assets/1.png)\n\n    @BeforeEach\n    void setupTest() {\n        assumeThat(isDockerAvailable()).isTrue(); ![2](assets/2.png)\n        driverList = wdm.create(NUM_BROWSERS); ![3](assets/3.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        wdm.quit();\n    }\n\n    @Test\n    void testLoad() throws InterruptedException {\n        ExecutorService executorService = newFixedThreadPool(NUM_BROWSERS); ![4](assets/4.png)\n        CountDownLatch latch = new CountDownLatch(NUM_BROWSERS);\n\n        driverList.forEach((driver) -> { ![5](assets/5.png)\n            executorService.submit(() -> {\n                try {\n                    checkHomePage(driver);\n                } finally {\n                    latch.countDown();\n                }\n            });\n        });\n\n        latch.await(60, SECONDS); ![6](assets/6.png)\n        executorService.shutdown();\n    }\n\n    void checkHomePage(WebDriver driver) {\n        log.debug(\"Session id {}\", ((RemoteWebDriver) driver).getSessionId());\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nclass SecurityJupiterTest {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    static final String ZAP_PROXY_ADDRESS = \"localhost\"; ![1](assets/1.png)\n    static final int ZAP_PROXY_PORT = 8080;\n    static final String ZAP_API_KEY = \"<put-api-key-here-or-disable-it>\"; ![2](assets/2.png)\n\n    WebDriver driver;\n\n    ClientApi api;\n\n    @BeforeEach\n    void setup() {\n        String proxyStr = ZAP_PROXY_ADDRESS + \":\" + ZAP_PROXY_PORT;\n        assumeThat(isOnline(\"http://\" + proxyStr)).isTrue();\n\n        Proxy proxy = new Proxy(); ![3](assets/3.png)\n        proxy.setHttpProxy(proxyStr);\n        proxy.setSslProxy(proxyStr);\n\n        ChromeOptions options = new ChromeOptions();\n        options.setAcceptInsecureCerts(true);\n        options.setProxy(proxy);\n\n        driver = WebDriverManager.chromedriver().capabilities(options).create();\n\n        api = new ClientApi(ZAP_PROXY_ADDRESS, ZAP_PROXY_PORT, ZAP_API_KEY); ![4](assets/4.png)\n    }\n\n    @AfterEach\n    void teardown() throws ClientApiException {\n        if (api != null) {\n            String title = \"My ZAP report\";\n            String template = \"traditional-html\";\n            String description = \"This is a sample report\";\n            String reportfilename = \"zap-report.html\";\n            String targetFolder = new File(\"\").getAbsolutePath();\n            ApiResponse response = api.reports.generate(title, template, null,\n                    description, null, null, null, null, null, reportfilename,\n                    null, targetFolder, null); ![5](assets/5.png)\n            log.debug(\"ZAP report generated at {}\", response.toString());\n        }\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n\n    @Test\n    void testSecurity() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\n@Test\nvoid testAccessibility() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n\n    Results result = new AxeBuilder().analyze(driver); ![1](assets/1.png)\n    List<Rule> violations = result.getViolations(); ![2](assets/2.png)\n    violations.forEach(rule -> {\n        log.debug(\"{}\", rule.toString()); ![3](assets/3.png)\n    });\n    AxeReporter.writeResultsToJsonFile(\"testAccessibility\", result); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testABTesting() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/ab-testing.html\"); ![1](assets/1.png)\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    WebElement header = wait.until(\n            ExpectedConditions.presenceOfElementLocated(By.tagName(\"h6\")));\n\n    if (header.getText().contains(\"variation A\")) { ![2](assets/2.png)\n        assertBodyContains(driver, \"Lorem ipsum\");\n    } else if (header.getText().contains(\"variation B\")) {\n        assertBodyContains(driver, \"Nibh netus\");\n    } else {\n        fail(\"Unknown variation\");\n    }\n}\n\nvoid assertBodyContains(WebDriver driver, String text) {\n    String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n    assertThat(bodyText).contains(text);\n}\n```", "```java\nclass SelenideJupiterTest {\n\n    @Test\n    void testSelenide() {\n        open(\"https://bonigarcia.dev/selenium-webdriver-java/login-form.html\"); ![1](assets/1.png)\n\n        $(By.id(\"username\")).val(\"user\"); ![2](assets/2.png)\n        $(By.id(\"password\")).val(\"user\");\n        $(\"button\").pressEnter(); ![3](assets/3.png)\n        $(By.id(\"success\")).shouldBe(visible)\n                .shouldHave(text(\"Login successful\")); ![4](assets/4.png)\n    }\n\n}\n```", "```java\n@Test\nvoid testFakeData() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/data-types.html\");\n\n    Faker faker = new Faker(); ![1](assets/1.png)\n\n    driver.findElement(By.name(\"first-name\")) ![2](assets/2.png)\n            .sendKeys(faker.name().firstName());\n    driver.findElement(By.name(\"last-name\"))\n            .sendKeys(faker.name().lastName());\n    driver.findElement(By.name(\"address\"))\n            .sendKeys(faker.address().fullAddress());\n    driver.findElement(By.name(\"zip-code\"))\n            .sendKeys(faker.address().zipCode());\n    driver.findElement(By.name(\"city\")).sendKeys(faker.address().city());\n    driver.findElement(By.name(\"country\"))\n            .sendKeys(faker.address().country());\n    driver.findElement(By.name(\"e-mail\"))\n            .sendKeys(faker.internet().emailAddress());\n    driver.findElement(By.name(\"phone\"))\n            .sendKeys(faker.phoneNumber().phoneNumber());\n    driver.findElement(By.name(\"job-position\"))\n            .sendKeys(faker.job().position());\n    driver.findElement(By.name(\"company\")).sendKeys(faker.company().name());\n\n    driver.findElement(By.tagName(\"form\")).submit();\n\n    List<WebElement> successElement = driver\n            .findElements(By.className(\"alert-success\"));\n    assertThat(successElement).hasSize(10); ![3](assets/3.png)\n\n    List<WebElement> errorElement = driver\n            .findElements(By.className(\"alert-danger\"));\n    assertThat(errorElement).isEmpty(); ![4](assets/4.png)\n}\n```", "```java\nmvn test ![1](assets/1.png)\nmvn surefire-report:report-only ![2](assets/2.png)\nmvn site -DgenerateReports=false ![3](assets/3.png)\n```", "```java\nclass ReportingJupiterTest {\n\n    WebDriver driver;\n\n    static ExtentReports reports;\n\n    @BeforeAll\n    static void setupClass() {\n        reports = new ExtentReports(); ![1](assets/1.png)\n        ExtentSparkReporter htmlReporter = new ExtentSparkReporter(\n                \"extentReport.html\");\n        reports.attachReporter(htmlReporter); ![2](assets/2.png)\n    }\n\n    @BeforeEach\n    void setup(TestInfo testInfo) {\n        reports.createTest(testInfo.getDisplayName()); ![3](assets/3.png)\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @AfterAll\n    static void teardownClass() {\n        reports.flush();\n    }\n\n    // Test methods ![4](assets/4.png)\n\n}\n```", "```java\nmvn test\nmvn allure:report\nmvn allure:serve\n```", "```java\ngradle test\ngradle allureReport\ngradle allureServe\n```", "```java\nFeature: Login in practice site ![1](assets/1.png)\n\n  Scenario: Successful login ![2](assets/2.png)\n    Given I use \"Chrome\" ![3](assets/3.png)\n    When I navigate to\n        \"https://bonigarcia.dev/selenium-webdriver-java/login-form.html\" ![4](assets/4.png)\n    And I log in with the username \"user\" and password \"user\" ![5](assets/5.png)\n    And I click Submit\n    Then I should see the message \"Login successful\" ![6](assets/6.png)\n\n  Scenario: Failure login ![7](assets/7.png)\n    Given I use \"Chrome\"\n    When I navigate to\n        \"https://bonigarcia.dev/selenium-webdriver-java/login-form.html\"\n    And I log in with the username \"bad-user\" and password \"bad-password\"\n    And I click Submit\n    Then I should see the message \"Invalid credentials\"\n```", "```java\npublic class LoginSteps {\n\n    private WebDriver driver;\n\n    @Given(\"I use {string}\") ![1](assets/1.png)\n    public void iUse(String browser) {\n        driver = WebDriverManager.getInstance(browser).create();\n    }\n\n    @When(\"I navigate to {string}\") ![2](assets/2.png)\n    public void iNavigateTo(String url) {\n        driver.get(url);\n    }\n\n    @And(\"I log in with the username {string} and password {string}\") ![3](assets/3.png)\n    public void iLogin(String username, String password) {\n        driver.findElement(By.id(\"username\")).sendKeys(username);\n        driver.findElement(By.id(\"password\")).sendKeys(password);\n\n    }\n\n    @And(\"I click Submit\") ![4](assets/4.png)\n    public void iPressEnter() {\n        driver.findElement(By.cssSelector(\"button\")).click();\n    }\n\n    @Then(\"I should see the message {string}\") ![5](assets/5.png)\n    public void iShouldSee(String result) {\n        try {\n            String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n            assertThat(bodyText).contains(result);\n        } finally {\n            driver.quit();\n        }\n    }\n\n}\n```", "```java\n@RunWith(Cucumber.class) ![1](assets/1.png)\n@CucumberOptions(features = \"classpath:io/github/bonigarcia\", glue = {\n        \"io.github.bonigarcia\" }) ![2](assets/2.png)\npublic class CucumberTest {\n\n}\n```", "```java\n@Suite ![1](assets/1.png)\n@IncludeEngines(\"cucumber\") ![2](assets/2.png)\n@SelectClasspathResource(\"io/github/bonigarcia\") ![3](assets/3.png)\n@ConfigurationParameter(key = GLUE_PROPERTY_NAME, value = \"io.github.bonigarcia\") ![4](assets/4.png)\npublic class CucumberTest {\n\n}\n```", "```java\n@CucumberOptions(features = \"classpath:io/github/bonigarcia\", glue = {\n        \"io.github.bonigarcia\" }) ![1](assets/1.png)\npublic class CucumberTest extends AbstractTestNGCucumberTests { ![2](assets/2.png)\n\n}\n```", "```java\n@RunWith(SpringRunner.class) ![1](assets/1.png)\n@SpringBootTest(classes = SpringBootDemoApp.class,\n        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) ![2](assets/2.png)\npublic class SpringBootJUnit4Test {\n\n    private WebDriver driver;\n\n    @LocalServerPort ![3](assets/3.png)\n    protected int serverPort;\n\n    @Before\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @After\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void testSpringBoot() {\n        driver.get(\"http://localhost:\" + serverPort);\n        String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n        assertThat(bodyText)\n                .contains(\"This is a local site served by Spring-Boot\");\n    }\n\n}\n```", "```java\n@SpringBootTest(classes = SpringBootDemoApp.class,\n        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) ![1](assets/1.png)\npublic class SpringBootNGTest extends AbstractTestNGSpringContextTests { ![2](assets/2.png)\n\n    // Same logic as the previous test \n}\n```", "```java\n@ExtendWith(SpringExtension.class) ![1](assets/1.png)\n@SpringBootTest(classes = SpringBootDemoApp.class,\n        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) ![2](assets/2.png)\nclass SpringBootJupiterTest {\n\n    // Same logic as the previous test \n}\n```", "```java\n@ExtendWith({ SeleniumJupiter.class, SpringExtension.class }) ![1](assets/1.png)\n@SpringBootTest(classes = SpringBootDemoApp.class,\n        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass SpringBootSelJupTest {\n\n    @LocalServerPort\n    protected int serverPort;\n\n    @Test\n    void testSpringBoot(ChromeDriver driver) { ![2](assets/2.png)\n        driver.get(\"http://localhost:\" + serverPort);\n        String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n        assertThat(bodyText)\n                .contains(\"This is a local site served by Spring-Boot\");\n    }\n\n}\n```"]