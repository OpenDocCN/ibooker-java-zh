["```java\npublic class BusinessRuleEngine {\n\n    public void addAction(final Action action) {\n        throw new UnsupportedOperationException();\n    }\n\n    public int count() {\n        throw new UnsupportedOperationException();\n    }\n\n    public void run() {\n        throw new UnsupportedOperationException();\n    }\n\n}\n```", "```java\n@FunctionalInterface\npublic interface Action {\n   void execute();\n}\n```", "```java\n@Test\nvoid shouldHaveNoRulesInitially() {\n    final BusinessRuleEngine businessRuleEngine = new BusinessRuleEngine();\n\n    assertEquals(0, businessRuleEngine.count());\n}\n\n@Test\nvoid shouldAddTwoActions() {\n    final BusinessRuleEngine businessRuleEngine = new BusinessRuleEngine();\n\n    businessRuleEngine.addAction(() -> {});\n    businessRuleEngine.addAction(() -> {});\n\n    assertEquals(2, businessRuleEngine.count());\n}\n```", "```java\npublic class BusinessRuleEngine {\n\n    private final List<Action> actions;\n\n    public BusinessRuleEngine() {\n        this.actions = new ArrayList<>();\n    }\n\n    public void addAction(final Action action) {\n        this.actions.add(action);\n    }\n\n    public int count() {\n        return this.actions.size();\n    }\n\n    public void run(){\n        throw new UnsupportedOperationException();\n    }\n}\n```", "```java\nimport static org.mockito.Mockito.*;\n```", "```java\n@Test\nvoid shouldExecuteOneAction() {\n        final BusinessRuleEngine businessRuleEngine = new BusinessRuleEngine();\n        final Action mockAction = mock(Action.class);\n\n        businessRuleEngine.addAction(mockAction);\n        businessRuleEngine.run();\n\n        verify(mockAction).perform();\n}\n```", "```java\nWanted but not invoked:\naction.perform();\n-> at BusinessRuleEngineTest.shouldExecuteOneAction(BusinessRuleEngineTest.java:35)\nActually, there were zero interactions with this mock.\n```", "```java\npublic void run() {\n    this.actions.forEach(Action::perform);\n}\n```", "```java\n// this object could be created from a form\nfinal Customer customer = new Customer(\"Mark\", \"CEO\");\n\nbusinessRuleEngine.addAction(new Action() {\n\n    @Override\n    public void perform() {\n        if (\"CEO\".equals(customer.getJobTitle())) {\n            Mailer.sendEmail(\"sales@company.com\", \"Relevant customer: \" + customer);\n        }\n    }\n});\n```", "```java\n// this object could be created from a form\nfinal Customer customer = new Customer(\"Mark\", \"CEO\");\n\nbusinessRuleEngine.addAction(() -> {\n    if (\"CEO\".equals(customer.getJobTitle())) {\n        Mailer.sendEmail(\"sales@company.com\", \"Relevant customer: \" + customer);\n    }\n});\n```", "```java\n@Test\npublic void shouldPerformAnActionWithFacts() {\n    final Action mockAction = mock(Action.class);\n    final Facts mockFacts = mock(Facts.class);\n    final BusinessRuleEngine businessRuleEngine = new BusinessRuleEngine(mockedFacts);\n\n    businessRuleEngine.addAction(mockAction);\n    businessRuleEngine.run();\n\n    verify(mockAction).perform(mockFacts);\n}\n```", "```java\npublic class Facts {\n\n    private final Map<String, String> facts = new HashMap<>();\n\n    public String getFact(final String name) {\n        return this.facts.get(name);\n    }\n\n    public void addFact(final String name, final String value) {\n        this.facts.put(name, value);\n    }\n}\n```", "```java\n@FunctionalInterface\npublic interface Action {\n    void perform(Facts facts);\n}\n```", "```java\npublic class BusinessRuleEngine {\n\n    private final List<Action> actions;\n    private final Facts facts;\n\n    public BusinessRuleEngine(final Facts facts) {\n        this.facts = facts;\n        this.actions = new ArrayList<>();\n    }\n\n    public void addAction(final Action action) {\n        this.actions.add(action);\n    }\n\n    public int count() {\n        return this.actions.size();\n    }\n\n    public void run() {\n        this.actions.forEach(action -> action.perform(facts));\n    }\n}\n```", "```java\nbusinessRuleEngine.addAction(facts -> {\n    final String jobTitle = facts.getFact(\"jobTitle\");\n    if (\"CEO\".equals(jobTitle)) {\n        final String name = facts.getFact(\"name\");\n        Mailer.sendEmail(\"sales@company.com\", \"Relevant customer: \" + name);\n    }\n});\n```", "```java\nMap<String, String> facts = new HashMap<>();\n```", "```java\nMap<String, String> facts = new HashMap<String, String>();\n```", "```java\nFacts env = new Facts();\nBusinessRuleEngine businessRuleEngine = new BusinessRuleEngine(env);\n```", "```java\nvar env = new Facts();\nvar businessRuleEngine = new BusinessRuleEngine(env);\n```", "```java\nfinal Facts env = new Facts();\n```", "```java\nvar env = new Facts();\n```", "```java\nfinal var env = new Facts()\n```", "```java\nbusinessRuleEngine.addAction(facts -> {\n    var jobTitle = facts.getFact(\"jobTitle\");\n    if (\"CEO\".equals(jobTitle)) {\n        var name = facts.getFact(\"name\");\n        Mailer.sendEmail(\"sales@company.com\", \"Relevant customer: \" + name);\n    }\n});\n```", "```java\npublic enum Stage {\n    LEAD, INTERESTED, EVALUATING, CLOSED\n}\n```", "```java\nbusinessRuleEngine.addAction(facts -> {\n    var forecastedAmount = 0.0;\n    var dealStage = Stage.valueOf(facts.getFact(\"stage\"));\n    var amount = Double.parseDouble(facts.getFact(\"amount\"));\n    if(dealStage == Stage.LEAD){\n        forecastedAmount = amount * 0.2;\n    } else if (dealStage == Stage.EVALUATING) {\n        forecastedAmount = amount * 0.5;\n    } else if(dealStage == Stage.INTERESTED) {\n        forecastedAmount = amount * 0.8;\n    } else if(dealStage == Stage.CLOSED) {\n        forecastedAmount = amount;\n    }\n    facts.addFact(\"forecastedAmount\", String.valueOf(forecastedAmount));\n});\n```", "```java\nswitch (dealStage) {\n    case LEAD:\n        forecastedAmount = amount * 0.2;\n        break;\n    case EVALUATING:\n        forecastedAmount = amount * 0.5;\n        break;\n    case INTERESTED:\n        forecastedAmount = amount * 0.8;\n        break;\n    case CLOSED:\n        forecastedAmount = amount;\n        break;\n}\n```", "```java\nvar forecastedAmount = amount * switch (dealStage) {\n    case LEAD -> 0.2;\n    case EVALUATING -> 0.5;\n    case INTERESTED -> 0.8;\n    case CLOSED -> 1;\n}\n```", "```java\nerror: the switch expression does not cover all possible input values.\n```", "```java\nbusinessRuleEngine.addAction(facts -> {\n    var dealStage = Stage.valueOf(facts.getFact(\"stage\"));\n    var amount = Double.parseDouble(facts.getFact(\"amount\"));\n    var forecastedAmount = amount * switch (dealStage) {\n        case LEAD -> 0.2;\n        case EVALUATING -> 0.5;\n        case INTERESTED -> 0.8;\n        case CLOSED -> 1;\n    }\n    facts.addFact(\"forecastedAmount\", String.valueOf(forecastedAmount));\n});\n```", "```java\npublic interface ConditionalAction {\n    boolean evaluate(Facts facts);\n    void perform(Facts facts);\n}\n```", "```java\npublic class Inspector {\n\n    private final List<ConditionalAction> conditionalActionList;\n\n    public Inspector(final ConditionalAction...conditionalActions) {\n        this.conditionalActionList = Arrays.asList(conditionalActions);\n    }\n\n    public List<Report> inspect(final Facts facts) {\n        final List<Report> reportList = new ArrayList<>();\n        for (ConditionalAction conditionalAction : conditionalActionList) {\n            final boolean conditionResult = conditionalAction.evaluate(facts);\n            reportList.add(new Report(facts, conditionalAction, conditionResult));\n        }\n        return reportList;\n    }\n}\n```", "```java\npublic class Report {\n\n    private final ConditionalAction conditionalAction;\n    private final Facts facts;\n    private final boolean isPositive;\n\n    public Report(final Facts facts,\n                     final ConditionalAction conditionalAction,\n                     final boolean isPositive) {\n        this.facts = facts;\n        this.conditionalAction = conditionalAction;\n        this.isPositive = isPositive;\n    }\n\n    public ConditionalAction getConditionalAction() {\n        return conditionalAction;\n    }\n\n    public Facts getFacts() {\n        return facts;\n    }\n\n    public boolean isPositive() {\n        return isPositive;\n    }\n\n    @Override\n    public String toString() {\n        return \"Report{\" +\n                \"conditionalAction=\" + conditionalAction +\n                \", facts=\" + facts +\n                \", result=\" + isPositive +\n                '}';\n    }\n}\n```", "```java\npublic class InspectorTest {\n\n    @Test\n    public void inspectOneConditionEvaluatesTrue() {\n\n        final Facts facts = new Facts();\n        facts.setFact(\"jobTitle\", \"CEO\");\n        final ConditionalAction conditionalAction = new JobTitleCondition();\n        final Inspector inspector = new Inspector(conditionalAction);\n\n        final List<Report> reportList = inspector.inspect(facts);\n\n        assertEquals(1, reportList.size());\n        assertEquals(true, reportList.get(0).isPositive());\n    }\n\n    private static class JobTitleCondition implements ConditionalAction {\n\n        @Override\n        public void perform(Facts facts) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean evaluate(Facts facts) {\n            return \"CEO\".equals(facts.getFact(\"jobTitle\"));\n        }\n    }\n}\n```", "```java\n@FunctionalInterface\npublic interface Condition {\n    boolean evaluate(Facts facts);\n}\n```", "```java\n@FunctionalInterface\ninterface Rule {\n    void perform(Facts facts);\n}\n\npublic class DefaultRule implements Rule {\n\n    private final Condition condition;\n    private final Action action;\n\n    public Rule(final Condition condition, final Action action) {\n        this.condition = condition;\n        this.action = action;\n    }\n\n    public void perform(final Facts facts) {\n        if(condition.evaluate(facts)){\n            action.execute(facts);\n        }\n    }\n}\n```", "```java\nfinal Condition condition = (Facts facts) -> \"CEO\".equals(facts.getFact(\"jobTitle\"));\nfinal Action action = (Facts facts) -> {\n      var name = facts.getFact(\"name\");\n      Mailer.sendEmail(\"sales@company.com\", \"Relevant customer!!!: \" + name);\n};\n\nfinal Rule rule = new DefaultRule(condition, action);\n```", "```java\npublic class RuleBuilder {\n    private Condition condition;\n    private Action action;\n\n    public RuleBuilder when(final Condition condition) {\n        this.condition = condition;\n        return this;\n    }\n\n    public RuleBuilder then(final Action action) {\n        this.action = action;\n        return this;\n    }\n\n    public Rule createRule() {\n        return new DefaultRule(condition, action);\n    }\n}\n```", "```java\nRule rule = new RuleBuilder()\n        .when(facts -> \"CEO\".equals(facts.getFact(\"jobTitle\")))\n        .then(facts -> {\n            var name = facts.getFact(\"name\");\n            Mailer.sendEmail(\"sales@company.com\", \"Relevant customer: \" + name);\n        })\n        .createRule();\n```", "```java\npublic class RuleBuilder {\n    private final Condition condition;\n\n    private RuleBuilder(final Condition condition) {\n        this.condition = condition;\n    }\n\n    public static RuleBuilder when(final Condition condition) {\n        return new RuleBuilder(condition);\n    }\n\n    public Rule then(final Action action) {\n        return new DefaultRule(condition, action);\n    }\n}\n```", "```java\nfinal Rule ruleSendEmailToSalesWhenCEO = RuleBuilder\n        .when(facts -> \"CEO\".equals(facts.getFact(\"jobTitle\")))\n        .then(facts -> {\n            var name = facts.getFact(\"name\");\n            Mailer.sendEmail(\"sales@company.com\", \"Relevant customer!!!: \" + name);\n        });\n```", "```java\npublic class BusinessRuleEngine {\n\n    private final List<Rule> rules;\n    private final Facts facts;\n\n    public BusinessRuleEngine(final Facts facts) {\n        this.facts = facts;\n        this.rules = new ArrayList<>();\n    }\n\n    public void addRule(final Rule rule) {\n        this.rules.add(rule);\n    }\n\n    public void run() {\n        this.rules.forEach(rule -> rule.perform(facts));\n    }\n\n}\n```"]