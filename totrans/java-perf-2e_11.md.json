["```java\ntry (Connection c = DriverManager.getConnection(URL, p)) {\n    try (PreparedStatement ps = c.prepareStatement(insertStockSQL);\n         PreparedStatement ps2 = c.prepareStatement(insertOptionSQL)) {\n        for (StockPrice sp : stockPrices) {\n            String symbol = sp.getSymbol();\n            ps.clearParameters();\n            ps.setBigDecimal(1, sp.getClosingPrice());\n\t    ... set other parameters ...\n            ps.executeUpdate();\n            for (int j = 0; j < 5; j++) {\n                ps2.clearParameters();\n                ps2.setBigDecimal(1,\n                    sp.getClosingPrice().multiply(\n                        new BigDecimal(1 + j / 100.)));\n                ... set other parameters ...\n                ps2.executeUpdate();\n            }\n        }\n    }\n}\n```", "```java\ntry (Connection c = DriverManager.getConnection(URL, p)) {\n    c.setAutoCommit(false);\n    try (PreparedStatement ps = c.prepareStatement(insertStockSQL);\n         PreparedStatement ps2 = c.prepareStatement(insertOptionSQL)) {\n        ... same code as before ....\n    }\n    c.commit();\n}\n```", "```java\ntry (Connection c = DriverManager.getConnection(URL, p)) {\n    c.setAutoCommit(false);\n    String lastSymbol = null;\n    try (PreparedStatement ps = c.prepareStatement(insertStockSQL);\n         PreparedStatement ps2 = c.prepareStatement(insertOptionSQL)) {\n        for (StockPrice sp : stockPrices) {\n\t    String symbol = sp.getSymbol();\n\t    if (lastSymbol != null && !symbol.equals(lastSymbol)) {\n\t\t// We are processing a new symbol; commit the previous symbol\n\t        c.commit();\n\t    }\n\t}\n    }\n    c.commit();\n}\n```", "```java\ntry (Connection c = DriverManager.getConnection(URL, p)) {\n    try (PreparedStatement ps = c.prepareStatement(insertStockSQL);\n         PreparedStatement ps2 = c.prepareStatement(insertOptionSQL)) {\n        for (StockPrice sp : stockPrices) {\n            String symbol = sp.getSymbol();\n            ps.clearParameters();\n            ps.setBigDecimal(1, sp.getClosingPrice());\n\t    ... set other parameters ...\n            ps.addBatch();\n            for (int j = 0; j < 5; j++) {\n                ps2.clearParameters();\n                ps2.setBigDecimal(1,\n                    sp.getClosingPrice().multiply(\n                        new BigDecimal(1 + j / 100.)));\n                ... set other parameters ...\n                ps2.addBatch();\n            }\n        }\n\tps.executeBatch();\n\tps2.executeBatch();\n    }\n}\n```", "```java\ntry (Connection c = DriverManager.getConnection(URL, p)) {\n    c.setAutoCommit(false);\n    c.setTransactionIsolation(TRANSACTION_READ_UNCOMMITTED);\n    try (PreparedStatement ps1 = c.prepareStatement(\n        \"SELECT * FROM employee WHERE e_id = ? FOR UPDATE\")) {\n        ... process info from ps1 ...\n    }\n    try (PreparedStatement ps2 = c.prepareStatement(\n           \"SELECT * FROM office WHERE office_id = ?\")) {\n        ... process info from ps2 ...\n    }\n    c.commit();\n}\n```", "```java\nSELECT first_name, last_name, version FROM employee WHERE e_id = 5058;\n```", "```java\nUPDATE employee SET version = 1013 WHERE e_id = 5058 AND version = 1012;\n```", "```java\nSELECT * FROM stockprice WHERE symbol = 'TPKS' AND\n\tpricedate >= '2019-01-01' AND pricedate <= '2019-12-31';\n```", "```java\nSELECT * FROM stockprice s, stockoptionprice o WHERE\n\to.symbol = s.symbol AND s.pricedate >= '2019-01-01'\n\tAND s.pricedate <= '2019-12-31';\n```", "```java\ntry (PreparedStatement ps = c.prepareStatement(...)) {\n    try (ResultSet rs = ps.executeQuery()) {\n        while (rs.next()) {\n            ... read the current row ...\n        }\n    }\n}\n```", "```java\n      <property name=\"eclipselink.jdbc.cache-statements\" value=\"true\" />\n```", "```java\n      <property name=\"eclipselink.jdbc.batch-writing\" value=\"JDBC\" />\n      <property name=\"eclipselink.jdbc.batch-writing.size\" value=\"10000\" />\n```", "```java\n@Lob\n@Column(name = \"IMAGEDATA\")\n@Basic(fetch = FetchType.LAZY)\nprivate byte[] imageData;\n```", "```java\n@OneToMany(mappedBy=\"stock\", fetch=FetchType.EAGER)\nprivate Collection<StockOptionPriceImpl> optionsPrices;\n```", "```java\nQuery q = em.createQuery(\"SELECT s FROM StockPriceImpl s\");\n```", "```java\nSELECT <enumerated list of non-LAZY fields> FROM StockPriceTable\n```", "```java\nQuery q = em.createQuery(\"SELECT s FROM StockOptionImpl s \" +\n\t\t\t \"JOIN FETCH s.optionsPrices\");\n```", "```java\nSELECT t1.<fields>, t0.<fields> FROM StockOptionPrice t0, StockPrice t1\nWHERE ((t0.SYMBOL = t1.SYMBOL) AND (t0.PRICEDATE = t1.PRICEDATE))\n```", "```java\nq.setHint(\"eclipselink.JDBC_FETCH_SIZE\", \"100000\");\n```", "```java\nQuery q = em.createNamedQuery(\"selectAll\");\nquery.setFirstResult(101);\nquery.setMaxResults(100);\nList<? implements StockPrice>  = q.getResultList();\n```", "```java\nEntityManager em = emf.createEntityManager();\nQuery q = em.createNamedQuery(queryName);\nList<StockPrice> l = q.getResultList(); ![1](assets/1.png)\nfor (StockPrice sp : l) {\n    ... process sp ...\n    if (processOptions) {\n        Collection<? extends StockOptionPrice> options = sp.getOptions(); ![2](assets/2.png)\n        for (StockOptionPrice sop : options) {\n\t    ... process sop ...\n        }\n    }\n}\nem.close();\n```", "```java\n@NamedQuery(name=\"findAll\",\n    query=\"SELECT s FROM StockPriceImpl s ORDER BY s.id.symbol\")\n```", "```java\n@OneToMany(mappedBy=\"stock\")\nprivate Collection<StockOptionPrice> optionsPrices;\n```", "```java\n@NamedQuery(name=\"findAll\",\n    query=\"SELECT s FROM StockPriceEagerLazyImpl s \" +\n    \"JOIN FETCH s.optionsPrices ORDER BY s.id.symbol\")\n```", "```java\nEntityManager em = emf.createEntityManager();\nArrayList<String> allSymbols = ... all valid symbols ...;\nArrayList<Date> allDates = ... all valid dates...;\nfor (String symbol : allSymbols) {\n    for (Date date = allDates) {\n        StockPrice sp =\n            em.find(StockPriceImpl.class, new StockPricePK(symbol, date);\n\t... process sp ...\n        if (processOptions) {\n    \t    Collection<? extends StockOptionPrice> options = sp.getOptions();\n\t    ... process options ...\n\t}\n    }\n}\n```"]