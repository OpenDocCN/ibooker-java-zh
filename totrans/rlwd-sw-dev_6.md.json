["```java\n@Test\npublic void shouldBeAbleToAuthenticateUser()\n{\n    // receive logon message for valid user\n\n    // logon method returns new endpoint.\n\n    // assert that endpoint is valid\n}\n```", "```java\nSenderEndPoint onLogon(String userId, ReceiverEndPoint receiver);\n```", "```java\nOptional<SenderEndPoint> onLogon(String userId, ReceiverEndPoint receiver);\n```", "```java\n    @Test\n    public void shouldNotAuthenticateUserWithWrongPassword()\n    {\n        final Optional<SenderEndPoint> endPoint = twootr.onLogon(\n            TestData.USER_ID, \"bad password\", receiverEndPoint);\n\n        assertFalse(endPoint.isPresent());\n    }\n```", "```java\nclass KeyGenerator {\n    private static final int SCRYPT_COST = 16384;\n    private static final int SCRYPT_BLOCK_SIZE = 8;\n    private static final int SCRYPT_PARALLELISM = 1;\n    private static final int KEY_LENGTH = 20;\n\n    private static final int SALT_LENGTH = 16;\n\n    private static final SecureRandom secureRandom = new SecureRandom();\n\n    static byte[] hash(final String password, final byte[] salt) {\n        final byte[] passwordBytes = password.getBytes(UTF_16);\n        return SCrypt.generate(\n            passwordBytes,\n            salt,\n            SCRYPT_COST,\n            SCRYPT_BLOCK_SIZE,\n            SCRYPT_PARALLELISM,\n            KEY_LENGTH);\n    }\n\n    static byte[] newSalt() {\n        final byte[] salt = new byte[SALT_LENGTH];\n        secureRandom.nextBytes(salt);\n        return salt;\n    }\n}\n```", "```java\n    @Test\n    public void shouldFollowValidUser()\n    {\n        logon();\n\n        final FollowStatus followStatus = endPoint.onFollow(TestData.OTHER_USER_ID);\n\n        assertEquals(SUCCESS, followStatus);\n    }\n```", "```java\npublic enum FollowStatus {\n    SUCCESS,\n    INVALID_USER,\n    ALREADY_FOLLOWING\n}\n```", "```java\n    @Test\n    public void shouldNotDuplicateFollowValidUser()\n    {\n        logon();\n\n        endPoint.onFollow(TestData.OTHER_USER_ID);\n\n        final FollowStatus followStatus = endPoint.onFollow(TestData.OTHER_USER_ID);\n        assertEquals(ALREADY_FOLLOWING, followStatus);\n    }\n```", "```java\npublic interface ReceiverEndPoint {\n    void onTwoot(Twoot twoot);\n}\n```", "```java\npublic class MockReceiverEndPoint implements ReceiverEndPoint\n{\n    private final List<Twoot> receivedTwoots = new ArrayList<>();\n\n    @Override\n    public void onTwoot(final Twoot twoot)\n    {\n        receivedTwoots.add(twoot);\n    }\n\n    public void verifyOnTwoot(final Twoot twoot)\n    {\n        assertThat(\n            receivedTwoots,\n            contains(twoot));\n    }\n}\n```", "```java\n    private final ReceiverEndPoint receiverEndPoint = mock(ReceiverEndPoint.class);\n```", "```java\nverify(receiverEndPoint).onTwoot(aTwootObject);\n```", "```java\npublic class SenderEndPoint {\n    private final User user;\n    private final Twootr twootr;\n\n    SenderEndPoint(final User user, final Twootr twootr) {\n        Objects.requireNonNull(user, \"user\");\n        Objects.requireNonNull(twootr, \"twootr\");\n\n        this.user = user;\n        this.twootr = twootr;\n    }\n\n    public FollowStatus onFollow(final String userIdToFollow) {\n        Objects.requireNonNull(userIdToFollow, \"userIdToFollow\");\n\n        return twootr.onFollow(user, userIdToFollow);\n    }\n```", "```java\nvoid onSendTwoot(final String id, final User user, final String content)\n{\n    final String userId = user.getId();\n    final Twoot twoot = new Twoot(id, userId, content);\n    user.followers()\n        .filter(User::isLoggedOn)\n        .forEach(follower -> follower.receiveTwoot(twoot));\n}\n```", "```java\n    @Test\n    public void shouldReceiveTwootsFromFollowedUser()\n    {\n        final String id = \"1\";\n\n        logon();\n\n        endPoint.onFollow(TestData.OTHER_USER_ID);\n\n        final SenderEndPoint otherEndPoint = otherLogon();\n        otherEndPoint.onSendTwoot(id, TWOOT);\n\n        verify(twootRepository).add(id, TestData.OTHER_USER_ID, TWOOT);\n        verify(receiverEndPoint).onTwoot(new Twoot(id, TestData.OTHER_USER_ID, TWOOT, new Position(0)));\n    }\n```", "```java\n    @Test\n    public void shouldReceiveReplayOfTwootsAfterLogoff()\n    {\n        final String id = \"1\";\n\n        userFollowsOtherUser();\n\n        final SenderEndPoint otherEndPoint = otherLogon();\n        otherEndPoint.onSendTwoot(id, TWOOT);\n\n        logon();\n\n        verify(receiverEndPoint).onTwoot(twootAt(id, POSITION_1));\n    }\n```", "```java\npublic class Position {\n    /**\n * Position before any tweets have been seen\n */\n    public static final Position INITIAL_POSITION = new Position(-1);\n\n    private final int value;\n\n    public Position(final int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Position{\" +\n            \"value=\" + value +\n            '}';\n    }\n\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        final Position position = (Position) o;\n\n        return value == position.value;\n    }\n\n    @Override\n    public int hashCode() {\n        return value;\n    }\n\n    public Position next() {\n        return new Position(value + 1);\n    }\n}\n```", "```java\nclass Point {\n    private final int x;\n    private final int y;\n\n    Point(final int x, final int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    int getX() {\n        return x;\n    }\n\n    int getY() {\n        return y;\n    }\n```", "```java\nfinal Point p1 = new Point(1, 2);\nfinal Point p2 = new Point(1, 2);\nSystem.out.println(p1 == p2); // prints false\n```", "```java\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        final Point point = (Point) o;\n\n        if (x != point.x) return false;\n        return y == point.y;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = x;\n        result = 31 * result + y;\n        return result;\n    }\n\nfinal Point p1 = new Point(1, 2);\nfinal Point p2 = new Point(1, 2);\nSystem.out.println(p1.equals(p2)); // prints true\n```"]