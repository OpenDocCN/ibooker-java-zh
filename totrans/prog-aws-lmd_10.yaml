- en: Chapter 10\. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this book was for you to learn what it means to build and run applications
    using serverless technology on AWS, with AWS Lambda at the core of those systems.
    We hope that you feel empowered to do this, safe in the knowledge that Java is
    truly a first-class language choice in the serverless world.
  prefs: []
  type: TYPE_NORMAL
- en: 'We encourage you to reflect on some of the points we’ve tried to emphasize
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Above all, know that trying out ideas with serverless systems is quick, and
    cheap. If in doubt, experiment!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that Lambda code is “just code.” Lambda is not a framework, or an “application
    server” in the traditional sense—your Lambda functions are just small pieces of
    Java that process a JSON event. This makes unit testing, and incremental development
    within your IDE, fast and nimble. Similarly, try not to bloat your functions with
    unnecessary libraries and frameworks that were designed for alternative runtime
    models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate the scripting of building and deploying your functions to the AWS Cloud.
    You want to be able to rapidly iterate in the same environment that will be processing
    production events. Use the techniques we’ve shown throughout the book with Maven,
    SAM, and CloudFormation to enable this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we showed in [Chapter 6](ch06.html#ch06), spend most of your testing time
    on quick unit and functional tests that run locally within one JVM along with
    functions under test, but also invest in the automation of end-to-end tests that
    exercise your functions running on the Lambda platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to keep each of your Lambda functions focused on solving one task. Just
    include the code and libraries necessary to handle each function’s own events.
    Where necessary, use code sharing as we described in [“Build and Package Using
    Multiple Modules and Isolated Artifacts”](ch05.html#multi-module-build-and-package).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t give in to the fear of cold starts! Typically either they won’t be a concern
    for you once your application is in production, or you can use one or more remediation
    techniques if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure your serverless applications appropriately, considering the principle
    of least privilege, using AWS IAM. Your organization may end up with thousands
    of deployed Lambda functions, so you want to reduce the blast radius of each to
    reduce the impact of bugs or perhaps malicious intent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that logging and metrics work a little differently in this new world
    of Lambda. Use structured logging as much as you can; remember that you want to
    be able to observe behavior of your complete system, not just an individual function.
    Consider what metrics best indicate the health of the system as far as your users
    are concerned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you build your serverless applications, embrace an “event-driven” mode of
    thinking. Even for functions invoked synchronously, consider how each invocation
    represents the passing of a self-contained message from one component to the next.
    And then think about how you can make your system as asynchronous as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t necessarily throw away your nonserverless services. Things like relational
    databases might still be the best way for you to solve certain problems, especially
    if they already exist in your larger ecosystem. But do think carefully about how
    to use them in a world where scale is handled very differently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, serverless is a lot bigger than just Lambda—consider how you can lean
    on BaaS products from AWS and others to reduce the amount of code you need to
    write and operate. Even when you’ve settled on a particular service, investigate
    all of its features—it may have some hidden gems that can save you days or weeks
    of work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We hope you’ve enjoyed this book, have found it valuable, and that it continues
    to be a useful resource to you over the coming months and years. We will continue
    to write and speak about what we learn and build with Lambda and other AWS technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find our work at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: On Twitter at [*https://twitter.com/symphoniacloud*](https://twitter.com/symphoniacloud),
    [*https://twitter.com/johnchapin*](https://twitter.com/johnchapin), and [*https://twitter.com/mikebroberts*](https://twitter.com/mikebroberts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our blog at [*https://blog.symphonia.io*](https://blog.symphonia.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our website at [*https://www.symphonia.io*](https://www.symphonia.io)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our GitHub repositories at [*https://github.com/symphoniacloud*](https://github.com/symphoniacloud)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And of course, we’d love to hear how you get along. Please feel free to drop
    us a line at [johnandmike@symphonia.io](mailto:johnandmike@symphonia.io).
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and go serverless!
  prefs: []
  type: TYPE_NORMAL
