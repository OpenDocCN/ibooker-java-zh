["```java\nfun add(a: Int, b: Int): Int {\n    return a + b\n}\n```", "```java\nfun addToo(a: Int, b: Int): Int = a + b\n```", "```java\nfun max(a: Int, b: Int): Int =\n    when {\n        a > b -> a\n        else -> b\n    }\n```", "```java\nfun printTwice(s: String): Unit = println(\"$s\\n$s\")\n```", "```java\ndata class EmailAddress(\n    val localPart: String,\n    val domain: String\n) {\n\n    override fun toString() = \"$localPart@$domain\"\n\n    companion object {\n        @JvmStatic\n        fun parse(value: String): EmailAddress {\n            val atIndex = value.lastIndexOf('@')\n            require(!(atIndex < 1 || atIndex == value.length - 1)) {\n                \"EmailAddress must be two parts separated by @\"\n            }\n            return EmailAddress(\n                value.substring(0, atIndex),\n                value.substring(atIndex + 1)\n            )\n        }\n    }\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@') ![1](assets/1.png)\n    require(!(atIndex < 1 || atIndex == value.length - 1)) { ![2](assets/2.png)\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress( ![3](assets/3.png)\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    require(!(\n        value.lastIndexOf('@') < 1 ||\n            value.lastIndexOf('@') == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress(\n        value.substring(0, value.lastIndexOf('@')),\n        value.substring(value.lastIndexOf('@') + 1)\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    return emailAddress(value, atIndex)\n}\n\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    return emailAddress(value, value.lastIndexOf('@'))\n}\n\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    if (!!(atIndex < 1 || atIndex == value.length - 1)) {\n        val message = \"EmailAddress must be two parts separated by @\"\n        throw IllegalArgumentException(message.toString())\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    if ((atIndex < 1 || atIndex == value.length - 1)) {\n        throw IllegalArgumentException(\n            \"EmailAddress must be two parts separated by @\"\n        )\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    if ((atIndex < 1 || atIndex == value.length - 1)) {\n        throw IllegalArgumentException(\n            \"EmailAddress must be two parts separated by @\"\n        )\n    } else {\n        return EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress {\n    return if ((atIndex < 1 || atIndex == value.length - 1)) {\n        throw IllegalArgumentException(\n            \"EmailAddress must be two parts separated by @\"\n        )\n    } else {\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress =\n    if ((atIndex < 1 || atIndex == value.length - 1)) {\n        throw IllegalArgumentException(\n            \"EmailAddress must be two parts separated by @\"\n        )\n    } else {\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n```", "```java\nfun parse(value: String) =\n    emailAddress(value, value.lastIndexOf('@'))\n\nprivate fun emailAddress(value: String, atIndex: Int): EmailAddress =\n    when {\n        atIndex < 1 || atIndex == value.length - 1 ->\n            throw IllegalArgumentException(\n                \"EmailAddress must be two parts separated by @\"\n            )\n        else -> EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    atIndex.let {\n        require(!(atIndex < 1 || atIndex == value.length - 1)) {\n            \"EmailAddress must be two parts separated by @\"\n        }\n        return EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    return atIndex.let {\n        require(!(atIndex < 1 || atIndex == value.length - 1)) {\n            \"EmailAddress must be two parts separated by @\"\n        }\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    return atIndex.let { atIndex -> ![1](assets/1.png)\n        require(!(atIndex < 1 || atIndex == value.length - 1)) {\n            \"EmailAddress must be two parts separated by @\"\n        }\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    return value.lastIndexOf('@').let { atIndex ->\n        require(!(atIndex < 1 || atIndex == value.length - 1)) {\n            \"EmailAddress must be two parts separated by @\"\n        }\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n}\n```", "```java\nfun parse(value: String): EmailAddress =\n    value.lastIndexOf('@').let { atIndex ->\n        require(!(atIndex < 1 || atIndex == value.length - 1)) {\n            \"EmailAddress must be two parts separated by @\"\n        }\n        EmailAddress(\n            value.substring(0, atIndex),\n            value.substring(atIndex + 1)\n        )\n    }\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    return EmailAddress(\n        value.substring(0, atIndex),\n        value.substring(atIndex + 1)\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val atIndex = value.lastIndexOf('@')\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    val leftPart = value.substring(0, atIndex)\n    val rightPart = value.substring(atIndex + 1)\n    return EmailAddress(\n        leftPart,\n        rightPart\n    )\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val (leftPart, rightPart) = split(value)\n    return EmailAddress(\n        leftPart,\n        rightPart\n    )\n}\n\nprivate fun split(value: String): Pair<String, String> {\n    val atIndex = value.lastIndexOf('@')\n    require(!(atIndex < 1 || atIndex == value.length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    val leftPart = value.substring(0, atIndex)\n    val rightPart = value.substring(atIndex + 1)\n    return Pair(leftPart, rightPart)\n}\n```", "```java\nfun parse(value: String): EmailAddress {\n    val (leftPart, rightPart) = value.split('@')\n    return EmailAddress(\n        leftPart,\n        rightPart\n    )\n}\n\nprivate fun String.split(divider: Char): Pair<String, String> {\n    val atIndex = lastIndexOf(divider)\n    require(!(atIndex < 1 || atIndex == length - 1)) {\n        \"EmailAddress must be two parts separated by @\"\n    }\n    val leftPart = substring(0, atIndex)\n    val rightPart = substring(atIndex + 1)\n    return Pair(leftPart, rightPart)\n}\n```", "```java\nfun parse(value: String): EmailAddress =\n    value.split('@').let { (leftPart, rightPart) ->\n        EmailAddress(leftPart, rightPart)\n    }\n```", "```java\ndata class EmailAddress(\n    val localPart: String,\n    val domain: String\n) {\n\n    override fun toString() = \"$localPart@$domain\"\n\n    companion object {\n        @JvmStatic\n        fun parse(value: String): EmailAddress =\n            value.splitAroundLast('@').let { (leftPart, rightPart) ->\n                EmailAddress(leftPart, rightPart)\n            }\n    }\n}\n\nprivate fun String.splitAroundLast(divider: Char): Pair<String, String> =\n    lastIndexOf(divider).let { index ->\n        require(index >= 1 && index != length - 1) {\n            \"string must be two non-empty parts separated by $divider\"\n        }\n        substring(0, index) to substring(index + 1)\n    }\n```"]