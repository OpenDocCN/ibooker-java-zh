["```java\nint i = 0;   // Initialize the loop variable\n```", "```java\n/*\n * First, establish a connection to the server.\n * If the connection attempt fails, quit right away.\n */\n```", "```java\n/**\n * Upload a file to a web server.\n *\n * @param file The file to upload.\n * @return <tt>true</tt> on success,\n *         <tt>false</tt> on failure.\n * @author David Flanagan\n */\n```", "```java\nabstract   const      final        int         public        throw\nassert     continue   finally      interface   return        throws\nboolean    default    float        long        short         transient\nbreak      do         for          native      static        true\nbyte       double     goto         new         strictfp      try\ncase       else       if           null        super         void\ncatch      enum       implements   package     switch        volatile\nchar       extends    import       private     synchronized  while\nclass      false      instanceof   protected   this\n_ (underscore)\n```", "```java\nexports      opens      requires     uses\nmodule       permits    sealed       var\nnon-sealed   provides   to           with\nopen         record     transitive   yield\n```", "```java\ni    x1    theCurrentTime    current    獺\n```", "```java\n1    1.0    '1'    1L    \"one\"    true    false    null\n```", "```java\nObject o = new Object();\nint i = 1;\n\nif (o) {     // Invalid!\n  while(i) {\n    //...\n  }\n}\n```", "```java\nif (o != null) {\n  while(i != 0) {\n    // ...\n  }\n}\n```", "```java\nchar c = 'A';\n```", "```java\nchar tab = '\\t', nul = '\\000', aleph = '\\u05D0', backslash = '\\\\';\n```", "```java\n\"Hello World\"\n\"'This' is a string!\"\n```", "```java\n\"\"\"\nMulti-line text blocks\nCan use \"double quotes\" without escaping\n\"\"\"\n```", "```java\n0\n1\n123\n9_000\n-42000\n```", "```java\n1234        // An int value\n1234L       // A long value\n0xffL       // Another long value\n```", "```java\n0xff              // Decimal 255, expressed in hexadecimal\n0377              // The same number, expressed in octal (base 8)\n0b0010_1111       // Decimal 47, expressed in binary\n0xCAFEBABE        // A magic number used to identify Java class files\n```", "```java\nbyte b1 = 127, b2 = 1;        // Largest byte is 127\nbyte sum = (byte)(b1 + b2);   // Sum wraps to -128, the smallest byte\n```", "```java\nbyte b3 = -128, b4 = 5;        // Smallest byte is -128\nbyte sum2 = (byte)(b3 - b4);   // Sum wraps to a large byte value, 123\n```", "```java\n123.45\n0.0\n.01\n```", "```java\n1.2345E02    // 1.2345 * 10^2 or 123.45\n1e-6         // 1 * 10^-6 or 0.000001\n6.02e23      // Avogadro's Number: 6.02 * 10^23\n```", "```java\ndouble d = 6.02E23;\nfloat f = 6.02e23f;\n```", "```java\ndouble inf = 1.0/0.0;             // Infinity\ndouble neginf = -1.0/0.0;         // Negative infinity\ndouble negzero = -1.0/inf;        // Negative zero\ndouble NaN = 0.0/0.0;             // Not a Number\n```", "```java\ndouble NaN = 0.0/0.0;             // Not a Number\nNaN == NaN;                       // false\nDouble.isNaN(NaN);                // true\n```", "```java\nint i = 13;\n// byte b = i;    // Incompatible types: possible lossy conversion\n                  // from int to byte\n```", "```java\nbyte b = 13;\n```", "```java\nint i = 13;\nbyte b = (byte) i;   // Force the int to be converted to a byte\ni = (int) 13.456;    // Force this double literal to the int 13\n```", "```java\nshort s = (short) 0xffff; // These bits represent the number -1\nchar c = '\\uffff';        // The same bits, as a Unicode character\nint i1 = s;               // Converting the short to an int yields -1\nint i2 = c;               // Converting the char to an int yields 65535\n```", "```java\n1.7         // A floating-point literal\ntrue        // A Boolean literal\nsum         // A variable\n```", "```java\nsum = 1.7\n```", "```java\nsum = 1 + 2 + 3 * 1.2 + (4 + 8)/3.0\nsum/Math.sqrt(3.0 * 1.234)\n(int)(sum + 33)\n```", "```java\na + b * c\n```", "```java\n(a + b) * c\n```", "```java\n// Class cast combined with member access\n((Integer) o).intValue();\n\n// Assignment combined with comparison\nwhile((line = in.readLine()) != null) { ... }\n\n// Bitwise operators combined with comparison\nif ((flags & (PUBLIC | PROTECTED)) != 0) { ... }\n```", "```java\na = b += c = -~d\n```", "```java\na = (b += (c = -(~d)))\n```", "```java\n-n             // The unary minus operator\n```", "```java\na – b          // The subtraction operator is a binary operator\n```", "```java\nx > y ? x : y  // Ternary expression; evaluates to larger of x and y\n```", "```java\nint a = 2;\nint v = ++a + ++a * ++a;\n```", "```java\nSystem.out.println(\"Total: \" + 3 + 4);   // Prints \"Total: 34\", not 7!\n```", "```java\n7/3          // Evaluates to 2\n7/3.0f       // Evaluates to 2.333333f\n7/0          // Throws an ArithmeticException\n7/0.0        // Evaluates to positive infinity\n0.0/0.0      // Evaluates to NaN\n```", "```java\n// Prints \"Quotient: 2.3333333\"\nSystem.out.println(\"Quotient: \" + 7/3.0f);\n```", "```java\ni = 1;\nj = ++i;\n```", "```java\ni = 1;\nj = i++;\n```", "```java\na[i++]++;             // Increments an element of an array\n\n// Adds 1 to an array element and stores new value in another element\na[i++] = a[i++] + 1;\n```", "```java\nif (o != null) ...;           // The not equals operator\nwhile(i < a.length) ...;      // The less than operator\n```", "```java\nif (x < 10 && y > 3) ... // If both comparisons are true\n```", "```java\nif ((x < 10) && (y > 3)) ...\n```", "```java\nif (data != null && i < data.length && data[i] != -1)\n    ...\n```", "```java\nif (!found) ...          // found is a boolean declared somewhere\nwhile (!c.isEmpty()) ... // The isEmpty() method returns a boolean\n```", "```java\nif (!(x > y && y > z))\n```", "```java\nbyte b = ~12;           // ~00001100 =  => 11110011 or -13 decimal\nflags = flags & ~f;     // Clear flag f in a set of flags\n```", "```java\n10 & 7                   // 00001010 & 00000111 =  => 00000010 or 2\nif ((flags & f) != 0)    // Test whether flag f is set\n```", "```java\n10 | 7                   // 00001010 | 00000111 =  => 00001111 or 15\nflags = flags | f;       // Set flag f\n```", "```java\n10 ^ 7               // 00001010 ^ 00000111 =  => 00001101 or 13\n```", "```java\n10 << 1    // 0b00001010 << 1 = 00010100 = 20 = 10*2\n7 << 3     // 0b00000111 << 3 = 00111000 = 56 = 7*8\n-1 << 2    // 0xFFFFFFFF << 2 = 0xFFFFFFFC = -4 = -1*4\n           // 0xFFFF_FFFC == 0b1111_1111_1111_1111_1111_1111_1111_1100\n```", "```java\n10 >> 1      // 00001010 >> 1 = 00000101 = 5 = 10/2\n27 >> 3      // 00011011 >> 3 = 00000011 = 3 = 27/8\n-50 >> 2     // 11001110 >> 2 = 11110011 = -13 != -50/4\n```", "```java\n0xff >>> 4    // 11111111 >>> 4 = 00001111 = 15  = 255/16\n-50 >>> 2     // 0xFFFFFFCE >>> 2 = 0x3FFFFFF3 = 1073741811\n```", "```java\na[i++] += 2;\na[i++] = a[i++] + 2;\n```", "```java\nlvalue op= rvalue\n```", "```java\nlvalue = lvalue op rvalue\n```", "```java\n+=    -=    *=    /=    %=    // Arithmetic operators plus assignment\n\n&=    |=    ^=                // Bitwise operators plus assignment\n\n<<=   >>=   >>>=              // Shift operators plus assignment\n```", "```java\ni += 2;          // Increment a loop counter by 2\nc -= 5;          // Decrement a counter by 5\nflags |= f;      // Set a flag f in an integer set of flags\nflags &= ~f;     // Clear a flag f in an integer set of flags\n```", "```java\nint max = (x > y) ? x : y;\nString name = (value != null) ? value : \"unknown\";\n```", "```java\n// True: all strings are instances of String\n\"string\" instanceof String\n// True: strings are also instances of Object\n\"\" instanceof Object\n// False: null is never an instance of anything\nnull instanceof String\n\nObject o = new int[] {1,2,3};\no instanceof int[]   // True: the array value is an int array\no instanceof byte[]  // False: the array value is not a byte array\no instanceof Object  // True: all arrays are instances of Object\n\n// Use instanceof to make sure that it is safe to cast an object\nif (object instanceof Account) {\n   Account a = (Account) object;\n}\n```", "```java\nif (object instanceof Account a) {\n   // variable a is available in this scope\n}\n```", "```java\nnew ArrayList<String>();\nnew Account(\"Jason\", 0.0, 42);\n```", "```java\n(byte) 28          // An integer literal cast to a byte type\n(int) (x + 3.14f)  // A floating-point sum value cast to an integer\n(String)h.get(k)   // A generic object cast to a string\n```", "```java\na = 1;                             // Assignment\nx *= 2;                            // Assignment with operation\ni++;                               // Post-increment\n--c;                               // Pre-decrement\nSystem.out.println(\"statement\");   // Method invocation\n```", "```java\nfor(int i = 0; i < 10; i++) {\n   a[i]++;           // Body of this loop is a compound statement.\n   b[i]--;           // It consists of two expression statements\n}                    // within curly braces.\n```", "```java\nfor(int i = 0; i < 10; a[i++]++)  // Increment array elements\n     /* empty */;                 // Loop body is empty statement\n```", "```java\nrowLoop: for(int r = 0; r < rows.length; r++) {        // Labeled loop\n   colLoop: for(int c = 0; c < columns.length; c++) {  // Another one\n     break rowLoop;                                    // Use a label\n   }\n}\n```", "```java\nint counter;\nString s;\n```", "```java\nint i = 0;\nString s = readLine();\nint[] data = {x+1, x+2, x+3}; // Array initializers are discussed later\n```", "```java\nvar i = 0;          // type of i inferred as int\nvar s = readLine(); // type of s inferred as String\n```", "```java\nint i, j, k;\nfloat x = 1.0f, y = 1.0f;\nString question = \"Really Quit?\", response;\n```", "```java\nfinal String greeting = getLocalLanguageGreeting();\n```", "```java\nvoid method() {            // A method definition\n   int i = 0;              // Declare variable i\n   while (i < 10) {        // i is in scope here\n     int j = 0;            // Declare j; the scope of j begins here\n     i++;                  // i is in scope here; increment it\n   }                       // j is no longer in scope;\n   System.out.println(i);  // i is still in scope here\n}                          // The scope of i ends here\n```", "```java\nif (username == null)         // If username is null,\n   username = \"John Doe\";     // use a default value\n```", "```java\nif ((address == null) || (address.equals(\"\"))) {\n   address = \"[undefined]\";\n   System.out.println(\"WARNING: no address specified.\");\n}\n```", "```java\nif (username != null)\n   System.out.println(\"Hello \" + username);\nelse {\n   username = askQuestion(\"What is your name?\");\n   System.out.println(\"Hello \" + username + \". Welcome!\");\n}\n```", "```java\nif (i == j)\n   if (j == k)\n     System.out.println(\"i equals k\");\nelse\n   System.out.println(\"i doesn't equal j\");    // WRONG!!\n```", "```java\nif (i == j)\n   if (j == k)\n     System.out.println(\"i equals k\");\n   else\n     System.out.println(\"i doesn't equal j\");    // WRONG!!\n```", "```java\nif (i == j) {\n   if (j == k)\n     System.out.println(\"i equals k\");\n}\nelse {\n   System.out.println(\"i doesn't equal j\");\n}\n```", "```java\nif (n == 1) {\n    // Execute code block #1\n}\nelse if (n == 2) {\n    // Execute code block #2\n}\nelse if (n == 3) {\n    // Execute code block #3\n}\nelse {\n    // If all else fails, execute block #4\n}\n```", "```java\nif (n == 1) {\n   // Execute code block #1\n}\nelse {\n   if (n == 2) {\n     // Execute code block #2\n   }\n   else {\n     if (n == 3) {\n       // Execute code block #3\n     }\n     else {\n       // If all else fails, execute block #4\n     }\n   }\n}\n```", "```java\nswitch(n) {\n   case 1:                         // Start here if n == 1\n     // Execute code block #1\n     break;                        // Stop here\n   case 2:                         // Start here if n == 2\n     // Execute code block #2\n     break;                        // Stop here\n   case 3:                         // Start here if n == 3\n     // Execute code block #3\n     break;                        // Stop here\n   default:                        // If all else fails...\n     // Execute code block #4\n     break;                        // Stop here\n}\n```", "```java\nboolean parseYesOrNoResponse(char response) {\n   switch(response) {\n     case 'y':\n     case 'Y': return true;\n     case 'n':\n     case 'N': return false;\n     default:\n       throw new IllegalArgumentException(\"Response must be Y or N\");\n   }\n}\n```", "```java\nBoolean yesOrNo = null;\nswitch(input) {\n    case \"y\":\n    case \"Y\":\n        yesOrNo = true;\n        break;\n    case \"n\":\n    case \"N\":\n        yesOrNo = false;\n        break;\n    default:\n        throw new IllegalArgumentException(\"Response must be Y or N\");\n}\n```", "```java\nboolean yesOrNo = switch(input) {\n    case \"y\" -> true;\n    case \"Y\" -> true;\n    case \"N\" -> false;\n    case \"n\" -> false;\n    default -> throw new IllegalArgumentException(\"Y or N\");\n};\n```", "```java\nboolean yesOrNo = switch(input) {\n    case \"y\" -> true;\n    case \"Y\" -> true;\n    case \"N\" -> false;\n    case \"n\" -> false;\n};\n\n// Compiler error:\n//   the switch expression does not cover all possible input values\n```", "```java\nboolean yesOrNo = switch(input) {\n    case \"y\", \"Y\" -> true;\n    case \"n\", \"N\" -> false;\n    default -> throw new IllegalArgumentException(\"Y or N\");\n};\n```", "```java\nboolean yesOrNo = switch(input) {\n    case \"y\", \"Y\" -> { System.out.println(\"Got it\"); yield true; }\n    case \"n\", \"N\" -> { System.out.println(\"Nope\"); yield false; }\n    default -> throw new IllegalArgumentException(\"Y or N\");\n};\n```", "```java\nswitch(input) {\n    case \"y\", \"Y\" -> System.out.println(\"Sure\");\n    case \"n\", \"N\" -> System.out.println(\"Nope\");\n    default -> throw new IllegalArgumentException(\"Y or N\");\n}\n```", "```java\nwhile (*`expression`*)\n  *`statement`*\n\n```", "```java\nint count = 0;\nwhile (count < 10) {\n   System.out.println(count);\n   count++;\n}\n```", "```java\ndo\n   *`statement`*\nwhile (*`expression`*);\n\n```", "```java\nint count = 0;\ndo {\n   System.out.println(count);\n   count++;\n} while(count < 10);\n```", "```java\nfor(*`initialize`*; *`test`*; *`update`*) {\n    *`statement`*\n}\n\n```", "```java\n*`initialize`*;\nwhile (*`test`*) {\n   *`statement`*;\n   *`update`*;\n}\n\n```", "```java\nint count;\nfor(count = 0 ; count < 10 ; count++)\n   System.out.println(count);\n```", "```java\nfor(int count = 0 ; count < 10 ; count++)\n   System.out.println(count);\n```", "```java\nfor(int i = 0, j = 10 ; i < 10 ; i++, j--)\n     sum += i * j;\n```", "```java\nfor(Node n = listHead; n != null; n = n.nextNode())\n   process(n);\n```", "```java\nfor( *`declaration`* : *`expression`* )\n     *`statement`*\n\n```", "```java\n// These are the numbers we want to print\nint[] primes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };\n// This is the loop that prints them\nfor(int n : primes)\n     System.out.println(n);\n```", "```java\nfor(int i = 0; i < words.length; i++) {\n     if (i > 0) System.out.print(\", \");\n     System.out.print(words[i]);\n}\n```", "```java\nbreak;\n```", "```java\nfor(int i = 0; i < data.length; i++) {\n    if (data[i] == target) {  // When we find what we're looking for,\n        index = i;              // remember where we found it\n        break;                  // and stop looking!\n    }\n}   // The Java interpreter goes here after executing break\n```", "```java\nTESTFORNULL: if (data != null) {\n   for(int row = 0; row < numrows; row++) {\n     for(int col = 0; col < numcols; col++) {\n       if (data[row][col] == null)\n         break TESTFORNULL;           // treat the array as undefined.\n     }\n   }\n}  // Java interpreter goes here after executing break TESTFORNULL\n```", "```java\nfor(int i = 0; i < data.length; i++) {  // Loop through data.\n   if (data[i] == -1)                   // If a data value is missing,\n     continue;                          // skip to the next iteration.\n   process(data[i]);                    // Process the data value.\n}\n```", "```java\ndouble square(double x) {      // A method to compute x squared\n   return x * x;               // Compute and return a value\n}\n```", "```java\n// A method to print square root of x\nvoid printSquareRoot(double x) {\n   if (x < 0) return;                // If x is negative, return\n   System.out.println(Math.sqrt(x)); // Print the square root of x\n}                                    // Method end: return implicitly\n```", "```java\nsynchronized ( *`expression`* ) {\n   *`statements`*\n}\n\n```", "```java\nthrow *`expression`*;\n\n```", "```java\npublic static double factorial(int x) {\n   if (x < 0)\n     throw new IllegalArgumentException(\"x must be >= 0\");\n   double fact;\n   for(fact=1.0; x > 1; fact *= x, x--)\n     /* empty */ ;          // Note use of the empty statement\n   return fact;\n}\n```", "```java\ntry {\n   // Normally this code runs from the top of the block to the bottom\n   // without problems. But it can sometimes throw an exception,\n   // either directly with a throw statement or indirectly by calling\n   // a method that throws an exception.\n}\ncatch (SomeException e1) {\n   // This block contains statements that handle an exception object\n   // of type SomeException or a subclass of that type. Statements in\n   // this block can refer to that exception object by the name e1.\n}\ncatch (AnotherException | YetAnotherException e2) {\n   // This block contains statements that handle an exception of\n   // type AnotherException or YetAnotherException, or a subclass of\n   // either of those types. Statements in this block refer to the\n   // exception object they receive by the name e2.\n}\nfinally {\n   // This block contains statements that are always executed\n   // after we leave the try clause, regardless of whether we leave it:\n   //   1) normally, after reaching the bottom of the block;\n   //   2) because of a break, continue, or return statement;\n   //   3) with an exception that is handled by a catch clause above;\n   //   4) with an uncaught exception that has not been handled.\n   // If the try clause calls System.exit(), however, the interpreter\n   // exits before the finally clause can be run.\n}\n```", "```java\ntry (InputStream is = new FileInputStream(\"/Users/ben/details.txt\")) {\n  // ... process the file\n}\n```", "```java\nassert *`assertion`*;\n\n```", "```java\nassert *`assertion`* : *`errorcode`*;\n\n```", "```java\njava -ea:com.example.sorters.MergeSort com.example.sorters.Test\n```", "```java\njava -ea:com.example.sorters... com.example.sorters.Test\n```", "```java\njava -ea:com.example.sorters... -da:com.example.sorters.QuickSort\njava -ea:com.example.sorters... -da:com.example.sorters.plugins..\n```", "```java\n*`modifiers` `type` `name`* (*`paramlist`*) [ throws exceptions ]\n\n```", "```java\n// This method is passed an array of strings and has no return value.\n// All Java programs have an entry point with this name and signature.\npublic static void main(String[] args) {\n     if (args.length > 0) System.out.println(\"Hello \" + args[0]);\n     else System.out.println(\"Hello world\");\n}\n\n// This method is passed two double arguments and returns a double.\nstatic double distanceFromOrigin(double x, double y) {\n     return Math.sqrt(x*x + y*y);\n}\n\n// This method is abstract which means it has no body.\n// Note that it may throw exceptions when invoked.\nprotected abstract String readText(File f, String encoding)\n    throws FileNotFoundException, UnsupportedEncodingException;\n```", "```java\npublic static estimateHomepageSize(String host) throws IOException {\n    URL url = new URL(\"htp://\"+ host +\"/\");\n    try (InputStream in = url.openStream()) {\n        return in.available();\n    }\n}\n```", "```java\npublic static int max(int first, int... rest) {\n    /* body omitted for now */\n}\n```", "```java\npublic static int max(int first, int[] rest) {\n    /* body omitted for now */\n}\n```", "```java\npublic static int max(int first, int... rest) {\n    int max = first;\n    for(int i : rest) { // legal because rest is actually an array\n        if (i > max) max = i;\n    }\n    return max;\n}\n```", "```java\nmax(0)\nmax(1, 2)\nmax(16, 8, 4, 2, 1)\n```", "```java\nmax(1, new int[] { 2, 3 })\n```", "```java\n/** Represents a customer bank account */\npublic class Account {\n     public String name;\n     public double balance;\n     public int accountId;\n\n     // A constructor that initializes the fields\n     public Account(String name, double openingBalance, int id) {\n         this.name = name;\n         this.balance = openingBalance;\n         this.accountId = id;\n     }\n}\n```", "```java\nAccount a;\n```", "```java\n// Declare variable a and store a reference to new Account object\nAccount a = new Account(\"Jason Clark\", 0.0, 42);\n\n// Create some other objects as well\n// An object that represents the current time\nLocalDateTime d = new LocalDateTime();\n\n// A HashSet object to hold a set of strings\nSet<String> words = new HashSet<>();\n```", "```java\nAccount a = new Account(\"Jason\", 0.0, 42);  // Create an object\n\ndouble b  = a.balance;                 // Read a field of the object\na.balance = a.balance + 10.0;          // Set the value of a field\n\nString s  = a.toString();              // Access a method of the object\n```", "```java\nString name = \"David\";\nSystem.out.println(\"Hello, \" + name);\n```", "```java\nString story = \"\\t\\\"How can you stand it?\\\" he asked sarcastically.\\n\";\n```", "```java\nString html = \"\"\"\n <html>\n <body class=\"main-body\">\n ...\n </body>\n </html>\"\"\";\nSystem.out.println(html);\n```", "```java\nString html = \"\"\"\n <html>\n <body class=\"main-body\">\n ...\n </body>\n </html>\n\"\"\";  // As smallest indent (0), this leaves the text block as written\n\nSystem.out.println(html);\n```", "```java\n// This is illegal\n// Traditional string literals cannot break across lines.\nString x = \"This is a test of the\n emergency broadcast system\";\n\n// Common before text blocks\n// Still useful if avoiding newlines in the text\nString s = \"This is a test of the \" +\n           \"emergency broadcast system\";\n```", "```java\nClass<?> typeInt = int.class;\nClass<?> typeIntArray = int[].class;\nClass<?> typeAccount = Account.class;\n```", "```java\nString s = null;\nAccount a = null;\n```", "```java\n( *`paramlist`* ) -> { *`statements`* }\n\n```", "```java\nRunnable r = () -> System.out.println(\"Hello World\");\n```", "```java\nActionListener listener = (e) -> {\n  System.out.println(\"Event fired at: \"+ e.getWhen());\n  System.out.println(\"Event command: \"+ e.getActionCommand());\n};\n```", "```java\nbyte b;                        // byte is a primitive type\nbyte[] arrayOfBytes;           // byte[] is an array of byte values\nbyte[][] arrayOfArrayOfBytes;  // byte[][] is an array of byte[]\nString[] strings;              // String[] is an array of strings\n```", "```java\nString[] arrayOfStrings;      // Created elsewhere\nint[][] arrayOfArraysOfInt;   // Created elsewhere\n\n// String is assignable to Object,\n// so String[] is assignable to Object[]\nObject[] oa = arrayOfStrings;\n\n// String implements Comparable, so a String[] can\n// be considered a Comparable[]\nComparable[] ca = arrayOfStrings;\n\n// An int[] is an Object, so int[][] is assignable to Object[]\nObject[] oa2 = arrayOfArraysOfInt;\n\n// All arrays are cloneable, serializable Objects\nObject o = arrayOfStrings;\nCloneable c = arrayOfArraysOfInt;\nSerializable s = arrayOfArraysOfInt[0];\n```", "```java\n// This line declares local variables of type int, int[] and int[][]\nint justOne, arrayOfThem[], arrayOfArrays[][];\n\n// These three lines declare fields of the same array type:\npublic String[][] aas1;   // Preferred Java syntax\npublic String aas2[][];   // C syntax\npublic String[] aas3[];   // Confusing hybrid syntax\n\n// This method signature includes two parameters with the same type\npublic static double dotProduct(double[] x, double y[]) { ... }\n```", "```java\n// Create a new array to hold 1024 bytes\nbyte[] buffer = new byte[1024];\n// Create an array of 50 references to strings\nString[] lines = new String[50];\n```", "```java\nString[] greetings = new String[] { \"Hello\", \"Hi\", \"Howdy\" };\nint[] smallPrimes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, };\n```", "```java\n// Call a method, passing an anonymous array literal that\n// contains two strings\nString response = askQuestion(\"Do you want to quit?\",\n                               new String[] {\"Yes\", \"No\"});\n\n// Call another method with an anonymous array (of anonymous objects)\ndouble d = sumAccounts(new Account[] { new Account(\"1st\", 100.0, 1),\n                                       new Account(\"2nd\", 200.0, 2),\n                                       new Account(\"3rd\", 300.0, 3) });\n```", "```java\nString[] greetings = { \"Hello\", \"Hi\", \"Howdy\" };\nint[] powersOfTwo = {1, 2, 4, 8, 16, 32, 64, 128};\n```", "```java\nint[] perfectNumbers = {6, 28};\n```", "```java\nint[] perfectNumbers = new int[2];\nperfectNumbers[0] = 6;\nperfectNumbers[1] = 28;\n```", "```java\nAccount[] accounts = { findAccountById(1), findAccountById(2) };\n```", "```java\n// Create an array of two strings\nString[] responses = new String[2];\nresponses[0] = \"Yes\";  // Set the first element of the array\nresponses[1] = \"No\";   // Set the second element of the array\n\n// Now read these array elements\nSystem.out.println(question + \" (\" + responses[0] + \"/\" +\n                   responses[1] + \" ): \");\n\n// Both the array reference and the array index may be more complex\ndouble datum = data.getMatrix()[data.row() * data.numColumns() +\n                   data.column()];\n```", "```java\nint[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23 };\nint sumOfPrimes = 0;\nfor(int i = 0; i < primes.length; i++)\n    sumOfPrimes += primes[i];\n```", "```java\nfor(int p : primes) sumOfPrimes += p;\n```", "```java\nint[] data = { 1, 2, 3 };\nint[] copy = data.clone();\n```", "```java\nSystem.arraycopy(a, 1, a, 0, n);\n```", "```java\nint[][] products;      // A multiplication table\n```", "```java\nint[][] products = new int[10][10];\n```", "```java\nint[][] products = new int[10][]; // An array to hold 10 int[] values\nfor(int i = 0; i < 10; i++)      // Loop 10 times...\n    products[i] = new int[10];   // ...and create 10 arrays\n```", "```java\nfloat[][][] globalTemperatureData = new float[360][180][100];\n```", "```java\nfloat[][][] globalTemperatureData = new float[360][][];\nfloat[][][] globalTemperatureData = new float[360][180][];\n```", "```java\nfloat[][][] globalTemperatureData = new float[360][][100];  // Error!\nfloat[][][] globalTemperatureData = new float[][180][100];  // Error!\n```", "```java\nint[][] products = { {0, 0, 0, 0, 0},\n                     {0, 1, 2, 3, 4},\n                     {0, 2, 4, 6, 8},\n                     {0, 3, 6, 9, 12},\n                     {0, 4, 8, 12, 16} };\n```", "```java\nboolean response = bilingualQuestion(question, new String[][] {\n                                                   { \"Yes\", \"No\" },\n                                                   { \"Oui\", \"Non\" }});\n```", "```java\nint x = 42;\nint y = x;\n```", "```java\nAccount a = new Account(\"Jason\", 0.0, 42);\nAccount b = a;\n```", "```java\nSystem.out.println(a.balance);  // Print out balance of a: 0.0\nb.balance = 13.0;               // Now change balance of b\nSystem.out.println(a.balance);  // Print a's balance again: 13.0\n```", "```java\n// greet holds an array reference\nchar[] greet = { 'h','e','l','l','o' };\nchar[] cuss = greet;             // cuss holds the same reference\ncuss[4] = '!';                   // Use reference to change an element\nSystem.out.println(greet);       // Prints \"hell!\"\n```", "```java\nvoid changePrimitive(int x) {\n    while(x > 0) {\n        System.out.println(x--);\n    }\n}\n```", "```java\nvoid changeReference(Account b) {\n    while (b.balance > 0) {\n        System.out.println(b.balance--);\n    }\n}\n```", "```java\nAccount a = new Account(\"Jason\", 3.0, 42);  // Account balance: 3.0\nchangeReference(a);             // Prints 3,2,1 and modifies the Account\nSystem.out.println(a.balance);  // The balance of a is now 0!\n```", "```java\nString letter = \"o\";\nString s = \"hello\";              // These two String objects\nString t = \"hell\" + letter;      // contain exactly the same text.\nif (s == t) System.out.println(\"equal\"); // But they are not equal!\n\nbyte[] a = { 1, 2, 3 };\n// A copy with identical content.\nbyte[] b = (byte[]) a.clone();\nif (a == b) System.out.println(\"equal\"); // But they are not equal!\n```", "```java\nString letter = \"o\";\nString s = \"hello\";              // These two String objects\nString t = \"hell\" + letter;      // contain exactly the same text.\nif (s.equals(t)) {               // And the equals() method\n    System.out.println(\"equal\"); // tells us so.\n}\n```", "```java\n// Create a List-of-Integer collection\nList<Integer> numbers = new ArrayList<>();\n// Store a wrapped primitive\nnumbers.add(Integer.valueOf(-1));\n// Extract the primitive value\nint i = numbers.get(0).intValue();\n```", "```java\nInteger i = 0;   // int literal 0 boxed to an Integer object\nNumber n = 0.0f; // float literal boxed to Float and widened to Number\nInteger i = 1;   // this is a boxing conversion\nint j = i;       // i is unboxed here\ni++;             // i is unboxed, incremented, and then boxed up again\nInteger k = i+2; // i is unboxed and the sum is boxed up again\ni = null;\nj = i;           // unboxing here throws a NullPointerException\n```", "```java\nList<Integer> numbers = new ArrayList<>(); // Create a List of Integer\nnumbers.add(-1);                           // Box int to Integer\nint i = numbers.get(0);                    // Unbox Integer to int\n```", "```java\npackage org.apache.commons.net;\n```", "```java\nimport java.io.File;    // Now we can type File instead of java.io.File\n```", "```java\nimport java.io.*;   // Use simple names for all classes in java.io\n```", "```java\nimport java.util.List;\nimport java.awt.List;\n```", "```java\nimport java.util.*;  // For collections and other utilities.\nimport java.awt.*;   // For fonts, colors, and graphics.\n```", "```java\nimport java.util.*;    // For collections and other utilities.\nimport java.awt.*;     // For fonts, colors, and graphics.\nimport java.util.List; // To disambiguate from java.awt.List\n```", "```java\nimport static java.lang.System.out;\n```", "```java\nimport static java.lang.Math.*\n```", "```java\npackage climate.temperate;\nenum Seasons { WINTER, SPRING, SUMMER, AUTUMN };\n```", "```java\nimport static climate.temperate.Seasons.*;\n```", "```java\nimport static java.util.Arrays.sort;\n```", "```java\nimport static java.util.Arrays.sort;\nimport static java.util.Collections.sort;\n```", "```java\npublic static void main(String[] args)\n```", "```java\njava -classpath /opt/Jude com.davidflanagan.jude.Jude datafile.jude\n```", "```java\njava -jar /usr/local/log-analyzer/log-analyzer.jar\n```", "```java\n/usr/local/log-analyzer/log-analyzer.jar\n```", "```java\njava MyClass.java\n```"]