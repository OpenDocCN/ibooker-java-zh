["```java\nmvn io.quarkus:quarkus-maven-plugin:2.1.4.Final:create \\\n  -DprojectGroupId=com.redhat.cloudnative \\\n  -DprojectArtifactId=inventory-quarkus \\\n  -DprojectVersion=1.0.0-SNAPSHOT \\\n  -DclassName=\"com.redhat.cloudnative.InventoryResource\" \\\n  -Dextensions=\"quarkus-resteasy,quarkus-resteasy-jsonb,↳\n quarkus-hibernate-orm-panache,quarkus-jdbc-h2\"\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.redhat.cloudnative</groupId> ![1](Images/1.png)\n    <artifactId>inventory-quarkus</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <properties>\n        <quarkus-plugin.version>2.1.4.Final</quarkus-plugin.version>\n        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n        <quarkus.platform.version>2.1.4.Final</quarkus.platform.version>\n        <compiler-plugin.version>3.8.1</compiler-plugin.version>\n        <surefire-plugin.version>3.0.0-M5</surefire-plugin.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>11</maven.compiler.source>\n        <maven.compiler.target>11</maven.compiler.target>\n        <maven.compiler.parameters>true</maven.compiler.parameters>\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.quarkus</groupId>\n                <artifactId>quarkus-bom</artifactId> ![2](Images/2.png)\n                <version>${quarkus.platform.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies> ![3](Images/3.png)\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-resteasy</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-junit5</artifactId>\n          <scope>test</scope>\n        </dependency>\n        <dependency>\n          <groupId>io.rest-assured</groupId>\n          <artifactId>rest-assured</artifactId>\n          <scope>test</scope>\n        </dependency>\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-resteasy-jsonb</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-hibernate-orm-panache</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-jdbc-h2</artifactId>\n        </dependency>\n    </dependencies> ... <build>\n                <plugins>\n                    <plugin>\n                        <groupId>io.quarkus</groupId>\n                        <artifactId>quarkus-maven-plugin</artifactId>  ![4](Images/4.png)\n                        <version>${quarkus-plugin.version}</version>\n                        <executions>\n                            <execution>\n                                <goals>\n                                    <goal>native-image</goal>\n                                </goals>\n                                <configuration>\n                                    <enableHttpUrlHandler>true↳ </enableHttpUrlHandler>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin> ... </profiles>\n</project>\n```", "```java\npackage com.redhat.cloudnative;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\n\nimport io.quarkus.hibernate.orm.panache.PanacheEntity;\n\nimport javax.persistence.Column;\n\n@Entity ![1](Images/1.png)\n@Table(name = \"INVENTORY\") ![2](Images/2.png)\npublic class Inventory extends PanacheEntity{ ![3](Images/3.png)\n\n    @Column\n    public int quantity; ![3](Images/3.png)\n\n    @Override\n    public String toString() {\n        return \"Inventory [Id='\" + id + '\\'' + \", quantity=\" + quantity + ']';\n    }\n}\n```", "```java\nquarkus.datasource.jdbc.url=jdbc:h2:mem:inventory;↳\nDB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1 ![1](Images/1.png) quarkus.datasource.db-kind=h2\nquarkus.hibernate-orm.database.generation=drop-and-create\nquarkus.hibernate-orm.log.sql=true\nquarkus.hibernate-orm.sql-load-script=import.sql ![2](Images/2.png) %prod.quarkus.package.uber-jar=true ![3](Images/3.png)\n```", "```java\npackage com.redhat.cloudnative;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/api/inventory\")\n@ApplicationScoped\npublic class InventoryResource {\n\n    @GET\n    @Path(\"/{itemId}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Inventory getAvailability(@PathParam(\"itemId\") long itemId) {\n        Inventory inventory = Inventory.findById(itemId); ![1](Images/1.png)\n        return inventory;\n    }\n}\n```", "```java\n./mvnw compile quarkus:dev\n```", "```java\n...\nHibernate:\n\n    drop table if exists INVENTORY CASCADE\nHibernate:\n\n    create table INVENTORY (\n       id bigint not null,\n        quantity integer,\n        primary key (id)\n    )\n\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (100000, 0)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (329299, 35)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (329199, 12)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (165613, 45)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (165614, 87)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (165954, 43)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (444434, 32)\nHibernate:\n    INSERT INTO INVENTORY(id, quantity) VALUES (444435, 53)\n__  ____  __  _____   ___  __ ____  ______\n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n2020-12-02 13:11:16,565 INFO  [io.quarkus] (Quarkus Main Thread)↳\ninventory-quarkus 1.0.0-SNAPSHOT on JVM (powered by Quarkus 1.7.2.Final)↳\nstarted in 1.487s. Listening on: http://0.0.0.0:8080\n2020-12-02 13:11:16,575 INFO  [io.quarkus] (Quarkus Main Thread)↳\nProfile dev activated. Live Coding activated.\n2020-12-02 13:11:16,575 INFO  [io.quarkus] (Quarkus Main Thread)↳\nInstalled features: [agroal, cdi, hibernate-orm, jdbc-h2, mutiny, narayana-jta,↳\nresteasy, resteasy-jsonb, smallrye-context-propagation]\n```", "```java\n{\n   \"id\":\"329299\",\n   \"quantity\":35\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project\n  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"↳\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0↳\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.redhat.cloudnative</groupId> ![1](Images/1.png)\n  <artifactId>catalog</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <name>CoolStore Catalog Service</name>\n  <description>CoolStore Catalog Service with Spring Boot</description>\n  <properties>\n    <spring-boot.version>2.1.6.SP3-redhat-00001</spring-boot.version> ![2](Images/2.png)\n    <spring-boot.maven.plugin.version>2.1.4.RELEASE-redhat-00001↳ </spring-boot.maven.plugin.version>\n    <spring.k8s.bom.version>1.0.3.RELEASE</spring.k8s.bom.version>\n    <fabric8.maven.plugin.version>4.3.0</fabric8.maven.plugin.version>\n  </properties>\n  <repositories>\n    <repository>\n      <id>redhat-ga</id>\n      <url>https://maven.repository.redhat.com/ga/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>redhat-ga-plugins</id>\n      <url>https://maven.repository.redhat.com/ga/</url>\n    </pluginRepository>\n  </pluginRepositories>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>me.snowdrop</groupId>\n        <artifactId>spring-boot-bom</artifactId>\n        <version>${spring-boot.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-kubernetes-dependencies</artifactId>\n        <version>${spring.k8s.bom.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n  <dependencies> ![3](Images/3.png)\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-kubernetes-config</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.h2database</groupId>\n      <artifactId>h2</artifactId>\n    </dependency>\n  </dependencies> ... </project>\n```", "```java\npackage com.redhat.cloudnative.catalog;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication ![1](Images/1.png)\npublic class CatalogApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CatalogApplication.class, args);\n    }\n}\n```", "```java\nspring.application.name=catalog\nserver.port=8080\nspring.datasource.url=jdbc:h2:mem:catalog;DB_CLOSE_ON_EXIT=FALSE ![1](Images/1.png) spring.datasource.username=sa\nspring.datasource.password=\nspring.datasource.driver-class-name=org.h2.Driver ![2](Images/2.png)\n```", "```java\npackage com.redhat.cloudnative.catalog;\n\nimport java.io.Serializable;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity ![1](Images/1.png)\n@Table(name = \"PRODUCT\") ![2](Images/2.png)\npublic class Product implements Serializable {\n\n  private static final long serialVersionUID = 1L;\n\n  @Id ![3](Images/3.png)\n  private String itemId;\n\n  private String name;\n\n  private String description;\n\n  private double price;\n\n  public Product() {\n  }\n\n  public String getItemId() {\n    return itemId;\n  }\n\n  public void setItemId(String itemId) {\n    this.itemId = itemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getDescription() {\n    return description;\n  }\n\n  public void setDescription(String description) {\n    this.description = description;\n  }\n\n  public double getPrice() {\n    return price;\n  }\n\n  public void setPrice(double price) {\n    this.price = price;\n  }\n\n  @Override\n  public String toString() {\n    return \"Product [itemId=\" + itemId + \", name=\" + name\n      + \", price=\" + price + \"]\";\n  }\n}\n```", "```java\npackage com.redhat.cloudnative.catalog;\n\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface ProductRepository extends CrudRepository<Product, String> { ![1](Images/1.png)\n}\n```", "```java\npackage com.redhat.cloudnative.catalog;\n\nimport java.util.List;\nimport java.util.Spliterator;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(value = \"/api/catalog\") ![1](Images/1.png)\npublic class CatalogController {\n\n    @Autowired ![2](Images/2.png)\n    private ProductRepository repository; ![3](Images/3.png)\n\n    @ResponseBody\n    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Product> getAll() {\n        Spliterator<Product> products = repository.findAll().spliterator();\n        return\n          StreamSupport.stream(products, false).collect(Collectors.toList());\n    }\n}\n```", "```java\nmvn spring-boot:run\n```", "```java\n[INFO] --- spring-boot-maven-plugin:2.1.4.RELEASE-redhat-00001:run (default-cli)\n↳ @ catalog ---\n[INFO] Attaching agents: []\n2020-12-02 17:12:18.528  INFO 61053 --- [           main]↳\ntrationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.cloud.auto\nconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.\nspringframework.cloud.autoconfigure.ConfigurationPropertiesRebinder\nAutoConfiguration$$EnhancerBySpringCGLIB$$e898759c] is not eligible for getting\nprocessed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n```", "```java\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.1.6.RELEASE)\nStandardService   : Starting service [Tomcat]\n2020-12-02 17:12:20.064  INFO 61053 --- [           main]↳\norg.apache.catalina.core.StandardEngine  : Starting Servlet Engine:\n  Apache Tomcat/9.0.7.redhat-16\n2020-12-02 17:12:20.220  INFO 61053 --- [           main]↳\no.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded\n  WebApplicationContext\n2020-12-02 17:12:20.220  INFO 61053 --- [           main]↳\n...\n```", "```java\n[\n   {\n      \"itemId\":\"100000\",\n      \"name\":\"Red Fedora\",\n      \"description\":\"Official Red Hat Fedora\",\n      \"price\":34.99\n   },\n   {\n      \"itemId\":\"329299\",\n      \"name\":\"Quarkus T-shirt\",\n      \"description\":\"This updated unisex essential fits like a well-loved\n favorite,↳ featuring a crew neck, short sleeves and designed with superior\n combed and↳ ring- spun cotton.\",\n      \"price\":10.0\n   },\n   {\n      \"itemId\":\"329199\",\n      \"name\":\"Pronounced Kubernetes\",\n      \"description\":\"Kubernetes is changing how enterprises work in the cloud.↳\n But one of the biggest questions people have is: How do you pronounce it?\",\n      \"price\":9.0\n   },\n   {\n      \"itemId\":\"165613\",\n      \"name\":\"Knit socks\",\n      \"description\":\"Your brand will get noticed on these full color knit\n socks.↳ Imported.\",\n      \"price\":4.15\n   },\n   {\n      \"itemId\":\"165614\",\n      \"name\":\"Quarkus H2Go water bottle\",\n      \"description\":\"Sporty 16\\. 9 oz double wall stainless steel thermal bottle↳\n with copper vacuum insulation, and threaded insulated lid. Imprinted.\n Imported.\",\n      \"price\":14.45\n   },\n   {\n      \"itemId\":\"165954\",\n      \"name\":\"Patagonia Refugio pack 28L\",\n      \"description\":\"Made from 630-denier 100% nylon (50% recycled / 50%\n high-tenacity)↳ plain weave; lined with 200-denier 100% recycled polyester.\n ...\",\n      \"price\":6.0\n   },\n   {\n      \"itemId\":\"444434\",\n      \"name\":\"Red Hat Impact T-shirt\",\n      \"description\":\"This 4\\. 3 ounce, 60% combed ringspun cotton/40% polyester↳\n jersey t- shirt features a slightly heathered appearance. The fabric↳\n laundered for reduced shrinkage. Next Level brand apparel. Printed.\",\n      \"price\":9.0\n   },\n   {\n      \"itemId\":\"444435\",\n      \"name\":\"Quarkus twill cap\",\n      \"description\":\"100% cotton chino twill cap with an unstructured,\n low-profile,↳ six-panel design. The crown measures 3 1/8 and this\n features a Permacurv↳ visor and a buckle closure with a grommet.\",\n      \"price\":13.0\n   },\n   {\n      \"itemId\":\"444437\",\n      \"name\":\"Nanobloc Universal Webcam Cover\",\n      \"description\":\"NanoBloc Webcam Cover fits phone, laptop, desktop, PC,↳\n MacBook Pro, iMac, ...\",\n      \"price\":2.75\n   }\n]\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"↳\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"↳\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion> ![1](Images/1.png)\n    <groupId>com.redhat.cloudnative</groupId>\n    <artifactId>gateway</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>CoolStore Gateway Service</name>\n    <description>CoolStore Gateway Service with Eclipse Vert.x</description>\n\n    <properties>\n        <vertx.version>3.6.3.redhat-00009</vertx.version> ![2](Images/2.png)\n        <vertx-maven-plugin.version>1.0.15</vertx-maven-plugin.version>\n        <vertx.verticle>com.redhat.cloudnative.gateway.GatewayVerticle↳ </vertx.verticle> ![3](Images/3.png)\n        <fabric8.maven.plugin.version>4.3.0</fabric8.maven.plugin.version>\n        <slf4j.version>1.7.21</slf4j.version>\n    </properties> ... <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.vertx</groupId>\n                <artifactId>vertx-dependencies</artifactId>\n                <version>${vertx.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies> ![4](Images/4.png)\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-config</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-web-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-rx-java2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-health-check</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-jdk14</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n    </dependencies> ... </project>\n```", "```java\npackage com.redhat.cloudnative.gateway;\n\nimport io.vertx.core.http.HttpMethod;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.web.client.WebClientOptions;\nimport io.vertx.reactivex.config.ConfigRetriever;\nimport io.vertx.reactivex.core.AbstractVerticle;\nimport io.vertx.reactivex.ext.web.Router;\nimport io.vertx.reactivex.ext.web.RoutingContext;\nimport io.vertx.reactivex.ext.web.client.WebClient;\nimport io.vertx.reactivex.ext.web.client.predicate.ResponsePredicate;\nimport io.vertx.reactivex.ext.web.codec.BodyCodec;\nimport io.vertx.reactivex.ext.web.handler.CorsHandler;\nimport io.vertx.reactivex.ext.web.handler.StaticHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.reactivex.Observable;\nimport io.reactivex.Single;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GatewayVerticle extends AbstractVerticle { ![1](Images/1.png)\n    private static final Logger LOG = LoggerFactory.getLogger(\n        GatewayVerticle.class);\n\n    private WebClient catalog;\n    private WebClient inventory;\n\n    @Override\n    public void start() { ![2](Images/2.png)\n        Router router = Router.router(vertx); ![3](Images/3.png)\n        router.route().handler(CorsHandler.create(\"*\")↳\n        .allowedMethod(HttpMethod.GET));\n        router.get(\"/*\").handler(StaticHandler.create(\"assets\"));\n        router.get(\"/health\").handler(this::health);\n        router.get(\"/api/products\").handler(this::products); ![4](Images/4.png)\n\n        ConfigRetriever retriever = ConfigRetriever.create(vertx);\n        retriever.getConfig(ar -> {\n            if (ar.failed()) {\n                // Failed to retrieve the configuration\n            } else {\n                JsonObject config = ar.result();\n\n                String catalogApiHost =↳\n                config.getString(\"COMPONENT_CATALOG_HOST\", \"localhost\");\n                Integer catalogApiPort =↳\n                config.getInteger(\"COMPONENT_CATALOG_PORT\", 9000);\n\n                catalog = WebClient.create(vertx,\n                    new WebClientOptions()\n                        .setDefaultHost(catalogApiHost)\n                        .setDefaultPort(catalogApiPort)); ![5](Images/5.png)\n\n                LOG.info(\"Catalog Service Endpoint: \" + catalogApiHost↳\n                + \":\" + catalogApiPort.toString());\n\n                String inventoryApiHost =↳\n                config.getString(\"COMPONENT_INVENTORY_HOST\", \"localhost\");\n                Integer inventoryApiPort =↳\n                config.getInteger(\"COMPONENT_INVENTORY_PORT\", 8080;\n\n                inventory = WebClient.create(vertx,\n                    new WebClientOptions()\n                        .setDefaultHost(inventoryApiHost)\n                        .setDefaultPort(inventoryApiPort)); ![6](Images/6.png)\n\n                LOG.info(\"Inventory Service Endpoint: \"↳\n                + inventoryApiHost + \":\" + inventoryApiPort.toString());\n\n                vertx.createHttpServer()\n                    .requestHandler(router)\n                    .listen(Integer.getInteger(\"http.port\", 8090)); ![7](Images/7.png)\n\n                LOG.info(\"Server is running on port \"↳\n                + Integer.getInteger(\"http.port\", 8090));\n            }\n        });\n    }\n\n    private void products(RoutingContext rc) {\n ...\n    }\n\n    private Single<JsonObject> getAvailabilityFromInventory(JsonObject product) {\n...\n    }\n\n    private void health(RoutingContext rc) {\n...\n    }\n}\n```", "```java\nmvn compile vertx:run\n```", "```java\n[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------------< com.redhat.cloudnative:gateway >-------------------\n[INFO] Building CoolStore Gateway Service 1.0-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- vertx-maven-plugin:1.0.15:initialize (vmp) @ gateway ---\n[INFO]\n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ gateway ---\n[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources,↳\ni.e. build is platform dependent!\n[INFO] Copying 3 resources\n[INFO]\n[INFO] --- maven-compiler-plugin:3.6.1:compile (default-compile) @ gateway ---\n[INFO] Changes detected - recompiling the module!\n[WARNING] File encoding has not been set, using platform encoding UTF-8,↳\ni.e. build is platform dependent!\n[INFO] Compiling 1 source file to↳\n/home/bluesman/git/cloud-native-java2/↳\nlabs/gateway-vertx/target/classes\n...\n com.redhat.cloudnative.gateway.GatewayVerticle↳\nlambda$start$0\n[INFO] INFO: Catalog Service Endpoint: localhost:9000\n[INFO] dic 02, 2020 6:56:56 PM com.redhat.cloudnative.gateway.GatewayVerticle↳\nlambda$start$0\n[INFO] INFO: Inventory Service Endpoint: localhost:8080\n[INFO] dic 02, 2020 6:56:56 PM com.redhat.cloudnative.gateway.GatewayVerticle↳\nlambda$start$0\n[INFO] INFO: Server is running on port 8090\n[INFO] dic 02, 2020 6:56:56 PM\n```", "```java\n[ {\n  \"itemId\" : \"165613\",\n  \"name\" : \"Knit socks\",\n  \"description\" : \"Your brand will get noticed on these full color knit socks.↳\n Imported.\",\n  \"price\" : 4.15,\n  \"availability\" : {\n    \"quantity\" : 45\n  }\n}, {\n  \"itemId\" : \"165614\",\n  \"name\" : \"Quarkus H2Go water bottle\",\n  \"description\" : \"Sporty 16\\. 9 oz double wall stainless steel thermal bottle↳\n with copper vacuum insulation, and threaded insulated lid. Imprinted.\n Imported.\",\n  \"price\" : 14.45,\n  \"availability\" : {\n    \"quantity\" : 87\n  }\n}, {\n  \"itemId\" : \"329199\",\n  \"name\" : \"Pronounced Kubernetes\",\n  \"description\" : \"Kubernetes is changing how enterprises work in the cloud.↳\n But one of the biggest questions people have is: How do you pronounce it?\",\n  \"price\" : 9.0,\n  \"availability\" : {\n    \"quantity\" : 12\n  }\n}, {\n  \"itemId\" : \"100000\",\n  \"name\" : \"Red Fedora\",\n  \"description\" : \"Official Red Hat Fedora\",\n  \"price\" : 34.99,\n  \"availability\" : {\n    \"quantity\" : 0\n  }\n}, {\n  \"itemId\" : \"329299\",\n  \"name\" : \"Quarkus T-shirt\",\n  \"description\" : \"This updated unisex essential fits like a well-loved favorite,\n ↳ featuring a crew neck, short sleeves and designed with superior combed\n and ring-↳ spun cotton.\",\n  \"price\" : 10.0,\n  \"availability\" : {\n    \"quantity\" : 35\n  }\n}, {\n  \"itemId\" : \"165954\",\n  \"name\" : \"Patagonia Refugio pack 28L\",\n  \"description\" : \"Made from 630-denier 100% nylon (50% recycled/50% ↳\n high-tenacity) plain weave; lined with 200-denier 100% recycled polyester...\",\n  \"price\" : 6.0,\n  \"availability\" : {\n    \"quantity\" : 43\n  }\n}, {\n  \"itemId\" : \"444434\",\n  \"name\" : \"Red Hat Impact T-shirt\",\n  \"description\" : \"This 4\\. 3 ounce, 60% combed ringspun cotton/40% polyester↳\n jersey t- shirt features a slightly heathered appearance. The fabric laundered↳\n for reduced shrinkage. Next Level brand apparel. Printed.\",\n  \"price\" : 9.0,\n  \"availability\" : {\n    \"quantity\" : 32\n  }\n}, {\n  \"itemId\" : \"444437\",\n  \"name\" : \"Nanobloc Universal Webcam Cover\",\n  \"description\" : \"NanoBloc Webcam Cover fits phone, laptop, desktop, PC,↳\n MacBook Pro, iMac, ...\",\n  \"price\" : 2.75\n}, {\n  \"itemId\" : \"444435\",\n  \"name\" : \"Quarkus twill cap\",\n  \"description\" : \"100% cotton chino twill cap with an unstructured,\n low-profile,↳ six-panel design. The crown measures 3 1/8 and this features a\n Permacurv↳ visor and a buckle closure with a grommet.\",\n  \"price\" : 13.0,\n  \"availability\" : {\n    \"quantity\" : 53\n  }\n} ]\n```", "```java\nnpm install\n```", "```java\n...\nadded 1465 packages from 723 contributors and audited 1471 packages in 26.368s\n\n52 packages are looking for funding\n  run `npm fund` for details\n\nfound 228 vulnerabilities (222 low, 6 high)\n  run `npm audit fix` to fix them, or `npm audit` for details\n```", "```java\nCOOLSTORE_GW_ENDPOINT=http://localhost:8090 PORT=3000 npm start\n```"]