["```java\nexecuteScript(\n    String script,\n    Object... args)\n```", "```java\nObject\n```", "```java\npin(String\n    script)\n```", "```java\nScriptKey\n```", "```java\nunpin(ScriptKey\n    key)\n```", "```java\nvoid\n```", "```java\ngetPinnedScripts()\n```", "```java\nSet<ScriptKey>\n```", "```java\nexecuteScript(\n    ScriptKey key,\n    Object... args)\n```", "```java\nObject\n```", "```java\nexecuteAsyncScript(\n    String script,\n    Object... args)\n```", "```java\nObject\n```", "```java\nWebDriver driver = new ChromeDriver();\nJavascriptExecutor js = (JavascriptExecutor) driver;\n```", "```java\n@Test\nvoid testScrollBy() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/long-page.html\"); ![1](assets/1.png)\n    JavascriptExecutor js = (JavascriptExecutor) driver; ![2](assets/2.png)\n\n    String script = \"window.scrollBy(0, 1000);\";\n    js.executeScript(script); ![3](assets/3.png)\n}\n```", "```java\n@Test\nvoid testScrollIntoView() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/long-page.html\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n    driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10)); ![1](assets/1.png)\n\n    WebElement lastElememt = driver\n            .findElement(By.cssSelector(\"p:last-child\")); ![2](assets/2.png)\n    String script = \"arguments[0].scrollIntoView();\"; ![3](assets/3.png)\n    js.executeScript(script, lastElememt); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testInfiniteScroll() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/infinite-scroll.html\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); ![1](assets/1.png)\n\n    By pLocator = By.tagName(\"p\");\n    List<WebElement> paragraphs = wait.until(\n            ExpectedConditions.numberOfElementsToBeMoreThan(pLocator, 0));\n    int initParagraphsNumber = paragraphs.size(); ![2](assets/2.png)\n\n    WebElement lastParagraph = driver.findElement(\n            By.xpath(String.format(\"//p[%d]\", initParagraphsNumber))); ![3](assets/3.png)\n    String script = \"arguments[0].scrollIntoView();\";\n    js.executeScript(script, lastParagraph); ![4](assets/4.png)\n\n    wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(pLocator,\n            initParagraphsNumber)); ![5](assets/5.png)\n}\n```", "```java\n<input type=\"color\" class=\"form-control form-control-color\" name=\"my-colors\"\n        value=\"#563d7c\">\n```", "```java\n@Test\nvoid testColorPicker() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n    WebElement colorPicker = driver.findElement(By.name(\"my-colors\")); ![1](assets/1.png)\n    String initColor = colorPicker.getAttribute(\"value\"); ![2](assets/2.png)\n    log.debug(\"The initial color is {}\", initColor);\n\n    Color red = new Color(255, 0, 0, 1); ![3](assets/3.png)\n    String script = String.format(\n            \"arguments[0].setAttribute('value', '%s');\", red.asHex());\n    js.executeScript(script, colorPicker); ![4](assets/4.png)\n\n    String finalColor = colorPicker.getAttribute(\"value\"); ![5](assets/5.png)\n    log.debug(\"The final color is {}\", finalColor);\n    assertThat(finalColor).isNotEqualTo(initColor); ![6](assets/6.png)\n    assertThat(Color.fromString(finalColor)).isEqualTo(red);\n}\n```", "```java\n@Test\nvoid testPinnedScripts() {\n    String initPage = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    driver.get(initPage);\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n    ScriptKey linkKey = js\n            .pin(\"return document.getElementsByTagName('a')[2];\"); ![1](assets/1.png)\n    ScriptKey firstArgKey = js.pin(\"return arguments[0];\"); ![2](assets/2.png)\n\n    Set<ScriptKey> pinnedScripts = js.getPinnedScripts(); ![3](assets/3.png)\n    assertThat(pinnedScripts).hasSize(2); ![4](assets/4.png)\n\n    WebElement formLink = (WebElement) js.executeScript(linkKey); ![5](assets/5.png)\n    formLink.click(); ![6](assets/6.png)\n    assertThat(driver.getCurrentUrl()).isNotEqualTo(initPage); ![7](assets/7.png)\n\n    String message = \"Hello world!\";\n    String executeScript = (String) js.executeScript(firstArgKey, message); ![8](assets/8.png)\n    assertThat(executeScript).isEqualTo(message); ![9](assets/9.png)\n\n    js.unpin(linkKey); ![10](assets/10.png)\n    assertThat(js.getPinnedScripts()).hasSize(1); ![11](assets/11.png)\n}\n```", "```java\n@Test\nvoid testAsyncScript() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n    Duration pause = Duration.ofSeconds(2); ![1](assets/1.png)\n    String script = \"const callback = arguments[arguments.length - 1];\"\n            + \"window.setTimeout(callback, \" + pause.toMillis() + \");\"; ![2](assets/2.png)\n\n    long initMillis = System.currentTimeMillis(); ![3](assets/3.png)\n    js.executeAsyncScript(script); ![4](assets/4.png)\n    Duration elapsed = Duration\n            .ofMillis(System.currentTimeMillis() - initMillis); ![5](assets/5.png)\n    log.debug(\"The script took {} ms to be executed\", elapsed.toMillis());\n    assertThat(elapsed).isGreaterThanOrEqualTo(pause); ![6](assets/6.png)\n}\n```", "```java\n@Test\nvoid testPageLoadTimeout() {\n    driver.manage().timeouts().pageLoadTimeout(Duration.ofMillis(1)); ![1](assets/1.png)\n\n    assertThatThrownBy(() -> driver\n            .get(\"https://bonigarcia.dev/selenium-webdriver-java/\"))\n                    .isInstanceOf(TimeoutException.class); ![2](assets/2.png)\n}\n```", "```java\n@Test\nvoid testScriptTimeout() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n    driver.manage().timeouts().scriptTimeout(Duration.ofSeconds(3)); ![1](assets/1.png)\n\n    assertThatThrownBy(() -> {\n        long waitMillis = Duration.ofSeconds(5).toMillis();\n        String script = \"const callback = arguments[arguments.length - 1];\"\n                + \"window.setTimeout(callback, \" + waitMillis + \");\"; ![2](assets/2.png)\n        js.executeAsyncScript(script);\n    }).isInstanceOf(ScriptTimeoutException.class); ![3](assets/3.png)\n}\n```", "```java\nWebDriver driver = new ChromeDriver();\nTakesScreenshot ts = (TakesScreenshot) driver;\n```", "```java\nOutputType.FILE\n```", "```java\nFile\n```", "```java\nFile screenshot =\n    ts.getScreenshotAs(\n    OutputType.FILE);\n```", "```java\nOutputType.BASE64\n```", "```java\nString\n```", "```java\nString screenshot =\n    ts.getScreenshotAs(\n    OutputType.BASE64);\n```", "```java\nOutputType.BYTES\n```", "```java\nbyte[]\n```", "```java\nbyte[] screenshot =\n    ts.getScreenshotAs(\n    OutputType.BYTES);\n```", "```java\n@Test\nvoid testScreenshotPng() throws IOException {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    TakesScreenshot ts = (TakesScreenshot) driver;\n\n    File screenshot = ts.getScreenshotAs(OutputType.FILE); ![1](assets/1.png)\n    log.debug(\"Screenshot created on {}\", screenshot);\n\n    Path destination = Paths.get(\"screenshot.png\"); ![2](assets/2.png)\n    Files.move(screenshot.toPath(), destination, REPLACE_EXISTING); ![3](assets/3.png)\n    log.debug(\"Screenshot moved to {}\", destination);\n\n    assertThat(destination).exists(); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testScreenshotBase64() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    TakesScreenshot ts = (TakesScreenshot) driver;\n\n    String screenshot = ts.getScreenshotAs(OutputType.BASE64); ![1](assets/1.png)\n    log.debug(\"Screenshot in base64 \"\n          + \"(you can copy and paste it into a browser navigation bar to watch it)\\n\"\n          + \"data:image/png;base64,{}\", screenshot); ![2](assets/2.png)\n    assertThat(screenshot).isNotEmpty(); ![3](assets/3.png)\n}\n```", "```java\n@Test\nvoid testWebElementScreenshot() throws IOException {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n\n    WebElement form = driver.findElement(By.tagName(\"form\"));\n    File screenshot = form.getScreenshotAs(OutputType.FILE);\n    Path destination = Paths.get(\"webelement-screenshot.png\");\n    Files.move(screenshot.toPath(), destination, REPLACE_EXISTING);\n\n    assertThat(destination).exists();\n}\n```", "```java\nWindow window = driver.manage().window();\n```", "```java\ngetSize()\n```", "```java\nDimension\n```", "```java\nsetSize(Dimension\n    targetSize)\n```", "```java\nvoid\n```", "```java\ngetPosition()\n```", "```java\nPoint\n```", "```java\nsetPosition(Point\n    targetPosition)\n```", "```java\nvoid\n```", "```java\nmaximize()\n```", "```java\nvoid\n```", "```java\nminimize()\n```", "```java\nvoid\n```", "```java\nfullscreen()\n```", "```java\nvoid\n```", "```java\n@Test\nvoid testWindow() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    Window window = driver.manage().window();\n\n    Point initialPosition = window.getPosition(); ![1](assets/1.png)\n    Dimension initialSize = window.getSize(); ![2](assets/2.png)\n    log.debug(\"Initial window: position {} -- size {}\", initialPosition,\n            initialSize);\n\n    window.maximize(); ![3](assets/3.png)\n\n    Point maximizedPosition = window.getPosition();\n    Dimension maximizedSize = window.getSize();\n    log.debug(\"Maximized window: position {} -- size {}\", maximizedPosition,\n            maximizedSize);\n\n    assertThat(initialPosition).isNotEqualTo(maximizedPosition); ![4](assets/4.png)\n    assertThat(initialSize).isNotEqualTo(maximizedSize);\n}\n```", "```java\nNavigation navigation = driver.navigate();\n```", "```java\nback()\n```", "```java\nvoid\n```", "```java\nforward()\n```", "```java\nvoid\n```", "```java\nto(String url)\nto(URL url)\n```", "```java\nvoid\n```", "```java\nrefresh()\n```", "```java\nvoid\n```", "```java\n@Test\nvoid testHistory() {\n    String baseUrl = \"https://bonigarcia.dev/selenium-webdriver-java/\";\n    String firstPage = baseUrl + \"navigation1.html\";\n    String secondPage = baseUrl + \"navigation2.html\";\n    String thirdPage = baseUrl + \"navigation3.html\";\n\n    driver.get(firstPage);\n\n    driver.navigate().to(secondPage);\n    driver.navigate().to(thirdPage);\n    driver.navigate().back();\n    driver.navigate().forward();\n    driver.navigate().refresh();\n\n    assertThat(driver.getCurrentUrl()).isEqualTo(thirdPage);\n}\n```", "```java\n@Test\nvoid testShadowDom() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/shadow-dom.html\"); ![1](assets/1.png)\n\n    WebElement content = driver.findElement(By.id(\"content\")); ![2](assets/2.png)\n    SearchContext shadowRoot = content.getShadowRoot(); ![3](assets/3.png)\n    WebElement textElement = shadowRoot.findElement(By.cssSelector(\"p\")); ![4](assets/4.png)\n    assertThat(textElement.getText()).contains(\"Hello Shadow DOM\"); ![5](assets/5.png)\n}\n```", "```java\naddCookie(Cookie cookie)\n```", "```java\nvoid\n```", "```java\ndeleteCookieNamed(String name)\n```", "```java\nvoid\n```", "```java\ndeleteCookie(Cookie cookie)\n```", "```java\nvoid\n```", "```java\ndeleteAllCookies()\n```", "```java\nvoid\n```", "```java\ngetCookies()\n```", "```java\nSet<Cookie>\n```", "```java\ngetCookieNamed(String name)\n```", "```java\nCookie\n```", "```java\ngetName()\n```", "```java\nString\n```", "```java\ngetValue()\n```", "```java\nString\n```", "```java\ngetDomain()\n```", "```java\nString\n```", "```java\ngetPath()\n```", "```java\nString\n```", "```java\nisSecure()\n```", "```java\nboolean\n```", "```java\nisHttpOnly()\n```", "```java\nboolean\n```", "```java\ngetExpiry()\n```", "```java\nDate\n```", "```java\ngetSameSite()\n```", "```java\nString\n```", "```java\nvalidate()\n```", "```java\nvoid\n```", "```java\ntoJson()\n```", "```java\nMap<String, Object>\n```", "```java\n@Test\nvoid testReadCookies() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/cookies.html\");\n\n    Options options = driver.manage(); ![1](assets/1.png)\n    Set<Cookie> cookies = options.getCookies(); ![2](assets/2.png)\n    assertThat(cookies).hasSize(2);\n\n    Cookie username = options.getCookieNamed(\"username\"); ![3](assets/3.png)\n    assertThat(username.getValue()).isEqualTo(\"John Doe\"); ![4](assets/4.png)\n    assertThat(username.getPath()).isEqualTo(\"/\");\n\n    driver.findElement(By.id(\"refresh-cookies\")).click(); ![5](assets/5.png)\n}\n```", "```java\n@Test\nvoid testAddCookies() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/cookies.html\");\n\n    Options options = driver.manage();\n    Cookie newCookie = new Cookie(\"new-cookie-key\", \"new-cookie-value\"); ![1](assets/1.png)\n    options.addCookie(newCookie); ![2](assets/2.png)\n    String readValue = options.getCookieNamed(newCookie.getName())\n            .getValue(); ![3](assets/3.png)\n    assertThat(newCookie.getValue()).isEqualTo(readValue); ![4](assets/4.png)\n\n    driver.findElement(By.id(\"refresh-cookies\")).click();\n}\n```", "```java\n@Test\nvoid testEditCookie() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/cookies.html\");\n\n    Options options = driver.manage();\n    Cookie username = options.getCookieNamed(\"username\"); ![1](assets/1.png)\n    Cookie editedCookie = new Cookie(username.getName(), \"new-value\"); ![2](assets/2.png)\n    options.addCookie(editedCookie); ![3](assets/3.png)\n\n    Cookie readCookie = options.getCookieNamed(username.getName()); ![4](assets/4.png)\n    assertThat(editedCookie).isEqualTo(readCookie); ![5](assets/5.png)\n\n    driver.findElement(By.id(\"refresh-cookies\")).click();\n}\n```", "```java\n@Test\nvoid testDeleteCookies() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/cookies.html\");\n\n    Options options = driver.manage();\n    Set<Cookie> cookies = options.getCookies(); ![1](assets/1.png)\n    Cookie username = options.getCookieNamed(\"username\"); ![2](assets/2.png)\n    options.deleteCookie(username); ![3](assets/3.png)\n\n    assertThat(options.getCookies()).hasSize(cookies.size() - 1); ![4](assets/4.png)\n\n    driver.findElement(By.id(\"refresh-cookies\")).click();\n}\n```", "```java\n<select class=\"form-select\" name=\"my-select\">\n  <option selected>Open this select menu</option>\n  <option value=\"1\">One</option>\n  <option value=\"2\">Two</option>\n  <option value=\"3\">Three</option>\n</select>\n```", "```java\nSelect(WebElement element)\n```", "```java\nSelect\n```", "```java\ngetWrappedElement()\n```", "```java\nWebElement\n```", "```java\nisMultiple()\n```", "```java\nboolean\n```", "```java\ngetOptions()\n```", "```java\nList<WebElement>\n```", "```java\ngetAllSelectedOptions()\n```", "```java\nList<WebElement>\n```", "```java\ngetFirstSelectedOption()\n```", "```java\nWebElement\n```", "```java\nselectByVisibleText(String text)\n```", "```java\nvoid\n```", "```java\nselectByIndex(int index)\n```", "```java\nvoid\n```", "```java\nselectByValue(String value)\n```", "```java\nvoid\n```", "```java\ndeselectAll()\n```", "```java\nvoid\n```", "```java\ndeselectByValue(String value)\n```", "```java\nvoid\n```", "```java\ndeselectByIndex(int index)\n```", "```java\nvoid\n```", "```java\ndeselectByVisibleText(String text)\n```", "```java\nvoid\n```", "```java\n@Test\nvoid test() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n\n    Select select = new Select(driver.findElement(By.name(\"my-select\"))); ![1](assets/1.png)\n    String optionLabel = \"Three\";\n    select.selectByVisibleText(optionLabel); ![2](assets/2.png)\n\n    assertThat(select.getFirstSelectedOption().getText())\n            .isEqualTo(optionLabel); ![3](assets/3.png)\n}\n```", "```java\n<input class=\"form-control\" list=\"my-options\" name=\"my-datalist\"\n        placeholder=\"Type to search...\">\n<datalist id=\"my-options\">\n  <option value=\"San Francisco\">\n  <option value=\"New York\">\n  <option value=\"Seattle\">\n  <option value=\"Los Angeles\">\n  <option value=\"Chicago\">\n</datalist>\n```", "```java\n@Test\nvoid testDatalist() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n\n    WebElement datalist = driver.findElement(By.name(\"my-datalist\")); ![1](assets/1.png)\n    datalist.click(); ![2](assets/2.png)\n\n    WebElement option = driver\n            .findElement(By.xpath(\"//datalist/option[2]\")); ![3](assets/3.png)\n    String optionValue = option.getAttribute(\"value\"); ![4](assets/4.png)\n    datalist.sendKeys(optionValue); ![5](assets/5.png)\n\n    assertThat(optionValue).isEqualTo(\"New York\"); ![6](assets/6.png)\n}\n```", "```java\nframe(int index)\n```", "```java\nWebDriver\n```", "```java\nframe(String\n    nameOrId)\n```", "```java\nWebDriver\n```", "```java\nframe(WebElement\n    frameElement)\n```", "```java\nWebDriver\n```", "```java\nparentFrame()\n```", "```java\nWebDriver\n```", "```java\nwindow(String\n    nameOrHandle)\n```", "```java\nWebDriver\n```", "```java\nnewWindow(WindowType\n    typeHint)\n```", "```java\nWebDriver\n```", "```java\ndefaultContent()\n```", "```java\nWebDriver\n```", "```java\nactiveElement()\n```", "```java\nWebElement\n```", "```java\nalert()\n```", "```java\nAlert\n```", "```java\n@Test\nvoid testNewTab() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\"); ![1](assets/1.png)\n    String initHandle = driver.getWindowHandle(); ![2](assets/2.png)\n\n    driver.switchTo().newWindow(WindowType.TAB); ![3](assets/3.png)\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\"); ![4](assets/4.png)\n    assertThat(driver.getWindowHandles().size()).isEqualTo(2); ![5](assets/5.png)\n\n    driver.switchTo().window(initHandle); ![6](assets/6.png)\n    driver.close(); ![7](assets/7.png)\n    assertThat(driver.getWindowHandles().size()).isEqualTo(1); ![8](assets/8.png)\n}\n```", "```java\n@Test\nvoid testNewWindow() {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    String initHandle = driver.getWindowHandle();\n\n    driver.switchTo().newWindow(WindowType.WINDOW); ![1](assets/1.png)\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n    assertThat(driver.getWindowHandles().size()).isEqualTo(2);\n\n    driver.switchTo().window(initHandle);\n    driver.close();\n    assertThat(driver.getWindowHandles().size()).isEqualTo(1);\n}\n```", "```java\n@Test\nvoid testIFrames() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/iframes.html\"); ![1](assets/1.png)\n\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    wait.until(ExpectedConditions\n            .frameToBeAvailableAndSwitchToIt(\"my-iframe\")); ![2](assets/2.png)\n\n    By pName = By.tagName(\"p\");\n    wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(pName, 0)); ![3](assets/3.png)\n    List<WebElement> paragraphs = driver.findElements(pName);\n    assertThat(paragraphs).hasSize(20); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testFrames() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/frames.html\"); ![1](assets/1.png)\n\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    String frameName = \"frame-body\";\n    wait.until(ExpectedConditions\n            .presenceOfElementLocated(By.name(frameName))); ![2](assets/2.png)\n    driver.switchTo().frame(frameName); ![3](assets/3.png)\n\n    By pName = By.tagName(\"p\");\n    wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(pName, 0));\n    List<WebElement> paragraphs = driver.findElements(pName);\n    assertThat(paragraphs).hasSize(20);\n}\n```", "```java\nalert(\"Hello world!\");\n```", "```java\nlet correct = confirm(\"Is this correct?\");\n```", "```java\nlet username = prompt(\"Please enter your name\");\n```", "```java\naccept()\n```", "```java\nvoid\n```", "```java\ngetText()\n```", "```java\nString\n```", "```java\ndismiss()\n```", "```java\nvoid\n```", "```java\nsendKeys(String text)\n```", "```java\nvoid\n```", "```java\n@Test\nvoid testAlert() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/dialog-boxes.html\"); ![1](assets/1.png)\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n\n    driver.findElement(By.id(\"my-alert\")).click(); ![2](assets/2.png)\n    wait.until(ExpectedConditions.alertIsPresent()); ![3](assets/3.png)\n    Alert alert = driver.switchTo().alert(); ![4](assets/4.png)\n    assertThat(alert.getText()).isEqualTo(\"Hello world!\"); ![5](assets/5.png)\n    alert.accept(); ![6](assets/6.png)\n}\n```", "```java\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\n```", "```java\n@Test\nvoid testConfirm() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/dialog-boxes.html\");\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n\n    driver.findElement(By.id(\"my-confirm\")).click();\n    wait.until(ExpectedConditions.alertIsPresent());\n    Alert confirm = driver.switchTo().alert();\n    assertThat(confirm.getText()).isEqualTo(\"Is this correct?\");\n    confirm.dismiss();\n}\n```", "```java\n@Test\nvoid testPrompt() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/dialog-boxes.html\");\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n\n    driver.findElement(By.id(\"my-prompt\")).click();\n    wait.until(ExpectedConditions.alertIsPresent());\n    Alert prompt = driver.switchTo().alert();\n    prompt.sendKeys(\"John Doe\");\n    assertThat(prompt.getText()).isEqualTo(\"Please enter your name\");\n    prompt.accept();\n}\n```", "```java\n@Test\nvoid testModal() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/dialog-boxes.html\");\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n\n    driver.findElement(By.id(\"my-modal\")).click();\n    WebElement close = driver\n            .findElement(By.xpath(\"//button[text() = 'Close']\"));\n    assertThat(close.getTagName()).isEqualTo(\"button\");\n    wait.until(ExpectedConditions.elementToBeClickable(close));\n    close.click();\n}\n```", "```java\n@Test\nvoid testWebStorage() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/web-storage.html\");\n    WebStorage webStorage = (WebStorage) driver; ![1](assets/1.png)\n\n    LocalStorage localStorage = webStorage.getLocalStorage();\n    log.debug(\"Local storage elements: {}\", localStorage.size()); ![2](assets/2.png)\n\n    SessionStorage sessionStorage = webStorage.getSessionStorage();\n    sessionStorage.keySet()\n            .forEach(key -> log.debug(\"Session storage: {}={}\", key,\n                    sessionStorage.getItem(key))); ![3](assets/3.png)\n    assertThat(sessionStorage.size()).isEqualTo(2);\n\n    sessionStorage.setItem(\"new element\", \"new value\");\n    assertThat(sessionStorage.size()).isEqualTo(3); ![4](assets/4.png)\n\n    driver.findElement(By.id(\"display-session\")).click();\n}\n```", "```java\nWebDriver decoratedDriver = new EventFiringDecorator(myListener)\n        .decorate(originalDriver);\n```", "```java\nDecorated<WebElement> decoratedWebElement = new EventFiringDecorator(\n        listener).createDecorated(myWebElement);\n```", "```java\npublic class MyEventListener implements WebDriverListener {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    @Override\n    public void afterGet(WebDriver driver, String url) { ![1](assets/1.png)\n        WebDriverListener.super.afterGet(driver, url);\n        takeScreenshot(driver);\n    }\n\n    @Override\n    public void beforeQuit(WebDriver driver) { ![2](assets/2.png)\n        takeScreenshot(driver);\n    }\n\n    private void takeScreenshot(WebDriver driver) {\n        TakesScreenshot ts = (TakesScreenshot) driver;\n        File screenshot = ts.getScreenshotAs(OutputType.FILE);\n        SessionId sessionId = ((RemoteWebDriver) driver).getSessionId();\n        Date today = new Date();\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\n                \"yyyy.MM.dd_HH.mm.ss.SSS\");\n        String screenshotFileName = String.format(\"%s-%s.png\",\n                dateFormat.format(today), sessionId.toString());\n        Path destination = Paths.get(screenshotFileName); ![3](assets/3.png)\n\n        try {\n            Files.move(screenshot.toPath(), destination);\n        } catch (IOException e) {\n            log.error(\"Exception moving screenshot from {} to {}\", screenshot,\n                    destination, e);\n        }\n    }\n\n}\n```", "```java\nclass EventListenerJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() {\n        MyEventListener listener = new MyEventListener();\n        WebDriver originalDriver = WebDriverManager.chromedriver().create();\n        driver = new EventFiringDecorator(listener).decorate(originalDriver); ![1](assets/1.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testEventListener() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle())\n                .isEqualTo(\"Hands-On Selenium WebDriver with Java\");\n        driver.findElement(By.linkText(\"Web form\")).click(); ![2](assets/2.png)\n    }\n\n}\n```", "```java\nNoSuchElementException\n```", "```java\nNoAlertPresentException\n```", "```java\nNoSuchWindowException\n```", "```java\nNoSuchFrameException\n```", "```java\nInvalidArgumentException\n```", "```java\nStaleElementReferenceException\n```", "```java\nUnreachableBrowserException\n```", "```java\nTimeoutException\n```", "```java\nScriptTimeoutException\n```", "```java\nElementNotVisibleException\nElementNotSelectableException\nElementClickInterceptedException\n```"]