- en: Chapter 3\. WebDriver Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presents the elementary aspects of the Selenium WebDriver API.
    To that aim, we review first the different ways to create instances of the `WebDriver`
    hierarchy (e.g., `ChromeDriver`, `EdgeDriver`, `FirefoxDriver`, etc.). Also, we
    explore the main methods available in these objects. Among them, locating the
    different elements in a web page is essential. Thus, you will discover the possible
    locators, i.e., strategies to find the elements within a web page (called `WebElement`
    in the Selenium WebDriver API), such as by tag name, link text, HTML attribute
    (identifier, name, or class), CSS selector, or XPath. Another critical aspect
    of the Selenium WebDriver API covered in this chapter is the impersonation of
    user actions (i.e., automated interactions with web pages using the keyboard and
    mouse). The last part of this chapter presents the ability to wait for web elements.
    This feature is critical due to the dynamic and asynchronous nature of web applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Basic WebDriver Usage
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers three fundamental aspects related to `WebDriver` objects.
    First, we review the different ways to create them. Second, we study their basic
    operations. Finally, we analyze the different ways to dispose of these objects
    (typically at the end of a test, for closing the browser).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver Creation
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As introduced in [Chapter 2](ch02.html#ch02), to control browsers with Selenium
    WebDriver in Java, the first step is to create `WebDriver` instances. Thus, we
    need to create a `ChromeDriver` object when using Chrome, `EdgeDriver` for Edge,
    `FirefoxDriver` for Firefox, and so on. The basic way to create instances of these
    types is to use the `new` operator in Java. For example, we create a `ChromeDriver`
    object as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The use of the operator `new` for creating `WebDriver` instances is perfectly
    correct, and you can use it in your tests. Nevertheless, it is worth reviewing
    other possibilities that can provide additional benefits depending on specific
    use cases for creating these objects. These alternatives are the WebDriver and
    the WebDriverManager builders.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver builder
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Selenium WebDriver API provides a built-in method following the *builder
    pattern* to create `WebDriver` instances. This feature is accessible through the
    static method `builder()` of the `RemoteWebDriver` class and provides a fluent
    API for creating `WebDriver` objects. [Table 3-1](#webdriver-builder-methods)
    presents the available methods for this builder. [Example 3-1](#webdriver_builder_skeleton)
    shows a test skeleton using the WebDriver builder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-1\. WebDriver builder methods
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Browser-specific capabilities |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| Alternative browser-specific capabilities (see [Chapter 5](ch05.html#ch05))
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| Add custom metadata, typically used for requesting additional features in
    cloud providers (see [Chapter 6](ch06.html#ch06)) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| Individual browser-specific capabilities (see [Chapter 5](ch05.html#ch05))
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 各个浏览器特定的能力（见[第5章](ch05.html#ch05)） |'
- en: '|'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| Set the address of the remote server (see [Chapter 6](ch06.html#ch06)) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 设置远程服务器的地址（见[第6章](ch06.html#ch06)） |'
- en: '|'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| Specific configuration when using a remote server, such as the connection
    timeout or proxy settings |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 在使用远程服务器时的特定配置，如连接超时或代理设置 |'
- en: '|'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Specific configuration for the local driver (e.g., chromedriver), such as
    its file location, used port, timeout, or arguments |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 本地驱动器的特定配置（例如，chromedriver的文件位置、使用的端口、超时或参数） |'
- en: '|'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| Last method in the builder pattern, devoted to creating a `WebDriver` instance
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 建造者模式中的最后一个方法，用于创建`WebDriver`实例 |'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Tip
- en: '[Chapter 5](ch05.html#ch05) explains the details about *browser-specific capabilities*
    (such as `ChromeOptions`). At this point, we use these classes just to select
    a browser type (e.g., `ChromeOptions` for Chrome, `Edge​Op⁠tions` for Edge, or
    `FirefoxOptions` for Firefox).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html#ch05)解释了关于*浏览器特定能力*（例如`ChromeOptions`）的详细信息。在这一点上，我们仅使用这些类来选择浏览器类型（例如，Chrome的`ChromeOptions`，Edge的`EdgeOptions`，或Firefox的`FirefoxOptions`）。'
- en: Example 3-1\. Test skeleton using the WebDriver builder
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-1\. 使用WebDriver建造者建立的测试框架
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO1-1)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO1-1)'
- en: As usual, before the actual `WebDriver` instantiation, we resolve the required
    driver (chromedriver in this example) using WebDriverManager.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在实际`WebDriver`实例化之前，我们使用WebDriverManager解析所需的驱动程序（例如此示例中的chromedriver）。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO1-2)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO1-2)'
- en: We create the `WebDriver` instance using the WebDriver builder. Since we want
    to use Chrome in this test, we use a `ChromeOptions` object as the capabilities
    argument (using the method `oneOf()`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用WebDriver建造者创建`WebDriver`实例。由于在这个测试中我们想要使用Chrome，因此我们使用一个`ChromeOptions`对象作为capabilities参数（使用`oneOf()`方法）。
- en: From a functional point of view, this example works in the same way as the regular
    *hello world* tests presented in [Chapter 2](ch02.html#ch02). Nevertheless, the
    WebDriver builder API easily allows specifying a different behavior. Consider
    the following snippet as an example. This code changes the setup method and creates
    a `SafariDriver` instance. Suppose the instantiation of this object is not possible
    (typically, when the test is not executed on macOS, and therefore, Safari is not
    available in the system). In that case, we use Chrome as an alternative browser.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能角度来看，这个例子与[第2章](ch02.html#ch02)中呈现的常规*hello world*测试的工作方式相同。然而，WebDriver建造者API可以轻松地允许指定不同的行为。考虑以下代码片段作为示例。此代码更改设置方法并创建一个`SafariDriver`实例。假设在这种情况下（通常情况下，当测试未在macOS上执行时，因此系统中不可用Safari时），我们使用Chrome作为替代浏览器。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: WebDriverManager builder
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WebDriverManager建造者
- en: Another possibility to create `WebDriver` objects is using WebDriverManager.
    In addition to resolving drivers, as of version 5, WebDriverManager provides a
    `WebDriver` builder utility. [Example 3-2](#wdm_builder_skeleton) shows a test
    skeleton using this builder.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个创建`WebDriver`对象的可能性是使用WebDriverManager。除了解决驱动程序外，从版本5开始，WebDriverManager还提供了`WebDriver`建造者实用程序。[示例3-2](#wdm_builder_skeleton)展示了使用这个建造者的测试框架。
- en: Example 3-2\. Test skeleton using the WebDriverManager builder
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-2\. 使用WebDriverManager建立的测试框架
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO2-1)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO2-1)'
- en: WebDriverManager resolves the required driver (chromedriver in this case) and
    creates an instance of the proper `WebDriver` type (`ChromeDriver` in this case)
    in a single line.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriverManager解决所需的驱动程序（在本例中为chromedriver）并在单行代码中创建正确的`WebDriver`类型的实例（在本例中为`ChromeDriver`）。
- en: This approach has different benefits. First, it enables less verbose tests since
    the driver resolution and `WebDriver` instantiation are simultaneous. Second,
    it allows specifying the browser type (i.e., Chrome, Firefox, etc.) simply by
    selecting a specific manager (i.e., `chromedriver()`, `firefoxdriver()`, etc.).
    Moreover, we can easily parameterize the selection of a manager to create cross-browser
    tests (see [Chapter 8](ch08.html#ch08)). Finally, the WebDriverManager allows
    you to specify browser-specific capabilities (see [Chapter 5](ch05.html#ch05))
    and effortlessly use browsers in a Docker container (see [Chapter 6](ch06.html#ch06)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: WebDriverManager keeps a reference to `WebDriver` objects created using this
    approach. In addition, it launches a shutdown hook to watch the correct disposal
    of `WebDriver` instances. If `WebDriver` sessions are live when the JVM is shutting
    down, WebDriverManager quits these browser(s). You can play with this feature
    by removing the `teardown()` method of the example before.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although WebDriverManager quits the `WebDriver` objects automatically, I recommend
    you do it explicitly in each test. Otherwise, in the typical case of executing
    a test suite, all browsers remain open until the end of the test suite execution.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: WebDriver Methods
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `WebDriver` interface provides a group of methods that are the basis of
    the Selenium WebDriver API. [Table 3-2](#webdriver-methods) presents a summary
    of these methods. [Example 3-3](#basic_webdriver_methods) shows a basic test using
    several of these methods.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-2\. WebDriver methods
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| Load a web page in the current browser. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| Get the URL currently loaded in the browser. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| Get the title (`<title>` HTML tag) of the current web page. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| Find the first `WebElement` using a given locator in the current web page.
    In other words, if several elements match the locator, the first one (in the Document
    Object Model [DOM]) is returned (see [“Locating WebElements”](#location) for further
    details). |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '| Find every `WebElement` using a given locator in the current web page (see
    also [“Locating WebElements”](#location)). |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| Get the HTML source code of the current web page. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '| Access the browser history and navigate to a given URL (see [Chapter 4](ch04.html#ch04)).
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| Get the *window handle*, i.e., a unique identifier for the open window in
    the current browser (see [Chapter 4](ch04.html#ch04)). |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '| Get the set of window handles currently open in the current browser (see
    also [Chapter 4](ch04.html#ch04)). |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| Select a frame or window in the current browser (see [Chapter 4](ch04.html#ch04)).
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '| Generic utility for managing different aspects of the browser (e.g., browser
    size and position, cookies, timeouts, or logs). |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '| Close the current window, quitting the browser if there are no more windows
    opened. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '| Close all windows and quit the browser. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From now on, I illustrate the examples showing only the test logic. These tests
    use a `WebDriver` object created before the test (in the setup method) and closed
    after the test (in the teardown method). As a convention, I show the JUnit 5 tests
    in the book (although you can find them also for JUnit 4, Selenium-Jupiter, and
    TestNG in the examples repository).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我仅展示示例逻辑。这些测试使用在测试之前创建的`WebDriver`对象（在设置方法中），并在测试之后关闭（在拆卸方法中）。作为约定，本书中展示的是JUnit
    5测试（尽管您也可以在示例存储库中找到JUnit 4、Selenium-Jupiter和TestNG的示例）。
- en: Example 3-3\. Test using several basic methods of the Selenium WebDriver API
  id: totrans-129
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-3\. 测试使用 Selenium WebDriver API 的几种基本方法
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO3-1)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO3-1)'
- en: We open the practice website.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打开实践网站。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO3-2)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO3-2)'
- en: We verify the page title is as expected.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证页面标题是否符合预期。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO3-3)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO3-3)'
- en: We confirm the current URL is still the same.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认当前的网址仍然相同。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO3-4)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO3-4)'
- en: We check that the source HTML of the page contains a given tag.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查页面的源HTML是否包含特定标记。
- en: Session Identifier
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话标识符
- en: Each time we instantiate a `WebDriver` object, the underlying driver (e.g.,
    chromedriver, geckodriver, etc.) creates a unique identifier called *sessionId*
    to track the browser session. We can use this value in our test to univocally
    identify a browser session. For that, we need to invoke the method `getSessionId()`
    in our driver object. Notice this method is not available in [Table 3-2](#webdriver-methods),
    because it belongs to the `RemoteWebDriver` class. In practice, the types we use
    to control browsers (e.g., `ChromeDriver`, `FirefoxDriver`, etc.) inherit from
    that class. Therefore, we simply need to cast the `WebDriver` object to `RemoteWebDriver`
    to invoke the `getSessionId()` method. [Example 3-4](#sessionid) shows a basic
    test using it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们实例化一个`WebDriver`对象时，底层驱动程序（例如，chromedriver、geckodriver等）会创建一个称为*sessionId*的唯一标识符来跟踪浏览器会话。我们可以在测试中使用这个值来唯一标识浏览器会话。为此，我们需要在驱动程序对象中调用`getSessionId()`方法。注意，这个方法在[表格
    3-2](#webdriver-methods) 中不可用，因为它属于`RemoteWebDriver`类。在实际应用中，我们用于控制浏览器的类型（例如`ChromeDriver`、`FirefoxDriver`等）都继承自该类。因此，我们只需将`WebDriver`对象转换为`RemoteWebDriver`来调用`getSessionId()`方法。[示例
    3-4](#sessionid)展示了使用它的基本测试。
- en: Example 3-4\. Test reading the sessionId
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-4\. 测试读取 sessionId
- en: '[PRE39]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO4-1)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO4-1)'
- en: We cast the driver object to `RemoteWebDriver` and read its sessionId.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将驱动程序对象转换为`RemoteWebDriver`并读取其sessionId。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO4-2)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO4-2)'
- en: We verify the sessionId has some value.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证sessionId具有某些值。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO4-3)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO4-3)'
- en: We log the sessionId on the standard output.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在标准输出上记录sessionId。
- en: WebDriver Disposal
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebDriver 释放
- en: As you can see in [Table 3-2](#webdriver-methods), there are two methods to
    dispose of the `WebDriver` objects, called `close()` and `quit().` As a general
    rule, I use `quit()` in the examples since this method closes the browser and
    every associated window. On the other hand, the method `close()` terminates only
    the current window. Therefore, I only use `close()` in the case of handling different
    windows (or tabs) in the same browser, and I want to finish some of the windows
    (or tabs) and still use the rest.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[表格 3-2](#webdriver-methods) 中所看到的，有两种方法来处理`WebDriver`对象，分别是`close()`和`quit()`。作为一般规则，我在示例中使用`quit()`，因为这个方法会关闭浏览器和所有相关的窗口。另一方面，`close()`方法仅终止当前窗口。因此，我仅在同一浏览器中处理不同窗口（或标签页）时，并且希望关闭一些窗口（或标签页）而仍然使用其他窗口（或标签页）时使用`close()`。
- en: Locating WebElements
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位 WebElements
- en: One of the most relevant aspects of the Selenium WebDriver API is the ability
    to interact with the different elements of a web page. These elements are handled
    by Selenium WebDriver using the interface `WebElement`, an abstraction for HTML
    elements. As introduced in [Table 3-2](#webdriver-methods), there are two methods
    to locate `WebElement` in a given web page. First, the method `findElement()`
    returns the first occurrence (if any) of a given node in the Document Object Model
    (DOM). Second, the method `find​Ele⁠ments()` returns a list of DOM nodes. Both
    methods accept a parameter `By`, which specifies the location strategy.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: The Document Object Model (DOM)
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The DOM is a cross-platform interface that allows representing XML-like documents
    (e.g., web pages, based on HTML) in a tree structure. [Example 3-5](#basic_html)
    shows an small web page; the associated DOM tree structure in memory is represented
    in [Figure 3-1](#dom-example). As you can see, each HTML tag (e.g., `<html>`,
    `<head>`, `<body>`, `<a>`, etc.) produces a node (or element) in the tree. Then,
    each standard HTML attribute (e.g., `charset`, `href`, etc.) produces an equivalent
    DOM *property*. Also, the text content of the HTML tags is available in the resulting
    tree. Languages like JavaScript use DOM methods to access and modify the tree
    structure. Thanks to this, web pages are dynamic and can change their layout and
    content in response to user events.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Example 3-5\. Basic web page
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![hosw 0301](assets/hosw_0301.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. DOM structure generated from [Example 3-5](#basic_html)
  id: totrans-158
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: WebElement Methods
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Table 3-3](#webelement-methods) contains a summary of the available methods
    in the `WebElement` class. You will find examples of each method in the following
    parts of this section.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Table 3-3\. WebElement methods
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Return | Description |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '| Perform a mouse click (i.e., a left-click) in the current element. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '| Send a web form (when the current element is a form). |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '| Simulate typing with the keyboard (e.g., in input text elements). |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '| Reset the value of an input text element. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '| Get the tag name of the element. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '| Get the value of a DOM property. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '| Get the value of the element attribute as declared in its HTML markup. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '| Get the value of the given HTML attribute (e.g., `class`) as a `String`.
    More precisely, this method attempts to get a meaningful value of the DOM property
    with the given name if it exists. For instance, for boolean attributes (e.g.,
    `readonly`), it returns `true` if it exists or `null` if not. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '| Get element role as defined on the [W3C WAI-ARIA](https://www.w3.org/TR/wai-aria)
    specification. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '| Get element accessible name as defined by WAI-ARIA. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '| Determine if a checkbox, option in a select, or radio button is selected.
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '|'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '| Determine if an element is enabled or not (e.g., a form field). |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '|'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '| Determine if an element is visible or not. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '|'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '| Get the visible text of the element, including its sub-elements (if any).
    |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 获取元素的可见文本，包括其子元素（如果有）。 |'
- en: '|'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE69]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '|'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE70]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '| Get the position (*x* and *y* coordinates) from the top-left corner of the
    rendered element. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 获取呈现元素左上角的位置（*x* 和 *y* 坐标）。 |'
- en: '|'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE71]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '|'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE72]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '| Get the width and height of the rendered element. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 获取呈现元素的宽度和高度。 |'
- en: '|'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE73]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '|'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE74]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '| Get the location and size of the rendered element. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 获取呈现元素的位置和大小。 |'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE75]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE76]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '| Get the value of a CSS property of the element. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 获取元素的 CSS 属性值。 |'
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE77]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '|'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE78]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '| Get the shadow root to search in a shadow tree (see [“The Shadow DOM”](ch04.html#shadow-dom)).
    |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 获取影子根以在影子树中进行搜索（参见[“影子 DOM”](ch04.html#shadow-dom)）。 |'
- en: '|'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE79]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '|'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE80]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '| Find all subelements that match the locator within the current element. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 查找当前元素中匹配定位器的所有子元素。 |'
- en: '|'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE81]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '|'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE82]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '| Find the first subelement that matches the locator within the current element.
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 查找当前元素中匹配定位器的第一个子元素。 |'
- en: Location Strategies
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位策略
- en: Selenium WebDriver provides eight basic location strategies, summarized in [Table 3-4](#location-strategies).
    In addition, as explained in the next subsections, there are other advanced location
    strategies, namely, compound and relative locators.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 提供了八种基本的定位策略，总结在[表 3-4](#location-strategies)中。 此外，如下一节所述，还有其他高级定位策略，即复合定位器和相对定位器。
- en: We specify the basic locators using the class `By` in the Selenium WebDriver
    API. The following subsections show examples of all these strategies. We use the
    [practice web form](https://bonigarcia.dev/selenium-webdriver-java/web-form.html)
    to that aim. [Figure 3-2](#practice-site-web-form) shows a screenshot of this
    form.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Selenium WebDriver API 中的类`By`指定基本定位器。 下面的子节展示了所有这些策略的示例。 我们使用[实践网页表单](https://bonigarcia.dev/selenium-webdriver-java/web-form.html)来达到这个目的。
    [图 3-2](#practice-site-web-form) 显示了此表单的截图。
- en: Table 3-4\. Summary of the location strategies in Selenium WebDriver
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-4\. Selenium WebDriver 中定位策略的摘要
- en: '| Locator | Finds elements based on |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 定位器 | 根据定位器查找元素 |'
- en: '| --- | --- |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Tag name | The name of HTML tag (e.g., `a`, `p`, `div`, `img`, etc.). |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 标签名 | HTML 标签的名称（例如 `a`、`p`、`div`、`img` 等）。 |'
- en: '| Link text | The exact text value displayed by a link (i.e., `a` HTML tag).
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| 链接文本 | 链接显示的确切文本值（即 `a` HTML 标签）。 |'
- en: '| Partial link text | The text contained in a link (i.e., `a` HTML tag). |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 部分链接文本 | 链接中包含的文本（即 `a` HTML 标签）。 |'
- en: '| Name | The value of the attribute `name`. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 属性`name`的值。 |'
- en: '| Id | The value of the attribute `id`. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| Id | 属性`id`的值。 |'
- en: '| Class name | The value of the attribute `class`. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 类名 | 属性`class`的值。 |'
- en: '| CSS selector | Patterns that follow the [W3C Selectors](https://www.w3.org/TR/selectors)
    recommendation. The original aim of CSS patterns is to select element(s) in a
    web page to apply CSS styles. Selenium WebDriver allows reusing these CSS selectors
    to find web elements and interact with them. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| CSS 选择器 | 遵循[W3C Selectors](https://www.w3.org/TR/selectors)建议的模式。 CSS 模式的原始目的是选择网页中的元素以应用
    CSS 样式。 Selenium WebDriver 允许重用这些 CSS 选择器来查找并与网页元素交互。 |'
- en: '| XPath | Queries that follow the [XPath](https://www.w3.org/TR/xpath) (XML
    Path Language) language. XPath is a W3C standard query language for selecting
    nodes from an XML-like document (e.g., web pages). |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| XPath | 使用[XPath](https://www.w3.org/TR/xpath)（XML Path Language）语言进行查询。XPath
    是 W3C 标准的查询语言，用于从类似 XML 的文档（如网页）中选择节点。 |'
- en: '![hosw 0302](assets/hosw_0302.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0302](assets/hosw_0302.png)'
- en: Figure 3-2\. Practice web form used in the locator examples
  id: totrans-284
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 3-2\. 在定位器示例中使用的实践网页表单
- en: Locating by HTML tag name
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 HTML 标签名定位
- en: 'One of the most basic strategies for finding web elements is by tag name. [Example 3-6](#by-tagname)
    shows a test using this strategy. This test locates the text area available in
    the practice web form, whose HTML markup is the following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在查找网页元素的最基本策略之一是通过标签名。 [示例 3-6](#by-tagname) 展示了使用此策略的测试。 此测试定位了实践网页表单中可用的文本区域，其
    HTML 标记如下：
- en: '[PRE83]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Example 3-6\. Test using a locator strategy by tag name
  id: totrans-288
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-6\. 使用标签名定位策略的测试
- en: '[PRE84]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO5-1)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO5-1)'
- en: We use the locator `By.tagName("textarea")` to find this element. In this case,
    since this is the only text area declared on the web page, we can be sure that
    the method `findElement()` will locate this element.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用定位器 `By.tagName("textarea")` 来找到此元素。 在这种情况下，由于这是网页上唯一声明的文本区域，我们可以确信 `findElement()`
    方法将找到此元素。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO5-2)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO5-2)'
- en: We ensure the attribute `rows` value is the same as defined in the HTML markup.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Locating by HTML attributes (name, id, class)
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another straightforward location strategy is to find web elements by an HTML
    attribute, i.e., name, id, or class. Consider the following input text available
    in the practice web form. Notice that it includes the standard attributes `class`,
    `name`, `id`, and the nonstandard attribute `myprop` (included to illustrate the
    difference between several `WebDriver` methods). [Example 3-7](#by-html-attr)
    shows a test using this strategy.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Example 3-7\. Test using locators by HTML attributes (name, id, and class)
  id: totrans-297
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO6-1)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: We locate the text input by name.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO6-2)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: We assert that the element is enabled (i.e., the user can type in it).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO6-3)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: We find the same text input element by id.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO6-4)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: This assertion (and the next two) returns the same value since the attribute
    `type` is standard, and as previously explained, it becomes a *property* in the
    DOM.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO6-5)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: This assertion (and the next two) return different values since the attribute
    `myprop` is not standard, and for this reason, it is not available as a DOM property.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO6-6)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: We locate a list of elements by class.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_webdriver_fundamentals_CO6-7)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: We verify the list has more than one element.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_webdriver_fundamentals_CO6-8)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: We check that the first element found by class is the same as the input text
    located before.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Locating by link text
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last basic locator is by link text. This strategy is twofold: locate by
    exact and by partial text occurrence. We use a link in the practice web form to
    illustrate this locator in the following HTML markup. Then, [Example 3-8](#by-link)
    shows a test using these locators.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Example 3-8\. Test using locators by text link
  id: totrans-318
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO7-1)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: We locate an element by its full link text.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO7-2)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: We check its tag name is `a`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO7-3)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: We check its CSS property `cursor` is `pointer` (i.e., the style typically used
    for clickable elements).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO7-4)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: We find an element by partial link text. This link will be the same as in step
    1.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO7-5)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: We verify both elements share the same position and size.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Locating by CSS selectors
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The strategies we have seen so far are easy to apply but also have some limitations.
    First, locating by tag name can be tricky since it is likely that the same tag
    will occur many times on a web page. Next, finding elements by HTML attributes
    (name, id, or class) is a limited approach since these attributes are not always
    available. In addition, ids can be autogenerated and volatile between different
    sessions. Lastly, the location by link text is limited only to links. To overcome
    these limitations, Selenium WebDriver provides two powerful location strategies:
    CSS selector and XPath.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的策略易于应用，但也有一些局限性。首先，通过标签名定位可能有些棘手，因为同一标签在网页上可能出现多次。接下来，通过 HTML 属性（如
    name、id 或 class）查找元素是一种有限的方法，因为这些属性并非始终可用。此外，id 可能会在不同会话之间自动生成并且不稳定。最后，通过链接文本定位仅限于链接。为了克服这些限制，Selenium
    WebDriver 提供了两种强大的定位策略：CSS 选择器和 XPath。
- en: There are many possibilities for creating CSS selectors. [Table 3-5](#basic-css-selectors)
    shows a comprehensive summary with the basic CSS selectors.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 CSS 选择器有很多可能性。[表 3-5](#basic-css-selectors) 显示了基本 CSS 选择器的综合总结。
- en: Table 3-5\. Basic CSS selectors
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-5\. 基本 CSS 选择器
- en: '| Category | Syntax | Description | Example | Example explanation |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| Category | Syntax | Description | Example | Example explanation |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Universal | `*` | Select all elements | `*` | Match all elements |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| Universal | `*` | 选择所有元素 | `*` | 匹配所有元素 |'
- en: '| Type | `elementName` | Select all elements with a given tag name | `input`
    | Match all `<input>` elements |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| Type | `elementName` | 选择所有具有给定标签名的元素 | `input` | 匹配所有 `<input>` 元素 |'
- en: '| Class | `.classname` | Select elements with a given `class` attribute | `.form-control`
    | Match all elements with class of `form-control` |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| Class | `.classname` | 选择具有给定 `class` 属性的元素 | `.form-control` | 匹配所有类为 `form-control`
    的元素 |'
- en: '| Id | `#id` | Select elements with a given `id` attribute | `#my-text-id`
    | Match all elements with id `my-text-id` |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| Id | `#id` | 选择具有给定`id`属性的元素 | `#my-text-id` | 匹配所有id为`my-text-id`的元素 |'
- en: '| Attribute | `[attr]` | Select elements with a given attribute | `[target]`
    | Match all elements with a `target` attribute |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| Attribute | `[attr]` | 选择具有给定属性的元素 | `[target]` | 匹配所有具有 `target` 属性的元素 |'
- en: '|  | `[attr=value]` | Select elements with a given attribute and value | `[target=_blank]`
    | Match all elements with a `target="_blank"` attribute |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr=value]` | 选择具有给定属性和值的元素 | `[target=_blank]` | 匹配所有具有 `target="_blank"`
    属性的元素 |'
- en: '|  | `[attr~=value]` | Select elements with a given attribute containing some
    text value | `[title~=hands]` | Match all elements with a title attribute containing
    the word `hands` |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr~=value]` | 选择具有包含某个文本值的给定属性的元素 | `[title~=hands]` | 匹配所有`title`属性包含单词
    `hands` 的元素 |'
- en: '|  | `[attr&#124;=value]` | Select elements with a given attribute equal to
    or starting by some value | `[lang&#124;=en]` | Match all elements equal to or
    starting with `en` |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr&#124;=value]` | 选择具有等于或以某个值开始的给定属性的元素 | `[lang&#124;=en]` | 匹配所有等于或以
    `en` 开头的元素 |'
- en: '|  | `[attr^=value]` | Select elements with a given attribute starting by some
    value | `a[href^="https"]` | Match all links whose `href` attribute starts with
    `https` |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr^=value]` | 选择以某个值开头的给定属性的元素 | `a[href^="https"]` | 匹配所有`href`属性以
    `https` 开头的链接 |'
- en: '|  | `[attr$=value]` | Select elements with a given attribute ending by some
    value | `a[href$=".pdf"]` | Match all links whose `href` attribute ends with `.pdf`
    |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr$=value]` | 选择以某个值结尾的给定属性的元素 | `a[href$=".pdf"]` | 匹配所有`href`属性以
    `.pdf` 结尾的链接 |'
- en: '|  | `[attr*=value]` | Select elements with a given attribute value containing
    some string | `a[href*="github"]` | Match all links whose `href` attribute contains
    `github` |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '|  | `[attr*=value]` | 选择具有包含某些字符串的给定属性值的元素 | `a[href*="github"]` | 匹配所有`href`属性包含`github`的链接
    |'
- en: The following HTML excerpt shows the hidden input text available in the practice
    web form. Then, [Example 3-9](#by-css-basic) illustrates a possible way to locate
    this element using a CSS selector. One advantage of this locator is that the selector
    will still work even when changing the attribute `name` in HTML markup.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 HTML 摘录显示了实践中的隐藏输入文本，然后，[示例 3-9](#by-css-basic) 展示了使用 CSS 选择器定位此元素的可能方法。此定位器的优势在于即使在
    HTML 标记中更改 `name` 属性，选择器仍然有效。
- en: '[PRE89]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Example 3-9\. Test using a basic locator with CSS selector
  id: totrans-349
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-9\. 使用基本的 CSS 选择器进行测试
- en: '[PRE90]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO8-1)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO8-1)'
- en: We use a CSS selector to locate the hidden input.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 CSS 选择器来定位隐藏的输入。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO8-2)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO8-2)'
- en: We check the hidden field is not visible.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查隐藏字段是否可见。
- en: There are plenty of possibilities to create advanced CSS selectors. [Table 3-6](#advanced-css-selectors)
    shows a summary with some of them. The complete reference of CSS selectors is
    available in the official [W3C recommendation](https://www.w3.org/TR/selectors).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多可能性来创建高级CSS选择器。[表格 3-6](#advanced-css-selectors) 显示了一些摘要信息。CSS选择器的完整参考资料可在官方[W3C推荐](https://www.w3.org/TR/selectors)中找到。
- en: Table 3-6\. Advanced CSS selectors
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 3-6\. 高级CSS选择器
- en: '| Category | Syntax | Description | Example | Example explanation |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 语法 | 描述 | 示例 | 示例解释 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Grouping | `,` | Group two (or more) selectors | `div, span` | Match both
    `<span>` and `<div>` elements |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| 分组 | `,` | 将两个（或多个）选择器分组 | `div, span` | 匹配 `<span>` 和 `<div>` 元素 |'
- en: '| Combinators | `(space)` | Select elements that are descendants | `div span`
    | Match all `<span>` that are inside a `<div>` |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| 组合器 | `(空格)` | 选择作为后代的元素 | `div span` | 匹配所有在 `<div>` 内的 `<span>` 元素 |'
- en: '|  | `A > B` | Select elements that are direct children of another element
    | `ul > li` | Match all `<li>` elements nested directly inside to `<ul>` |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '|  | `A > B` | 选择作为另一个元素的直接子元素 | `ul > li` | 匹配直接嵌套在 `<ul>` 内的所有 `<li>` 元素
    |'
- en: '|  | `A ~ B` | Select elements sharing the same parent (i.e., *siblings*),
    and the second element follows the first (not necessarily immediately) | `p ~
    span` | Match all <span> that follow a <p> (immediately or not) |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '|  | `A ~ B` | 选择共享同一父级的元素（即*兄弟*），并且第二个元素跟随第一个（不一定是立即的） | `p ~ span` | 匹配所有跟随
    `<p>` 的 `<span>` 元素（无论是否立即） |'
- en: '|  | `A + B` | Sibling elements, and the second element immediately follows
    the first | `h2 + p` | Match all `<p>` that immediately follows <h2> |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '|  | `A + B` | 兄弟元素，并且第二个元素紧跟在第一个后面 | `h2 + p` | 匹配紧跟在 `<h2>` 后面的所有 `<p>` 元素。'
- en: '| Pseudo | `:` | Select a CSS *pseudoclass* (i.e., a special state of the selected
    element) | `a:visited` | Match all already visited links |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| 伪类 | `:` | 选择CSS的伪类（即所选元素的特殊状态） | `a:visited` | 匹配所有已访问链接 |'
- en: '|  | `:nth-child(n)` | Select elements based on their position in a group (starting
    from the beginning) | `p:nth-child(2)` | Match every second `<p>` child |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '|  | `:nth-child(n)` | 根据在组中的位置选择元素（从开头开始） | `p:nth-child(2)` | 匹配每第二个 `<p>`
    子元素 |'
- en: '|  | `:not(selector)` | Select elements not matching a given selector | `:not(p)`
    | Match every element different from `<p>` |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '|  | `:not(selector)` | 选择不匹配给定选择器的元素 | `:not(p)` | 匹配除 `<p>` 外的所有元素 |'
- en: '|  | `:nth-last-child(n)` | Select elements based on their position in a group
    (starting from the end) | `p:nth-last-child(2)` | Match every second `<p>` child
    (counting from the last child) |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '|  | `:nth-last-child(n)` | 根据在组中的位置选择元素（从结尾开始） | `p:nth-last-child(2)` | 匹配每第二个
    `<p>` 子元素（从最后一个子元素开始计数） |'
- en: '|  | `::` | Select a CSS *pseudoelement* (i.e., a specific part of the selected
    element) | `p::first-line` | Match the first line of all `<p>` elements |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '|  | `::` | 选择CSS的伪元素（即所选元素的特定部分） | `p::first-line` | 匹配所有 `<p>` 元素的第一行 |'
- en: 'Consider the following piece of HTML (as usual, contained in the practice web
    form). As you can see, there are a couple of checkboxes: one of them is checked,
    and the other is not. We can determine which element is checked using the Selenium
    WebDriver API and CSS selectors. To that aim, [Example 3-10](#by-css-advanced)
    uses CSS pseudoclass.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下HTML片段（通常包含在实践网页表单中）。正如您所见，有几个复选框：其中一个被选中，另一个未选中。我们可以使用Selenium WebDriver
    API和CSS选择器确定哪个元素被选中。为此，[示例 3-10](#by-css-advanced) 使用CSS伪类。
- en: '[PRE91]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Example 3-10\. Test using advanced locators with CSS selectors
  id: totrans-371
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-10\. 使用CSS选择器进行高级定位测试
- en: '[PRE92]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO9-1)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO9-1)'
- en: We use the pseudoclass *checked* to locate clicked checkboxes.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用伪类 *checked* 来定位已点击的复选框。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO9-2)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO9-2)'
- en: We check the element id is as expected.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查元素ID是否符合预期。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO9-3)'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO9-3)'
- en: We confirm the selected is checked.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认所选项已被选中。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO9-4)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO9-4)'
- en: We use the pseudoclass *checked* and the operator *not* to locate default checkboxes.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用伪类 *checked* 和操作符 *not* 来定位默认复选框。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO9-5)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO9-5)'
- en: We check the element id is as expected.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查元素ID是否符合预期。
- en: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO9-6)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO9-6)'
- en: We confirm the selected is unchecked.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认所选项未选中。
- en: Locating by XPath
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位 XPath
- en: 'XPath (XML Path Language) is a powerful way of navigating to the DOM of XML-like
    documents, such as HTML pages. It includes over two hundred built-in functions
    to create advanced queries to select nodes. There are two types of XPath queries.
    First, *absolute* queries use the symbol slash (`/`) to traverse the DOM from
    the root node. For example, considering the basic HTML page in [Example 3-5](#basic_html),
    to select the link element present in this page using this approach, we need the
    following XPath query:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: XPath（XML 路径语言）是导航到类 XML 文档（如 HTML 页面）DOM 的强大方式。它包括两百多个内置函数，用于创建选择节点的高级查询。有两种类型的
    XPath 查询。首先，*绝对* 查询使用斜杠符号（`/`）从根节点遍历 DOM。例如，考虑 [示例 3-5](#basic_html) 中的基本 HTML
    页面，要使用此方法选择此页面中存在的链接元素，我们需要以下 XPath 查询：
- en: '[PRE93]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Absolute XPath queries are easy to create, but they have a relevant inconvenience:
    any minimal change in the page layout would make a locator built with this strategy
    fail. For this reason, as a general rule, the usage of absolute XPaths is discouraged.
    Instead, *relative* queries are more convenient.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对 XPath 查询很容易创建，但它们有一个显著的不便之处：页面布局的任何最小更改都会导致使用此策略构建的定位器失败。因此，通常建议避免使用绝对 XPath。相反，*相对*
    查询更加方便。
- en: 'The general syntax for relative XPath queries is as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 相对 XPath 查询的一般语法如下：
- en: '[PRE94]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[Example 3-11](#by-xpath-basic) shows a test with an XPath locator to select
    the hidden field in the practice web.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-11](#by-xpath-basic) 展示了使用 XPath 定位器选择实践网络中的隐藏字段的测试。'
- en: Example 3-11\. Test using a basic locator with XPath
  id: totrans-392
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-11\. 使用基本的 XPath 定位器进行测试
- en: '[PRE95]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO10-1)'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO10-1)'
- en: We locate the hidden field in the practice web.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在实践网络中定位隐藏字段。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO10-2)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO10-2)'
- en: We verify this element is not visible to the user.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认此元素对用户不可见。
- en: The real power of XPath comes from its built-in functions. [Table 3-7](#xpath-functions)
    contains some of the most relevant XPath functions. You can find the complete
    XPath reference in the [W3C XPath Recommendations](https://www.w3.org/TR/xpath).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 的真正威力来自其内置函数。 [表 3-7](#xpath-functions) 包含了一些最相关的 XPath 函数。您可以在 [W3C XPath
    推荐标准](https://www.w3.org/TR/xpath) 中找到完整的 XPath 参考资料。
- en: Table 3-7\. Summary of relevant XPath built-in functions
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-7\. 相关 XPath 内置函数摘要
- en: '| Category | Syntax | Description | Example | Example explanation |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 语法 | 描述 | 示例 | 示例说明 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Attributes | `contains(@attr, ''string'')` | Check if an attribute contains
    a string | `//a[contains(@href, ''github'')]` | Match links with `href` containing
    `github` |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | `contains(@attr, ''string'')` | 检查属性是否包含字符串 | `//a[contains(@href, ''github'')]`
    | 匹配 `href` 包含 `github` 的链接 |'
- en: '| `starts-with(@attr, ''string'')` | Check if an attribute starts with a string
    | `//a[starts-with(@href, ''https'')]` | Match all links using HTTPS |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `starts-with(@attr, ''string'')` | 检查属性是否以字符串开头 | `//a[starts-with(@href,
    ''https'')]` | 匹配所有使用 HTTPS 的链接 |'
- en: '| `ends-with(@attr, ''string'')` | Check if an attribute end with a string
    | `//a[ends-with(@href, *https*)]` | Match all links to PDF documents |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| `ends-with(@attr, ''string'')` | 检查属性是否以字符串结尾 | `//a[ends-with(@href, *https*)]`
    | 匹配所有指向 PDF 文档的链接 |'
- en: '| Text | `text()=''string''` | Locate elements based on text content | `//*[text()=*click*]`
    | Match all elements with the text `click` |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | `text()=''string''` | 根据文本内容定位元素 | `//*[text()=*click*]` | 匹配所有文本为 `click`
    的元素 |'
- en: '| Child nodes | `[index]` | Locate children elements | `//div/*[0]` | First
    child of a `<div>` |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| 子节点 | `[index]` | 定位子元素 | `//div/*[0]` | `<div>` 的第一个子元素 |'
- en: '| Boolean | `or` | Logic operator *or* | `//@type=''submit'' or @type=''reset'']`
    | Match buttons to submit and clear forms |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 | `or` | 逻辑运算符 *or* | `//@type=''submit'' or @type=''reset'']` | 匹配提交和清除表单的按钮
    |'
- en: '|  | `and` | Logic operator *and* | `//@type=''submit'' and @id =''my-button'']`
    | Match submit buttons with a given id |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '|  | `and` | 逻辑运算符 *and* | `//@type=''submit'' and @id =''my-button'']` | 匹配具有给定
    id 的提交按钮 |'
- en: '|  | `not()` | Logic operator *not* | `//@type=''submit'' and not(@id =''my-button'')]`
    | Match submit buttons different to a given id |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '|  | `not()` | 逻辑运算符 *not* | `//@type=''submit'' and not(@id =''my-button'')]`
    | 匹配与给定 id 不同的提交按钮 |'
- en: '| Axes (used to locate relative nodes) | `following::item` | Nodes that come
    after the current one | `//*[@type=''text'']//following::input` | Match all input
    fields after the first text input |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| 轴（用于定位相对节点） | `following::item` | 在当前节点之后的节点 | `//*[@type=''text'']//following::input`
    | 匹配第一个文本输入框后的所有输入框 |'
- en: '|  | `descendant::item` | Select descendant elements (child, etc.) of current
    node | `//*[@id=''my-id'']//descendant::a` | Match all descendant links from a
    given parent node |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '|  | `descendant::item` | 选择当前节点的后代元素（子元素等） | `//*[@id=''my-id'']//descendant::a`
    | 匹配给定父节点下的所有后代链接 |'
- en: '|  | `ancestor::item` | Select ancestor elements (parent, etc.) of current
    node | `//input[@id=''my-id'']//ancestor::label` | Match all antecedent labels
    from a given input text |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '|  | `ancestor::item` | 选择当前节点的祖先元素（父元素等） | `//input[@id=''my-id'']//ancestor::label`
    | 匹配给定输入文本的所有前置标签 |'
- en: '|  | `child::item` | Select children elements of current node | `//*[@id=''my-id'']//child::li`
    | Match all list element under a given node |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '|  | `child::item` | 选择当前节点的子元素 | `//*[@id=''my-id'']//child::li` | 匹配给定节点下的所有列表元素
    |'
- en: '|  | `preceding::item` | Select all nodes that come before the current one
    | `//*[@id=''my-id'']//preceding::input` | Match all `input` before a given node
    |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '|  | `preceding::item` | 选择当前节点之前的所有节点 | `//*[@id=''my-id'']//preceding::input`
    | 匹配给定节点之前的所有`input`元素 |'
- en: '|  | `following-sibling::item` | Select following nodes that come before the
    current one | `//*[@id=''my-id'']//following-sibling::input` | Match the next
    input before a given node |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '|  | `following-sibling::item` | 选择当前节点之后的下一个节点 | `//*[@id=''my-id'']//following-sibling::input`
    | 匹配给定节点之后的下一个输入元素 |'
- en: '|  | `parent::item` | Select parent of the current node | `//*[@id=''my-id'']//parent::div`
    | Match the parent `div` element of a given node |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '|  | `parent::item` | 选择当前节点的父节点 | `//*[@id=''my-id'']//parent::div` | 匹配给定节点的父`div`元素
    |'
- en: '[Example 3-12](#by-xpath-advanced) shows how to use XPath locators for the
    radio buttons available in the practice web form. The HTML markup for these radio
    buttons is:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-12](#by-xpath-advanced)展示了如何在练习网页表单中使用XPath定位器来操作单选按钮。这些单选按钮的HTML标记如下：'
- en: '[PRE96]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Example 3-12\. Test using advanced locators with XPath
  id: totrans-419
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-12\. 使用高级XPath定位器进行测试
- en: '[PRE97]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO11-1)'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO11-1)'
- en: We use XPath to locate the checked radio buttons.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用XPath来定位已选中的单选按钮。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO11-2)'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO11-2)'
- en: We check the element id is as expected.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查元素ID是否符合预期。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO11-3)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO11-3)'
- en: We confirm the selected is checked.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认所选项已被选中。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO11-4)'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO11-4)'
- en: We use XPath to locate the unchecked radio buttons.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用XPath来定位未选中的单选按钮。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO11-5)'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO11-5)'
- en: We check the element id is as expected.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查元素ID是否符合预期。
- en: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO11-6)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO11-6)'
- en: We confirm the selected is unchecked.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确认所选项未被选中。
- en: Tip
  id: totrans-433
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '[“What Strategy Should You Use?”](#what-strategy) provides a comparison between
    CSS selectors and XPath and gives some hints for selecting one or another locator
    strategies.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[“你应该使用什么策略？”](#what-strategy)对比了CSS选择器和XPath，并提供了选择定位策略的一些提示。'
- en: Finding Locators on a Web Page
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网页上查找定位器
- en: As introduced in [Table 1-4](ch01.html#locators) in [Chapter 1](ch01.html#ch01),
    there are different tools we can use to help generate locators for our WebDriver
    tests. This section shows how to use the main features of the built-in developer
    tools in major browsers, i.e., [Chrome DevTools](https://developer.chrome.com/docs/devtools)
    for Chromium-based browsers (e.g., Chrome and Edge) and [Firefox Developer Tools](https://developer.mozilla.org/en-US/docs/Tools)
    (for Firefox).
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 1-4 表](ch01.html#locators)所示，在[第 1 章](ch01.html#ch01)中，我们可以使用不同的工具来帮助生成我们WebDriver测试的定位器。本节展示了如何使用主流浏览器内置开发者工具的主要功能，例如基于Chromium的浏览器（如Chrome和Edge）的[Chrome
    DevTools](https://developer.chrome.com/docs/devtools)，以及Firefox的[Firefox Developer
    Tools](https://developer.mozilla.org/en-US/docs/Tools)。
- en: You can open both of these developer tools by right-clicking on the portion
    of the web page UI that you want to test and then selecting the option menu *Inspect*.
    [Figure 3-3](#chrome-devtools) shows a screenshot of Chrome DevTools placed at
    the bottom of the browser (you can move it if you want).
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过右键单击要测试的网页界面部分，然后选择*检查*选项来打开这两个开发者工具。[图 3-3](#chrome-devtools)展示了Chrome
    DevTools的屏幕截图，通常位于浏览器底部（您可以根据需要移动它）。
- en: Developer tools provide different ways to locate elements in a web page. First,
    we use the element selector by clicking on the icon (an arrow over a box) in the
    upper left corner of the developer tools pane. Then, we can move the mouse over
    the page to highlight each web element and inspect the elements panel to check
    their markup, attributes, etc.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工具提供了在 Web 页面中定位元素的不同方式。首先，我们使用元素选择器，点击位于开发者工具面板左上角的图标（箭头覆盖一个方框）。然后，我们可以将鼠标移到页面上以突出显示每个
    Web 元素，并在元素面板中检查它们的标记、属性等。
- en: '![hosw 0303](assets/hosw_0303.png)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0303](assets/hosw_0303.png)'
- en: Figure 3-3\. Use of Chrome DevTools while navigating the practice site
  id: totrans-440
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. 在导航练习网站时使用 Chrome DevTools
- en: In the same view, we can use the tool to copy its CSS or XPath selector by right-clicking
    on the element and then selecting the menu option “Copy.” This mechanism allows
    getting the full CSS or XPath selector. It can be the first approach to generate
    a locator quickly, although I do not recommend using these locators directly since
    they tend to be brittle (i.e., linked to the current page layout) and are hard
    to read.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一视图中，我们可以通过右键单击元素并选择菜单选项“复制”，来使用工具复制其完整的 CSS 或 XPath 选择器。这种机制允许快速生成定位器的第一种方法，尽管我不建议直接使用这些定位器，因为它们往往比较脆弱（即与当前页面布局紧密相关）且难以阅读。
- en: To create robust CSS or XPath locators, we need to think about the specific
    characteristics of the web pages we are working with and create a custom selector
    based on that knowledge. Again, the developer tools can help us in this task.
    We can press the key combination Ctrl + F to search by string, CSS selector, or
    XPath in Chrome DevTools. [Figure 3-4](#chrome-devtools-search-selector) shows
    an example of this feature in action.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建稳健的 CSS 或 XPath 定位器，我们需要考虑我们正在处理的 Web 页面的特定特征，并根据这些知识创建自定义选择器。同样，开发者工具可以帮助我们完成这项任务。我们可以按下组合键
    Ctrl + F 在 Chrome DevTools 中搜索字符串、CSS 选择器或 XPath。[图 3-4](#chrome-devtools-search-selector)
    展示了此功能的实际示例。
- en: Notice we are using the practice web form, and we type the string `#my-text-id`,
    which corresponds to the element with a given id using a CSS selector. DevTools
    found the web element on the page and highlighted it.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用练习的 Web 表单，并键入字符串 `#my-text-id`，它对应使用 CSS 选择器定位的元素。 DevTools 找到页面上的
    Web 元素并将其高亮显示。
- en: '![hosw 0304](assets/hosw_0304.png)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0304](assets/hosw_0304.png)'
- en: Figure 3-4\. Searching CSS selector in Chrome DevTools
  id: totrans-445
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. 在 Chrome DevTools 中搜索 CSS 选择器
- en: We can use a similar approach in Firefox. We need to use the console panel and
    type `$$("css-selector")` for searching by CSS selector or `$x("xpath-query")`
    for XPath queries. [Figure 3-5](#firefox-devtools-search-selector) shows how to
    locate the first input text element of the practice web form by id, using a CSS
    selector and an XPath query.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Firefox 中采用类似的方法。我们需要使用控制台面板并键入 `$$("css-selector")` 以搜索 CSS 选择器或 `$x("xpath-query")`
    以进行 XPath 查询。[图 3-5](#firefox-devtools-search-selector) 展示了如何通过 id 使用 CSS 选择器和
    XPath 查询来定位练习 Web 表单的第一个输入文本元素。
- en: '![hosw 0305](assets/hosw_0305.png)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0305](assets/hosw_0305.png)'
- en: Figure 3-5\. Searching CSS selector and XPath in Firefox Developer Tools
  id: totrans-448
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. 在 Firefox 开发者工具中搜索 CSS 选择器和 XPath
- en: Compound Locators
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合定位器
- en: 'The Selenium WebDriver API has several support classes that enable the composition
    of the different locator types we have seen. These classes are:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 拥有多个支持类，可以组合我们看到的不同定位器类型。这些类包括：
- en: '`ByIdOrName(String idOrName)`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`ByIdOrName(String idOrName)`'
- en: It seeks by id, and if that is not available, it seeks by name.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先按 id 寻找，如果不可用，则按名称寻找。
- en: '`ByChained(By... bys)`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`ByChained(By... bys)`'
- en: It seeks elements in a sequence (i.e., the second one should appear inside the
    first one, and so on).
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 它按顺序寻找元素（即第二个应该出现在第一个内部，依此类推）。
- en: '`ByAll(By... bys)`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`ByAll(By... bys)`'
- en: It seeks elements that match a number of location strategies (following an *and*
    logic condition for these locators).
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 它按照一系列定位策略匹配元素（对这些定位器采用 *与* 逻辑条件）。
- en: '[Example 3-13](#by-id-or-name) shows a test using `ByIdOrName`. This test looks
    for the following file-select field available in the practice web form. Notice
    that this field specifies the attribute `name` (but not `id`).'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-13](#by-id-or-name) 展示了使用 `ByIdOrName` 的测试。该测试查找练习 Web 表单中可用的文件选择字段。请注意，该字段指定了
    `name` 属性（但没有 `id`）。'
- en: '[PRE98]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Example 3-13\. Test using by id or name compound locator
  id: totrans-459
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-13\. 使用 id 或名称复合定位器的测试
- en: '[PRE99]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO12-1)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO12-1)'
- en: We use a locator by id or name.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 id 或名称来定位。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO12-2)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO12-2)'
- en: We check the element has the attribute `name`.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查元素是否具有属性`name`。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO12-3)'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO12-3)'
- en: We verify the absence of the attribute `name` in the same element.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证了同一元素中缺少属性`name`。
- en: '[Example 3-14](#by-chained-all) shows two tests illustrating the difference
    between `ByChained` and `ByAll`. Both locators use the practice web form again.
    If you inspect its source code, you will notice that there are three single `<div
    class="row">` inside the `<form>`.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-14](#by-chained-all) 展示了两个测试案例，说明了`ByChained`和`ByAll`复合定位器之间的差异。这两个定位器再次使用了实践网页表单。如果您检查其源代码，您将注意到在`<form>`内有三个单独的`<div
    class="row">`。'
- en: Example 3-14\. Test using by chained and by all compound locators
  id: totrans-468
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-14\. 使用链式定位器和全部复合定位器的测试
- en: '[PRE100]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO13-1)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO13-1)'
- en: We use the locator using `ByChained`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ByChained`定位器。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO13-2)'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO13-2)'
- en: We find one element since only one `row` element is within the form.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到一个元素，因为在表单内仅有一个`row`元素。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO13-3)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO13-3)'
- en: We use the locator using `ByAll`.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ByAll`定位器。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO13-4)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO13-4)'
- en: We find five elements, since the locator matches a `<form>` element plus four
    `<div class="row">` available on the page.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了五个元素，因为定位器匹配了页面上一个`<form>`元素和四个`<div class="row">`元素。
- en: Relative Locators
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对定位器
- en: 'Selenium WebDriver version 4 incorporates a new way to find elements in a web
    page: *relative locators*. These new locators aim to find web elements relative
    to another known element. This feature is based on the CSS *box model*. The model
    determines that each element of a web document is rendered using a rectangular
    box. [Figure 3-6](#box-model) shows an example of this box model for a given web
    element in the practice form.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 版本 4 引入了一种新的在网页中查找元素的方法：*相对定位器*。这些新的定位器旨在找到相对于另一个已知元素的网页元素。这一功能基于
    CSS *盒模型*。该模型确定网页文档中的每个元素都使用矩形框进行呈现。[图 3-6](#box-model) 展示了在实践表单中给定网页元素的盒模型示例。
- en: '![hosw 0306](assets/hosw_0306.png)'
  id: totrans-480
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0306](assets/hosw_0306.png)'
- en: Figure 3-6\. Practice form showing the box model of a web element
  id: totrans-481
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-6\. 展示网页元素盒模型的实践表单
- en: 'Using this box model, the relative locators available in the Selenium WebDriver
    API allow finding elements in relation to the position of another web element.
    To this aim, first, we need to locate that web element using the standard location
    strategies (e.g., by id, name, attribute, etc.). Then, we need to specify the
    locator type obtained by proximity to the original web element using the static
    method `with` of the class `RelativeLocator`. As a result, we get a `RelativeBy`
    object, which extends the abstract class `By`, used in the standard locator strategies.
    A `RelativeBy` object provides the following methods to carry out relative location:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这种盒模型，在 Selenium WebDriver API 中可用的相对定位器允许根据另一个网页元素的位置来查找元素。为此，首先我们需要使用标准的定位策略（例如按id、名称、属性等）定位到该网页元素。然后，我们需要使用类`RelativeLocator`的静态方法`with`指定相对于原始网页元素的定位器类型。结果，我们得到一个`RelativeBy`对象，它扩展了标准定位策略中使用的抽象类`By`。`RelativeBy`对象提供以下方法来执行相对定位：
- en: '`above()`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`above()`'
- en: Finds element(s) located on the top of the original element.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 找到位于原始元素顶部的元素。
- en: '`below()`'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`below()`'
- en: Finds element(s) located under the original element.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 找到位于原始元素下方的元素。
- en: '`near()`'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '`near()`'
- en: Finds element(s) located close to the original element. The default distance
    to consider an element near to some other is one hundred pixels. This locator
    is overloaded to specify another distance.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 找到位于原始元素附近的元素。默认距离用于判断元素是否靠近另一个元素是一百像素。此定位器可以重载以指定另一个距离。
- en: '`toLeftOf()`'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`toLeftOf()`'
- en: Finds element(s) located at the left side of the original element.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 找到位于原始元素左侧的元素。
- en: '`toRightOf()`'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`toRightOf()`'
- en: Finds element(s) located at the right side of the original element.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 找到位于原始元素右侧的元素。
- en: '[Example 3-15](#relative_locators_examples) shows a basic test using relative
    locators. Once again, we use the practice web form to illustrate this feature.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-15](#relative_locators_examples) 展示了使用相对定位器进行基本测试的案例。再次使用示例网页表单来说明这一特性。'
- en: Example 3-15\. Test using relative locators
  id: totrans-494
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-15\. 使用相对定位器进行测试
- en: '[PRE101]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO14-1)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO14-1)'
- en: We locate the link whose text is `Return to index`.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位文本为`Return to index`的链接。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO14-2)'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO14-2)'
- en: We specify the relative locator type, which will be by tag name the `input`.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定相对定位器类型，将会是标签名为`input`的元素。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO14-3)'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO14-3)'
- en: We use a relative locator to find a web element (which should be an `input`
    filed) above the original web element (i.e., a link).
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相对定位器来查找位于原始网页元素（即链接）上方的 Web 元素（应该是一个`input`字段）。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO14-4)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO14-4)'
- en: We verify the element above the reference link is a read-only field (see [Figure 3-2](#practice-site-web-form)
    to double-check it).
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证上面的参考链接是否是一个只读字段（参见[图 3-2](#practice-site-web-form)以进行双重检查）。
- en: Warning
  id: totrans-504
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Relative locators can be helpful for finding elements based on the relative
    position of other elements. On the other hand, this strategy can be very sensitive
    to page layout. For example, you need to be careful when using relative locators
    in responsive pages since the layout can vary depending on the viewport.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 相对定位器可以帮助根据其他元素的相对位置找到元素。但另一方面，这种策略对页面布局非常敏感。例如，在响应式页面中使用相对定位器时需要特别小心，因为布局可能会根据视口的大小而变化。
- en: A challenging example
  id: totrans-506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个具有挑战性的例子
- en: The examples we have seen so far are reasonably simple. Let’s now look at a
    more complex use case. A nondefault element in the practice web is the *date picker*.
    As its name suggests, this element provides a handy way to select dates using
    a web GUI. Since the CSS framework used in the practice site is [Bootstrap](https://getbootstrap.com),
    I implemented the date picker using [bootstrap-datepicker](https://github.com/uxsolutions/bootstrap-datepicker).
    This date picker is attached to an input field. When the user clicks on this field,
    a calendar appears on the web page (see [Figure 3-7](#date-picker-gui)). The user
    can select a given date by clicking the preferred date by navigating to the different
    days, months, and years.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的例子都相当简单。现在让我们来看一个更复杂的使用情况。练习网页中的一个非默认元素是*日期选择器*。顾名思义，该元素提供了一个方便的方法来使用
    web GUI 选择日期。由于练习站点使用的 CSS 框架是[Bootstrap](https://getbootstrap.com)，我使用[bootstrap-datepicker](https://github.com/uxsolutions/bootstrap-datepicker)实现了日期选择器。此日期选择器附加到一个输入字段上。当用户点击此字段时，一个日历会出现在网页上（参见[图
    3-7](#date-picker-gui)）。用户可以通过导航到不同的天、月和年来选择给定日期。
- en: '![hosw 0307](assets/hosw_0307.png)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0307](assets/hosw_0307.png)'
- en: Figure 3-7\. Date picker in the practice web form
  id: totrans-509
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-7\. 练习网页表单中的日期选择器
- en: We want to implement an automated test using Selenium WebDriver that selects
    the current day and month but the previous year by interacting with the date picker
    GUI. [Example 3-16](#datepiker_example) shows the resulting implementation.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望使用 Selenium WebDriver 实现一个自动化测试，通过与日期选择器 GUI 交互选择当前天和月，但选择前一年。[示例 3-16](#datepiker_example)
    展示了实现结果。
- en: Tip
  id: totrans-511
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: To follow this example, I recommend you open the practice web form (see URL
    in the code example) in your browser and use the developer tools to inspect the
    internal elements of the date picker selector, paying attention to the different
    selector strategies used.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随此示例，建议您在浏览器中打开练习网页表单（在代码示例中的 URL），并使用开发者工具检查日期选择器选择器的内部元素，注意使用的不同选择器策略。
- en: Example 3-16\. Test interacting with a date picker
  id: totrans-513
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-16\. 与日期选择器交互的测试
- en: '[PRE102]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO15-1)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO15-1)'
- en: Get the current date from the system clock. We use the standard `java.time`
    API for this.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统时钟获取当前日期。我们使用标准的`java.time` API来完成此操作。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO15-2)'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO15-2)'
- en: Click on the date picker to open the calendar. We use a locator by name (`By.name("my-date")`).
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 点击日期选择器以打开日历。我们使用名称定位器（`By.name("my-date")`）。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO15-3)'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO15-3)'
- en: Click on the current month by searching by text. We use an XPath query for this
    locator. After this step, the rest of the months of the year appear in the date
    picker GUI.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 通过搜索文本点击当前月份。我们使用 XPath 查询来定位此定位器。完成此步骤后，日期选择器 GUI 中会显示年份的其余月份。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO15-4)'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO15-4)'
- en: Click on the left arrow using relative locators (i.e., right of the month element).
    After this step, the calendar moves to the previous year.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相对定位器点击左箭头（即月份元素的右侧）。完成此步骤后，日历将移到前一年。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO15-5)'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO15-5)'
- en: Click on the current month of that year. We use a CSS selector here.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 点击该年份中的当前月份。在这里，我们使用了CSS选择器。
- en: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO15-6)'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO15-6)'
- en: Click on the present day in that month. We use an XPath query in this step.
    After the click, the date is selected, and the value appears in the input text.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 点击该月份中的当前日期。在这一步中，我们使用XPath查询。点击后，日期被选中，并且其值出现在输入文本中。
- en: '[![7](assets/7.png)](#co_webdriver_fundamentals_CO15-7)'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_webdriver_fundamentals_CO15-7)'
- en: Get the final date on the input text. We use a basic locator by attribute here.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 获取输入文本中的最终日期。在这里，我们使用基本的属性定位器。
- en: '[![8](assets/8.png)](#co_webdriver_fundamentals_CO15-8)'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_webdriver_fundamentals_CO15-8)'
- en: Assert that the expected date is equal to the one selected in the date picker.
    We calculate the expected date using standard Java, and as usual, AssertJ for
    the assertion.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 断言预期日期是否等于日期选择器中选择的日期。我们使用标准的Java计算预期日期，并像往常一样使用AssertJ进行断言。
- en: What Strategy Should You Use?
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您应该使用什么策略？
- en: 'In this section, we review the different alternatives the Selenium WebDriver
    API allows for locating elements in a web page. This topic is one of the most
    fundamental routines for browser automation with Selenium WebDriver. Maybe you
    are asking yourself: *What is the best strategy I should use?* As Dr. Alfred Lanning
    (character in the novel and movie *I, Robot*) would say: “That, detective, is
    the right question.” In my opinion, that is a difficult question, and it has no
    simple answer. In other words, the answer to this question could be “it depends.”
    This section presents several hints for identifying a suitable locator strategy
    for common use cases. First, [Table 3-8](#locator-comparison) compares the different
    locating strategies.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了Selenium WebDriver API允许在网页中定位元素的不同方法。这个主题是使用Selenium WebDriver进行浏览器自动化中最基本的例程之一。也许你正在问自己：*我应该使用哪种最佳策略？*
    正如小说和电影《我，机器人》中的人物Alfred Lanning博士所说：“侦探，那才是正确的问题。” 在我看来，这是一个困难的问题，没有简单的答案。换句话说，对这个问题的答案可能是“取决于情况”。本节提供了几个提示，以便为常见用例识别合适的定位器策略。首先，[表 3-8](#locator-comparison)比较了不同的定位策略。
- en: Table 3-8\. Pros, cons, and typical use cases of the different locating strategies
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-8\. 不同定位策略的优缺点和典型用例
- en: '| Locator | Pros | Cons | Typical use case |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| 定位器 | 优点 | 缺点 | 典型用例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| By attribute (id, name, class) | Easy to use | These attributes are not always
    available | Elements that define these attributes immutably (i.e., it does not
    change dynamically) |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| 通过属性（id、name、class） | 使用简单 | 这些属性并不总是可用 | 定义这些属性的元素是不可变的（即，不会动态变化） |'
- en: '| By link text (total or partial) | Easy to use | Only available for links
    | For text links |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| 通过链接文本（完全或部分） | 使用简单 | 仅适用于链接 | 适用于文本链接 |'
- en: '| By tag name | Easy to use | Hard to select one specific element when the
    tag repeatedly appears on the page | When the tag is unique, or the resulting
    DOM node has a fixed position |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| 通过标签名 | 使用简单 | 当页面上标签重复出现时，难以选择特定的一个元素 | 当标签是唯一的，或者结果DOM节点有固定的位置时 |'
- en: '| By CSS selector or by XPath | Very powerful | It is not easy to write robust
    selectors | For complex locators |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| 通过CSS选择器或XPath | 功能强大 | 编写健壮的选择器不容易 | 用于复杂的定位器 |'
- en: '| Compound locators | Easy way to compose existing locators | Limited to specific
    situations | When looking for id or name (`ByIdOrName`), when looking for nested
    elements (`ByChained`), and when using several strategies at the same time (`ByAll`)
    |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| 复合定位器 | 轻松组合现有的定位器 | 限于特定情况 | 当查找id或name（`ByIdOrName`）时，查找嵌套元素（`ByChained`）时，以及同时使用多种策略（`ByAll`）时
    |'
- en: '| Relative locators | Human language approach | It needs to be combined with
    other locators | Find element based on the relative position (above, below, near,
    etc.) of a known element |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| 相对定位器 | 人类语言方法 | 需要与其他定位器结合使用 | 基于已知元素的相对位置（上方、下方、附近等）查找元素'
- en: As you can see in this table, CSS selectors and XPath share the same pros, cons,
    and use cases. Does it mean these strategies are the same? The answer is no. Both
    are very powerful and allow the creation of complex locators. Nevertheless, there
    are relevant distinctions between them. [Table 3-9](#css-xpath-comparison) summarizes
    these differences.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在此表中所见，CSS选择器和XPath共享相同的优点、缺点和用例。这是否意味着这些策略相同？答案是否定的。两者都非常强大，并允许创建复杂的定位器。然而，它们之间存在着明显的区别。[表 3-9](#css-xpath-comparison)
    总结了这些差异。
- en: Table 3-9\. Some differences between XPath and CSS selector
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 表3-9\. XPath和CSS选择器之间的一些差异
- en: '| XPath | CSS selector |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| XPath | CSS选择器 |'
- en: '| --- | --- |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| XPath allows bidirectional location, i.e., the traversal can be from parent
    to child and vice versa | CSS allows one-directional locations, i.e., the traversal
    is from parent to child only |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| XPath允许双向定位，即遍历可以从父级到子级，反之亦然 | CSS允许单向定位，即遍历只能从父级到子级 |'
- en: '| XPath is slower in terms of performance | CSS has faster performance than
    XPath |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
  zh: '| XPath在性能上较慢 | CSS比XPath更快 |'
- en: '| XPath allows the identification of visible text on the screen using the `text()`
    function | CSS does not allow locating elements by its text content |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
  zh: '| XPath允许使用 `text()` 函数识别屏幕上的可见文本 | CSS不允许按其文本内容定位元素 |'
- en: To better illustrate the difference between XPath and CSS selectors, [Table 3-10](#css-xpath-comparison-examples)
    compares specific locators using both strategies.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地说明XPath和CSS选择器之间的区别，[表 3-10](#css-xpath-comparison-examples) 比较了使用这两种策略的特定定位器。
- en: Table 3-10\. Examples comparing XPath and CSS selector
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 表3-10\. 比较XPath和CSS选择器的示例
- en: '| Locator | XPath | CSS selector |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| 定位器 | XPath | CSS选择器 |'
- en: '| --- | --- | --- |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| All elements | `//*` | `*` |'
  id: totrans-553
  prefs: []
  type: TYPE_TB
  zh: '| 所有元素 | `//*` | `*` |'
- en: '| All `<div>` elements | `//div` | `div` |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| 所有 `<div>` 元素 | `//div` | `div` |'
- en: '| Element by id | `//*[@id=''my-id'']` | `#my-id` |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| 通过id定位元素 | `//*[@id=''my-id'']` | `#my-id` |'
- en: '| Element by class | `//*[contains(@class=''my-class'')]` | `.my-class` |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| 类名定位 | `//*[contains(@class=''my-class'')]` | `.my-class` |'
- en: '| Element with attribute | `//*[@attr]` | `*[attr]` |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| 带有属性的元素 | `//*[@attr]` | `*[attr]` |'
- en: '| Find by text in a `<div>` | `//div[text()=''search-string'']` | Not possible
    |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| 在 `<div>` 中查找文本 | `//div[text()=''search-string'']` | 不可行 |'
- en: '| First child of a `<div>` | `//div/*[1]` | `div>*:first-child` |'
  id: totrans-559
  prefs: []
  type: TYPE_TB
  zh: '| `<div>` 的第一个子元素 | `//div/*[1]` | `div>*:first-child` |'
- en: '| All `<div>` with a link child | `//div[a]` | Not possible |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| 所有带有链接子元素的 `<div>` | `//div[a]` | 不可行 |'
- en: '| Next element in a `<div>` | `//div/following-sibling::*[1]` | `div + *` |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| `<div>` 下一个元素 | `//div/following-sibling::*[1]` | `div + *` |'
- en: '| Previous element of a `<div>` | `//div/preceding-sibling::*[1]` | Not possible
    |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| `<div>` 的前一个元素 | `//div/preceding-sibling::*[1]` | 不可行 |'
- en: In conclusion, we can see that XPath provides the most general strategy. Nevertheless,
    there are some cases in which the CSS selectors offer a friendlier syntax (e.g.,
    locating by id or class) and better general performance.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们可以看到XPath提供了最通用的策略。然而，在某些情况下，CSS选择器提供了更友好的语法（例如，通过id或类定位）和更好的通用性能。
- en: Keyboard Actions
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘操作
- en: 'As introduced in [Table 3-3](#webelement-methods), two main methods in `WebDriver`
    objects allow impersonating keyboard user actions: `sendKeys()` and `clear()`.
    [Example 3-17](#keyboard_basic) shows a test using these methods.'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 如[表 3-3](#webelement-methods)所介绍的，`WebDriver` 对象中的两个主要方法允许模拟键盘用户操作：`sendKeys()`
    和 `clear()`。[示例 3-17](#keyboard_basic) 展示了使用这些方法的测试。
- en: Example 3-17\. Test impersonating keyboard events
  id: totrans-566
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例3-17\. 模拟键盘事件测试
- en: '[PRE103]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO16-1)'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO16-1)'
- en: We use the practice web form to locate the input text named `my-text`.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用实践网页表单来定位名为 `my-text` 的输入文本。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO16-2)'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO16-2)'
- en: We simulate a keyboard typing on it using the method `sendKeys()`.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `sendKeys()` 方法模拟键盘输入。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO16-3)'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO16-3)'
- en: We assess the input value is as expected.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 我们评估输入值是否符合预期。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO16-4)'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO16-4)'
- en: We reset its content using `clear()`.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `clear()` 来重置它的内容。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO16-5)'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO16-5)'
- en: We assess the input value is empty.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 我们评估输入值是否为空。
- en: File Uploading
  id: totrans-578
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件上传
- en: 'There are several use cases in which we will need to impersonate keyboard actions
    when interacting with web pages through Selenium WebDriver. The first one is file
    uploading. The standard mechanism to upload files for web applications is using
    `<input>` elements with `type="file"`. For instance, the practice web form contains
    one of these elements:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 Selenium WebDriver 与网页交互时，有几种用例需要模拟键盘动作。第一个是文件上传。用于 Web 应用程序上传文件的标准机制是使用带有`type="file"`的`<input>`元素。例如，实践网页表单包含其中一个这样的元素：
- en: '[PRE104]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The Selenium WebDriver API does not provide a mechanism to handle file inputs.
    Instead, we should treat input elements for uploading files as regular text inputs,
    so we need to simulate the user typing them. In particular, we need to type the
    absolute file path to be uploaded. [Example 3-18](#upload_file) illustrates how.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver API 不提供处理文件输入的机制。相反，我们应将用于上传文件的输入元素视为常规文本输入，因此需要模拟用户键入。特别是，我们需要输入要上传的绝对文件路径。[示例
    3-18](#upload_file)说明了如何操作。
- en: Example 3-18\. Test uploading a file
  id: totrans-582
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-18\. 测试上传文件
- en: '[PRE105]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO17-1)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO17-1)'
- en: We locate the input field using a by-name strategy.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用按名称策略定位输入字段。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO17-2)'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO17-2)'
- en: We create a temporal file using standard Java.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用标准 Java 创建临时文件。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO17-3)'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO17-3)'
- en: We type its absolute path to the input field.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向输入字段键入其绝对路径。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO17-4)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO17-4)'
- en: We submit the form.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提交表单。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO17-5)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO17-5)'
- en: We verify that the resulting page (defined in `action` form attribute) is different
    from the initial web page.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 我们验证结果页面（在`action`表单属性中定义）与初始网页不同。
- en: Tip
  id: totrans-594
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The file path sent to the input file should correspond to an existing archive
    in the machine running the test. Otherwise, the test fails with an `InvalidArgumentException`
    exception. See [“WebDriver Exceptions”](ch04.html#exceptions) in [Chapter 5](ch05.html#ch05)
    for further details about exceptions.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到输入文件的文件路径应对应于运行测试的机器上的现有存档。否则，测试将因`InvalidArgumentException`异常而失败。有关异常的更多详细信息，请参阅[“WebDriver
    异常”](ch04.html#exceptions)中的[第 5 章](ch05.html#ch05)。
- en: When uploading a file to a remote browser (as explained in [Chapter 6](ch06.html#ch06)),
    we need to load the file from the local file system explicitly. The following
    line shows how to specify a local file detector.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 当向远程浏览器上传文件（如[第 6 章](ch06.html#ch06)中所述）时，我们需要明确从本地文件系统加载文件。以下一行展示了如何指定本地文件检测器。
- en: '[PRE106]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Range Sliders
  id: totrans-598
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围滑块
- en: 'A similar situation happens with `<input type="range">` form fields. These
    elements allow users to select a number in a range using a graphical slider. You
    can find an example in the practice web form:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的情况发生在`<input type="range">`表单字段上。这些元素允许用户使用图形滑块选择一个范围内的数字。你可以在实践的网页表单中找到一个例子：
- en: '[PRE107]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Again, the Selenium WebDriver API does not provide any particular utility to
    handle these fields. We can interact with them by impersonating keyboard actions
    with Selenium WebDriver. [Example 3-19](#slider) shows a test interaction with
    these fields.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，Selenium WebDriver API 不提供处理这些字段的特定实用程序。我们可以通过模拟键盘动作与 Selenium WebDriver
    互动来操作它们。[示例 3-19](#slider)展示了与这些字段的测试交互。
- en: Example 3-19\. Test selecting a number with a form slider
  id: totrans-602
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-19\. 使用表单滑块选择数字
- en: '[PRE108]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO18-1)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO18-1)'
- en: We send a keyboard key to the range field available in the practice web form.
    We use the class `Keys` available in the Selenium WebDriver API to handle special
    keyboard characters. In particular, we send the right arrow key to the slider,
    and as a result, it moves to the right (i.e., it increases the selected number
    within the range).
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向实践网页表单中的范围字段发送键盘按键。我们使用 Selenium WebDriver API 中可用的`Keys`类来处理特殊键盘字符。特别是，我们向滑块发送右箭头键，结果它向右移动（即增加了范围内选择的数字）。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO18-2)'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO18-2)'
- en: We assert the resulting selected value is different from the one in the original
    position.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言结果选择的值与原始位置的值不同。
- en: Mouse Actions
  id: totrans-608
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标操作
- en: 'In addition to the keyboard, the other primary input device for interacting
    with web applications is the computer mouse. First of all, the single-click (also
    known as left-click or simply *click*) is impersonated by the Selenium WebDriver
    API using the method `click()`, which is one of the methods available per `WebElement`
    in Selenium WebDriver. This section shows examples of two typical use cases using
    this feature: web navigation and interaction with checkboxes and radio buttons
    in web forms.'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 除了键盘外，与Web应用程序交互的另一个主要输入设备是计算机鼠标。首先，单击（也称为左键单击或简称为*单击*）通过Selenium WebDriver
    API使用`click()`方法来模拟，这是Selenium WebDriver中每个`WebElement`可用的方法之一。本节展示了使用此功能的两种典型用例：网页导航和与Web表单中的复选框和单选按钮的交互。
- en: Other common mouse actions are right-clicking (also known as *context-click*),
    double-clicking, cursor movement, drag and drop, or mouseover. Selenium WebDriver
    allows impersonating these actions using a helper class called `Actions`. See
    the next section for further details. Finally, scrolling is possible in WebDriver
    by executing JavaScript. I explain this feature in [“Executing JavaScript”](ch04.html#js).
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver还允许使用称为`Actions`的辅助类来模拟其他常见的鼠标操作，如右键单击（也称为*上下文单击*）、双击、光标移动、拖放或悬停。最后，通过执行JavaScript，可以在WebDriver中实现滚动。我将在[“执行JavaScript”](ch04.html#js)中详细解释这一功能。
- en: Web Navigation
  id: totrans-611
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页导航
- en: '[Example 3-20](#basic-navigation) shows a test implementing automated web navigation
    with Selenium WebDriver. This test locates links using XPath and clicks on them,
    invoking the method `click()`. In the end, it reads the text content of the web
    page `body` and verifies it contains an expected string.'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-20](#basic-navigation)展示了使用Selenium WebDriver实现自动化网页导航的测试。该测试使用XPath定位链接并点击它们，调用`click()`方法。最后，它读取Web页面`body`的文本内容，并验证其包含预期字符串。'
- en: Example 3-20\. Test navigating by clicking on links
  id: totrans-613
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-20\. 通过点击链接进行导航测试
- en: '[PRE109]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Checkboxes and Radio Buttons
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复选框和单选按钮
- en: '[Example 3-21](#checkbox-radio) shows another basic use of the `click()` method
    for manipulating checkboxes and radio buttons. To verify the expected state of
    these elements after the click action, we use an assertion based on the result
    of the `isSelected()` method.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-21](#checkbox-radio)展示了使用`click()`方法操作复选框和单选按钮的另一种基本用法。为了验证点击操作后这些元素的预期状态，我们使用基于`isSelected()`方法的断言。'
- en: Example 3-21\. Test interacting with checkboxes and radio buttons
  id: totrans-617
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-21\. 测试与复选框和单选按钮的交互
- en: '[PRE110]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: User Gestures
  id: totrans-619
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户手势
- en: Selenium WebDriver provides the class `Actions`, a powerful asset to automate
    different user actions, both for keyboard and mouse. This class follows the *builder*
    pattern. This way, you can chain several methods (i.e., different actions) and
    perform all of them at the end by calling `build()`. [Table 3-11](#actions-methods)
    summarizes the public methods available in this class. We review these methods
    through examples in the following subsections.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver提供了`Actions`类，这是一个强大的资产，用于自动化不同的用户操作，包括键盘和鼠标。该类遵循*构建者*模式。通过这种方式，您可以链式调用多个方法（即不同的操作），并在最后调用`build()`来执行所有操作。[表 3-11](#actions-methods)总结了该类中可用的公共方法。我们将通过下面的子节示例来回顾这些方法。
- en: Table 3-11\. Actions methods
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-11\. Actions 方法
- en: '| Method | Description |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-623
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE111]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '| Send a single key (it could be a special character using the class `Keys`)
    in the current position (or a given element). The key remains pressed until calling
    to `keyUp()`. |'
  id: totrans-626
  prefs: []
  type: TYPE_TB
  zh: '| 在当前位置（或给定元素）发送单个按键（可以使用`Keys`类来输入特殊字符）。按键保持按下状态，直到调用`keyUp()`为止。 |'
- en: '|'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE112]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '| Release a key previously pressed with `keyDown()`. |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| 释放之前按下的按键`keyDown()`。 |'
- en: '|'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE113]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '| Send a key sequence in the current position (or a given element). This method
    is different from `WebElement#sendKeys(CharSequence...)` in two ways: 1) Modifier
    keys (e.g., `Keys.CONTROL`, `Keys.SHIFT`) are not released explicitly. 2) There
    is no refocus on the element, so `Keys.TAB` should work. |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
  zh: '| 在当前位置（或给定元素）发送按键序列。该方法与`WebElement#sendKeys(CharSequence...)`不同之处在于：1）修饰键（例如`Keys.CONTROL`、`Keys.SHIFT`）不会被显式释放。2）没有重新聚焦到元素，因此`Keys.TAB`应该能够正常工作。
    |'
- en: '|'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE114]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '| Click without releasing the current position (or the middle of a given element).
    |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| 在不释放当前位置（或给定元素的中心）的情况下点击。 |'
- en: '|'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE115]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '| Release the left-click mouse button previously pressed with `clickAndHold()`.
    |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
  zh: '| 释放之前按下的左键鼠标按钮`clickAndHold()`。 |'
- en: '|'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE116]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '| Click on the current position (or a given element). |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
  zh: '| 点击当前位置（或给定元素）。 |'
- en: '|'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE117]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '| Double-click on the current position (or element). |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| 双击当前位置（或元素）。 |'
- en: '|'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE118]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '| Right-click on the current position (or element). |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
  zh: '| 右键单击当前位置（或元素）。 |'
- en: '|'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE119]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '| Move mouse cursor to the middle (or shifted to a given offset) of a given
    element. |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| 将鼠标光标移动到中间（或移动到给定偏移量）的元素上。 |'
- en: '|'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE120]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '| Move the mouse from its current position (`0,0` by default) by the given
    offset. |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
  zh: '| 将鼠标从当前位置（默认为`0,0`）按给定偏移量移动。 |'
- en: '|'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE121]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '| This action consists of three steps: 1) Click and hold at the middle (or
    shifted by a given offset) of the source element location. 2) Move the mouse to
    the target element location. 3) Release the mouse click. |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| 此操作包括三个步骤：1）在源元素位置的中间（或按给定偏移量移动）点击并保持。2）将鼠标移动到目标元素位置。3）释放鼠标点击。 |'
- en: '|'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE122]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '| Perform a pause in the actions chain (in milliseconds or using a Java `Duration`).
    |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| 在操作链中执行暂停（以毫秒或使用Java `Duration`）。 |'
- en: '|'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE123]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '| Generate a composite action containing all previous actions. |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| 生成包含所有先前操作的组合动作。 |'
- en: '|'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE124]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '| Execute the composite action. |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| 执行组合动作。 |'
- en: Right-Click and Double-Click
  id: totrans-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 右键单击和双击
- en: You can find a demo page using three dropdown menus on the practice site (see
    [Figure 3-8](#dropdown-menus)). On this page, the first dropdown menu appears
    when clicking on its button, the second one uses the right-click, and the third
    one requires a double-click. [Example 3-22](#right_double_click) shows a test
    using this page to impersonate user gestures through the WebDriver class `Actions`.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在练习网站上找到一个使用三个下拉菜单的演示页面（参见[Figure 3-8](#dropdown-menus)）。在此页面上，单击其按钮时会出现第一个下拉菜单，第二个使用右键单击，第三个需要双击。[Example 3-22](#right_double_click)展示了使用此页面模拟用户手势的测试，通过WebDriver类的`Actions`。
- en: '![hosw 0308](assets/hosw_0308.png)'
  id: totrans-668
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0308](assets/hosw_0308.png)'
- en: Figure 3-8\. Practice web page with dropdown menus
  id: totrans-669
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-8\. 带有下拉菜单的实践网页
- en: Example 3-22\. Test using context and double-click
  id: totrans-670
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-22\. 使用上下文和双击进行测试
- en: '[PRE125]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO19-1)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO19-1)'
- en: We use `contextClick()` in the middle dropdown menu.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在中间下拉菜单中使用`contextClick()`。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO19-2)'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO19-2)'
- en: We verify the middle menu is correctly displayed.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 确认中间菜单显示正确。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO19-3)'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO19-3)'
- en: We use `doubleClick()` in the right dropdown menu.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧下拉菜单中使用`doubleClick()`。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO19-4)'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO19-4)'
- en: We verify the right menu is correctly displayed.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 确认右侧菜单显示正确。
- en: Mouseover
  id: totrans-680
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标悬停
- en: The second example handling `Actions` uses a sample web page implementing a
    mouseover. This page displays four images. Each one shows a text label below the
    image when the mouse pointer is over. [Example 3-23](#mouse-over-java) contains
    a test that uses this page. [Figure 3-9](#mouse-over) shows this page when the
    mouse is over the first picture.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个使用`Actions`处理的示例展示了一个实现了鼠标悬停的示例网页。该页面显示四个图像，当鼠标指针悬停在图像上时，每个图像下方显示一个文本标签。[Example 3-23](#mouse-over-java)包含一个使用此页面的测试。当鼠标悬停在第一张图片上时，[Figure 3-9](#mouse-over)展示了此页面。
- en: Example 3-23\. Test using mouseover
  id: totrans-682
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-23\. 使用鼠标悬停进行测试
- en: '[PRE126]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO20-1)'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO20-1)'
- en: We iterate a string list to locate the four images of the page.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历一个字符串列表，定位页面上的四个图像。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO20-2)'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO20-2)'
- en: We use XPath to find each `<img>` web element.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用XPath来查找每个`<img>`网页元素。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO20-3)'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO20-3)'
- en: We use `moveToElement()` to move the mouse pointer to the middle of each image.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`moveToElement()`将鼠标指针移动到每个图像的中间。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO20-4)'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO20-4)'
- en: We use relative locators to find the displayed label.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相对定位器来查找显示的标签。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO20-5)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO20-5)'
- en: We use assertions to verify that the text is as expected.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 使用断言来验证文本是否符合预期。
- en: '![hosw 0309](assets/hosw_0309.png)'
  id: totrans-694
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0309](assets/hosw_0309.png)'
- en: Figure 3-9\. Practice web page with mouse-over images
  id: totrans-695
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-9\. 带有鼠标悬停图像的实践网页
- en: Drag and Drop
  id: totrans-696
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拖放
- en: '[Example 3-24](#drag-and-drop-java) illustrates the use of drag and drop. This
    test uses the practice web shown in [Figure 3-10](#drag-and-drop).'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '[Example 3-24](#drag-and-drop-java)演示了拖放的使用。此测试使用图示网页中的实践，显示在[Figure 3-10](#drag-and-drop)中。'
- en: Example 3-24\. Test using drag and drop
  id: totrans-698
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-24\. 使用拖放进行测试
- en: '[PRE127]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO21-1)'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO21-1)'
- en: We locate the *draggable* element.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位*可拖动*元素。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO21-2)'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO21-2)'
- en: We use `dragAndDropBy()` to move this element a fixed number of pixels (`100`)
    four times (right, bottom, left, and up).
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `dragAndDropBy()` 将该元素向右、向下、向左和向上各移动固定数量的像素（`100`）四次。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO21-3)'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO21-3)'
- en: We assert the element position is the same as the beginning.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言元素位置与开始时相同。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO21-4)'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO21-4)'
- en: We find a second element (not draggable this time).
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到第二个元素（这次不可拖动）。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO21-5)'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO21-5)'
- en: We use `dragAndDrop()` to move the draggable element to the second one.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `dragAndDrop()` 将可拖动的元素移动到第二个元素。
- en: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO21-6)'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_webdriver_fundamentals_CO21-6)'
- en: We assert the position of both elements is the same.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言两个元素的位置相同。
- en: '![hosw 0310](assets/hosw_0310.png)'
  id: totrans-712
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0310](assets/hosw_0310.png)'
- en: Figure 3-10\. Practice web page with a draggable element
  id: totrans-713
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-10\. 带有可拖动元素的练习网页
- en: Click and Hold
  id: totrans-714
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点击并保持
- en: The following example shows complex user gestures, including click and hold.
    To that aim, we practice with the web page in [Figure 3-11](#draw-in-canvas).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了复杂的用户手势，包括点击并保持。为此，我们练习使用 [图 3-11](#draw-in-canvas) 中的网页。
- en: '![hosw 0311](assets/hosw_0311.png)'
  id: totrans-716
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0311](assets/hosw_0311.png)'
- en: Figure 3-11\. Practice web page with a drawable canvas
  id: totrans-717
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-11\. 带有可绘制画布的练习网页
- en: This page uses an open source JavaScript library called [Signature Pad](https://github.com/szimek/signature_pad)
    to draw signatures in HTML canvas using the mouse. [Example 3-25](#draw-in-canvas-java)
    shows a test using it.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面使用名为 [Signature Pad](https://github.com/szimek/signature_pad) 的开源 JavaScript
    库，使用鼠标在 HTML 画布上绘制签名。[示例 3-25](#draw-in-canvas-java)展示了使用它的测试。
- en: Example 3-25\. Test drawing a circumference on a canvas
  id: totrans-719
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-25\. 测试在画布上画一个圆
- en: '[PRE128]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO22-1)'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO22-1)'
- en: We locate the canvas by tag name.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过标签名称定位画布。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO22-2)'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO22-2)'
- en: We move the mouse to this element with `moveToElement()` and then add the action
    `clickAndHold()` (for drawing into the canvas) to the actions pipeline.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将鼠标移动到此元素上，然后将动作 `clickAndHold()`（用于在画布上绘制）添加到动作流程中。
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO22-3)'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO22-3)'
- en: We iterate using a fixed number of points, using the equation to find the points
    in a circumference.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用固定数量的点进行迭代，使用等式来找到圆周上的点。
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO22-4)'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO22-4)'
- en: We use the circumference points (`x` and `y`) to move the mouse by offset (`moveByOffset()`).
    Since the click is held from the previous step, the resulting compound action
    will move the mouse while the click button is pressed.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用周长点（`x` 和 `y`）通过偏移量来移动鼠标（`moveByOffset()`）。由于点击是从前一步持续的，所以结果的复合动作将在按住点击按钮的同时移动鼠标。
- en: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO22-5)'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_webdriver_fundamentals_CO22-5)'
- en: We release the click, build the action, and carry out the whole chain. As a
    result, a circumference should appear on the canvas.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 我们释放点击，构建动作并执行整个链。结果，画布上应该出现一个圆。
- en: Copy and Paste
  id: totrans-731
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制和粘贴
- en: 'This last example for user gestures automates a pervasive user action: copy
    and paste using the keyboard. Here, we use the web form available on the practice
    website. [Example 3-26](#copy_paste) shows a test impersonating copy and paste.'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后一个用户手势的示例自动化了一个广泛存在的用户动作：使用键盘进行复制和粘贴。在这里，我们使用可用于练习网站上的网络表单。[示例 3-26](#copy_paste)展示了一个模拟复制和粘贴的测试。
- en: Example 3-26\. Test impersonating copy and paste
  id: totrans-733
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-26\. 测试模仿复制和粘贴
- en: '[PRE129]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO23-1)'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO23-1)'
- en: 'We locate two web elements: an input text and a text area.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定位两个网页元素：一个输入文本和一个文本区域。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO23-2)'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO23-2)'
- en: We use a modifier key for sending the combination Ctrl + C for copying (in Windows
    and Linux) or Cmd + C for copying (in macOS). To this aim, we use the class `SystemUtils`,
    available in the open source library [Apache Commons IO](https://commons.apache.org/proper/commons-io)
    (this dependency is used transitively in the Maven/Gradle project).
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_webdriver_fundamentals_CO23-3)'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 'We implement the actions chain composed of the following steps:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: Send the char sequence `hello world` to the input text.
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the key modifier (Ctrl or Cmd, depending on the operating system). Remember
    that this key remains pressed until we explicitly release it.
  id: totrans-742
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We send the key `a` to the input text. Since the modifier is active, the resulting
    combination is Ctrl + A (or Cmd + A), and as a result, all the text present in
    the input text is selected.
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We send the key `c` to the input text. Again, since the modifier is active,
    the combination is Ctrl + C (or Cmd + C), and the input text is copied to the
    clipboard.
  id: totrans-744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We send the key `v` to the text area. This means sending Ctrl + V (or Cmd +
    V), and the clipboard content is pasted to the text area.
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_webdriver_fundamentals_CO23-4)'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: We assert the content of both elements (input text and text area) is the same
    at the end of the text.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: Waiting Strategies
  id: totrans-748
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications are client-server distributed services in which the clients
    are the web browsers and the web servers are usually remote hosts. The intermediate
    network latency could affect the reliability of a WebDriver test. For instance,
    in the case of high-latency networks or overloaded servers, a slow response might
    negatively affect the expected conditions of WebDriver tests. In addition, modern
    web applications tend to be dynamic and asynchronous. Nowadays, JavaScript allows
    executing nonblocking (i.e., asynchronous) operations using different mechanisms,
    such as callbacks, promises, or async/await. In addition, we can retrieve data
    from other servers asynchronously, for example, using AJAX (Asynchronous JavaScript
    and XML) or REST (REpresentational State Transfer) services.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: All in all, it is of paramount importance to have mechanisms pause and wait
    for certain conditions in our WebDriver tests. For this reason, the Selenium WebDriver
    API provides different waiting assets. The three principal waiting strategies
    are *implicit*, *explicit*, and *fluent* waits. The following subsections explain
    and show examples.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-751
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For waiting in Java, you might think about including `Thread.sleep()` commands
    in your code. On the one hand, it is a simple solution, but on the other hand,
    it is considered a *bad smell* (i.e., a weak sign) that could lead to unreliable
    tests (since the delay conditions can change). As a general rule, I strongly discourage
    you from using it. Instead, consider using the aforementioned wait strategies.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: Implicit Wait
  id: totrans-753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first waiting strategy provided by Selenium WebDriver is called *implicit*.
    This mechanism allows specifying an amount of time before throwing an exception
    when finding an element. By default, this wait has a value of zero seconds (i.e.,
    it does not wait at all). But when we define an implicit wait value, Selenium
    WebDriver polls the DOM during the implicit wait value when trying to find an
    element. The poll time is specific to the driver implementation and is frequently
    less than five hundred ms. If the element is present in the elapsed time, the
    script continues. Otherwise, it throws an exception.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver提供的第一个等待策略称为*隐式*。此机制允许在查找元素时指定等待时间。默认情况下，此等待时间为零秒（即根本不等待）。但是当我们定义了隐式等待值时，Selenium
    WebDriver会在尝试查找元素时轮询DOM，等待指定的时间。轮询时间特定于驱动程序的实现，并且通常少于500毫秒。如果元素在经过的时间内出现，则脚本继续执行。否则，它会抛出异常。
- en: '[Example 3-27](#implicit_wait_test) illustrates this strategy. This test uses
    a practice page (see [Figure 3-12](#loading-page)) that dynamically loads several
    images into the DOM. Since these images are not available just before the page
    is loaded, we need to wait for these images to be available.'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-27](#implicit_wait_test)展示了这种策略。此测试使用一个练习页面（参见[图 3-12](#loading-page)），动态加载几张图片到DOM中。由于这些图片在页面加载之前不可用，我们需要等待这些图片可用。'
- en: '![hosw 0312](assets/hosw_0312.png)'
  id: totrans-756
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0312](assets/hosw_0312.png)'
- en: Figure 3-12\. Practice web page loading images
  id: totrans-757
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-12\. 练习网页加载图片
- en: Example 3-27\. Test using an implicit wait in the “loading images” page
  id: totrans-758
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-27\. 在“加载图片”页面使用隐式等待的测试
- en: '[PRE130]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO24-1)'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO24-1)'
- en: Before interacting with the elements, we specify an implicit wait strategy.
    In this case, we set up a timeout of 10 seconds.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 在与元素交互之前，我们指定了一个隐式等待策略。在这种情况下，我们设置了一个10秒的超时时间。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO24-2)'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO24-2)'
- en: In the following calls, we use the Selenium WebDriver API as usual.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的调用中，我们像往常一样使用Selenium WebDriver API。
- en: Tip
  id: totrans-764
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can play with this feature by dropping the implicit wait from the test (step
    1). If you do that, you will notice that the test fails in step 2 due to a `NoSuchElementException`.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试将测试中的隐式等待移除（步骤1）。如果这样做，您会注意到测试由于`NoSuchElementException`在步骤2中失败。
- en: Although supported by the Selenium WebDriver API, implicit waits have different
    inconveniences you need to know. First, an implicit wait only works on finding
    elements. Second, we cannot customize its behavior since its implementation is
    driver-specific. Finally, and since implicit waits are applied globally, checking
    for the absence of web elements usually increases the execution time for the entire
    script. For these reasons, implicit waits are typically considered bad practice
    in most cases, and explicit and fluent waits are preferred instead.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然被Selenium WebDriver API支持，但隐式等待有一些不便之处需要知道。首先，隐式等待仅在查找元素时有效。其次，我们无法定制其行为，因为其实现是特定于驱动程序的。最后，由于隐式等待是全局应用的，通常检查网页元素的缺失会增加整个脚本的执行时间。因此，在大多数情况下，隐式等待通常被认为是不良实践，推荐使用显式和流畅等待代替。
- en: Explicit Wait
  id: totrans-767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式等待
- en: The second waiting strategy, called *explicit*, allows pausing the test execution
    a maximum amount of time until a specific condition happens. To use this strategy,
    we need to create an instance of `WebDriverWait`, using the `WebDriver` object
    as the first constructor argument, and an instance of `Duration` as the second
    argument (to specify the timeout).
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种等待策略称为*显式*，允许在特定条件发生之前最多暂停测试执行的一定时间。为了使用这种策略，我们需要创建一个`WebDriverWait`的实例，使用`WebDriver`对象作为第一个构造器参数，并使用`Duration`的实例作为第二个参数（用于指定超时时间）。
- en: Selenium WebDriver provides a comprehensive set of expected conditions using
    the `ExpectedConditions` class. These conditions are very readable, and it does
    not require further explanation to understand their purpose. I recommend you use
    an autocomplete feature in your favorite IDE to discover all the possibilities.
    For example, [Figure 3-13](#expected-conditions-eclipse) shows this list in Eclipse.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver提供了一个全面的预期条件集合，使用`ExpectedConditions`类。这些条件非常易读，无需进一步解释即可理解其目的。我建议您在喜爱的IDE中使用自动完成功能来发现所有可能性。例如，[图 3-13](#expected-conditions-eclipse)展示了Eclipse中这个列表。
- en: '![hosw 0313](assets/hosw_0313.png)'
  id: totrans-770
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0313](assets/hosw_0313.png)'
- en: Figure 3-13\. Autocomplete in Eclipse for the ExpectedConditions class
  id: totrans-771
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-13\. Eclipse中的ExpectedConditions类的自动完成
- en: '[Example 3-28](#explicit_wait) shows a test using an explicit wait. In the
    example, we use the `presenceofElementLocated` condition to wait until one of
    the images is available on the practice web page.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-28](#explicit_wait) 展示了使用显式等待的测试。在这个示例中，我们使用`presenceofElementLocated`条件来等待直到练习网页上的一个图像可用。'
- en: Example 3-28\. Test using an explicit wait in the “loading images” page
  id: totrans-773
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-28\. 在“加载图像”页面使用显式等待进行测试
- en: '[PRE131]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO25-1)'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO25-1)'
- en: We create the `wait` instance. In this case, the selected timeout is 10 seconds.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建`wait`实例。在本例中，选择的超时时间为 10 秒。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO25-2)'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO25-2)'
- en: We explicitly wait for a given condition (in this case, the presence of a given
    element) by invoking the `until()` method in the `WebDriverWait` object. To achieve
    a more readable statement, you can also statically import this expected condition
    (`presenceOfElementLocated`). In this book, I decided to keep the class name (`ExpectedConditions`)
    in these conditions to ease the autocomplete feature in IDEs as described before.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在`WebDriverWait`对象中调用`until()`方法显式等待给定条件的出现（在本例中是特定元素的存在）。为了使语句更易读，您还可以静态导入这个预期条件（`presenceOfElementLocated`）。在本书中，我决定保留这些条件中的类名（`ExpectedConditions`），以便在IDE中使用自动完成功能时更容易理解，如前面所述。
- en: '[Example 3-29](#explicit_wait_2) shows another test using explicit waits. This
    test uses another practice web page called “slow calculator,” which contains a
    GUI of a basic calculator, tuned to wait a configurable time to get the result
    of basic arithmetic operations (by default, five seconds). [Figure 3-14](#slow-calculator)
    shows a screenshot of this page.'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 3-29](#explicit_wait_2) 展示了另一个使用显式等待的测试。这个测试使用了另一个名为“慢速计算器”的练习网页，其中包含一个基本计算器的
    GUI，调整为等待可配置时间以获取基本算术运算的结果（默认情况下为五秒）。[图 3-14](#slow-calculator) 展示了此页面的屏幕截图。'
- en: Example 3-29\. Test using an explicit wait in the “slow calculator” page
  id: totrans-780
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-29\. 在“慢速计算器”页面使用显式等待进行测试
- en: '[PRE132]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO26-1)'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO26-1)'
- en: We use XPath locators to click the buttons corresponding to operation 1 + 3.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 XPath 定位器来点击对应于操作 1 + 3 的按钮。
- en: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO26-2)'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdriver_fundamentals_CO26-2)'
- en: Since the test should wait until the result is ready, we explicitly wait for
    that. In this case, the condition is the text of the element with a class name
    `screen` is equal to 4.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试应该等到结果准备就绪，我们显式等待这一点。在这种情况下，条件是具有类名`screen`的元素的文本等于 4。
- en: '![hosw 0314](assets/hosw_0314.png)'
  id: totrans-786
  prefs: []
  type: TYPE_IMG
  zh: '![hosw 0314](assets/hosw_0314.png)'
- en: Figure 3-14\. Practice web page with the “slow calculator” demo
  id: totrans-787
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-14\. “慢速计算器”演示的实践网页
- en: Fluent Wait
  id: totrans-788
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流畅等待
- en: The last strategy is a *fluent* wait. This mechanism is a generalization of
    explicit waits. In other words, we use fluent waits for pausing the test until
    certain conditions, but in addition, fluent waits provide fine-grained configuration
    capabilities. [Table 3-12](#fluentwait-methods) summarizes the methods available
    in `FluentWait`. As its name suggests, this class provides a fluent API, and therefore,
    we can chain several invocations in the same line. [Example 3-30](#fluent_wait)
    shows a test using fluent wait.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种策略是*流畅*等待。这种机制是显式等待的一种泛化。换句话说，我们使用流畅等待来暂停测试，直到满足某些条件，而且流畅等待还提供了精细的配置能力。[表 3-12](#fluentwait-methods)
    总结了`FluentWait`中可用的方法。顾名思义，这个类提供了流畅的 API，因此我们可以在同一行中链式调用多个调用。[示例 3-30](#fluent_wait)
    展示了使用流畅等待的测试。
- en: Table 3-12\. Fluent wait methods
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-12\. 流畅等待方法
- en: '| Method | Description |'
  id: totrans-791
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-792
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE133]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '| Timeout using Java `Duration` |'
  id: totrans-795
  prefs: []
  type: TYPE_TB
  zh: '| 使用 Java `Duration` 设置超时 |'
- en: '|'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE134]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '| How often the condition is evaluated (five hundred ms by default) |'
  id: totrans-798
  prefs: []
  type: TYPE_TB
  zh: '| 条件评估频率（默认为五百毫秒） |'
- en: '|'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE135]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '| Custom error message |'
  id: totrans-801
  prefs: []
  type: TYPE_TB
  zh: '| 自定义错误消息 |'
- en: '|'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE136]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '| Ignore specific exceptions while waiting for a condition |'
  id: totrans-804
  prefs: []
  type: TYPE_TB
  zh: '| 在等待条件时忽略特定异常 |'
- en: '|'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE137]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '| Expected condition |'
  id: totrans-807
  prefs: []
  type: TYPE_TB
  zh: '| 预期条件 |'
- en: Example 3-30\. Test using a fluent wait
  id: totrans-808
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 3-30\. 使用流畅等待进行测试
- en: '[PRE138]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO27-1)'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdriver_fundamentals_CO27-1)'
- en: As you can see, this test is very similar to [Example 3-28](#explicit_wait),
    although using a `FluentWait` instance, we can specify additional characteristics.
    In this case, we change the poll time to one second.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个测试与[示例 3-28](#explicit_wait)非常相似，但使用`FluentWait`实例，我们可以指定额外的特性。在这种情况下，我们将轮询时间更改为一秒。
- en: Tip
  id: totrans-812
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: The class `WebDriverWait` (presented in the previous subsection) extends the
    generic class `FluentWait`. Thus, you can use all the methods shown in [Table 3-12](#fluentwait-methods)
    for explicit waits too.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriverWait`类（在上一小节中介绍）扩展了通用类`FluentWait`。因此，你可以在显式等待中使用 [Table 3-12](#fluentwait-methods)
    中展示的所有方法。'
- en: Summary and Outlook
  id: totrans-814
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述与展望
- en: 'This chapter presented the foundations of the Selenium WebDriver API. First,
    you learned how to create and shut down `WebDriver` instances. These objects represent
    a browser controlled with Selenium WebDriver. This way, we use an instance of
    `ChromeDriver` for Chrome, `FirefoxDriver` for Firefox, etc. Second, you looked
    at `Web​Ele⁠ment`, a class representing different web page elements (e.g., links,
    images, form fields, etc.). Selenium WebDriver provides several strategies to
    locate web elements: by HTML attribute (id, name, or class), tag name, link text
    (complete or partial), CSS selector, and XPath. We also looked at a brand-new
    strategy of Selenium WebDriver 4 called relative locators. Then, we covered user
    actions’ impersonation, using the keyboard and the mouse. You can use these actions
    from simple actions (e.g., clicking a link, filling a text input, etc.) to complex
    user gestures (e.g., drag and drop, click and hover, etc.). Finally, we examined
    the ability to wait in Selenium WebDriver tests. This feature is critical due
    to the current distributed, dynamic, and asynchronous nature of web applications.
    There are three main wait strategies in Selenium WebDriver: implicit (specify
    a general timeout to wait for elements), explicit (pause test execution until
    a given condition), and fluent (extension of an explicit wait with some fine-grained
    setup).'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Selenium WebDriver API 的基础知识。首先，你学习了如何创建和关闭`WebDriver`实例。这些对象代表了通过 Selenium
    WebDriver 控制的浏览器。因此，我们使用`ChromeDriver`实例来操作Chrome浏览器，`FirefoxDriver`实例来操作Firefox浏览器，依此类推。其次，你学习了`WebElement`，这是一个代表不同网页元素（如链接、图像、表单字段等）的类。Selenium
    WebDriver 提供了多种定位网页元素的策略：通过HTML属性（id、name或class）、标签名、链接文本（完整或部分）、CSS选择器和XPath。我们还探讨了
    Selenium WebDriver 4 的全新定位策略，称为相对定位器。然后，我们涵盖了模拟用户操作，包括键盘和鼠标的使用。你可以使用这些操作进行简单的动作（如点击链接、填写文本输入等）或复杂的用户手势（如拖放、点击悬停等）。最后，我们研究了在
    Selenium WebDriver 测试中等待的能力。由于当前网络应用的分布式、动态和异步特性，这一功能至关重要。在 Selenium WebDriver
    中有三种主要的等待策略：隐式等待（指定等待元素的一般超时时间）、显式等待（暂停测试执行直到满足给定条件）、以及流畅等待（显式等待的扩展，具有更精细的设置）。
- en: The next chapter continues digging into the Selenium WebDriver API. In particular,
    [Chapter 4](ch04.html#ch04) reviews those interoperable features in different
    browsers (Chrome, Edge, Firefox, etc.). Among these features, you will discover
    how to execute JavaScript, specify event listeners, configure timeouts for page
    and script loading, manage the browser history, make screenshots, manipulate cookies,
    manipulate dropdown lists (i.e., selects and data lists), handle window targets
    (i.e., tabs, frames, and iframes) and dialog boxes (i.e., alerts, prompts, confirmation,
    and modal pop-ups), use web storage, and understand the WebDriver exceptions.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将继续深入探讨 Selenium WebDriver API。特别是，[第四章](ch04.html#ch04) 将回顾在不同浏览器（Chrome、Edge、Firefox等）中的互操作特性。在这些特性中，你将了解如何执行
    JavaScript、指定事件监听器、配置页面和脚本加载的超时时间、管理浏览器历史、生成屏幕截图、操作 cookies、操作下拉列表（即 selects 和
    data lists）、处理窗口目标（即标签、框架和 iframe）和对话框（即警报、提示、确认和模态弹出）、使用 Web 存储，以及理解 WebDriver
    异常。
