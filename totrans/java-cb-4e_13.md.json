["```java\npublic class Listen {\n    /** The TCP port for the service. */\n    public static final short PORT = 9999;\n\n    public static void main(String[] argv) throws IOException {\n        ServerSocket sock;\n        Socket  clientSock;\n        try {\n            sock = new ServerSocket(PORT);\n            while ((clientSock = sock.accept()) != null) {\n\n                // Process it, usually on a separate thread\n                // to avoid blocking the accept() call.\n                process(clientSock);\n            }\n\n        } catch (IOException e) {\n            System.err.println(e);\n        }\n    }\n\n    /** This would do something with one client. */\n    static void process(Socket s) throws IOException {\n        System.out.println(\"Accept from client \" + s.getInetAddress());\n        // The conversation would be here.\n        s.close();\n    }\n}\n```", "```java\npublic class ListenInside {\n    /** The TCP port for the service. */\n    public static final short PORT = 9999;\n    /** The name of the network interface. */\n    public static final String INSIDE_HOST = \"acmewidgets-inside\";\n    /** The number of clients allowed to queue */\n    public static final int BACKLOG = 10;\n\n    public static void main(String[] argv) throws IOException {\n        ServerSocket sock;\n        Socket  clientSock;\n        try {\n            sock = new ServerSocket(PORT, BACKLOG,\n                InetAddress.getByName(INSIDE_HOST));\n            while ((clientSock = sock.accept()) != null) {\n\n                // Process it.\n                process(clientSock);\n            }\n\n        } catch (IOException e) {\n            System.err.println(e);\n        }\n    }\n\n    /** Hold server's conversation with one client. */\n    static void process(Socket s) throws IOException {\n        System.out.println(\"Connected from  \" + INSIDE_HOST +\n            \": \" + s.getInetAddress(  ));\n        // The conversation would be here.\n        s.close();\n    }\n}\n```", "```java\npublic class NetworkInterfaceDemo {\n    public static void main(String[] a) throws IOException {\n        Enumeration<NetworkInterface> list =\n            NetworkInterface.getNetworkInterfaces();\n        while (list.hasMoreElements()) {\n            // Get one NetworkInterface\n            NetworkInterface iface = list.nextElement();\n            // Print its name\n            System.out.println(iface.getDisplayName());\n            Enumeration<InetAddress> addrs = iface.getInetAddresses();\n            // And its address(es)\n            while (addrs.hasMoreElements()) {\n                InetAddress addr = addrs.nextElement();\n                System.out.println(addr);\n            }\n\n        }\n        // Try to get the Interface for a given local (this machine's) address\n        InetAddress destAddr = InetAddress.getByName(\"laptop\");\n        try {\n            NetworkInterface dest = NetworkInterface.getByInetAddress(destAddr);\n            System.out.println(\"Address for \" + destAddr + \" is \" + dest);\n        } catch (SocketException ex) {\n            System.err.println(\"Couldn't get address for \" + destAddr);\n        }\n    }\n}\n```", "```java\npublic class EchoServer {\n    /** Our server-side rendezvous socket */\n    protected ServerSocket sock;\n    /** The port number to use by default */\n    public final static int ECHOPORT = 7;\n    /** Flag to control debugging */\n    protected boolean debug = true;\n\n    /** main: construct and run */\n    public static void main(String[] args) {\n        int p = ECHOPORT;\n        if (args.length == 1) {\n            try {\n                p = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                System.err.println(\"Usage: EchoServer [port#]\");\n                System.exit(1);\n            }\n        }\n        new EchoServer(p).handle();\n    }\n\n    /** Construct an EchoServer on the given port number */\n    public EchoServer(int port) {\n        try {\n            sock = new ServerSocket(port);\n        } catch (IOException e) {\n            System.err.println(\"I/O error in setup\");\n            System.err.println(e);\n            System.exit(1);\n        }\n    }\n\n    /** This handles the connections */\n    protected void handle() {\n        Socket ios = null;\n        while (true) {\n            try {\n                System.out.println(\"Waiting for client...\");\n                ios = sock.accept();\n                System.err.println(\"Accepted from \" +\n                    ios.getInetAddress().getHostName());\n                try (BufferedReader is = new BufferedReader(\n                            new InputStreamReader(ios.getInputStream(), \"8859_1\"));\n                        PrintWriter os = new PrintWriter(\n                            new OutputStreamWriter(ios.getOutputStream(), \"8859_1\"),\n                            true);) {\n                    String echoLine;\n                    while ((echoLine = is.readLine()) != null) {\n                        System.err.println(\"Read \" + echoLine);\n                        os.print(echoLine + \"\\r\\n\");\n                        os.flush();\n                        System.err.println(\"Wrote \" + echoLine);\n                    }\n                    System.err.println(\"All done!\");\n                }\n            } catch (IOException e) {\n                System.err.println(e);\n            }\n        }\n        /* NOTREACHED */\n    }\n}\n```", "```java\nC:\\javasrc\\network>java network.DaytimeBinary\nRemote time is 3161316799\nBASE_DIFF is 2208988800\nTime diff == 952284799\nTime on localhost is Sun Mar 08 19:33:19 GMT 2014\n\nC:\\javasrc\\network>time/t\nCurrent time is  7:33:23.84p\n\nC:\\javasrc\\network>date/t\nCurrent date is Sun 03-08-2014\n\nC:\\javasrc\\network>\n```", "```java\npublic class DaytimeServer {\n    /** Our server-side rendezvous socket */\n    ServerSocket sock;\n    /** The port number to use by default */\n    public final static int PORT = 37;\n\n    /** main: construct and run */\n    public static void main(String[] argv) {\n        new DaytimeServer(PORT).runService();\n    }\n\n    /** Construct a DaytimeServer on the given port number */\n    public DaytimeServer(int port) {\n        try {\n            sock = new ServerSocket(port);\n        } catch (IOException e) {\n            System.err.println(\"I/O error in setup\\n\" + e);\n            System.exit(1);\n        }\n    }\n\n    /** This handles the connections */\n    protected void runService() {\n        Socket ios = null;\n        DataOutputStream os = null;\n        while (true) {\n            try {\n                System.out.println(\"Waiting for connection on port \" + PORT);\n                ios = sock.accept();\n                System.err.println(\"Accepted from \" +\n                    ios.getInetAddress().getHostName());\n                os = new DataOutputStream(ios.getOutputStream());\n                long time = System.currentTimeMillis();\n\n                time /= 1000;    // Daytime Protocol is in seconds\n\n                // Convert to Java time base.\n                time += RDateClient.BASE_DIFF;\n\n                // Write it, truncating cast to int since it is using\n                // the Internet Daytime protocol which uses 4 bytes.\n                // This will fail in the year 2038, along with all\n                // 32-bit timekeeping systems based from 1970.\n                // Remember, you read about the Y2038 crisis here first!\n                os.writeInt((int)time);\n                os.close();\n            } catch (IOException e) {\n                System.err.println(e);\n            }\n        }\n    }\n}\n```", "```java\npublic class DaytimeObjectServer {\n    /** The TCP port for the object time service. */\n    public static final short TIME_PORT = 1951;\n\n    public static void main(String[] argv) {\n        ServerSocket sock;\n        Socket  clientSock;\n        try {\n            sock = new ServerSocket(TIME_PORT);\n            while ((clientSock = sock.accept()) != null) {\n                System.out.println(\"Accept from \" +\n                    clientSock.getInetAddress());\n                ObjectOutputStream os = new ObjectOutputStream(\n                    clientSock.getOutputStream());\n\n                // Construct and write the Object\n                os.writeObject(LocalDateTime.now());\n\n                os.close();\n            }\n\n        } catch (IOException e) {\n            System.err.println(e);\n        }\n    }\n}\n```", "```java\n/** Run the main loop of the Server. */\nvoid runServer( ) {\n    while (true) {\n        try {\n            Socket clntSock = sock.accept( );\n            new Handler(clntSock).start( );\n        } catch(IOException e) {\n            System.err.println(e);\n        }\n    }\n}\n```", "```java\nThread t = new Thread(new Handler(clntSock));\nt.start( );\n```", "```java\n$ java network.EchoServerThreaded\nEchoServerThreaded ready for connections.\nSocket starting: Socket[addr=localhost/127.0.0.1,port=2117,localport=7]\nSocket starting: Socket[addr=darian/192.168.1.50,port=13386,localport=7]\nSocket starting: Socket[addr=darian/192.168.1.50,port=22162,localport=7]\nSocket ENDED: Socket[addr=darian/192.168.1.50,port=22162,localport=7]\nSocket ENDED: Socket[addr=darian/192.168.1.50,port=13386,localport=7]\nSocket ENDED: Socket[addr=localhost/127.0.0.1,port=2117,localport=7]\n```", "```java\npublic class EchoServerThreaded {\n\n    public static final int ECHOPORT = 7;\n\n    public static void main(String[] av) {\n        new EchoServerThreaded().runServer();\n    }\n\n    public void runServer() {\n        ServerSocket sock;\n        Socket clientSocket;\n\n        try {\n            sock = new ServerSocket(ECHOPORT);\n\n            System.out.println(\"EchoServerThreaded ready for connections.\");\n\n            /* Wait for a connection */\n            while (true) {\n                clientSocket = sock.accept();\n                /* Create a thread to do the communication, and start it */\n                new Handler(clientSocket).start();\n            }\n        } catch (IOException e) {\n            /* Crash the server if IO fails. Something bad has happened */\n            System.err.println(\"Could not accept \" + e);\n            System.exit(1);\n        }\n    }\n\n    /** A Thread subclass to handle one client conversation. */\n    class Handler extends Thread {\n        Socket sock;\n\n        Handler(Socket s) {\n            sock = s;\n        }\n\n        public void run() {\n            System.out.println(\"Socket starting: \" + sock);\n            try (BufferedReader is = new BufferedReader(\n                        new InputStreamReader(sock.getInputStream()));\n                    PrintStream os = new PrintStream(\n                        sock.getOutputStream(), true);) {\n                String line;\n                while ((line = is.readLine()) != null) {\n                    os.print(line + \"\\r\\n\");\n                    os.flush();\n                }\n                sock.close();\n            } catch (IOException e) {\n                System.out.println(\"IO Error on socket \" + e);\n                return;\n            }\n            System.out.println(\"Socket ENDED: \" + sock);\n        }\n    }\n}\n```", "```java\npublic class EchoServerThreaded2 {\n\n    public static final int ECHOPORT = 7;\n\n    public static final int NUM_THREADS = 4;\n\n    /** Main method, to start the servers. */\n    public static void main(String[] av) {\n        new EchoServerThreaded2(ECHOPORT, NUM_THREADS);\n    }\n\n    /** Constructor */\n    public EchoServerThreaded2(int port, int numThreads) {\n        ServerSocket servSock;\n\n        try {\n            servSock = new ServerSocket(port);\n\n        } catch (IOException e) {\n            /* Crash the server if IO fails. Something bad has happened */\n            throw new RuntimeException(\"Could not create ServerSocket \", e);\n        }\n\n        // Create a series of threads and start them.\n        for (int i = 0; i < numThreads; i++) {\n            new Handler(servSock, i).start();\n        }\n    }\n\n    /** A Thread subclass to handle one client conversation. */\n    class Handler extends Thread {\n        ServerSocket servSock;\n        int threadNumber;\n\n        /** Construct a Handler. */\n        Handler(ServerSocket s, int i) {\n            servSock = s;\n            threadNumber = i;\n            setName(\"Thread \" + threadNumber);\n        }\n\n        public void run() {\n            /*\n * Wait for a connection. Synchronized on the ServerSocket while\n * calling its accept() method.\n */\n            while (true) {\n                try {\n                    System.out.println(getName() + \" waiting\");\n\n                    Socket clientSocket;\n                    // Wait here for the next connection.\n                    synchronized (servSock) {\n                        clientSocket = servSock.accept();\n                    }\n                    System.out.println(\n                        getName() + \" starting, IP=\" +\n                        clientSocket.getInetAddress());\n                    try (BufferedReader is = new BufferedReader(\n                            new InputStreamReader(clientSocket.getInputStream()));\n                            PrintStream os = new PrintStream(\n                                clientSocket.getOutputStream(), true);) {\n                        String line;\n                        while ((line = is.readLine()) != null) {\n                            os.print(line + \"\\r\\n\");\n                            os.flush();\n                        }\n                        System.out.println(getName() + \" ENDED \");\n                        clientSocket.close();\n                    }\n                } catch (IOException ex) {\n                    System.out.println(getName() + \": IO Error on socket \" + ex);\n                    return;\n                }\n            }\n        }\n    }\n}\n```", "```java\npublic class WebServer0 {\n    public static final int HTTP = 80;\n    public static final String CRLF = \"\\r\\n\";\n    ServerSocket s;\n    /** A link to the source of this program, used in error message */\n    static final String VIEW_SOURCE_URL =\n    \"https://github.com/IanDarwin/javasrc/tree/master/main/src/main/\n java/network\";\n\n    /**\n * Main method, just creates a server and call its runServer().\n */\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"DarwinSys JavaWeb Server 0.0 starting...\");\n        WebServer0 w = new WebServer0();\n        int port = HTTP;\n        if (args.length == 1) {\n            port = Integer.parseInt(args[0]);\n            }\n        w.runServer(port);        // never returns!!\n    }\n\n    /** Get the actual ServerSocket; deferred until after Constructor\n * so subclass can mess with ServerSocketFactory (e.g., to do SSL).\n * @param port The port number to listen on\n */\n    protected ServerSocket getServerSocket(int port) throws Exception {\n        return new ServerSocket(port);\n    }\n\n    /** RunServer accepts connections and passes each one to handler. */\n    public void runServer(int port) throws Exception {\n        s = getServerSocket(port);\n        while (true) {\n            try {\n                Socket us = s.accept();\n                Handler(us);\n            } catch(IOException e) {\n                System.err.println(e);\n                return;\n            }\n\n        }\n    }\n\n    /** Handler() handles one conversation with a Web client.\n * This is the only part of the program that \"knows\" HTTP.\n */\n    public void Handler(Socket s) {\n        BufferedReader is;    // inputStream, from Viewer\n        PrintWriter os;        // outputStream, to Viewer\n        String request;        // what Viewer sends us.\n        try {\n            String from = s.getInetAddress().toString();\n            System.out.println(\"Accepted connection from \" + from);\n            is = new BufferedReader(new InputStreamReader(s.getInputStream()));\n            request = is.readLine();\n            System.out.println(\"Request: \" + request);\n\n            os = new PrintWriter(s.getOutputStream(), true);\n            os.print(\"HTTP/1.0 200 Here is your data\" + CRLF);\n            os.print(\"Content-type: text/html\" + CRLF);\n            os.print(\"Server-name: DarwinSys NULL Java WebServer 0\" + CRLF);\n            String reply1 = \"<html><head>\" +\n                \"<title>Wrong System Reached</title></head>\\n\" +\n                \"<h1>Welcome, \";\n            String reply2 = \", but...</h1>\\n\" +\n                \"<p>You have reached a desktop machine \" +\n                \"that does not run a real Web service.\\n\" +\n                \"<p>Please pick another system!</p>\\n\" +\n                \"<p>Or view <a href=\\\"\" + VIEW_SOURCE_URL + \"\\\">\" +\n                \"the WebServer0 source on github</a>.</p>\\n\" +\n                \"<hr/><em>Java-based WebServer0</em><hr/>\\n\" +\n                \"</html>\\n\";\n            os.print(\"Content-length: \" +\n                (reply1.length() + from.length() + reply2.length()) + CRLF);\n            os.print(CRLF);\n            os.print(reply1 + from + reply2 + CRLF);\n            os.flush();\n            s.close();\n        } catch (IOException e) {\n            System.out.println(\"IOException \" + e);\n        }\n        return;\n    }\n}\n```", "```java\n/**\n * JSSEWebServer - subclass trivial WebServer0 to make it use SSL.\n * N.B. You MUST have set up a server certificate (see the\n * accompanying book text), or you will get the dreaded\n * javax.net.ssl.SSLHandshakeException: no cipher suites in common\n * (because without it JSSE can't use any of its built-in ciphers!).\n */\npublic class JSSEWebServer0 extends WebServer0 {\n\n    public static final int HTTPS = 8443;\n\n    public static void main(String[] args) throws Exception {\n        if (System.getProperty(\"javax.net.ssl.keyStore\") == null) {\n            System.err.println(\n                \"You must pass in a keystore via -D; see the documentation!\");\n            System.exit(1);\n        }\n        System.out.println(\"DarwinSys JSSE Server 0.0 starting...\");\n        JSSEWebServer0 w = new JSSEWebServer0();\n        w.runServer(HTTPS);        // never returns!!\n    }\n\n    /** Get an HTTPS ServerSocket using JSSE.\n * @see WebServer0#getServerSocket(int)\n * @throws ClassNotFoundException the SecurityProvider can't be instantiated.\n */\n    protected ServerSocket getServerSocket(int port) throws Exception {\n\n        SSLServerSocketFactory ssf =\n            (SSLServerSocketFactory)SSLServerSocketFactory.getDefault();\n\n        return ssf.createServerSocket(port);\n    }\n\n}\n```", "```java\njava -Djavax.net.ssl.keyStore=/home/ian/.keystore -Djavax.net.ssl.\nkeyStorePassword=secrit JSSEWebServer0\n```", "```java\nimport javax.ws.rs.ApplicationPath;\nimport javax.ws.rs.core.Application;\n\n@ApplicationPath(\"\")\npublic class RestApplication extends Application {\n\t// Empty\n}\n```", "```java\n@Path(\"\")\n@ApplicationScoped\npublic class RestService {\n\n    public RestService() {\n        System.out.println(\"RestService.init()\");\n    }\n\n    @GET @Path(\"/timestamp\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String getDate() {\n        return LocalDateTime.now().toString();\n    }\n\n    /** A Hello message method\n */\n    @GET @Path(\"/greeting/{userName}\")\n    @Produces(\"text/html\")\n    public String doGreeting(@PathParam(\"userName\")String userName) {\n        System.out.println(\"RestService.greeting()\");\n        if (userName == null || userName.trim().length() <= 3) {\n            return \"Missing or too-short username\";\n        }\n        return String.format(\n            \"<h1>Welcome %s</h1><p>%s, We are glad to see you back!\",\n            userName, userName);\n    }\n\n    /** Used to download all items */\n    @GET @Path(\"/names\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public List<String> findTasksForUser() {\n        return List.of(\"Robin\", \"Jedunkat\", \"Lyn\", \"Glen\");\n    }\n}\n```", "```java\n$ telnet localhost 8080 # output cleaned up\nEscape character is '^]'.\nGET /rest/timestamp HTTP/1.0\nConnection: keep-alive\n\nHTTP/1.1 200 OK\nContent-Type: text/plain;charset=UTF-8\n\n2019-10-16T19:54:31.42\n\nGET /rest/greeting/Ian%20Darwin HTTP/1.0\n\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\n\n<h1>Welcome Ian Darwin</h1><p>Ian Darwin, We are glad to see you back!\n\nget /rest/names HTTP/1.0\nAccept: Application/JSON\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\"Robin\",\"Jedunkat\",\"Lyn\",\"Glen\"]\n^] (CTRL/C)\n$\n```", "```java\npublic class Slf4jDemo {\n\n    final static Logger theLogger =\n            LoggerFactory.getLogger(Slf4jDemo.class);\n\n    public static void main(String[] args) {\n\n        Object o = new Object();\n        theLogger.info(\"I created this object: \" + o);\n\n    }\n}\n```", "```java\nlogger.log(\"The value is \" + object + \"; this is not good\");\n```", "```java\nif (logger.isEnabled()) {\n\tlogger.log(\"The value is \" + object + \"; this is not good\");\n}\n```", "```java\npublic class Slf4jDemo2 {\n\n    final static Logger theLogger = LoggerFactory.getLogger(Slf4jDemo2.class);\n\n    public static void main(String[] args) {\n\n        try {\n            Person p = new Person();\n            // populate person's fields here...\n            theLogger.info(\"I created an object {}\", p);\n\n            if (p != null) {    // bogus, just to show logging\n                throw new IllegalArgumentException(\"Just testing\");\n            }\n        } catch (Exception ex) {\n            theLogger.error(\"Caught Exception: \" + ex, ex);\n        }\n    }\n}\n```", "```java\npublic void log(Level level, Object message);\n```", "```java\npublic class Log4JDemo {\n\n    private static Logger myLogger = LogManager.getLogger();\n\n    public static void main(String[] args) {\n\n        Object o = new Object();\n        myLogger.info(\"I created an object: \" + o);\n\n    }\n}\n```", "```java\n# Log4J2 properties file for the logger demo programs.\n# tag::generic[] # Ensure file gets copied for Java Cookbook\n\n# WARNING - log4j2.properties must be on your CLASSPATH,\n# not necessarily in your source directory.\n\n# The configuration file for Version 2 is different from V1!\n\nrootLogger.level = info\nrootLogger.appenderRef.stdout.ref = STDOUT\n\nappender.console.type = Console\nappender.console.name = STDOUT\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %m%n\nappender.console.filter.threshold.type = ThresholdFilter\nappender.console.filter.threshold.level = debug\n```", "```java\n$ java Log4j2Demo\nI created an object: java.lang.Object@477b4cdf\n$\n```", "```java\npublic class Log4JDemo2 {\n\n    private static Logger myLogger = LogManager.getLogger();\n\n    public static void main(String[] args) {\n\n        try {\n            Object o = new Object();\n            myLogger.info(\"I created an object: \" + o);\n            if (o != null) {    // bogus, just to show logging\n                throw new IllegalArgumentException(\"Just testing\");\n            }\n        } catch (Exception ex) {\n            myLogger.error(\"Caught Exception: \" + ex, ex);\n        }\n    }\n}\n```", "```java\n$ java Log4JDemo2\nI created an object: java.lang.Object@477b4cdf\nCaught Exception: java.lang.IllegalArgumentException: Just testing\njava.lang.IllegalArgumentException: Just testing\n\tat logging.Log4JDemo2.main(Log4JDemo2.java:17) [classes/:?]\n$\n```", "```java\nrootLogger.level = fatal\n```", "```java\n# Log4J2 properties file for the NETWORKED logger demo programs.\n# tag::generic[] # Ensure file gets copied for Java Cookbook\n\n# WARNING - log4j2.properties must be on your CLASSPATH,\n# not necessarily in your source directory.\n\n# The configuration file for Version 2 is different from V1!\n\nrootLogger.level = info\nrootLogger.appenderRef.stdout.ref = STDOUT\n\nappender.console.type = Socket\nappender.console.name = STDOUT\nappender.console.host = localhost\nappender.console.port = 6666\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %m%n\nappender.console.filter.threshold.type = ThresholdFilter\nappender.console.filter.threshold.level = debug\n```", "```java\nbuild=../../../../target/classes\nlog4j2_jar=\\\n${HOME}/.m2/repository/org/apache/logging/log4j/log4j-api/2.13.0/log4j-api-2.13.0.jar:\\\n${HOME}/.m2/repository/org/apache/logging/log4j/log4j-core/2.13.0/log4j-core-2.13.0.jar\n\necho \"==> Log4JDemo\"\njava -Dlog4j.configurationFile=log4j2-network.properties \\\n\t-classpath \".:${build}:${log4j2_jar}\" logging.Log4JDemo\n\necho \"==> Log4JDemo2\"\njava -Dlog4j.configurationFile=log4j2-network.properties \\\n\t-classpath \".:${build}:${log4j2_jar}\" logging.Log4JDemo2\n```", "```java\n$ nc -kl 6666\nI created an object: java.lang.Object@37ceb1df\nI created an object: java.lang.Object@37ceb1df\nCaught Exception: java.lang.IllegalArgumentException: Just testing\njava.lang.IllegalArgumentException: Just testing\n\tat logging.Log4JDemo2.main(Log4JDemo2.java:17) [classes/:?]\n^C\n$\n```", "```java\npublic class Log4JLambda {\n\n    private static Logger myLogger = LogManager.getLogger();\n\n    public static void main(String[] args) {\n\n        Person customer = getPerson();\n        myLogger.info( () -> String.format(\n            \"Value %d from Customer %s\", customer.value, customer) );\n\n    }\n```", "```java\nValue 42 from Customer Customer[Robin]\n```", "```java\npublic void log(java.util.logging.LogRecord);\npublic void log(java.util.logging.Level,String);\n// and a variety of overloaded log(  ) methods\npublic void logp(java.util.logging.Level,String,String,String);\npublic void logrb(java.util.logging.Level,String,String,String,String);\n\n// Convenience routines for tracing program flow\npublic void entering(String,String);\npublic void entering(String,String,Object);\npublic void entering(String,String,Object[]);\npublic void exiting(String,String);\npublic void exiting(String,String,Object);\npublic void throwing(String,String,Throwable);\n\n// Convenience routines for log(  ) with a given level\npublic void severe(String);\npublic void warning(String);\npublic void info(String);\npublic void config(String);\npublic void fine(String);\npublic void finer(String);\npublic void finest(String);\n```", "```java\npublic void setLevel(java.util.logging.Level);\npublic java.util.logging.Level getLevel(  );\npublic boolean isLoggable(java.util.logging.Level);\n```", "```java\npublic synchronized void addHandler(java.util.logging.Handler);\npublic synchronized void removeHandler(java.util.logging.Handler);\npublic synchronized java.util.logging.Handler[] getHandlers(  );\n```", "```java\npublic class JulLogDemo {\n    public static void main(String[] args) {\n\n        Logger myLogger = Logger.getLogger(\"com.darwinsys\");\n\n        Object o = new Object();\n        myLogger.info(\"I created an object: \" + o);\n    }\n}\n```", "```java\n$ juldemos\nJan 31, 2020 1:03:27 PM logging.JulLogDemo main\nINFO: I created an object: java.lang.Object@5ca881b5\n$ \n```", "```java\npublic class JulLogDemo2 {\n    public static void main(String[] args) {\n\n        System.setProperty(\"java.util.logging.config.file\",\n            \"logging/logging.properties\");\n\n        Logger logger = Logger.getLogger(\"com.darwinsys\");\n\n        try {\n            Object o = new Object();\n            logger.info(\"I created an object: \" + o);\n            if (o != null) {    // bogus, just to show logging\n                throw new IllegalArgumentException(\"Just testing\");\n            }\n        } catch (Exception t) {\n            // All-in-one call:\n            logger.log(Level.SEVERE, \"Caught Exception\", t);\n            // Alternate: Long form, more control.\n            // LogRecord msg = new LogRecord(Level.SEVERE, \"Caught exception\");\n            // msg.setThrown(t);\n            // logger.log(msg);\n        }\n    }\n}\n```", "```java\n/** Demonstrate how Java 8 Lambdas avoid extraneous object creation\n * @author Ian Darwin\n */\npublic class JulLambdaDemo {\n    public static void main(String[] args) {\n\n        Logger myLogger = Logger.getLogger(\"com.darwinsys.jullambda\");\n\n        Object o = new Helper();\n\n        // If you change the log call from finest to info,\n        // you see both the systrace from the toString,\n        // and the logging output. As it is here,\n        // you don't see either, so the toString() is not called!\n        myLogger.finest(() -> \"I created this object: \" + o);\n    }\n\n    static class Helper {\n        public String toString() {\n            System.out.println(\"JulLambdaDemo.Helper.toString()\");\n            return \"failure!\";\n        }\n    }\n}\n```"]