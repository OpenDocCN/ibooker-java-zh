["```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-health\"\n```", "```java\n./mvnw compile quarkus:dev \ncurl localhost:8080/health/live ![1](Images/1.png)\n\n{\n \"status\": \"UP\", ![2](Images/2.png)\n \"checks\": [ ![3](Images/3.png)\n ] } \n\ncurl localhost:8080/health/ready ![4](Images/4.png)\n\n{\n \"status\": \"UP\", \"checks\": [ ] }\n```", "```java\nquarkus.kafka-streams.health.enabled=false\nquarkus.mongodb.health.enabled=false\nquarkus.neo4j.health.enabled=false\n```", "```java\n@ApplicationScoped ![1](Images/1.png)\n@Liveness ![2](Images/2.png)\npublic class LivenessCheck implements HealthCheck { ![3](Images/3.png)\n\n    @Override\n    public HealthCheckResponse call() {\n        HealthCheckResponseBuilder checkResponseBuilder = HealthCheckResponse\n        .named(\"custom liveness\"); ![4](Images/4.png)\n\n        if(isUpAndRunning()) {\n            return checkResponseBuilder.up().build(); ![5](Images/5.png)\n        } else {\n            return checkResponseBuilder.down()\n                .withData(\"reason\", \"Failed connection\")\n                .build(); ![6](Images/6.png)\n        }\n\n    }\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl localhost:8080/health/live\n\n{\n \"status\": \"UP\",\n \"checks\": [\n {\n \"name\": \"custom liveness\",\n \"status\": \"UP\"\n }\n ]\n}\n```", "```java\n@ApplicationScoped ![1](Images/1.png)\npublic class CustomHealthCheck {\n\n    @Produces ![2](Images/2.png)\n    @Readiness ![3](Images/3.png)\n    public HealthCheck ready() {\n        if (isReady()) {\n            return io.smallrye.health.HealthStatus.up(\"Custom readiness\"); ![4](Images/4.png)\n        } else {\n            return io.smallrye.health.HealthStatus.down(\"Custom readiness\");\n        }\n    }\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl localhost:8080/health/ready\n\n{\n \"checks\": [\n {\n \"name\": \"Custom readiness\",\n \"status\": \"UP\"\n }\n ],\n \"status\": \"UP\"\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-metrics\"\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl localhost:8080/metrics\n\nbase_cpu_processCpuLoad_percent 0.0\nbase_memory_maxHeap_bytes 4.294967296E9\nbase_cpu_systemLoadAverage 2.580078125\nbase_thread_daemon_count 6.0\n...\nvendor_memoryPool_usage_max_bytes{name=\"Compressed Class Space\"} 3336768.0\nvendor_memory_usedNonHeap_bytes 3.9182104E7\n```", "```java\ncurl --header \"Accept:application/json\" localhost:8080/metrics\n\n{\n \"base\": {\n \"cpu.systemLoadAverage\": 4.06201171875,\n \"thread.count\": 20,\n \"classloader.loadedClasses.count\": 4914,\n ...\n },\n \"vendor\": {\n \"memoryPool.usage.max;name=G1 Survivor Space\": 7340032,\n \"memory.freePhysicalSize\": 814391296,\n \"memoryPool.usage.max;name=CodeHeap 'non-profiled nmethods'\": 5773056,\n ...\n }\n}\n```", "```java\n@Counted( ![1](Images/1.png)\n        name = \"number-of-transactions\", ![2](Images/2.png)\n        displayName = \"Transactions\", ![3](Images/3.png)\n        description = \"How many transactions have been processed\" ![4](Images/4.png)\n)\n@POST\n@Consumes(MediaType.APPLICATION_JSON)\npublic Response doTransaction(Transaction transaction) {\n    return Response.ok().build();\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"from\":\"A\", \"to\":\"B\", \"amount\":2000}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/tx\n\ncurl localhost:8080/metrics/application\n\napplication_org_acme_TransactionResource_number_of_transactions_total 1.0\n```", "```java\nprivate long highestTransaction = 0; ![1](Images/1.png)\n\n@POST\n@Consumes(MediaType.APPLICATION_JSON)\npublic Response doTransaction(Transaction transaction) {\n    if (transaction.amount > highestTransaction) { ![2](Images/2.png)\n        highestTransaction = transaction.amount;\n    }\n    return Response.ok().build();\n}\n@Gauge( ![3](Images/3.png)\n        name = \"highest-gross-transaction\", ![4](Images/4.png)\n        description = \"Highest transaction so far.\",\n        unit= MetricUnits.NONE ![5](Images/5.png)\n)\npublic long highestTransaction() {\n    return highestTransaction;\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"from\":\"A\", \"to\":\"B\", \"amount\":2000}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/tx\n\ncurl localhost:8080/metrics/application\n\napplication_org_acme_TransactionResource_highest_gross_transaction 2000.0\n```", "```java\n@Metered( ![1](Images/1.png)\n        name = \"transactions\",\n        unit = MetricUnits.SECONDS, ![2](Images/2.png)\n        description = \"Rate of transactions\"\n)\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"from\":\"A\", \"to\":\"B\", \"amount\":2000}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/tx\n\ncurl localhost:8080/metrics/application\n\napplication_org_acme_TransactionResource_transactions \\\n _rate_per_second  0.09766473618811813\napplication_org_acme_TransactionResource_transactions \\\n _one_min_rate_per_second  0.015991117074135343\napplication_org_acme_TransactionResource_transactions \\\n _five_min_rate_per_second  0.0033057092356765017\napplication_org_acme_TransactionResource_transactions \\\n _fifteen_min_rate_per_second  0.0011080303990206543\n```", "```java\n@Timed( ![1](Images/1.png)\n    name = \"average-transaction\",\n    unit = MetricUnits.SECONDS,\n    description = \"Average duration of transaction\"\n)\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"from\":\"A\", \"to\":\"B\", \"amount\":2000}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/tx\n\ncurl localhost:8080/metrics/application\n\napplication_org_acme_TransactionResource_average_transaction \\\n _rate_per_second 0.7080455375154214\napplication_org_acme_TransactionResource_average_transaction \\\n _one_min_rate_per_second 0.0\napplication_org_acme_TransactionResource_average_transaction \\\n _five_min_rate_per_second 0.0\napplication_org_acme_TransactionResource_average_transaction \\\n _fifteen_min_rate_per_second 0.0\napplication_org_acme_TransactionResource_average_transaction \\\n _min_seconds 1.0693E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _max_seconds 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _mean_seconds 3.0145E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _stddev_seconds 1.9452E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds_count 2.0\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.5\"} 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.75\"} 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.95\"} 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.98\"} 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.99\"} 4.9597E-5\napplication_org_acme_TransactionResource_average_transaction \\\n _seconds{quantile=\"0.999\"} 4.9597E-5\n```", "```java\n@Metric(name = \"transaction-evolution\") ![1](Images/1.png)\nHistogram transactionHistogram;\n\n@POST\n@Consumes(MediaType.APPLICATION_JSON)\npublic Response doTransaction(Transaction transaction) {\n    transactionHistogram.update(transaction.amount); ![2](Images/2.png)\n    return Response.ok().build();\n}\n```", "```java\n./mvnw compile quarkus:dev\n\ncurl -d '{\"from\":\"A\", \"to\":\"B\", \"amount\":2000}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/tx\n\ncurl localhost:8080/metrics/application\n\napplication_org_acme_TransactionResource_transaction_evolution_min 2000.0\napplication_org_acme_TransactionResource_transaction_evolution_max 2000.0\napplication_org_acme_TransactionResource_transaction_evolution_mean 2000.0\napplication_org_acme_TransactionResource_transaction_evolution_stddev 0.0\napplication_org_acme_TransactionResource_transaction_evolution_count 2.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.5\"}  2000.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.75\"}  2000.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.95\"}  2000.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.98\"}  2000.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.99\"}  2000.0\napplication_org_acme_TransactionResource_transaction_evolution \\\n {quantile=\"0.999\"}  2000.0\n```", "```java\ndocker run -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p 5775:5775/udp \\\n -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 \\\n -p 14268:14268 -p 9411:9411 jaegertracing/all-in-one:1.15.1\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-opentracing\"\n```", "```java\nquarkus.jaeger.service-name=shopping-cart ![1](Images/1.png)\nquarkus.jaeger.sampler-type=const ![2](Images/2.png)\nquarkus.jaeger.sampler-param=1 ![3](Images/3.png)\nquarkus.jaeger.endpoint=http://localhost:14268/api/traces ![4](Images/4.png)\n```", "```java\n@Traced(false)\npublic class TransactionResource {}\n```", "```java\n@Inject ![1](Images/1.png)\nTracer tracer;\n@POST\n@Path(\"/add/{customerId}\")\n@Transactional\n@Consumes(MediaType.APPLICATION_JSON)\npublic Response addItem(@PathParam(\"customerId\") String customerId, Item item) {\n\n    if (customerId.startsWith(\"1\")) {\n        tracer.activeSpan().setTag(\"important.customer\", true); ![2](Images/2.png)\n    }\n}\n```", "```java\n<dependency>\n    <groupId>io.opentracing.contrib</groupId>\n    <artifactId>opentracing-jdbc</artifactId>\n</dependency>\n```", "```java\nquarkus.datasource.url=jdbc:tracing:h2:mem:mydb ![1](Images/1.png)\nquarkus.datasource.driver=io.opentracing.contrib.jdbc.TracingDriver ![2](Images/2.png)\nquarkus.datasource.username=sa\nquarkus.datasource.password=\nquarkus.hibernate-orm.database.generation=update\nquarkus.hibernate-orm.log.sql=true\nquarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect ![3](Images/3.png)\n```"]