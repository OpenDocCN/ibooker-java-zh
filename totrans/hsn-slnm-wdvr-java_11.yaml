- en: Chapter 8\. Testing Framework Specifics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the examples presented throughout this book, I have recommended embedding
    the calls to the Selenium WebDriver API in Java methods decorated with the annotation
    `@Test` using different unit testing frameworks: JUnit 4, JUnit 5 (alone or extended
    with Selenium-Jupiter), or TestNG. When executing regular tests, the difference
    in using one or another testing framework is minimal. Nevertheless, each testing
    framework has specific features for different use cases. This chapter summarizes
    some of these features to implement Selenium WebDriver tests. As usual, you can
    find the source code for this chapter in the examples repository for this book.
    You can use these examples to compare and choose the most convenient unit testing
    framework for your specific needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameterized Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A widespread feature commonly supported by unit testing frameworks is creating
    *parameterized tests*. This feature enables the execution of tests multiple times
    using different parameters. Although we can implement parameterized tests both
    with JUnit (4 and 5) and TestNG, there are significant differences among each
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to use a *test runner* called `Parameterized` for implementing parameterized
    tests in JUnit 4\. A test runner in JUnit 4 is a Java class responsible for running
    tests. We decorate a Java class using the JUnit 4 annotation `@RunWith` to specify
    a test runner. Then, we need to use the JUnit 4 annotation `@Parameters` to decorate
    the method that provides the test parameters. There are two ways to inject these
    parameters into the test class: in the test class constructor or as class attributes
    decorated with the annotation `@Parameter`. [Example 8-1](#junit4-parameterized)
    shows a test case where the test parameters are injected using the second technique.
    This example executes the same test for login into the practice site using different
    credentials (username and password). As a result, the message provided by the
    web page is different (login successful or invalid credentials).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-1\. Parameterized test using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the `Parameterized` test runner for this Java class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We inject three test parameters as class attributes: username (index `0`),
    password (index `1`), and expected text (index `2`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify the test parameter in a method that returns a collection of generic
    parameters (`Collection<Object[]>`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We return a collection of the three `String` sets to be used as a test parameter.
    The values of each entry will be injected using the previously declared three
    parameters (username, password, and expected text).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: In the test logic (that will be executed twice, once per data entry), we try
    to log in to the practice site using the username and password provided as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_testing_framework_specifics_CO1-6)'
  prefs: []
  type: TYPE_NORMAL
- en: We assert the expected data (which is different depending on the credentials
    provided as a parameter) is available in the page body.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One of the most significant limitations of JUnit 4 is that we can use only one
    test runner per Java class. In other words, test runners are not composable in
    JUnit 4\. To overcome this restriction (among others), the JUnit team released
    JUnit 5 in 2017.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the annotation `@DataProvider` to decorate the method that provides
    the test parameters in a parameterized TestNG test. As you can see in [Example 8-2](#testng-parameterized),
    this method returns a double array of general Java objects. The annotation `@Data​Pro⁠vider`
    should provide a name as an attribute. This name is later used in the `@Test`
    method to specify the data provider. Finally, the parameters are injected into
    the test method.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-2\. Parameterized test using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We create a method used as a data provider.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify this test will use the previous data provider that we call `loginData`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: A notable difference between JUnit 4 and TestNG regarding parameterized tests
    is that the parameters (username, password, and expected test in this example)
    are injected in TestNG as test method parameters.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jupiter (the programming and extension model of JUnit 5) provides a potent
    mechanism for creating parameterized tests. In a nutshell, we need two elements
    to implement these tests in JUnit 5:'
  prefs: []
  type: TYPE_NORMAL
- en: An argument provider, which is the data source for the parameterized tests.
    [Table 8-1](#argument-providers) provides a comprehensive summary of these argument
    providers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The annotation `@ParameterizedTest` (instead of the usual `@Test` annotation),
    which decorates the test method where the parameters are injected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table 8-1\. Argument providers in JUnit 5
  prefs: []
  type: TYPE_NORMAL
- en: '| Annotation | Description | Example | Example output |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| Array of literal values |'
  prefs: []
  type: TYPE_TB
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| Constants of a Java enumeration |'
  prefs: []
  type: TYPE_TB
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| A static method of the class that provides a `Stream` of values |'
  prefs: []
  type: TYPE_TB
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| Comma-Separated Values (CSV) within the annotation |'
  prefs: []
  type: TYPE_TB
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| Values in CSV format in a file located in the classpath |'
  prefs: []
  type: TYPE_TB
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '| A class that implements the `ArgumentsProvider` interface |'
  prefs: []
  type: TYPE_TB
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '| A single `null` argument |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '| A single empty argument |'
  prefs: []
  type: TYPE_TB
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '| A `null` plus an empty argument |'
  prefs: []
  type: TYPE_TB
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 8-3](#junit5-parameterized) illustrates the Jupiter version of the
    same parameterized test shown in the previous examples. We can use different argument
    providers to implement this parameterized test. In this case, we use `@MethodSource`
    to return a stream of arguments. An alternative that might fit well for this test
    is using `@CsvSource` to embed the input data and expected outcome as CSV format.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-3\. Parameterized test using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define a static method to be used as an argument provider in `@MethodSource`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a regular `@Test`, we implement a parameterized test.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The argument provider is linked to the data provided by the `loginData` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The parameters are injected in the test method.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the same approach for implementing JUnit 5 parameterized tests when
    using Selenium-Jupiter. The only difference is that you delegate the creation
    and disposal of `WebDriver` objects with Selenium-Jupiter. [Example 8-4](#seljup-parameterized)
    demonstrates how to implement the same test explained in the previous sections
    (i.e., parameterized login) but using Selenium-Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-4\. Parameterized test using JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: When using different parameter resolvers in a Jupiter test, by convention, we
    must first declare the parameters injected due to `@ParameterizedTest`, and then
    the parameter injected by extensions (Selenium-Jupiter in this case, for `WebDriver`
    objects).
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Browser Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cross-browser testing is a kind of functional testing in which we verify that
    a web application works as expected using different types of web browsers. A possible
    way to implement cross-browser tests is through parameterized tests using the
    browser type (i.e., Chrome, Firefox, Edge, etc.) as the test parameter. The following
    sections describe how to use the unit testing framework capabilities for parameterized
    testing applied to cross-browser testing. We will use local browsers (Chrome,
    Firefox, and Edge) in these examples. An alternative way to carry out cross-browser
    testing is to use remote browsers (from a Selenium Server, cloud provider, or
    Docker), as explained in [Chapter 6](ch06.html#ch06).
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 8-5](#junit4-cbt) shows a cross-browser test implemented with JUnit
    4\. We use WebDriverManager to ease the parameterization. As explained in [“Generic
    Manager”](app02.html#generic_manager), WebDriverManager can use one or another
    manager depending on the value of a parameter. This parameter can be a `WebDriver`
    class, an enumeration, or the browser name. We use the latter in the following
    examples (although you can find the alternative methods in the [examples repository](https://github.com/bonigarcia/selenium-webdriver-java)).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-5\. Cross-browser testing using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify three browsers using their names.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the WebDriverManager generic manager, using these browser names as the
    parameters. An alternative way to select one or another browser is using the generic
    manager without parameters (i.e., with the method `.getInstance()`, as explained
    in [“Generic Manager”](app02.html#generic_manager)) and then parameterize the
    test (or the suite) using the Java system property `wdm.defaultBrowser` (for instance,
    when running it with Maven or Gradle).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: This test is executed three times, using a different browser (Chrome, Edge,
    and Firefox) each time.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 8-6](#testng-cbt) shows the same cross-browser test, this time using
    TestNG. In this case, the test parameter (the browser name) is injected into the
    test method.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-6\. Cross-browser testing using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to create the `WebDriver` instance in the test logic since the test
    parameters are injected in the test method when using TestNG.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Example 8-7](#junit5-cbt) shows the same cross-browser test following the
    Jupiter model. Again, we use WebDriverManager to create the `WebDriver` instance,
    using the browser name as a parameter. Since these parameters are strings, we
    use `@ValueSource` as an argument provider.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-7\. Cross-browser testing using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: In Jupiter, the parameters in parameterized tests are injected in the test methods.
    For this reason, we need to create the driver instance in the test logic.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium-Jupiter provides a complementary feature for creating cross-browser
    tests, called *test templates*. Test templates are a special kind of parameterized
    test supported by Jupiter in which an extension collects the parameters. Selenium-Jupiter
    uses this feature to provide a comprehensive way to specify different browser
    aspects (such as type, version, arguments, and capabilities) using a custom JSON
    notation called a *browser scenario* in Selenium-Jupiter jargon. You can find
    more details about this feature in the [Selenium-Jupiter documentation](https://bonigarcia.dev/selenium-jupiter/#template-tests).
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 8-8](#seljup-test-templates-json) shows a sample browser scenario.
    This JSON is stored in a file called `browsers.json`, the default name used by
    a template test. [Example 8-9](#seljup-test-templates) shows a template test using
    this browser scenario.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-8\. Browser scenario for a test template in Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This browser scenario contains three browsers. The first one is a local Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The second browser is a local Edge in headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The third browser is Firefox 93, executed in a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-9\. Cross-browser testing using test templates in JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use this Selenium-Jupiter annotation to skip the test when Docker is unavailable
    (since one of the browsers defined in the scenario uses Docker).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to decorate the test method using `@TestTemplate` instead of the usual
    `@Test` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the generic `WebDriver` to inject the driver instances. Alternatively,
    `RemoteWebDriver` is also valid for test templates.
  prefs: []
  type: TYPE_NORMAL
- en: Categorizing and Filtering Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common need when basing a test suite on Selenium WebDriver (especially when
    the number of tests is high) is to execute only a group of tests. There are different
    ways to achieve single or group test execution. When using an IDE to run tests,
    we can select the specific test(s) to be executed. When using the command line,
    there are other mechanisms we can use to select these tests.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, we can use the filtering mechanisms provided by the build tools.
    For instance, Maven and Gradle allow including or excluding tests based on the
    test classes and method names. The basic syntax for these commands is introduced
    in [Appendix C](app03.html#appendix03). [Table 8-2](#maven_gradle_filtering) shows
    several common examples using these commands. Notice that the wildcard `*` is
    used in these examples to match any character in the test class name.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-2\. Examples of Maven and Gradle commands for including and excluding
    tests
  prefs: []
  type: TYPE_NORMAL
- en: '| Description | Maven | Gradle |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Run tests starting with the word *Hello* |'
  prefs: []
  type: TYPE_TB
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Run tests that contain *Basic* or *Timeout* |'
  prefs: []
  type: TYPE_TB
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Run tests except those starting with *Firefox* |'
  prefs: []
  type: TYPE_TB
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Run tests except those starting with *Docker* or containing *Remote* |'
  prefs: []
  type: TYPE_TB
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the build tool, we can use built-in features provided by the
    unit testing frameworks for categorizing (also known as grouping or tagging) and
    filtering tests based on those categories. The following subsections explain how.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JUnit 4 provides the annotation `@Category` to group tests. We need to specify
    one or more Java classes as attributes in this annotation. Then we can use these
    classes to select and execute the tests belonging to one or more categories. [Example 8-10](#junit4-tag)
    shows a basic class using this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-10\. Test using categories and JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`WebForm` is an empty interface available in the examples repository.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`HomePage` is another empty interface available in the examples repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Then we can use the command line to execute tests based on their groups. For
    instance, the following commands show the Maven and Gradle command for running
    the tests that belong to the `HomePage` category.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We can combine this filtering with the Maven and Gradle support for selecting
    tests based on the class name. For instance, the following commands execute those
    tests belonging to the `HomePage` category but only in the test class `CategoriesJUnit4Test`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestNG also allows grouping tests. [Example 8-11](#testng-tag) demonstrates
    a basic use of this feature. In summary, the `@Test` annotation allows specifying
    string labels for these groups.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-11\. Test using groups and TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We set to `true` the attribute `alwaysRun` to indicate that the setup and teardown
    methods are not filtered during test execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We assign the group name `WebForm` to the first test of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO11-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We set the group name `HomePage` to the second test.
  prefs: []
  type: TYPE_NORMAL
- en: Then we can use the command line to filter the test execution based on these
    categories. The following snippet first shows how to execute the test that belongs
    to the `HomePage` group. The second illustrates how to combine this grouping with
    the Maven and Gradle filtering mechanism based on the class name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jupiter programming model provides a way to group tests based on custom
    labels called *tags*. We use the annotation `@Tag` for that purpose. [Example 8-12](#junit5-tag)
    illustrates this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-12\. Test using tags and JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We mark the first test using the label `WebForm`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We categorize the second test using the `HomePage` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use these tags to include or exclude tests when executing tests using
    the command line. The following commands show several examples for Maven and Gradle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Ordering Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The test execution order is unknown beforehand in the unit testing frameworks
    used in this book. Nevertheless, there are mechanisms to select a given execution
    order. One possible use of this feature in the Selenium WebDriver arena is to
    reuse the same browser session (i.e., use the same `WebDriver` instance) by different
    tests, interacting with the SUT in a given order. The following examples demonstrate
    this use case for JUnit 4, TestNG, JUnit 5, and JUnit 5 plus Selenium-Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JUnit 4 provides the annotation `@FixMethodOrder` to establish the test execution.
    This annotation accepts an enumeration called `MethodSorters`, which is composed
    of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NAME_ASCENDING`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts the test methods by the method name in lexicographic order
  prefs: []
  type: TYPE_NORMAL
- en: '`JVM`'
  prefs: []
  type: TYPE_NORMAL
- en: Leaves the test methods in the order returned by the JVM
  prefs: []
  type: TYPE_NORMAL
- en: '`DEFAULT`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts the test methods in a deterministic, but not predictable, order
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 8-13](#junit4-order) shows a complete test case in which the tests
    are executed using the method name.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-13\. Ordering tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the annotation `@FixMethodOrder` at the class level to fix the order
    of the tests available in this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We create the driver instance before all tests (since we want to use the `WebDriver`
    session in all the tests).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We quit the driver instance after all tests. Therefore, we finish the session
    after the last test of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO13-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Since the test names are lexicographically ordered (`testA`, `testB`, and `testC`),
    the test execution will follow this sequence.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A simple way to order tests in TestNG is using an incremental priority for each
    test. [Example 8-14](#testng-order) demonstrates this feature, by using the attribute
    `priority` in the `@Test` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-14\. Ordering tests using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jupiter provides the annotation `@TestMethodOrder` for ordering tests. This
    annotation can be configured using the following ordering implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DisplayName`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts test methods alphanumerically based on their display names.
  prefs: []
  type: TYPE_NORMAL
- en: '`MethodName`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts test methods alphanumerically based on their names.
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderAnnotation`'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts test methods based on the numeric values specified using the `@Order`
    annotation. [Example 8-15](#junit5-order) shows a test using this method.
  prefs: []
  type: TYPE_NORMAL
- en: '`Random`'
  prefs: []
  type: TYPE_NORMAL
- en: Orders test methods pseudorandomly.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-15\. Ordering tests using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, tests using Selenium-Jupiter also use the Jupiter programming model;
    therefore, these features (such as test ordering) also are valid for Selenium-Jupiter
    tests. [Example 8-16](#seljup-order) shows the same test as before, using Selenium-Jupiter
    for the driver instantiation. By default, the driver objects are created before
    each test and terminated after each test. Selenium-Jupiter provides the annotation
    `@SingleSession` to change this behavior, creating the driver instance before
    all tests, and closing the session after all tests.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-16\. Ordering tests using JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Failure Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Failure analysis* (also known as *troubleshooting*) is the process of gathering
    and analyzing data to discover the cause of a failure. This process can be challenging
    for Selenium WebDriver tests because the whole system is tested, and the underlying
    root causes of a failed test can be multiple. For instance, the cause of a failure
    in an end-to-end test might be the client-side (frontend) logic, the server-side
    (backend) logic, or even the integration with other components (e.g., database
    or external services).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use different techniques to help developers and testers in the failure
    analysis process. A typical way to do this is to detect when a test has failed
    and, before terminating the driver session, gather some data to discover the cause.
    The following assets can help in this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Screenshots
  prefs: []
  type: TYPE_NORMAL
- en: A picture of the web application UI after a test failure might help determine
    the failure cause. [“Screenshots”](ch04.html#screenshots) explains how to use
    the Selenium WebDriver API to make screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Browser log
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript console can be another potential source of information when an
    error occurs. [“Log Gathering”](ch05.html#log-gathering) explains how to carry
    out this log gathering.
  prefs: []
  type: TYPE_NORMAL
- en: Session recordings
  prefs: []
  type: TYPE_NORMAL
- en: We can easily record the browser session when using browsers in Docker containers.
    [“Browsers in Docker Containers”](ch06.html#browsers-in-docker) explains how to
    do this with WebDriverManager and Selenium-Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections provide basic examples for making browser screenshots
    of failed tests. To that aim, we need to relay in the unit testing specific features
    to detect failed tests.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JUnit allows tuning the default behavior of tests by using *rules*. A test class
    defines a rule by decorating a class attribute with the `@Rule` annotation. [Table 8-3](#junit4-rules)
    summarizes the rules provided out of the box by JUnit 4.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-3\. Rules in JUnit 4
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '| Allows the execution of a test to continue when exceptions happen (while
    collecting these exceptions) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '| Provides a base class to set up and tear down an external resource before
    each test |'
  prefs: []
  type: TYPE_TB
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '| Makes the current test name available for test methods |'
  prefs: []
  type: TYPE_TB
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '| Allows for the creation of temporary files and folders |'
  prefs: []
  type: TYPE_TB
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '| Applies a timeout to all test methods in a class |'
  prefs: []
  type: TYPE_TB
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '| Allows the capture of several execution phases of a test: `starting`, `succeeded`,
    `failed`, `skipped`, and `finished`. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the `TestWatcher` rule to gather data for failure analysis with JUnit
    4\. [Example 8-17](#junit4-failure-1) shows a test that captures a screenshot
    when the test fails. [Example 8-18](#junit4-failure-2) contains the implementation
    for this rule. As noted earlier, we make a browser screenshot. The logic to make
    this screenshot is available in [Example 8-19](#junit4-failure-3).
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-17\. Analyzing failed tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We define the rule at the class level, passing the driver instance as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We force this test to fail to make the screenshot of the browser using the rule.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-18\. Analyzing failed tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We encapsulate the logic for failure analysis in a separate class.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO15-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We override the method triggered when the test fails. In this case, we simply
    use the failure manager instance to make a screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-19\. Analyzing failed tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We take the screenshot as a PNG file, stored with a file name passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestNG provides several *listeners* out of the box. These listeners are classes
    that capture different events of the test lifecycle. For instance, the `ITestResult`
    listener allows you to monitor the status and result of a test. As [Example 8-20](#testng-failure)
    shows, we can easily use this listener to implement failure analysis in a Selenium
    WebDriver test.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-20\. Analyzing failed tests using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We declare an `ITestResult` parameter in the method for test teardown.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We read the status of the test.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: In case of failure, we create an instance of the failure manager (we use the
    same logic described in [Example 8-19](#junit4-failure-3)) for creating a screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JUnit 5, the Jupiter extension model replaced and improved the former test
    lifecycle management of JUnit 4 based on rules. As introduced in [Chapter 2](ch02.html#ch02),
    the extension model provided by Jupiter allows adding new features on the top
    of the Jupiter programming model. This way, a Jupiter extension is a Java class
    that implements one or several *extension points*, which are interfaces that allow
    different types of operations in the Jupiter programming model. [Table 8-4](#junit5-extension-points)
    summarizes the extension points provided by Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-4\. Jupiter extension points
  prefs: []
  type: TYPE_NORMAL
- en: '| Category | Description | Extension point(s) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Test lifecycle callbacks | To include custom logic during the test lifecycle
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter resolution | To inject parameters in test methods or constructors
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Test templates | To implement tests using `@TestTemplate` |'
  prefs: []
  type: TYPE_TB
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Conditional test execution | To enable or disable tests depending on custom
    conditions |'
  prefs: []
  type: TYPE_TB
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Exception handling | To handle exceptions during the test and its lifecycle
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Test instance | To create and process test class instances |'
  prefs: []
  type: TYPE_TB
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Intercepting invocations | To intercept calls to test code (and decide whether
    or not these calls proceed) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: A convenient extension point for implementing failure analysis is `AfterTestExecutionCallback`,
    since it allows including custom logic immediately after an individual test has
    been executed. [Example 8-21](#junit5-failure-1) provides a Jupiter test using
    a custom annotation (see [Example 8-22](#junit5-failure-2)) implementing this
    extension point.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-21\. Analyzing failed tests using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO18-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the `FailureWatcher` extension for the tests available in this class.
    We pass the driver instance as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO18-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We force a failure to make the extension take the browser screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-22\. Analyzing failed tests using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO19-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This extension implements a single extension point: `AfterTestExecution​Call⁠back`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO19-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This extension point must override this method, which is executed immediately
    after each test.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO19-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We check if an execution exception is present.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO19-4)'
  prefs: []
  type: TYPE_NORMAL
- en: If so, we take a screenshot using the `WebDriver` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium-Jupiter is a Jupiter extension that, among other features, allows making
    browser screenshots effortlessly. [Example 8-23](#seljup-failure) demonstrates
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-23\. Analyzing failed tests JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO20-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter takes a browser screenshot in the case of failed tests simply
    by using this configuration capability.
  prefs: []
  type: TYPE_NORMAL
- en: Retrying Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As explained in [Chapter 7](ch07.html#ch07), test *flakiness* (i.e., lack of
    reliability) is a well-known issue in end-to-end tests. As testers, we sometimes
    need to identify a *flaky* test (i.e., a test that passes or fails under the same
    conditions), and for that, we retry a given test to check whether its result is
    consistent. Thus, we might want a mechanism to retry tests in case of failure.
    This section explains how to carry out this process using the different unit testing
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to use a custom JUnit 4 rule for retrying failed tests. [Example 8-24](#junit4-retry-1)
    shows a test using an example of this kind of rule, and [Example 8-25](#junit4-retry-2)
    contains the source code of that rule.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-24\. Retrying tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO21-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We declare the retrying rule as a test attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO21-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the same browser for all the repetitions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO21-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We open a practice web page called *random calculator*. This page has been designed
    to produce incorrect results a given percentage of the time (50% by default).
    Then the calculator works perfectly after a configurable number of times (five
    by default).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO21-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the calculator GUI to make an essential arithmetic operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO21-5)'
  prefs: []
  type: TYPE_NORMAL
- en: We verify the result. There is a 50% probability of getting an incorrect result
    for the first five attempts.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-25\. JUnit 4 rule for retrying failed tests
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO22-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We implement the generic interface for JUnit 4 rules, i.e., `TestRule`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO22-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This rule accepts an integer value in its constructor, used to determine the
    maximum number of retries.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO22-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to override the method `apply,` which allows manipulation of the test
    lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO22-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We repeat the test execution in a loop, repeated a maximum number of times equal
    to the number of retries.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_testing_framework_specifics_CO22-5)'
  prefs: []
  type: TYPE_NORMAL
- en: In case of error during test execution, we get the exception object and repeat
    the test execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_testing_framework_specifics_CO22-6)'
  prefs: []
  type: TYPE_NORMAL
- en: If this line is reached, it means the test has been repeated the maximum number
    of times.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestNG provides a custom capability for implementing test retries. As shown
    in [Example 8-26](#testng-retry-1), we use the attribute `retryAnalyzer` of a
    `@Test` annotation to enable this feature. [Example 8-27](#testng-retry-2) shows
    the implementation for that retries analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-26\. Retrying tests using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Example 8-27\. Test analyzer for TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO23-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to implement a TestNG listener called `IRetryAnalyzer` to implement
    a retry analyzer.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO23-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We cannot parameterize this class; therefore, we declare the maximum retries
    number within the class (as a constant, in this case).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO23-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We need to override the method `retry`. This method returns a boolean value
    that determines if the test is retried or not in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_testing_framework_specifics_CO23-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The logic to determine this value is an accumulator that checks if the retries
    threshold is reached.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to use the extension model previously explained (see [Table 8-4](#junit5-extension-points))
    for retrying failed tests. Instead of reinventing the wheel, we can use an existing
    open source Jupiter extension for this aim. To retry tests, and as introduced
    in [Chapter 2](ch02.html#ch02), there are various alternatives: [JUnit Pioneer](https://junit-pioneer.org)
    or [rerunner-jupiter](https://github.com/artsok/rerunner-jupiter). [Example 8-28](#junit5-retry)
    shows a test using the latter.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-28\. Retrying tests using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO24-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Simply decorating a test with this annotation, we repeat the test a maximum
    number of times (five in this case) in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tests using Selenium-Jupiter can also use other extensions. [Example 8-29](#seljup-retry)
    shows how to use rerunner-jupiter in a Selenium-Jupiter test.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-29\. Retrying tests JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO25-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We reuse the same browser for all the possible repetitions.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel Test Execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The time required to execute a Selenium WebDriver test suite (especially if
    the number of tests is high) can be considerable. The reason for this slowness
    is that a regular Selenium WebDriver test starts a new browser each time, and
    as a result, the overall execution time rises. A possible solution to this problem
    is to execute tests in parallel. There are different ways to achieve this parallelization.
    First, we can use the built-in capabilities for parallel execution provided by
    the build tools (Maven or Gradle). Second, we can use the features provided by
    the unit testing frameworks (JUnit 4 or 5, and TestNG) to that aim. The following
    subsections explain all these options.
  prefs: []
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven offers different mechanisms for parallel execution. First, Maven allows
    building modules of multimodule projects in parallel. For that, we need to invoke
    the Maven command from the command line using the option `-T`. This option accepts
    two types of arguments for parallelization: using a fixed number of threads or
    using a factor multiplied by the number of available CPU cores in your system.
    The following snippet shows an example of each type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO26-1)'
  prefs: []
  type: TYPE_NORMAL
- en: It executes the test of a multimodule project (e.g., the examples repository)
    in parallel using four threads.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO26-2)'
  prefs: []
  type: TYPE_NORMAL
- en: It executes the test of a multimodule project using the same number of threads
    as the CPU cores (for example, four threads in a quad-core system).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the plug-in used to execute unit tests in Maven (called *Surefire*)
    provides two ways to run tests in parallel. The first is multithreading inside
    a single JVM process. To enable this mode, we need to specify different configuration
    parameters, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parallel`'
  prefs: []
  type: TYPE_NORMAL
- en: To configure the level of granularity for parallelism. The possible values for
    this parameter are `methods` (to execute test methods in separate threads), `classes`
    (for test classes), `suites` (for test suites), `suitesAndClasses` (for test suites
    and classes), `suitesAndMethods` (for test suites and methods), and `all` (to
    execute every test in separate threads).
  prefs: []
  type: TYPE_NORMAL
- en: '`threadCount`'
  prefs: []
  type: TYPE_NORMAL
- en: To define the maximum number of threads for parallelism.
  prefs: []
  type: TYPE_NORMAL
- en: '`useUnlimitedThreads`'
  prefs: []
  type: TYPE_NORMAL
- en: To allow an unlimited number of threads.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to specify these configuration parameters. First, we can
    configure them directly on the Maven configuration file (i.e., the `pom.xml` file).
    [Example 8-30](#maven-parallel) demonstrates how. In addition, we can specify
    these parameters as system properties when using the command line, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Example 8-30\. Maven Surefire configuration sample for parallel execution
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way to implement parallelism with Maven Surefire is *forking*, i.e.,
    creating multiple JVM processes. This option can be helpful if we need to prevent
    thread-level concurrency issues since different processes do not share memory
    space, as happens in multithreading. As a drawback, forking consumes more memory
    and has lower performance. To enable forking, we need to use the `forkCount` configuration
    property (again, in the `pom.xml` or as a system property) to a value higher than
    one (i.e., the number of JVM process to be created). For example, the following
    command executes the tests of a Maven project using four JVM processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gradle also provides several ways to execute tests in parallel. First, it allows
    executing tasks in parallel in a multimodule project. There are two ways to enable
    this mode. First, by setting the property `org.gradle.parallel=true` in the configuration
    file `gradle.properties`. Second, using the option `--parallel` in the command,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, we can use the configuration property `maxParallelForks` in the
    Gradle configuration file to specify the maximum number of test processes to start
    in parallel. By default, Gradle executes a single test class at a time. We change
    this default behavior by setting a value higher than one for this parameter. In
    addition to a fixed value, we can specify the number of available CPU cores in
    your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example repository, this property is enabled conditionally using a profile
    called `parallel` (see [Appendix C](app03.html#appendix03)). Therefore, we can
    use this profile using the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JUnit provides a basic way to execute tests in parallel through the class `Parallel​Com⁠puter`.
    This class accepts two boolean parameters in its constructor to enable parallel
    test execution of classes and methods, respectively. [Example 8-31](#junit4-parallel)
    shows a test using this class.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-31\. Parallel test execution using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO27-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We specify which test classes are executed in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO27-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We enable parallel test execution for test classes and methods.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A common way to specify parallel execution for tests in TestNG is through the
    configuration file `testng.xml`. The most relevant attributes to enable this mode
    in TestNG are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parallel`'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the mode for running tests in parallel. The alternatives are `methods`,
    `tests`, and `classes`.
  prefs: []
  type: TYPE_NORMAL
- en: '`threadcount`'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the default maximum number of threads for running tests in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: '[Example 8-32](#testng-parallel) shows a basic configuration of `testng.xml`
    for test parallelism.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-32\. Parallel test configuration for TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use Maven or Gradle in the command line to run the previous parallel
    test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JUnit 5 allows different ways to execute tests in parallel. The following list
    summarizes the most relevant configuration parameters for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '`junit.jupiter.execution.parallel.enabled`'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean flag to enable test parallelism (`false` by default).
  prefs: []
  type: TYPE_NORMAL
- en: '`junit.jupiter.execution.parallel.mode.classes.default`'
  prefs: []
  type: TYPE_NORMAL
- en: To run test classes in parallel. The possible values are `same_thread` for single
    threaded execution (by default) and `concurrent` for parallel execution.
  prefs: []
  type: TYPE_NORMAL
- en: '`junit.jupiter.execution.parallel.mode.default`'
  prefs: []
  type: TYPE_NORMAL
- en: To run test methods in parallel. The possible values are the same as before
    (for test classes).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to specify these parameters. First, in the configuration
    file `junit-platform.properties` (that should be available in the project classpath).
    [Example 8-33](#junit5-parallel-1) shows sample content of this file. Second,
    by using system properties and the command line. The following commands (Maven/Gradle)
    show how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Example 8-33\. Parallel test execution using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, the Jupiter programming model provides the annotation `@Execution`
    to change the parallelization mode for test classes or methods. This annotation
    can be used at the class level or method level and accepts two values: `ExecutionMode.CONCURRENT`
    (for parallel execution) and `ExecutionMode.SAME_THREAD` (for single-thread execution).
    [Example 8-34](#junit5-parallel-2) shows the structure of a test class contained
    in the example repository. Supposing that the parallel test is enabled (as in
    [Example 8-33](#junit5-parallel-1)), this class will be executed in parallel together
    with other tests that allow parallelization.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-34\. Parallel test execution using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Test Listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common need in the testing process is to keep track of the different stages
    of test execution. Unit testing frameworks thus provide a feature known as a *test
    listener*. Test listeners can be seen as utilities that modify the default test
    behavior by performing custom actions at multiple stages of the test execution
    cycle. As usual, each unit testing framework provides its own implementation for
    these test listeners.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JUnit 4, test listeners include custom operations when tests are started,
    passed, finished, failed, skipped, or ignored. The first step for implementing
    a JUnit 4 listener is to create a Java class that extends the `RunListener` class.
    In this class, you can override several methods (e.g., `testRunStarted`, `testIgnored`,
    `testFailure`, etc.) for including additional logic in the different steps of
    the test lifecycle. [Example 8-35](#junit4-listeners-3) shows basic implementation
    of a JUnit 4 test listener. This listener simply displays a message in the standard
    output about the test stage.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-35\. Test listener using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: A common way to register a test listener in JUnit 4 is to create a custom runner
    and use that runner in test classes. [Example 8-36](#junit4-listeners-2) shows
    a custom test runner registering the previous listener. [Example 8-37](#junit4-listeners-1)
    shows a test skeleton using this runner.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-36\. Test listeners using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO28-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We extend `Blockjunit4classrunner`, the default test runner in JUnit 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO28-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We register our custom test listener.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO28-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We call the parent to continue using the default test runner.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-37\. Test listeners using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO29-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We decorate test classes using the JUnit 4 annotation `@RunWith` and our custom
    runner.
  prefs: []
  type: TYPE_NORMAL
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestNG provides the interface `ITestListener` for implementing test listeners.
    The classes implementing this interface can override methods for the different
    stages of the TestNG lifecycle, such as `onTestSuccess`, `onTestFailure`, or `onTestSkipped`,
    among others. [Example 8-38](#testng-listeners-2) shows a sample class implementing
    this interface. In this example, the listener methods log a message in the standard
    output. [Example 8-39](#testng-listeners-1) shows a test using this listener.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-38\. Test listener using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Example 8-39\. Test listeners using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO30-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the TestNG annotation `@Listeners` to specify that all the tests in this
    class use our custom test listener.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously discussed (see [Table 8-4](#junit5-extension-points)), Jupiter
    provides a wide variety of extension points for including custom logic in the
    JUnit 5 test lifecycle. In addition to this extension model, JUnit 5 allows the
    implementation of test listeners to keep track of several test execution stages,
    such as test started, skipped, or finished. This feature is available through
    the JUnit Launcher API, which is the API for discovering, filtering, and executing
    tests in the JUnit Platform (see [Figure 2-4](ch02.html#junit5-arch)).
  prefs: []
  type: TYPE_NORMAL
- en: To create a test listener in JUnit 5, we need to implement the `TestExecutionListener`
    interface. A class implementing this interface can override different methods
    to be notified of events that occur during test execution. [Example 8-40](#junit5-listeners-1)
    contains a basic class implementing this interface. These kinds of listeners are
    registered in JUnit 5 using a standard Java service loader mechanism. For that,
    we need to create a file called `/META-INF/services/org.junit.platform.launcher.TestExecutionLis⁠ten​er`
    in the project classpath, and write the fully qualified name of the test listener
    we want to register (e.g., `io.github.bonigarcia.webdriver.jupiter.ch08.listen⁠ers​.MyTestListener`
    for [Example 8-40](#junit5-listeners-1)). Note that this file is not included
    in the examples repository to avoid intruding on the whole test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-40\. Test listeners using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Interface `TestExecutionListener` belongs to the JUnit Platform Launcher API;
    therefore, to use it, we need to include this API as an extra dependency in our
    project. [Appendix C](app03.html#appendix03) explains the required Maven and Gradle
    setup for that.
  prefs: []
  type: TYPE_NORMAL
- en: Disabled Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing frameworks allow disabling (i.e., skipping in test execution) entire
    test classes or individual test methods programmatically. The following subsections
    explain the differences between JUnit 4, TestNG, JUnit 5, and Selenium-Jupiter.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JUnit 4 provides the annotation `@Ignore` to disable tests. This annotation
    can be used at the class or method level. Optionally, we can include a message
    in the annotation to specify the reason for disabling. [Example 8-41](#junit4-disabled)
    contains a disabled test.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-41\. Disabled tests using JUnit 4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: TestNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestNG allows disabling tests in two ways. First, we can use the annotation
    `@Ignore` for test classes or methods. Second, we can use the `enabled` attribute
    of the `@Test` annotation. [Example 8-42](#testng-disabled) illustrates both methods.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-42\. Disabled tests using TestNG
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: JUnit 5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jupiter programming model provides various annotations for disabling tests
    based on different conditions. [Table 8-5](#jupiter-disabling) summarizes these
    annotations, and [Example 8-43](#junit5-disabled) provides a basic example using
    some of these annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Table 8-5\. Jupiter annotations for disabling tests
  prefs: []
  type: TYPE_NORMAL
- en: '| Annotation(s) | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable test class or method |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable depending on the Java version |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable depending on a range of Java versions |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable depending on the operating system (e.g., Windows, Linux,
    macOS, etc.) |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable depending on the value of system properties |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable depending on the value of an environment variable |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '| To disable/enable based on the boolean return of a custom method |'
  prefs: []
  type: TYPE_TB
- en: Example 8-43\. Disabled tests using JUnit 5
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO31-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We skip this test always.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO31-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We skip this test in the case of using Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO31-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We skip this test in any operating system different than macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium-Jupiter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Selenium-Jupiter provides additional annotations to disable tests conditionally
    depending on specific conditions of Selenium WebDriver tests. These conditions
    are browser availability, Docker availability, and URL online (i.e., it returns
    a 200 response code when requesting the URL with the `GET` HTTP method). [Example 8-44](#seljup-disabled)
    shows several tests using these annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Example 8-44\. Disabled tests using JUnit 5 with Selenium-Jupiter
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_testing_framework_specifics_CO32-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This test is skipped if Safari is unavailable in the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_testing_framework_specifics_CO32-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This test is skipped if Docker is unavailable in the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_testing_framework_specifics_CO32-3)'
  prefs: []
  type: TYPE_NORMAL
- en: This test is skipped if a Selenium Server URL is not online. If so, the test
    is executed, and the previous URL is used to create an instance of `RemoteWebDriver`.
    To specify the required capabilities, we use the annotation `@DriverCapabilities`
    in this test (as explained in [Chapter 6](ch06.html#ch06)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary and Outlook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented some of the most relevant specific features of the testing
    framework used in this book (i.e., JUnit 4, TestNG, JUnit 5, and Selenium-Jupiter)
    for developing Selenium WebDriver tests. First, you learned how to implement parameterized
    tests. This feature can be convenient for cross-browser testing (i.e., using different
    browsers for web testing). Then, you learned how to categorize tests and use these
    categories to include or exclude them from test execution. You continued by comprehending
    mechanisms for failure analysis (e.g., make a browser screenshot when a test fails),
    retrying tests, or executing tests in parallel. Finally, you discovered how to
    implement test listeners and the different mechanisms for disabling tests.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to integrate Selenium WebDriver with
    different third-party utilities for implementing advanced end-to-end tests. You
    will discover how to download files from web applications, capture traffic without
    using CDP (e.g., in Firefox), test nonfunctional requirements (such as performance,
    security, or accessibility), handle different input data, improve test reporting,
    and integrate with existing frameworks such as Spring or Cucumber.
  prefs: []
  type: TYPE_NORMAL
