["```java\norg.openqa.selenium\n```", "```java\nMutableCapabilities\n```", "```java\norg.openqa.selenium.chrome\n```", "```java\nChromeOptions\n```", "```java\norg.openqa.selenium.edge\n```", "```java\nEdgeOptions\n```", "```java\norg.openqa.selenium.firefox\n```", "```java\nFirefoxOptions\n```", "```java\norg.openqa.selenium.safari\n```", "```java\nSafariOptions\n```", "```java\norg.openqa.selenium.opera\n```", "```java\nOperaOptions\n```", "```java\norg.openqa.selenium.ie\n```", "```java\nInternetExplorerOptions\n```", "```java\norg.openqa.selenium.remote\n```", "```java\nDesiredCapabilities\n```", "```java\nclass HeadlessChromeJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeAll\n    static void setupClass() {\n        WebDriverManager.chromedriver().setup(); ![1](assets/1.png)\n    }\n\n    @BeforeEach\n    void setup() {\n        ChromeOptions options = new ChromeOptions(); ![2](assets/2.png)\n        options.setHeadless(true); ![3](assets/3.png)\n\n        driver = new ChromeDriver(options); ![4](assets/4.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testHeadless() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nclass HeadlessEdgeJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeAll\n    static void setupClass() {\n        WebDriverManager.edgedriver().setup(); ![1](assets/1.png)\n    }\n\n    @BeforeEach\n    void setup() {\n        EdgeOptions options = new EdgeOptions(); ![2](assets/2.png)\n        options.setHeadless(true); ![3](assets/3.png)\n\n        driver = RemoteWebDriver.builder().oneOf(options).build(); ![4](assets/4.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testHeadless() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nclass HeadlessFirefoxJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() {\n        FirefoxOptions options = new FirefoxOptions(); ![1](assets/1.png)\n        options.setHeadless(true); ![2](assets/2.png)\n\n        driver = WebDriverManager.firefoxdriver().capabilities(options)\n                .create(); ![3](assets/3.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testHeadless() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\n@ExtendWith(SeleniumJupiter.class)\nclass HeadlessChromeSelJupTest {\n\n    @Test\n    void testHeadless(@Arguments(\"--headless\") ChromeDriver driver) { ![1](assets/1.png)\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nPageLoadStrategy.NORMAL\n```", "```java\n\"complete\"\n```", "```java\nPageLoadStrategy.EAGER\n```", "```java\n\"interactive\"\n```", "```java\nPageLoadStrategy.NONE\n```", "```java\n\"loading\"\n```", "```java\nclass PageLoadChromeJupiterTest {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    WebDriver driver;\n\n    PageLoadStrategy pageLoadStrategy;\n\n    @BeforeEach\n    void setup() {\n        ChromeOptions options = new ChromeOptions(); ![1](assets/1.png)\n        pageLoadStrategy = PageLoadStrategy.NORMAL;\n        options.setPageLoadStrategy(pageLoadStrategy); ![2](assets/2.png)\n\n        driver = WebDriverManager.chromedriver().capabilities(options).create(); ![3](assets/3.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testPageLoad() {\n        long initMillis = System.currentTimeMillis(); ![4](assets/4.png)\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        Duration elapsed = Duration\n                .ofMillis(System.currentTimeMillis() - initMillis); ![5](assets/5.png)\n\n        Capabilities capabilities = ((RemoteWebDriver) driver)\n                .getCapabilities(); ![6](assets/6.png)\n        Object pageLoad = capabilities\n                .getCapability(CapabilityType.PAGE_LOAD_STRATEGY); ![7](assets/7.png)\n        String browserName = capabilities.getBrowserName();\n        log.debug(\n                \"The page took {} ms to be loaded using a '{}' strategy in {}\",\n                elapsed.toMillis(), pageLoad, browserName); ![8](assets/8.png)\n\n        assertThat(pageLoad).isEqualTo(pageLoadStrategy.toString()); ![9](assets/9.png)\n    }\n\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    Map<String, Object> mobileEmulation = new HashMap<>(); ![1](assets/1.png)\n    mobileEmulation.put(\"deviceName\", \"iPhone 6/7/8\"); ![2](assets/2.png)\n    options.setExperimentalOption(\"mobileEmulation\", mobileEmulation); ![3](assets/3.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create(); ![4](assets/4.png)\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    EdgeOptions options = new EdgeOptions();\n    Map<String, Object> mobileEmulation = new HashMap<>();\n    Map<String, Object> deviceMetrics = new HashMap<>(); ![1](assets/1.png)\n    deviceMetrics.put(\"width\", 360);\n    deviceMetrics.put(\"height\", 640);\n    deviceMetrics.put(\"pixelRatio\", 3.0);\n    deviceMetrics.put(\"touch\", true);\n    mobileEmulation.put(\"deviceMetrics\", deviceMetrics);  ![2](assets/2.png)\n    mobileEmulation.put(\"userAgent\",\n            \"Mozilla/5.0 (Linux; Android 4.2.1; en-us; Nexus 5 Build/JOP40D) \"\n                    + \"AppleWebKit/535.19 (KHTML, like Gecko) \"\n                    + \"Chrome/18.0.1025.166 Mobile Safari/535.19\");  ![3](assets/3.png)\n    options.setExperimentalOption(\"mobileEmulation\", mobileEmulation);\n\n    driver = WebDriverManager.edgedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() throws URISyntaxException {\n    Path extension = Paths\n            .get(ClassLoader.getSystemResource(\"dark-bg.crx\").toURI()); ![1](assets/1.png)\n    ChromeOptions options = new ChromeOptions();\n    options.addExtensions(extension.toFile()); ![2](assets/2.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() throws URISyntaxException {\n    Path extension = Paths\n            .get(ClassLoader.getSystemResource(\"dark-bg.xpi\").toURI()); ![1](assets/1.png)\n    FirefoxOptions options = new FirefoxOptions();\n    FirefoxProfile profile = new FirefoxProfile(); ![2](assets/2.png)\n    profile.addExtension(extension.toFile()); ![3](assets/3.png)\n    options.setProfile(profile); ![4](assets/4.png)\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@BeforeEach\nvoid setup() throws URISyntaxException {\n    Path extension = Paths\n            .get(ClassLoader.getSystemResource(\"web-extension\").toURI()); ![1](assets/1.png)\n    EdgeOptions options = new EdgeOptions();\n    options.addArguments(\n            \"--load-extension=\" + extension.toAbsolutePath().toString()); ![2](assets/2.png)\n\n    driver = WebDriverManager.edgedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() throws URISyntaxException {\n    Path extensionFolder = Paths\n            .get(ClassLoader.getSystemResource(\"web-extension\").toURI()); ![1](assets/1.png)\n    zippedExtension = zipFolder(extensionFolder); ![2](assets/2.png)\n\n    driver = WebDriverManager.firefoxdriver().create();\n    ((FirefoxDriver) driver).installExtension(zippedExtension, true); ![3](assets/3.png)\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    Map<String, Object> prefs = new HashMap<>(); ![1](assets/1.png)\n    prefs.put(\"profile.default_content_setting_values.geolocation\", 1); ![2](assets/2.png)\n    options.setExperimentalOption(\"prefs\", prefs); ![3](assets/3.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    FirefoxOptions options = new FirefoxOptions();\n    options.addPreference(\"geo.enabled\", true); ![1](assets/1.png)\n    options.addPreference(\"geo.prompt.testing\", true); ![2](assets/2.png)\n    options.addPreference(\"geo.provider.use_corelocation\", true); ![3](assets/3.png)\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    Map<String, Object> prefs = new HashMap<>();\n    prefs.put(\"profile.default_content_setting_values.notifications\", 1);\n    options.setExperimentalOption(\"prefs\", prefs);\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    FirefoxOptions options = new FirefoxOptions();\n    options.addPreference(\"permissions.default.desktop-notification\", 1);\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@Test\nvoid testNotifications() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/notifications.html\");\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n    String script = String.join(\"\\n\",\n            \"const callback = arguments[arguments.length - 1];\", ![1](assets/1.png)\n            \"const OldNotify = window.Notification;\", ![2](assets/2.png)\n            \"function newNotification(title, options) {\", ![3](assets/3.png)\n            \"    callback(title);\", ![4](assets/4.png)\n            \"    return new OldNotify(title, options);\", ![5](assets/5.png)\n            \"}\",\n            \"newNotification.requestPermission = \" +\n                    \"OldNotify.requestPermission.bind(OldNotify);\",\n            \"Object.defineProperty(newNotification, 'permission', {\",\n            \"    get: function() {\",\n            \"        return OldNotify.permission;\",\n            \"    }\",\n            \"});\",\n            \"window.Notification = newNotification;\",\n            \"document.getElementById('notify-me').click();\"); ![6](assets/6.png)\n    log.debug(\"Executing the following script asynchronously:\\n{}\", script);\n\n    Object notificationTitle = js.executeAsyncScript(script); ![7](assets/7.png)\n    assertThat(notificationTitle).isEqualTo(\"This is a notification\"); ![8](assets/8.png)\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    Path browserBinary = Paths.get(\"/usr/bin/google-chrome-beta\"); ![1](assets/1.png)\n    assumeThat(browserBinary).exists(); ![2](assets/2.png)\n\n    ChromeOptions options = new ChromeOptions();\n    options.setBinary(browserBinary.toFile()); ![3](assets/3.png)\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    Proxy proxy = new Proxy(); ![1](assets/1.png)\n    String proxyStr = \"proxy:port\"; ![2](assets/2.png)\n    proxy.setHttpProxy(proxyStr); ![3](assets/3.png)\n    proxy.setSslProxy(proxyStr); ![4](assets/4.png)\n\n    ChromeOptions options = new ChromeOptions();\n    options.setAcceptInsecureCerts(true); ![5](assets/5.png)\n    options.setProxy(proxy); ![6](assets/6.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    LoggingPreferences logs = new LoggingPreferences();\n    logs.enable(LogType.BROWSER, Level.ALL); ![1](assets/1.png)\n\n    ChromeOptions options = new ChromeOptions();\n    options.setCapability(CapabilityType.LOGGING_PREFS, logs); ![2](assets/2.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n\n@Test\nvoid testBrowserLogs() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/console-logs.html\"); ![3](assets/3.png)\n\n    LogEntries browserLogs = driver.manage().logs().get(LogType.BROWSER); ![4](assets/4.png)\n    Assertions.assertThat(browserLogs.getAll()).isNotEmpty(); ![5](assets/5.png)\n    browserLogs.forEach(l -> log.debug(\"{}\", l)); ![6](assets/6.png)\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    options.addArguments(\"--use-fake-ui-for-media-stream\"); ![1](assets/1.png)\n    options.addArguments(\"--use-fake-device-for-media-stream\"); ![2](assets/2.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    FirefoxOptions options = new FirefoxOptions();\n    options.addPreference(\"media.navigator.permission.disabled\", true); ![1](assets/1.png)\n    options.addPreference(\"media.navigator.streams.fake\", true); ![2](assets/2.png)\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    options.setAcceptInsecureCerts(true); ![1](assets/1.png)\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n\n@Test\nvoid testInsecure() {\n    driver.get(\"https://self-signed.badssl.com/\"); ![2](assets/2.png)\n\n    String bgColor = driver.findElement(By.tagName(\"body\"))\n            .getCssValue(\"background-color\");\n    Color red = new Color(255, 0, 0, 1);\n    assertThat(Color.fromString(bgColor)).isEqualTo(red); ![3](assets/3.png)\n}\n```", "```java\nString lang;\n\n@BeforeEach\nvoid setup() {\n    lang = \"es-ES\";\n    ChromeOptions options = new ChromeOptions();\n    Map<String, Object> prefs = new HashMap<>();\n    prefs.put(\"intl.accept_languages\", lang); ![1](assets/1.png)\n    options.setExperimentalOption(\"prefs\", prefs);\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n\n@Test\nvoid testAcceptLang() {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/multilanguage.html\"); ![2](assets/2.png)\n\n    ResourceBundle strings = ResourceBundle.getBundle(\"strings\",\n            Locale.forLanguageTag(lang)); ![3](assets/3.png)\n    String home = strings.getString(\"home\");\n    String content = strings.getString(\"content\");\n    String about = strings.getString(\"about\");\n    String contact = strings.getString(\"contact\");\n\n    String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n    assertThat(bodyText).contains(home).contains(content).contains(about)\n            .contains(contact); ![4](assets/4.png)\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    lang = \"es-ES\";\n    FirefoxOptions options = new FirefoxOptions();\n    options.addPreference(\"intl.accept_languages\", lang);\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    lang = \"en-US\";\n    ChromeOptions options = new ChromeOptions();\n    options.addArguments(\"--lang=\" + lang);\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    ChromeOptions options = new ChromeOptions();\n    options.addArguments(\"--incognito\");\n\n    driver = WebDriverManager.chromedriver().capabilities(options).create();\n}\n```", "```java\n@BeforeEach\nvoid setup() {\n    FirefoxOptions options = new FirefoxOptions();\n    options.addArguments(\"-private\");\n\n    driver = WebDriverManager.firefoxdriver().capabilities(options)\n            .create();\n}\n```", "```java\n@BeforeAll\nstatic void setupClass() {\n    assumeThat(IS_OS_WINDOWS).isTrue(); ![1](assets/1.png)\n    WebDriverManager.iedriver().setup(); ![2](assets/2.png)\n}\n\n@BeforeEach\nvoid setup() {\n    Optional<Path> browserPath = WebDriverManager.edgedriver()\n            .getBrowserPath(); ![3](assets/3.png)\n    assumeThat(browserPath).isPresent();\n\n    InternetExplorerOptions options = new InternetExplorerOptions();\n    options.attachToEdgeChrome(); ![4](assets/4.png)\n    options.withEdgeExecutablePath(browserPath.get().toString()); ![5](assets/5.png)\n\n    driver = new InternetExplorerDriver(options); ![6](assets/6.png)\n}\n```", "```java\n@Test\nvoid testNetworkInterceptor() throws Exception {\n    Path img = Paths\n            .get(ClassLoader.getSystemResource(\"tools.png\").toURI()); ![1](assets/1.png)\n    byte[] bytes = Files.readAllBytes(img);\n\n    try (NetworkInterceptor interceptor = new NetworkInterceptor(driver,\n            Route.matching(req -> req.getUri().endsWith(\".png\"))\n                    .to(() -> req -> new HttpResponse()\n                            .setContent(Contents.bytes(bytes))))) { ![2](assets/2.png)\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\"); ![3](assets/3.png)\n\n        int width = Integer.parseInt(driver.findElement(By.tagName(\"img\"))\n                .getAttribute(\"width\"));\n        assertThat(width).isGreaterThan(80); ![4](assets/4.png)\n    }\n}\n```", "```java\n@Test\nvoid testBasicAuth() {\n    ((HasAuthentication) driver)\n            .register(() -> new UsernameAndPassword(\"guest\", \"guest\")); ![1](assets/1.png)\n\n    driver.get(\"https://jigsaw.w3.org/HTTP/Basic/\"); ![2](assets/2.png)\n\n    WebElement body = driver.findElement(By.tagName(\"body\"));\n    assertThat(body.getText()).contains(\"Your browser made it!\"); ![3](assets/3.png)\n}\n```", "```java\n@Test\nvoid testGenericAuth() {\n    driver.get(\"https://guest:guest@jigsaw.w3.org/HTTP/Basic/\");\n\n    WebElement body = driver.findElement(By.tagName(\"body\"));\n    assertThat(body.getText()).contains(\"Your browser made it!\");\n}\n```", "```java\nWebDriver driver;\n\nDevTools devTools; ![1](assets/1.png)\n\n@BeforeEach\nvoid setup() {\n    driver = WebDriverManager.chromedriver().create();\n    devTools = ((ChromeDriver) driver).getDevTools(); ![2](assets/2.png)\n    devTools.createSession(); ![3](assets/3.png)\n}\n\n@AfterEach\nvoid teardown() {\n    devTools.close(); ![4](assets/4.png)\n    driver.quit();\n}\n```", "```java\n@Test\nvoid testEmulateNetworkConditions() {\n    devTools.send(Network.enable(Optional.empty(), Optional.empty(),\n            Optional.empty())); ![1](assets/1.png)\n    devTools.send(Network.emulateNetworkConditions(false, 100, 50 * 1024,\n            50 * 1024, Optional.of(ConnectionType.CELLULAR3G))); ![2](assets/2.png)\n\n    long initMillis = System.currentTimeMillis(); ![3](assets/3.png)\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\"); ![4](assets/4.png)\n    Duration elapsed = Duration\n            .ofMillis(System.currentTimeMillis() - initMillis); ![5](assets/5.png)\n    log.debug(\"The page took {} ms to be loaded\", elapsed.toMillis());\n\n    assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n}\n```", "```java\n@Test\nvoid testNetworkMonitoring() {\n    devTools.send(Network.enable(Optional.empty(), Optional.empty(),\n            Optional.empty()));\n\n    devTools.addListener(Network.requestWillBeSent(), request -> {\n        log.debug(\"Request {}\", request.getRequestId());\n        log.debug(\"\\t Method: {}\", request.getRequest().getMethod());\n        log.debug(\"\\t URL: {}\", request.getRequest().getUrl());\n        logHeaders(request.getRequest().getHeaders());\n    }); ![1](assets/1.png)\n\n    devTools.addListener(Network.responseReceived(), response -> {\n        log.debug(\"Response {}\", response.getRequestId());\n        log.debug(\"\\t URL: {}\", response.getResponse().getUrl());\n        log.debug(\"\\t Status: {}\", response.getResponse().getStatus());\n        logHeaders(response.getResponse().getHeaders());\n    }); ![2](assets/2.png)\n\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n}\n\nvoid logHeaders(Headers headers) {\n    log.debug(\"\\t Headers:\");\n    headers.toJson().forEach((k, v) -> log.debug(\"\\t\\t{}:{}\", k, v));\n}\n```", "```java\n@Test\nvoid testFullPageScreenshotChrome() throws IOException {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/long-page.html\"); ![1](assets/1.png)\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    wait.until(ExpectedConditions.presenceOfNestedElementsLocatedBy(\n            By.className(\"container\"), By.tagName(\"p\"))); ![2](assets/2.png)\n\n    GetLayoutMetricsResponse metrics = devTools\n            .send(Page.getLayoutMetrics());\n    Rect contentSize = metrics.getContentSize(); ![3](assets/3.png)\n    String screenshotBase64 = devTools\n            .send(Page.captureScreenshot(Optional.empty(), Optional.empty(),\n                    Optional.of(new Viewport(0, 0, contentSize.getWidth(),\n                            contentSize.getHeight(), 1)),\n                    Optional.empty(), Optional.of(true))); ![4](assets/4.png)\n    Path destination = Paths.get(\"fullpage-screenshot-chrome.png\");\n    Files.write(destination, Base64.getDecoder().decode(screenshotBase64)); ![5](assets/5.png)\n\n    assertThat(destination).exists(); ![6](assets/6.png)\n}\n```", "```java\n@Test\nvoid testFullPageScreenshotFirefox() throws IOException {\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/long-page.html\");\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    wait.until(ExpectedConditions.presenceOfNestedElementsLocatedBy(\n            By.className(\"container\"), By.tagName(\"p\")));\n\n    byte[] imageBytes = ((FirefoxDriver) driver)\n            .getFullPageScreenshotAs(OutputType.BYTES); ![1](assets/1.png)\n    Path destination = Paths.get(\"fullpage-screenshot-firefox.png\");\n    Files.write(destination, imageBytes);\n\n    assertThat(destination).exists();\n}\n```", "```java\n@Test\nvoid testPerformanceMetrics() {\n    devTools.send(Performance.enable(Optional.empty())); ![1](assets/1.png)\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n\n    List<Metric> metrics = devTools.send(Performance.getMetrics()); ![2](assets/2.png)\n    assertThat(metrics).isNotEmpty();\n    metrics.forEach(metric -> log.debug(\"{}: {}\", metric.getName(),\n            metric.getValue()));\n}\n```", "```java\n@Test\nvoid testExtraHeaders() {\n    devTools.send(Network.enable(Optional.empty(), Optional.empty(),\n            Optional.empty()));\n\n    String userName = \"guest\";\n    String password = \"guest\";\n    Map<String, Object> headers = new HashMap<>();\n    String basicAuth = \"Basic \" + new String(Base64.getEncoder()\n            .encode(String.format(\"%s:%s\", userName, password).getBytes()));\n    headers.put(\"Authorization\", basicAuth); ![1](assets/1.png)\n    devTools.send(Network.setExtraHTTPHeaders(new Headers(headers))); ![2](assets/2.png)\n\n    driver.get(\"https://jigsaw.w3.org/HTTP/Basic/\"); ![3](assets/3.png)\n    String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n    assertThat(bodyText).contains(\"Your browser made it!\"); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testBlockUrl() {\n    devTools.send(Network.enable(Optional.empty(), Optional.empty(),\n            Optional.empty()));\n\n    String urlToBlock =\n            \"https://bonigarcia.dev/selenium-webdriver-java/img/hands-on-icon.png\";\n    devTools.send(Network.setBlockedURLs(ImmutableList.of(urlToBlock))); ![1](assets/1.png)\n\n    devTools.addListener(Network.loadingFailed(), loadingFailed -> {\n        BlockedReason reason = loadingFailed.getBlockedReason().get();\n        log.debug(\"Blocking reason: {}\", reason);\n        assertThat(reason).isEqualTo(BlockedReason.INSPECTOR);\n    }); ![2](assets/2.png)\n\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n}\n```", "```java\n@Test\nvoid testDeviceEmulation() {\n    // 1\\. Override user agent (Apple iPhone 6)\n    String userAgent = \"Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X)\"\n            + \"AppleWebKit/600.1.3 (KHTML, like Gecko)\"\n            + \"Version/8.0 Mobile/12A4345d Safari/600.1.4\";\n    devTools.send(Network.setUserAgentOverride(userAgent, Optional.empty(),\n            Optional.empty(), Optional.empty())); ![1](assets/1.png)\n\n    // 2\\. Emulate device dimension\n    Map<String, Object> deviceMetrics = new HashMap<>();\n    deviceMetrics.put(\"width\", 375);\n    deviceMetrics.put(\"height\", 667);\n    deviceMetrics.put(\"mobile\", true);\n    deviceMetrics.put(\"deviceScaleFactor\", 2);\n    ((ChromeDriver) driver).executeCdpCommand(\n            \"Emulation.setDeviceMetricsOverride\", deviceMetrics); ![2](assets/2.png)\n\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n}\n```", "```java\n@Test\nvoid testConsoleListener() throws Exception {\n    CompletableFuture<ConsoleEvent> futureEvents = new CompletableFuture<>();\n    devTools.getDomains().events()\n            .addConsoleListener(futureEvents::complete); ![1](assets/1.png)\n\n    CompletableFuture<JavascriptException> futureJsExc = new CompletableFuture<>();\n    devTools.getDomains().events()\n            .addJavascriptExceptionListener(futureJsExc::complete); ![2](assets/2.png)\n\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/console-logs.html\"); ![3](assets/3.png)\n\n    ConsoleEvent consoleEvent = futureEvents.get(5, TimeUnit.SECONDS); ![4](assets/4.png)\n    log.debug(\"ConsoleEvent: {} {} {}\", consoleEvent.getTimestamp(),\n            consoleEvent.getType(), consoleEvent.getMessages()); ![5](assets/5.png)\n\n    JavascriptException jsException = futureJsExc.get(5,\n            TimeUnit.SECONDS); ![6](assets/6.png)\n    log.debug(\"JavascriptException: {} {}\", jsException.getMessage(),\n            jsException.getSystemInformation());\n}\n```", "```java\n@Test\nvoid testGeolocationOverride() {\n    devTools.send(Emulation.setGeolocationOverride(Optional.of(48.8584),\n            Optional.of(2.2945), Optional.of(100))); ![1](assets/1.png)\n\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/geolocation.html\"); ![2](assets/2.png)\n    driver.findElement(By.id(\"get-coordinates\")).click();\n\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n    WebElement coordinates = driver.findElement(By.id(\"coordinates\"));\n    wait.until(ExpectedConditions.visibilityOf(coordinates));\n}\n```", "```java\n@Test\nvoid testManageCookies() {\n    devTools.send(Network.enable(Optional.empty(), Optional.empty(),\n            Optional.empty()));\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/cookies.html\");\n\n    // Read cookies\n    List<Cookie> cookies = devTools.send(Network.getAllCookies()); ![1](assets/1.png)\n    cookies.forEach(cookie -> log.debug(\"{}={}\", cookie.getName(),\n            cookie.getValue()));\n    List<String> cookieName = cookies.stream()\n            .map(cookie -> cookie.getName()).sorted()\n            .collect(Collectors.toList());\n    Set<org.openqa.selenium.Cookie> seleniumCookie = driver.manage()\n            .getCookies();\n    List<String> selCookieName = seleniumCookie.stream()\n            .map(selCookie -> selCookie.getName()).sorted()\n            .collect(Collectors.toList());\n    assertThat(cookieName).isEqualTo(selCookieName); ![2](assets/2.png)\n\n    // Clear cookies\n    devTools.send(Network.clearBrowserCookies()); ![3](assets/3.png)\n    List<Cookie> cookiesAfterClearing = devTools\n            .send(Network.getAllCookies());\n    assertThat(cookiesAfterClearing).isEmpty(); ![4](assets/4.png)\n\n    driver.findElement(By.id(\"refresh-cookies\")).click();\n}\n```", "```java\n@Test\nvoid testLoadInsecure() {\n    devTools.send(Security.enable()); ![1](assets/1.png)\n    devTools.send(Security.setIgnoreCertificateErrors(true)); ![2](assets/2.png)\n    driver.get(\"https://expired.badssl.com/\");\n\n    String bgColor = driver.findElement(By.tagName(\"body\"))\n            .getCssValue(\"background-color\");\n    Color red = new Color(255, 0, 0, 1);\n    assertThat(Color.fromString(bgColor)).isEqualTo(red); ![3](assets/3.png)\n}\n```", "```java\n@Test\nvoid testLocationContext() {\n    LocationContext location = (LocationContext) driver; ![1](assets/1.png)\n    location.setLocation(new Location(27.5916, 86.5640, 8850)); ![2](assets/2.png)\n\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/geolocation.html\"); ![3](assets/3.png)\n    driver.findElement(By.id(\"get-coordinates\")).click();\n\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n    WebElement coordinates = driver.findElement(By.id(\"coordinates\"));\n    wait.until(ExpectedConditions.visibilityOf(coordinates)); ![4](assets/4.png)\n}\n```", "```java\n@Test\nvoid testWebAuthn() {\n    driver.get(\"https://webauthn.io/\"); ![1](assets/1.png)\n    HasVirtualAuthenticator virtualAuth = (HasVirtualAuthenticator) driver; ![2](assets/2.png)\n    VirtualAuthenticator authenticator = virtualAuth\n            .addVirtualAuthenticator(new VirtualAuthenticatorOptions()); ![3](assets/3.png)\n\n    String randomId = UUID.randomUUID().toString();\n    driver.findElement(By.id(\"input-email\")).sendKeys(randomId); ![4](assets/4.png)\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));\n    driver.findElement(By.id(\"register-button\")).click(); ![5](assets/5.png)\n    wait.until(ExpectedConditions.textToBePresentInElementLocated(\n            By.className(\"popover-body\"), \"Success! Now try logging in\"));\n\n    driver.findElement(By.id(\"login-button\")).click(); ![6](assets/6.png)\n    wait.until(ExpectedConditions.textToBePresentInElementLocated(\n            By.className(\"main-content\"), \"You're logged in!\")); ![7](assets/7.png)\n\n    virtualAuth.removeVirtualAuthenticator(authenticator); ![8](assets/8.png)\n}\n```", "```java\n@Test\nvoid testPrint() throws IOException {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n    PrintsPage pg = (PrintsPage) driver; ![1](assets/1.png)\n    PrintOptions printOptions = new PrintOptions();\n    Pdf pdf = pg.print(printOptions); ![2](assets/2.png)\n\n    String pdfBase64 = pdf.getContent(); ![3](assets/3.png)\n    assertThat(pdfBase64).contains(\"JVBER\"); ![4](assets/4.png)\n\n    byte[] decodedImg = Base64.getDecoder()\n            .decode(pdfBase64.getBytes(StandardCharsets.UTF_8)); ![5](assets/5.png)\n    Path destinationFile = Paths.get(\"my-pdf.pdf\");\n    Files.write(destinationFile, decodedImg); ![6](assets/6.png)\n}\n```", "```java\n@Test\nvoid testDomMutation() throws InterruptedException {\n    driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n\n    HasLogEvents logger = (HasLogEvents) driver; ![1](assets/1.png)\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n    AtomicReference<DomMutationEvent> seen = new AtomicReference<>();\n    CountDownLatch latch = new CountDownLatch(1);\n    logger.onLogEvent(CdpEventTypes.domMutation(mutation -> {\n        seen.set(mutation);\n        latch.countDown();\n    })); ![2](assets/2.png)\n\n    WebElement img = driver.findElement(By.tagName(\"img\"));\n    String newSrc = \"img/award.png\";\n    String script = String.format(\"arguments[0].src = '%s';\", newSrc);\n    js.executeScript(script, img); ![3](assets/3.png)\n\n    assertThat(latch.await(10, TimeUnit.SECONDS)).isTrue(); ![4](assets/4.png)\n    assertThat(seen.get().getElement().getAttribute(\"src\"))\n            .endsWith(newSrc); ![5](assets/5.png)\n}\n```", "```java\n@Test\nvoid testConsoleEvents() throws InterruptedException {\n    HasLogEvents logger = (HasLogEvents) driver;\n\n    CountDownLatch latch = new CountDownLatch(4);\n    logger.onLogEvent(CdpEventTypes.consoleEvent(consoleEvent -> {\n        log.debug(\"{} {}: {}\", consoleEvent.getTimestamp(),\n                consoleEvent.getType(), consoleEvent.getMessages());\n        latch.countDown();\n    })); ![1](assets/1.png)\n\n    driver.get(\n            \"https://bonigarcia.dev/selenium-webdriver-java/console-logs.html\"); ![2](assets/2.png)\n\n    assertThat(latch.await(10, TimeUnit.SECONDS)).isTrue();\n}\n```"]