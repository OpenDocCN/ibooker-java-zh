["```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader\n        .readLines()\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(customerData.outputLine)\n    }\n    writer.append(valuableCustomers.summarised())\n}\n\nprivate fun List<String>.toValuableCustomers() = withoutHeader()\n    .map(String::toCustomerData)\n    .filter { it.score >= 10 }\n\nprivate fun List<String>.withoutHeader() = drop(1)\n\nprivate fun List<CustomerData>.summarised(): String =\n    sumByDouble { it.spend }.let { total ->\n        \"\\tTOTAL\\t${total.toMoneyString()}\"\n    }\n```", "```java\nclass HighValueCustomersReportTests {\n\n    @Test\n    fun test() {\n        check(\n            inputLines = listOf(\n                \"ID\\tFirstName\\tLastName\\tScore\\tSpend\",\n                \"1\\tFred\\tFlintstone\\t11\\t1000.00\",\n                \"4\\tBetty\\tRubble\\t10\\t2000.00\",\n                \"2\\tBarney\\tRubble\\t0\\t20.00\",\n                \"3\\tWilma\\tFlintstone\\t9\\t0.00\"\n            ),\n            expectedLines = listOf(\n                \"ID\\tName\\tSpend\",\n                \"4\\tRUBBLE, Betty\\t2000.00\",\n                \"1\\tFLINTSTONE, Fred\\t1000.00\",\n                \"\\tTOTAL\\t3000.00\"\n            )\n        )\n    }\n\n    ...\n    private fun check(\n        inputLines: List<String>,\n        expectedLines: List<String>\n    ) {\n        val output = StringWriter()\n        generate(\n            StringReader(inputLines.joinToString(\"\\n\")),\n            output\n        )\n        assertEquals(expectedLines.joinToString(\"\\n\"), output.toString())\n    }\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    val output = StringWriter()\n    val reader = StringReader(inputLines.joinToString(\"\\n\"))\n    generate(reader, output)\n    val outputLines = output.toString().lines()\n\n    assertEquals(expectedLines, outputLines)\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader\n        .readLines()\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(customerData.outputLine)\n    }\n    writer.append(valuableCustomers.summarised())\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(writer: Writer, lines: List<String>) {\n    val valuableCustomers = lines\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(customerData.outputLine)\n    }\n    writer.append(valuableCustomers.summarised())\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    val output = StringWriter()\n    val reader = StringReader(inputLines.joinToString(\"\\n\"))\n    generate(output, reader.readLines())\n    val outputLines = output.toString().lines()\n\n    assertEquals(expectedLines, outputLines)\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    val output = StringWriter()\n    generate(output, inputLines)\n    val outputLines = output.toString().lines()\n\n    assertEquals(expectedLines, outputLines)\n}\n```", "```java\nwriter.appendLine(\"ID\\tName\\tSpend\")\nfor (customerData in valuableCustomers) {\n    writer.appendLine(customerData.outputLine)\n}\nwriter.append(valuableCustomers.summarised())\n```", "```java\nval resultLines = listOf(\"ID\\tName\\tSpend\") +\n    valuableCustomers.map(CustomerData::outputLine) +\n    valuableCustomers.summarised()\n```", "```java\n@Throws(IOException::class)\nfun generate(writer: Writer, lines: List<String>) {\n    val valuableCustomers = lines\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    val resultLines = listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n    writer.append(resultLines.joinToString(\"\\n\"))\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(writer: Writer, lines: List<String>) {\n    val resultLines = generate(lines)\n    writer.append(resultLines.joinToString(\"\\n\"))\n}\n\nfun generate(lines: List<String>): List<String> {\n    val valuableCustomers = lines\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    val resultLines = listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n    return resultLines\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(writer: Writer, lines: List<String>) {\n    writer.append(generate(lines).joinToString(\"\\n\"))\n}\n\nfun generate(lines: List<String>): List<String> {\n    val valuableCustomers = lines\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    return listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    val output = StringWriter()\n    output.append(generate(inputLines).joinToString(\"\\n\"))\n    val outputLines = output.toString().lines()\n\n    assertEquals(expectedLines, outputLines)\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    assertEquals(expectedLines, generate(inputLines))\n}\n```", "```java\nfun generate(lines: List<String>): List<String> {\n    val valuableCustomers = lines\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    return listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n\nprivate fun List<String>.toValuableCustomers() = withoutHeader()\n    .map(String::toCustomerData)\n    .filter { it.score >= 10 }\n\nprivate fun List<String>.withoutHeader() = drop(1)\n```", "```java\nfun generate(lines: List<String>): List<String> {\n    val valuableCustomers = lines\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    return listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```", "```java\nfun main() {\n    InputStreamReader(System.`in`).use { reader ->\n        OutputStreamWriter(System.out).use { writer ->\n            generate(reader, writer)\n        }\n    }\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            writer.append(\n                generate(\n                    reader.readLines()\n                ).joinToString(\"\\n\")\n            )\n        }\n    }\n}\n```", "```java\nfun generate(lines: List<String>): List<String> {\n    val valuableCustomers = lines\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    return listOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```", "```java\nfun generate(lines: List<String>): Sequence<String> {\n    val valuableCustomers = lines\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    return sequenceOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    assertEquals(\n        expectedLines,\n        generate(inputLines).toList()\n    )\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            writer.append(\n                generate(\n                    reader.readLines()\n                ).joinToString(\"\\n\")\n            )\n        }\n    }\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            generate(\n                reader.readLines()\n            ).forEach { line ->\n                writer.appendLine(line)\n            }\n        }\n    }\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            writer.appendLines(\n                generate(reader.readLines())\n            )\n        }\n    }\n}\n\nfun Writer.appendLines(lines: Sequence<CharSequence>): Writer {\n    return this.also {\n        lines.forEach(this::appendLine)\n    }\n}\n```", "```java\nfun generate(lines: List<String>): Sequence<String> {\n    val valuableCustomers = lines\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    return sequenceOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```", "```java\nfun generate(lines: List<String>): Sequence<String> {\n    val valuableCustomers: Sequence<CustomerData> = lines\n        .asSequence()\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    return sequenceOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n\nprivate fun Sequence<String>.withoutHeader() = drop(1)\n\nprivate fun Sequence<CustomerData>.summarised(): String =\n    sumByDouble { it.spend }.let { total ->\n        \"\\tTOTAL\\t${total.toMoneyString()}\"\n    }\n```", "```java\n    val valuableCustomers: Sequence<CustomerData> = lines\n        .asSequence()\n        .constrainOnce()\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n```", "```java\n    val valuableCustomers: List<CustomerData> = lines\n        .asSequence()\n        .constrainOnce()\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n        .toList()\n```", "```java\nfun generate(lines: Sequence<String>): Sequence<String> {\n    val valuableCustomers = lines\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n        .toList()\n    return sequenceOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n\nprivate fun List<CustomerData>.summarised(): String =\n    sumByDouble { it.spend }.let { total ->\n        \"\\tTOTAL\\t${total.toMoneyString()}\"\n    }\n```", "```java\nprivate fun check(\n    inputLines: List<String>,\n    expectedLines: List<String>\n) {\n    assertEquals(\n        expectedLines,\n        generate(\n            inputLines.asSequence().constrainOnce()\n        ).toList()\n    )\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            writer.appendLines(\n                generate(\n                    reader.readLines().asSequence().constrainOnce()\n                )\n            )\n        }\n    }\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            writer.appendLines(\n                generate(\n                    reader.buffered().lineSequence()\n                )\n            )\n        }\n    }\n}\n```", "```java\nfun main() {\n    System.`in`.reader().use { reader ->\n        System.out.writer().use { writer ->\n            reader\n                .asLineSequence()\n                .toHighValueCustomerReport()\n                .writeTo(writer)\n        }\n    }\n}\n```", "```java\nfun Sequence<String>.toHighValueCustomerReport(): Sequence<String> {\n    val valuableCustomers = this\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n        .toList()\n    return sequenceOf(\"ID\\tName\\tSpend\") +\n        valuableCustomers.map(CustomerData::outputLine) +\n        valuableCustomers.summarised()\n}\n```"]