- en: Part I. Functional Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分. 函数基础
- en: Functional programming isn’t more complicated than object-oriented programming
    and its primarily imperative coding style. It’s just a different way of approaching
    the same problems. Every problem that you can solve imperatively can also be solved
    functionally.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程并不比面向对象编程及其主要命令式编码风格更复杂。它只是解决同样问题的一种不同方式。每个你可以命令式解决的问题也可以函数式解决。
- en: Mathematics builds the foundation for functional programming, making it harder
    to approach than an object-oriented mindset. But just like learning a new foreign
    language, the similarities and shared roots become more visible over time until
    it *just clicks*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数学为函数式编程打下基础，使其比面向对象思维更难以接近。但就像学习一门新的外语一样，随着时间的推移，相似性和共享的根基变得更加明显，直到*顿悟*。
- en: You can implement almost any of the upcoming concepts without Java lambda expression.
    Compared to other languages, though, the result won’t be as elegant and concise.
    The functional tools available in Java allow your implementations of these concepts
    and functional idioms to be less verbose and more concise and efficient.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不使用Java lambda表达式的情况下实现几乎所有即将介绍的概念。虽然与其他语言相比，结果可能不那么优雅和简洁。Java中提供的函数式工具使得你对这些概念和函数习语的实现更加简洁高效。
