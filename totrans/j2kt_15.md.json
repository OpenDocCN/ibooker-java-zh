["```java\npublic class Route {\n    private final List<Journey> journeys; ![1](assets/1.png)\n\n    public Route(List<Journey> journeys) {\n        this.journeys = journeys; ![2](assets/2.png)\n    }\n\n    public int size() { ![3](assets/3.png)\n        return journeys.size();\n    }\n\n    public Journey get(int index) { ![3](assets/3.png)\n        return journeys.get(index);\n    }\n\n    public Location getDepartsFrom() { ![4](assets/4.png)\n        return get(0).getDepartsFrom();\n    }\n\n    public Location getArrivesAt() { ![4](assets/4.png)\n        return get(size() - 1).getArrivesAt();\n    }\n\n    public Duration getDuration() { ![4](assets/4.png)\n        return Duration.between(\n            get(0).getDepartureTime(),\n            get(size() - 1).getArrivalTime());\n    }\n\n    ...\n}\n```", "```java\npublic void render(Iterable<Journey> route) {\n    for (var journey : route) {\n        render(journey);\n    }\n}\n```", "```java\npublic void render(Route route) {\n    for (int i = 0; i < route.size(); i++) {\n        var journey = route.get(i);\n        render(journey);\n    }\n}\n```", "```java\ntypealias Route = List<Journey>\n```", "```java\nclass Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route\n) {\n    ...\n}\n```", "```java\npublic class Route {\n    private final List<Journey> journeys;\n\n    public Route(List<Journey> journeys) {\n        this.journeys = journeys;\n    }\n\n    public int size() {\n        return journeys.size();\n    }\n\n    public Journey get(int index) {\n        return journeys.get(index);\n    }\n\n    public Location getDepartsFrom() {\n        return get(0).getDepartsFrom();\n    }\n\n    ... many methods\n}\n```", "```java\nclass Route(\n    private val journeys: List<Journey>\n) {\n    fun size(): Int = journeys.size\n\n    operator fun get(index: Int) = journeys[index]\n\n    val departsFrom: Location\n        get() = get(0).departsFrom\n\n    ... many methods\n}\n```", "```java\nval Route.departsFrom: Location\n    get() = get(0).departsFrom\n```", "```java\npublic void renderWithHeader(Route route) {\n    renderHeader(\n        RouteKt.getDepartsFrom(route), ![1](assets/1.png)\n        route.getArrivesAt(),\n        route.getDuration()\n    );\n    for (int i = 0; i < route.size(); i++) {\n        var journey = route.get(i);\n        render(journey);\n    }\n}\n```", "```java\nfun withJourneyAt(index: Int, replacedBy: Journey): Route {\n    val newJourneys = ArrayList(journeys)\n    newJourneys[index] = replacedBy\n    return Route(newJourneys)\n}\n```", "```java\nfun Route.withJourneyAt(index: Int, replacedBy: Journey): Route {\n    val newJourneys = ArrayList(journeys)\n    newJourneys[index] = replacedBy\n    return Route(newJourneys)\n}\n```", "```java\npublic void render(Route route) {\n    for (int i = 0; i < RouteKt.getSize(route); i++) {\n        var journey = RouteKt.get(route, i);\n        render(journey);\n    }\n}\n```", "```java\nclass Route(\n    val journeys: List<Journey>\n)\n\nval Route.size: Int\n    get() = journeys.size\n\noperator fun Route.get(index: Int) = journeys[index]\n\n...\n```", "```java\nclass Route(\n    val journeys: List<Journey>\n) : List<Journey> by journeys\n```", "```java\n@Test\nfun replaceJourney() {\n    val journey1 = Journey(waterloo, alton, someTime(), someTime(), RAIL)\n    val journey2 = Journey(alton, alresford, someTime(), someTime(), CAMEL)\n    val journey3 = Journey(alresford, winchester, someTime(), someTime(), BUS)\n    val route = Route(listOf(journey1, journey2, journey3))\n\n    val replacement = Journey(alton, alresford, someTime(), someTime(), RAIL)\n    val replaced = route.withJourneyAt(1, replacement)\n\n    assertEquals(journey1, replaced.get(0))\n    assertEquals(replacement, replaced.get(1))\n    assertEquals(journey3, replaced.get(2))\n}\n```", "```java\nfun Route.withJourneyAt(index: Int, replacedBy: Journey): Route {\n    val newJourneys = ArrayList(journeys)\n    newJourneys[index] = replacedBy\n    return Route(newJourneys)\n}\n```", "```java\nfun <T> Iterable<T>.withItemAt(index: Int, replacedBy: T): List<T> =\n    this.toMutableList().apply {\n        this[index] = replacedBy\n    }\n```", "```java\nfun Route.withJourneyAt(index: Int, replacedBy: Journey): Route =\n    Route(journeys.withItemAt(index, replacedBy))\n```", "```java\nclass Route(\n    val journeys: List<Journey>\n) : List<Journey> by journeys\n```", "```java\ntypealias Route = List<Journey>\n\nfun Route(journeys: List<Journey>) = journeys\n\nval Route.journeys get() = this\n```", "```java\nval route = Route(listOf(journey1, journey2, journey3)) ![1](assets/1.png)\n\nval replacement = Journey(alton, alresford, someTime(), someTime(), RAIL)\n\nassertEquals(\n    listOf(journey1, replacement, journey3),\n    route.withJourneyAt(1, replacement).journeys ![2](assets/2.png)\n)\n```", "```java\nval route = listOf(journey1, journey2, journey3) ![1](assets/1.png)\n\nval replacement = Journey(alton, alresford, someTime(), someTime(), RAIL)\n\nassertEquals(\n    listOf(journey1, replacement, journey3),\n    route.withJourneyAt(1, replacement) ![2](assets/2.png)\n)\n```", "```java\npublic void render(List<Journey> route) {\n    for (int i = 0; i < RouteKt.getSize(route); i++) {\n        var journey = RouteKt.get(route, i);\n        render(journey);\n    }\n}\n```", "```java\nval Route.size: Int\n    get() = this.size\n\noperator fun Route.get(index: Int) = this[index]\n```", "```java\npublic void render(List<Journey> route) {\n    for (int i = 0; i < route.size(); i++) {\n        var journey = route.get(i);\n        render(journey);\n    }\n}\n```", "```java\npublic void render(Iterable<Journey> route) {\n    for (var journey : route) {\n        render(journey);\n    }\n}\n```", "```java\ntypealias Route = List<Journey>\n\nval Route.departsFrom: Location\n    get() = first().departsFrom\n\nval Route.arrivesAt: Location\n    get() = last().arrivesAt\n\nval Route.duration: Duration\n    get() = Duration.between(\n        first().departureTime,\n        last().arrivalTime\n    )\n... other operations moved\n```", "```java\nval route = listOf(journey1, journey2, journey3)\nassertEquals(\n    listOf(journey1, replacement, journey3),\n    route.withItemAt(1, replacement)\n)\n```", "```java\npublic void renderWithHeader(List<Journey> route) {\n    renderHeader(\n        RouteKt.getDepartsFrom(route),\n        RouteKt.getArrivesAt(route),\n        RouteKt.getDuration(route)\n    );\n    for (var journey : route) {\n        render(journey);\n    }\n}\n```", "```java\nclass Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route\n) {\n\n    fun hasJourneyLongerThan(duration: Duration) =\n        route.any { it.duration > duration }\n\n    ...\n}\n```", "```java\nclass Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route\n) : Route by route { ![1](assets/1.png)\n\n    fun hasJourneyLongerThan(duration: Duration) =\n        any { it.duration > duration }\n\n    ...\n}\n```", "```java\nfun Route.hasJourneyLongerThan(duration: Duration) =\n    any { it.duration > duration }\n```", "```java\nfun Iterable<Itinerary>.shortest() =\n    minByOrNull {\n        it.duration ![1](assets/1.png)\n    }\n```", "```java\nfun Route.withoutJourneysBy(travelMethod: TravelMethod) =\n    this.filterNot { it.method == travelMethod }\n```", "```java\nfun Itinerary.withoutJourneysBy(travelMethod: TravelMethod) =\n    Itinerary(\n        id,\n        this.filterNot { it.method == travelMethod }\n    )\n```", "```java\ndata class Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route\n) : Route by route {\n\n    ...\n}\n```", "```java\nfun Itinerary.withoutJourneysBy(travelMethod: TravelMethod) =\n    copy(route = filterNot { it.method == travelMethod } )\n```", "```java\ndata class Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route\n) : Route by route {\n\n    fun withTransformedRoute(transform: (Route).() -> Route) =\n        copy(route = transform(route))\n\n    ...\n}\n```", "```java\nfun Itinerary.withoutJourneysBy(travelMethod: TravelMethod) =\n    withTransformedRoute {\n        filterNot { it.method == travelMethod }\n    }\n\nfun Itinerary.withoutLastJourney() =\n    withTransformedRoute { dropLast(1) }\n```"]