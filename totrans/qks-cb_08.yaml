- en: Chapter 8\. Fault Tolerance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 容错
- en: In this chapter, you’ll learn why you need to embrace failures in microservice
    architectures because this is something that will happen more often than not.
    One of the reasons this happens is because microservices architecture heavily
    relies on the network to function, and the network is a critical part that might
    not always be available (network down, saturation of the wire, change on the topology,
    update of the downstream service, etc.).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解为什么需要在微服务架构中接受失败，因为这种情况经常发生。其中一个原因是微服务架构在很大程度上依赖于网络进行功能运作，而网络作为一个关键部分并不总是可用（网络故障、线路饱和、拓扑结构变化、下游服务更新等）。
- en: For this reason, it is important to build services that are fault-tolerant to
    any kind of problem and to provide graceful solutions instead of just propagating
    the error.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，构建能够容忍任何问题并提供优雅解决方案而不是简单传播错误的服务变得非常重要。
- en: 'This chapter will include recipes for the following tasks:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包括以下任务的解决方案：
- en: Implement different resilient strategies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施不同的弹性策略
- en: Provide some fallback logic in case there is an error
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一些在出现错误时的回退逻辑
- en: Correctly configure fault-tolerance parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确配置容错参数
- en: 8.1 Implementing Automatic Retries
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1 实现自动重试
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: If there are errors, you want to execute automatic retries in order to try to
    recover from the failure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，您希望执行自动重试以尝试从故障中恢复。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: MicroProfile Fault Tolerance specification provides a way to implement automatic
    retries on any CDI element, including CDI beans and the MicroProfile REST Client.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 规范提供了一种在任何 CDI 元素上实现自动重试的方式，包括 CDI bean 和 MicroProfile
    REST Client。
- en: One can implement several strategies to protect against failures and, in the
    worst cases, provide some default logic instead of a failure. Suppose you have
    a service that suggests books depending on reader preference. If this service
    is down, instead of failing, you could cache a list of best-selling books so that
    at least you could provide the list and not a failure. So one of the important
    parts to define as a fault-tolerance strategy is a fallback logic to execute in
    case there is no possible recovery.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以实现几种策略来防止故障，并在最坏情况下提供一些默认逻辑而不是失败。假设您有一个根据读者喜好建议书籍的服务。如果此服务宕机，您可以缓存一份畅销书列表，以至少能够提供该列表而不是失败。因此，定义作为容错策略的重要部分之一的回退逻辑非常重要，以在没有可能的恢复情况下执行。
- en: MicroProfile Fault Tolerance focuses on several strategies to make your code
    fault-tolerant. Let’s look at the first strategy, which is as simple as executing
    automatic retries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 专注于几种策略，使您的代码具备容错能力。让我们看看第一种策略，即执行自动重试，这是非常简单的一种方式。
- en: 'You need to add extensions for using a MicroProfile Fault Tolerance specification:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要添加扩展来使用 MicroProfile Fault Tolerance 规范：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One of the easiest and sometimes most effective ways to recover from a network
    failure is to do a retry of the same operation. If it was an intermittent error,
    then the error could be fixed with some retries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络故障中恢复的最简单且有时最有效的方法之一是对同一操作进行重试。如果是偶发性错误，那么可以通过几次重试来修复错误。
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Retry`
    execute automatic retries if an exception is thrown. You can set different `parameters`,
    like max retries, max duration, or jitter; or you can specify the kind of exceptions
    for which the retries should be executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@org.eclipse.microprofile.faulttolerance.Retry` 注释的类或方法如果抛出异常，则执行自动重试。您可以设置不同的参数，如最大重试次数、最大持续时间或抖动；或者您可以指定应为其执行重试的异常类型。
- en: 'Moreover, you can implement fallback logic by annotating the methods with `@org.eclipse.microprofile.faulttolerance.Fallback`.
    The logic to execute as a fallback can be implemented as a class implementing
    the `org.eclipse.microprofile.faulttolerance.FallbackHandler` interface:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过在方法上注释 `@org.eclipse.microprofile.faulttolerance.Fallback` 来实现回退逻辑。作为回退执行的逻辑可以作为实现
    `org.eclipse.microprofile.faulttolerance.FallbackHandler` 接口的类来实现：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO1-1)'
- en: Sets the maximum retries to 3
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将最大重试次数设置为 3
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO1-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO1-2)'
- en: There is a delay of 1 second between retries
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重试之间有 1 秒的延迟
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO1-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO1-3)'
- en: Adds fallback logic if after 3 retries the problem still persists
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO1-4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '`FallbackHandler` template must be the same type as the return type of the
    recovering method'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file. The configuration
    key follows the followings format: `*fully_qualified_class_name*/*method_name*/*fault_tolerant_annotation*/*parameter*`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can set the parameters specific to a method or a class, or
    globally:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO2-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO2-2)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO2-3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information, visit the following pages on the Eclipse MicroProfile
    website:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[Fault Tolerance](https://oreil.ly/WzhhA)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fault Tolerance: Retry Policy](https://oreil.ly/Kjhzj)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.2 Implementing Timeouts
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prevent an execution from waiting forever.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance specification provides a way to implement timeouts
    to operations and prevent the execution from waiting forever.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: When there is an invocation to an external service, it is good practice to ensure
    that this operation has a timeout associated with it. This way, if there are network
    delays or failures, the process doesn’t wait for a long time and end up with a
    failure, but fails fast so you can react to the problem sooner than later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Timeout`
    define a timeout. If there is a timeout, then the `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`
    exception is thrown:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO3-1)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Sets timeout to 2 seconds
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file, like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO4-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO4-2)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO4-3)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: You can mix the `@Timeout` annotation with `@Fallback` to implement some recovery
    logic in case of a timeout or use `@Retry` to execute an automatic retry if a
    timeout exception occurs (`@Retry(retryOn=TimeoutException.class)`).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the timeout pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[Timeout](https://oreil.ly/af9DD)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.3 Avoiding Overloads with the Bulkhead Pattern
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to limit the number of accepted requests to a service.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Fault Tolerance specification provides a *bulkhead* pattern
    implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: The bulkhead pattern limits the operations that can be executed at the same
    time, keeping the new requests waiting, until the current execution requests can
    finish. If the waiting requests cannot be executed after a certain amount of time,
    they are discarded and an exception is thrown.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Bulkhead`
    apply a bulkhead limitation. If there are synchronous calls (you’ll learn how
    the bulkhead limitation works with asynchronous calls in [Chapter 15](ch15.xhtml#working_with_a_reactive_programming_model_chapter)),
    the `org.eclipse.microprofile.faulttolerance.exceptions.BulkheadException` exception
    is thrown when the limit of concurrent executions is reached, instead of queuing
    the requests:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO5-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Sets the limit to two concurrent executions
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the `siege` tool to simulate 4 concurrent requests, then the output
    will look like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO6-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Only 2 requests are processed
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, you can override any of these properties via the configuration file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO7-1)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO7-2)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO7-3)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are dealing with (micro)services architecture, a problem can occur
    when another service is overloaded by more calls than it can consume at one time.
    If the overload continues, this service might be overwhelmed and stop processing
    requests in an acceptable amount of time.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: You can mix `@Bulkhead` annotation with any other previously demonstrated fault
    tolerance annotations to implement a more resilient strategy—for example, a *bulkhead*
    + *retry* with delays.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the bulkhead pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[Bulkhead](https://oreil.ly/anYN5)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.4 Avoiding Unnecessary Calls with the Circuit Breaker Pattern
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prevent a service failure from propagating to other services and
    consuming several resources.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance specification provides the *circuit breaker* pattern
    to avoid making unnecessary calls if there are errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define a circuit breaker that is tripped after 3 errors in a window of
    4 requests:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO8-1)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Defines the rolling window
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO8-2)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Threshold to trip the circuit (4 × 0.75 = 3)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO8-3)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Amount of time that the circuit is opened
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO9-1)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at method level; this should be on the same line
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO9-2)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at class level
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO9-3)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are dealing with (micro)services architecture, a problem can occur
    when the communication to another service becomes impossible, either because the
    service is down or because of high latency. When this happens, expensive resources
    such as threads or file descriptors might be consumed on the caller while waiting
    for the other service to respond. If this continues, you could end up with resource
    exhaustion, which would mean that no more requests can be handled by this service,
    which would trigger a cascade of errors to other services throughout the application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 8-1](#cascadefailures) illustrates how a failure happening in a service,
    in the middle of the mesh, is propagated through all its callers. This is an example
    of a cascading failure.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0801](Images/qucb_0801.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. Cascading failure
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The circuit breaker pattern fixes a cascading failure by detecting the number
    of consecutive failures inside a detection window. If the defined error threshold
    is overtaken, then the circuit is tripped, meaning that for a certain amount of
    time, all attempts to call this method will fail immediately without trying to
    execute it. [Figure 8-2](#circuitbreakercalls) illustrates the schema of circuit
    breaker calls.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0802](Images/qucb_0802.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. Circuit breaker calls
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After some time, the circuit will become half-opened, which means that the next
    call will not fail immediately but will try again against the real system. If
    the call succeeds, then the circuit will be closed; otherwise, it will remain
    open. All possible states of a circuit breaker pattern are shown in [Figure 8-3](#circuitbreaker).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0803](Images/qucb_0803.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. Circuit breaker life cycle
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.CircuitBreaker`
    define a circuit breaker for that specific operation. If the circuit is opened,
    then the `org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException`
    exception is thrown.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also mix `@CircuitBreaker` with `@Timeout`, `@Fallback`, `@Bulkhead`,
    or `@Retry`, but the following must be taken into consideration:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: If `@Fallback` is used, the fallback logic is executed if a `CircuitBreakerOpenException`
    is thrown.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `@Retry` is used, each retry is processed by the circuit breaker and recorded
    as either a success or a failure.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `@Bulkhead` is used, the circuit breaker is checked before attempting to
    enter the bulkhead.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the circuit breaker pattern in MicroProfile Fault Tolerance,
    see the following page on GitHub:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[Circuit Breaker](https://oreil.ly/iOWuR)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.5 Disabling Fault Tolerance
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to disable fault tolerance in some environments.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Fault Tolerance specification provides a special parameter
    to enable or disable fault-tolerance logic either globally or individually.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some cases in which you might want to disable fault-tolerance logic.
    The MicroProfile Fault Tolerance specification defines a special parameter called
    `enabled` that can be used to enable or disable the logic from the configuration
    file either globally or individually:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，您可能希望禁用容错逻辑。MicroProfile 容错规范定义了一个特殊参数`enabled`，可以用来从配置文件中全局或个别地启用或禁用逻辑：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO10-1)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO10-1)'
- en: Disable at the method level; this should be on the same line
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法级别禁用；这应该在同一行
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO10-2)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO10-2)'
- en: Disable at the class level
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在类级别禁用
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO10-3)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO10-3)'
- en: Disable globally by type
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按类型全局禁用
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO10-4)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_fault_tolerance_CO10-4)'
- en: Disable all fault tolerance
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用所有容错功能
