- en: Chapter 8\. Fault Tolerance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn why you need to embrace failures in microservice
    architectures because this is something that will happen more often than not.
    One of the reasons this happens is because microservices architecture heavily
    relies on the network to function, and the network is a critical part that might
    not always be available (network down, saturation of the wire, change on the topology,
    update of the downstream service, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, it is important to build services that are fault-tolerant to
    any kind of problem and to provide graceful solutions instead of just propagating
    the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will include recipes for the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement different resilient strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide some fallback logic in case there is an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correctly configure fault-tolerance parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.1 Implementing Automatic Retries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If there are errors, you want to execute automatic retries in order to try to
    recover from the failure.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance specification provides a way to implement automatic
    retries on any CDI element, including CDI beans and the MicroProfile REST Client.
  prefs: []
  type: TYPE_NORMAL
- en: One can implement several strategies to protect against failures and, in the
    worst cases, provide some default logic instead of a failure. Suppose you have
    a service that suggests books depending on reader preference. If this service
    is down, instead of failing, you could cache a list of best-selling books so that
    at least you could provide the list and not a failure. So one of the important
    parts to define as a fault-tolerance strategy is a fallback logic to execute in
    case there is no possible recovery.
  prefs: []
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance focuses on several strategies to make your code
    fault-tolerant. Let’s look at the first strategy, which is as simple as executing
    automatic retries.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to add extensions for using a MicroProfile Fault Tolerance specification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: One of the easiest and sometimes most effective ways to recover from a network
    failure is to do a retry of the same operation. If it was an intermittent error,
    then the error could be fixed with some retries.
  prefs: []
  type: TYPE_NORMAL
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Retry`
    execute automatic retries if an exception is thrown. You can set different `parameters`,
    like max retries, max duration, or jitter; or you can specify the kind of exceptions
    for which the retries should be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, you can implement fallback logic by annotating the methods with `@org.eclipse.microprofile.faulttolerance.Fallback`.
    The logic to execute as a fallback can be implemented as a class implementing
    the `org.eclipse.microprofile.faulttolerance.FallbackHandler` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the maximum retries to 3
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: There is a delay of 1 second between retries
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds fallback logic if after 3 retries the problem still persists
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '`FallbackHandler` template must be the same type as the return type of the
    recovering method'
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file. The configuration
    key follows the followings format: `*fully_qualified_class_name*/*method_name*/*fault_tolerant_annotation*/*parameter*`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can set the parameters specific to a method or a class, or
    globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information, visit the following pages on the Eclipse MicroProfile
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Fault Tolerance](https://oreil.ly/WzhhA)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fault Tolerance: Retry Policy](https://oreil.ly/Kjhzj)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.2 Implementing Timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prevent an execution from waiting forever.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance specification provides a way to implement timeouts
    to operations and prevent the execution from waiting forever.
  prefs: []
  type: TYPE_NORMAL
- en: When there is an invocation to an external service, it is good practice to ensure
    that this operation has a timeout associated with it. This way, if there are network
    delays or failures, the process doesn’t wait for a long time and end up with a
    failure, but fails fast so you can react to the problem sooner than later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Timeout`
    define a timeout. If there is a timeout, then the `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`
    exception is thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets timeout to 2 seconds
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  prefs: []
  type: TYPE_NORMAL
- en: You can mix the `@Timeout` annotation with `@Fallback` to implement some recovery
    logic in case of a timeout or use `@Retry` to execute an automatic retry if a
    timeout exception occurs (`@Retry(retryOn=TimeoutException.class)`).
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the timeout pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Timeout](https://oreil.ly/af9DD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.3 Avoiding Overloads with the Bulkhead Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to limit the number of accepted requests to a service.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Fault Tolerance specification provides a *bulkhead* pattern
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The bulkhead pattern limits the operations that can be executed at the same
    time, keeping the new requests waiting, until the current execution requests can
    finish. If the waiting requests cannot be executed after a certain amount of time,
    they are discarded and an exception is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Bulkhead`
    apply a bulkhead limitation. If there are synchronous calls (you’ll learn how
    the bulkhead limitation works with asynchronous calls in [Chapter 15](ch15.xhtml#working_with_a_reactive_programming_model_chapter)),
    the `org.eclipse.microprofile.faulttolerance.exceptions.BulkheadException` exception
    is thrown when the limit of concurrent executions is reached, instead of queuing
    the requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the limit to two concurrent executions
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the `siege` tool to simulate 4 concurrent requests, then the output
    will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Only 2 requests are processed
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, you can override any of these properties via the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the method level
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at the class level
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are dealing with (micro)services architecture, a problem can occur
    when another service is overloaded by more calls than it can consume at one time.
    If the overload continues, this service might be overwhelmed and stop processing
    requests in an acceptable amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: You can mix `@Bulkhead` annotation with any other previously demonstrated fault
    tolerance annotations to implement a more resilient strategy—for example, a *bulkhead*
    + *retry* with delays.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the bulkhead pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bulkhead](https://oreil.ly/anYN5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.4 Avoiding Unnecessary Calls with the Circuit Breaker Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to prevent a service failure from propagating to other services and
    consuming several resources.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MicroProfile Fault Tolerance specification provides the *circuit breaker* pattern
    to avoid making unnecessary calls if there are errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define a circuit breaker that is tripped after 3 errors in a window of
    4 requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the rolling window
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Threshold to trip the circuit (4 × 0.75 = 3)
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Amount of time that the circuit is opened
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override any of these properties via the configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at method level; this should be on the same line
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides at class level
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Overrides globally
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are dealing with (micro)services architecture, a problem can occur
    when the communication to another service becomes impossible, either because the
    service is down or because of high latency. When this happens, expensive resources
    such as threads or file descriptors might be consumed on the caller while waiting
    for the other service to respond. If this continues, you could end up with resource
    exhaustion, which would mean that no more requests can be handled by this service,
    which would trigger a cascade of errors to other services throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 8-1](#cascadefailures) illustrates how a failure happening in a service,
    in the middle of the mesh, is propagated through all its callers. This is an example
    of a cascading failure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0801](Images/qucb_0801.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-1\. Cascading failure
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The circuit breaker pattern fixes a cascading failure by detecting the number
    of consecutive failures inside a detection window. If the defined error threshold
    is overtaken, then the circuit is tripped, meaning that for a certain amount of
    time, all attempts to call this method will fail immediately without trying to
    execute it. [Figure 8-2](#circuitbreakercalls) illustrates the schema of circuit
    breaker calls.
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0802](Images/qucb_0802.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-2\. Circuit breaker calls
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After some time, the circuit will become half-opened, which means that the next
    call will not fail immediately but will try again against the real system. If
    the call succeeds, then the circuit will be closed; otherwise, it will remain
    open. All possible states of a circuit breaker pattern are shown in [Figure 8-3](#circuitbreaker).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0803](Images/qucb_0803.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8-3\. Circuit breaker life cycle
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.CircuitBreaker`
    define a circuit breaker for that specific operation. If the circuit is opened,
    then the `org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException`
    exception is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also mix `@CircuitBreaker` with `@Timeout`, `@Fallback`, `@Bulkhead`,
    or `@Retry`, but the following must be taken into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: If `@Fallback` is used, the fallback logic is executed if a `CircuitBreakerOpenException`
    is thrown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `@Retry` is used, each retry is processed by the circuit breaker and recorded
    as either a success or a failure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `@Bulkhead` is used, the circuit breaker is checked before attempting to
    enter the bulkhead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the circuit breaker pattern in MicroProfile Fault Tolerance,
    see the following page on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Circuit Breaker](https://oreil.ly/iOWuR)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.5 Disabling Fault Tolerance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to disable fault tolerance in some environments.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MicroProfile Fault Tolerance specification provides a special parameter
    to enable or disable fault-tolerance logic either globally or individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some cases in which you might want to disable fault-tolerance logic.
    The MicroProfile Fault Tolerance specification defines a special parameter called
    `enabled` that can be used to enable or disable the logic from the configuration
    file either globally or individually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Disable at the method level; this should be on the same line
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Disable at the class level
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Disable globally by type
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO10-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Disable all fault tolerance
  prefs: []
  type: TYPE_NORMAL
