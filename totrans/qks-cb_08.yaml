- en: Chapter 8\. Fault Tolerance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 容错
- en: In this chapter, you’ll learn why you need to embrace failures in microservice
    architectures because this is something that will happen more often than not.
    One of the reasons this happens is because microservices architecture heavily
    relies on the network to function, and the network is a critical part that might
    not always be available (network down, saturation of the wire, change on the topology,
    update of the downstream service, etc.).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解为什么需要在微服务架构中接受失败，因为这种情况经常发生。其中一个原因是微服务架构在很大程度上依赖于网络进行功能运作，而网络作为一个关键部分并不总是可用（网络故障、线路饱和、拓扑结构变化、下游服务更新等）。
- en: For this reason, it is important to build services that are fault-tolerant to
    any kind of problem and to provide graceful solutions instead of just propagating
    the error.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，构建能够容忍任何问题并提供优雅解决方案而不是简单传播错误的服务变得非常重要。
- en: 'This chapter will include recipes for the following tasks:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包括以下任务的解决方案：
- en: Implement different resilient strategies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施不同的弹性策略
- en: Provide some fallback logic in case there is an error
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一些在出现错误时的回退逻辑
- en: Correctly configure fault-tolerance parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确配置容错参数
- en: 8.1 Implementing Automatic Retries
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1 实现自动重试
- en: Problem
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: If there are errors, you want to execute automatic retries in order to try to
    recover from the failure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，您希望执行自动重试以尝试从故障中恢复。
- en: Solution
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: MicroProfile Fault Tolerance specification provides a way to implement automatic
    retries on any CDI element, including CDI beans and the MicroProfile REST Client.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 规范提供了一种在任何 CDI 元素上实现自动重试的方式，包括 CDI bean 和 MicroProfile
    REST Client。
- en: One can implement several strategies to protect against failures and, in the
    worst cases, provide some default logic instead of a failure. Suppose you have
    a service that suggests books depending on reader preference. If this service
    is down, instead of failing, you could cache a list of best-selling books so that
    at least you could provide the list and not a failure. So one of the important
    parts to define as a fault-tolerance strategy is a fallback logic to execute in
    case there is no possible recovery.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以实现几种策略来防止故障，并在最坏情况下提供一些默认逻辑而不是失败。假设您有一个根据读者喜好建议书籍的服务。如果此服务宕机，您可以缓存一份畅销书列表，以至少能够提供该列表而不是失败。因此，定义作为容错策略的重要部分之一的回退逻辑非常重要，以在没有可能的恢复情况下执行。
- en: MicroProfile Fault Tolerance focuses on several strategies to make your code
    fault-tolerant. Let’s look at the first strategy, which is as simple as executing
    automatic retries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 专注于几种策略，使您的代码具备容错能力。让我们看看第一种策略，即执行自动重试，这是非常简单的一种方式。
- en: 'You need to add extensions for using a MicroProfile Fault Tolerance specification:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要添加扩展来使用 MicroProfile Fault Tolerance 规范：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One of the easiest and sometimes most effective ways to recover from a network
    failure is to do a retry of the same operation. If it was an intermittent error,
    then the error could be fixed with some retries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络故障中恢复的最简单且有时最有效的方法之一是对同一操作进行重试。如果是偶发性错误，那么可以通过几次重试来修复错误。
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Retry`
    execute automatic retries if an exception is thrown. You can set different `parameters`,
    like max retries, max duration, or jitter; or you can specify the kind of exceptions
    for which the retries should be executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@org.eclipse.microprofile.faulttolerance.Retry` 注释的类或方法如果抛出异常，则执行自动重试。您可以设置不同的参数，如最大重试次数、最大持续时间或抖动；或者您可以指定应为其执行重试的异常类型。
- en: 'Moreover, you can implement fallback logic by annotating the methods with `@org.eclipse.microprofile.faulttolerance.Fallback`.
    The logic to execute as a fallback can be implemented as a class implementing
    the `org.eclipse.microprofile.faulttolerance.FallbackHandler` interface:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过在方法上注释 `@org.eclipse.microprofile.faulttolerance.Fallback` 来实现回退逻辑。作为回退执行的逻辑可以作为实现
    `org.eclipse.microprofile.faulttolerance.FallbackHandler` 接口的类来实现：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO1-1)'
- en: Sets the maximum retries to 3
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将最大重试次数设置为 3
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO1-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO1-2)'
- en: There is a delay of 1 second between retries
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重试之间有 1 秒的延迟
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO1-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO1-3)'
- en: Adds fallback logic if after 3 retries the problem still persists
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果经过 3 次重试问题仍然存在，则添加回退逻辑
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO1-4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_fault_tolerance_CO1-4)'
- en: '`FallbackHandler` template must be the same type as the return type of the
    recovering method'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`FallbackHandler` 模板必须与恢复方法的返回类型相同'
- en: Discussion
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'You can override any of these properties via the configuration file. The configuration
    key follows the followings format: `*fully_qualified_class_name*/*method_name*/*fault_tolerant_annotation*/*parameter*`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过配置文件覆盖这些属性中的任何一个。配置键遵循以下格式：`*fully_qualified_class_name*/*method_name*/*fault_tolerant_annotation*/*parameter*`。
- en: 'For example, you can set the parameters specific to a method or a class, or
    globally:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以针对方法或类设置特定的参数，或者全局设置：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO2-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO2-1)'
- en: Overrides at the method level
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 方法级别的覆盖
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO2-2)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO2-2)'
- en: Overrides at the class level
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类级别的覆盖
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO2-3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO2-3)'
- en: Overrides globally
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 全局覆盖
- en: See Also
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information, visit the following pages on the Eclipse MicroProfile
    website:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多信息，请访问 Eclipse MicroProfile 网站上的以下页面：
- en: '[Fault Tolerance](https://oreil.ly/WzhhA)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[容错](https://oreil.ly/WzhhA)'
- en: '[Fault Tolerance: Retry Policy](https://oreil.ly/Kjhzj)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[容错：重试策略](https://oreil.ly/Kjhzj)'
- en: 8.2 Implementing Timeouts
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.2 实现超时
- en: Problem
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to prevent an execution from waiting forever.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望防止执行永久等待。
- en: Solution
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: MicroProfile Fault Tolerance specification provides a way to implement timeouts
    to operations and prevent the execution from waiting forever.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 规范提供了一种实现操作超时并防止执行无限等待的方式。
- en: When there is an invocation to an external service, it is good practice to ensure
    that this operation has a timeout associated with it. This way, if there are network
    delays or failures, the process doesn’t wait for a long time and end up with a
    failure, but fails fast so you can react to the problem sooner than later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用外部服务时，建议确保此操作有关联的超时时间。这样，如果存在网络延迟或故障，流程不会长时间等待并最终失败，而是会快速失败，让您能够更早地解决问题。
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Timeout`
    define a timeout. If there is a timeout, then the `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`
    exception is thrown:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@org.eclipse.microprofile.faulttolerance.Timeout` 注解的类或方法定义了超时。如果超时，则会抛出
    `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` 异常：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO3-1)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO3-1)'
- en: Sets timeout to 2 seconds
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将超时设置为 2 秒
- en: 'You can override any of these properties via the configuration file, like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过配置文件覆盖这些属性中的任何一个，如下所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO4-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO4-1)'
- en: Overrides at the method level
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 方法级别的覆盖
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO4-2)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO4-2)'
- en: Overrides at the class level
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类级别的覆盖
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO4-3)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO4-3)'
- en: Overrides globally
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 全局覆盖
- en: You can mix the `@Timeout` annotation with `@Fallback` to implement some recovery
    logic in case of a timeout or use `@Retry` to execute an automatic retry if a
    timeout exception occurs (`@Retry(retryOn=TimeoutException.class)`).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `@Timeout` 注解与 `@Fallback` 结合使用，在超时时实现一些恢复逻辑，或者使用 `@Retry` 在超时异常发生时执行自动重试（`@Retry(retryOn=TimeoutException.class)`）。
- en: See Also
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about the timeout pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关 MicroProfile Fault Tolerance 中超时模式的更多信息，请访问 GitHub 上的以下页面：
- en: '[Timeout](https://oreil.ly/af9DD)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超时](https://oreil.ly/af9DD)'
- en: 8.3 Avoiding Overloads with the Bulkhead Pattern
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.3 使用舱壁模式避免过载
- en: Problem
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to limit the number of accepted requests to a service.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望限制对服务的接受请求数量。
- en: Solution
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The MicroProfile Fault Tolerance specification provides a *bulkhead* pattern
    implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 规范提供了 *舱壁* 模式的实现。
- en: The bulkhead pattern limits the operations that can be executed at the same
    time, keeping the new requests waiting, until the current execution requests can
    finish. If the waiting requests cannot be executed after a certain amount of time,
    they are discarded and an exception is thrown.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 舱壁模式限制可以同时执行的操作，保持新请求等待，直到当前执行的请求完成。如果等待的请求在一定时间后无法执行，则被丢弃并抛出异常。
- en: 'The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.Bulkhead`
    apply a bulkhead limitation. If there are synchronous calls (you’ll learn how
    the bulkhead limitation works with asynchronous calls in [Chapter 15](ch15.xhtml#working_with_a_reactive_programming_model_chapter)),
    the `org.eclipse.microprofile.faulttolerance.exceptions.BulkheadException` exception
    is thrown when the limit of concurrent executions is reached, instead of queuing
    the requests:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@org.eclipse.microprofile.faulttolerance.Bulkhead`注解的类或方法会应用舱壁限制。如果存在同步调用（你将在
    [第15章](ch15.xhtml#working_with_a_reactive_programming_model_chapter) 中了解舱壁限制如何与异步调用配合工作），当达到并发执行限制时，将抛出`org.eclipse.microprofile.faulttolerance.exceptions.BulkheadException`异常，而不是排队请求：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO5-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO5-1)'
- en: Sets the limit to two concurrent executions
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将并发执行限制设置为两个
- en: 'If you use the `siege` tool to simulate 4 concurrent requests, then the output
    will look like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`siege`工具模拟4个并发请求，输出将如下所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO6-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO6-1)'
- en: Only 2 requests are processed
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 只处理2个请求
- en: 'Moreover, you can override any of these properties via the configuration file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以通过配置文件覆盖任何这些属性：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO7-1)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO7-1)'
- en: Overrides at the method level
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 方法级别的覆盖
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO7-2)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO7-2)'
- en: Overrides at the class level
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类级别的覆盖
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO7-3)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO7-3)'
- en: Overrides globally
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 全局覆盖
- en: Discussion
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When you are dealing with (micro)services architecture, a problem can occur
    when another service is overloaded by more calls than it can consume at one time.
    If the overload continues, this service might be overwhelmed and stop processing
    requests in an acceptable amount of time.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理（微）服务架构时，当另一个服务超载超过其一次能够消耗的调用时，问题可能会发生。如果超载继续，该服务可能会不堪重负并且无法在可接受的时间内处理请求。
- en: You can mix `@Bulkhead` annotation with any other previously demonstrated fault
    tolerance annotations to implement a more resilient strategy—for example, a *bulkhead*
    + *retry* with delays.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`@Bulkhead`注解与之前演示的任何其他容错注解混合使用，以实现更具弹性的策略——例如，*舱壁* + *带延迟重试*。
- en: See Also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'To learn more about the bulkhead pattern in MicroProfile Fault Tolerance, see
    the following page on GitHub:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 MicroProfile Fault Tolerance 中的舱壁模式更多信息，请参阅 GitHub 上的以下页面：
- en: '[Bulkhead](https://oreil.ly/anYN5)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[舱壁](https://oreil.ly/anYN5)'
- en: 8.4 Avoiding Unnecessary Calls with the Circuit Breaker Pattern
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.4 使用断路器模式避免不必要的调用
- en: Problem
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to prevent a service failure from propagating to other services and
    consuming several resources.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望防止服务故障传播到其他服务，并消耗大量资源。
- en: Solution
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: MicroProfile Fault Tolerance specification provides the *circuit breaker* pattern
    to avoid making unnecessary calls if there are errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile Fault Tolerance 规范提供了 *断路器* 模式，以避免在出现错误时进行不必要的调用。
- en: 'Let’s define a circuit breaker that is tripped after 3 errors in a window of
    4 requests:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个断路器，它在4个请求窗口中发生3次错误后被触发：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO8-1)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO8-1)'
- en: Defines the rolling window
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 定义滚动窗口
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO8-2)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO8-2)'
- en: Threshold to trip the circuit (4 × 0.75 = 3)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 触发断路的阈值（4 × 0.75 = 3）
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO8-3)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO8-3)'
- en: Amount of time that the circuit is opened
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 断路器打开的时间量
- en: 'You can override any of these properties via the configuration file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过配置文件覆盖任何这些属性：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO9-1)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO9-1)'
- en: Overrides at method level; this should be on the same line
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 方法级别的覆盖；这应该在同一行上
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO9-2)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO9-2)'
- en: Overrides at class level
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类级别的覆盖
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO9-3)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO9-3)'
- en: Overrides globally
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 全局覆盖
- en: Discussion
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: When you are dealing with (micro)services architecture, a problem can occur
    when the communication to another service becomes impossible, either because the
    service is down or because of high latency. When this happens, expensive resources
    such as threads or file descriptors might be consumed on the caller while waiting
    for the other service to respond. If this continues, you could end up with resource
    exhaustion, which would mean that no more requests can be handled by this service,
    which would trigger a cascade of errors to other services throughout the application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理（微）服务架构时，当与另一个服务的通信变得不可能时，可能会出现问题，无论是因为服务已宕掉还是因为延迟过高。 这种情况发生时，调用者在等待另一个服务响应时可能会消耗昂贵的资源，如线程或文件描述符。
    如果这种情况持续下去，可能会导致资源耗尽，这意味着该服务无法处理更多请求，从而触发应用程序中其他服务的错误级联。
- en: '[Figure 8-1](#cascadefailures) illustrates how a failure happening in a service,
    in the middle of the mesh, is propagated through all its callers. This is an example
    of a cascading failure.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[图8-1](#cascadefailures)展示了一个服务中发生的失败如何通过其所有调用者进行传播。 这是级联故障的一个示例。'
- en: '![qucb 0801](Images/qucb_0801.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0801](Images/qucb_0801.png)'
- en: Figure 8-1\. Cascading failure
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-1. 级联故障
- en: The circuit breaker pattern fixes a cascading failure by detecting the number
    of consecutive failures inside a detection window. If the defined error threshold
    is overtaken, then the circuit is tripped, meaning that for a certain amount of
    time, all attempts to call this method will fail immediately without trying to
    execute it. [Figure 8-2](#circuitbreakercalls) illustrates the schema of circuit
    breaker calls.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 断路器模式通过检测检测窗口内的连续故障数来修复级联故障。 如果超过定义的错误阈值，则会触发断路器，这意味着在一定时间内，所有尝试调用此方法的尝试都将立即失败，而不尝试执行它。
    [图8-2](#circuitbreakercalls)展示了断路器调用模式的图表。
- en: '![qucb 0802](Images/qucb_0802.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0802](Images/qucb_0802.png)'
- en: Figure 8-2\. Circuit breaker calls
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-2. 断路器调用
- en: After some time, the circuit will become half-opened, which means that the next
    call will not fail immediately but will try again against the real system. If
    the call succeeds, then the circuit will be closed; otherwise, it will remain
    open. All possible states of a circuit breaker pattern are shown in [Figure 8-3](#circuitbreaker).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，断路器将变成半开状态，这意味着下一次调用不会立即失败，而是会再次尝试连接真实系统。 如果调用成功，则断路器将关闭；否则，它将保持打开状态。
    断路器模式的所有可能状态如[图8-3](#circuitbreaker)所示。
- en: '![qucb 0803](Images/qucb_0803.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![qucb 0803](Images/qucb_0803.png)'
- en: Figure 8-3\. Circuit breaker life cycle
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8-3. 断路器生命周期
- en: The classes or methods annotated with `@org.eclipse.microprofile.faulttolerance.CircuitBreaker`
    define a circuit breaker for that specific operation. If the circuit is opened,
    then the `org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException`
    exception is thrown.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@org.eclipse.microprofile.faulttolerance.CircuitBreaker`注释的类或方法为特定操作定义断路器。
    如果断路器已打开，则会抛出`org.eclipse.microprofile.faulttolerance.exceptions.CircuitBreakerOpenException`异常。
- en: 'You can also mix `@CircuitBreaker` with `@Timeout`, `@Fallback`, `@Bulkhead`,
    or `@Retry`, but the following must be taken into consideration:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将`@CircuitBreaker`与`@Timeout`、`@Fallback`、`@Bulkhead`或`@Retry`混合使用，但必须考虑以下内容：
- en: If `@Fallback` is used, the fallback logic is executed if a `CircuitBreakerOpenException`
    is thrown.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`@Fallback`，则如果抛出`CircuitBreakerOpenException`，将执行备用逻辑。
- en: If `@Retry` is used, each retry is processed by the circuit breaker and recorded
    as either a success or a failure.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`@Retry`，则每次重试都由断路器处理，并记录为成功或失败。
- en: If `@Bulkhead` is used, the circuit breaker is checked before attempting to
    enter the bulkhead.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`@Bulkhead`，则在尝试进入舱壁之前会检查断路器。
- en: See Also
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To learn more about the circuit breaker pattern in MicroProfile Fault Tolerance,
    see the following page on GitHub:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关MicroProfile Fault Tolerance中断路器模式的更多信息，请参阅GitHub上的以下页面：
- en: '[Circuit Breaker](https://oreil.ly/iOWuR)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[断路器](https://oreil.ly/iOWuR)'
- en: 8.5 Disabling Fault Tolerance
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.5 禁用容错
- en: Problem
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to disable fault tolerance in some environments.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在某些环境中禁用容错。
- en: Solution
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: The MicroProfile Fault Tolerance specification provides a special parameter
    to enable or disable fault-tolerance logic either globally or individually.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 微配置Fault Tolerance规范提供了一个特殊参数，可以全局或单独地启用或禁用容错逻辑。
- en: 'There are some cases in which you might want to disable fault-tolerance logic.
    The MicroProfile Fault Tolerance specification defines a special parameter called
    `enabled` that can be used to enable or disable the logic from the configuration
    file either globally or individually:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，您可能希望禁用容错逻辑。MicroProfile 容错规范定义了一个特殊参数`enabled`，可以用来从配置文件中全局或个别地启用或禁用逻辑：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_fault_tolerance_CO10-1)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_fault_tolerance_CO10-1)'
- en: Disable at the method level; this should be on the same line
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法级别禁用；这应该在同一行
- en: '[![2](Images/2.png)](#co_fault_tolerance_CO10-2)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_fault_tolerance_CO10-2)'
- en: Disable at the class level
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在类级别禁用
- en: '[![3](Images/3.png)](#co_fault_tolerance_CO10-3)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_fault_tolerance_CO10-3)'
- en: Disable globally by type
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按类型全局禁用
- en: '[![4](Images/4.png)](#co_fault_tolerance_CO10-4)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_fault_tolerance_CO10-4)'
- en: Disable all fault tolerance
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用所有容错功能
