["```java\n<project>\n    ...\n    <build>\n        <plugins>\n            ...\n            <plugin>\n                <groupId>com.google.cloud.tools</groupId>\n                <artifactId>jib-maven-plugin</artifactId>\n                <version>3.1.4</version>\n                <configuration>\n                    <to>\n                        <image>${pathTo.image}</image>\n                    </to>\n                </configuration>\n            </plugin>\n            ...\n        </plugins>\n    </build>\n    ...\n</project>\n```", "```java\nmvn compile jib:build -DpathTo.image=registry.hub.docker.com/myuser/repo\n```", "```java\nplugins {\n  id 'com.google.cloud.tools.jib' version '3.1.4'\n}\n```", "```java\ngradle jib --image=registry.hub.docker.com/myuser/repo\n```", "```java\nmvn quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-container-image-jib\"\n```", "```java\nquarkus.container-image.builder=jib ![1](Images/1.png)\n\nquarkus.container-image.registry=quay.io ![2](Images/2.png)\nquarkus.container-image.group=repo ![3](Images/3.png)\nquarkus.container-image.name=demo ![4](Images/4.png)\nquarkus.container-image.tag=1.0.0-SNAPSHOT ![5](Images/5.png)\n```", "```java\nmvn package -Dquarkus.container-image.push=true\n```", "```java\n<plugin>\n    <groupId>org.eclipse.jkube</groupId>\n    <artifactId>kubernetes-maven-plugin</artifactId>\n    <version>${jkube.version}</version>\n</plugin>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n    https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>11</java.version>\n        <spring-native.version>0.10.5</spring-native.version>\n        <jkube.version>1.5.1</jkube.version>\n        <jkube.docker.registry>registry.hub.docker.com</jkube.docker.registry> ![1](Images/1.png)\n        <repository>myuser</repository> ![2](Images/2.png)\n        <tag>${project.version}</tag> ![3](Images/3.png)\n        <jkube.generator.name> ${jkube.docker.registry}/${repository}/${project.name}:${tag} </jkube.generator.name>\n    </properties>\n    <dependencies> ... </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.eclipse.jkube</groupId>\n                <artifactId>kubernetes-maven-plugin</artifactId>\n                <version>${jkube.version}</version>\n            </plugin> ... </plugins>\n    </build> ... </project>\n```", "```java\nmvn k8s:build\n```", "```java\n<jkube.generator.name>\n    ${jkube.docker.registry}/${repository}/${project.name}:${tag}\n</jkube.generator.name>\n```", "```java\nmvn k8s:build -Djkube.docker.registry=quay.io -Drepository=repo -Dtag=0.0.1\n```", "```java\nmvn k8s:build k8s:push -Djkube.docker.registry=quay.io \\\n      -Drepository=repo -Dtag=0.0.1\n```", "```java\nplugins {\n  id 'org.eclipse.jkube.kubernetes' version '1.5.1'\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-kubernetes</artifactId>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>io.dekorate</groupId>\n  <artifactId>kubernetes-spring-starter</artifactId>\n  <version>2.7.0</version>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>io.dekorate</groupId>\n    <artifactId>kubernetes-annotations</artifactId>\n    <version>2.7.0</version>\n</dependency>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n    <properties>\n        <java.version>11</java.version>\n        <spring-native.version>0.10.5</spring-native.version>\n        <kubernetes-spring-starter.version>\n              2.7.0\n        </kubernetes-spring-starter.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>io.dekorate</groupId>\n            <artifactId>kubernetes-spring-starter</artifactId>\n            <version>${kubernetes-spring-starter.version}</version>\n        </dependency>\n        ...\n    </dependencies>\n    ...\n</project>\n```", "```java\ndekorate.kubernetes.serviceType=LoadBalancer\n```", "```java\nmvn clean package\n```", "```java\n---\napiVersion: apps/v1\nkind: Deployment ![1](Images/1.png)\nmetadata:\n  annotations:\n    app.dekorate.io/vcs-url: <<unknown>>\n  labels:\n    app.kubernetes.io/version: 0.0.1-SNAPSHOT ![2](Images/2.png)\n    app.kubernetes.io/name: demo ![2](Images/2.png)\n  name: demo ![3](Images/3.png)\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/version: 0.0.1-SNAPSHOT ![2](Images/2.png)\n      app.kubernetes.io/name: demo ![2](Images/2.png)\n  template:\n    metadata:\n      annotations:\n        app.dekorate.io/vcs-url: <<unknown>>\n      labels:\n        app.kubernetes.io/version: 0.0.1-SNAPSHOT ![2](Images/2.png)\n        app.kubernetes.io/name: demo ![2](Images/2.png)\n    spec:\n      containers:\n        - env:\n            - name: KUBERNETES_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n          image: repo/demo:0.0.1-SNAPSHOT ![4](Images/4.png)\n          imagePullPolicy: IfNotPresent\n          name: demo\n          ports:\n            - containerPort: 8080 ![5](Images/5.png)\n              name: http\n              protocol: TCP\n---\napiVersion: v1\nkind: Service ![6](Images/6.png)\nmetadata:\n  annotations:\n    app.dekorate.io/vcs-url: <<unknown>>\n  labels:\n    app.kubernetes.io/name: demo ![2](Images/2.png)\n    app.kubernetes.io/version: 0.0.1-SNAPSHOT ![2](Images/2.png)\n  name: demo\nspec:\n  ports:\n    - name: http\n      port: 80 ![7](Images/7.png)\n      targetPort: 8080 ![5](Images/5.png)\n  selector:\n    app.kubernetes.io/name: demo\n    app.kubernetes.io/version: 0.0.1-SNAPSHOT\n  type: LoadBalancer ![8](Images/8.png)\n```", "```java\nkubectl apply -f target/classes/META-INF/dekorate/kubernetes.yml\n```", "```java\n<?xml version=\"1.0\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttps://maven.apache.org/xsd/maven-4.0.0.xsd\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example.demo</groupId>\n    <artifactId>demo</artifactId>\n    <name>demo</name>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <compiler-plugin.version>3.8.1</compiler-plugin.version>\n        <maven.compiler.parameters>true</maven.compiler.parameters>\n        <maven.compiler.target>11</maven.compiler.target>\n        <maven.compiler.source>11</maven.compiler.source>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <quarkus-plugin.version>2.5.0.Final</quarkus-plugin.version>\n        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n        <quarkus.platform.version>2.5.0.Final</quarkus.platform.version>\n        <surefire-plugin.version>3.0.0-M5</surefire-plugin.version>\n        <jkube.version>1.5.1</jkube.version>\n        <jkube.generator.name> ${quarkus.container-image.registry}/${quarkus.container-image.group}\n            /${quarkus.container-image.name}:${quarkus.container-image.tag} ![1](Images/1.png)\n        </jkube.generator.name>\n        <jkube.enricher.jkube-service.type> NodePort </jkube.enricher.jkube-service.type> ![2](Images/2.png)\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>${quarkus.platform.group-id}</groupId>\n                <artifactId>${quarkus.platform.artifact-id}</artifactId>\n                <version>${quarkus.platform.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-container-image-jib</artifactId>\n        </dependency> ... </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.eclipse.jkube</groupId>\n                <artifactId>kubernetes-maven-plugin</artifactId>\n                <version>${jkube.version}</version>\n                <configuration>\n                    <buildStrategy>jib</buildStrategy> ![3](Images/3.png)\n                </configuration>\n            </plugin> ... </plugins>\n    </build> ... </project>\n```", "```java\nmvn package k8s:build k8s:resource \\\n    -Dquarkus.container-image.registry=quay.io \\\n    -Dquarkus.container-image.group=repo \\\n    -Dquarkus.container-image.name=demo \\\n    -Dquarkus.container-image.tag=1.0.0-SNAPSHOT\n```", "```java\n|-- kubernetes\n|   |-- demo-deployment.yml\n|   `-- demo-service.yml\n`-- kubernetes.yml\n```", "```java\nkubectl apply -f target/classes/META-INF/jkube/kubernetes.yml\n```", "```java\nmvn k8s:apply\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: demo\n  name: demo\nspec:\n  strategy:\n    type: Recreate ![1](Images/1.png)\n  revisionHistoryLimit: 15 ![2](Images/2.png)\n  replicas: 4\n  selector:\n    matchLabels:\n      app: demo\n  template:\n    metadata:\n      labels:\n        app: demo\n    spec:\n      containers:\n      - image: quay.io/repo/demo:1.0.0-SNAPSHOT\n        imagePullPolicy: IfNotPresent\n        name: quarkus\n        ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```java\n kubectl rollout history deployment/demo\n```", "```java\n kubectl rollout undo deployment/demo --to-revision=[revision-number]\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: demo\n  name: demo\nspec:\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1 ![1](Images/1.png)\n      maxSurge: 3 ![2](Images/2.png)\n  replicas: 4 ![3](Images/3.png)\n  selector:\n    matchLabels:\n      app: demo\n  template:\n    metadata:\n      labels:\n        app: demo\n    spec:\n      containers:\n      - image: quay.io/repo/demo:1.0.0-SNAPSHOT\n        imagePullPolicy: IfNotPresent\n        name: quarkus\n        ports:\n        - containerPort: 8080\n          name: http\n          protocol: TCP\n```", "```java\n    kubectl apply -f blue_deployment_sample.yml\n    ```", "```java\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: demo\n        version: blue\n      name: demo-blue\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: demo\n          version: blue\n      template:\n        metadata:\n          creationTimestamp: null\n          labels:\n            app: demo\n            version: blue\n        spec:\n          containers:\n            - image: nginx:1.14.2\n              name: nginx-demo\n              imagePullPolicy: IfNotPresent\n              ports:\n                - containerPort: 80\n              resources: {}\n    ```", "```java\n    kubectl expose deployment demo-blue --selector=\"version=blue\"\n            --type=LoadBalancer\n    ```", "```java\n    kubectl apply -f green_deployment_sample.yml\n    ```", "```java\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: demo\n        version: green\n      name: demo-green\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: demo\n          version: green\n      template:\n        metadata:\n          creationTimestamp: null\n          labels:\n            app: demo\n            version: green\n        spec:\n          containers:\n            - image: nginx:1.14.2\n              name: nginx-demo\n              imagePullPolicy: IfNotPresent\n              ports:\n                - containerPort: 80\n              resources: {}\n    ```", "```java\n    kubectl patch svc/demo -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n    ```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```", "```java\ndependencies {\n  compile(\"org.springframework.boot:spring-boot-starter-actuator\")\n}\n```", "```java\n<dependency>\n   <groupId>io.quarkus</groupId>\n   <artifactId>quarkus-smallrye-health</artifactId>\n</dependency>\n```", "```java\ndependencies {\n    implementation 'io.quarkus:quarkus-smallrye-health'\n}\n```", "```java\nmvn clean package\n```", "```java\n---\napiVersion: v1\nkind: Service\n#[...]\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    app.dekorate.io/vcs-url: <<unknown>>\n  labels:\n    app.kubernetes.io/version: 0.0.1-SNAPSHOT\n    app.kubernetes.io/name: demo\n  name: demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/version: 0.0.1-SNAPSHOT\n      app.kubernetes.io/name: demo\n  template:\n    metadata:\n      annotations:\n        app.dekorate.io/vcs-url: <<unknown>>\n      labels:\n        app.kubernetes.io/version: 0.0.1-SNAPSHOT\n        app.kubernetes.io/name: demo\n    spec:\n      containers:\n        - env:\n            - name: KUBERNETES_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n          image: repo/demo:0.0.1-SNAPSHOT\n          imagePullPolicy: IfNotPresent\n          livenessProbe: ![1](Images/1.png)\n            failureThreshold: 3 ![2](Images/2.png)\n            httpGet: ![3](Images/3.png)\n              path: /actuator/info\n              port: 8080\n              scheme: HTTP\n            initialDelaySeconds: 0 ![4](Images/4.png)\n            periodSeconds: 30 ![5](Images/5.png)\n            successThreshold: 1 ![6](Images/6.png)\n            timeoutSeconds: 10 ![7](Images/7.png)\n          name: demo\n          ports:\n            - containerPort: 8080\n              name: http\n              protocol: TCP\n          readinessProbe: ![1](Images/1.png)\n            failureThreshold: 3 ![2](Images/2.png)\n            httpGet: ![3](Images/3.png)\n              path: /actuator/health\n              port: 8080\n              scheme: HTTP\n            initialDelaySeconds: 0 ![4](Images/4.png)\n            periodSeconds: 30 ![5](Images/5.png)\n            successThreshold: 1 ![6](Images/6.png)\n            timeoutSeconds: 10 ![7](Images/7.png)\n```", "```java\nmvn quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-kubernetes\"\n```", "```java\nquarkus.kubernetes.resources.limits.cpu=200m\nquarkus.kubernetes.resources.limits.memory=230Mi\nquarkus.kubernetes.resources.requests.cpu=100m\nquarkus.kubernetes.resources.requests.memory=115Mi\n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    app.quarkus.io/build-timestamp: 2021-12-11 - 16:51:44 +0000\n  labels:\n    app.kubernetes.io/version: 1.0.0-SNAPSHOT\n    app.kubernetes.io/name: demo\n  name: demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/version: 1.0.0-SNAPSHOT\n      app.kubernetes.io/name: demo\n  template:\n    metadata:\n      annotations:\n        app.quarkus.io/build-timestamp: 2021-12-11 - 16:51:44 +0000\n      labels:\n        app.kubernetes.io/version: 1.0.0-SNAPSHOT\n        app.kubernetes.io/name: demo\n    spec:\n      containers:\n        - env:\n            - name: KUBERNETES_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n          image: quay.io/repo/demo:1.0.0-SNAPSHOT\n          imagePullPolicy: Always\n          name: demo\n          resources:\n            limits:\n              cpu: 200m ![1](Images/1.png)\n              memory: 230Mi ![1](Images/1.png)\n            requests:\n              cpu: 100m ![2](Images/2.png)\n              memory: 115Mi ![2](Images/2.png)\n```", "```java\nwantedReplicas = ceil[currentReplicas * (currentMetricValue / wantedMetricValue)]\n```", "```java\nquarkus.kubernetes.resources.limits.cpu=200m\nquarkus.kubernetes.resources.limits.memory=230Mi\nquarkus.kubernetes.resources.requests.cpu=100m\nquarkus.kubernetes.resources.requests.memory=115Mi\n```", "```java\nkubectl autoscale deployment demo --cpu-percent=80 --min=1 --max=10\n```", "```java\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-registry-prometheus</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```", "```java\nmanagement.endpoints.web.exposure.include=health,info,prometheus\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n    https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <!--[...]-->\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.eclipse.jkube</groupId>\n                <artifactId>kubernetes-maven-plugin</artifactId>\n                <version>${jkube.version}</version>\n                <executions>\n                    <execution>\n                        <id>resources</id>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>resource</goal> ![1](Images/1.png)\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <generator> ![2](Images/2.png)\n                        <config>\n                            <spring-boot>\n                                <prometheusPort> ![3](Images/3.png) 9779 </prometheusPort>\n                            </spring-boot>\n                        </config>\n                    </generator>\n                    <enricher> ![4](Images/4.png)\n                        <config>\n                            <jkube-prometheus>\n                                <prometheusPort> ![3](Images/3.png) 9779 </prometheusPort>\n                            </jkube-prometheus>\n                        </config>\n                    </enricher>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```", "```java\nmvn clean package k8s:build k8s:resource \\\n    -Djkube.docker.registry=quay.io \\\n    -Drepository=repo \\\n    -Dtag=0.0.1\n```", "```java\napiVersion: v1\nkind: List\nitems:\n- apiVersion: v1\n  kind: Service\n  metadata:\n    annotations:\n      prometheus.io/path: /metrics\n      prometheus.io/port: \"9779\"\n      prometheus.io/scrape: \"true\"\n```", "```java\navg(rate(jvm_gc_pause_seconds_sum[1m])) by (cause)\n```", "```java\nmvn quarkus:add-extension \\\n    -Dextensions=\"quarkus-micrometer-registry-prometheus,\n quarkus-opentelemetry-exporter-otlp\"\n```", "```java\ncustom.host = ${exporter.host:localhost} ![1](Images/1.png)\nquarkus.kubernetes.env.vars.otlp-exporter=${custom.host:localhost} ![2](Images/2.png)\nquarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://${custom.host}:4317 ![3](Images/3.png)\n```", "```java\npackage com.example.demo;\n\nimport io.micrometer.core.annotation.Timed;\nimport io.opentelemetry.api.trace.*;\nimport io.opentelemetry.context.Context;\n\nimport javax.ws.rs.*;\nimport java.util.logging.Logger;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/greeting\")\npublic class GreetingResource {\n    private static final String template = \"Hello, %s!\";\n\n    private final static Logger log;\n\n    static {\n        log = Logger.getLogger(GreetingResource.class.getName());\n    }\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    @Timed(value=\"custom\")\n    public Greeting greeting(@QueryParam(\"name\") String name) {\n        pause();\n        return new Greeting(String.format(template, name));\n    }\n\n    private void pause() {\n        Span span = Span.fromContext(Context.current())\n                .setAttribute(\"pause\", \"start\"); ![1](Images/1.png)\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            span.setStatus(StatusCode.ERROR, \"Execution was interrupted\");\n            span.setAttribute(\"unexpected.pause\", \"exception\");\n            span.recordException(e); ![2](Images/2.png)\n            log.severe(\"Thread interrupted\");\n        }\n    }\n}\n```", "```java\nmvn package -Dquarkus.container-image.build=true \\\n    -Dquarkus.container-image.push=true \\\n    -Dquarkus.kubernetes.deploy=true\n```", "```java\n    avg(rate(custom_seconds_sum[1m])) by (exception)\n    ```"]