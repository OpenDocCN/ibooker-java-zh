- en: Chapter 18\. Open to Sealed Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章。开放给密封类
- en: Our systems are composed of types and operations, nouns and verbs. In Java,
    nouns are expressed as classes and interfaces, verbs as methods; but Kotlin adds
    sealed class hierarchies and freestanding functions. What do they bring to the
    party?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们的系统由类型和操作组成，名词和动词。在Java中，名词以类和接口的形式表达，动词则以方法的形式存在；但是Kotlin添加了密封类层次结构和独立函数。它们为此增添了什么新功能呢？
- en: Change is a constant challenge in designing software. The more people use our
    software, the more they think of things they want it to do. To support new use
    cases, we need to add new functions that work with existing data types, and new
    data types that work with existing functions. If our design is well aligned with
    the way the software has to evolve, we can add new features by adding new code
    and making few, localized changes to our existing code. If it isn’t well aligned,
    we will have to change many functions when we add a new data type, or change many
    data types when we need to add a function.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 变化是设计软件时持续面对的挑战。使用我们软件的人越多，他们就会想到越多他们希望软件执行的任务。为了支持新的用例，我们需要添加能够处理现有数据类型的新函数，以及能够与现有函数配合使用的新数据类型。如果我们的设计与软件演变的方式高度一致，我们可以通过添加新代码和对现有代码进行少量的局部更改来添加新功能。如果不一致，当我们添加新数据类型时，我们将不得不更改许多函数，或者在需要添加功能时更改许多数据类型。
- en: 'We feel this tension between the variability of data types and of functions
    most keenly in the core entities of our domain model. For example, the traveler’s
    itinerary is a core entity of our Travelator application. Many features of the
    application present views of, alter the contents of, or calculate information
    about itineraries. It’s no surprise then that many of the feature requests from
    our users affect our `Itinerary` type. Our travelers want to include more kinds
    of things in their itineraries: not just journeys and accommodation, as we saw
    in [Chapter 10](ch10.html#functions-to-extension-functions), but now restaurant
    bookings and attractions along the route. They also want to do more things with
    their itineraries. In [Chapter 14](ch14.html#accumulating-objects-to-transformations),
    we saw how we estimate their cost, but our customers also want to compare them
    by cost, time, or comfort, view them on a map, import them into their calendar,
    share them with their friends…their imagination is endless.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在领域模型的核心实体中特别感受到数据类型和函数变化的张力。例如，旅行者的行程表是我们 Travelator 应用程序的核心实体。应用程序的许多功能展示、修改或计算关于行程的信息。因此，用户的许多功能请求影响了我们的`Itinerary`类型并不奇怪。我们的旅行者希望在他们的行程中包括更多类型的事物：不仅仅是旅程和住宿，正如我们在[第10章](ch10.html#functions-to-extension-functions)中看到的，现在还包括沿途的餐馆预订和景点。他们还希望在行程中做更多的事情。在[第14章](ch14.html#accumulating-objects-to-transformations)中，我们看到如何估算它们的成本，但我们的客户也希望按照成本、时间或舒适度进行比较，在地图上查看它们，将它们导入日历，与朋友分享...他们的想象力是无限的。
- en: 'When we last looked at the `Itinerary` class in [Chapter 14](ch14.html#accumulating-objects-to-transformations),
    we were modeling an itinerary as a data class, with a property for the route and
    another for the accommodation required along the route:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们上次查看[第14章](ch14.html#accumulating-objects-to-transformations)中的`Itinerary`类时，我们将行程表建模为数据类，其中包含路线属性和沿途所需的住宿属性：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Example 18.1 [accumulator.17:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.1&show=diff)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.1 [accumulator.17:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.1&show=diff)'
- en: 'Since then, we have added more features to the application and, hence, more
    types of items to the itinerary. We found it increasingly cumbersome to hold each
    type of itinerary item in a separate collection, because too much of our code
    involved combining those collections or applying the same filters and transforms
    to separate collections. So we decided that an `Itinerary` would maintain a single
    collection of `ItineraryItem` rather than keep each type of item in a separate
    collection:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，我们已向应用程序添加了更多功能，因此，也向行程表中添加了更多类型的项目。我们发现，将每种类型的行程项目保存在单独的集合中变得越来越繁琐，因为我们的大部分代码涉及合并这些集合或对不同集合应用相同的过滤器和转换。因此，我们决定，一个`Itinerary`将维护一个单一的`ItineraryItem`集合，而不是将每种类型的项目保存在单独的集合中：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 18.2 [open-to-sealed.0:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.2&show=diff)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例18.2 [open-to-sealed.0:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.2&show=diff)'
- en: '`ItineraryItem` is an interface, implemented by the concrete item types we
    saw before: `Journey` and `Accommodation` and new types `RestaurantBooking` and
    `Attraction`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItineraryItem`是一个接口，由我们之前看到的具体项类型实现：`Journey`、`Accommodation`，以及新类型`RestaurantBooking`和`Attraction`：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Example 18.3 [open-to-sealed.0:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.3&show=diff)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例18.3 [open-to-sealed.0:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.3&show=diff)'
- en: Operations on `Itinerary` don’t depend on the concrete type of its items. For
    example, to display the itinerary on a map, we create a `MapOverlay` that will
    be rendered on top of map tiles on the frontend. The overlay for an `Itinerary`
    is the group of the overlays for all the items it contains. The `Itinerary` class
    and its clients don’t know, or need to know, how each item represents itself as
    a map overlay.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Itinerary`的操作不依赖于其项的具体类型。例如，要在地图上显示行程表，我们创建一个`MapOverlay`，它将在前端的地图瓦片上渲染。`Itinerary`的叠加层是它包含的所有项的叠加层组。`Itinerary`类及其客户端不知道也不需要知道每个项如何表示自己作为地图叠加层。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 18.4 [open-to-sealed.0:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.4&show=diff)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例18.4 [open-to-sealed.0:src/main/java/travelator/itinerary/Itinerary.kt]](https://java-to-kotlin.dev/code.html?ref=18.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.4&show=diff)'
- en: This polymorphism makes it very easy to add new types of `ItineraryItem` to
    the system without having to change the parts of the application that use the
    `Itinerary` type.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种多态性使得向系统添加新类型的`ItineraryItem`非常容易，而不必更改使用`Itinerary`类型的应用程序部分。
- en: For a while now, though, we haven’t had to do that. Recently, we find that most
    of the new functionality we add to Travelator involves adding new operations to
    `Itinerary` and `ItineraryItem` rather than new types of `ItineraryItem`. Changes
    to the `Itinerary​I⁠tem` interface and its implementations are a common source
    of merge conflicts between team members who are working on different features.
    With every new feature, the `ItineraryItem` gets larger. It seems to attract behavior
    to support distantly related parts of the application, with properties to support
    rendering, cost estimation, ranking by comfort, maps drawing, and more hidden
    beyond that `…and other methods`. Paradoxically, in the core of our application,
    object-oriented polymorphism is *increasing* coupling!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，最近我们发现，大部分添加到Travelator的新功能涉及向`Itinerary`和`ItineraryItem`添加新操作，而不是新的`ItineraryItem`类型。对`ItineraryItem`接口及其实现的更改常常是导致团队成员在不同功能上工作时发生合并冲突的常见原因。随着每个新功能的增加，`ItineraryItem`变得越来越庞大。它似乎吸引了支持应用程序远程相关部分的行为，具备支持渲染、成本估算、按舒适度排名、绘制地图等属性，以及更多隐藏的内容在`…及其他方法`之后。悖论的是，在我们应用程序的核心，面向对象的多态性正在*增加*耦合！
- en: 'Object-oriented polymorphism enables variability of data types with an infrequently
    changing set of operations. For a while, that was what our codebase needed, but
    now that it has stabilized, we need the opposite: variability of operations applied
    to an infrequently changing set of data types.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的多态性使得数据类型的变化可以与一组不经常变化的操作相结合。一段时间以来，这正是我们代码库所需要的，但现在它已经稳定下来，我们需要相反的：针对一组不经常变化的数据类型进行操作的多样性。
- en: If we were writing in Java (at least up to Java 16), there is no language feature
    to help us cope with variability in this dimension. Java’s principal feature to
    support variability is object-oriented polymorphism, and that doesn’t help when
    operations change more frequently than the set of data types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用Java（至少到Java 16），在这个维度上，没有语言特性可以帮助我们应对变化性。Java支持变化性的主要特性是面向对象的多态性，但当操作频繁变化时，它并不能提供帮助，因为操作变化的频率超过了数据类型的变化。
- en: 'We could use the [double dispatch](https://oreil.ly/8m2HL) pattern, but it
    involves a lot of boilerplate code and, because it does not play well with checked
    exceptions, is not widely used in Java. Instead, Java programmers often resort
    to runtime type checks, using the `instanceof` and downcast operators to run different
    code for different classes of object:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[双重分派](https://oreil.ly/8m2HL)模式，但它涉及大量样板代码，并且由于与检查异常不兼容，Java 中并不常用。相反，Java
    程序员经常采用运行时类型检查，使用`instanceof`和向下转型运算符来针对不同类的对象运行不同的代码：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Example 18.5 [open-to-sealed.0:src/main/java/travelator/itinerary/ItineraryItems.java]](https://java-to-kotlin.dev/code.html?ref=18.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.5&show=diff)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.5 [open-to-sealed.0:src/main/java/travelator/itinerary/ItineraryItems.java]](https://java-to-kotlin.dev/code.html?ref=18.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.5&show=diff)'
- en: 'That `IllegalStateException` shows that this approach is risky. Whereas the
    compiler can type check our calls to polymorphic methods, our hand-coded runtime
    type checks and casts are explicitly circumventing compile-time checks. The type
    checker cannot tell whether our casts are correct or our conditional statement
    is *exhaustive*: whether it applies to all possible subclasses. If returning a
    value from the method, we have to write an `else` clause to return a dummy value
    or throw an exception, even if we have branches for every subclass of `ItineraryItem`,
    and the else clause “cannot possibly be executed™.”'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那个`IllegalStateException`显示这种方法是有风险的。尽管编译器可以对我们对多态方法的调用进行类型检查，但我们手工编写的运行时类型检查和强制类型转换明确地规避了编译时检查。类型检查器无法判断我们的强制类型转换是否正确或我们的条件语句是否*穷尽*：是否适用于所有可能的子类。如果从方法返回一个值，我们必须编写一个`else`子句来返回一个虚拟值或抛出异常，即使我们为`ItineraryItem`的每个子类都有分支，但“不可能执行™”的`else`子句也不能执行。
- en: Even if we cover all the subtypes of `ItineraryItem` when we write the code,
    if we later add new types, we have to find all such code and update it. It turns
    out that we didn’t do that here, so if we add an `Attraction` to an `Itinerary`,
    this code will fail with an `IllegalArgumentException`. OO solves this problem,
    but we circumvented the solution because we were tired of having to update lots
    of classes when we add an operation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在编写代码时覆盖了所有`ItineraryItem`的子类型，如果稍后添加新类型，我们也必须找到所有这样的代码并进行更新。结果表明，我们在这里没有这样做，所以如果将`Attraction`添加到`Itinerary`中，此代码将因`IllegalArgumentException`而失败。面向对象解决了这个问题，但我们规避了解决方案，因为我们厌倦了在添加操作时不得不更新大量类。
- en: 'Type checking and downcasting are possible in Kotlin, too, and carry the same
    overheads and risks. However, Kotlin has another mechanism for organizing classes
    and behavior that makes runtime type checks safe and convenient: *sealed classes*.
    A sealed class is an abstract class with a fixed set of direct subclasses. We
    must define the sealed class and its subclasses in the same compilation unit and
    package; the compiler prevents us from extending the sealed class elsewhere. Thanks
    to this restriction, runtime type checks on sealed class hierarchies do not have
    the same problem as runtime type checks in Java. The static type checker can guarantee
    that `when` expressions that perform runtime type checks for a subtype of a sealed
    class cover all possible cases and only the possible cases.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 也可以进行类型检查和向下转型，而且具有相同的开销和风险。但是，Kotlin 还有另一种机制来组织类和行为，使得运行时类型检查安全且方便：*密封类*。密封类是一个具有固定直接子类集的抽象类。我们必须在同一编译单元和包中定义密封类及其子类；编译器会阻止我们在其他地方扩展密封类。由于这种限制，密封类层次结构的运行时类型检查不会像
    Java 中那样存在问题。静态类型检查器可以保证对密封类子类型进行运行时类型检查的`when`表达式涵盖所有可能的情况，而且仅涵盖可能的情况。
- en: When Statements Are Not Checked for Exhaustiveness
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当语句不被检查为穷尽时。
- en: The compiler checks `when` expressions for exhaustiveness but does not check
    `when` *statements*; `when` becomes a statement if the value of the entire `when`
    expression is not used. You can force the compiler to check for exhaustiveness
    by using the result of the `when`, even though it is of type `Unit`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器对`when`表达式进行穷尽性检查，但不检查`when`*语句*；如果整个`when`表达式的值不被使用，则`when`变成语句。您可以通过使用`when`的结果来强制编译器进行穷尽性检查，即使它的类型是`Unit`。
- en: If the `when` is the only statement in the body of a function, you can refactor
    the function to single-expression form. If `when` is the last statement in a multistatement
    function, you can explicitly use its value with the `return` keyword. When the
    `when` is in the middle of the function body, extracting it to its own function
    might make sense.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `when` 是函数体中唯一的语句，您可以将函数重构为单表达式形式。如果 `when` 是多语句函数中的最后一条语句，您可以使用 `return`
    关键字显式地使用其值。当 `when` 在函数体中间时，将其提取为自己的函数可能是有意义的。
- en: 'When none of those options apply, you can use the following utility function
    to force an exhaustiveness check:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些选项都不适用时，您可以使用以下实用函数来强制进行详尽性检查：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When used like this, it will prevent compilation when `when` is not exhaustive:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种用法中，当 `when` 不详尽时，将阻止编译：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Compared to polymorphic methods, sealed classes and `when` expressions make
    it easy to add new operations that apply to a fixed type hierarchy, although we
    still have to change all those operations if we add a new type to that hierarchy.
    At this point the compiler will help us by checking that all those operations
    cover all possible types in the hierarchy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与多态方法相比，密封类和 `when` 表达式使得添加适用于固定类型层次结构的新操作变得简单，尽管如果向该层次结构添加新类型仍需更改所有这些操作。此时编译器将通过检查确保所有这些操作涵盖层次结构中的所有可能类型。
- en: Polymorphism or Sealed Classes?
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多态还是密封类？
- en: Some languages have mechanisms that let us vary types *and* operations without
    modifying existing code. Haskell has type classes, Scala has implicit parameters,
    Rust has traits, Swift has protocols, and Clojure and Common Lisp have polymorphic
    functions that dispatch on the classes of multiple arguments.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言具有机制，允许我们在不修改现有代码的情况下变化类型和操作。Haskell 拥有类型类，Scala 拥有隐式参数，Rust 拥有特质，Swift
    拥有协议，而 Clojure 和 Common Lisp 则拥有根据多个参数的类分发的多态函数。
- en: Kotlin doesn’t have any equivalent. When we’re designing in Kotlin, we have
    to choose between object-oriented polymorphism or sealed classes based on the
    dimension—types or operations—we expect to vary most frequently as the program
    evolves. Object-oriented polymorphism is preferable when the set of data types
    varies more frequently than the set of operations on those data types, and sealed
    class hierarchies when the set of operations varies more frequently than the set
    of data types they apply to.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 没有类似的功能。在 Kotlin 中设计时，我们必须根据程序在演变过程中最频繁变化的维度——类型或操作——选择面向对象的多态或密封类。当数据类型集更频繁地变化时，面向对象的多态更为适用；而当操作集更频繁地变化时，则适合使用密封类层次结构。
- en: Only Typecast Down a Sealed Class Hierarchy
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只在密封类层次结构中向下转型
- en: Only use typecasts to cast from the root of a sealed class hierarchy to one
    of the children in an exhaustive `when` expression. Otherwise, it is risky to
    cast away from the static type. The actual class used to implement a value may
    have operations that violate the constraints expressed by its static type.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只在密封类层次结构的根部使用类型转换，将其转换为详尽的 `when` 表达式中的一个子类。否则，从静态类型转型是有风险的。实现值的实际类可能具有违反其静态类型表达的约束的操作。
- en: For example, as we saw in [Chapter 6](ch06.html#java-to-kotlin-collections),
    the static type `List` prevents mutation, but Kotlin’s higher-order functions
    return lists that can be mutated if you downcast from `List` to `MutableList`.
    A function that downcasts a list argument from `List` to `MutableList` and mutates
    it is likely to introduce bugs in code, because it violates the expectations of
    its callers. It could introduce aliasing errors that are very hard to find, because
    the possibility of spooky action at a distance is not explicit in the type declarations
    of the function’s signature. If a future version of the Kotlin standard library
    returned immutable lists from its higher-order functions, the function would continue
    to compile successfully but crash at runtime.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，正如我们在[第 6 章](ch06.html#java-to-kotlin-collections)中看到的，静态类型 `List` 防止了变异，但
    Kotlin 的高阶函数返回可以被变异的列表，如果您从 `List` 强制转换为 `MutableList`。一个将列表参数从 `List` 强制转换为 `MutableList`
    并进行突变的函数很可能会在代码中引入错误，因为它违反了其调用者的预期。它可能会引入非常难以找到的别名错误，因为函数签名的类型声明中并未明确表达远程操作的可能性。如果
    Kotlin 标准库的未来版本从其高阶函数返回不可变列表，该函数将继续成功编译但在运行时崩溃。
- en: Just because you *can* cast from a super type to a subtype doesn’t mean you
    are intended to. The possibility is likely to be a mere implementation detail.
    A sealed class hierarchy signals that downcasting is intended, supported, and
    made safe by the compiler’s exhaustiveness checks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为你 *可以* 从超类型向子类型转换，并不意味着你打算这样做。这种可能性很可能只是一个实现细节。密封类层次结构表明向下转换是有意的，得到支持，并且通过编译器的完整性检查确保安全。
- en: Converting an Interface to a Sealed Class
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将接口转换为密封类
- en: 'We’re about to add another feature that involves itineraries and itinerary
    items: making the `Itinerary` appear in the traveler’s calendar app. We don’t
    want to add more methods to the already bloated `ItineraryItem` interface and
    couple the core classes of our application’s domain to the needs of another peripheral
    module. It’s time to bite the bullet and convert `ItineraryItem` from an interface
    of polymorphic methods to a sealed class hierarchy and freestanding functions,
    and move those freestanding functions into the modules that use them.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将添加另一个涉及行程和行程项的功能：使 `Itinerary` 出现在旅行者的日历应用程序中。我们不想在已经臃肿的 `ItineraryItem`
    接口中添加更多方法，并且将我们应用程序域的核心类与另一个外围模块的需求耦合在一起。现在是时候下定决心，将 `ItineraryItem` 从多态方法的接口转换为密封类层次结构和独立函数，并将这些独立函数移动到使用它们的模块中。
- en: 'Kotlin 1.4 was current when we wrote this, so we have to define a sealed class
    and its direct subclasses in the same file. Our first step, then, is to use the
    IDE’s “Move Class” refactoring to move the implementations of `ItineraryItem`
    into the same file as the interface. Once we’ve done that, we can turn the interface
    and its implementations into a sealed class hierarchy. IntelliJ does not have
    an automated refactoring for this, so we have to do it by manually editing the
    class definitions. At least moving all the classes into the same file has made
    the task easier:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在撰写本文时，Kotlin 1.4 是当前版本，因此我们必须在同一文件中定义密封类及其直接子类。因此，我们的第一步是使用IDE的“移动类”重构将 `ItineraryItem`
    的实现移动到与接口相同的文件中。完成后，我们可以将接口及其实现转换为密封类层次结构。IntelliJ 没有自动的重构工具，所以我们必须通过手动编辑类定义来完成。至少将所有类移动到同一个文件中已经使任务变得更加容易：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[Example 18.6 [open-to-sealed.2:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.6&show=diff)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.6 [open-to-sealed.2:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.6&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO40-1)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO40-1)'
- en: We declare `ItineraryItem` as a `sealed class` instead of an `interface`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `ItineraryItem` 声明为 `sealed class` 而不是接口。
- en: '[![2](assets/2.png)](#co_introduction_CO40-2)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_CO40-2)'
- en: Because it is now a class, we have to explicitly mark its methods as `abstract`.
    If the interface had any methods with a default implementation, we would have
    had to declare them as `open` so that subclasses could still override them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因为现在它是一个类，我们必须显式地将其方法标记为 `abstract`。如果接口中有任何具有默认实现的方法，我们将不得不将它们声明为 `open`，以便子类仍然可以重写它们。
- en: '[![3](assets/3.png)](#co_introduction_CO40-3)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introduction_CO40-3)'
- en: We replace the declaration of the interface in the concrete item classes with
    a call to the superclass constructor.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用超类构造函数替换具体项类中接口的声明。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Kotlin 1.5 (released as we completed this book) supports sealed *interfaces*,
    which make this refactoring easier. It’s unnecessary to move the subclasses into
    the same file or to call the constructor.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 1.5（在我们完成本书后发布）支持密封 *接口*，这使得此重构更加容易。不必将子类移动到同一个文件中或调用构造函数。
- en: '`ItineraryItem` is now a sealed class. Its operations are still polymorphic
    methods, but we can add *new* operations without changing the `ItineraryItem`
    classes, by writing extension functions that use a `when` expression to safely
    dispatch on the concrete item type.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItineraryItem` 现在是一个密封类。它的操作仍然是多态方法，但我们可以通过编写使用 `when` 表达式安全分派具体项类型的扩展函数，而无需更改
    `ItineraryItem` 类来添加 *新* 操作。'
- en: 'First we’ll write the extension functions that we need to translate an `Itinerary`
    to a calendar. When we’re done, we’ll continue refactoring to make the other operations
    on `ItineraryItem` work the same way:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写我们需要将 `Itinerary` 转换为日历的扩展函数。完成后，我们将继续重构，使 `ItineraryItem` 上的其他操作工作方式相同：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Example 18.7 [open-to-sealed.3:src/main/java/travelator/calendar/ItineraryToCalendar.kt]](https://java-to-kotlin.dev/code.html?ref=18.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.7&show=diff)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.7 [open-to-sealed.3:src/main/java/travelator/calendar/ItineraryToCalendar.kt]](https://java-to-kotlin.dev/code.html?ref=18.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.7&show=diff)'
- en: Now, let’s refactor the rest of the `ItineraryItem` methods from being polymorphic
    methods defined on the (now sealed) class, to extension functions that use `when`
    expressions to switch on the type of item. We’ll walk through the process with
    the `mapOverlay` property.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将 `ItineraryItem` 的其余方法从多态方法重构为扩展函数，这些函数在（现在是密封的）类上使用 `when` 表达式切换项目的类型。我们将通过
    `mapOverlay` 属性的过程进行步骤。
- en: 'When we Alt-Enter on the definition of `mapOverlay` in `ItineraryItem`, the
    context menu includes the action “Convert member to extension”. Can it really
    be that easy? Unfortunately, no. At the time of writing, the IDE action only gets
    us part of the way there and leaves us with code that does not compile:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 `ItineraryItem` 的 `mapOverlay` 定义上按 Alt-Enter 时，上下文菜单中包括操作“将成员转换为扩展”。真的那么简单吗？不幸的是，不是的。在撰写本文时，IDE
    操作仅使我们部分完成，并留下了不能编译的代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Example 18.8 [open-to-sealed.4:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.8&show=diff)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.8 [open-to-sealed.4:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.8&show=diff)'
- en: '[![1](assets/1.png)](#co_introduction_CO41-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_CO41-1)'
- en: The IDE removed the `mapOverlay` method from the `ItineraryItem` class…
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 从 `ItineraryItem` 类中删除了 `mapOverlay` 方法…
- en: '[![2](assets/2.png)](#co_introduction_CO41-2)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_CO41-2)'
- en: …and replaced it with an extension function. Unfortunately, the extension function
    only contains a `TODO` that throws `UnsupportedOperationException`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '…并替换为一个扩展函数。不幸的是，该扩展函数只包含一个抛出 `UnsupportedOperationException` 的 `TODO`。 '
- en: '[![3](assets/3.png)](#co_introduction_CO41-3)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introduction_CO41-3)'
- en: The IDE left `override` modifiers on the `mapOverlay` properties in the subclasses,
    which no longer have a method in the superclass to override.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类中，IDE 在 `mapOverlay` 属性上保留了 `override` 修饰符，但在超类中不再具有要覆盖的方法。
- en: 'We can get the code compiling again by removing the `override` modifiers in
    the subclasses. Then we’ll make the code actually work by implementing the body
    of an extension function as a `when` expression that switches on the type of `ItineraryItem`
    and calls the now monomorphic `mapOverlay` getter on each concrete class:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在子类中移除 `override` 修饰符，我们可以使代码再次编译。然后，通过将扩展函数的主体实现为 `when` 表达式来使代码实际起作用，该表达式根据
    `ItineraryItem` 的类型调用每个具体类上现在单态的 `mapOverlay` getter：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[Example 18.9 [open-to-sealed.5:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.9&show=diff)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.9 [open-to-sealed.5:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.9&show=diff)'
- en: The `when` expression will not compile until we have covered all the subclasses
    of `ItineraryItem`. IntelliJ also highlights each read of the subclass `mapOverlay`
    properties to show that the compiler’s flow-sensitive typing is smart casting
    the implicit `this` reference from `ItineraryItem` to the correct subclass.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们覆盖了 `ItineraryItem` 的所有子类之前，`when` 表达式将无法编译。IntelliJ 还会突出显示每个子类 `mapOverlay`
    属性的读取，以显示编译器的流感知类型智能地将隐式 `this` 引用从 `ItineraryItem` 转换为正确的子类。
- en: 'Now the point of this refactor was to prevent every implementation of `ItineraryItem`
    from having to know about map overlays. At present each still does, because each
    has its own `mapOverlay` property—the one that was originally overriding the property
    in the interface:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这次重构的目的是防止每个 `ItineraryItem` 实现都必须知道地图覆盖层。但目前每个实现仍然知道，因为每个都有自己的 `mapOverlay`
    属性 - 最初在接口中覆盖属性的属性：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[Example 18.10 [open-to-sealed.5:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.10&show=diff)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.10 [open-to-sealed.5:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.10&show=diff)'
- en: 'We can solve this problem by converting the `mapOverlay` properties with “Convert
    member to extension”:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用“将成员转换为扩展”来解决此问题：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Example 18.11 [open-to-sealed.6:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.11&show=diff)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.11 [open-to-sealed.6:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.11&show=diff)'
- en: 'Now `ItineraryItem.mapOverlay` doesn’t appear to have changed at all:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`ItineraryItem.mapOverlay`看起来完全没有变化：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Example 18.12 [open-to-sealed.6:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.12&show=diff)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.12 [open-to-sealed.6:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.12&show=diff)'
- en: 'Look closer, though (well, hover in IntelliJ), and we can see that those property
    accesses are now extension properties, not method calls—`Accommodation` and so
    on no longer depend on `MapOverlay`. And now that `ItineraryItem.mapOverlay` and
    all the subclass properties are extensions, they don’t need to be defined in the
    same file as the sealed classes. We can move them to the module or package where
    they are used, and they won’t clutter our core domain abstraction:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看（好吧，在IntelliJ中悬停），我们会发现这些属性访问现在是扩展属性，而不是方法调用——`Accommodation`等等不再依赖于`MapOverlay`。现在`ItineraryItem.mapOverlay`和所有子类属性都是扩展，它们不需要在同一个文件中定义封闭类。我们可以将它们移动到使用它们的模块或包中，它们不会混淆我们的核心域抽象：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Example 18.13 [open-to-sealed.7:src/main/java/travelator/geo/ItineraryToMapOverlay.kt]](https://java-to-kotlin.dev/code.html?ref=18.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.13&show=diff)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.13 [open-to-sealed.7:src/main/java/travelator/geo/ItineraryToMapOverlay.kt]](https://java-to-kotlin.dev/code.html?ref=18.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.13&show=diff)'
- en: 'We can do the same with the other members of `ItineraryItem`, until the sealed
    class declares only the fundamental properties of the type. For `ItineraryItem`
    at the moment, only the `id` property is truly fundamental: declaring `id` as
    an abstract property on the sealed class forces every subclass to have an identifier.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对`ItineraryItem`的其他成员执行相同的操作，直到封闭类仅声明类型的基本属性。目前对于`ItineraryItem`，只有`id`属性是真正基本的：在封闭类上声明`id`为抽象属性会强制每个子类都具有标识符。
- en: 'Of the other properties, some are clearly there just to support specific features
    of the application, like `mapOverlay` and `toCalendar`. Others, like `description`,
    are in a gray area: they support many features of the application, but are not
    a fundamental property of an `ItineraryItem`. For example, each subtype derives
    its description from its fundamental properties. Nat prefers to define properties
    like these as extensions, while Duncan prefers to define them as members of the
    class. Nat is writing this example, so we’ll make `description` an extension:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其他属性中，有些明显只是支持应用程序特定功能的，如`mapOverlay`和`toCalendar`。其他，如`description`，处于灰色地带：它们支持应用程序的许多功能，但不是`ItineraryItem`的基本属性。例如，每个子类型都从其基本属性派生其描述。Nat
    更喜欢将这样的属性定义为扩展，而 Duncan 更喜欢将它们定义为类的成员。Nat 正在编写此示例，所以我们将`description`定义为扩展：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Example 18.14 [open-to-sealed.8:src/main/java/travelator/itinerary/ItineraryDescription.kt]](https://java-to-kotlin.dev/code.html?ref=18.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.14&show=diff)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.14 [open-to-sealed.8:src/main/java/travelator/itinerary/ItineraryDescription.kt]](https://java-to-kotlin.dev/code.html?ref=18.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.14&show=diff)'
- en: 'You’ll have to make your own judgment call in your own code. That leaves the
    sealed `ItineraryItem` class declaring only the `id` property and its subclasses
    declaring their fundamental properties. The whole hierarchy looks like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的代码中，您将不得不做出自己的判断。这样一来，封闭的`ItineraryItem`类仅声明`id`属性，而其子类声明它们的基本属性。整个层次结构如下：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[Example 18.15 [open-to-sealed.8:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.15&show=diff)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18.15 [open-to-sealed.8:src/main/java/travelator/itinerary/ItineraryItem.kt]](https://java-to-kotlin.dev/code.html?ref=18.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=18.15&show=diff)'
- en: Our `ItineraryItem` model is now a sealed class hierarchy of pure data classes.
    The operations needed by the features of our application are all extension functions
    in the modules for those features. Only the `id` property remains as a polymorphic
    `val`, because it is a fundamental property of the type that is not specific to
    any one feature of the application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 `ItineraryItem` 模型是一个纯数据类的密封类层次结构。应用程序特性需要的操作全部是这些特性模块中的扩展函数。只有 `id` 属性作为多态的
    `val` 保留，因为它是类型的基本属性，不特定于应用程序的任何一个特性。
- en: Moving On
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Moving On
- en: 'As our software evolves, we have to add new data types and new operations to
    our system. In Kotlin, as in Java, object-oriented polymorphism lets us easily
    add new data types without changing the code of existing functions. We can also
    use sealed classes and safe runtime type checks to easily add new functions over
    existing data types without changing the code that defines those types. Which
    we choose depends on what we expect to vary most frequently as the code evolves:
    data types or operations. Managing variability in Kotlin involves mastering when
    to apply these two mechanisms to our domain models.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的软件不断发展，我们必须向系统中添加新的数据类型和新的操作。在 Kotlin 中，就像在 Java 中一样，面向对象的多态性使我们能够轻松地添加新的数据类型，而无需更改现有函数的代码。我们还可以使用密封类和安全的运行时类型检查，轻松地在现有数据类型上添加新的函数，而无需更改定义这些类型的代码。我们的选择取决于代码演化中最频繁变化的部分：数据类型还是操作。在
    Kotlin 中管理变化涉及掌握何时应用这两种机制到我们的领域模型。
- en: 'If our bet turns out to have been wrong, we must refactor from one to the other.
    When all the code is in a single codebase, Kotlin and IntelliJ make refactoring
    between the two forms straightforward. This chapter described going from the kind
    of object-oriented polymorphism we’d write in Java to Kotlin’s sealed classes.
    Going the other way involves refactoring steps described in Martin Fowler’s [*Refactoring:
    Improving the Design of Existing Code*](bibliography01.html#F_RITDOEC_1999), such
    as “Replace Conditional with Polymorphism,” so we won’t cover it in this book.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的赌注最终证明是错误的，我们必须从一个形式重构到另一个形式。当所有代码都在单个代码库中时，Kotlin 和 IntelliJ 使得在两种形式之间进行重构变得非常简单。本章描述了从我们在
    Java 中编写的面向对象多态到 Kotlin 的密封类的过程。反向操作涉及到 Martin Fowler 在 [*重构：改善既有代码的设计*](bibliography01.html#F_RITDOEC_1999)
    中描述的重构步骤，比如“用多态替换条件表达式”，因此我们不会在本书中涵盖这部分内容。
