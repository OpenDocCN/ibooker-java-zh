["```java\nString greetings = service.greeting(\"Luke\");\nSystem.out.println(greetings);\n```", "```java\nservice.greeting(\"Luke\", greeting -> {\n    System.out.println(greeting);\n});\n```", "```java\nSystem.out.println(\"Before\");\nservice.greeting(\"Luke\", greeting -> {\n    System.out.println(greeting);\n});\nSystem.out.println(\"After\");\n```", "```java\nservice.greeting(\"Leia\", greeting -> {\n    System.out.println(\"Leia: \" + greeting);\n});\nservice.greeting(\"Luke\", greeting -> {\n    System.out.println(\"Luke: \" + greeting);\n});\n```", "```java\nservice.greeting(\"Leia\", greeting1 -> {\n    System.out.println(\"Leia: \" + greeting1);\n    service.greeting(\"Luke\", greeting2 -> {\n        System.out.println(\"Luke: \" + greeting2);\n    });\n});\n```", "```java\nString resultForLeia = null;\nString resultForLuke = null;\nBiConsumer<String, String> continuation = ...;\n\nservice.greeting(\"Leia\", greeting -> {\n    resultForLeia = greeting;\n    if (resultForLuke != null) {\n        continuation.accept(resultForLeia, resultForLuke);\n    }\n});\nservice.greeting(\"Luke\", greeting -> {\n    resultForLuke = greeting;\n    if (resultForLeia != null) {\n        continuation.accept(resultForLeia, resultForLuke);\n    }\n    });\n});\n```", "```java\ntry {\n    service.greeting(\"Luke\", greeting -> {\n        System.out.println(greeting);\n    });\n} catch (Exception e) {\n    // does not handle the exception thrown by the remote service\n}\n```", "```java\nservice.greeting(\"Luke\", greeting -> {\n    if (greeting.failed()) {\n        System.out.println(\"D'oh! \" + greeting.failure().getMessage());\n    } else {\n        System.out.println(greeting.result());\n    }\n});\n```", "```java\nservice.greeting(\"Luke\",\n        greeting -> {\n            System.out.println(greeting);\n        },\n        failure -> {\n            System.out.println(\"D'oh! \" + failure.getMessage());\n        }\n);\n```", "```java\nservice.greeting(\"Leia\",\n        greeting1 -> {\n            System.out.println(greeting1);\n            service.greeting(\"Luke\",\n                    greeting2 -> System.out.println(greeting2),\n                    failure2 -> System.out.println(\"D'oh! \" + failure2.getMessage())\n            );\n        },\n        failure1 -> {\n            System.out.println(\"D'oh! \" + failure1.getMessage());\n        }\n);\n```", "```java\nservice.greeting(Arrays.asList(\"Leia\", \"Luke\"),\n        greeting -> {    // Called once for Leia, and once for Luke\n            System.out.println(greeting);\n        },\n        failure -> {\n            System.out.println(\"D'oh! \" + failure.getMessage());\n        }\n);\n```", "```java\nCompletionStage<String> future = service.greeting(\"Luke\");\n```", "```java\nservice.greeting(\"Luke\")\n        .thenApply(response -> response.toUpperCase())\n        .thenAccept(greeting -> System.out.println(greeting));\n```", "```java\nservice.greeting(\"Luke\")\n    .thenCompose(greetingForLuke -> {\n        return service.greeting(\"Leia\")\n                .thenApply(greetingForLeia ->\n                        Tuple2.of(greetingForLuke, greetingForLeia)\n                );\n    })\n    .thenAccept(tuple ->\n            System.out.println(tuple.getItem1() + \" \" + tuple.getItem2())\n    );\n```", "```java\nCompletableFuture<String> luke = service.greeting(\"Luke\").toCompletableFuture();\nCompletableFuture<String> leia = service.greeting(\"Leia\").toCompletableFuture();\n\nCompletableFuture.allOf(luke, leia)\n        .thenAccept(ignored -> {\n            System.out.println(luke.join() + \" \" + leia.join());\n        });\n```", "```java\nservice.greeting(\"Leia\")\n        .exceptionally(exception -> \"Hello\");\n```", "```java\nThread.startVirtualThread(() -> {\n    // We are running on a virtual thread.\n    // The service may use blocking I/O, the virtual thread would be parked.\n    String response = service.greeting(\"Luke\");\n    // Once the response is received, the virtual thread can continue its execution.\n    // The carrier thread has not been blocked.\n    System.out.println(response);\n});\n```", "```java\nThread.startVirtualThread(() -> {\n    String response1 = service.greeting(\"Luke\");\n    String response2 = service.greeting(\"Leia\");\n    System.out.println(\"Luke: \" + response1);\n    System.out.println(\"Leia: \" + response2);\n});\n```", "```java\nThread.startVirtualThread(() -> {\n    try {\n        String response = service.greeting(\"Luke\");\n        System.out.println(\"Luke: \" + response);\n    } catch (Exception e) {\n        System.out.println(\"Failed\");\n    }\n});\n```", "```java\nExecutorService executor = Executors.newUnboundedVirtualThreadExecutor();\nCompletableFuture<String> future1 = executor.submitTask(()\n    -> service.greeting(\"Luke\"));\nCompletableFuture<String> future2 = executor.submitTask(()\n    -> service.greeting(\"Leia\"));\n\nThread.startVirtualThread(() -> {\n    CompletableFuture.allOf(future1, future2).thenAccept(v -> {\n        System.out.println(\"Luke: \" + future1.join());\n        System.out.println(\"Leia: \" + future2.join());\n    });\n});\n```", "```java\nstream\n        .subscribe().with(\n            item -> System.out.println(\"Received an item: \" + item),\n            failure -> System.out.println(\"Oh no! Received a failure: \" + failure),\n            () -> System.out.println(\"Received the completion signal\")\n);\n```", "```java\nstream\n        .onItem().transform(circle -> toSquare(circle))\n        .subscribe().with(\n            item -> System.out.println(\"Received a square: \" + item),\n            failure -> System.out.println(\"Oh no! Received a failure: \" + failure),\n            () -> System.out.println(\"Received the completion signal\")\n);\n```", "```java\nstream\n        .onFailure().recoverWithItem(failure -> getFallbackForFailure(failure))\n        .subscribe().with(\n            item -> System.out.println(\"Received a square: \" + item),\n            failure -> System.out.println(\"Oh no! Received a failure: \" + failure),\n            () -> System.out.println(\"Received the completion signal\")\n);\n```", "```java\nMulti.createBy().merging().streams(circles, squares)\n        .subscribe().with(\n        item -> System.out.println(\"Received a square or circle: \" + item),\n        failure -> System.out.println(\"Oh no! Received a failure: \" + failure),\n        () -> System.out.println(\"Received the completion signal\")\n);\n```", "```java\n// Ticks is a stream emitting an item periodically (every 10 ms)\nMulti<Long> ticks = Multi.createFrom().ticks().every(Duration.ofMillis(10))\n        .emitOn(Infrastructure.getDefaultExecutor());\n\nticks\n    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n    .subscribe().with(\n        item -> System.out.println(\"Got item: \" + item),\n        failure -> System.out.println(\"Got failure: \" + failure)\n);\n```", "```java\nGot item: 0\nGot failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not\nemit tick 16 due to lack of requests\n```", "```java\nMulti<Long> ticks = Multi.createFrom().ticks().every(Duration.ofMillis(10))\n    .onOverflow().buffer(250)\n    .emitOn(Infrastructure.getDefaultExecutor());\n\nticks\n    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n    .subscribe().with(\n        item -> System.out.println(\"Got item: \" + item),\n        failure -> System.out.println(\"Got failure: \" + failure)\n);\n```", "```java\nGot item: 0\nGot item: 1\nGot item: 2\nGot failure: io.smallrye.mutiny.subscription.BackPressureFailure:\nBuffer is full due to lack of downstream consumption\n```", "```java\nMulti<Long> ticks = Multi.createFrom().ticks().every(Duration.ofMillis(10))\n        .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n        .emitOn(Infrastructure.getDefaultExecutor());\n\nticks\n        .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n        .transform().byTakingFirstItems(10)\n        .subscribe().with(\n            item -> System.out.println(\"Got item: \" + item),\n            failure -> System.out.println(\"Got failure: \" + failure)\n);\n```", "```java\n// ....\nDropping item 997\nDropping item 998\nDropping item 999\nDropping item 1000\nDropping item 1001\nDropping item 1002\nDropping item 1003\nGot item: 9\n```"]