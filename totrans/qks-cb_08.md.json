["```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-fault-tolerance\"\n```", "```java\n    @Retry(maxRetries = 3, ![1](Images/1.png)\n            delay = 1000) ![2](Images/2.png)\n    @Fallback(RecoverHelloMessageFallback.class) ![3](Images/3.png)\n    public String getHelloWithFallback() {\n        failureSimulator.failAlways();\n        return \"hello\";\n    }\n\n    public static class RecoverHelloMessageFallback\n        implements FallbackHandler<String> { ![4](Images/4.png)\n\n        @Override\n        public String handle(ExecutionContext executionContext) {\n            return \"good bye\";\n        }\n\n    }\n```", "```java\norg.acme.quickstart.ServiceInvoker/getHelloWithFallback/Retry/maxDuration=30 ![1](Images/1.png)\norg.acme.quickstart.ServiceInvoker/Retry/maxDuration=3000 ![2](Images/2.png)\nRetry/maxDuration=3000 ![3](Images/3.png)\n```", "```java\n    @Timeout(value = 2000) ![1](Images/1.png)\n    public String getHelloWithTimeout() {\n        failureSimulator.longMethod();\n        return \"hello\";\n    }\n```", "```java\norg.acme.quickstart.ServiceInvoker/getHelloWithTimeout/Timeout/value=3000 ![1](Images/1.png)\norg.acme.quickstart.ServiceInvoker/Timeout/value=3000 ![2](Images/2.png)\nTimeout/value=3000 ![3](Images/3.png)\n```", "```java\n    @Bulkhead(2) ![1](Images/1.png)\n    public String getHelloBulkhead() {\n        failureSimulator.shortMethod();\n        return \"hello\";\n    }\n```", "```java\nsiege -r 1 -c 4 -v http://localhost:8080/hello/bulkhead \n** SIEGE 4.0.4 ** Preparing 4 concurrent users for battle. The server is now under siege... HTTP/1.1 500     0.47 secs:    2954 bytes ==> GET  /hello/bulkhead HTTP/1.1 500     0.47 secs:    2954 bytes ==> GET  /hello/bulkhead HTTP/1.1 200     2.46 secs:       5 bytes ==> GET  /hello/bulkhead HTTP/1.1 200     2.46 secs:       5 bytes ==> GET  /hello/bulkhead \nTransactions:\t\t       2 hits Availability:\t\t       50.00 % ![1](Images/1.png)\n```", "```java\norg.acme.quickstart.ServiceInvoker/getHelloBulkhead/Bulkhead/value=10 ![1](Images/1.png)\norg.acme.quickstart.ServiceInvoker/Bulkhead/value=10 ![2](Images/2.png)\nBulkhead/value=10 ![3](Images/3.png)\n```", "```java\n    @CircuitBreaker(requestVolumeThreshold = 4, ![1](Images/1.png)\n                    failureRatio = 0.75,  ![2](Images/2.png)\n                    delay = 2000) ![3](Images/3.png)\n    public String getHelloCircuitBreaker() {\n        failureSimulator.fail4Consecutive();\n        return \"hello\";\n    }\n```", "```java\norg.acme.quickstart.ServiceInvoker/getHelloCircuitBreaker \\\n    /CircuitBreaker/failureRatio=0.75 ![1](Images/1.png)\norg.acme.quickstart.ServiceInvoker/CircuitBreaker/failureRatio=3000 ![2](Images/2.png)\nTimeout/value=3000 ![3](Images/3.png)\n```", "```java\norg.acme.quickstart.ServiceInvoker/getHelloCircuitBreaker/\\\n    CircuitBreaker/enabled=false ![1](Images/1.png)\norg.acme.quickstart.ServiceInvoker/CircuitBreaker/enabled=false ![2](Images/2.png)\nCircuitBreaker/enabled=false ![3](Images/3.png)\nMP_Fault_Tolerance_NonFallback_Enabled=false ![4](Images/4.png)\n```"]