["```java\nIf a Publisher fails it MUST signal an onError.\n```", "```java\n<!--\tComment out or remove this \t-->\n<!--<dependency>-->\n<!--    <groupId>org.springframework.boot</groupId>-->\n<!--\t<artifactId>spring-boot-starter-data-jpa</artifactId>-->\n<!--</dependency>-->\n\n<!--\tAdd this  \t    \t\t    -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-r2dbc</artifactId>\n</dependency>\n\n<!--\tAdd this too  \t    \t    -->\n<dependency>\n    <groupId>io.r2dbc</groupId>\n    <artifactId>r2dbc-h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```", "```java\npublic interface PlaneRepository\n    extends ReactiveCrudRepository<Aircraft, String> {}\n```", "```java\npublic Flux<Aircraft> getAircraft() {\n    ...\n}\n\nprivate Flux<Aircraft> saveSamplePositions() {\n    ...\n}\n```", "```java\npublic Flux<Aircraft> getCurrentAircraft() throws IOException {\n    ...\n}\n```", "```java\nDROP TABLE IF EXISTS aircraft;\n\nCREATE TABLE aircraft (id BIGINT auto_increment primary key,\ncallsign VARCHAR(7), squawk VARCHAR(4), reg VARCHAR(8), flightno VARCHAR(10),\nroute VARCHAR(30), type VARCHAR(4), category VARCHAR(2),\naltitude INT, heading INT, speed INT, vert_rate INT, selected_altitude INT,\nlat DOUBLE, lon DOUBLE, barometer DOUBLE, polar_distance DOUBLE,\npolar_bearing DOUBLE, is_adsb BOOLEAN, is_on_ground BOOLEAN,\nlast_seen_time TIMESTAMP, pos_update_time TIMESTAMP, bds40_seen_time TIMESTAMP);\n```", "```java\nimport io.r2dbc.spi.ConnectionFactory;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.r2dbc.connection.init.ConnectionFactoryInitializer;\nimport org.springframework.r2dbc.connection.init.ResourceDatabasePopulator;\n\n@Configuration\npublic class DbConxInit {\n    @Bean\n    public ConnectionFactoryInitializer\n            initializer(@Qualifier(\"connectionFactory\")\n            ConnectionFactory connectionFactory) {\n        ConnectionFactoryInitializer initializer =\n            new ConnectionFactoryInitializer();\n        initializer.setConnectionFactory(connectionFactory);\n        initializer.setDatabasePopulator(\n            new ResourceDatabasePopulator(new ClassPathResource(\"schema.sql\"))\n        );\n        return initializer;\n    }\n\n//    @Bean // Uncomment @Bean annotation to add sample data\n    public CommandLineRunner init(PlaneRepository repo) {\n        return args -> {\n            repo.save(new Aircraft(\"SAL001\", \"N12345\", \"SAL001\", \"LJ\",\n                    30000, 30, 300,\n                    38.7209228, -90.4107416))\n                .thenMany(repo.findAll())\n                    .subscribe(System.out::println);\n        };\n    }\n}\n```", "```java\n    public Aircraft(String callsign, String reg, String flightno, String type,\n                    int altitude, int heading, int speed,\n                    double lat, double lon) {\n\n        this(null, callsign, \"sqwk\", reg, flightno, \"route\", type, \"ct\",\n                altitude, heading, speed, 0, 0,\n                lat, lon, 0D, 0D, 0D,\n                false, true,\n                Instant.now(), Instant.now(), Instant.now());\n    }\n```", "```java\nmheckler-a01 :: OReilly/code Â» http -b :7634/aircraft\n[\n    {\n        \"altitude\": 37000,\n        \"barometer\": 0.0,\n        \"bds40_seen_time\": null,\n        \"callsign\": \"EDV5123\",\n        \"category\": \"A3\",\n        \"flightno\": \"DL5123\",\n        \"heading\": 131,\n        \"id\": 1,\n        \"is_adsb\": true,\n        \"is_on_ground\": false,\n        \"last_seen_time\": \"2020-09-19T21:40:56Z\",\n        \"lat\": 38.461505,\n        \"lon\": -89.896606,\n        \"polar_bearing\": 156.187542,\n        \"polar_distance\": 32.208164,\n        \"pos_update_time\": \"2020-09-19T21:40:56Z\",\n        \"reg\": \"N582CA\",\n        \"route\": \"DSM-ATL\",\n        \"selected_altitude\": 0,\n        \"speed\": 474,\n        \"squawk\": \"3644\",\n        \"type\": \"CRJ9\",\n        \"vert_rate\": -64\n    },\n    {\n        \"altitude\": 38000,\n        \"barometer\": 0.0,\n        \"bds40_seen_time\": null,\n        \"callsign\": null,\n        \"category\": \"A4\",\n        \"flightno\": \"FX3711\",\n        \"heading\": 260,\n        \"id\": 2,\n        \"is_adsb\": true,\n        \"is_on_ground\": false,\n        \"last_seen_time\": \"2020-09-19T21:40:57Z\",\n        \"lat\": 39.348558,\n        \"lon\": -90.330383,\n        \"polar_bearing\": 342.006425,\n        \"polar_distance\": 24.839372,\n        \"pos_update_time\": \"2020-09-19T21:39:50Z\",\n        \"reg\": \"N924FD\",\n        \"route\": \"IND-PHX\",\n        \"selected_altitude\": 0,\n        \"speed\": 424,\n        \"squawk\": null,\n        \"type\": \"B752\",\n        \"vert_rate\": 0\n    },\n    {\n        \"altitude\": 35000,\n        \"barometer\": 1012.8,\n        \"bds40_seen_time\": \"2020-09-19T21:41:11Z\",\n        \"callsign\": \"JIA5304\",\n        \"category\": \"A3\",\n        \"flightno\": \"AA5304\",\n        \"heading\": 112,\n        \"id\": 3,\n        \"is_adsb\": true,\n        \"is_on_ground\": false,\n        \"last_seen_time\": \"2020-09-19T21:41:12Z\",\n        \"lat\": 38.759811,\n        \"lon\": -90.173632,\n        \"polar_bearing\": 179.833023,\n        \"polar_distance\": 11.568717,\n        \"pos_update_time\": \"2020-09-19T21:41:11Z\",\n        \"reg\": \"N563NN\",\n        \"route\": \"CLT-RAP-CLT\",\n        \"selected_altitude\": 35008,\n        \"speed\": 521,\n        \"squawk\": \"6506\",\n        \"type\": \"CRJ9\",\n        \"vert_rate\": 0\n    }\n]\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-webflux</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n        <exclusions>\n            <exclusion>\n                <groupId>org.junit.vintage</groupId>\n                <artifactId>junit-vintage-engine</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n        <groupId>de.flapdoodle.embed</groupId>\n        <artifactId>de.flapdoodle.embed.mongo</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.projectreactor</groupId>\n        <artifactId>reactor-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```", "```java\npublic interface AircraftRepository extends ReactiveCrudRepository<Aircraft, Long> {}\n```", "```java\n@RequiredArgsConstructor\n@Controller\npublic class PositionController {\n    @NonNull\n    private final AircraftRepository repository;\n    private WebClient client\n        = WebClient.create(\"http://localhost:7634/aircraft\");\n\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        Flux<Aircraft> aircraftFlux = repository.deleteAll()\n                .thenMany(client.get()\n                        .retrieve()\n                        .bodyToFlux(Aircraft.class)\n                        .filter(plane -> !plane.getReg().isEmpty())\n                        .flatMap(repository::save));\n\n        model.addAttribute(\"currentPositions\", aircraftFlux);\n        return \"positions\";\n    }\n}\n```", "```java\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.time.Instant;\n\n@Document\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Aircraft {\n    @Id\n    private Long id;\n    private String callsign, squawk, reg, flightno, route, type, category;\n\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n}\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-rsocket</artifactId>\n</dependency>\n```", "```java\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport reactor.core.publisher.Flux;\n\nimport java.io.IOException;\nimport java.time.Duration;\n\n@Controller\npublic class PlaneController {\n    private final PlaneFinderService pfService;\n\n    public PlaneController(PlaneFinderService pfService) {\n        this.pfService = pfService;\n    }\n\n    @ResponseBody\n    @GetMapping(\"/aircraft\")\n    public Flux<Aircraft> getCurrentAircraft() throws IOException {\n        return pfService.getAircraft();\n    }\n\n    @MessageMapping(\"acstream\")\n    public Flux<Aircraft> getCurrentACStream() throws IOException {\n        return pfService.getAircraft().concatWith(\n                Flux.interval(Duration.ofSeconds(1))\n                        .flatMap(l -> pfService.getAircraft()));\n    }\n}\n```", "```java\nserver.port=7634\nspring.rsocket.server.port=7635\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-rsocket</artifactId>\n</dependency>\n```", "```java\nimport org.springframework.http.MediaType;\nimport org.springframework.messaging.rsocket.RSocketRequester;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Flux;\n\n@Controller\npublic class PositionController {\n    private final AircraftRepository repository;\n    private final RSocketRequester requester;\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    public PositionController(AircraftRepository repository,\n                              RSocketRequester.Builder builder) {\n        this.repository = repository;\n        this.requester = builder.tcp(\"localhost\", 7635);\n    }\n\n    // HTTP endpoint, HTTP requester (previously created)\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        Flux<Aircraft> aircraftFlux = repository.deleteAll()\n                .thenMany(client.get()\n                        .retrieve()\n                        .bodyToFlux(Aircraft.class)\n                        .filter(plane -> !plane.getReg().isEmpty())\n                        .flatMap(repository::save));\n\n        model.addAttribute(\"currentPositions\", aircraftFlux);\n        return \"positions\";\n    }\n\n    // HTTP endpoint, RSocket client endpoint\n    @ResponseBody\n    @GetMapping(value = \"/acstream\",\n            produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public Flux<Aircraft> getCurrentACPositionsStream() {\n        return requester.route(\"acstream\")\n                .data(\"Requesting aircraft positions\")\n                .retrieveFlux(Aircraft.class);\n    }\n}\n```", "```java\nmheckler-a01 :: ~ Â» http -S :8080/acstream\nHTTP/1.1 200 OK\nContent-Type: text/event-stream;charset=UTF-8\ntransfer-encoding: chunked\n\ndata:{\"id\":1,\"callsign\":\"RPA3427\",\"squawk\":\"0526\",\"reg\":\"N723YX\",\"flightno\":\n\"UA3427\",\"route\":\"IAD-MCI\",\"type\":\"E75L\",\"category\":\"A3\",\"altitude\":36000,\n\"heading\":290,\"speed\":403,\"lat\":39.183929,\"lon\":-90.72259,\"barometer\":0.0,\n\"vert_rate\":64,\"selected_altitude\":0,\"polar_distance\":29.06486,\n\"polar_bearing\":297.519943,\"is_adsb\":true,\"is_on_ground\":false,\n\"last_seen_time\":\"2020-09-20T23:58:51Z\",\n\"pos_update_time\":\"2020-09-20T23:58:49Z\",\"bds40_seen_time\":null}\n\ndata:{\"id\":2,\"callsign\":\"EDG76\",\"squawk\":\"3354\",\"reg\":\"N776RB\",\"flightno\":\"\",\n\"route\":\"TEB-VNY\",\"type\":\"GLF5\",\"category\":\"A3\",\"altitude\":43000,\"heading\":256,\n\"speed\":419,\"lat\":38.884918,\"lon\":-90.363026,\"barometer\":0.0,\"vert_rate\":64,\n\"selected_altitude\":0,\"polar_distance\":9.699159,\"polar_bearing\":244.237695,\n\"is_adsb\":true,\"is_on_ground\":false,\"last_seen_time\":\"2020-09-20T23:59:22Z\",\n\"pos_update_time\":\"2020-09-20T23:59:14Z\",\"bds40_seen_time\":null}\n\ndata:{\"id\":3,\"callsign\":\"EJM604\",\"squawk\":\"3144\",\"reg\":\"N604SD\",\"flightno\":\"\",\n\"route\":\"ENW-HOU\",\"type\":\"C56X\",\"category\":\"A2\",\"altitude\":38000,\"heading\":201,\n\"speed\":387,\"lat\":38.627464,\"lon\":-90.01416,\"barometer\":0.0,\"vert_rate\":-64,\n\"selected_altitude\":0,\"polar_distance\":20.898095,\"polar_bearing\":158.9935,\n\"is_adsb\":true,\"is_on_ground\":false,\"last_seen_time\":\"2020-09-20T23:59:19Z\",\n\"pos_update_time\":\"2020-09-20T23:59:19Z\",\"bds40_seen_time\":null}\n```"]