["```java\npublic class ToStringWithout {\n    int x, y;\n\n    /** Simple constructor */\n    public ToStringWithout(int anX, int aY) {\n        x = anX; y = aY;\n    }\n\n    /** Main just creates and prints an object */\n    public static void main(String[] args) {\n        System.out.println(new ToStringWithout(42, 86));\n    }\n}\n```", "```java\nToStringWithout@990c747b\n```", "```java\npublic class ToStringWith {\n    int x, y;\n\n    /** Simple constructor */\n    public ToStringWith(int anX, int aY) {\n        x = anX; y = aY;\n    }\n\n    @Override\n    public String toString() {\n        return \"ToStringWith[\" + x + \",\" + y + \"]\";\n    }\n\n    /** Main just creates and prints an object */\n    public static void main(String[] args) {\n        System.out.println(new ToStringWith(42, 86));\n    }\n}\n```", "```java\nToStringWith[42,86]\n```", "```java\npublic class EqualsDemo {\n    private int int1;\n    private SomeClass obj1;\n\n    /** Constructor */\n    public EqualsDemo(int i, SomeClass o) {\n        int1 = i;\n        if (o == null) {\n            throw new IllegalArgumentException(\"Data Object may not be null\");\n        }\n        obj1 = o;\n    }\n\n    /** Default Constructor */\n    public EqualsDemo() {\n        this(0, new SomeClass());\n    }\n\n    /** Demonstration \"equals\" method */\n    @Override\n    public boolean equals(Object o) {\n        if (o == this)                    ![1](assets/1.png)\n            return true;\n\n        if (o == null)                    ![2](assets/2.png)\n            return false;\n\n        // Of the correct class?\n        if (o.getClass() != EqualsDemo.class) ![3](assets/3.png)\n            return false;\n\n        EqualsDemo other = (EqualsDemo)o; // OK, cast to this class \n        // compare field-by-field ![4](assets/4.png)\n        if (int1 != other.int1)           // compare primitives directly\n            return false;\n        if (!obj1.equals(other.obj1))     // compare objects using their equals\n            return false;\n        return true;\n    }\n\n    // ...\n```", "```java\n/** Some JUnit test cases for EqualsDemo.\n * Writing a full set is left as \"an exercise for the reader\".\n */\npublic class EqualsDemoTest {\n\n    /** an object being tested */\n    EqualsDemo d1;\n    /** another object being tested */\n    EqualsDemo d2;\n\n    /** Method to be invoked before each test method */\n    @Before\n    public void setUp() {\n        d1 = new EqualsDemo();\n        d2 = new EqualsDemo();\n    }\n\n    @Test\n    public void testSymmetry() {\n        assertTrue(d1.equals(d1));\n    }\n\n    @Test\n    public void testSymmetric() {\n        assertTrue(d1.equals(d2) && d2.equals(d1));\n    }\n\n    @Test\n    public void testCaution() {\n        assertFalse(d1.equals(null));\n    }\n}\n```", "```java\npublic class PrintHashCodes {\n\n    /** Some objects to hashCode() on */\n    protected static Object[] data = {\n        new PrintHashCodes(),\n        new java.awt.Color(0x44, 0x88, 0xcc),\n        new SomeClass()\n    };\n\n    public static void main(String[] args) {\n        System.out.println(\"About to hashCode \" + data.length + \" objects.\");\n        for (int i=0; i<data.length; i++) {\n            System.out.println(data[i].toString() + \" --> \" +\n                data[i].hashCode());\n        }\n        System.out.println(\"All done.\");\n    }\n}\n```", "```java\n> javac -d . oo/PrintHashCodes.java\n> java oo.PrintHashCodes\nAbout to hashCode 3 objects.\nPrintHashCodes@982741a0 --> -1742257760\njava.awt.Color[r=68,g=136,b=204] --> -12285748\nSomeClass@860b41ad --> -2046082643\nAll done.\n>\n```", "```java\nalpha<<24 + r<<16 + g<<8 + b\n```", "```java\npublic class CopyConstructorDemo {\n    public static void main(String[] args) {\n        CopyConstructorDemo object1 = new CopyConstructorDemo(123, \"Hello\");\n        CopyConstructorDemo object2 = new CopyConstructorDemo(object1);\n        if (!object1.equals(object2)) {\n            System.out.println(\"Something is terribly wrong...\");\n        }\n        System.out.println(\"All done.\");\n    }\n\n    private int number;\n    private String name;\n\n    /** Default constructor */\n    public CopyConstructorDemo()  {\n    }\n\n    /** Normal constructor */\n    public CopyConstructorDemo(int number, String name)  {\n        this.number = number;\n        this.name = name;\n    }\n\n    /** Copy constructor */\n    public CopyConstructorDemo(CopyConstructorDemo other)  {\n        this.number = other.number;\n        this.name = other.name;\n    }\n    // hashCode() and equals() not shown\n```", "```java\npublic class AllClasses {\n    public class Data {    ![1](assets/1.png)\n        int x;\n        int y;\n    }\n    public void getResults() {\n        JButton b = new JButton(\"Press me\");\n        b.addActionListener(new ActionListener() { ![2](assets/2.png)\n            public void actionPerformed(ActionEvent evt) {\n                Data loc = new Data();\n                loc.x = ((Component)evt.getSource()).getX();\n                loc.x = ((Component)evt.getSource()).getY();\n                System.out.println(\"Thanks for pressing me\");\n            }\n        });\n    }\n}\n\n/** Class contained in same file as AllClasses, but can be used\n * (with a warning) in other contexts.\n */\nclass AnotherClass {                    ![3](assets/3.png)\n    // methods and fields here...\n    AnotherClass() {\n        // Inner class from above cannot be used here, of course\n        // Data d = new Data();    // EXPECT COMPILE ERROR\n    }\n}\n```", "```java\npublic class BuildingManagement {\n\n    List<Asset> things = new ArrayList<>();\n\n    /** Scenario: goodNight() is called from a timer Thread at 2200, or when\n * we get the \"shutdown\" command from the security guard.\n */\n    public void goodNight() {\n        things.forEach(obj -> {\n            if (obj instanceof PowerSwitchable)\n                ((PowerSwitchable)obj).powerDown();\n            });\n    }\n\n    // tag::functional[]\n    public void goodNightFunctional() {\n        things.stream().filter(obj -> obj instanceof PowerSwitchable)\n            .forEach(obj -> ((PowerSwitchable)obj).powerDown());\n    }\n    // end::functional[]\n\n    // goodMorning() would be similar, but call each one's powerUp().\n\n    /** Add a Asset to this building */\n    public void add(Asset thing) {\n        System.out.println(\"Adding \" + thing);\n        things.add(thing);\n    }\n\n    /** The main program */\n    public static void main(String[] av) {\n        BuildingManagement b1 = new BuildingManagement();\n        b1.add(new RoomLights(101));    // control lights in room 101\n        b1.add(new EmergencyLight(101));    // and emerg. lights.\n        // add the computer on desk#4 in room 101\n        b1.add(new ComputerCPU(10104));\n        // and its monitor\n        b1.add(new ComputerMonitor(10104));\n\n        // time passes, and the sun sets...\n        b1.goodNight();\n    }\n}\n```", "```java\n> java oo.interfaces.BuildingManagement\nAdding RoomLights@2dc77f32\nAdding EmergencyLight@2e3b7f32\nAdding ComputerCPU@2e637f32\nAdding ComputerMonitor@2f1f7f32\nDousing lights in room 101\nDousing monitor at desk 10104\n>\n```", "```java\npublic abstract class Shape {\n    protected int x, y;\n    public abstract double computeArea( );\n}\n```", "```java\npublic class Rectangle extends Shape {\n    double width, height;\n    public double computeArea( ) {\n        return width * height;\n    }\n}\n```", "```java\npublic class Circle extends Shape {\n    double radius;\n    public double computeArea( ) {\n        return Math.PI * radius * radius;\n    }\n}\n```", "```java\n/** Part of a main program using Shape objects */\npublic class ShapeDriver {\n\n    Collection<Shape> allShapes;    // created in a Constructor, not shown\n\n    /** Iterate over all the Shapes, getting their areas;\n * this cannot use the Java 8 Collection.forEach because the\n * variable total would have to be final, which would defeat the purpose :-)\n */\n    public double totalAreas() {\n        double total = 0.0;\n        for (Shape s : allShapes) {\n            total += s.computeArea();\n        }\n        return total;\n    }\n```", "```java\nenum  { BLACK, RED, ORANGE} color;\n```", "```java\nenum { BLACK, RED, ORANGE} color;\nenum { READ, UNREAD } state;\n\n/*ARGSUSED*/\nint main(int argc, char *argv[]) {\n        color = RED;\n        color = READ; // In C this will compile, give bad results\n        return 0;\n}\n```", "```java\npublic enum Media {\n    BOOK, MUSIC_CD, MUSIC_VINYL, MOVIE_VHS, MOVIE_DVD;\n}\n```", "```java\nC:> javap Media\nCompiled from \"Media.java\"\npublic class Media extends java.lang.Enum{\n    public static final Media BOOK;\n    public static final Media MUSIC_CD;\n    public static final Media MUSIC_VINYL;\n    public static final Media MOVIE_VHS;\n    public static final Media MOVIE_DVD;\n    public static final Media[] values( );\n    public static Media valueOf(java.lang.String);\n    public Media(java.lang.String, int);\n    public int compareTo(java.lang.Enum);\n    public int compareTo(java.lang.Object);\n    static {};\n}\nC:>\n```", "```java\npublic class Product {\n    String title;\n    String artist;\n    Media  media;\n\n    public Product(String artist, String title, Media media) {\n        this.title = title;\n        this.artist = artist;\n        this.media = media;\n    }\n\n    @Override\n    public String toString() {\n        switch (media) {\n        case BOOK:\n            return title + \" is a book\";\n        case MUSIC_CD:\n            return title + \" is a CD\";\n        case MUSIC_VINYL:\n            return title + \" is a relic of the age of vinyl\";\n        case MOVIE_VHS:\n            return title + \" is on old video tape\";\n        case MOVIE_DVD:\n            return title + \" is on DVD\";\n        default:\n            return title + \": Unknown media \" + media;\n        }\n    }\n}\n```", "```java\n/** An example of an enum with method overriding */\npublic enum MediaFancy {\n    /** The enum constant for a book, with a method override */\n    BOOK {\n        public String toString() { return \"Book\"; }\n    },\n    /** The enum constant for a Music CD */\n    MUSIC_CD,\n    /** ... */\n    MUSIC_VINYL,\n    MOVIE_VHS,\n    MOVIE_DVD;\n\n    /** It is generally disparaged to have a main() in an enum;\n * please forgive this tiny demo class for doing so.\n */\n    public static void main(String[] args) {\n        MediaFancy[] data =  { BOOK, MOVIE_DVD, MUSIC_VINYL };\n        for (MediaFancy mf : data) {\n            System.out.println(mf);\n        }\n    }\n}\n```", "```java\nBook\nMOVIE_DVD\nMUSIC_VINYL\n```", "```java\npublic class EnumList {\n    enum State {\n        ON, OFF, UNKNOWN\n    }\n    public static void main(String[] args) {\n        for (State i : State.values()) {\n            System.out.println(i);\n        }\n    }\n}\n```", "```java\nON\nOFF\nUNKNOWN\n```", "```java\njshell> Optional<String> opt = Optional.of(\"What a day!\");\nopt ==> Optional[What a day!]\n\njshell> if (opt.isPresent()) {\n   ...>     System.out.println(\"Value is \" + opt.get());\n   ...> } else {\n   ...>     System.out.println(\"Value is not present.\");\n   ...> }\nValue is What a day!\n```", "```java\njshell> System.out.println(\"Value is \" + opt.orElse(\"not present\"));\nValue is What a day!\n```", "```java\n        List.of(\n            new Item(\"Item 1\", LocalDate.now().plusDays(7)),\n            new Item(\"Item 2\")).\n                forEach(System.out::println);\n    static class Item {\n        String name;\n        Optional<LocalDate> dueDate;\n        Item(String name) {\n            this(name, null);\n        }\n        Item(String name, LocalDate dueDate) {\n            this.name = name;\n            this.dueDate = Optional.ofNullable(dueDate);\n        }\n\n        public String toString() {\n            return String.format(\"%s %s\", name,\n                dueDate.isPresent() ?\n                    \"Item is due on \" + dueDate.get() :\n                    \"Sorry, do not know when item is due\");\n        }\n    }\n```", "```java\npublic enum EnumSingleton {\n\n    INSTANCE;\n\n    // instance methods protected by singleton-ness would be here...\n\n    /** A simple demo method */\n    public String demoMethod() {\n        return \"demo\";\n    }\n}\n```", "```java\n        // Demonstrate the enum method:\n        EnumSingleton.INSTANCE.demoMethod();\n```", "```java\npublic class Singleton {\n\n    /**\n * Static Initializer is run before class is available to code, avoiding\n * broken anti-pattern of lazy initialization in instance method.\n * For more complicated construction, could use static block initializer.\n */\n    private static Singleton instance = new Singleton();\n\n    /** A private Constructor prevents any other class from instantiating. */\n    private Singleton() {\n        // nothing to do this time\n    }\n\n    /** Static 'instance' method */\n    public static Singleton getInstance() {\n        return instance;\n    }\n\n    // other methods protected by singleton-ness would be here...\n\n    /** A simple demo method */\n    public String demoMethod() {\n        return \"demo\";\n    }\n}\n```", "```java\n        // Demonstrate the codeBased method:\n        Singleton.getInstance().demoMethod();\n```", "```java\n/** A ChessMoveException is thrown  when the user makes an illegal move. */\npublic class ChessMoveException extends Exception {\n\n    private static final long serialVersionUID = 802911736988179079L;\n\n    public ChessMoveException () {\n        super();\n    }\n\n    public ChessMoveException (String msg) {\n        super(msg);\n    }\n\n    public ChessMoveException(String msg, Exception cause) {\n        super(msg, cause);\n    }\n}\n```", "```java\npublic interface Model {\n\tString getMessage();\n}\n```", "```java\npublic interface View {\n\n    void displayMessage();\n\n}\n```", "```java\npublic class ControllerTightlyCoupled {\n\n    public static void main(String[] args) {\n        Model m = new SimpleModel();\n        ConsoleViewer v = new ConsoleViewer();\n        v.setModel(m);\n        v.displayMessage();\n    }\n}\n```", "```java\npublic class MainAndController {\n\n    public static void main(String[] args) {\n        ApplicationContext ctx =\n            new AnnotationConfigApplicationContext(\"di.spring\");\n        View v = ctx.getBean(\"myView\", View.class);\n        v.displayMessage();\n        ((AbstractApplicationContext) ctx).close();\n    }\n}\n```", "```java\n@Named(\"myView\")\npublic class ConsoleViewer implements View {\n\n    Model messageProvider;\n\n    @Override\n    public void displayMessage() {\n        System.out.println(messageProvider.getMessage());\n    }\n\n    @Resource(name=\"myModel\")\n    public void setModel(Model messageProvider) {\n        this.messageProvider = messageProvider;\n    }\n\n}\n```", "```java\npublic class MainAndController {\n    public static void main(String[] args) {\n        final Instance<Object> weldInstance = new Weld().initialize().instance();\n        weldInstance.select(ConsoleViewer.class).get().displayMessage();\n    }\n}\n```", "```java\npublic class ConsoleViewer implements View {\n    @Inject @MyModel\n    private String message;\n\n    @Override\n    public void displayMessage() {\n        System.out.println(message);\n    }\n}\n```", "```java\npublic class ModelImpl {\n\n    public @Produces @MyModel String getMessage(InjectionPoint ip)\n        throws IOException {\n\n        ResourceBundle props = ResourceBundle.getBundle(\"messages\");\n        return props.getString(\n            ip.getMember().getDeclaringClass().getSimpleName() + \".\" +\n            ip.getMember().getName());\n    }\n}\n```", "```java\n/**\n * Plotter abstract class. Must be subclassed\n * for X, DOS, Penman, HP plotter, etc.\n *\n * Coordinate space: X = 0 at left, increases to right.\n *        Y = 0 at top, increases downward (same as AWT).\n *\n * @author    Ian F. Darwin\n */\npublic abstract class Plotter {\n    public final int MAXX = 800;\n    public final int MAXY = 600;\n    /** Current X co-ordinate (same reference frame as AWT!) */\n    protected int curx;\n    /** Current Y co-ordinate (same reference frame as AWT!) */\n    protected int cury;\n    /** The current state: up or down */\n    protected boolean penUp;\n    /** The current color */\n    protected int penColor;\n\n    Plotter() {\n        penUp = true;\n        curx = 0; cury = 0;\n    }\n    abstract void rmoveTo(int incrx, int incry);\n    abstract void moveTo(int absx, int absy);\n    abstract void penUp();\n    abstract void penDown();\n    abstract void penColor(int c);\n\n    abstract void setFont(String fName, int fSize);\n    abstract void drawString(String s);\n\n    /* Concrete methods */\n\n    /** Draw a box of width w and height h */\n    public void drawBox(int w, int h) {\n        penDown();\n        rmoveTo(w, 0);\n        rmoveTo(0, h);\n        rmoveTo(-w, 0);\n        rmoveTo(0, -h);\n        penUp();\n    }\n\n    /** Draw a box given an AWT Dimension for its size */\n    public void drawBox(java.awt.Dimension d) {\n        drawBox(d.width, d.height);\n    }\n\n    /** Draw a box given an AWT Rectangle for its location and size */\n    public void drawBox(java.awt.Rectangle r) {\n        moveTo(r.x, r.y);\n        drawBox(r.width, r.height);\n    }\n\n    /** Show the current location; useful for\n * testing, if nothing else.\n */\n    public Point getLocation() {\n        return new Point(curx, cury);\n    }\n}\n```", "```java\npublic class PlotDriver {\n\n    /** Construct a Plotter driver, and try it out. */\n    public static void main(String[] argv) {\n        Plotter r ;\n        if (argv.length != 1) {\n            System.err.println(\"Usage: PlotDriver driverclass\");\n            return;\n        }\n        try {\n            Class<?> c = Class.forName(argv[0]);\n            Object o = c.newInstance();\n            if (!(o instanceof Plotter))\n                throw new ClassNotFoundException(\"Not instanceof Plotter\");\n            r = (Plotter)o;\n        } catch (ClassNotFoundException e) {\n            System.err.println(\"Sorry, class \" + argv[0] +\n                    \" not a plotter class\");\n            return;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return;\n        }\n        r.penDown();\n        r.penColor(1);\n        r.moveTo(200, 200);\n        r.penColor(2);\n        r.drawBox(123, 200);\n        r.rmoveTo(10, 20);\n        r.penColor(3);\n        r.drawBox(123, 200);\n        r.penUp();\n        r.moveTo(300, 100);\n        r.penDown();\n        r.setFont(\"Helvetica\", 14);\n        r.drawString(\"Hello World\");\n        r.penColor(4);\n        r.drawBox(10, 10);\n    }\n}\n```"]