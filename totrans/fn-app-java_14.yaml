- en: Chapter 12\. Recursion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章\. 递归
- en: Recursion is an approach to solving a problem that can be broken down into smaller
    versions of itself. Many developers see *recursion* as another — often complicated — approach
    to iteration-based problem-solving. Still, it’s good to know different techniques
    for particular groups of problems in a functional way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 递归是一种解决问题的方法，可以将其分解为其较小版本。许多开发人员将*递归*视为另一种 — 通常是复杂的 — 基于迭代的问题解决方法。但对于特定类型的问题，掌握不同的技术方式是很有益的。
- en: This chapter shows the general idea behind recursion, how you implement recursive
    methods, and their place in your Java code compared to other forms of iteration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了递归的一般思想，如何实现递归方法以及它们在 Java 代码中与其他形式的迭代相比的位置。
- en: What is Recursion?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是递归？
- en: In [“Recursion”](ch01.xhtml#_01-an-introduction_recursion), you’ve seen an illustration
    of calculating factorials — the product of all positive integers less than or
    equal to the input parameter. Many books, guides, and tutorials use factorials
    to demonstrate recursion because it’s a perfect problem to solve partially, and
    it’ll be the first example of this chapter, too.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[“递归”](ch01.xhtml#_01-an-introduction_recursion)中，你已经看到了计算阶乘的示例 — 所有小于或等于输入参数的正整数的乘积。许多书籍、指南和教程使用阶乘来演示递归，因为这是一个很好的部分解决问题的例子，并且也是本章的第一个示例。
- en: Every step of calculating factorials breaks down into the product of the input
    parameter and the result of the next factorial operation. When the calculation
    reaches `fac(1)` — defined as “1" — the chain terminates and provides the value
    to the previous step. The complete steps can be seen in [Equation 12-1](#_02-recursion_factorial_steps).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算阶乘的每一步都会将输入参数与下一个阶乘操作的结果相乘。当计算达到`fac(1)` — 定义为“1" — 时，链条终止并将值提供给前一步骤。完整的步骤可以在[方程
    12-1](#_02-recursion_factorial_steps)中看到。
- en: Equation 12-1\. Formal representation of a factorial calculation
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程 12-1\. 阶乘计算的正式表示
- en: <math alttext="StartLayout 1st Row 1st Column Blank 2nd Column f a c left-parenthesis
    n right-parenthesis 2nd Row 1st Column right-arrow 2nd Column n asterisk f a c
    left-parenthesis n minus 1 right-parenthesis 3rd Row 1st Column right-arrow 2nd
    Column n asterisk left-parenthesis n minus 1 right-parenthesis asterisk f a c
    left-parenthesis n minus 2 right-parenthesis 4th Row 1st Column right-arrow 2nd
    Column 4 asterisk left-parenthesis n minus 1 right-parenthesis asterisk left-parenthesis
    n minus 2 right-parenthesis asterisk ellipsis asterisk f a c left-parenthesis
    1 right-parenthesis 5th Row 1st Column right-arrow 2nd Column 4 asterisk left-parenthesis
    n minus 1 right-parenthesis asterisk left-parenthesis n minus 2 right-parenthesis
    asterisk ellipsis asterisk 1 EndLayout" display="block"><mtable displaystyle="true"><mtr><mtd
    columnalign="left"><mrow><mi>f</mi> <mi>a</mi> <mi>c</mi> <mo>(</mo> <mi>n</mi>
    <mo>)</mo></mrow></mtd></mtr> <mtr><mtd columnalign="right"><mo>→</mo></mtd> <mtd
    columnalign="left"><mrow><mi>n</mi> <mo>*</mo> <mi>f</mi> <mi>a</mi> <mi>c</mi>
    <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd
    columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mi>n</mi>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mi>f</mi>
    <mi>a</mi> <mi>c</mi> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo></mrow></mtd></mtr>
    <mtr><mtd columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mn>4</mn>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mo>(</mo>
    <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo> <mo>*</mo> <mo>⋯</mo> <mo>*</mo> <mi>f</mi>
    <mi>a</mi> <mi>c</mi> <mo>(</mo> <mn>1</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd
    columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mn>4</mn>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mo>(</mo>
    <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo> <mo>*</mo> <mo>⋯</mo> <mo>*</mo> <mn>1</mn></mrow></mtd></mtr></mtable></math>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <math alttext="StartLayout 1st Row 1st Column Blank 2nd Column f a c left-parenthesis
    n right-parenthesis 2nd Row 1st Column right-arrow 2nd Column n asterisk f a c
    left-parenthesis n minus 1 right-parenthesis 3rd Row 1st Column right-arrow 2nd
    Column n asterisk left-parenthesis n minus 1 right-parenthesis asterisk f a c
    left-parenthesis n minus 2 right-parenthesis 4th Row 1st Column right-arrow 2nd
    Column 4 asterisk left-parenthesis n minus 1 right-parenthesis asterisk left-parenthesis
    n minus 2 right-parenthesis asterisk ellipsis asterisk f a c left-parenthesis
    1 right-parenthesis 5th Row 1st Column right-arrow 2nd Column 4 asterisk left-parenthesis
    n minus 1 right-parenthesis asterisk left-parenthesis n minus 2 right-parenthesis
    asterisk ellipsis asterisk 1 EndLayout" display="block"><mtable displaystyle="true"><mtr><mtd
    columnalign="left"><mrow><mi>f</mi> <mi>a</mi> <mi>c</mi> <mo>(</mo> <mi>n</mi>
    <mo>)</mo></mrow></mtd></mtr> <mtr><mtd columnalign="right"><mo>→</mo></mtd> <mtd
    columnalign="left"><mrow><mi>n</mi> <mo>*</mo> <mi>f</mi> <mi>a</mi> <mi>c</mi>
    <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd
    columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mi>n</mi>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mi>f</mi>
    <mi>a</mi> <mi>c</mi> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo></mrow></mtd></mtr>
    <mtr><mtd columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mn>4</mn>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mo>(</mo>
    <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo> <mo>*</mo> <mo>⋯</mo> <mo>*</mo> <mi>f</mi>
    <mi>a</mi> <mi>c</mi> <mo>(</mo> <mn>1</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd
    columnalign="right"><mo>→</mo></mtd> <mtd columnalign="left"><mrow><mn>4</mn>
    <mo>*</mo> <mo>(</mo> <mi>n</mi> <mo>-</mo> <mn>1</mn> <mo>)</mo> <mo>*</mo> <mo>(</mo>
    <mi>n</mi> <mo>-</mo> <mn>2</mn> <mo>)</mo> <mo>*</mo> <mo>⋯</mo> <mo>*</mo> <mn>1</mn></mrow></mtd></mtr></mtable></math>
- en: 'This generalization of the calculation steps visualizes the underlying concept
    of recursion: solving a problem by combining smaller instances of the same problem.
    This is done using methods that call themselves with modified arguments until
    a base condition is reached.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种计算步骤的泛化可视化了递归的基本概念：通过使用调用自身的方法并传入修改后的参数来解决问题，直到达到基本条件。
- en: 'Recursion consists of two distinct operation types:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 递归由两种不同的操作类型组成：
- en: Base conditions
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本条件
- en: A base condition is a predefined case — a *solution* to the problem — which
    will return an actual value and unwind the recursive call chain. It provides its
    value to the previous step, which can now calculate a result and return it to
    its predecessor, and so forth.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基本条件是一个预定义的情况 — 问题的*解决方案* — 它将返回一个实际值并展开递归调用链。它将其值提供给前一步骤，后者现在可以计算结果并将其返回给其前任，依此类推。
- en: Recursive call
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 递归调用
- en: Until the call chain reaches its *base condition*, every step will create another
    one by calling itself with modified input parameters.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 直到调用链达到其*基本条件*，每一步都会通过使用修改后的输入参数调用自身来创建另一个步骤。
- en: '[Figure 12-1](#_02-recursion_smalller_problems) shows the general flow of a
    recursive call chain.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-1](#_02-recursion_smalller_problems)显示了递归调用链的一般流程。'
- en: '![Solving problems with smaller problems](assets/afaj_1201.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![用更小的问题解决问题](assets/afaj_1201.png)'
- en: Figure 12-1\. Solving problems with smaller problems
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 用更小的问题解决问题
- en: The problem becomes smaller until a solution is found for the smallest part.
    This solution will then become an input for the next bigger problem, and so on
    until the sum of all parts builds the solution to the original problem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 问题会变小，直到找到最小部分的解决方案。然后，此解决方案将成为下一个更大问题的输入，依此类推，直到所有部分的总和构建出原始问题的解决方案。
- en: Head Versus Tail Recursion
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头递归与尾递归
- en: 'Recursive calls fall into two categories, *head* and *tail* recursion, depending
    on the location of the recursive call in the method body:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 递归调用分为两类，*头*递归和*尾*递归，取决于方法体中递归调用的位置：
- en: Head recursion
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 头递归
- en: Other statements/expressions are executed/evaluated after the recursive method
    call, making it not the last statement.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在递归方法调用后执行/评估其他语句/表达式，这使得它不是最后一个语句。
- en: Tail recursion
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尾递归
- en: The recursive call is the last statement of the method without any further calculations
    linking its result to the current call.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 递归调用是方法的最后一条语句，没有进一步的计算将其结果链接到当前调用。
- en: Let’s look at calculating a factorial with both types to illustrate their differences
    better. [Example 12-1](#_02-recursion_factorial_head) shows how to use head recursion.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看使用这两种类型计算阶乘以更好地说明它们的差异。[示例 12-1](#_02-recursion_factorial_head)展示了如何使用头递归。
- en: Example 12-1\. Calculating factorials with head recursion
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-1\. 使用头递归计算阶乘
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_recursion_CO1-1)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_recursion_CO1-1)'
- en: The method signature only contains the input parameter of the current recursive
    step. No intermediate state moves between the recursive calls.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 方法签名只包含当前递归步骤的输入参数。中间状态不在递归调用之间移动。
- en: '[![2](assets/2.png)](#co_recursion_CO1-2)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_recursion_CO1-2)'
- en: The base condition must come before the recursive call.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基本条件必须出现在递归调用之前。
- en: '[![3](assets/3.png)](#co_recursion_CO1-3)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_recursion_CO1-3)'
- en: The return value is an expression depending on the result of the recursive call,
    making it not the sole last statement in the method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是依赖于递归调用结果的表达式，这使得它不是方法中唯一的最后语句。
- en: Now it’s time to look at tail recursion, as shown in [Example 12-2](#_02-recursion_factorial_tail).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看尾递归了，正如[示例 12-2](#_02-recursion_factorial_tail)所示。
- en: Example 12-2\. Calculating factorials with tail recursion
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-2\. 使用尾递归计算阶乘
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_recursion_CO2-1)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_recursion_CO2-1)'
- en: The method signature contains an accumulator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 方法签名包含一个累加器。
- en: '[![2](assets/2.png)](#co_recursion_CO2-2)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_recursion_CO2-2)'
- en: The base condition hasn’t changed compared to head recursion.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与头递归相比，基本条件没有改变。
- en: '[![3](assets/3.png)](#co_recursion_CO2-3)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_recursion_CO2-3)'
- en: Instead of returning an expression dependent on the next recursive call, both
    `factorialTail` parameters are evaluated beforehand. The method only returns the
    recursive call itself.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不返回依赖于下一个递归调用的表达式，两个`factorialTail`参数都会在此之前求值。该方法仅返回递归调用本身。
- en: '[![4](assets/4.png)](#co_recursion_CO2-4)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_recursion_CO2-4)'
- en: The accumulator requires an initial value. It reflects the base condition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 累加器需要一个初始值。它反映了基本条件。
- en: The main difference between head and tail recursion is how the call stack is
    constructed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 头递归和尾递归之间的主要区别在于调用堆栈的构建方式。
- en: With *head recursion*, the recursive call is performed before returning a value.
    Therefore, the final result won’t be available until the runtime has returned
    from each recursive call.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在*头递归*中，递归调用在返回值之前执行。因此，最终结果在运行时从每个递归调用返回之后才可用。
- en: With *tail recursion*, the broken-down problem is solved first before the result
    is passed on to the next recursive call. Essentially, the return value of any
    given recursive step is the same as the result of the next recursive call. This
    allows for optimizing the call stack if the runtime supports it, as you will see
    in the next section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*尾递归*时，先解决分解的问题，然后再将结果传递给下一个递归调用。实际上，任何给定递归步骤的返回值都与下一个递归调用的结果相同。如果运行时支持，这样可以优化调用堆栈，如下一节所示。
- en: Recursion and the Call Stack
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归和调用堆栈
- en: If you look at [Figure 12-1](#_02-recursion_smalller_problems) again, you can
    think of every box as a separate method call and, therefore, a new stack frame
    on the call stack. That is a necessity because every box must be isolated from
    previous calculations so that their arguments won’t affect each other. The total
    recursive call count is only constrained by how long it takes to reach a base
    condition. The problem is, though, that the available stack size is finite. Too
    many calls will fill up the available stack space and eventually throw a `StackOverflowError`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次查看[图 12-1](#_02-recursion_smalller_problems)，你可以将每个方框看作是一个单独的方法调用，因此，在调用堆栈上会有一个新的栈帧。这是必需的，因为每个方框必须与先前的计算隔离开来，这样它们的参数不会相互影响。总的递归调用次数仅受到达到基本条件的时间限制。问题在于，可用的堆栈大小是有限的。过多的调用将填满可用的堆栈空间，并最终引发`StackOverflowError`。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: A stack frame contains the state of a single method invocation. Each time your
    code calls a method, the JVM creates and pushes a new frame on the thread’s stack.
    After returning from a method, its stack frame gets popped and discarded.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 栈帧包含单个方法调用的状态。每次代码调用一个方法时，JVM都会创建并推送一个新的栈帧到线程的堆栈上。在方法返回后，其栈帧被弹出并丢弃。
- en: The actual maximum stack depth depends on the available stack size^([1](ch12.xhtml#idm45115220279984)),
    and what’s stored in the individual frames.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的最大堆栈深度取决于可用堆栈大小^([1](ch12.xhtml#idm45115220279984))，以及存储在各个帧中的内容。
- en: To prevent the stack from overflowing, many modern compilers use *tail-call
    optimization/elimination* to remove no longer required frames in recursive call
    chains. If no additional calculations take place after a recursive call, the stack
    frame is no longer needed and can be removed. That reduces the stack frame space
    complexity of the recursive call from `O(N)` to `O(1)`, resulting in faster and
    more memory-friendly machine code without an overflowing stack.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, the Java compiler and runtime lack that particular ability yet, as of
    early 2023.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, recursion is still a valuable tool for a subset of particular
    problems, even without optimization of the call stack.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: A More Complex Example
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As good as calculating a factorial is for explaining recursion, it isn’t a
    typical “real-world” problem. That’s why it’s time to look at a more realistic
    example: traversing a tree-like data structure, as seen in [Figure 12-2](#_02-recursion_tree).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Tree-like data structure traversal](assets/afaj_1202.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. Tree-like data structure traversal
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The data structure has a single root node, and every node has an optional left
    and right child node. Their numbers are for identification, not the order of any
    traversal.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The nodes are represented by a generic Record `Node<T>`, as shown in [Example 12-3](#_02-recursion_tree-node).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-3\. Tree node structure
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The goal is to traverse the tree “in order.” That means every node’s left child
    node is traversed first until no other left node is found. Then it will continue
    traversing down its right child’s left nodes before going up again.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: First, we will implement the tree-traversal with an iterative approach and then
    compare it to a recursive one.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Iterative Tree-Traversal
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the help of a `while` loop, traversing the tree is as you would expect.
    It requires temporary variables and coordination boilerplate for traversal, as
    seen in [Example 12-4](#_02-recursion_tree-iterative).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-4\. Iterative tree traversal
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_recursion_CO3-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliary variables are required to save the current state of the iteration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_recursion_CO3-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Iterate until no node is present, or `nodeStack` isn’t empty.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_recursion_CO3-3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: A `java.util.Stack` saves all nodes until the bottom is reached.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_recursion_CO3-4)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the loop can’t go deeper because it encountered `current == null`,
    so it sets `current` to the last node saved in `tmpNodes`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_recursion_CO3-5)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Output the node value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_recursion_CO3-6)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Rinse and repeat with the right child node.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as expected: *748251396*.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Although it works as intended, the code isn’t very concise and requires mutable
    auxiliary variables to work properly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the recursive approach to see if it’s an improvement over
    iteration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Recursive Tree-Traversal
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a recursive solution to traverse the tree, you must first clearly
    define the different steps needed, including the base condition.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个递归解决方案以遍历树，必须首先明确定义包括基本条件在内的不同步骤。
- en: 'Traversing the tree requires two recursive calls, an action, and a base condition:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历树需要两次递归调用，一个动作和一个基本条件：
- en: Traverse the left node
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历左节点
- en: Traverse the right node
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历右节点
- en: Print a node’s value
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印节点的值
- en: Stop if no further nodes are found
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找不到更多节点，则停止
- en: The Java implementation of these different steps in their correct order is shown
    in [Example 12-5](#_02-recursion_tree-iterative-simple).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同步骤在Java中的实现顺序如[示例 12-5](#_02-recursion_tree-iterative-simple)所示。
- en: Example 12-5\. Recursive tree traversal
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-5\. 递归树遍历
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_recursion_CO4-1)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_recursion_CO4-1)'
- en: The base condition to stop the traversal if no nodes remain.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有剩余节点，则停止遍历的基本条件。
- en: '[![2](assets/2.png)](#co_recursion_CO4-2)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_recursion_CO4-2)'
- en: First, recursively traverse the left child node. This will call `traverse` again
    as long as a left node exists.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，递归地遍历左子节点。只要左节点存在，这将再次调用`traverse`。
- en: '[![3](assets/3.png)](#co_recursion_CO4-3)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_recursion_CO4-3)'
- en: Second, because no more left child nodes exist, the current value needs to be
    printed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，因为不再存在左子节点，需要打印当前值。
- en: '[![4](assets/4.png)](#co_recursion_CO4-4)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_recursion_CO4-4)'
- en: Third, traverse the possible right child node with the same logic as before.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步，像之前一样使用相同逻辑遍历可能的右子节点。
- en: 'The output is the same as before: *748251396*.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与之前相同：*748251396*。
- en: The code no longer requires an external iterator or auxiliary variables to hold
    the state, and the actual processing logic is reduced to a minimum. The traversal
    is no longer in the imperative mindset of *what to do*. Instead, it reflects the
    functional approach of *how to achieve* a goal in a more declarative way.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码不再需要外部迭代器或辅助变量来保存状态，实际处理逻辑被减少到最小。遍历不再处于*做什么*的命令式思维中。相反，它以更声明式的方式反映了*如何实现*目标的函数式方法。
- en: Let’s make the tree traversal even more functional by moving the traversal process
    into the type itself and accepting a `Consumer<Node<T>>` for its action, as shown
    in [Example 12-6](#_02-recursion_tree-node-recursive).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将遍历过程移到类型本身并接受一个`Consumer<Node<T>>`来使树的遍历更加功能化，如[示例 12-6](#_02-recursion_tree-node-recursive)所示。
- en: Example 12-6\. Extend `Node<T>` with traversal method
  id: totrans-105
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-6\. 用遍历方法扩展`Node<T>`
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_recursion_CO5-1)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_recursion_CO5-1)'
- en: The previous `traverse` method can easily be refactored into a `private static`
    method on the original type.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的`traverse`方法可以很容易地重构为原始类型上的`private static`方法。
- en: '[![2](assets/2.png)](#co_recursion_CO5-2)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_recursion_CO5-2)'
- en: The new `traverse` method accepts a `Consumer<Node<T>>` to support any kind
    of action.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`traverse`方法接受`Consumer<Node<T>>`以支持任何类型的操作。
- en: '[![3](assets/3.png)](#co_recursion_CO5-3)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_recursion_CO5-3)'
- en: A `public` method for traversal simplifies the call be omitting `this` as its
    first argument.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于遍历的`public`方法简化了调用，省略了作为其第一个参数的`this`。
- en: Traversing the type became even easier. The type itself is now responsible for
    the best way to traverse itself and provides a flexible solution for anyone using
    it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历类型变得更加容易。类型本身现在负责最佳遍历方式，并为使用者提供了灵活的解决方案。
- en: It’s concise, functional, and easier to understand compared to the iterative
    approach. Still, there are advantages to using a loop. The biggest one is the
    performance discrepancy, trading the needed stack space for available heap space.
    Instead of creating a new stack frame for every recursive traversal operation,
    the nodes accumulate on the heap in `tmpNodes`. That makes the code more robust
    for larger graphs that might otherwise lead to a stack overflow.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与迭代方法相比，这种方式更为简洁、功能性强，更易于理解。但是，使用循环也有其优势。最大的优势是性能差异，通过交换所需的堆栈空间来获得可用的堆空间。在每次递归遍历操作时，不再创建新的堆栈帧，节点在`tmpNodes`上累积于堆中。这使得代码对于可能导致堆栈溢出的较大图形更加健壮。
- en: As you can see, there’s no easy answer to which approach is best. It always
    depends highly on the kind of data structure and how much data you need to process.
    Even then, your personal preference and familiarity with a particular approach
    might be more important than the “best” solution to a problem to write straightforward
    and bug-free processing code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，没有一个简单的答案来确定哪种方法最佳。这完全取决于数据结构的类型以及需要处理的数据量。即使如此，你个人的偏好和对特定方法的熟悉程度可能比寻找“最佳”解决方案更为重要，用于编写简单明了、无bug的处理代码。
- en: Recursion-like Streams
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类似递归的Streams
- en: Java’s runtime might not support tail-call optimization, however, you can still
    implement a recursive-like experience with lambda expressions and Streams that
    don’t suffer from overflowing stack issues.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Java的运行时可能不支持尾递归优化，然而，你仍然可以通过lambda表达式和Streams实现类似递归的体验，这些方式不会遭受堆栈溢出问题的困扰。
- en: Thanks to the lazy nature of Streams, you can build a pipeline that runs infinitely
    until the recursive problem is solved. But instead of calling a lambda expression
    recursively, it returns a new expression instead. This way, the stack depth will
    remain constant, regardless of the number of performed recursive steps.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了Streams的惰性特性，你可以构建一个流水线，直到递归问题得以解决。但与其递归调用lambda表达式不同，它返回一个新的表达式。这样，无论执行多少递归步骤，堆栈深度都将保持恒定。
- en: This approach is quite convoluted compared to recursion or even using loops.
    It’s not commonly used, but it illustrates how to combine various new functional
    components of Java to solve recursive problems. Take a look at the book’s [code
    repository](https://github.com/benweidig/a-functional-approach-to-java) if you’d
    like to learn more.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与递归或者使用循环相比，这种方法相当复杂。虽然不常用，但它展示了如何结合Java的各种新功能组件来解决递归问题。如果你想进一步了解，请查看书籍的[代码库](https://github.com/benweidig/a-functional-approach-to-java)。
- en: Final Thoughts on Recursion
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归的最终思考
- en: Recursion is an often overlooked technique because it’s so easy to get it wrong.
    For example, a faulty base condition may be impossible to fulfill, which inevitably
    leads to a stack overflow. The recursive flow, in general, is harder to follow
    and more difficult to understand if you’re not used to it. Because Java does not
    have *tail-call optimization*, you will have to factor in the unavoidable overhead,
    which results in slower execution times than iterative structures, in addition
    to the possibility of a `StackOverflowError` if your call stack is too deep.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 递归通常被忽视，因为很容易出错。例如，错误的基础条件可能是不可能实现的，这必然会导致堆栈溢出。总体来说，递归的流程更难以跟踪和理解，如果你不习惯的话。因为Java没有*尾调用优化*，你必须考虑不可避免的开销，这导致执行时间比迭代结构慢，而且可能会遇到`StackOverflowError`的问题。
- en: You should always consider the additional overhead and stack-overflow problems
    when choosing between recursion and its alternatives. If you’re running in a JVM
    with ample available memory and a big enough stack size, even bigger recursive
    call chains won’t be an issue. But if your problem size is unknown or not fixed,
    an alternative approach might be more sensible to prevent a `StackOverflowError`
    in the long run.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择递归和其它替代方案时，务必考虑额外的开销和堆栈溢出问题。如果你在拥有充足内存和足够大栈大小的JVM中运行，即使是更大的递归调用链也不会成问题。但如果你的问题规模未知或不固定，长远来看采用替代方法可能更明智，以预防`StackOverflowError`。
- en: Some scenarios are better suited for a recursive approach, even in Java with
    its lack of tail-call optimization. Recursion will feel like a more natural way
    to solve particular problems with self-referencing data structures like linked
    lists or trees. Traversing tree-like structures can also be done iteratively but
    will most likely result in more complex code that’s harder to reason with.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一些场景更适合采用递归方法，即使在Java中缺乏尾递归优化的情况下。递归将会感觉更自然地解决特定的问题，特别是对于像链表或树这样的自引用数据结构。遍历类似树结构的数据也可以通过迭代方式实现，但很可能会导致更复杂、更难以理解的代码。
- en: But remember, choosing the best solution for a problem solely from a technical
    viewpoint might undermine the readability and reasonability of your code, which
    will affect long-time maintainability.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 但请记住，仅从技术角度选择最佳解决方案可能会削弱代码的可读性和合理性，从而影响长期可维护性。
- en: '[Table 12-1](#_02-recursion_vs-iteration) gives you an overview of the differences
    between recursion and iteration, so you can use them to choose more effectively.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[表12-1](#_02-recursion_vs-iteration) 提供了递归与迭代之间的区别概述，以便您更有效地选择使用它们。'
- en: Table 12-1\. Recursion versus iteration
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表12-1\. 递归与迭代对比
- en: '|  | Recursion | Iteration |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '|  | 递归 | 迭代 |'
- en: '| --- | --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Approach | Self-calling function | Loop construct |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 自调用函数 | 循环结构 |'
- en: '| State | Stored on Stack | Stored in control variables (e.g., a loop index)
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 状态 | 存储在堆栈上 | 存储在控制变量中（例如循环索引） |'
- en: '| Progression | Towards base condition | Towards control value condition |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 进展 | 向基本条件 | 向控制值条件 |'
- en: '| Termination | Base condition reached | Control variable condition reached
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 终止条件 | 达到基本条件 | 达到控制变量条件 |'
- en: '| Verbosity | Lower verbosity Minimal boilerplate and coordination code required
    | Higher verbosity Explicit coordination of control variables and state. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 冗余性 | 较低冗余性，需要的最小样板和协调代码 | 较高冗余性，需要显式协调控制变量和状态。 |'
- en: '| If not terminated | `StackOverflowError` | Endless loop |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 如果未终止 | `StackOverflowError` | 无尽循环 |'
- en: '| Overhead | Higher overhead of repeated method calls. | Lower overhead with
    constant stack depth. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 开销 | 重复方法调用的开销较高。 | 恒定堆栈深度减少了开销。 |'
- en: '| Performance | Lower performance due to overhead and missing tail-call optimization.
    | Better performance thanks to constant call stack depth. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 性能 | 由于开销和缺少尾递归优化而性能较低。 | 由于恒定的调用堆栈深度而性能更好。 |'
- en: '| Memory Usage | Each call requires stack space. | No additional memory besides
    control variables. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 内存使用 | 每次调用都需要堆栈空间。 | 除了控制变量外没有额外的内存使用。 |'
- en: '| Execution speed | Slower | Faster |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 执行速度 | 较慢 | 较快 |'
- en: Which to choose — recursion or iteration — depends highly on the problem you
    want to solve and in which environment your code runs. Recursion is often the
    preferred tool for solving more abstract problems, and iteration is a better match
    for more low-level code. Iteration might provide better runtime performance, but
    recursion can improve your productivity as a programmer.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 选择递归还是迭代取决于你要解决的问题以及代码运行的环境。对于解决更抽象的问题，递归通常是首选工具，而迭代更适合于更低级别的代码。迭代可能提供更好的运行时性能，但递归可以提高程序员的生产力。
- en: Don’t forget that you can always start with a familiar iterative approach and
    convert it to use recursion later.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了你始终可以从熟悉的迭代方法开始，稍后转换为使用递归。
- en: Takeaways
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要点
- en: Recursion is the functional alternative to “traditional” iteration.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归是对“传统”迭代的功能替代。
- en: Recursion is best used for partially solvable problems.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归最适合部分可解决的问题。
- en: Java lacks tail-call-optimization, which can lead to `StackOverflowExceptions`.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java缺乏尾递归优化，这可能导致 `StackOverflowExceptions`。
- en: Don’t force recursion for functional’s sake. You can always start with an iterative
    approach and convert it to a recursive approach later.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要为了函数式而强制使用递归。你始终可以从迭代方法开始，稍后转换为递归方法。
- en: ^([1](ch12.xhtml#idm45115220279984-marker)) The default stack size of most JVM
    implementations is one megabyte. You can set a bigger stack size with the flag
    `-Xss`. See the [Oracle Java Tools Documentation](https://docs.oracle.com/en/java/javase/11/tools/java.xhtml#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-72BC3B70-49FF-4588-979F-7F8A32FEE6DA)
    for more information.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.xhtml#idm45115220279984-marker)) 大多数JVM实现的默认堆栈大小为一兆字节。你可以使用 `-Xss`
    标志设置更大的堆栈大小。请参阅[Oracle Java工具文档](https://docs.oracle.com/en/java/javase/11/tools/java.xhtml#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE__GUID-72BC3B70-49FF-4588-979F-7F8A32FEE6DA)获取更多信息。
