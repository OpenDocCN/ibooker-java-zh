["```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-reactive-pg-client</artifactId>\n</dependency>\n```", "```java\nquarkus.datasource.db-kind=postgresql\n%prod.quarkus.datasource.username=quarkus_test\n%prod.quarkus.datasource.password=quarkus_test\n%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://\n    localhost/quarkus_test\n```", "```java\npublic Multi<Customer> findAll() {\n  return Customer.streamAll(Sort.by(\"name\"));\n}\n```", "```java\nUni<Customer> customerUni = Customer.<Customer>findById(id)\n    .onItem().ifNull().failWith(\n        new WebApplicationException(\"Failed to find customer\",\n        Response.Status.NOT_FOUND)\n    );\n```", "```java\nUni<List<Order>> customerOrdersUni = orderService.getOrdersForCustomer(id);\n```", "```java\nreturn Uni.combine()\n    .all().unis(customerUni, customerOrdersUni)\n    .combinedWith((customer, orders) -> {\n      customer.orders = orders;\n      return customer;\n    })\n    .onItem().transform(customer -> Response.ok(customer).build());\n```", "```java\nreturn Panache\n    .withTransaction(customer::persist)\n    .replaceWith(Response.ok(customer).status(Response.Status.CREATED).build());\n```", "```java\nreturn Panache\n    .withTransaction(\n        () -> Customer.<Customer>findById(id)\n            .onItem().ifNotNull().invoke(entity -> entity.name = customer.name)\n    )\n```", "```java\nreturn Panache\n    .withTransaction(() -> Customer.deleteById(id))\n    .map(deleted -> deleted\n        ? Response.ok().status(Response.Status.NO_CONTENT).build()\n        : Response.ok().status(Response.Status.NOT_FOUND).build());\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-redis-client</artifactId>\n</dependency>\n```", "```java\nquarkus.redis.hosts=redis://localhost:6379\n```", "```java\n@Inject\nReactiveRedisClient reactiveRedisClient;\n```", "```java\nprivate static final String CUSTOMER_HASH_PREFIX = \"cust:\";\n```", "```java\npublic Multi<Customer> allCustomers() {\n  return reactiveRedisClient.keys(\"*\")\n      .onItem().transformToMulti(response -> {\n        return Multi.createFrom().iterable(response).map(Response::toString);\n      })\n      .onItem().transformToUniAndMerge(key ->\n          reactiveRedisClient.hgetall(key)\n              .map(resp ->\n                  constructCustomer(\n                      Long.parseLong(\n                          key.substring(CUSTOMER_HASH_PREFIX.length())),\n                      resp)\n              )\n      );\n}\n```", "```java\npublic Uni<Customer> getCustomer(Long id) {\n  return reactiveRedisClient.hgetall(CUSTOMER_HASH_PREFIX + id)\n      .map(resp -> resp.size() > 0\n          ? constructCustomer(id, resp)\n          : null\n      );\n}\n```", "```java\nreturn reactiveRedisClient.hmset(\n    Arrays.asList(CUSTOMER_HASH_PREFIX + customer.id, \"name\", customer.name)\n)\n    .onItem().transform(resp -> {\n      if (resp.toString().equals(\"OK\")) {\n        return customer;\n      } else {\n        throw new NoSuchElementException();\n      }\n    });\n```", "```java\npublic Uni<Customer> createCustomer(Customer customer) {\n  return storeCustomer(customer);\n}\n```", "```java\npublic Uni<Customer> updateCustomer(Customer customer) {\n  return getCustomer(customer.id)\n      .onItem().transformToUni((cust) -> {\n        if (cust == null) {\n          return Uni.createFrom().failure(new NotFoundException());\n        }\n        cust.name = customer.name;\n        return storeCustomer(cust);\n      });\n}\n```", "```java\npublic Uni<Void> deleteCustomer(Long id) {\n  return reactiveRedisClient.hdel(Arrays.asList(CUSTOMER_HASH_PREFIX + id, \"name\"))\n      .map(resp -> resp.toInteger() == 1 ? true : null)\n      .onItem().ifNull().failWith(new NotFoundException())\n      .onItem().ifNotNull().transformToUni(r -> Uni.createFrom().nullItem());\n}\n```", "```java\ncurl -i -X POST -H \"Accept:application/json\" -H \"Content-Type:application/json\" \\\n    http://localhost:8083/connectors/ -d @register.json\n```", "```java\n{\n  \"name\": \"customer-connector\",\n  \"config\": {\n    \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\n    \"tasks.max\": \"1\",\n    \"database.hostname\": \"postgres\",\n    \"database.port\": \"5432\",\n    \"database.user\": \"quarkus_test\",\n    \"database.password\": \"quarkus_test\",\n    \"database.dbname\": \"quarkus_test\",\n    \"database.server.name\": \"quarkus-db-server\"\n  }\n}\n```", "```java\ndocker-compose exec kafka /kafka/bin/kafka-console-consumer.sh \\\n    --bootstrap-server kafka:9092 \\\n    --from-beginning \\                              ![1](assets/1.png)\n    --property print.key=true \\\n    --topic quarkus-db-server.public.customer\n```", "```java\ncurl -X POST -H \"Content-Type:application/json\" http://localhost:8080/customer \\\n    -d '{\"name\" : \"Harry Houdini\"}'\n```", "```java\n{\n  \"schema\": {\n    \"type\":\"struct\",\n    \"fields\": [{\n      \"type\":\"int64\",\n      \"optional\":false,\n      \"field\":\"id\"\n    }],\n    \"optional\":false,\n    \"name\":\"quarkus_db_server.public.customer.Key\"\n  },\n  \"payload\": {\n    \"id\":9                    ![1](assets/1.png)\n  }\n}\n{\n  \"schema\": {\n    // JSON defining the schema of the payload removed for brevity\n\n    \"optional\": false,\n    \"name\": \"quarkus_db_server.public.customer.Envelope\"\n  },\n  \"payload\": {\n    \"before\": null,\n    \"after\": {\n      \"id\": 9,                       ![1](assets/1.png)\n      \"name\": \"Harry Houdini\"        ![2](assets/2.png)\n    },\n    \"source\": {\n      \"version\": \"1.5.0.Final\",\n      \"connector\": \"postgresql\",\n      \"name\": \"quarkus-db-server\",\n      \"ts_ms\": 1627865571265,\n      \"snapshot\": \"false\",\n      \"db\": \"quarkus_test\",\n      \"sequence\": \"[null,\\\"23870800\\\"]\",\n      \"schema\": \"public\",\n      \"table\": \"customer\",\n      \"txId\": 499,\n      \"lsn\": 23871232,\n      \"xmin\": null\n    },\n    \"op\": \"c\",\n    \"ts_ms\": 1627865571454,\n    \"transaction\": null\n  }\n}\n```"]