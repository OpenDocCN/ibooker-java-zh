["```java\nC:\\javasrc>javac HelloWorld.java\n\nC:\\javasrc>java HelloWorld\nHello, World\n\nC:\\javasrc>\n```", "```java\n\t$ java HelloWorld.java\n\tHello, Java\n\t$\n\n```", "```java\n$ cd /Library/Java/JavaVirtualMachines\n$ tar xzvf ~/Downloads/graalvm-ce-NNN-VVV.tar.gz # replace with actual version\n$ cd\n$ /usr/libexec/java_home -V # macOS only\n11.0.2, x86_64:    \"OpenJDK 11.0.2\"\n    /Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home\n1.8.0_221, x86_64:    \"GraalVM CE 19.2.0.1\"\n    /Library/Java/JavaVirtualMachines/graalvm-ce-19.2.0.1/Contents/Home\n$\n```", "```java\nexport JAVA_HOME=<where you installed GraalVM>/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n```", "```java\n$ java -version\nopenjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build\n  1.8.0_222-20190711112007.graal.jdk8u-src-tar-gz-b08)\nOpenJDK 64-Bit GraalVM CE 19.2.0.1 (build 25.222-b08-jvmci-19.2-b02, mixed mode)\n```", "```java\n$ jshell\n|  Welcome to JShell -- Version 11.0.2\n|  For an introduction type: /help intro\n\njshell> \"Hello\"\n$1 ==> \"Hello\"\n\njshell> System.out.println(\"Hello\");\nHello\n\njshell> System.out.println($1)\nHello\n\njshell> \"Hello\" + sqrt(57)\n|  Error:\n|  cannot find symbol\n|    symbol:   method sqrt(int)\n|  \"Hello\" + sqrt(57)\n|            ^--^\n\njshell> \"Hello\" + Math.sqrt(57)\n$2 ==> \"Hello7.54983443527075\"\n\njshell> String.format(\"Hello %6.3f\", Math.sqrt(57)\n   ...> )\n$3 ==> \"Hello  7.550\"\n\njshell> String x = Math.sqrt(22/7) + \" \" + Math.PI +\n   ...> \" and the end.\"\nx ==> \"1.7320508075688772 3.141592653589793 and the end.\"\n\njshell>\n```", "```java\n$ jshell\n|  Welcome to JShell -- Version 11.0.2\n|  For an introduction type: /help intro\n\njshell> while (true) { sleep (30*60); JOptionPane.showMessageDialog(null,\n  \"Move it\"); }\n|  Error:\n|  cannot find symbol\n|    symbol:   method sleep(int)\n|  while (true) { sleep (30*60); JOptionPane.showMessageDialog(null, \"Move it\");}\n|                 ^---^\n|  Error:\n|  cannot find symbol\n|    symbol:   variable JOptionPane\n|  while (true) { sleep (30*60); JOptionPane.showMessageDialog(null, \"Move it\");}\n|                                ^---------^\n\njshell> import javax.swing.*;\n\njshell> while (true) { Thread.sleep (30*60); JOptionPane.showMessageDialog(null,\n\"Move it\"); }\n\njshell> while (true) { Thread.sleep (30*60 * 1000);\n  JOptionPane.showMessageDialog(null, \"Move it\"); }\n\njshell> ^D\n```", "```java\nC:\\> java -classpath c:\\ian\\classes MyProg\n```", "```java\njshell> System.getProperties().forEach((k,v) -> {\n ... if (((String)k).contains(\"boot\")) System.out.println(k + \"->\" +v);})\nsun.boot.library.path->/usr/local/jdk-11/lib\n```", "```java\njavac -d $HOME/classes HelloWorld.java\njava -cp $HOME/classes starting.HelloWorld\nHello, world!\n\n```", "```java\n<dependency>\n   <groupId>com.darwinsys</groupId>\n   <artifactId>darwinsys-api</artifactId>\n   <version>1.1.3</version>\n</dependency>\n```", "```java\npackage com.darwinsys;\n```", "```java\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.example</groupId>\n  <artifactId>my-se-project</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>my-se-project</name>\n  <url>http://com.example/</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n```", "```java\n$ mvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.maven.archetypes \\\n    -DarchetypeArtifactId=maven-archetype-quickstart \\\n    -DgroupId=com.example -DartifactId=my-se-project\n\n[INFO] Scanning for projects...\nDownloading: http://repo1.maven.org/maven2/org/apache/maven/plugins/\n    maven-deploy-plugin/2.5/maven-deploy-plugin-2.5.pom\n[several dozen or hundred lines of downloading POM files and Jar files...]\n[INFO] Generating project in Interactive mode\n[INFO] Archetype [org.apache.maven.archetypes:maven-archetype-quickstart:1.1]\n    found in catalog remote\n[INFO] Using property: groupId = com.example\n[INFO] Using property: artifactId = my-se-project\nDefine value for property 'version':  1.0-SNAPSHOT: :\n[INFO] Using property: package = com.example\nConfirm properties configuration:\ngroupId: com.example\nartifactId: my-se-project\nversion: 1.0-SNAPSHOT\npackage: com.example\n Y: : y\n[INFO] ------------------------------------------------------------------------\n[INFO] Using following parameters for creating project from Old (1.x) Archetype:\n    maven-archetype-quickstart:1.1\n[INFO] ------------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: com.example\n[INFO] Parameter: packageName, Value: com.example\n[INFO] Parameter: package, Value: com.example\n[INFO] Parameter: artifactId, Value: my-se-project\n[INFO] Parameter: basedir, Value: /private/tmp\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] project created from Old (1.x) Archetype in dir: /private/tmp/\n    my-se-project\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 6:38.051s\n[INFO] Finished at: Sun Jan 06 19:19:18 EST 2013\n[INFO] Final Memory: 7M/81M\n[INFO] ------------------------------------------------------------------------\n```", "```java\nmvn wildfly:deploy\n```", "```java\n# Simple Gradle Build for the Java-based DataVis project\napply plugin: 'java'\n# Set up mappings for Eclipse project too\napply plugin: 'eclipse'\n\n# The version of Java to use\nsourceCompatibility = 11\n# The version of my project\nversion = '1.0.3'\n# Configure JAR file packaging\njar {\n    manifest {\n        attributes 'Main-class': 'com.somedomainnamehere.data.DataVis',\n        'Implementation-Version': version\n    }\n}\n\n# optional feature: like -Dtesting=true but only when running tests (\"test task\")\ntest {\n    systemProperties 'testing': 'true'\n}\n```", "```java\n# Tell Gradle to look in Maven Central\nrepositories {\n    mavenCentral()\n}\n\n# We need darwinsys-api for compiling as well as JUnit for testing\ndependencies {\n    compile group: 'com.darwinsys', name: 'darwinsys-api', version: '1.0.3+'\n    testCompile group: 'junit', name: 'junit', version: '4.+'\n}\n```", "```java\nimport java.util.Date;\n\n/** Demonstrate deprecation warning */\npublic class Deprec {\n\n    public static void main(String[] av) {\n\n        // Create a Date object for May 5, 1986\n        @SuppressWarnings(\"deprecation\")\n        // EXPECT DEPRECATION WARNING without @SuppressWarnings\n        Date d = new Date(86, 04, 05);\n        System.out.println(\"Date is \" + d);\n    }\n}\n```", "```java\nC:\\javasrc>javac Deprec.java\nNote: Deprec.java uses or overrides a deprecated API.  Recompile with\n\"-deprecation\" for details.\n1 warning\nC:\\javasrc>\n```", "```java\nC:\\javasrc>javac -deprecation Deprec.java\nDeprec.java:10: warning: constructor Date(int,int,int) in class java.util.Date\nhas been deprecated\n                Date d = new Date(86, 04, 05);          // May 5, 1986\n                         ^\n1 warning\n\nC:\\javasrc>\n```", "```java\npublic class PersonTest {\n\n    @Test\n    public void testNameConcat() {\n        Person p = new Person(\"Ian\", \"Darwin\");\n        String f = p.getFullName();\n        assertEquals(\"Name concatenation\", \"Ian Darwin\", f);\n    }\n}\n```", "```java\n$ javac PersonTest.java\n$ java -classpath .:junit4.x.x.jar junit.textui.TestRunner testing.PersonTest\n.\nTime: 0.188\n\nOK (1 tests)\n\n$\n```", "```java\npublic class HamcrestDemo {\n\n    @Test\n    public void testNameConcat() {\n        Person p = new Person(\"Ian\", \"Darwin\");\n        String f = p.getFullName();\n        assertThat(f, containsString(\"Ian\"));\n        assertThat(f, equalTo(\"Ian Darwin\"));\n        assertThat(f, not(containsString(\"/\"))); // contrived, to show syntax\n    }\n}\n```", "```java\njava -jar jenkins.war\n```"]