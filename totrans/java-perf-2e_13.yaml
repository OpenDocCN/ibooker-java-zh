- en: Appendix. Summary of Tuning Flags
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录. 调优标志摘要
- en: This appendix covers commonly used flags and gives pointers on when to use them.
    *Commonly used* here includes flags that were commonly used in previous versions
    of Java and are no longer recommended; documentation and tips on older versions
    of Java may recommend those flags, so they are mentioned here.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录涵盖了常用标志并指导何时使用它们。*常用* 在这里包括了在早期Java版本中常用且不再推荐的标志；旧版本Java的文档和提示可能会推荐这些标志，因此在这里进行了提及。
- en: Table A-1\. Flags to tune the just-in-time compiler
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-1. 调整即时编译器的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-server` | This flag no longer has any effect; it is silently ignored. |
    N/A | [“Tiered Compilation”](ch04.html#TieredCompilation) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `-server` | 此标志不再起作用，会被默默忽略。 | 不适用 | [“分层编译”](ch04.html#TieredCompilation)
    |'
- en: '| `-client` | This flag no longer has any effect; it is silently ignored. |
    N/A | [“Tiered Compilation”](ch04.html#TieredCompilation) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `-client` | 此标志不再起作用，会被默默忽略。 | 不适用 | [“分层编译”](ch04.html#TieredCompilation)
    |'
- en: '| `-XX:+TieredCompilation` | Uses tiered compilation. | Always, unless you
    are severely constrained for memory. | [“Tiered Compilation”](ch04.html#TieredCompilation)
    and [“Tiered Compilation Trade-offs”](ch04.html#NoTieredCompilation) |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+TieredCompilation` | 使用分层编译。 | 除非内存严重受限，否则始终使用。 | [“分层编译”](ch04.html#TieredCompilation)
    和 [“分层编译的权衡”](ch04.html#NoTieredCompilation) |'
- en: '| `-XX:ReservedCodeCacheSize=`*`<MB>`* | Reserves space for code compiled by
    the JIT compiler. | When running a large program and you see a warning that you
    are out of code cache. | [“Tuning the Code Cache”](ch04.html#JITCodeCache) |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:ReservedCodeCacheSize=`*`<MB>`* | 为JIT编译器编译的代码保留空间。 | 运行大型程序时，如果看到代码缓存不足的警告。
    | [“调整代码缓存”](ch04.html#JITCodeCache) |'
- en: '| `-XX:InitialCodeCacheSize=`*`<MB>`* | Allocates the initial space for code
    compiled by the JIT compiler. | If you need to preallocate the memory for the
    code cache (which is uncommon). | [“Tuning the Code Cache”](ch04.html#JITCodeCache)
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:InitialCodeCacheSize=`*`<MB>`* | 为JIT编译器编译的代码分配初始空间。 | 如果需要预先分配代码缓存的内存（这种情况很少见）。
    | [“调整代码缓存”](ch04.html#JITCodeCache) |'
- en: '| `-XX:CompileThreshold=`*`<N>`* | Sets the number of times a method or loop
    is executed before compiling it. | This flag is no longer recommended. | [“Compilation
    Thresholds”](ch04.html#CompileThreshold) |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:CompileThreshold=`*`<N>`* | 设置方法或循环执行多少次后进行编译。 | 此标志已不再推荐使用。 | [“编译阈值”](ch04.html#CompileThreshold)
    |'
- en: '| `-XX:+PrintCompilation` | Provides a log of operations by the JIT compiler.
    | When you suspect an important method isn’t being compiled or are generally curious
    as to what the compiler is doing. | [“Inspecting the Compilation Process”](ch04.html#PrintCompilation)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintCompilation` | 提供JIT编译器操作的日志。 | 当怀疑某个重要方法未被编译，或者对编译器的操作感到好奇时。
    | [“检查编译过程”](ch04.html#PrintCompilation) |'
- en: '| `-XX:CICompilerCount=`*`<N>`* | Sets the number of threads used by the JIT
    compiler. | When too many compiler threads are being started. This primarily affects
    large machines running many JVMs. | [“Compilation Threads”](ch04.html#CompilationThreads)
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:CICompilerCount=`*`<N>`* | 设置JIT编译器使用的线程数。 | 当启动了过多的编译器线程时。主要影响运行多个JVM的大型机器。
    | [“编译线程”](ch04.html#CompilationThreads) |'
- en: '| `-XX:+DoEscapeAnalysis` | Enables aggressive optimizations by the compiler.
    | On rare occasions, this can trigger crashes, so it is sometimes recommended
    to be disabled. Don’t disable it unless you know it is causing an issue. | [“Escape
    Analysis”](ch04.html#EscapeAnalysis) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+DoEscapeAnalysis` | 启用编译器的激进优化。 | 在罕见情况下可能引发崩溃，因此有时建议禁用。除非确定它引起了问题，否则不要禁用。
    | [“逃逸分析”](ch04.html#EscapeAnalysis) |'
- en: '| `-XX:UseAVX=`*`<N>`* | Sets the instruction set for use on Intel processors.
    | You should set this to 2 in early versions of Java 11; in later versions, it
    defaults to 2. | [“CPU-Specific Code”](ch04.html#UseAVX) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:UseAVX=`*`<N>`* | 设置在Intel处理器上使用的指令集。 | 在Java 11早期版本中应将此设置为2；在后续版本中，默认为2。
    | [“特定于CPU的代码”](ch04.html#UseAVX) |'
- en: '| `-XX:AOTLibrary=`*`<path>`* | Uses the specified library for ahead-of-time
    compilation. | In limited cases, may speed up initial program execution. Experimental
    in Java 11 only. | [“Ahead-of-Time Compilation”](ch04.html#AOTC) |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:AOTLibrary=`*`<path>`* | 使用指定库进行预编译。 | 在某些有限情况下，可能加速初始程序执行。仅在Java 11中为实验特性。
    | [“预编译”](ch04.html#AOTC) |'
- en: Table A-2\. Flags to choose the GC algorithm
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-2. 选择GC算法的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: Flag | 它的作用 | 何时使用它 | 另请参阅
- en: '| --- | --- | --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- | ---'
- en: '| `-XX:+UseSerialGC` | Uses a simple, single-threaded GC algorithm. | For single-core
    virtual machines and containers, or for small (100 MB) heaps. | [“The serial garbage
    collector”](ch05.html#SerialGC) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseSerialGC` | 使用简单的单线程 GC 算法。 | 适用于单核虚拟机和容器，或者小（100 MB）堆。 | [“串行垃圾收集器”](ch05.html#SerialGC)'
- en: '| `-XX:+UseParallelGC` | Uses multiple threads to collect both the young and
    old generations while application threads are stopped. | Use to tune for throughput
    rather than responsiveness; default in Java 8. | [“The throughput collector”](ch05.html#ThroughputGC)
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseParallelGC` | 使用多线程收集年轻代和老年代，同时应用程序线程停止。 | 用于通过吞吐量调优而不是响应性；Java 8
    的默认选项。 | [“吞吐量收集器”](ch05.html#ThroughputGC)'
- en: '| `-XX:+UseG1GC` | Uses multiple threads to collect the young generation while
    application threads are stopped, and background thread(s) to remove garbage from
    the old generation with minimal pauses. | When you have available CPU for the
    background thread(s) and you do not want long GC pauses. Default in Java 11. |
    [“The G1 GC collector”](ch05.html#G1GC) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseG1GC` | 使用多线程收集年轻代，同时应用程序线程停止，以及后台线程从老年代中删除垃圾，最小化暂停时间。 | 当您有可用的 CPU
    用于后台线程，并且不希望出现长时间的 GC 暂停时使用。Java 11 的默认选项。 | [“G1 GC 收集器”](ch05.html#G1GC)'
- en: '| `-XX:+UseConcMarkSweepGC` | Uses background thread(s) to remove garbage from
    the old generation with minimal pauses. | No longer recommended; use G1 GC instead.
    | [“The CMS collector”](ch05.html#CMSGC) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseConcMarkSweepGC` | 使用后台线程从老年代中删除垃圾，最小化暂停时间。 | 不再推荐使用；请改用 G1 GC。 |
    [“CMS 收集器”](ch05.html#CMSGC)'
- en: '| `-XX:+UseParNewGC` | With CMS, uses multiple threads to collect the young
    generation while application threads are stopped. | No longer recommended; use
    G1 GC instead. | [“The CMS collector”](ch05.html#CMSGC) |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseParNewGC` | 与 CMS 一起，使用多线程收集年轻代，同时应用程序线程停止。 | 不再推荐使用；请改用 G1 GC。 |
    [“CMS 收集器”](ch05.html#CMSGC)'
- en: '| `-XX:+UseZGC` | Uses the experimental Z Garbage Collector (Java 12 only).
    | To have shorter pauses for young GC, which is collected concurrently. | [“Concurrent
    Compaction: ZGC and Shenandoah”](ch06.html#ZGC) |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseZGC` | 使用实验性的 Z 垃圾收集器（仅适用于 Java 12）。 | 为了减少年轻代 GC 的暂停时间，可以同时收集。 |
    [“并发压缩：ZGC 和 Shenandoah”](ch06.html#ZGC)'
- en: '| `-XX:+UseShenandoahGC` | Uses the experimental Shenandoah Garbage Collector
    (Java 12 OpenJDK only). | To have shorter pauses for young GC, which is collected
    concurrently. | [“Concurrent Compaction: ZGC and Shenandoah”](ch06.html#ZGC) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseShenandoahGC` | 使用实验性的 Shenandoah 垃圾收集器（仅适用于 Java 12 OpenJDK）。 | 为了减少年轻代
    GC 的暂停时间，可以同时收集。 | [“并发压缩：ZGC 和 Shenandoah”](ch06.html#ZGC)'
- en: '| `-XX:+UseEpsilonGC` | Uses the experimental Epsilon Garbage Collector (Java
    12 only). | If your app never needs to perform GC. | [“No Collection: Epsilon
    GC”](ch06.html#EpsilonGC) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseEpsilonGC` | 使用实验性的 Epsilon 垃圾收集器（仅适用于 Java 12）。 | 如果您的应用程序从不需要执行
    GC。 | [“无收集：Epsilon GC”](ch06.html#EpsilonGC)'
- en: Table A-3\. Flags common to all GC algorithms
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-3\. 所有 GC 算法共同的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: Flag | 它的作用 | 何时使用它 | 另请参阅
- en: '| --- | --- | --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- | ---'
- en: '| `-Xms` | Sets the initial size of the heap. | When the default initial size
    is too small for your application. | [“Sizing the Heap”](ch05.html#GCHeapSize)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '`-Xms` | 设置堆的初始大小。 | 当默认的初始大小对您的应用程序来说太小时。 | [“调整堆大小”](ch05.html#GCHeapSize)'
- en: '| `-Xmx` | Sets the maximum size of the heap. | When the default maximum size
    is too small (or possibly too large) for your application. | [“Sizing the Heap”](ch05.html#GCHeapSize)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '`-Xmx` | 设置堆的最大大小。 | 当默认的最大大小对您的应用程序来说太小（或可能太大）时。 | [“调整堆大小”](ch05.html#GCHeapSize)'
- en: '| `-XX:NewRatio` | Sets the ratio of the young generation to the old generation.
    | Increase this to reduce the proportion of the heap given to the young generation;
    lower it to increase the proportion of the heap given to the young generation.
    This is only an initial setting; the proportion will change unless adaptive sizing
    is turned off. As the young-generation size is reduced, you will see more frequent
    young GCs and less frequent full GCs (and vice versa). | [“Sizing the Generations”](ch05.html#GCGenSizing)
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '`-XX:NewRatio` | 设置年轻代与老年代的比例。 | 增加此比例以减少分配给年轻代的堆空间比例；降低此比例以增加分配给年轻代的堆空间比例。这只是一个初始设置；除非关闭自适应大小调整，否则比例将会变化。随着年轻代大小的减少，您将看到更频繁的年轻代
    GC 和较少的完全 GC（反之亦然）。 | [“调整代大小”](ch05.html#GCGenSizing)'
- en: '| `-XX:NewSize` | Sets the initial size of the young generation. | When you
    have finely tuned your application requirements. | [“Sizing the Generations”](ch05.html#GCGenSizing)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:NewSize` | 设置年轻代的初始大小。 | 当您已经精确调整了应用程序的需求时。 | [“代际大小调整”](ch05.html#GCGenSizing)
    |'
- en: '| `-XX:MaxNewSize` | Sets the maximum size of the young generation. | When
    you have finely tuned your application requirements. | [“Sizing the Generations”](ch05.html#GCGenSizing)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MaxNewSize` | 设置年轻代的最大大小。 | 当您已经精确调整了应用程序的需求时。 | [“代际大小调整”](ch05.html#GCGenSizing)
    |'
- en: '| `-Xmn` | Sets the initial and maximum size of the young generation. | When
    you have finely tuned your application requirements. | [“Sizing the Generations”](ch05.html#GCGenSizing)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `-Xmn` | 设置年轻代的初始和最大大小。 | 当您已经精确调整了应用程序的需求时。 | [“代际大小调整”](ch05.html#GCGenSizing)
    |'
- en: '| `-XX:MetaspaceSize=*`N`*` | Sets the initial size of the metaspace. | For
    applications that use a lot of classes, increase this from the default. | [“Sizing
    Metaspace”](ch05.html#GCMetaSpace) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MetaspaceSize=*`N`*` | 设置元空间的初始大小。 | 对于使用大量类的应用程序，可以增加此值以超过默认值。 | [“大小调整元空间”](ch05.html#GCMetaSpace)
    |'
- en: '| `-XX:MaxMetaspaceSize=*`N`*` | Sets the maximum size of the metaspace. |
    Lower this number to limit the amount of native space used by class metadata.
    | [“Sizing Metaspace”](ch05.html#GCMetaSpace) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MaxMetaspaceSize=*`N`*` | 设置元空间的最大大小。 | 将此数字降低以限制类元数据使用的本机空间量。 | [“大小调整元空间”](ch05.html#GCMetaSpace)
    |'
- en: '| `-XX:ParallelGCThreads=*`N`*` | Sets the number of threads used by the garbage
    collectors for foreground activities (e.g., collecting the young generation, and
    for throughput GC, collecting the old generation). | Lower this value on systems
    running many JVMs, or in Docker containers on Java 8 before update 192\. Consider
    increasing it for JVMs with very large heaps on very large systems. | [“Controlling
    Parallelism”](ch05.html#GCParallelThreads) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:ParallelGCThreads=*`N`*` | 设置垃圾收集器用于前台活动（例如收集年轻代和对吞吐量GC来说，收集老年代）的线程数。
    | 在运行多个JVM或者在Java 8更新192之前的Docker容器中，可以将此值降低。考虑在非常大的系统上增加这个值以支持非常大的堆的JVM。 | [“控制并行度”](ch05.html#GCParallelThreads)
    |'
- en: '| `-XX:+UseAdaptiveSizePolicy` | When set, the JVM will resize various heap
    sizes to attempt to meet GC goals. | Turn this off if the heap sizes have been
    finely tuned. | [“Adaptive sizing”](ch05.html#GCAdaptive) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UseAdaptiveSizePolicy` | 设置后，JVM将调整各种堆大小以尝试满足GC目标。 | 如果堆大小已经精确调整，请关闭此选项。
    | [“自适应大小调整”](ch05.html#GCAdaptive) |'
- en: '| `-XX:+PrintAdaptiveSizePolicy` | Adds information about how generations are
    resized to the GC log. | Use this flag to gain an understanding of how the JVM
    is operating. When using G1, check this output to see if full GCs are triggered
    by humongous object allocation. | [“Adaptive sizing”](ch05.html#GCAdaptive) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintAdaptiveSizePolicy` | 向GC日志添加有关代的调整大小信息。 | 使用此标志可以了解JVM的操作方式。使用G1时，检查此输出以查看是否通过巨大对象分配触发了完整GC。
    | [“自适应大小调整”](ch05.html#GCAdaptive) |'
- en: '| `-XX:+PrintTenuringDistribution` | Adds tenuring information to the GC logs.
    | Use the tenuring information to determine if and how the tenuring options should
    be adjusted. | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintTenuringDistribution` | 将续期信息添加到GC日志中。 | 使用续期信息确定是否以及如何调整续期选项。
    | [“续期和幸存者空间”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:InitialSurvivorRatio=*`N`*` | Sets the amount of the young generation
    set aside for survivor spaces. | Increase this if short-lived objects are being
    promoted into the old generation too frequently. | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:InitialSurvivorRatio=*`N`*` | 设置年轻代中专门用于幸存者空间的空间量。 | 如果短生命周期对象频繁晋升到老年代，可以增加此值。
    | [“续期和幸存者空间”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:MinSurvivorRatio=*`N`*` | Sets the adaptive amount of the young generation
    set aside for survivor spaces. | Decreasing this value reduces the maximum size
    of the survivor spaces (and vice versa). | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MinSurvivorRatio=*`N`*` | 设置年轻代中专用于幸存者空间的自适应空间量。 | 减少此值会减少幸存者空间的最大大小（反之亦然）。
    | [“续期和幸存者空间”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:TargetSurvivorRatio=*`N`*` | The amount of free space the JVM attempts
    to keep in the survivor spaces. | Increasing this value reduces the size of the
    survivor spaces (and vice versa). | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:TargetSurvivorRatio=*`N`*` | JVM尝试保持在幸存者空间中的空闲空间量。 | 增加此值会减少幸存者空间的大小（反之亦然）。
    | [“续期和幸存者空间”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:InitialTenuringThreshold=*`N`*` | The initial number of GC cycles the
    JVM attempts to keep an object in the survivor spaces. | Increase this number
    to keep objects in the survivor spaces longer, though be aware that the JVM will
    tune it. | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:InitialTenuringThreshold=*`N`*` | JVM尝试保持对象在survivor空间中的初始GC周期数。 | 增加此数字以使对象在survivor空间中保持更长时间，尽管要注意JVM会对其进行调整。
    | [“Tenuring和Survivor Spaces”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:MaxTenuringThreshold=*`N`*` | The maximum number of GC cycles the JVM
    attempts to keep an object in the survivor spaces. | Increase this number to keep
    objects in the survivor spaces longer; the JVM will tune the actual threshold
    between this value and the initial threshold. | [“Tenuring and Survivor Spaces”](ch06.html#SurvivorSpaces)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MaxTenuringThreshold=*`N`*` | JVM尝试保持对象在survivor空间中的最大GC周期数。 | 增加此数字以使对象在survivor空间中保持更长时间；JVM将在此值和初始阈值之间调整实际阈值。
    | [“Tenuring和Survivor Spaces”](ch06.html#SurvivorSpaces) |'
- en: '| `-XX:+DisableExplicitGC>` | Prevents calls to `System.gc()` from having any
    effect. | Use to prevent bad applications from explicitly performing GC. | [“Causing
    and Disabling Explicit Garbage Collection”](ch05.html#ExplicitGC) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+DisableExplicitGC>` | 阻止对`System.gc()`的调用产生任何效果。 | 用于防止糟糕的应用程序显式执行GC。
    | [“Causing和Disabling Explicit Garbage Collection”](ch05.html#ExplicitGC) |'
- en: '| `-XX:-AggressiveHeap` | Enables a set of tuning flags that are “optimized”
    for machines with a large amount of memory running a single JVM with a large heap.
    | It is better not to use this flag, and instead use specific flags as necessary.
    | [“AggressiveHeap”](ch06.html#AggressiveHeap) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:-AggressiveHeap` | 启用了一组对具有大量内存的机器以及运行单个具有大堆的JVM进行了“优化”的调整标志。 | 最好不要使用此标志，而是根据需要使用特定的标志。
    | [“AggressiveHeap”](ch06.html#AggressiveHeap) |'
- en: Table A-4\. Flags controlling GC logging
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 表A-4。控制GC日志记录的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 作用 | 何时使用 | 另请参阅 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-Xlog:gc*` | Controls GC logging in Java 11. | GC logging should always
    be enabled, even in production. Unlike the following set of flags for Java 8,
    this flag controls all options to Java 11 GC logging; see the text for a mapping
    of options for this to Java 8 flags. | [“GC Tools”](ch05.html#GCLogging) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `-Xlog:gc*` | 控制Java 11中的GC日志记录。 | 应始终启用GC日志记录，即使在生产中也是如此。 与Java 8的以下一组标志不同，此标志控制Java
    11 GC日志记录的所有选项； 有关将此选项映射到Java 8标志的文本，请参阅文本。 | [“GC工具”](ch05.html#GCLogging) |'
- en: '| `-verbose:gc` | Enables basic GC logging in Java 8. | GC logging should always
    be enabled, but other, more detailed logs are generally better. | [“GC Tools”](ch05.html#GCLogging)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `-verbose:gc` | 在Java 8中启用基本的GC日志记录。 | 应始终启用GC日志记录，但通常最好使用其他更详细的日志记录。 | [“GC工具”](ch05.html#GCLogging)
    |'
- en: '| `-Xloggc:`*`<path>`* | In Java 8, directs the GC log to a special file rather
    than standard output. | Always, the better to preserve the information in the
    log. | [“GC Tools”](ch05.html#GCLogging) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `-Xloggc:`*`<path>`* | 在Java 8中，将GC日志定向到特殊文件而不是标准输出。 | 始终如此，以更好地保存日志中的信息。
    | [“GC工具”](ch05.html#GCLogging) |'
- en: '| `-XX:+PrintGC` | Enables basic GC logging in Java 8. | GC logging should
    always be enabled, but other, more detailed logs are generally better. | [“GC
    Tools”](ch05.html#GCLogging) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintGC` | 在Java 8中启用基本的GC日志记录。 | 应始终启用GC日志记录，但通常更详细的日志记录更好。 | [“GC工具”](ch05.html#GCLogging)
    |'
- en: '| `-XX:+PrintGCDetails` | Enables detailed GC logging in Java 8. | Always,
    even in production (the logging overhead is minimal). | [“GC Tools”](ch05.html#GCLogging)
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintGCDetails` | 在Java 8中启用详细的GC日志记录。 | 始终如此，即使在生产中（日志记录开销很小）。 | [“GC工具”](ch05.html#GCLogging)
    |'
- en: '| `-XX:+PrintGCTimeStamps` | Prints a relative timestamp for each entry in
    the GC log in Java 8. | Always, unless datestamps are enabled. | [“GC Tools”](ch05.html#GCLogging)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintGCTimeStamps` | 在Java 8中，为GC日志中的每个条目打印相对时间戳。 | 始终如此，除非启用了日期时间戳。
    | [“GC工具”](ch05.html#GCLogging) |'
- en: '| `-XX:+PrintGCDateStamps` | Prints a time-of-day stamp for each entry in the
    GC log in Java 8. | Has slightly more overhead than timestamps, but may be easier
    to process. | [“GC Tools”](ch05.html#GCLogging) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintGCDateStamps` | 在Java 8中为GC日志中的每个条目打印时间戳。 | 比时间戳的开销略大，但可能更容易处理。
    | [“GC工具”](ch05.html#GCLogging) |'
- en: '| `-XX:+PrintReferenceGC` | Prints information about soft and weak reference
    processing during GC in Java 8. | If the program uses a lot of those references,
    add this flag to determine their effect on the GC overhead. | [“Soft, Weak, and
    Other References”](ch07.html#References) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+PrintReferenceGC` | 在Java 8中，在GC期间打印关于软引用和弱引用处理的信息。 | 如果程序大量使用这些引用，请添加此标志以确定它们对GC开销的影响。
    | [“软引用、弱引用及其他引用”](ch07.html#References)'
- en: '| `-XX:+UseGCLogFileRotation` | Enables rotations of the GC log to conserve
    file space in Java 8. | In production systems that run for weeks at a time when
    the GC logs can be expected to consume a lot of space. | [“GC Tools”](ch05.html#GCLogging)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '`-XX:+UseGCLogFileRotation` | 启用GC日志的轮转以节省文件空间在Java 8中。 | 在生产系统中，运行时间长达数周时，GC日志可能会占用大量空间。
    | [“GC工具”](ch05.html#GCLogging)'
- en: '| `-XX:NumberOfGCLogFiles=*`N`*` | When logfile rotation is enabled in Java
    8, indicates the number of logfiles to retain. | In production systems that run
    for weeks at a time when the GC logs can be expected to consume a lot of space.
    | [“GC Tools”](ch05.html#GCLogging) |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '`-XX:NumberOfGCLogFiles=*`N`*` | 当在Java 8中启用日志文件轮转时，指示要保留的日志文件数。 | 在生产系统中，运行时间长达数周时，GC日志可能会占用大量空间。
    | [“GC工具”](ch05.html#GCLogging)'
- en: '| `-XX:GCLogFileSize=*`N`*` | When logfile rotation is enabled in Java 8, indicates
    the size of each logfile before rotating it. | In production systems that run
    for weeks at a time when the GC logs can be expected to consume a lot of space.
    | [“GC Tools”](ch05.html#GCLogging) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:GCLogFileSize=*`N`*` | 当在Java 8中启用日志文件轮转时，指示每个日志文件在轮转之前的大小。 | 在生产系统中，运行时间长达数周时，GC日志可能会占用大量空间。
    | [“GC工具”](ch05.html#GCLogging)'
- en: Table A-5\. Flags for the throughput collector
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-5\. 吞吐量收集器的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- | ---'
- en: '| `-XX:MaxGCPauseMillis=*`N`*` | Hints to the throughput collector how long
    pauses should be; the heap is dynamically sized to attempt to meet that goal.
    | As a first step in tuning the throughput collector if the default sizing it
    calculates doesn’t meet application goals. | [“Adaptive and Static Heap Size Tuning”](ch06.html#GCThroughput)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MaxGCPauseMillis=*`N`*` | 给吞吐量收集器一个提示，暂停时间应该是多长；堆的大小动态调整以尝试达到该目标。 |
    如果默认计算出的堆大小不符合应用程序目标，作为调优吞吐量收集器的第一步。 | [“自适应和静态堆大小调优”](ch06.html#GCThroughput)'
- en: '| `-XX:GCTimeRatio=*`N`*` | Hints to the throughput collector how much time
    you are willing to spend in GC; the heap is dynamically sized to attempt to meet
    that goal. | As a first step in tuning the throughput collector if the default
    sizing it calculates doesn’t meet application goals. | [“Adaptive and Static Heap
    Size Tuning”](ch06.html#GCThroughput) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '`-XX:GCTimeRatio=*`N`*` | 给吞吐量收集器一个提示，你愿意在GC中花费多少时间；堆的大小动态调整以尝试达到该目标。 | 如果默认计算出的堆大小不符合应用程序目标，作为调优吞吐量收集器的第一步。
    | [“自适应和静态堆大小调优”](ch06.html#GCThroughput)'
- en: Table A-6\. Flags for the G1 collector
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-6\. G1收集器的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '--- | --- | --- | ---'
- en: '| `-XX:MaxGCPauseMillis=*`N`*` | Hints to the G1 collector how long pauses
    should be; the G1 algorithm is adjusted to attempt to meet that goal. | As a first
    step in tuning the G1 collector; increase this value to attempt to prevent full
    GCs. | [“Tuning G1 GC”](ch06.html#G1GCThreadTuning) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '`-XX:MaxGCPauseMillis=*`N`*` | 给G1收集器一个提示，暂停时间应该是多长；G1算法会调整以尝试达到该目标。 | 作为调优G1收集器的第一步；增加此值以尝试防止Full
    GC。 | [“调优G1 GC”](ch06.html#G1GCThreadTuning)'
- en: '| `-XX:ConcGCThreads=*`N`*` | Sets the number of threads to use for G1 background
    scanning. | When lots of CPU is available and G1 is experiencing concurrent mode
    failures. | [“Tuning G1 GC”](ch06.html#G1GCThreadTuning) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '`-XX:ConcGCThreads=*`N`*` | 设置用于G1后台扫描的线程数。 | 当有大量CPU可用并且G1正在经历并发模式失败时。 | [“调优G1
    GC”](ch06.html#G1GCThreadTuning)'
- en: '| `-XX:InitiatingHeapOccupancyPercent=*`N`*` | Sets the point at which G1 background
    scanning begins. | Lower this value if G1 is experiencing concurrent mode failures.
    | [“Tuning G1 GC”](ch06.html#G1GCThreadTuning) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '`-XX:InitiatingHeapOccupancyPercent=*`N`*` | 设置G1后台扫描开始的阈值。 | 如果G1正在经历并发模式失败，请降低此值。
    | [“调优G1 GC”](ch06.html#G1GCThreadTuning)'
- en: '| `-XX:G1MixedGCCountTarget=*`N`*` | Sets the number of mixed GCs over which
    G1 attempts to free regions previously identified as containing mostly garbage.
    | Lower this value if G1 is experiencing concurrent mode failures; increase it
    if mixed GC cycles take too long. | [“Tuning G1 GC”](ch06.html#G1GCThreadTuning)
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:G1MixedGCCountTarget=*`N`*` | 设置混合 GC 的次数，G1 尝试释放已标记为主要包含垃圾的区域。 | 如果
    G1 经历并发模式失败，请降低此值；如果混合 GC 周期过长，请增加此值。 | [“调优 G1 GC”](ch06.html#G1GCThreadTuning)
    |'
- en: '| `-XX:G1MixedGCCountTarget=*`N`*` | Sets the number of mixed GCs over which
    G1 attempts to free regions previously identified as containing mostly garbage.
    | Lower this value if G1 is experiencing concurrent mode failures; increase it
    if mixed GC cycles take too long. | [“Tuning G1 GC”](ch06.html#G1GCThreadTuning)
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:G1MixedGCCountTarget=*`N`*` | 设置混合 GC 的次数，G1 尝试释放已标记为主要包含垃圾的区域。 | 如果
    G1 经历并发模式失败，请降低此值；如果混合 GC 周期过长，请增加此值。 | [“调优 G1 GC”](ch06.html#G1GCThreadTuning)
    |'
- en: '| `-XX:G1HeapRegionSize=*`N`*` | Sets the size of a G1 region. | Increase this
    value for very large heaps, or when the application allocates very, very large
    objects. | [“G1 GC region sizes”](ch06.html#GCG1RegionSize) |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:G1HeapRegionSize=*`N`*` | 设置 G1 区域的大小。 | 对于非常大的堆或应用程序分配非常大的对象，请增加此值。
    | [“G1 GC 区域大小”](ch06.html#GCG1RegionSize) |'
- en: '| `-XX:+UseStringDeduplication` | Allows G1 to eliminate duplicate strings.
    | Use for programs that have a lot of duplicate strings and when interning is
    impractical. | [“Duplicate Strings and String Interning”](ch12.html#StringInterning)
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UseStringDeduplication` | 允许 G1 消除重复字符串。 | 适用于有大量重复字符串且国际化不可行的程序。 |
    [“重复字符串和字符串国际化”](ch12.html#StringInterning) |'
- en: Table A-7\. Flags for the CMS collector
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-7\. CMS 收集器标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-XX:CMSInitiating​OccupancyFraction``=*N*` | Determines when CMS should
    begin background scanning of the old generation. | When CMS experiences concurrent
    mode failures, reduces this value. | [“Understanding the CMS Collector”](ch06.html#GCCMS)
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:CMSInitiating​OccupancyFraction``=*N*` | 确定 CMS 应在老年代后台扫描开始时刻。 | 当 CMS
    经历并发模式失败时，降低此值。 | [“理解 CMS 收集器”](ch06.html#GCCMS) |'
- en: '| `-XX:+UseCMSInitiating​OccupancyOnly` | Causes CMS to use only `CMSInitiatingOccupancyFraction`
    to determine when to start CMS background scanning. | Whenever `CMSInitiatingOccupancyFraction`
    is specified. | [“Understanding the CMS Collector”](ch06.html#GCCMS) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UseCMSInitiating​OccupancyOnly` | 导致 CMS 仅使用 `CMSInitiatingOccupancyFraction`
    来确定何时启动 CMS 后台扫描。 | 每当指定 `CMSInitiatingOccupancyFraction` 时。 | [“理解 CMS 收集器”](ch06.html#GCCMS)
    |'
- en: '| `-XX:ConcGCThreads=*`N`*` | Sets the number of threads to use for CMS background
    scanning. | When lots of CPU is available and CMS is experiencing concurrent mode
    failures. | [“Understanding the CMS Collector”](ch06.html#GCCMS) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:ConcGCThreads=*`N`*` | 设置用于 CMS 后台扫描的线程数。 | 当大量 CPU 可用且 CMS 经历并发模式失败时。
    | [“理解 CMS 收集器”](ch06.html#GCCMS) |'
- en: '| `-XX:+CMSIncrementalMode` | Runs CMS in incremental mode. | No longer supported.
    | N/A |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+CMSIncrementalMode` | 以增量模式运行 CMS。 | 不再支持。 | N/A |'
- en: Table A-8\. Flags for memory management
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 表 A-8\. 内存管理标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 功能 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-XX:+HeapDumpOnOutOfMemoryError` | Generates a heap dump when the JVM throws
    an out-of-memory error. | Enable this flag if the application throws out-of-memory
    errors due to the heap space or permgen, so the heap can be analyzed for memory
    leaks. | [“Out-of-Memory Errors”](ch07.html#OOMError) |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+HeapDumpOnOutOfMemoryError` | 在 JVM 抛出内存溢出错误时生成堆转储。 | 如果应用程序因堆空间或永久代导致内存溢出错误，请启用此标志，以便分析堆中的内存泄漏。
    | [“内存溢出错误”](ch07.html#OOMError) |'
- en: '| `-XX:HeapDumpPath=<path>` | Specifies the filename where automatic heap dumps
    should be written. | To specify a path other than *java_pid<pid>.hprof* for heap
    dumps generated on out-of-memory errors or GC events (when those options have
    been enabled). | [“Out-of-Memory Errors”](ch07.html#OOMError) |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:HeapDumpPath=<path>` | 指定自动生成堆转储时应写入的文件名。 | 若要指定除了 *java_pid<pid>.hprof*
    之外的路径用于在内存溢出错误或 GC 事件时生成的堆转储，请使用此选项。 | [“内存溢出错误”](ch07.html#OOMError) |'
- en: '| `-XX:GCTimeLimit=<N>` | Specifies the amount of time the JVM can spend performing
    GC without throwing an `OutOfMemoryException`. | Lower this value to have the
    JVM throw an OOME sooner when the program is executing too many GC cycles. | [“Out-of-Memory
    Errors”](ch07.html#OOMError) |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:GCTimeLimit=<N>` | 指定JVM在执行太多GC周期时不抛出`OutOfMemoryException`的时间。 | 降低此值，以便在程序执行太多GC周期时，JVM更早地抛出OOM异常。
    | [“内存不足错误”](ch07.html#OOMError) |'
- en: '| `-XX:HeapFreeLimit=<N>` | Specifies the amount of memory the JVM must free
    to prevent throwing an `OutOfMemoryException`. | Lower this value to have the
    JVM throw an OOME sooner when the program is executing too many GC cycles. | [“Out-of-Memory
    Errors”](ch07.html#OOMError) |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:HeapFreeLimit=<N>` | 指定JVM必须释放的内存量，以防止抛出`OutOfMemoryException`。 | 降低此值，以便在程序执行太多GC周期时，JVM更早地抛出OOM异常。
    | [“内存不足错误”](ch07.html#OOMError) |'
- en: '| `-XX:SoftRefLRUPolicyMSPerMB=*`N`*` | Controls how long soft references survive
    after being used. | Decrease this value to clean up soft references more quickly,
    particularly in low-memory conditions. | [“Soft, Weak, and Other References”](ch07.html#References)
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:SoftRefLRUPolicyMSPerMB=*`N`*` | 控制软引用在被使用后存活的时间。 | 在低内存条件下，缩短此值以更快地清理软引用。
    | [“软引用、弱引用和其他引用”](ch07.html#References) |'
- en: '| `-XX:MaxDirectMemorySize=*`N`*` | Controls how much native memory can be
    allocated via the `allocateDirect()` method of the `ByteBuffer` class. | Consider
    setting this if you want to limit the amount of direct memory a program can allocate.
    It is no longer necessary to set this flag to allocate more than 64 MB of direct
    memory. | [“Native NIO buffers”](ch08.html#NIOBuffers) |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:MaxDirectMemorySize=*`N`*` | 控制通过`ByteBuffer`类的`allocateDirect()`方法分配多少本机内存。
    | 如果要限制程序可以分配的直接内存量，考虑设置此标志。不再需要设置此标志来分配超过64 MB的直接内存。 | [“本机NIO缓冲区”](ch08.html#NIOBuffers)
    |'
- en: '| `-XX:+UseLargePages` | Directs the JVM to allocate pages from the operating
    system’s large page system, if applicable. | If supported by the OS, this option
    will generally improve performance. | [“Large Pages”](ch08.html#LargePages) |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UseLargePages` | 指示JVM从操作系统的大页系统中分配页面（如果适用）。 | 如果操作系统支持，此选项通常会提高性能。
    | [“大页”](ch08.html#LargePages) |'
- en: '| `-XX:+StringTableSize=*`N`*` | Sets the size of the hash table the JVM uses
    to hold interned strings. | Increase this value if the application performs a
    significant amount of string interning. | [“Duplicate Strings and String Interning”](ch12.html#StringInterning)
    |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+StringTableSize=*`N`*` | 设置JVM用于保存国际化字符串的哈希表的大小。 | 如果应用程序执行大量的字符串国际化，则增加此值。
    | [“重复字符串和字符串国际化”](ch12.html#StringInterning) |'
- en: '| `-XX:+UseCompressedOops` | Emulates 35-bit pointers for object references.
    | This is the default for heaps that are less than 32 GB in size; there is never
    an advantage to disabling it. | [“Compressed Oops”](ch07.html#CompressedOops)
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UseCompressedOops` | 模拟对象引用的35位指针。 | 对于小于32 GB的堆，默认是这个值；禁用它永远没有好处。
    | [“压缩Oops”](ch07.html#CompressedOops) |'
- en: '| `-XX:+PrintTLAB` | Prints summary information about TLABs in the GC log.
    | When using a JVM without support for JFR, use this to ensure that TLAB allocation
    is working efficiently. | [“Thread-local allocation buffers”](ch06.html#TLABS)
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintTLAB` | 在GC日志中打印关于TLAB的摘要信息。 | 在使用不支持JFR的JVM时，请确保TLAB分配工作效率。 |
    [“线程本地分配缓冲区”](ch06.html#TLABS) |'
- en: '| `-XX:TLABSize=*`N`*` | Sets the size of the TLABs. | When the application
    is performing a lot of allocation outside TLABs, use this value to increase the
    TLAB size. | [“Thread-local allocation buffers”](ch06.html#TLABS) |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:TLABSize=*`N`*` | 设置TLAB的大小。 | 当应用程序在TLAB外执行大量分配时，使用此值来增加TLAB的大小。 |
    [“线程本地分配缓冲区”](ch06.html#TLABS) |'
- en: '| `-XX:-ResizeTLAB` | Disables resizing of TLABs. | Whenever `TLABSize` is
    specified, make sure to disable this flag. | [“Thread-local allocation buffers”](ch06.html#TLABS)
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:-ResizeTLAB` | 禁用TLAB的调整大小功能。 | 每当指定`TLABSize`时，请确保禁用此标志。 | [“线程本地分配缓冲区”](ch06.html#TLABS)
    |'
- en: Table A-9\. Flags for native memory tracking
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 表A-9。本机内存跟踪的标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 作用 | 使用时机 | 参见 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-XX:NativeMemoryTracking=*X*` | Enable Native Memory Tracking. | When you
    need to see what memory the JVM is using outside the heap. | [“Native Memory Tracking”](ch08.html#NMT)
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:NativeMemoryTracking=*X*` | 启用本机内存跟踪。 | 当需要查看JVM在堆外使用的内存时。 | [“本机内存跟踪”](ch08.html#NMT)
    |'
- en: '| `-XX:+PrintNMTStatistics` | Prints Native Memory Tracking statistics when
    the program terminates. | When you need to see what memory the JVM is using outside
    the heap. | [“Native Memory Tracking”](ch08.html#NMT) |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+PrintNMTStatistics` | 在程序终止时打印本地内存跟踪统计信息。 | 当需要查看JVM在堆外使用的内存时使用。 |
    [“本地内存跟踪”](ch08.html#NMT) |'
- en: Table A-10\. Flags for thread handling
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Table A-10\. 线程处理标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| Flag | What it does | When to use it | See also |'
- en: '| --- | --- | --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-Xss<N>` | Sets the size of the native stack for threads. | Decrease this
    size to make more memory available for other parts of the JVM. | [“Tuning Thread
    Stack Sizes”](ch09.html#StackSize) |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `-Xss<N>` | 设置线程的本机堆栈大小。 | 减小此大小以为JVM的其他部分提供更多内存。 | [“调整线程堆栈大小”](ch09.html#StackSize)
    |'
- en: '| `-XX:-BiasedLocking` | Disables the biased locking algorithm of the JVM.
    | Can help performance of thread pool–based applications. | [“Biased Locking”](ch09.html#BiasedLocking)
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:-BiasedLocking` | 禁用JVM的偏向锁定算法。 | 可以改善基于线程池的应用程序的性能。 | [“偏向锁定”](ch09.html#BiasedLocking)
    |'
- en: Table A-11\. Miscellaneous JVM flags
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Table A-11\. JVM 杂项标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| Flag | What it does | When to use it | See also |'
- en: '| --- | --- | --- | --- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-XX:+CompactStrings` | Uses 8-bit string representations when possible (Java
    11 only). | Default; always use. | [“Compact Strings”](ch12.html#CompactStrings)
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+CompactStrings` | 在可能的情况下使用8位字符串表示（仅适用于Java 11）。 | 默认；始终使用。 | [“紧凑字符串”](ch12.html#CompactStrings)
    |'
- en: '| `-XX:-StackTraceInThrowable` | Prevents the stack trace from being gathered
    whenever an exception is thrown. | On systems with very deep stacks where exceptions
    are frequently thrown (and where fixing the code to throw fewer exceptions is
    not a possibility). | [“Exceptions”](ch12.html#Exceptions) |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:-StackTraceInThrowable` | 阻止每次抛出异常时收集堆栈跟踪。 | 在系统具有非常深的堆栈并且频繁抛出异常的情况下使用（且修复代码以减少异常抛出不可行时）。
    | [“异常”](ch12.html#Exceptions) |'
- en: '| `-Xshare` | Controls class data sharing. | Use this flag to make new CDS
    archives for application code. | [“Class Data Sharing”](ch12.html#ClassDataSharing)
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `-Xshare` | 控制类数据共享。 | 使用此标志为应用程序代码创建新的CDS存档。 | [“类数据共享”](ch12.html#ClassDataSharing)
    |'
- en: Table A-12\. Flags for Java Flight Recorder
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Table A-12\. Java Flight Recorder 标志
- en: '| Flag | What it does | When to use it | See also |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| Flag | What it does | When to use it | See also |'
- en: '| --- | --- | --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-XX:+FlightRecorder` | Enables Java Flight Recorder. | Enabling Flight Recorder
    is always recommended, as it has little overhead unless an actual recording is
    happening (in which case, the overhead will vary depending on the features used,
    but still be relatively small). | [“Java Flight Recorder”](ch03.html#JFR) |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+FlightRecorder` | 启用Java Flight Recorder。 | 始终建议启用Flight Recorder，因为除非实际进行记录（在这种情况下，根据使用的功能，开销将有所不同，但仍然相对较小）。
    | [“Java Flight Recorder”](ch03.html#JFR) |'
- en: '| `-XX:+FlightRecorderOptions` | Sets options for a default recording via the
    command line (Java 8 only). | Control how a default recording can be made for
    the JVM. | [“Java Flight Recorder”](ch03.html#JFR) |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+FlightRecorderOptions` | 设置通过命令行进行默认录制的选项（仅适用于Java 8）。 | 控制如何为JVM进行默认录制。
    | [“Java Flight Recorder”](ch03.html#JFR) |'
- en: '| `-XX:+StartFlightRecorder` | Starts the JVM with the given Flight Recorder
    options. | Control how a default recording can be made for the JVM. | [“Java Flight
    Recorder”](ch03.html#JFR) |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+StartFlightRecorder` | 使用给定的Flight Recorder选项启动JVM。 | 控制如何为JVM进行默认录制。
    | [“Java Flight Recorder”](ch03.html#JFR) |'
- en: '| `-XX:+UnlockCommercialFeatures` | Allows the JVM to use commercial (non-open-source)
    features. | If you have the appropriate license, setting this flag is required
    to enable Java Flight Recorder in Java 8. | [“Java Flight Recorder”](ch03.html#JFR)
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `-XX:+UnlockCommercialFeatures` | 允许JVM使用商业（非开源）功能。 | 如果具有适当的许可证，则必须设置此标志才能在Java
    8中启用Java Flight Recorder。 | [“Java Flight Recorder”](ch03.html#JFR) |'
