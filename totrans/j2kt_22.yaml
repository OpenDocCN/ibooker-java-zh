- en: Chapter 22\. Classes to Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object-oriented programmers are adept at solving problems by creating types.
    Functional programmers tend to augment existing types with functions. How far
    can we go without defining new types?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In [Chapter 15, *Encapsulated Collections to Type Aliases*](ch15.html#encapsulated-collections-to-typealiases),
    we saw the advantages of working with raw collections, and in [Chapter 16, *Interfaces
    to Functions*](ch16.html#interfaces-to-functions), we looked at using built-in
    function types rather than creating new ones. In this chapter, we’ll apply the
    lessons we’ve learned to write some Kotlin from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Even in these days of REST APIs and webhooks, much of automatic business-to-business
    communication is in the form of tabular text data exchanged by Secure File Transfer
    Protocol (SFTP). Travelator has to import data for campsite locations, points
    of interest, unsettled bills, and more, all in regular rows and columns, with
    different column separators, and with and without a header naming the columns
    for the remaining rows. In [Chapter 20](ch20.html#performing-io-to-passing-data),
    we saw that one team had created its own parser; in other places, we use the tried-and-trusted
    [Apache Commons CSV library](https://oreil.ly/jnI4h). Honestly, for most uses,
    we would still use Commons CSV, because it works out of the box, is nicely configurable
    for special cases, and plays really well with Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: Today though we’re going to see what a clean-room Kotlin parser would look like.
    When we’re done, we’ll compare what we come up with to the Commons CSV functionality
    so that we can see how the grains of Java and Kotlin lead to different APIs and
    implementations.
  prefs: []
  type: TYPE_NORMAL
- en: An Acceptance Test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you might have been able to tell from the preceding chapters, the Travelator
    developers are Extreme Programmers ([*Extreme Programming Explained: Embrace Change*](bibliography01.html#B_EPEEC_1999)).
    We write code test first, starting with a high-level acceptance test. We’re working
    on a table reader, so we create a class `TableReaderAcceptanceTests` with a stub
    method and check that it runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.1 [table-reader.1:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.1&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: It does run (it even passes!), so now we can start coding proper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part of the acceptance test’s job is to help us decide what our interface should
    look like. Having parsed a few files in our time, we know that what we almost
    always want to do is read a file and return a list of values of some domain type,
    one for each (nonheader) row. Let’s sketch that as our test, with `Measurement`
    as our domain type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.2 [table-reader.2:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.2&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.2&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here `Measurement` is a value type that represents the data that we want to
    extract from each row of the table. In Java, we would probably start by creating
    a `TableReader` class, but we can see from the test that reading a table is simply
    a calculation: a mapping of the input lines to a list of the data that we want
    ([“Calculations”](ch07.html#calculations)). So we’ll default to using a top-level
    `someFunction` until we are forced to do something more complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: We can imagine all sorts of magic ways that our API could implement `someFunction`,
    but unless it has some special knowledge of the `Measurement` type (and libraries
    don’t have knowledge of *our* types, that’s the wrong way around), we will have
    to tell it how to map from some representation of a row to a `Measurement`.
  prefs: []
  type: TYPE_NORMAL
- en: That’s twice we’ve used the word *map*. Maybe *map* holds the key? (An accidental
    pun, that one.) What if `someFunction` looked like this?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.3 [table-reader.3:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.3&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.3&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO49-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`readTable` is our table reading API entry point'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_introduction_CO49-2)'
  prefs: []
  type: TYPE_NORMAL
- en: It returns something that has a `map` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_introduction_CO49-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`record` is our representation of a row in the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_introduction_CO49-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We can index into `record` by field name, yielding a `String` that we can convert
    to other types.
  prefs: []
  type: TYPE_NORMAL
- en: 'This doesn’t compile, because we don’t have `readTable` yet, but if we Alt-Enter
    on the error, IntelliJ will create the function for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.4 [table-reader.3:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.4&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.4&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We haven’t given IntelliJ enough clues about the return type of `readTable`,
    so it chose `Any`, and so `someFunction` still doesn’t compile. What type could
    we return to fix that? Well, if we return a `List` from `readTable`, then `map`
    is an operation on `List`. And if that `List` contained `Map<String, String>`,
    our `record` variable would be `Map<String, String>`, so we could call `record["time"]`,
    and so on. The only issue is that `Map.get` returns a nullable value. That’s close
    enough—let’s take account of it in `someFunction` by raising errors if `get` returns
    `null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.5 [table-reader.4:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.5&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.5&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This compiles, although obviously the `TODO` fails the test. (You might ask
    why we are taking such a cavalier attitude toward errors compared to our forensic
    [Chapter 21](ch21.html#exceptions-to-values). The answer is that this is just
    test code: the API of `Map.get` is forcing us to consider what to do in the case
    of errors, and our test is choosing to throw.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We put our client hats on to write the acceptance tests, and these tests have
    shown that we can at least use a function with the signature of `readTable` to
    convert lines to a list of `Measurement`. Now that we have a plausible API, we
    can move the definition of `readTable` into *src/main/travelator/tablereader/table-reading.kt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.6 [table-reader.5:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.6&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.6&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally in this first stage, we can inline `someFunction` to give our acceptance
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.7 [table-reader.5:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.7&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.7&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have disabled the test because it will be some time before we get
    it running. That’s OK with acceptance tests. We don’t expect to get them to pass
    quickly, more tell us when we are done. For now, it has done its job, helping
    us sketch a simple API that we can now implement.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do go on, let’s reflect on the fact that we have managed to define
    the interface to our parser without defining any new types, instead using `List`
    and `Map` of `String`. By using standard types, we know that we have rich Kotlin
    APIs to supply the `List` that we are reading from, and to interpret the `List`
    of `Map`s that we are returning.
  prefs: []
  type: TYPE_NORMAL
- en: Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an interface to implement, we can park the acceptance test
    and write a minimal unit test. What is minimal? We like to start with empty: what
    should happen if we read an empty file?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.8 [table-reader.6:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.8&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.8&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to get this to pass is to hard-code the result in `readTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.9 [table-reader.7:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.9&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.9&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: This passes. It may seem trivial, but it’s always a good idea to have a test
    for empty input. The more complicated our algorithm, the more likely it is to
    fail in this case. It’s a poor parser that always returns an empty result, though,
    so let’s crack on. Following TDD ([*Test-Driven Development By Example*](bibliography01.html#B_TDDBE_2002)),
    we need to add a failing test first to give us a reason to change the implementation.
    We choose to add the case of reading a table with no header and one line of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why this rather than a header and one line of data? To be honest, this is just
    the first thing that came to mind; maybe if we were actually pairing at this point,
    you would have suggested using a header row. Our choice leaves us having to decide
    how to name the columns, and we decide to use the `String` representation of their
    index, `"0"` for the first column, `"1"` for the second, and so on; this feels
    like the simplest way that we can generate a `String` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.10 [table-reader.8:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.10&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.10&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: We *could* instead have made `readTable` return `<Map<Int, String>>` when we
    don’t have a header row. If you have some spare time, that might be a path worth
    following to see where it leads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in our current predicament, we have a failing test, and we can be clever
    or we can be quick. We choose quick, to get the test passing straightaway by hardcoding
    the result again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.11 [table-reader.8:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.11&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.11&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that our tests are passing, we can simplify the implementation by noticing
    that we want a line in the output for every line in the input. `Iterable::map`
    will do this, allowing us to remove the `if` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.12 [table-reader.9:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.12&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.12&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This continues to pass the tests and would now work for more lines (of identical
    data)! It’s only a stepping-stone though, allowing us to extract the lambda as
    a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.13 [table-reader.10:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.13&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.13&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’ll start removing the hard-coded values by splitting the pairs into
    `keys` and `values`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.14 [table-reader.11:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.14&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.14&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re still resolutely cheating, but we can now see the pattern in the `keys`
    and generate these from the `values`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.15 [table-reader.12:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.15&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.15&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `values`, we can split the line around the commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.16 [table-reader.13:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.16&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.16&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Success: we have removed the hard-coded keys and values, and the tests still
    pass. Because we used `lines.map` in `readTable`, we believe the function will
    work for any numbers of lines, but it would be good to have a test to confirm
    that.'
  prefs: []
  type: TYPE_NORMAL
- en: We make a note to add it, because something is bothering us that we’d like to
    look at first. If you are as old as your authors (or younger and gifted) you may
    have developed spidey senses for code, and they may be tingling when you look
    at that `split`. What will happen if we try to split an empty line? For that matter,
    what should `readTable` return when fed an empty line?
  prefs: []
  type: TYPE_NORMAL
- en: 'Discussing it, we come to the conclusion that an empty line should yield an
    empty `Map`. That feels clean, so we write a test to both document our decision
    and check that it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.17 [table-reader.14:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.17&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.17&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Aha!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After a little investigation, we discover that calling `split` on an empty
    `String` returns a `List` of a single empty `String`. Maybe that makes sense in
    other circumstances. Maybe, but it messes up our algorithm, so we have to work
    around it with a special case in `parseLine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.18 [table-reader.14:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.18&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.18&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'That gets the tests passing but muddies the waters of the `parseLine` function.
    So we extract the muddy line to a function called `splitFields`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.19 [table-reader.15:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.19&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.19&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we make `splitFields` an extension function and introduce a `separators`
    parameter, we get the function we always really wanted `split` to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.20 [table-reader.16:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.20&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.20&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have gotten the code working with an empty input and then an input
    of a single line. If we had written an imperative solution, we might now have
    to add a loop to handle more input, but `map` has our back, because it will always
    return as many items as we give it. We believe that `readTable` should work for
    all the numbers known to programmers: 0, 1, and infinity (well, OK, 2^(31) - 1
    rather than actual infinity).'
  prefs: []
  type: TYPE_NORMAL
- en: '“Trust but verify” they say though, so we add a test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.21 [table-reader.17:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.21&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.21&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: It passes, and we reason that `(0, 1, 2)` is close enough to `(0, 1, 2147483647)`
    that we are done for now. This seems like a good place to check in, make a fresh
    coffee, and dispose of the last one before getting back to work.
  prefs: []
  type: TYPE_NORMAL
- en: Headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ready to go again? OK, what about a header line?
  prefs: []
  type: TYPE_NORMAL
- en: First, how should our API know to expect one? We could add a flag to `readTable`
    to tell it that our data has a header, or we can add another function. Generally
    we prefer a different function for different functionality, so let’s add a function
    named `readTableWithHeader`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with `readTable`, we first add a test that calls the function that we wish
    we had:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.22 [table-reader.18:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.22&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.22&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alt-Enter on the compilation error at `readTableWithHeader` and IntelliJ will
    create it for us. Then we can name the parameters and delegate to our original
    function for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.23 [table-reader.18:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.23&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.23&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This compiles but fails the tests, as we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To get the tests to pass, we could hard-code the result as before, but this
    time we’re going to modify the code to make room for the functionality. When we
    say *make room*, what we are aiming for is code that does the current thing (using
    `Int::toString` field names) and which we are able to *augment* rather than modify
    to support the new functionality. The new feature will then be an addition *rather*
    than a modification (the [open–closed principle](https://oreil.ly/MwO5l)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the field name information is buried in `parseLine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.24 [table-reader.18:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.24&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.24&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to pull it out from here to a place where we can use the header
    line to supply it.
  prefs: []
  type: TYPE_NORMAL
- en: '`Int::toString` is our current mapping from index to key. Let’s prepare to
    make this configurable by introducing a variable named `headerProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.25 [table-reader.19:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.25&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.25&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: This still passes our tests, except for the new `takes headers from header line`,
    which is still failing. We shouldn’t really be refactoring with a failing test,
    because every time we run the tests, we will have to check that any failure is
    actually the one we expect. So we `@Disabled` it for now to only run tests for
    completed features while we are refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: '“Introduce Parameter” on the `headerProvider` line and naming it `headerProvider`
    will allow us to support different behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.26 [table-reader.20:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.26&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.26&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, IntelliJ currently fails to make this refactor work, breaking
    `readTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.27 [table-reader.20:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.27&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.27&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO50-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We could use the function reference when `parseLine` only had one parameter.
    Now it needs two arguments, but `map` can only supply one.
  prefs: []
  type: TYPE_NORMAL
- en: '“Replace function reference with lambda” *before* the refactor would have made
    everything work now, but we’ll fail forward by expanding the lambda now and adding
    `Int::toString` as the `headerProvider` to get things compiling again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.28 [table-reader.21:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.28&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.28&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: All our tests still pass, so we’re quietly confident that we haven’t broken
    anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where are we going with this? Our plan is to have the new `readTableWithHeader`
    read the header line to create a `headerProvider` to pass to `parseLine`. Sitting
    between `readTableWithHeader` and `parseLine` is the call to our old `readTable`,
    so it needs a `headerProvider` parameter too, so that it can relay the value.
    So it’s “Introduce Parameter” (with “Introduce Default Value”) again, this time
    on `Int::toString` in `readTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.29 [table-reader.22:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.29&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.29&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO51-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Doesn’t compile: `Unresolved reference: KFunction1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s hard to say why IntelliJ (at the time of writing) sometimes uses function
    types and sometimes `KFunctionN` types when refactoring. It would be nice if it
    was consistent, or at least generated code that compiled. We’ll fix this one by
    translating the `KFunction1` to an `(Int) -> String` by hand and hold just a little
    grudge for this second failed refactor in a row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.30 [table-reader.23:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.30&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.30&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: On the plus side, because the `headerProvider` parameter has a default value,
    our tests are unchanged and continue to pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we’re in a position to parse the header line; `readTableWithHeader` will
    need to read the header, create a `headerProvider` (an `(Int) -> String` remember),
    and then delegate to `readTable`. It needs to split the lines into the header
    (`Iterable.first()`) and the rest (`Iterable.drop(1)`). `Iterable.first` will
    fail if there are no lines, so we make a note to add a test for this case. As
    for converting the header line into a `header​Pro⁠vider`, we’ll pretend that we
    have a function to do that called `headerProviderFrom(String)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.31 [table-reader.24:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.31&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.31&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alt-Enter on the new function’s invocation allows us to create it, giving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.32 [table-reader.24:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.32&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.32&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a function that needs to return a function type. We can implement the
    return value with a lambda that takes an `Int` index and returns a `String`. The
    `String` we need to return is the header field at that index. We can use our `splitFields`
    again here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.33 [table-reader.25:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.33&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.33&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve taken care to split the `header` outside the lambda; otherwise, it will
    happen for every other row of the table. Our tests still pass, and if we’re right,
    so will the test for `readTableWithHeader` that we disabled previously. Let’s
    un-`@Disabled` it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.34 [table-reader.26:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.34&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.34&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This passes, hooray! We are about to say that we’re done for now, until we
    look down at our to-do list and remember that we predicted `readTableWithHeader`
    should fail given an empty input. So we write a test asserting the desired behavior,
    which is to return an empty `List`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.35 [table-reader.26:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.35&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.35&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we thought, this fails with `java.util.NoSuchElementException: List is empty.`,
    because `readTableWithHeader` is trying to call `lines.first()` on an empty `List`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.36 [table-reader.25:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.36&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.36&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our irritation at not being finished is mitigated by being right about there
    being a problem! The simplest fix is to split our function into two definitions,
    with a `when` to choose between them. This passes all the tests and empties our
    to-do list. Here, then, is our public API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.37 [table-reader.26:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.37&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.37&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is nice. Our clients now can read with or without a header row. But wait!
    Looking at the code, we realize that if they want to specify their own field names
    for `read​Ta⁠ble`, they can do this by overriding the default `headerProvider`
    in `readTable`. We have a feature for free! Let’s write a test to demonstrate
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.38 [table-reader.27:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.38&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.38&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'See how easy it is to convert from a `List<String>` to our header provider
    function `(Int) -> String` with the method reference `headers::get`? This is an
    interesting way to view collections. We can view:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | as function type | by |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `List<T>` | `(index: Int) -> T` | `List.get(index)` |'
  prefs: []
  type: TYPE_TB
- en: '| `Set<T>` | `(item: T) -> Boolean` | `Set.contains(item)` |'
  prefs: []
  type: TYPE_TB
- en: '| `Map<K, V>` | `(key: K) -> V?` | `Map.get(key)` |'
  prefs: []
  type: TYPE_TB
- en: If we are able to express a dependency as one of these function types, then
    our clients, and our tests, can use standard collections to provide an implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have implemented reading a table with a header, we are in a position
    to try running our acceptance test. This was:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.39 [table-reader.26:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.39&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.39&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function that we thought we would call `readTable` when we wrote the test
    turns out to be `readTableWithHeader`, so we make the change and run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.40 [table-reader.27:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.40&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.40&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: It passes, and we ride the little dopamine hit to check in the code and take
    a coffee break.
  prefs: []
  type: TYPE_NORMAL
- en: Different Field Separators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Returning from coffee, we make a quick survey of the different places in Travelator
    that read tables. Interestingly, we only have one use case that reads classic
    “comma”,“separated”,“variables” (with the quotes), but several need to use a semicolon
    as the field separator. It seems that some French SQL Server export job is using
    semicolons and then saving the file with a *.CSV* extension; maybe the *C* is
    for çemicolon? We’ll address reading those next, but try to find an interface
    that will work with more complicated quoting and escaping rules. To add flexibility,
    we need to identify an abstraction, as we did with the `headerProvider` previously.
    What is the abstraction here?
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the code, we see that the header and body parsing both call `splitFields`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.41 [table-reader.28:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.41&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.41&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Neither the header parsing nor the body parsing really want to depend on the
    details of how the splitting should happen, so let’s abstract that behind a function
    `(String)` `-> List<String>`. Why that signature rather than just parameterizing
    the character?
  prefs: []
  type: TYPE_NORMAL
- en: That’s an interesting question, thank you for asking it. Introducing a `separators`
    parameter to `parseLine` and `headerProviderFrom`, and eventually their callers
    `readTable` and `readTableWithHeader`, would be the simplest thing that we could
    do. We get a lot more flexibility from using a function type, though, because
    we can hide all the details of separating, quoting, and escaping behind that signature.
    In pre-lambda Java, the benefit of the flexibility wouldn’t have been worth the
    cost of introducing and implementing a SAM interface, at least not until we really
    needed all that control. With lambdas in Java, the equation feels more balanced
    but probably not natural for most Java programmers. In Kotlin, designed from the
    outset with function types as part of the language, we use them even more readily.
    As soon as we need to parameterize an aspect of our code, it is natural to ask
    whether a function would provide more value than, erm, a simple value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start in `parseLine`. To extract the current splitting implementation,
    we can select `line.splitFields(",")` and “Introduce Functional Parameter”, choosing
    the parameter name `splitter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.42 [table-reader.29:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.42&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.42&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO52-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This lambda…
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_introduction_CO52-2)'
  prefs: []
  type: TYPE_NORMAL
- en: …implements the splitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could continue this process, extracting the splitter lambda to the top level.
    Our lives will be made a bit easier, though, if we have a global value for the
    splitter, so we select the lambda in `readTable` and “Introduce Variable” named
    `splitOnComma`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.43 [table-reader.30:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.43&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.43&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can cut the `val` from the function and move it to the top level. It
    feels like there should be an automated refactor for this, but nothing works at
    the time of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.44 [table-reader.31:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.44&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.44&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that `splitOnComma` is a global property, we can conveniently use it as
    a default. We select the reference to it in `readTable` and then “Introduce Parameter”,
    with “Introduce default value”, calling the new parameter `splitter`. This yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.45 [table-reader.32:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.45&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.45&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of the default value, we haven’t had to change any of the clients,
    and the tests continue to pass. As it stands, `readTable` is now using the supplied
    `splitter`, but `headerProviderFrom` is not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.46 [table-reader.32:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.46&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.46&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Introducing a functional parameter for `header.splitFields(...)` yields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.47 [table-reader.33:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.47&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.47&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO53-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This lambda…
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_introduction_CO53-2)'
  prefs: []
  type: TYPE_NORMAL
- en: …implements the splitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the lambda in `readTableWithHeader` is the same code as `splitOnComma`,
    so we use that instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.48 [table-reader.34:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.48&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.48&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the pattern here. Now we make a parameter from the `splitOnComma`
    reference, again with a default to avoid breaking existing clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.49 [table-reader.35:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.49&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.49&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in `readTableWithHeader`, we are calling `readTable` without providing
    a `splitter`, so it will use its default (`splitOnComma`). We don’t want this,
    so we pass the parameter down. The header and body should be using the same splitter,
    so we pass it from `readTableWithHeader` to the inner `readTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.50 [table-reader.36:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.50&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.50&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO54-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Pass on the `splitter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some test-driven developers might insist on a failing test to show the need
    for that last step. We certainly should write a test to demonstrate the use of
    the splitter, but before we do, let’s make it more convenient to make one. Here
    is `splitOnComma`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.51 [table-reader.36:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.51&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.51&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be nice to be able to create splitters without having to define a
    lambda every time. That way, our French clients could call `readTable` with, for
    example, `splitter = splitOn(";")`. The `splitOn` function would take the separators
    and return a value of function type `(String) -> List<String>`. We could try to
    extract this function from our current `splitOnComma` lambda, but the refactoring
    is tedious, so instead let’s just define the function and call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.52 [table-reader.37:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.52&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.52&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that we have taken the opportunity to define a `splitOnTab`, too,
    so that we can use it in the new test we promised ourselves that we would write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.53 [table-reader.38:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.53&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.53&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: This passes, giving us both reassurance and documentation. Let’s check it in
    and take a break for a few minutes before coming back to take stock.
  prefs: []
  type: TYPE_NORMAL
- en: Sequences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have the basics of a table parser, and we haven’t introduced any new
    types beyond those in the standard Kotlin runtime. This is often the way with
    a more functional approach. The grain of Kotlin is to leverage the rich abstractions
    provided by the standard library, where Java programs are more likely to define
    new types. As we saw in [Chapter 6](ch06.html#java-to-kotlin-collections) and
    [Chapter 15](ch15.html#encapsulated-collections-to-typealiases), one reason for
    the difference is that Kotlin allows us to treat collections as values, which
    makes them more safely composable than Java’s mutable objects. We are able to
    define an API that takes and returns collection types without worrying about aliasing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value types may make for APIs composed of predictable calculations, but they
    can bring their own problems. Our naïve API suffers from the same issue as we
    saw in [Chapter 20](ch20.html#performing-io-to-passing-data): it works on a `List<String>`
    loaded into memory and produces a `List<Map<String, String>>` also in memory.
    Even discounting the cost of the data structures, the memory footprint of `readTable`
    is twice the number of bytes of the input, which is (probably) twice the size
    of a UTF-8 encoded file containing the data. To process large files, it would
    be nice to work in terms of sequences rather than in terms of lists, since if-necessary
    sequences can keep only one item in each stage of a pipeline in memory at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in [Chapter 13](ch13.html#streams-to-sequences), we can convert a
    `Sequence` to a `List` and back (with some caveats) very easily, so we could implement
    `Sequence` functions by delegating to our existing `List` API. This wouldn’t reduce
    our memory footprint though, so instead we’ll write the `Sequence` versions and
    delegate the `List` versions to them. If we’re clever, we can test through the
    convenient `List` API, thus getting two sets of tests for the price of one.
  prefs: []
  type: TYPE_NORMAL
- en: '`readTable` currently looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.54 [table-reader.39:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.54&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.54&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try out our plan by converting to and from `Sequence` in the middle
    of the pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.55 [table-reader.40:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.55&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.55&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'That passes the tests, and they all funnel through this function, so that’s
    reassuring. Now we can extract the inner workings into a function taking and returning
    a `Sequence`; this is extracting part of a chain as described in [“Extracting
    Part of a Pipeline”](ch13.html#extracting-part-of-a-pipeline):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.56 [table-reader.41:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.56&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.56&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a `Sequence` version of `readTable` that the `List` version calls,
    and the `List` version is well tested. Now for the outer `readTableWithHeader`.
    It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.57 [table-reader.42:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.57&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.57&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, `readTableWithHeader` is delegating to the `List` version of `readTable`.
    If we want to produce a `Sequence` version (and we do), it should call the `Sequence`
    version of `readTable`, so we inline the call here to give:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.58 [table-reader.43:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.58&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.58&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, by hand, create a `linesAsSequence` as a variable and use it in place
    of `lines`. This nearly works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.59 [table-reader.44:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.59&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.59&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![1](assets/1.png)](#co_introduction_CO55-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Doesn’t compile because there is no `Sequence<T>.isEmpty()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we tell if a `Sequence` is empty? `linesAsSequence.firstOrNull() ==
    null` does the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.60 [table-reader.45:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.60&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.60&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This passes the tests, so we can again extract the expression between the `return`
    and `.toList()` as the function we are looking for. After extracting it and tidying
    up, we have the `Sequence` version of `readTableWithHeader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.61 [table-reader.46:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.61&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.61&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we have two versions of `readTable` and `readTableWithHeader`:
    a `List` and a `Sequence` version of each. Given how easy it is to convert a `List`
    argument to a `Sequence`, and a `Sequence` result to a `List`, maybe the `List`
    variants aren’t paying their way? Let’s just move their definitions into the tests
    while we don’t have any production uses. That way, the tests can use them to stay
    simple, and the production code is kept minimal.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, then, is the entire public interface to our table parser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.62 [table-reader.47:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.62&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.62&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is supported by three utility functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.63 [table-reader.47:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.63&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.63&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: When we looked back at the code, we realized that it wasn’t clear *why* we needed
    `splitFields`, so we added a comment. It’s often easier to do this in retrospect
    when we are trying to understand code we are returning to, rather than code we
    have just written. Apart from that, we think that the code is pretty self-explanatory.
    Sometimes we’re wrong about that. If it takes us more than a glance to work out
    what is going on next time we read this code, we’ll take the opportunity then
    to add more comments or, better, refactor to be more expressive.
  prefs: []
  type: TYPE_NORMAL
- en: Reading from a File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This seems a fine interface in the abstract, but the first time we come to
    use it in anger, we hit on a snag. Let’s illustrate the problem with a test. This
    calls the `Sequence` version of `readTableWithHeader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.64 [table-reader.48:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.64&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.64&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Can you see why this fails? What if we say that it fails with `java.lang.IllegalState​Ex⁠ception:
    This sequence can be consumed only once.`?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, once again ([“Multiple Iterations”](ch13.html#sequences-multiple-operations)),
    `Sequence`s bite us because we didn’t test both types—those that can and can’t
    be consumed twice—as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.65 [table-reader.47:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.65&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.65&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: So `lines.firstOrNull()` consumes the sequence, and when reading from a `Reader`
    we can’t just go back and start again in order to evaluate `lines.drop(1)` and
    `lines.first()`. Our unit tests were all starting from a `List` of all the file
    lines; those sequences *can* be consumed again, because they are held in memory.
  prefs: []
  type: TYPE_NORMAL
- en: To use our `Sequence` interface on data in files, we will either have to load
    it all into memory or find a way to fetch the first and rest of a `Sequence` without
    trying to read it twice. Given that we introduced the `Sequence` specifically
    to avoid loading all the data into memory at once, we choose the latter. All we
    need to do then is to check whether a `Sequence` has any items without consuming
    it. Can you see how?
  prefs: []
  type: TYPE_NORMAL
- en: 'Ah, that one was a trick question. To check, we *have* to call `iterator()`
    on the `Sequence`, which is the very thing that consumes it. We cannot see whether
    the `Sequence` is empty and then use it again later. Sometimes in logic though,
    when we can’t do a thing that we want in isolation, we can do it and another thing
    that we want together. In this case, we don’t just want to see whether the `Sequence`
    is empty; we want to split it into its head and tail if it isn’t. We can achieve
    that wider goal by destructuring the `Sequence` with a function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.66 [table-reader.49:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.66&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.66&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This `destruct` returns `null` if the `Sequence` is empty; otherwise, it returns
    a `Pair` of the head and the tail (where the tail may be an empty `Sequence`).
    It consumes the original (by calling `iterator()`) but provides a fresh `Sequence`
    to continue processing. We can use it to refactor `readTableWithHeader`, currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.67 [table-reader.48:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.67&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.67&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It certainly isn’t a trivial rearrangement, but we can transform this into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.68 [table-reader.49:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.68&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.68&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new form passes all the tests, because it doesn’t consume `lines` more
    than once. If it feels a little clunky, we can combine a `?.let`, destructuring,
    and an Elvis operator to give a single expression that you may or may not find
    acceptably terse. The result is this public API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.69 [table-reader.50:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.69&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.69&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: We are almost done, we promise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step, now that the API has crystallized around two functions, is to
    take the opportunity to make the tests more expressive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.70 [table-reader.52:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.70&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.70&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: This is an important step. As we saw in [Chapter 17](ch17.html#mocks-to-maps),
    finding the patterns in our tests and expressing them in functions (like `checkReadTable`)
    both help readers of the tests to see what the code is doing and can help us find
    gaps in our test coverage. For example, what is the behavior of our parser when
    there are more fields than headers or vice versa? The tests that we write for
    quick feedback while we are test-driving our implementation are unlikely to be
    optimally effective for communicating about the API, finding issues, or catching
    regressions if we return to the implementation and modify it. If we use TDD as
    a design technique, we mustn’t forget to make sure that the final tests are fit
    for determining correctness, adding documentation, and preventing regression.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison with Commons CSV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter by saying that in most real-world situations, we would
    reach for Apache Commons CSV rather than rolling our own parser. Before we finish
    the chapter, let’s compare our API with that of the Commons equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common use case for a table parser is to read a file with known columns,
    translating each row into some data class. Here is how we do that with our parser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.71 [table-reader.53:src/test/java/travelator/tablereader/CsvExampleTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.71&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.71&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Real-world code would probably need more error handling (we see how in [Chapter 21](ch21.html#exceptions-to-values)),
    but this shows the basic use case. We use the Kotlin `Reader.useLines` extension
    function to produce a `Sequence<String>`, which our parser transforms into a `Sequence<Map<String,
    String>>`. We can `map` over the `Map`s, indexing by field name to extract the
    data we need and transform it to the type (`Measurement`) that we actually want.
    This design didn’t happen by accident—it was the decisions that we made at the
    very start, albeit with `List` rather than with `Sequence` at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the Commons CSV version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.72 [table-reader.53:src/test/java/travelator/tablereader/CsvExampleTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.72&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.72&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: It too has a static function entry point, `CSVParser.parse`, which also takes
    configuration about the table format (in this case, `CSVFormat.DEFAULT.withFirstRecord​A⁠sHeader()`;
    in ours, `splitOnComma`). We have two functions to differentiate between files
    with or without headers; the Apache API rolls this into the `CSVFormat`.
  prefs: []
  type: TYPE_NORMAL
- en: The Commons `parse` takes a `Reader` though, rather than our `Sequence<String>`.
    This allows it to handle record separators other than newline, and cope with having
    new lines in the middle of fields, but leads to a proliferation of `parse` methods.
    There are variants taking `Path`, `File`, `InputStream`, `String`, and `URL`.
    The developers probably felt these were necessary because Java provides so little
    support for converting between these types of sources and disposing of them safely.
    The `CSVParser` returned by the `parse` static method has a lot of code to manage
    resources. Our API delegates these to the workings of `Sequence` and Kotlin life
    cycle functions like `use` and `useLines`.
  prefs: []
  type: TYPE_NORMAL
- en: On the subject of lines, you have to read between them in the code example to
    see it, but `CSVParser` implements `Iterable<CSVRecord>`. This is a clever design
    choice, because it allows Java developers to use a `for` statement to loop over
    the records, and Kotlin developers to convert to a `Sequence` with `.asSequence`.
    In fact, the Kotlin usability is due to the design of the Kotlin standard library,
    which builds on the same `Iterable` abstraction that the Apache developers also
    leverage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, the code to create an individual `Measurement` looks identical in
    both examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.73 [table-reader.53:src/test/java/travelator/tablereader/CsvExampleTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.73&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.73&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the type of `record` in our parser is `Map<String, String>`, in the
    Commons case it is `CSVRecord`. `CSVRecord` has a `get(String)` method, which
    is how `record["time"]` and so on are resolved. It also has methods: `get(int)`
    to retrieve a field by index, where we could use `Map.values.get(Int)`; `size()`
    rather than `Map.size()`; and `isSet(String)` to substitute for `Map.hasKey(String)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, `CSVRecord` is having to reproduce the `Map` interface by hand rather
    than just *being* a `Map`. Why? Because, as we discussed in [Chapter 6](ch06.html#java-to-kotlin-collections),
    the Java `Map` interface is mutable, and mutation makes no sense in the context
    of reading fields from a file; mutations certainly aren’t going to be written
    back to the source. When programming in Java, we find ourselves having to create
    new types to solve problems, where in Kotlin we can express ourselves in standard
    types and then enjoy the richness of the Kotlin API on those types.
  prefs: []
  type: TYPE_NORMAL
- en: 'One area in which the Commons CSV library Excels™️ is its provision of ready-made
    parser defaults. These are expressed as constants in the `CSVFormat` class. We’ve
    seen `CSVFormat.DEFAULT`, but there are many others, including `CSVFormat.EXCEL`.
    Armed with a `CSVFormat`, you can pass it to the `CSVParser.parse` method as we
    saw, or use it directly, for example, `CSVFormat.EXCEL.parse(reader)`. Can we
    provide this facility without defining new types in our API? How about using `splitOnComma`
    as if it was our configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.74 [table-reader.54:src/test/java/travelator/tablereader/CsvExampleTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.74&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.74&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can achieve this by defining `splitOnComma.readTableWithHeader(reader)`
    as an extension function on the function type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.75 [table-reader.54:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.75&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.75&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: In reality, `CSVFormat` represents a whole package of strategies for escaping
    rules, what to do with blank lines, and so on, not just how to split a line. When
    our parser grows these facilities, then we will probably want to create a data
    class to collect them. Until that point, we have been able to progress using just
    the built-in types and Kotlin language features.
  prefs: []
  type: TYPE_NORMAL
- en: There is another useful feature that the Commons interface provides that ours
    doesn’t, and that we will finally need to create a type to implement. Commons
    CSV has `CSVParser.getHeaderNames` to provide access to the header information.
    Can we add this facility without modifying our current API, or at least requiring
    changes to our client code?
  prefs: []
  type: TYPE_NORMAL
- en: 'For many inputs, we could just call `Map.keys` on the first of the output `Sequence`,
    but this won’t work if the table has no data rows, only a header. To return header
    information *and* the parsed records, we could return a `Pair<List<String>, Sequence<Map<String,
    String>>`, but this will force our current clients to discard the first of the
    pair. Instead, we can return a type `Table` that implements `Sequence<Map<String,
    String>>` but also has a header property. This way, all our current callers remain
    unchanged, but we can access `headers` when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.76 [table-reader.55:src/test/java/travelator/tablereader/TableReaderTests.kt]](https://java-to-kotlin.dev/code.html?ref=22.76&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.76&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll spare you the refactoring steps, but here is the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 22.77 [table-reader.55:src/main/java/travelator/tablereader/table-reading.kt]](https://java-to-kotlin.dev/code.html?ref=22.77&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=22.77&show=diff)'
  prefs: []
  type: TYPE_NORMAL
- en: Moving On
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final leg of our journey, we allowed ourselves the luxury of writing
    Kotlin from scratch rather than refactoring our existing Java. Even then, we started
    from the tests and then just copied the test data into our implementation and
    refactored from there. We can’t write all code this way, but it does work well
    when our code is just calculations, and the more of it that is just calculations,
    the better our code works, too.
  prefs: []
  type: TYPE_NORMAL
- en: We saw the power of reusing built-in types in [Chapter 15, *Encapsulated Collections
    to Type Aliases*](ch15.html#encapsulated-collections-to-typealiases), and [Chapter 16,
    *Interfaces to Functions*](ch16.html#interfaces-to-functions), and defining APIs
    as extension functions in [Chapter 10, *Functions to Extension Functions*](ch10.html#functions-to-extension-functions).
    In this example, both collection and function types came together nicely, and
    we even managed to define an extension function on a function type! Where we would
    have had to define new classes to encapsulate Java’s mutable collections, and
    methods to manipulate those collections, we passed Kotlin’s immutable collections
    between our functions and wrote application-specific extensions on those collection
    types. Where we would have needed to define interfaces in Java, we used Kotlin’s
    function types.
  prefs: []
  type: TYPE_NORMAL
- en: Again, not all problems can or should be solved this way, but your authors have
    found that while it is hard to make Java bend in this direction, Kotlin features
    combine to actively encourage this style. We shouldn’t get hung up on not defining
    new types, but neither should we leap to solve every problem with a new class.
  prefs: []
  type: TYPE_NORMAL
