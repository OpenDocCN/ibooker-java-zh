["```java\n    Map<String, Date> dateMap = new HashMap<String, Date>();\n    dateMap.put(\"today\", new Date());\n    Date today = dateMap.get(\"today\");\n```", "```java\n    Date date = new Date();\n    List list = new ArrayList();\n    list.add(date);\n    // other code that might add or remove elements ...\n    Date firstElement = (Date)list.get(0); // Is the cast correct? Maybe.\n```", "```java\njshell> import java.util.ArrayList;\n\njshell> import javax.swing.JLabel;\n\njshell> ArrayList things = new ArrayList();\nthings ==> []\n\njshell> things.add(\"Hi there\");\n|  Warning:\n|  unchecked call to add(E) as a member of the raw type java.util.ArrayList\n|  things.add(\"Hi there\");\n|  ^--------------------^\n$3 ==> true\n\njshell> things.add(new JLabel(\"Hi there\"));\n|  Warning:\n|  unchecked call to add(E) as a member of the raw type java.util.ArrayList\n|  things.add(new JLabel(\"Hi there\"));\n|  ^--------------------------------^\n$5 ==> true\n\njshell> things\nthings ==> [Hi there, javax.swing.JLabel[...,text=Hi there,...]]\n```", "```java\n    public void add(Object o) { ... } // still here\n    public void add(Date d) { ... }   // overloaded method\n```", "```java\npublic class List< E > {\n  // ...\n  public void add(E element) { ... }\n  public E get(int i) { ... }\n}\n```", "```java\n    List<String> listOfStrings;\n```", "```java\n    List<Date> dates;\n    List<java.math.BigDecimal> decimals;\n    List<HelloJava> greetings;\n```", "```java\npublic class List< String > {\n  // ...\n  public void add(String element) { ... }\n  public String get(int i) { ... }\n}\n```", "```java\n    List<String> listOfStrings = new ArrayList<String>();\n    // Or shorthand in Java 7.0 and later\n    List<String> listOfStrings = new ArrayList<>();\n```", "```java\njshell> ArrayList<String> listOfStrings = new ArrayList<>();\nlistOfStrings ==> []\n\njshell> listOfStrings.add(\"Hey!\");\n$8 ==> true\n\njshell> listOfStrings.add(new JLabel(\"Hey there\"));\n|  Error:\n|  incompatible types: javax.swing.JLabel cannot be converted to java.lang.String\n|  listOfStrings.add(new JLabel(\"Hey there\"));\n|                    ^---------------------^\n\njshell> String s = strings.get(0);\ns ==> \"Hey!\"\n```", "```java\npublic class Map< K, V > {\n  // ...\n  public V put(K key, V value) { ... } // returns any old value\n  public V get(K key) { ... }\n}\n```", "```java\n    Map< Integer, Employee > employees = new HashMap<Integer, Employee>();\n    Integer bobsId = 314; // hooray for autoboxing!\n    Employee bob = new Employee(\"Bob\", ...);\n\n    employees.put(bobsId, bob);\n    Employee employee = employees.get(bobsId);\n```", "```java\njshell> import java.util.*;\n\njshell> List<Date> dateList = new ArrayList<Date>();\ndateList ==> []\n\njshell> dateList instanceof List\n$3 ==> true\n```", "```java\njshell> dateList.add(new Object())\n|  Error:\n|  incompatible types: java.lang.Object cannot be converted to java.util.Date\n|  dateList.add(new Object())\n|               ^----------^\n```", "```java\njshell> dateList instanceof List<Date>;\n|  Error:\n|  illegal generic type for instanceof\n|  dateList instanceof List<Date>;\n|                      ^--------^\n```", "```java\npublic abstract class DualList implements List<String>, List<Date> { }\n// Error: java.util.List cannot be inherited with different arguments:\n//    <java.lang.String> and <java.util.Date>\n```", "```java\n    // nongeneric Java code using the raw type\n    List list = new ArrayList(); // assignment ok\n    list.add(\"foo\"); // Compiler warning on usage of raw type\n```", "```java\n% javac RawType.java\nNote: RawType.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n```", "```java\n% javac -Xlint:unchecked MyClass.java\nRawType.java:6: warning: [unchecked] unchecked call to add(E)\nas a member of the raw type List\n    list.add(\"foo\");\n            ^\n  where E is a type-variable:\n    E extends Object declared in interface List\n```", "```java\nclass Bounded< E extends Date > {\n  public void addElement(E element) { ... }\n}\n```", "```java\n  public void addElement(Date element) { ... }\n```", "```java\n    List list = new ArrayList<Date>();\n```", "```java\n    List<Date> dates = new ArrayList(); // unchecked warning\n```", "```java\n    List<Date> dates = new ArrayList<String>(); // Compile-time Error!\n```", "```java\n    Collection<Date> cd;\n    List<Date> ld = new ArrayList<Date>();\n    cd = ld; // Ok!\n```", "```java\n    List<Object> lo;\n    List<Date> ld = new ArrayList<Date>();\n    lo = ld; // Compile-time Error!  Incompatible types.\n```", "```java\n    Collection<Number> cn;\n    List<Integer> li = new ArrayList<Integer>();\n    cn = li;\n```", "```java\n    DateList dateList = new DateList();\n    ObjectList objectList = dateList; // Can't really do this\n    objectList.add(new Foo()); // should be runtime error!\n```", "```java\n    Date [] dates = new Date[10];\n    Object [] objects = dates;\n    objects[0] = \"not a date\"; // Runtime ArrayStoreException!\n```", "```java\n    List list = new ArrayList<Date>();\n    List<Date> dl = list;  // unchecked warning\n```", "```java\n    Collection<Date> cd = new ArrayList<Date>();\n    List<Date> ld = (List<Date>)cd; // Ok!\n```", "```java\n    Collection<Date> cd = new TreeSet<Date>();\n    List<Date> ld = (List<Date>)cd; // Runtime ClassCastException!\n    ld.add(new Date());\n```", "```java\n    Object o = new ArrayList<String>();\n    List<Date> ld = (List<Date>)o; // unchecked warning, ineffective\n    Date d = ld.get(0); // unsafe at runtime, implicit cast may fail\n```", "```java\n    public Object[] toArray()\n    public <E> E[] toArray(E[] a)\n```", "```java\n    Collection<String> myCollection = ...;\n    String [] myStrings = myCollection.toArray(new String[0]);\n```", "```java\n    String [] myStrings = { \"a\", \"b\", \"c\" };\n    List list = Arrays.asList(myStrings);\n```", "```java\n  public void printElements(Collection c, PrintStream out) {\n    Iterator iterator = c.iterator();\n    while (iterator.hasNext()) {\n      out.println(iterator.next());\n    }\n  }\n```", "```java\n    Collection<Date> col = ...\n    for (Date date : col) {\n      System.out.println(date);\n    }\n```", "```java\n    Map<Integer, Employee> employees = new HashMap<>();\n    // ...\n    for (Integer id : employees.keySet()) {\n      System.out.print(\"Employee \" + id);\n      System.out.println(\" => \" + employees.get(id));\n    }\n```", "```java\n<T extends Comparable<? super T>> void sort(List<T> list) { ... }\n```", "```java\nComparable<? super T>\n```", "```java\n  List<Tree> trees = new ArrayList<>();\n  // other field state\n\n  public void addTree(int x, int y) {\n    Tree tree = new Tree();\n    tree.setPosition(x,y);\n    trees.add(tree);\n  }\n```", "```java\n    Field field = new Field();\n    // other setup code\n    field.addTree(100,100);\n    field.addTree(200,100);\n```", "```java\n    Field field = new Field();\n    // other setup code\n    for (int row = 1; row <= 2; row++) {\n      for (int col = 1; col <=3; col++) {\n        field.addTree(col * 100, row * 100);\n      }\n    }\n```", "```java\n// File: Field.java\n  protected void paintComponent(Graphics g) {\n    g.setColor(fieldColor);\n    g.fillRect(0,0, getWidth(), getHeight());\n    for (Tree t : trees) {\n      t.draw(g);\n    }\n    physicist.draw(g);\n    apple.draw(g);\n  }\n```"]