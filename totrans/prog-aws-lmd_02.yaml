- en: Chapter 2\. Getting Started with AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html#ch01) provided you with the background for the rest of
    this book: the cloud, serverless, AWS, and an introduction to what Lambda is,
    how it works, and what it can be used for. But this is a practical book, for practical
    people, so in this chapter we’re going to roll up our sleeves and deploy some
    working functions to the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by getting you a little more acclimated with the AWS Console, and
    then we’ll deploy and run our first Lambda function. After that we’ll get a local
    development environment ready, and finally we’ll build and deploy a locally developed
    function to Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re already experienced with AWS, please feel free to skip ahead to [“Lambda
    Hello World (as Quickly as Possible)”](#lambda-hello-wrld-sec).
  prefs: []
  type: TYPE_NORMAL
- en: Quick Guide to the AWS Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first two exercises in [Chapter 1](ch01.html#ch01) involved acquiring AWS
    credentials and then logging into the [AWS Web Console](https://console.aws.amazon.com).
    If you haven’t done that already, you should do that now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Slightly confusingly, there are three different types of credential that you
    may have used to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: You may have used the account “root” user, using an email address and password.
    This is equivalent to using the root user in a Linux system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may have used an “IAM user” and password. In this case you will have also
    needed to have provided the numeric AWS account ID (or an AWS account alias).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you might have used a single sign-on method (e.g., via a Google Apps
    account).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you signed in successfully now? Great! Let’s go on a little tour of the
    AWS world.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: First of all, a quick word of warning/explanation. The AWS Web Console has frequent
    UX changes, and by the time you read this book, some of the UI may look different
    than what you see here in the book. We’ll do what we can to explain the intent
    of an example, not just the interactions, so that you’ll still be able to follow
    along when Amazon changes its UI.
  prefs: []
  type: TYPE_NORMAL
- en: Regions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s dive in. First let’s talk regions. At the top right you’ll see the currently
    selected region ([Figure 2-1](#currently-selected-region)).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image01.png](assets/awsl_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. Currently selected region
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you learned in [Chapter 1](ch01.html#ch01), AWS organizes its infrastructure
    into data centers called *Availability Zones* (AZs) and then clusters AZs into
    a closely located group known as a *region*. Each region operates semi-autonomously.
    Right now you’re looking at the web console home page for a specific region—in
    our previous example that’s Oregon, otherwise known as the us-west-2 region.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to use the default region that was selected when you log in—you’re
    free to traverse the globe in search of the right region for you. Click the region
    name and see the list of regions available to you ([Figure 2-2](#pick-a-region)).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image02.png](assets/awsl_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. Pick a region
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For what we’re going to be covering in this book, any region should be sufficient.
    We’re going to be defaulting to US West (Oregon) for everything we do, and you
    may want to use that too as a fallback choice, but feel free to use a region closer
    to your home if you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: Identity and Access Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s pick our first service. On the web console home page, either expand
    all services and find the one named *IAM* or search for *IAM* in the search box,
    and select it.
  prefs: []
  type: TYPE_NORMAL
- en: IAM stands for *Identity and Access Management*—it’s the most fundamental security
    service within AWS. It’s also one of the few AWS services that is not tied to
    any one region (note the reference to *Global* where your region used to be defined).
  prefs: []
  type: TYPE_NORMAL
- en: IAM lets you create “IAM users,” groups, roles, policies, and more. If you’re
    using the AWS account you created for this book (and therefore used the “root”
    email address user to log in), we recommend creating an IAM user for future work.
    We’ll describe how to do this in [“Acquiring credentials for the AWS CLI”](#aws-cli-credentials).
  prefs: []
  type: TYPE_NORMAL
- en: '*Roles* are like users, in that they can be used to allow a human, or process,
    to acquire certain privileges in order to fulfill a task. Unlike users, they don’t
    have a username or password, and instead a role must be *assumed* in order to
    be used.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the things you’ll quickly discover is that AWS are sticklers for security.
    When you create Lambda functions, you *must* specify a role that it is to assume
    when it is executing. AWS will *not* give it a default role if one isn’t specified.
    We’ll see this when we create our first function in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: It’s crucial that you have a fundamental understanding of IAM, since aspects
    like roles and policies are ubiquitous in Lambda development. We give you a thorough
    grounding of IAM in [“Identity and Access Management”](ch04.html#IAM).
  prefs: []
  type: TYPE_NORMAL
- en: Lambda Hello World (as Quickly as Possible)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we’re going to deploy and run our first Lambda function. We’ll
    let you in on a little secret—we’re going to do this with JavaScript. Shhh—don’t
    tell our editors—we promised this would be a Java book!
  prefs: []
  type: TYPE_NORMAL
- en: The reason for doing this first example in JavaScript is that we can do the
    whole exercise purely in the web browser, giving us a taste of what’s possible
    in Lambda in just a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: First, go back to the AWS Web Console home screen, and pick Lambda. If you’ve
    never used Lambda in this account before, you’ll get a screen that looks something
    like [Figure 2-3](#lambda-welcome).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image03.png](assets/awsl_0203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. Lambda welcome screen
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If Lambda has been used in this account before, the web console will look more
    like [Figure 2-4](#lambda-function-list).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image04.png](assets/awsl_0204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. Lambda function list
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Again, it might look different depending on when you read this due to Amazon’s
    ever-changing UI designs.
  prefs: []
  type: TYPE_NORMAL
- en: Either way, click *Create function*, and then choose *Author from scratch*—there
    are some other options here for getting started with more complicated functions,
    but we’re going to be doing something very simple right now.
  prefs: []
  type: TYPE_NORMAL
- en: In the name box (see [Figure 2-5](#create-function)), type **`HelloWorld`**,
    and under *Runtime* click *Node.js 10.x*. Don’t worry, we’ll be working with Java
    soon! Now click *Create function*.
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image05.png](assets/awsl_0205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Create HelloWorld function
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If after doing this the console expands the Permissions section, select *Create
    a new role with basic Lambda permissions* in the *Execution role* drop-down, and
    then click *Create function* again (see [Figure 2-6](#create-function-with-role)).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image06.png](assets/awsl_0206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-6\. Create HelloWorld function, specifying to create a new role
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Lambda will create a Lambda function configuration within the Lambda platform
    and bring you to the main console page for the Lambda function after a short wait.
  prefs: []
  type: TYPE_NORMAL
- en: If you scroll down, you’ll see that it’s even given the function some default
    code—that code is perfectly fine for us for now.
  prefs: []
  type: TYPE_NORMAL
- en: Scroll back to the top, and click the *Test* button. This will open a dialog
    named *Configure test event*—enter **`HelloWorldTest`** in the *Event name* box,
    and click *Create*. This will take you back to the Lambda function screen. Now
    click *Test* again.
  prefs: []
  type: TYPE_NORMAL
- en: This time Lambda will actually execute your function, and there will be a short
    delay as it instantiates an environment for the code. Then you’ll see a box with
    *Execution result*—it should say that the function succeeded!
  prefs: []
  type: TYPE_NORMAL
- en: Expand the *Details* control, and you’ll see the value returned from your function,
    plus some other diagnostics (see [Figure 2-7](#hello-world-executed)).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image07.png](assets/awsl_0207.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-7\. HelloWorld executed
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Congratulations—you’ve created and run your first Lambda function!
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a little taste of running functions (no servers!), we’ll turn
    to actually building and deploying Java Lambda functions in a way more suited
    to rapid iteration and automation.
  prefs: []
  type: TYPE_NORMAL
- en: First you need to set up a local development environment.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Command Line Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’ve used the AWS CLI before and already have it configured on your machine
    you can skip ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amazon and AWS are built on APIs. In [this classic story of Amazon’s API mandate](https://oreil.ly/AixTf),
    we see that “All teams will henceforth expose their data and functionality through
    service interfaces” and “All service interfaces, without exception, must be designed
    from the ground up to be externalizable.” What this means is that almost anything
    that we can do through the AWS Web Console UI we can also do using the AWS API
    and CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS API is a large collection of HTTP endpoints that we can call to perform
    actions within AWS. While calling the API directly is perfectly supported, it’s
    also a little laborious due to things like authentication/request signing, correct
    serialization, etc. For this reason, AWS gives us two tools to make things easier—SDKs
    and the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Software development kits (SDKs) are libraries that AWS provides that we can
    use within our code to call the AWS APIs, smoothing some of the tricky or repetitive
    points of doing so, for example authentication. We use the SDKs later in the book—[“Example:
    Building a Serverless API”](ch05.html#serverless-api-example) looks at this subject
    in depth.'
  prefs: []
  type: TYPE_NORMAL
- en: For now though, we’re going to use the AWS CLI. The CLI is a tool you can use
    from a terminal—it wraps the AWS API, so almost anything available through the
    API is also accessible via the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the CLI on macOS, Windows, and Linux; however, all the examples
    and suggestions we give are for macOS. If you use a different operating system
    for your development machine, then you should combine the instructions here with
    whatever is specified in the AWS CLI documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Follow these instructions to [install the CLI](https://oreil.ly/84dGt). If you
    use a Mac and [Homebrew](https://brew.sh), installing the CLI is as simple as
    running `brew install awscli`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate your install of the CLI, run **`aws --version`** from a terminal
    prompt. It should return something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The precise output will depend on your operating system, among other factors.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring credentials for the AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The credentials that you use with the AWS CLI are *different* from those that
    you used to log in to the AWS Web Console. For the CLI, you need two values: an
    *Access Key ID* along with its *Secret Access Key*. If you already have these
    values, feel free to skip ahead to the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: The Access Key ID and Secret Access Key pair are credentials that are assigned
    to an *IAM user*. It’s also possible to assign a key and secret to the account
    root user associated with an email address, but AWS strongly advises against doing
    this for security reasons, and so do we.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have an IAM user (because you logged in with the root user,
    or because you used SSO), you’ll need to create an IAM user. To do this, go to
    the IAM console in the AWS Web Console that we visited earlier in this chapter.
    Click on *Users* and double-check that there isn’t a user on that screen for you
    (see [Figure 2-8](#iam-user-list)).
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image08.png](assets/awsl_0208.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-8\. IAM user list
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you do in fact need to create a user, click *Add user*. On the first screen,
    give your user a name and select both *Programmatic access* and *AWS Management
    Console access*. Then select *Custom password* and enter a new password—this will
    be the password for logging in to the AWS Web Console with this new user, should
    you wish to do so. Deselect *Password reset* (see [Figure 2-9](#add-user)). Then
    click *Next: Permissions*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image09.png](assets/awsl_0209.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-9\. Add IAM user
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: On the next screen, select *Attach existing policies directly* and select *Administrator
    Access* (see [Figure 2-10](#add-user-permissions)). For the sake of learning Lambda,
    having a user with full permissions is going to make our lives much easier. You
    should not do this for real production accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image10.png](assets/awsl_0210.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-10\. Add IAM user permissions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click *Next: Tags* and on the screen after that *Next: Review*.'
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, check that the details correspond to what we just described
    and click *Create user*.
  prefs: []
  type: TYPE_NORMAL
- en: On the final screen you’ll be given the programmatic security credentials for
    your new user! Copy the Access Key ID and the Secret Access Key (after revealing
    it) to a note (keep it secure), or download the provided CSV file. Finally, click
    *Close*.
  prefs: []
  type: TYPE_NORMAL
- en: If you already had an IAM user, but no programmatic credentials, or you lose
    the credentials for the account you just created, go back to the User list in
    the IAM console, select the user, and then choose the *Security credentials* tab.
    You’ll be able to create a new Access Key (and associated Secret Access Key ID)
    from there.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it’s time to configure the CLI. From a terminal run **`aws configure`**.
    For the first two fields, paste the values you copied from the previous section.
    For your default region name, type the region code that corresponds to your chosen
    AWS region. You’ll see the region code in the drop-down in the web console (these
    mappings can also be found [in the AWS documentation](https://oreil.ly/sV10t)).
    Because we’ve picked *Oregon* for our examples in the web console, we’ll use us-west-2
    for the examples at our terminal. Finally, for the default output format, type
    **`json`**.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’ve already configured a different AWS account in the CLI and are adding
    a new one for this book, you’ll need to create a different profile; otherwise
    the preceding instructions will replace your existing credentials. Use the `--profile`
    option of `aws configure`, and see more details [in the AWS documentation](https://oreil.ly/Aj5y5).
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm your values, run **`aws configure`** again, and you’ll see your
    settings, something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A good way to quickly validate your AWS profile is to run the command **`aws
    iam get-user`**, which should result in something that looks like the following,
    where `UserName` is the name of the correct IAM user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you need more help, visit [the documentation](https://oreil.ly/JMtUt).
  prefs: []
  type: TYPE_NORMAL
- en: Java Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a local AWS environment, it’s time to get set up with Java.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda supports Java 8 and Java 11, and it’s strongly recommended that you
    have the same major version of the Java SE Development Kit available locally as
    you are configuring your Lambda functions for. Most operating systems support
    having multiple versions of Java installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t already have Java installed, then you have at least a couple of
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: One is AWS’s own distribution of Java—Corretto. Corretto, in AWS’s words is,
    “a no-cost, multiplatform, production-ready distribution of the Open Java Development
    Kit (OpenJDK).” See [“What Is Amazon Corretto 8?"”](https://oreil.ly/9AYfs) for
    Java 8 or [“What Is Amazon Corretto 11?”](https://oreil.ly/SB2-J) for Java 11
    for details of installing Corretto.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another option is [Oracle’s own distribution](https://oreil.ly/WnBD8); however,
    this now comes with licensing caveats that may be an issue for your use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this time, the difference as far as Lambda developers are concerned between
    these two options is mostly a legal, rather than technical, one. However, we expect
    AWS to transition all of their Java environments to Corretto where they haven’t
    done so already, so if in doubt we recommend Lambda developers pick the Corretto
    Java SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate your Java environment, run **`java -version`** from a terminal,
    and you should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The precise build version of Java doesn’t matter (although it’s always prudent
    to keep up-to-date with security patches), but it *is* important that you have
    the correct base version.
  prefs: []
  type: TYPE_NORMAL
- en: We also use Maven—the build and packaging tool. If you’ve already installed
    Maven, make sure it’s somewhat up-to-date. If you haven’t installed Maven and
    use a Mac, then we recommend using Homebrew to install it—run `brew install maven`.
    Otherwise, see the [Maven home page](https://maven.apache.org) for installation
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and run **`mvn -v`** to validate your environment. You should
    see some output that starts with something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Any 3.x version of Maven will be fine for our needs in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you should be comfortable creating Java projects that use Maven in
    your development editor of choice. We use the free version of [IntelliJ IDEA](https://oreil.ly/RWtqv),
    but you should feel free to use whatever editor you want.
  prefs: []
  type: TYPE_NORMAL
- en: AWS SAM CLI Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final tool you need to install is the AWS SAM CLI. SAM stands for Serverless
    Application Model, and we explore it later in [“CloudFormation and the Serverless
    Application Model”](ch04.html#cloudformation-and-sam). For now all you need to
    know is that the SAM CLI layers on top of the regular AWS CLI to give us some
    useful extra tools.
  prefs: []
  type: TYPE_NORMAL
- en: To install SAM, refer to [the comprehensive instructions](https://oreil.ly/slxxA).
    If you’re in a hurry, you can skip the elements of the documentation that refer
    to Docker since we won’t use those, at least not initially!
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We use some features of SAM CLI that were introduced in late 2019, so make sure
    to update it if you’re using an earlier version.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda Hello World (the Proper Way)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our development environment ready, it’s time to create and deploy a Lambda
    function written in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Your First Java Lambda Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s some “boilerplate code” necessary in building and deploying a Lambda
    function in an automated way. We’re going to go through all the complexities over
    the course of this book, but to get you up and running quickly, we’ve created
    a template to speed things up.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to a terminal and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will ask you for a `project_name` value, and for now just hit Enter to
    use the default.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command will then generate a project directory. Change into that directory,
    and take a look. You’ll see the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: README.md
  prefs: []
  type: TYPE_NORMAL
- en: Some instructions on how to build and deploy the project
  prefs: []
  type: TYPE_NORMAL
- en: pom.xml
  prefs: []
  type: TYPE_NORMAL
- en: A Maven project file
  prefs: []
  type: TYPE_NORMAL
- en: template.yaml
  prefs: []
  type: TYPE_NORMAL
- en: A SAM template file—used for deploying the project to AWS
  prefs: []
  type: TYPE_NORMAL
- en: src/main/java/book/HelloWorld.java
  prefs: []
  type: TYPE_NORMAL
- en: The source code for a Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the project in your IDE/editor of choice. If you’re using Jetbrains
    IntelliJ IDEA, you can do that by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Within the *pom.xml* file itself, change the `<groupId>` to be more appropriate
    for yourself, if you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: Now take a look at [Example 2-1](#EX1), which shows the *src/main/java/book/HelloWorld.java*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2-1\. Hello World Lambda (in Java)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This class represents an entire Java Lambda function. Small, isn’t it? Don’t
    worry too much about the whats and whys; we’ll get to them before too long. For
    now, let’s build our Lambda deployment artifact.
  prefs: []
  type: TYPE_NORMAL
- en: Building Hello World
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We deploy code to the Lambda platform by uploading a ZIP file, or in the Java
    world we can also deploy a JAR file (a JAR is just a ZIP with some embedded metadata).
    For now we’re going to create an *uberjar*—a JAR that contains all of our code,
    plus all the classpath dependencies our code needs that aren’t in the JVM environment
    we’ll be running on.
  prefs: []
  type: TYPE_NORMAL
- en: The template project that you’ve just created is set up to create an uberjar
    for you. We’re not going to examine that now because in [Chapter 4](ch04.html#ch04)
    we’ll go much deeper into a better method of producing a Lambda ZIP file ([“Assembling
    a ZIP File”](ch04.html#assembling-a-zip-file)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the JAR file, from your project’s working directory, run **`mvn package`**.
    This should complete successfully with the following lines near the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It should also create our uberjar. Run **`jar tf target/lambda.jar`** to list
    the contents of the JAR file. The output should include `book/HelloWorld.class`,
    which is our application code, embedded within the artifact.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Lambda Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in the chapter we walked you through creating a Lambda function via
    the web console. Now we’re going to do the same thing from the terminal. We’re
    going to use two further commands using **`sam`** to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, however, we need to create or identify a *staging bucket*
    within the *S3* AWS Service where we can store temporary build artifacts. If you
    followed the AWS instructions for installing the SAM CLI or already know that
    you have one of these buckets available from your current AWS account, feel free
    to use it. Otherwise you can create one using the following command, substituting
    your own name for `bucketname`. Note that S3 bucket names need to be globally
    unique, across all AWS accounts, so you may need to try a few to get one that’s
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve done this successfully, note this bucket name—we’ll be using it
    a lot throughout the rest of the book and will refer to it as `$CF_BUCKET`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Wherever you see `$CF_BUCKET` from now on, use the bucket name that you just
    created. Why `CF`? That stands for *CloudFormation*, which we’ll explain in [Chapter 4](ch04.html#ch04).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if you’re more shell-script-savvy, assign this bucket name to
    a shell variable named `CF_BUCKET`, and then you can verbatim use the references
    to `$CF_BUCKET`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the S3 bucket ready, we can create our Lambda function. Run the following
    (after running **`mvn package`**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, don’t worry too much for now what this all means—we’ll explain it later.
    If this worked correctly, the console output should end with the following (although
    your region may be different):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This means that your function is deployed and ready to run, so let’s do that.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Lambda function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Go back to the Functions list in the Lambda web console, and you should now
    see two functions listed: the original `HelloWorld` and a new one with a name
    that will be something like `HelloWorldLambdaJava-HelloWorldLambda-YF5M2KZHXZF5`.
    If you don’t see the new Java one, make sure you have your regions in sync between
    the terminal and the web console.'
  prefs: []
  type: TYPE_NORMAL
- en: Click through to the new function and take a look at the configuration screen.
    You’ll see that the source code is no longer available since the function was
    created with a compiled artifact.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this function, we need to create a new test event. Click *Test* again,
    and on the *Configure test event* screen ([Figure 2-11](#configure-java-lambda-test-event)),
    give the event name `HelloWorldJavaEvent`. In the actual event body section, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![images/ch02_image11.png](assets/awsl_0211.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-11\. Configure test event for Java Lambda function
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click *Create* to save the test event.
  prefs: []
  type: TYPE_NORMAL
- en: This should take you back to the main Lambda screen, with the new test event
    selected (if it isn’t, select it manually). Click *Test*, and your Lambda function
    will be executed! (See [Figure 2-12](#java-lambda-hello-world-execution-result).)
  prefs: []
  type: TYPE_NORMAL
- en: '![images/ch02_image12.png](assets/awsl_0212.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-12\. Result for Hello World in Java
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to sign in to the AWS Web Console and pick
    a region. Then you created and ran your first Lambda function, via the web console.
  prefs: []
  type: TYPE_NORMAL
- en: You also prepared your local environment for Lambda development by setting up
    the AWS CLI, Java, Maven, and the AWS SAM CLI. You learned the basics of developing
    Lambda functions in Java by creating a project in your development environment,
    building it, and deploying it using Amazon’s SAM tooling. Finally, you now understand
    how to perform simple testing of Lambda functions by simulating events using the
    web console’s test event mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll start taking a look at how Lambda works, and the
    ways that impacts how you write Lambda code.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven’t run through the step-by-step descriptions in this chapter, then
    it’s worth doing that now since it’s a good way to validate your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new version of the Java Lambda function with slightly different code,
    by using a different `stack-name` value at `sam deploy` time. Note how you can
    select between these functions in the web console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
