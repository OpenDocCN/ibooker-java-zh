["```java\n./mvnw quarkus:add-extension -Dextensions=\"resteasy-jsonb, rest-client\"\n```", "```java\nmvn io.quarkus:quarkus-maven-plugin:1.4.1.Final:create \\\n -DprojectGroupId=org.acme.quickstart \\\n -DprojectArtifactId=clock-app \\\n -DclassName=\"org.acme.quickstart.WorldClockResource\" \\\n -Dextensions=\"resteasy-jsonb, rest-client\"\n -Dpath=\"/now\"\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.eclipse.microprofile.config.inject.ConfigProperty;\nimport org.eclipse.microprofile.rest.client.inject.RestClient;\n\n@Path(\"/now\")\npublic class WorldClockResource {\n\n  @ConfigProperty(name = \"clock.host\",\n  defaultValue = \"http://worldclockapi.com\")\n    String clockHost; ![1](Images/1.png)\n\n  private Client client = ClientBuilder.newClient(); ![2](Images/2.png)\n\n  @GET\n  @Path(\"{timezone}\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public WorldClock getCurrentTime(@PathParam(\"timezone\") String timezone) {\n    WorldClock worldClock = client.target(clockHost) ![3](Images/3.png)\n      .path(\"api/json/{timezone}/now\") ![4](Images/4.png)\n      .resolveTemplate(\"timezone\", timezone) ![5](Images/5.png)\n      .request(MediaType.APPLICATION_JSON)\n      .get(WorldClock.class); ![6](Images/6.png) ![7](Images/7.png)\n\n    return worldClock;\n  }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl localhost:8080/now/cet\n{\"currentDateTime\":\"2019-11-13T13:29+01:00\",\"dayOfTheWeek\":\"Wednesday\"}%\n```", "```java\ntarget(host)\n    .request(MediaType.APPLICATION_JSON)\n    .post(entity);\n```", "```java\n  @GET\n  @Path(\"{timezone}/raw\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public Response getCurrentTimeResponse(@PathParam(\"timezone\")\n      String timezone) {\n    javax.ws.rs.core.Response responseWorldClock = client.target(clockHost)\n      .path(\"api/json/{timezone}/now\")\n      .resolveTemplate(\"timezone\", timezone)\n      .request(MediaType.APPLICATION_JSON)\n      .get(Response.class);\n\n    System.out.println(responseWorldClock.getStatus());\n    System.out.println(responseWorldClock.getStringHeaders());\n    // ... more methods\n\n    return responseWorldClock;\n  }\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\n@Path(\"/api\") ![1](Images/1.png)\n@ApplicationScoped\n@RegisterRestClient ![2](Images/2.png)\npublic interface WorldClockService {\n\n    @GET ![3](Images/3.png)\n    @Path(\"/json/{timezone}/now\") ![4](Images/4.png)\n    @Produces(MediaType.APPLICATION_JSON) ![5](Images/5.png)\n    WorldClock getNow(@PathParam(\"timezone\") String timezone); ![6](Images/6.png)\n\n}\n```", "```java\n@RestClient ![1](Images/1.png)\nWorldClockService worldClockService;\n\n@GET\n@Path(\"{timezone}/mp\")\n@Produces(MediaType.APPLICATION_JSON)\npublic WorldClock getCurrentTimeMp(@PathParam(\"timezone\") String timezone) {\n  return worldClockService.getNow(timezone); ![2](Images/2.png)\n}\n```", "```java\norg.acme.quickstart.WorldClockService/mp-rest/url=http://worldclockapi.com\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl localhost:8080/now/cet/mp\n{\"currentDateTime\":\"2019-11-13T16:46+01:00\",\"dayOfTheWeek\":\"Wednesday\"}%\n```", "```java\npackage org.acme.quickstart;\n\nimport java.io.IOException;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.core.Response;\nimport org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper;\n\npublic class CustomResponseExceptionMapper\n                implements ResponseExceptionMapper<IOException> { ![1](Images/1.png)\n\n    @Override\n    public IOException toThrowable(Response response) { ![2](Images/2.png)\n        return new IOException();\n    }\n\n    @Override\n    public boolean handles(int status,\n                            MultivaluedMap<String, Object> headers) { ![3](Images/3.png)\n        return status >= 400 && status < 500;\n    }\n\n}\n```", "```java\n@InjectMock\n@RestClient\nWorldClockService worldClockService;\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.List;\n\nimport javax.ws.rs.BeanParam;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.CookieParam;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.HEAD;\nimport javax.ws.rs.HeaderParam;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.Response;\n\nimport org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n\n@Path(\"/developer\")\n@RegisterRestClient\n@Consumes(\"application/json\") ![1](Images/1.png)\n@Produces(\"application/json\")\npublic interface DeveloperService {\n\n  @HEAD ![2](Images/2.png)\n  Response head();\n\n  @GET\n  List<Developer> getDevelopers();\n\n  @POST ![3](Images/3.png)\n  Response createDeveloper(\n      @HeaderParam(\"Authorization\") String authorization, ![4](Images/4.png)\n      Developer developer); ![5](Images/5.png)\n\n  @DELETE ![6](Images/6.png)\n  @Path(\"/{userId}\")\n  Response deleteUser(@CookieParam(\"AuthToken\") String authorization, ![7](Images/7.png)\n      @PathParam(\"developerId\") Long developerId);\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.ws.rs.HeaderParam;\nimport javax.ws.rs.PathParam;\n\npublic class PutDeveloper {\n\n    @HeaderParam(\"Authorization\") ![1](Images/1.png)\n    private String authorization;\n\n    @PathParam(\"developerId\") ![2](Images/2.png)\n    private String developerId;\n\n    public String getAuthorization() {\n        return authorization;\n    }\n\n    public void setAuthorization(String authorization) {\n        this.authorization = authorization;\n    }\n\n    public String getDeveloperId() {\n        return developerId;\n    }\n\n    public void setDeveloperId(String developerId) {\n        this.developerId = developerId;\n    }\n\n}\n```", "```java\n@PUT\n@Path(\"/{developerId}\")\nResponse updateUser(@BeanParam PutDeveloper putDeveloper, ![1](Images/1.png)\n    Developer developer);\n```", "```java\n@Path(\"/somePath\")\n@ClientHeaderParam(name=\"user-agent\", value=\"curl/7.54.0\") ![1](Images/1.png)\nResponse get();\n```", "```java\n@ClientHeaderParam(name=\"user-agent\", value=\"{determineHeaderValue}\") ![1](Images/1.png)\nResponse otherGet();\n\ndefault String determineHeaderValue(String headerName) { ![2](Images/2.png)\n    return \"Hi-\" + headerName;\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.List;\n\nimport javax.ws.rs.core.MultivaluedHashMap;\nimport javax.ws.rs.core.MultivaluedMap;\n\nimport org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n\npublic class CustomClientHeadersFactory implements ClientHeadersFactory {\n\n  @Override\n  public MultivaluedMap<String, String> update(\n      MultivaluedMap<String, String> incomingHeaders, ![1](Images/1.png)\n      MultivaluedMap<String, String> clientOutgoingHeaders) { ![2](Images/2.png)\n\n    final MultivaluedMap<String, String> headers =\n      new MultivaluedHashMap<String, String>(incomingHeaders);\n    headers.putAll(clientOutgoingHeaders); ![3](Images/3.png)\n\n    final List<String> auth = headers.get(\"x-auth\"); ![4](Images/4.png)\n    headers.put(\"Authorization\", auth);\n    headers.remove(\"x-auth\");\n\n    return headers;\n  }\n}\n```", "```java\n@RegisterClientHeaders(CustomClientHeadersFactory.class) ![1](Images/1.png)\npublic interface ConfigureHeaderServices {\n```", "```java\norg.eclipse.microprofile.rest.client.propagateHeaders=Authorization,\\\n MyCustomHeader\n```", "```java\n<dependency>\n    <groupId>org.jboss.resteasy</groupId>\n    <artifactId>resteasy-multipart-provider</artifactId>\n</dependency>\n```", "```java\npackage org.acme.quickstart;\n\nimport java.io.InputStream;\n\nimport javax.ws.rs.FormParam;\nimport javax.ws.rs.core.MediaType;\n\nimport org.jboss.resteasy.annotations.providers.multipart.PartType;\n\npublic class MultipartDeveloperModel {\n\n    @FormParam(\"avatar\") ![1](Images/1.png)\n    @PartType(MediaType.APPLICATION_OCTET_STREAM) ![2](Images/2.png)\n    public InputStream file;\n\n    @FormParam(\"name\")\n    @PartType(MediaType.TEXT_PLAIN)\n    public String developerName;\n\n}\n```", "```java\n@POST\n@Consumes(MediaType.MULTIPART_FORM_DATA) ![1](Images/1.png)\n@Produces(MediaType.TEXT_PLAIN)\nString sendMultipartData(@MultipartForm ![2](Images/2.png)\n                            MultipartDeveloperModel data); ![3](Images/3.png)\n```", "```java\norg.acme.quickstart.FruityViceService/mp-rest/trustStore= \\\n    classpath:/custom-truststore.jks ![1](Images/1.png)\norg.acme.quickstart.FruityViceService/mp-rest/trustStorePassword=acme ![2](Images/2.png)\norg.acme.quickstart.FruityViceService/mp-rest/trustStoreType=JKS ![3](Images/3.png)\n```", "```java\norg.acme.quickstart.FruityViceService/mp-rest/keyStore= \\\n    classpath:/custom-keystore.jks ![1](Images/1.png)\norg.acme.quickstart.FruityViceService/mp-rest/keyStorePassword=acme ![2](Images/2.png)\norg.acme.quickstart.FruityViceService/mp-rest/keyStoreType=JKS ![3](Images/3.png)\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLSession;\n\npublic class FruityHostnameVerifier implements HostnameVerifier {\n\n    @Override\n    public boolean verify(String hostname, SSLSession session) {\n        if (\"fruityvice.com\".equals(hostname)) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n```", "```java\norg.acme.quickstart.FruityViceService/mp-rest/hostnameVerifier=\\\norg.acme.quickstart.FruityHostnameVerifier\n```", "```java\npackage org.acme.quickstart;\n\nimport java.net.Socket;\nimport java.net.URI;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\nimport org.eclipse.microprofile.rest.client.RestClientBuilder;\n\n@ApplicationScoped ![1](Images/1.png)\npublic class TrustAllFruityViceService {\n\n  public FruityVice getFruitByName(String name) {\n    FruityViceService fruityViceService = RestClientBuilder.newBuilder()\n      .baseUri(URI.create(\"https://www.fruityvice.com/\"))\n      .hostnameVerifier(NoopHostnameVerifier.INSTANCE) ![2](Images/2.png)\n      .sslContext(trustEverything()) ![3](Images/3.png)\n      .build(FruityViceService.class);\n\n    return fruityViceService.getFruitByName(name);\n  }\n\n  private static SSLContext trustEverything() { ![4](Images/4.png)\n\n    try {\n      SSLContext sc = SSLContext.getInstance(\"SSL\");\n      sc.init(null, trustAllCerts(), new java.security.SecureRandom());\n      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n      return sc;\n    } catch (KeyManagementException | NoSuchAlgorithmException e) {\n      throw new IllegalStateException(e);\n    }\n  }\n\n  private static TrustManager[] trustAllCerts() {\n    return  new TrustManager[]{\n      new X509ExtendedTrustManager(){\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n          return null;\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain,\n                                       String authType)\n          throws CertificateException {\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain,\n                                       String authType)\n          throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain,\n                                      String authType,\n                                      SSLEngine sslEngine)\n          throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain,\n                                       String authType,\n                                       Socket socket)\n          throws CertificateException {\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain,\n                                       String authType,\n                                       SSLEngine sslEngine)\n          throws CertificateException {\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain,\n                                       String authType,\n                                       Socket socket)\n          throws CertificateException {\n        }\n      }\n    };\n  }\n}\n```"]