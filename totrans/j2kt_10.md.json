["```java\ndata class Customer(\n    val id: String,\n    val givenName: String,\n    val familyName: String\n) {\n    ...\n}\n```", "```java\ndata class Customer(\n    val id: String,\n    val givenName: String,\n    val familyName: String\n) {\n    val fullName get() = \"$givenName $familyName\"\n}\n```", "```java\ndata class Customer(\n    val id: String,\n    val givenName: String,\n    val familyName: String\n) {\n    val fullName get() = \"$givenName $familyName\"\n    fun nameForMarketing() = \"${familyName.uppercase()}, $givenName}\"\n}\n```", "```java\nfun nameForMarketing(customer: Customer) =\n    \"${customer.familyName.uppercase()}, $customer.givenName}\"\n```", "```java\nfun Customer.nameForMarketing() = \"${familyName.uppercase()}, $givenName}\"\n```", "```java\nval s = customer.nameForMarketing()\n```", "```java\nvar s = MarketingStuffKt.nameForMarketing(customer);\n```", "```java\nnameForMarketing(customer) // doesn't compile\n```", "```java\nval methodReference: (Customer.() -> String) =\n    Customer::fullName\nval extensionFunctionReference: (Customer.() -> String) =\n    Customer::nameForMarketing\n\nval methodAsFunctionReference: (Customer) -> String =\n    methodReference\nval extensionAsFunctionReference: (Customer) -> String =\n    extensionFunctionReference\n```", "```java\ncustomer.methodReference()\ncustomer.extensionFunctionReference()\n\nmethodAsFunctionReference(customer)\nextensionAsFunctionReference(customer)\n```", "```java\nmethodReference(customer)\nextensionFunctionReference(customer)\n```", "```java\ncustomer.methodAsFunctionReference()\ncustomer.extensionAsFunctionReference()\n```", "```java\nval Customer.nameForMarketing get() = \"${familyName.uppercase()}, $givenName}\"\n```", "```java\nstatic Customer toCustomer(JsonNode node) {\n        ...\n}\n```", "```java\nstatic Customer customerFrom(JsonNode node) {\n        ...\n}\n```", "```java\nvar customer = customerFrom(node);\nvar marketingName = nameForMarketing(customer);\n```", "```java\nvar marketingLength = nameForMarketing(customerFrom(node)).length();\n```", "```java\nfun JsonNode.toCustomer(): Customer = ...\n\nval marketingLength = jsonNode.toCustomer().nameForMarketing().length\n```", "```java\nval customer: Customer? = loggedInCustomer()\nval greeting: String? = when (customer) {\n    null -> null\n    else -> greetingForCustomer(customer)\n}\n```", "```java\nval customer: Customer? = loggedInCustomer()\nval greeting: String? = customer?.let { greetingForCustomer(it) }\n```", "```java\nval customer: Customer? = loggedInCustomer()\n\nval reminder: String? = customer?.let {\n    nextTripForCustomer(it)?.let {\n        timeUntilDepartureOfTrip(it, currentTime)?.let {\n            durationToUserFriendlyText(it) + \" until your next trip!\"\n        }\n    }\n}\n```", "```java\nval reminder: String? = customer\n    ?.let { nextTripForCustomer(it) }\n    ?.let { timeUntilDepartureOfTrip(it, currentTime) }\n    ?.let { durationToUserFriendlyText(it) }\n    ?.let { it + \" until your next trip!\" }\n```", "```java\nval reminder: String? = customer\n    ?.nextTrip()\n    ?.timeUntilDeparture(currentTime)\n    ?.toUserFriendlyText()\n    ?.plus(\" until your next trip!\")\n```", "```java\nfun Trip?.reminderAt(currentTime: ZonedDateTime): String? =\n    this?.timeUntilDeparture(currentTime)\n        ?.toUserFriendlyText()\n        ?.plus(\" until your next trip!\")\n```", "```java\nval reminder: String? = customer.nextTrip().reminderAt(currentTime)\n```", "```java\nval trip: Trip = ...\nval reminder: String = trip.reminderAt(currentTime) ?: error(\"Should never happen\")\n```", "```java\nfun Trip?.reminderAt(currentTime: ZonedDateTime): String =\n    this?.timeUntilDeparture(currentTime)\n        ?.toUserFriendlyText()\n        ?.plus(\" until your next trip!\")\n        ?: \"Start planning your next trip.  The world's your oyster!\"\n```", "```java\nfun <T : Any> T?.asOptional(): Optional<T> = Optional.ofNullable(this)\nfun <T : Any> Optional<T>.asNullable(): T? = this.orElse(null)\n```", "```java\nfun <T> T.printed(): T = this.also(::println)\n```", "```java\nval marketingLength = jsonNode.toCustomer().nameForMarketing().length\n```", "```java\nval customer = jsonNode.toCustomer()\nprintln(customer)\nval marketingLength = customer.nameForMarketing().length\n```", "```java\nval marketingLength = jsonNode.toCustomer().printed().nameForMarketing().length\n```", "```java\nclass Any {\n    fun printed() = this.also(::println)\n}\n```", "```java\nfun Iterable<Customer>.familyNames(): Set<String> =\n    this.map(Customer::familyName).toSet()\n```", "```java\nclass JsonWriter(\n    private val objectMapper: ObjectMapper,\n) {\n    fun Customer.toJson(): JsonNode = objectMapper.valueToTree(this)\n}\n```", "```java\nfun Customer.toJson(): JsonNode =\n    this@JsonWriter.objectMapper.valueToTree(this@toJson)\n```", "```java\nclass HighValueCustomersReportTests {\n\n    @Test\n    public void test() throws IOException {\n        List<String> input = List.of(\n            \"ID\\tFirstName\\tLastName\\tScore\\tSpend\",\n            \"1\\tFred\\tFlintstone\\t11\\t1000.00\",\n            \"4\\tBetty\\tRubble\\t10\\t2000.00\",\n            \"2\\tBarney\\tRubble\\t0\\t20.00\",\n            \"3\\tWilma\\tFlintstone\\t9\\t0.00\"\n        );\n        List<String> expected = List.of(\n            \"ID\\tName\\tSpend\",\n            \"4\\tRUBBLE, Betty\\t2000.00\",\n            \"1\\tFLINTSTONE, Fred\\t1000.00\",\n            \"\\tTOTAL\\t3000.00\"\n        );\n        check(input, expected);\n    }\n\n    @Test\n    public void emptyTest() throws IOException {\n        List<String> input = List.of(\n            \"ID\\tFirstName\\tLastName\\tScore\\tSpend\"\n        );\n        List<String> expected = List.of(\n            \"ID\\tName\\tSpend\",\n            \"\\tTOTAL\\t0.00\"\n        );\n        check(input, expected);\n    }\n\n    @Test\n    public void emptySpendIs0() {\n        assertEquals(\n            new CustomerData(\"1\", \"Fred\", \"Flintstone\", 0, 0D),\n            HighValueCustomersReport.customerDataFrom(\"1\\tFred\\tFlintstone\\t0\")\n        );\n    }\n\n    private void check(\n        List<String> inputLines,\n        List<String> expectedLines\n    ) throws IOException {\n        var output = new StringWriter();\n        HighValueCustomersReport.generate(\n            new StringReader(String.join(\"\\n\", inputLines)),\n            output\n        );\n        assertEquals(String.join(\"\\n\", expectedLines), output.toString());\n    }\n}\n```", "```java\npublic class HighValueCustomersReport {\n\n    public static void generate(Reader reader, Writer writer) throws IOException {\n        List<CustomerData> valuableCustomers = new BufferedReader(reader).lines()\n            .skip(1) // header\n            .map(line -> customerDataFrom(line))\n            .filter(customerData -> customerData.score >= 10)\n            .sorted(comparing(customerData -> customerData.score))\n            .collect(toList());\n\n        writer.append(\"ID\\tName\\tSpend\\n\");\n        for (var customerData: valuableCustomers) {\n            writer.append(lineFor(customerData)).append(\"\\n\");\n        }\n        writer.append(summaryFor(valuableCustomers));\n    }\n\n    private static String summaryFor(List<CustomerData> valuableCustomers) {\n        var total = valuableCustomers.stream()\n            .mapToDouble(customerData -> customerData.spend)\n            .sum();\n        return \"\\tTOTAL\\t\" + formatMoney(total);\n    }\n\n    static CustomerData customerDataFrom(String line) {\n        var parts = line.split(\"\\t\");\n        double spend = parts.length == 4 ? 0 :\n            Double.parseDouble(parts[4]);\n        return new CustomerData(\n            parts[0],\n            parts[1],\n            parts[2],\n            Integer.parseInt(parts[3]),\n            spend\n        );\n    }\n\n    private static String lineFor(CustomerData customer) {\n        return customer.id + \"\\t\" + marketingNameFor(customer) + \"\\t\" +\n            formatMoney(customer.spend);\n    }\n\n    private static String formatMoney(double money) {\n        return String.format(\"%#.2f\", money);\n    }\n\n    private static String marketingNameFor(CustomerData customer) {\n        return customer.familyName.toUpperCase() + \", \" + customer.givenName;\n    }\n}\n```", "```java\npublic class CustomerData {\n    public final String id;\n    public final String givenName;\n    public final String familyName;\n    public final int score;\n    public final double spend;\n\n    public CustomerData(\n        String id,\n        String givenName,\n        String familyName,\n        int score,\n        double spend\n    ) {\n        this.id = id;\n        this.givenName = givenName;\n        this.familyName = familyName;\n        this.score = score;\n        this.spend = spend;\n    }\n\n    ... and equals and hashcode\n}\n```", "```java\npublic class CustomerData {\n    private final String id;\n    private final String givenName;\n    private final String familyName;\n    private final int score;\n    private final double spend;\n\n    ...\n\n    public String getId() {\n        return id;\n    }\n\n    public String getGivenName() {\n        return givenName;\n    }\n    ...\n}\n```", "```java\nprivate static String lineFor(CustomerData customer) {\n    return customer.getId() + \"\\t\" + marketingNameFor(customer) + \"\\t\" +\n        formatMoney(customer.getSpend());\n}\n```", "```java\ndata class CustomerData(\n    val id: String,\n    val givenName: String,\n    val familyName: String,\n    val score: Int,\n    val spend: Double\n)\n```", "```java\nobject HighValueCustomersReport {\n    ...\n    @JvmStatic\n    fun customerDataFrom(line: String): CustomerData {\n        val parts = line.split(\"\\t\".toRegex()).toTypedArray()\n        val spend: Double = if (parts.size == 4) 0 else parts[4].toDouble() ![1](assets/1.png)\n        return CustomerData(\n            parts[0],\n            parts[1],\n            parts[2], parts[3].toInt(), ![2](assets/2.png)\n            spend\n        )\n    }\n    ...\n}\n```", "```java\nobject HighValueCustomersReport {\n    ...\n    @JvmStatic\n    fun customerDataFrom(line: String): CustomerData {\n        val parts = line.split(\"\\t\".toRegex()).toTypedArray()\n        val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()\n        return CustomerData(\n            parts[0],\n            parts[1],\n            parts[2],\n            parts[3].toInt(),\n            spend\n        )\n    }\n    ...\n}\n```", "```java\npackage travelator.marketing\n\n...\n\n@Throws(IOException::class)\nfun generate(reader: Reader?, writer: Writer) {\n    val valuableCustomers = BufferedReader(reader).lines()\n        .skip(1) // header\n        .map { line: String -> customerDataFrom(line) }\n        .filter { (_, _, _, score) -> score >= 10 }\n        .sorted(Comparator.comparing { (_, _, _, score) -> score })\n        .collect(Collectors.toList())\n    writer.append(\"ID\\tName\\tSpend\\n\")\n    for (customerData in valuableCustomers) {\n        writer.append(lineFor(customerData)).append(\"\\n\")\n    }\n    writer.append(summaryFor(valuableCustomers))\n}\n\nprivate fun summaryFor(valuableCustomers: List<CustomerData>): String {\n    val total = valuableCustomers.stream()\n        .mapToDouble { (_, _, _, _, spend) -> spend }\n        .sum()\n    return \"\\tTOTAL\\t\" + formatMoney(total)\n}\n\nfun customerDataFrom(line: String): CustomerData {\n    val parts = line.split(\"\\t\".toRegex()).toTypedArray()\n    val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()\n    return CustomerData(\n        parts[0],\n        parts[1],\n        parts[2],\n        parts[3].toInt(),\n        spend\n    )\n}\n\nprivate fun lineFor(customer: CustomerData): String {\n    return customer.id + \"\\t\" + marketingNameFor(customer) + \"\\t\" +\n        formatMoney(customer.spend)\n}\n\nprivate fun formatMoney(money: Double): String {\n    return String.format(\"%#.2f\", money)\n}\n\nprivate fun marketingNameFor(customer: CustomerData): String {\n    return customer.familyName.toUpperCase() + \", \" + customer.givenName\n}\n```", "```java\nprivate fun lineFor(customer: CustomerData): String {\n    return customer.id + \"\\t\" + customer.marketingNameFor() + \"\\t\" +\n        formatMoney(customer.spend)\n}\n\n...\nprivate fun CustomerData.marketingNameFor(): String {\n    return familyName.toUpperCase() + \", \" + givenName\n}\n```", "```java\nprivate fun lineFor(customer: CustomerData): String =\n    \"${customer.id}\\t${customer.marketingName}\\t${formatMoney(customer.spend)}\"\n\nprivate fun formatMoney(money: Double): String {\n    return String.format(\"%#.2f\", money)\n}\n\nprivate val CustomerData.marketingName: String\n    get() = \"${familyName.toUpperCase()}, $givenName\"\n```", "```java\nprivate fun lineFor(customer: CustomerData): String =\n    \"${customer.id}\\t${customer.marketingName}\\t${customer.spend.toMoneyString()}\"\n\nprivate fun Double.toMoneyString() = String.format(\"%#.2f\", this)\n```", "```java\nprivate fun Double.toMoneyString() = this.formattedAs(\"%#.2f\")\n\nprivate fun Double.formattedAs(format: String) = String.format(format, this)\n```", "```java\nprivate fun Any?.formattedAs(format: String) = String.format(format, this)\n```", "```java\nfun customerDataFrom(line: String): CustomerData {\n    val parts = line.split(\"\\t\".toRegex()).toTypedArray()\n    val spend: Double = if (parts.size == 4) 0.0 else parts[4].toDouble()\n    return CustomerData(\n        parts[0],\n        parts[1],\n        parts[2],\n        parts[3].toInt(),\n        spend\n    )\n}\n```", "```java\nfun customerDataFrom(line: String): CustomerData {\n    val parts = line.split(\"\\t\")\n    return CustomerData(\n        id = parts[0],\n        givenName = parts[1],\n        familyName = parts[2],\n        score = parts[3].toInt(),\n        spend = if (parts.size == 4) 0.0 else parts[4].toDouble()\n    )\n}\n```", "```java\nfun customerDataFrom(line: String): CustomerData =\n    line.split(\"\\t\").let { parts ->\n        CustomerData(\n            id = parts[0],\n            givenName = parts[1],\n            familyName = parts[2],\n            score = parts[3].toInt(),\n            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()\n        )\n    }\n```", "```java\nfun String.toCustomerData(): CustomerData =\n    split(\"\\t\").let { parts ->\n        CustomerData(\n            id = parts[0],\n            givenName = parts[1],\n            familyName = parts[2],\n            score = parts[3].toInt(),\n            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()\n        )\n    }\n```", "```java\n@Test\npublic void emptySpendIs0() {\n    assertEquals(\n        new CustomerData(\"1\", \"Fred\", \"Flintstone\", 0, 0D),\n        HighValueCustomersReportKt.toCustomerData(\"1\\tFred\\tFlintstone\\t0\")\n    );\n}\n```", "```java\nprivate fun summaryFor(valuableCustomers: List<CustomerData>): String {\n    val total = valuableCustomers.stream()\n        .mapToDouble { (_, _, _, _, spend) -> spend }\n        .sum()\n    return \"\\tTOTAL\\t\" + total.toMoneyString()\n}\n```", "```java\nprivate fun summaryFor(valuableCustomers: List<CustomerData>): String {\n    val total = valuableCustomers.sumByDouble { it.spend }\n    return \"\\tTOTAL\\t${total.toMoneyString()}\"\n}\n```", "```java\nprivate fun List<CustomerData>.summarised(): String =\n    sumByDouble { it.spend }.let { total ->\n        \"\\tTOTAL\\t${total.toMoneyString()}\"\n    }\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader?, writer: Writer) {\n    val valuableCustomers = BufferedReader(reader).lines()\n        .skip(1) // header\n        .map { line: String -> line.toCustomerData() }\n        .filter { (_, _, _, score) -> score >= 10 }\n        .sorted(Comparator.comparing { (_, _, _, score) -> score })\n        .collect(Collectors.toList())\n    writer.append(\"ID\\tName\\tSpend\\n\")\n    for (customerData in valuableCustomers) {\n        writer.append(lineFor(customerData)).append(\"\\n\")\n    }\n    writer.append(valuableCustomers.summarised())\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader.readLines()\n        .drop(1) // header\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    writer.append(\"ID\\tName\\tSpend\\n\")\n    for (customerData in valuableCustomers) {\n        writer.append(lineFor(customerData)).append(\"\\n\")\n    }\n    writer.append(valuableCustomers.summarised())\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader.readLines()\n        .drop(1) // header\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(lineFor(customerData))\n    }\n    writer.append(valuableCustomers.summarised())\n}\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = withoutHeader(reader.readLines())\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(lineFor(customerData))\n    }\n    writer.append(valuableCustomers.summarised())\n}\n\nprivate fun withoutHeader(list: List<String>) = list.drop(1)\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader.readLines()\n        .withoutHeader()\n        .map(String::toCustomerData)\n        .filter { it.score >= 10 }\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(lineFor(customerData))\n    }\n    writer.append(valuableCustomers.summarised())\n}\n\nprivate fun List<String>.withoutHeader() = drop(1)\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader\n        .readLines()\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(customerData.outputLine)\n    }\n    writer.append(valuableCustomers.summarised())\n}\n\nprivate fun List<String>.toValuableCustomers() = withoutHeader()\n    .map(String::toCustomerData)\n    .filter { it.score >= 10 }\n...\n\nprivate val CustomerData.outputLine: String\n    get() = \"$id\\t$marketingName\\t${spend.toMoneyString()}\"\n```", "```java\n@Throws(IOException::class)\nfun generate(reader: Reader, writer: Writer) {\n    val valuableCustomers = reader\n        .readLines()\n        .toValuableCustomers()\n        .sortedBy(CustomerData::score)\n    writer.appendLine(\"ID\\tName\\tSpend\")\n    for (customerData in valuableCustomers) {\n        writer.appendLine(customerData.outputLine)\n    }\n    writer.append(valuableCustomers.summarised())\n}\n\nprivate fun List<String>.toValuableCustomers() = withoutHeader()\n    .map(String::toCustomerData)\n    .filter { it.score >= 10 }\n\nprivate fun List<String>.withoutHeader() = drop(1)\n\nprivate fun List<CustomerData>.summarised(): String =\n    sumByDouble { it.spend }.let { total ->\n        \"\\tTOTAL\\t${total.toMoneyString()}\"\n    }\n\ninternal fun String.toCustomerData(): CustomerData =\n    split(\"\\t\").let { parts ->\n        CustomerData(\n            id = parts[0],\n            givenName = parts[1],\n            familyName = parts[2],\n            score = parts[3].toInt(),\n            spend = if (parts.size == 4) 0.0 else parts[4].toDouble()\n        )\n    }\n\nprivate val CustomerData.outputLine: String\n    get() = \"$id\\t$marketingName\\t${spend.toMoneyString()}\"\n\nprivate fun Double.toMoneyString() = this.formattedAs(\"%#.2f\")\n\nprivate fun Any?.formattedAs(format: String) = String.format(format, this)\n\nprivate val CustomerData.marketingName: String\n    get() = \"${familyName.toUpperCase()}, $givenName\"\n```"]