["```java\n    String quote = \"To be or not to be\";\n```", "```java\n    int length = quote.length();\n    boolean empty = quote.isEmpty();\n```", "```java\n    String name = \"John \" + \"Smith\";\n    // or, equivalently:\n    String name = \"John \".concat(\"Smith\");\n```", "```java\njshell> String poem = \"\"\"\n   ...> Twas brillig, and the slithy toves\n   ...>    Did gyre and gimble in the wabe:\n   ...> All mimsy were the borogoves,\n   ...>    And the mome raths outgrabe.\n   ...> \"\"\";\npoem ==> \"Twas brillig, and ... the mome raths outgrabe.\\n\"\n\njshell> System.out.print(poem);\nTwas brillig, and the slithy toves\n   Did gyre and gimble in the wabe:\nAll mimsy were the borogoves,\n   And the mome raths outgrabe.\n\njshell>\n```", "```java\n    char [] data = new char [] { 'L', 'e', 'm', 'm', 'i', 'n', 'g' };\n    String lemming = new String(data);\n```", "```java\n    byte [] data = new byte [] { (byte)97, (byte)98, (byte)99 };\n    String abc = new String(data, \"ISO8859_1\");\n```", "```java\n    String s = \"Newton\";\n    for (int i = 0; i < s.length(); i++)\n      System.out.println(s.charAt(i) );\n```", "```java\n    String one = String.valueOf(1); // integer, \"1\"\n    String two = String.valueOf(2.384f);  // float, \"2.384\"\n    String notTrue = String.valueOf(false); // boolean, \"false\"\n```", "```java\n    Date date = new Date();\n    // Equivalent, e.g., \"Fri Dec 19 05:45:34 CST 1969\"\n    String d1 = String.valueOf(date);\n    String d2 = date.toString();\n\n    date = null;\n    d1 = String.valueOf(date);  // \"null\"\n    d2 = date.toString();  // NullPointerException!\n```", "```java\n    String today = \"Today's date is :\" + date;\n```", "```java\n    String two = \"\" + 2.384f;\n    String today = \"\" + new Date();\n```", "```java\n    String one = \"FOO\";\n    String two = \"foo\";\n\n    one.equals(two);             // false\n    one.equalsIgnoreCase(two);   // true\n```", "```java\n    String foo1 = \"foo\";\n    String foo2 = String.valueOf(new char [] { 'f', 'o', 'o' });\n\n    foo1 == foo2         // false!\n    foo1.equals(foo2)  // true\n```", "```java\n    String abc = \"abc\";\n    String def = \"def\";\n    String num = \"123\";\n\n    if (abc.compareTo(def) < 0) { ... }  // true\n    if (abc.compareTo(abc) == 0) { ... } // true\n    if (abc.compareTo(num) > 0) { ... }  // true\n```", "```java\n    String url = \"http://foo.bar.com/\";\n    if (url.startsWith(\"http:\"))  // true\n```", "```java\n    String abcs = \"abcdefghijklmnopqrstuvwxyz\";\n    int i = abcs.indexOf('p');     // 15\n    int i = abcs.indexOf(\"def\");   // 3\n    int I = abcs.indexOf(\"Fang\");  // -1\n```", "```java\n    String log = \"There is an emergency in sector 7!\";\n    if  (log.contains(\"emergency\")) pageSomeone();\n\n    // equivalent to\n    if (log.indexOf(\"emergency\") != -1) ...\n```", "```java\n    byte b = Byte.parseByte(\"16\");\n    int n = Integer.parseInt(\"42\");\n    long l = Long.parseLong(\"99999999999\");\n    float f = Float.parseFloat(\"4.2\");\n    double d = Double.parseDouble(\"99.99999999\");\n    boolean b = Boolean.parseBoolean(\"true\");\n```", "```java\n    Now is the time for all good people\n\n    Check Number, Description,      Amount\n    4231,         Java Programming, 1000.00\n```", "```java\n    String text1 = \"Now is the time for all good people\";\n    String [] words = text1.split(\"\\\\s\");\n    // words = \"Now\", \"is\", \"the\", \"time\", ...\n\n    String text2 = \"4231,         Java Programming, 1000.00\";\n    String [] fields = text2.split(\"\\\\s*,\\\\s*\");\n    // fields = \"4231\", \"Java Programming\", \"1000.00\"\n```", "```java\n    \"\\\\d\" // Java string that yields \\d in a regex\n```", "```java\n    \"\\\\\\\\\"  // Java string yields two backslashes; regex yields one\n```", "```java\n    \"\\\\(\\\\d\\\\d\\dd\\\\) \\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d\"\n```", "```java\n    // US phone number: (123) 456-7890\n    // regex: \\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d\n    \"\\\\(\\\\d\\\\d\\dd\\\\) \\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d\"\n```", "```java\n    \"A rose is $1.99.\"\n```", "```java\n    [abcxyz]     // matches any of a, b, c, x, y, or z\n    [02468]      // matches any even digit\n    [aeiouAEIOU] // matches any vowel, upper- or lowercase\n    [AaEeIiOoUu] // also matches any vowel\n```", "```java\n    [LMNOPQ]     // Explicit class of L, M, N, O, P, or Q\n    [L-Q]        // Equivalent shorthand version\n    [12345]      // Explicit class of 1, 2, 3, 4, or 5\n    [1-5]        // Equivalent shorthand version\n```", "```java\n    [^A-F]       // G, H, I, ..., a, b, c, 1, 2, $, #... etc.\n    [^aeiou]     // Any character that isn't a lowercase vowel\n```", "```java\n    [A-F[G-Z]\\s] // A-Z plus whitespace\n```", "```java\n    [a-p&&[l-z]] // l, m, n, o, p\n    [A-Z&&[^P]]  // A through Z except P\n```", "```java\n    \"A rose is a rose is a rose\"\n```", "```java\n    ^[Aa] rose  // matches \"A rose\" at the beginning of line\n    [Aa] rose$  // matches \"a rose\" at end of line\n```", "```java\n    \\brose      // rose, rosemary, roses; NOT prose\n    \\Brose      // prose, primrose; NOT rose or rosemary\n```", "```java\n    0*\\d   // match a digit with any number of leading zeros\n```", "```java\n    0*\\d+   // match a number (one or more digits) with optional\n            // leading zeros\n```", "```java\n    \\d\\d/?\\d\\d  // match four digits with optional slash in the middle\n```", "```java\n    \\b\\w{5,7}\\b  // match words with 5, 6, or 7 characters\n```", "```java\n    \\w+, \\w+ \\d+, \\d+|\\d\\d/\\d\\d/\\d\\d  // pattern 1 OR pattern 2\n```", "```java\n    \\w+@[\\w.]+\\.(net|edu|gov)\n    // email address ending in .net, .edu, or .gov\n```", "```java\n    (?i)yahoo   // matches Yahoo, yahoo, yahOO, etc.\n```", "```java\n    Boolean match = Pattern.matches(\"\\\\d+\\\\.\\\\d+f?\", myText);\n```", "```java\n    String sample = \"my.name@some.domain\";\n    Boolean validEmail = Pattern.matches(\".*@.*\", sample);\n```", "```java\njshell> String sample = \"my.name@some.domain\";\nsample ==> \"my.name@some.domain\"\n\njshell> Pattern.matches(\".*@.*\", sample)\nPattern.matches(\".*@.*\", sample)$2 ==> true\n\njshell> Pattern.matches(\".*@.*\", \"bad.address@\")\nPattern.matches(\".*@.*\", \"bad.address@\")$3 ==> true\n\njshell> Pattern.matches(\".*@.*\", \"@@\")\nPattern.matches(\".*@.*\", \"@@\")$4 ==> true\n```", "```java\n    String sample = \"my.name@some.domain\";\n    Boolean validEmail = Pattern.matches(\"[^@]+@[^@]+\", sample);\n```", "```java\n    String sample = \"my.name@some.domain\";\n    Boolean validEmail = Pattern.matches(\"[^@]+@[^@]+\\\\.(com|org)\", sample);\n```", "```java\n    String sample = \"my.name@some.domain\";\n    Boolean validEmail = Pattern.matches(\"[^@]+@[^@]+\\\\.[a-z]+\", sample);\n```", "```java\n    String sample = \"my.name@some.domain\";\n    Boolean validEmail = Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", sample);\n```", "```java\njshell> Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", \"good@some.domain\")\n$1 ==> true\n\njshell> Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", \"good@oreilly.com\")\n$2 ==> true\n\njshell> Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", \"oreilly.com\")\n$3 ==> false\n\njshell> Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", \"bad@oreilly@com\")\n$4 ==> false\n\njshell> Pattern.matches(\"(?i)[^@]+@[^@]+\\\\.[a-z]+\", \"me@oreilly.COM\")\n$5 ==> true\n\njshell> Pattern.matches(\"[^@]+@[^@]+\\\\.[a-z]+\", \"me@oreilly.COM\")\n$6 ==> false\n```", "```java\n    String myText = \"Lots of text with hyperlinks and stuff ...\";\n    Pattern urlPattern = Pattern.compile(\"https?://[\\\\w./]*\");\n    Matcher matcher = urlPattern.matcher(myText);\n```", "```java\nimport java.util.regex.*;\n\n// ...\n\n    String text=\"A horse is a horse, of course of course...\";\n    String pattern=\"horse|course\";\n\n    Matcher matcher = Pattern.compile(pattern).matcher(text);\n    while (matcher.find())\n      System.out.println(\n        \"Matched: '\"+matcher.group()+\"' at position \"+matcher.start());\n```", "```java\n    Matched: 'horse' at position 2\n    Matched: 'horse' at position 13\n    Matched: 'course' at position 23\n    Matched: 'course' at position 33\n```", "```java\n    String text = \"Foo, bar ,   blah\";\n    String[] badFields = text.split(\",\");\n    // { \"Foo\", \" bar \", \"   blah\" }\n    String[] goodFields = text.split(\"\\\\s*,\\\\s*\");\n    // { \"Foo\", \"bar\", \"blah\" }\n```", "```java\n    Pattern.compile(pattern).split(string);\n```", "```java\n    int zero = 0;\n\n    try {\n      int i = 72 / zero;\n    } catch (ArithmeticException e) {\n      // division by zero\n    }\n```", "```java\n    double zero = 0.0;\n    double d = 1.0/zero;\n\n    if (d == Double.POSITIVE_INFINITY)\n      System.out.println(\"Division by zero\");\n```", "```java\n    double irrational = Math.sqrt(2.0); // 1.414...\n    int bigger = Math.max(3, 4);  // 4\n    long one = Math.round(1.125798); // 1\n```", "```java\njshell> import static java.lang.Math.*\n\njshell> double irrational = sqrt(2.0)\nirrational ==> 1.4142135623730951\n\njshell> int bigger = max(3,4)\nbigger ==> 4\n\njshell> long one = round(1.125798)\none ==> 1\n```", "```java\n    double circumference = diameter  * Math.PI;\n```", "```java\n    int randomValue = min + (int)(Math.random() * (max - min));\n```", "```java\njshell> int min = 1000\nmin ==> 1000\n\njshell> int max = 10000\nmax ==> 10000\n\njshell> int fourDigit = min + (int)(Math.random() * (max - min))\nfourDigit ==> 9603\n\njshell> fourDigit = min + (int)(Math.random() * (max - min))\nfourDigit ==> 9178\n\njshell> fourDigit = min + (int)(Math.random() * (max - min))\nfourDigit ==> 3789\n```", "```java\n  private int goodX() {\n    // at least half the width of the tree plus a few pixels\n    int leftMargin = Field.TREE_WIDTH_IN_PIXELS / 2 + 5;\n    // now find a random number between a left and right margin\n    int rightMargin = FIELD_WIDTH - leftMargin;\n\n    // And return a random number starting at the left margin\n    return leftMargin + (int)(Math.random() * (rightMargin - leftMargin));\n  }\n```", "```java\n  for (int i = field.trees.size(); i < Field.MAX_TREES; i++) {\n    Tree t = new Tree();\n    t.setPosition(goodX(), goodY());\n\n    // Trees can be close to each other and overlap,\n    // but they shouldn't intersect our physicist\n    while(player1.isTouching(t)) {\n      // We do intersect this tree, so let's try again\n      System.err.println(\"Repositioning an intersecting tree...\");\n      t.setPosition(goodX(), goodY());\n    }\n    field.addTree(t);\n  }\n```", "```java\n    long l1 = 9223372036854775807L; // Long.MAX_VALUE\n    long l2 = 9223372036854775807L;\n    System.out.println(l1 + l2); // -2 ! Not good.\n\n    try {\n      BigDecimal bd1 = new BigDecimal(\"9223372036854775807\");\n      BigDecimal bd2 = new BigDecimal(9223372036854775807L);\n      System.out.println(bd1.add(bd2) ); // 18446744073709551614\n\n      BigDecimal numerator = new BigDecimal(1);\n      BigDecimal denominator = new BigDecimal(3);\n      BigDecimal fraction =\n          numerator.divide(denominator, 100, BigDecimal.ROUND_UP);\n      // 100-digit fraction = 0.333333 ... 3334\n    }\n    catch (NumberFormatException nfe) { }\n    catch (ArithmeticException ae) { }\n```", "```java\njshell> import java.time.*\n\njshell> LocalDate.of(2019,5,4)\n$2 ==> 2019-05-04\n\njshell> LocalDate.parse(\"2019-05-04\")\n$3 ==> 2019-05-04\n\njshell> LocalTime.of(7,15)\n$4 ==> 07:15\n\njshell> LocalTime.parse(\"07:15\")\n$5 ==> 07:15\n\njshell> LocalDateTime.of(2019,5,4,7,0)\n$6 ==> 2019-05-04T07:00\n\njshell> LocalDateTime.parse(\"2019-05-04T07:15\")\n$7 ==> 2019-05-04T07:15\n```", "```java\njshell> LocalTime.now()\n$8 ==> 15:57:24.052935\n\njshell> LocalDate.now()\n$9 ==> 2023-03-31\n\njshell> LocalDateTime.now()\n$10 ==> 2023-03-31T15:57:37.909038\n```", "```java\njshell> LocalDateTime first = LocalDateTime.now()\nfirst ==> 2023-03-31T16:03:21.875196\n\njshell> LocalDateTime second = LocalDateTime.now()\nsecond ==> 2023-03-31T16:03:33.175675\n\njshell> import java.time.temporal.*\n\njshell> ChronoUnit.SECONDS.between(first, second)\n$12 ==> 11\n```", "```java\njshell> LocalDate today = LocalDate.now()\ntoday ==> 2023-03-31\n\njshell> LocalDate reminder = today.plus(1, ChronoUnit.WEEKS)\nreminder ==> 2023-04-07\n```", "```java\njshell> LocalDateTime betterReminder = reminder.atTime(LocalTime.of(9,0))\nbetterReminder ==> 2023-04-07T09:00\n```", "```java\njshell> LocalDateTime piLocal = LocalDateTime.parse(\"2023-03-14T01:59\")\npiLocal ==> 2023-03-14T01:59\n\njshell> ZonedDateTime piCentral = piLocal.atZone(ZoneId.of(\"America/Chicago\"))\npiCentral ==> 2023-03-14T01:59-05:00[America/Chicago]\n```", "```java\njshell> ZonedDateTime piAlaMode =\npiCentral.withZoneSameInstant(ZoneId.of(\"Europe/Paris\"))\npiAlaMode ==> 2023-03-14T07:59+01:00[Europe/Paris]\n```", "```java\njshell> ZonedDateTime piOther =\npiCentral.withZoneSameInstant(ZoneId.systemDefault())\npiOther ==> 2023-03-14T02:59-04:00[America/New_York]\n```", "```java\njshell> import java.time.format.DateTimeFormatter\n\njshell> DateTimeFormatter shortUS =\n   ...> DateTimeFormatter.ofPattern(\"MM/dd/yy\")\nshortUS ==> Value(MonthOfYe ...) ... (YearOfEra,2,2,2000-01-01)\n\njshell> LocalDate valentines = LocalDate.parse(\"02/14/23\", shortUS)\nvalentines ==> 2023-02-14\n\njshell> LocalDate piDay = LocalDate.parse(\"03/14/23\", shortUS)\npiDay ==> 2023-03-14\n```", "```java\njshell> LocalDate today = LocalDate.now()\ntoday ==> 2023-12-14\n\njshell> shortUS.format(today)\n$30 ==> \"12/14/23\"\n\njshell> shortUS.format(piDay)\n$31 ==> \"03/14/23\"\n```", "```java\njshell> DateTimeFormatter military =\n   ...> DateTimeFormatter.ofPattern(\"HHmm\")\nmilitary ==> Value(HourOfDay,2)Value(MinuteOfHour,2)\n\njshell> LocalTime sunset = LocalTime.parse(\"2020\", military)\nsunset ==> 20:20\n\njshell> DateTimeFormatter basic =\n   ...> DateTimeFormatter.ofPattern(\"h:mm a\")\nbasic ==> Value(ClockHourOfAmPm)': ... ,SHORT)\n\njshell> basic.format(sunset)\n$42 ==> \"8:20 PM\"\n\njshell> DateTimeFormatter appointment =\nDateTimeFormatter.ofPattern(\"h:mm a MM/dd/yy z\")\nappointment ==>\nValue(ClockHourOfAmPm)':' ...\n0-01-01)' 'ZoneText(SHORT)\n```", "```java\njshell> ZonedDateTime dentist =\nZonedDateTime.parse(\"10:30 AM 11/01/23 EST\", appointment)\ndentist ==> 2023-11-01T10:30-04:00[America/New_York]\n\njshell> ZonedDateTime nowEST = ZonedDateTime.now()\nnowEST ==> 2023-12-14T09:55:58.493006-05:00[America/New_York]\n\njshell> appointment.format(nowEST)\n$47 ==> \"9:55 AM 12/14/23 EST\"\n```", "```java\njshell> DateTimeFormatter withSeconds =\n   ...> DateTimeFormatter.ofPattern(\"hh:mm:ss\")\nwithSeconds ==>\nValue(ClockHourOfAmPm,2)':' ...\nValue(SecondOfMinute,2)\n\njshell> LocalTime.parse(\"03:14:15\", withSeconds)\n|  Exception java.time.format.DateTimeParseException:\n|  Text '03:14:15' could not be parsed: Unable to obtain\n|  LocalTime from TemporalAccessor: {MinuteOfHour=14, MilliOfSecond=0,\n|  SecondOfMinute=15, NanoOfSecond=0, HourOfAmPm=3,\n|  MicroOfSecond=0},ISO of type java.time.format.Parsed\n|        at DateTimeFormatter.createError (DateTimeFormatter.java:2020)\n|        at DateTimeFormatter.parse (DateTimeFormatter.java:1955)\n|        at LocalTime.parse (LocalTime.java:463)\n|        at (#33:1)\n|  Caused by: java.time.DateTimeException:\n  Unable to obtain LocalTime from ...\n|        at LocalTime.from (LocalTime.java:431)\n|        at Parsed.query (Parsed.java:235)\n|        at DateTimeFormatter.parse (DateTimeFormatter.java:1951)\n|        ...\n```", "```java\njshell> DateTimeFormatter valid1 =\n   ...> DateTimeFormatter.ofPattern(\"hh:mm:ss a\")\nvalid1 ==> Value(ClockHourOfAmPm,...y,SHORT)\n\njshell> DateTimeFormatter valid2 =\n   ...> DateTimeFormatter.ofPattern(\"HH:mm:ss\")\nvalid2 ==> Value(HourOfDay,2)': ... Minute,2)\n\njshell> LocalTime piDay1 =\n   ...> LocalTime.parse(\"03:14:15 PM\", valid1)\npiDay1 ==> 15:14:15\n\njshell> LocalTime piDay2 =\n   ...> LocalTime.parse(\"03:14:15\", valid2)\npiDay2 ==> 03:14:15\n```", "```java\njshell> DateTimeFormatter withSeconds =\n   ...> DateTimeFormatter.ofPattern(\"hh:mm:ss\")\nwithSeconds ==> Value(ClockHou ... OfMinute,2)\n\njshell> DateTimeFormatter military =\n   ...> DateTimeFormatter.ofPattern(\"HHmm\")\nmilitary ==> Value(HourOfDay,2)Value(MinuteOfHour,2)\n\njshell> LocalTime t = LocalTime.now()\nt ==> 09:17:34.356758\n\njshell> withSeconds.format(t)\n$7 ==> \"09:17:34\"\n\njshell> military.format(t)\n$8 ==> \"0917\"\n```", "```java\njshell> Instant time1 = Instant.now()\ntime1 ==> 2019-12-14T15:38:29.033954Z\n\njshell> Instant time2 = Instant.now()\ntime2 ==> 2019-12-14T15:38:46.095633Z\n\njshell> time1.isAfter(time2)\n$54 ==> false\n\njshell> time1.plus(3, ChronoUnit.DAYS)\n$55 ==> 2019-12-17T15:38:29.033954Z\n```", "```java\n$ java HelloChapter8\n// \"Hello, utilities!\" centered in the window\n$ java HelloChapter8 \"It works!\"\n// \"It works!\" centered in the window\n$ java HelloChapter8 \"I feel cornered\" \"20,20\"\n// \"I feel cornered\" in the upper left corner\n```"]