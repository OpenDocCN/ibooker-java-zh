["```java\n        Date endOfTime = new Date(Long.MAX_VALUE);\n        System.out.println(\"Java time overflows on \" + endOfTime);\n```", "```java\nLocalTime time = LocalTime.now().minusHours(5); // the time 5 hours ago\n```", "```java\npublic class CurrentDateTime {\n    public static void main(String[] args) {\n        LocalDate dNow = LocalDate.now();\n        System.out.println(dNow);\n        LocalTime tNow = LocalTime.now();\n        System.out.println(tNow);\n        LocalDateTime now = LocalDateTime.now();\n        System.out.println(now);\n    }\n}\n```", "```java\n2013-10-28\n22:23:55.641\n2013-10-28T22:23:55.642\n```", "```java\npackage datetime;\n\nimport java.time.Clock;\nimport java.time.LocalDateTime;\n\n/**\n * TestableDateTime allows test code to plug in a Fixed clock\n */\npublic class TestableDateTime {\n    private static Clock clock = Clock.systemDefaultZone();\n    public static void main(String[] args) {\n        System.out.println(\"It is now \" + LocalDateTime.now(clock));\n    }\n    public static void setClock(Clock clock) {\n        TestableDateTime.clock = clock;\n    }\n}\n```", "```java\npublic class DateFormatter {\n    public static void main(String[] args) {\n\n        // Format a date ISO8601-like but with slashes instead of dashes\n        DateTimeFormatter df = DateTimeFormatter.ofPattern(\"yyyy/LL/dd\");\n        System.out.println(df.format(LocalDate.now()));\n\n        // Parse a String to a date using the same formatter\n        System.out.println(LocalDate.parse(\"2014/04/01\", df));\n\n        // Format a Date and Time without timezone information\n        DateTimeFormatter nTZ =\n            DateTimeFormatter.ofPattern(\"d MMMM, yyyy h:mm a\");\n        System.out.println(ZonedDateTime.now().format(nTZ));\n    }\n}\n```", "```java\n        // Convert a number of seconds since the epoch to a local date/time\n        Instant epochSec = Instant.ofEpochSecond(1000000000L);\n        ZoneId zId = ZoneId.systemDefault();\n        ZonedDateTime then = ZonedDateTime.ofInstant(epochSec, zId);\n        System.out.println(\"The epoch was a billion seconds old on \" + then);\n\n        // Convert a date/time to epoch seconds\n        long epochSecond = ZonedDateTime.now().toInstant().getEpochSecond();\n        System.out.println(\"Current epoch seconds = \" + epochSecond);\n\n        LocalDateTime now = LocalDateTime.now();\n        ZonedDateTime there = now.atZone(ZoneId.of(\"Canada/Pacific\"));\n        System.out.printf(\"When it's %s here, it's %s in Vancouver%n\",\n            now, there);\n```", "```java\npublic class DateParse {\n    public static void main(String[] args) {\n\n        String armisticeDate = \"1914-11-11\";\n        LocalDate aLD = LocalDate.parse(armisticeDate);\n        System.out.println(\"Date: \" + aLD);\n\n        String armisticeDateTime = \"1914-11-11T11:11\";\n        LocalDateTime aLDT = LocalDateTime.parse(armisticeDateTime);\n        System.out.println(\"Date/Time: \" + aLDT);\n```", "```java\n        DateTimeFormatter df = DateTimeFormatter.ofPattern(\"dd MMM uuuu\");\n        String anotherDate = \"27 Jan 2011\";\n        LocalDate random = LocalDate.parse(anotherDate, df);\n        System.out.println(anotherDate + \" parses as \" + random);\n```", "```java\nSystem.out.println(aLD + \" formats as \" + df.format(aLD));\n```", "```java\nDate: 1914-11-11\nDate/Time: 1914-11-11T11:11\n27 Jan 2011 parses as 2011-01-27\n1914-11-11 formats as 11 Nov 1914\n```", "```java\nimport java.time.LocalDate;\nimport java.time.Period;\n\n/**\n * Tutorial/Example of LocalDate date difference subtraction\n */\npublic class DateDiff {\n\n    public static void main(String[] args) {\n        /** The date at the end of the last century */\n        LocalDate endof20thCentury = LocalDate.of(2000, 12, 31);\n        LocalDate now = LocalDate.now();\n        if (now.getYear() > 2100) {\n            System.out.println(\"The 21st century is over!\");\n            return;\n        }\n\n        Period diff = Period.between(endof20thCentury, now);\n\n        System.out.printf(\"The 21st century (up to %s) is %s old%n\", now, diff);\n        System.out.printf(\n                \"The 21st century is %d years, %d months and %d days old\",\n                diff.getYears(), diff.getMonths(), diff.getDays());\n    }\n}\n```", "```java\n$ java datetime.DateDiff\nThe 21st century (up to 2013-10-28) is P12Y9M28D old\nThe 21st century is 12 years, 9 months and 28 days old\n```", "```java\njshell> import java.time.temporal.*;\n\njshell> ChronoUnit.DAYS.between(LocalDate.now(), LocalDate.parse(\"2022-02-22\"))\n$6 ==> 786\n\njshell> ChronoUnit.DECADES.between(LocalDate.of(1970,01,01),\n  LocalDate.of(2020,01,01));\n$7 ==> 5\n```", "```java\nimport java.time.LocalDate;\nimport java.time.Period;\n\n/** DateAdd -- compute the difference between two dates\n * (e.g., today and 700 days from now).\n */\npublic class DateAdd {\n    public static void main(String[] av) {\n        /** Today's date */\n        LocalDate now =  LocalDate.now();\n\n        Period p = Period.ofDays(700);\n        LocalDate then = now.plus(p);\n\n        System.out.printf(\"Seven hundred days from %s is %s%n\", now, then);\n    }\n}\n```", "```java\nSeven hundred days from 2013-11-09 is 2015-10-10\n```", "```java\n// Variant versions from older version of RecurringDatePicker.java\n// First version, not for production use!\nprivate LocalDate getMeetingForMonth(LocalDate dateContainingMonth) {\n    return\n        dateContainingMonth.with(TemporalAdjusters.firstInMonth(dayOfWeek))\n            .plusWeeks(Math.max(0, weekOfMonth - 1));\n}\n```", "```java\nprivate LocalDate getMeetingForMonth(LocalDate dateContainingMonth) {\n    return dateWithMonth.with(\n        TemporalAdjusters.dayOfWeekInMonth(weekOfMonth,dayOfWeek)\n}\n```", "```java\npublic LocalDate getEventLocalDate(int meetingsAway) {\n    LocalDate thisMeeting = now.with(\n        TemporalAdjusters.dayOfWeekInMonth(weekOfMonth,dayOfWeek));\n    // Has the meeting already happened this month?\n    if (thisMeeting.isBefore(now)) {\n        // start from next month\n        meetingsAway++;\n    }\n    if (meetingsAway > 0) {\n        thisMeeting = thisMeeting.plusMonths(meetingsAway).\n            with(TemporalAdjusters.dayOfWeekInMonth(weekOfMonth,dayOfWeek));\n    }\n    return thisMeeting;\n}\n```", "```java\nUpcoming Meetings:\n<ul>\n    <%\n    RecurringEventDatePicker mp =\n      new RecurringEventDatePicker(3, DayOfWeek.WEDNESDAY);\n    DateTimeFormatter dfm = DateTimeFormatter.ofPattern(\"MMMM dd, yyyy\");\n    for (int i = 0; i <= 2; i++) {\n        LocalDateTime dt = mp.getEventLocalDateTime(i);\n    %>\n    <li>\n        <%= dt.format(dfm) %>\n    </li>\n    <%\n    }\n    %>\n</ul>\n```", "```java\nUpcoming Meetings:\n\n* July 15, 2015\n* August 19, 2015\n* September 16, 2015\n```", "```java\npublic class FlightArrivalTimeCalc {\n\n    static Duration driveTime = Duration.ofHours(1);\n\n    public static void main(String[] args) {\n        LocalDateTime when = null;\n        if (args.length == 0) {\n            when = LocalDateTime.now();                                        ![1](assets/1.png)\n        } else {\n            String time = args[0];\n            LocalTime localTime = LocalTime.parse(time);\n            when = LocalDateTime.of(LocalDate.now(), localTime);               ![1](assets/1.png)\n        }\n        calulateArrivalTime(when);\n    }\n\n    public static ZonedDateTime calulateArrivalTime(LocalDateTime takeOffTime) {\n        ZoneId torontoZone = ZoneId.of(\"America/Toronto\"),\n                londonZone = ZoneId.of(\"Europe/London\");\n        ZonedDateTime takeOffTimeZoned =\n            ZonedDateTime.of(takeOffTime, torontoZone);                        ![2](assets/2.png)\n        Duration flightTime =\n            Duration.ofHours(5).plus(10, ChronoUnit.MINUTES);                  ![3](assets/3.png)\n        ZonedDateTime arrivalTimeUnZoned = takeOffTimeZoned.plus(flightTime);  ![4](assets/4.png)\n        ZonedDateTime arrivalTimeZoned =\n            arrivalTimeUnZoned.toInstant().atZone(londonZone);                 ![5](assets/5.png)\n        ZonedDateTime phoneTimeHere = arrivalTimeUnZoned.minus(driveTime);     ![6](assets/6.png)\n\n        System.out.println(\"Flight departure time \" + takeOffTimeZoned);\n        System.out.println(\"Flight expected length: \" + flightTime);\n        System.out.println(\n            \"Flight arrives there at \" + arrivalTimeZoned + \" London time.\");\n        System.out.println(\"You should phone at \" + phoneTimeHere + \" Toronto time\");\n        return arrivalTimeZoned;\n    }\n}\n```", "```java\npublic class LegacyDates {\n    public static void main(String[] args) {\n\n        // There and back again, via Date\n        Date legacyDate = new Date();\n        System.out.println(legacyDate);\n\n        LocalDateTime newDate =\n            LocalDateTime.ofInstant(legacyDate.toInstant(),\n            ZoneId.systemDefault());\n        System.out.println(newDate);\n\n        Date backAgain =\n            Date.from(newDate.atZone(ZoneId.systemDefault()).toInstant());\n        System.out.println(\"Converted back as \" + backAgain);\n\n        // And via Calendar\n        Calendar c = Calendar.getInstance();\n        System.out.println(c);\n        LocalDateTime newCal =\n            LocalDateTime.ofInstant(c.toInstant(),\n            ZoneId.systemDefault());\n        System.out.println(newCal);\n    }\n}\n```"]