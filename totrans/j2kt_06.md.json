["```java\npublic static int sufferScoreFor(List<Journey> route) {\n    Location start = getDepartsFrom(route);\n    List<Journey> longestJourneys = longestJourneysIn(route, 3);\n    return sufferScore(longestJourneys, start);\n}\n```", "```java\npublic static int sufferScoreFor(List<Journey> route) {\n    List<Journey> longestJourneys = longestJourneysIn(route, 3);\n    return sufferScore(longestJourneys, getDepartsFrom(route));\n}\n```", "```java\npublic static Location getDepartsFrom(List<Journey> route) {\n    return route.get(0).getDepartsFrom();\n}\n```", "```java\npublic static List<Journey> longestJourneysIn(\n    List<Journey> journeys,\n    int limit\n) {\n    journeys.sort(comparing(Journey::getDuration).reversed()); ![1](assets/1.png)\n    var actualLimit = Math.min(journeys.size(), limit);\n    return journeys.subList(0, actualLimit);\n}\n```", "```java\nval aList: List<String> = SomeJavaCode.mutableListOfStrings(\"0\", \"1\")\naList.removeAt(1) // doesn't compile\n```", "```java\nval aMutableList: MutableList<String> = SomeJavaCode.mutableListOfStrings(\n    \"0\", \"1\")\naMutableList.removeAt(1)\nassertEquals(listOf(\"0\"), aMutableList)\n```", "```java\nval aList: List<String> = SomeJavaCode.mutableListOfStrings(\"0\", \"1\")\nval aMutableList: MutableList<String> = aList as MutableList<String>\naMutableList.removeAt(1)\nassertEquals(listOf(\"0\"), aMutableList)\n```", "```java\nval aMutableList: MutableList<String> = mutableListOf(\"0\", \"1\")\nSomeJavaCode.needsAList(aMutableList)\n```", "```java\nval aList: List<String> = listOf(\"0\", \"1\")\nSomeJavaCode.needsAList(aList)\n```", "```java\nval aMutableList = mutableListOf(\"0\", \"1\")\nval aList: List<String> = aMutableList\n```", "```java\nclass AValueType(\n    val strings: List<String>\n) {\n    val first: String? = strings.firstOrNull()\n}\n```", "```java\nval holdsState = AValueType(aList)\nassertEquals(holdsState.first, holdsState.strings.first())\n```", "```java\naMutableList[0] = \"banana\"\nassertEquals(holdsState.first, holdsState.strings.first()) ![1](assets/1.png)\n```", "```java\ninline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    val result = ArrayList<R>()\n    for (item in this)\n        result.add(transform(item))\n    return result\n}\n```", "```java\npublic class Suffering {\n\n    public static int sufferScoreFor(List<Journey> route) {\n        Location start = getDepartsFrom(route);\n        List<Journey> longestJourneys = longestJourneysIn(route, 3);\n        return sufferScore(longestJourneys, start);\n    }\n\n    public static List<Journey> longestJourneysIn(\n        List<Journey> journeys,\n        int limit\n    ) {\n        journeys.sort(comparing(Journey::getDuration).reversed()); ![1](assets/1.png)\n        var actualLimit = Math.min(journeys.size(), limit);\n        return journeys.subList(0, actualLimit);\n    }\n\n    public static List<List<Journey>> routesToShowFor(String itineraryId) {\n        var routes = routesFor(itineraryId);\n        removeUnbearableRoutes(routes);\n        return routes;\n    }\n\n    private static void removeUnbearableRoutes(List<List<Journey>> routes) {\n        routes.removeIf(route -> sufferScoreFor(route) > 10);\n    }\n\n    private static int sufferScore(\n        List<Journey> longestJourneys,\n        Location start\n    ) {\n        return SOME_COMPLICATED_RESULT();\n    }\n}\n```", "```java\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\ndefault void sort(Comparator<? super E> c) {\n    Object[] a = this.toArray();\n    Arrays.sort(a, (Comparator) c);\n    ListIterator<E> i = this.listIterator();\n    for (Object e : a) {\n        i.next();\n        i.set((E) e);\n    }\n}\n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic static <E> List<E> sorted(\n    Collection<E> collection,\n    Comparator<? super E> by\n) {\n    var result = (E[]) collection.toArray();\n    Arrays.sort(result, by);\n    return Arrays.asList(result);\n}\n```", "```java\npublic static List<Journey> longestJourneysIn(\n    List<Journey> journeys,\n    int limit\n) {\n    journeys.sort(comparing(Journey::getDuration).reversed());\n    var actualLimit = Math.min(journeys.size(), limit);\n    return journeys.subList(0, actualLimit);\n}\n```", "```java\nstatic List<Journey> longestJourneysIn(\n    List<Journey> journeys,\n    int limit\n) {\n    var actualLimit = Math.min(journeys.size(), limit);\n    return sorted(\n        journeys,\n        comparing(Journey::getDuration).reversed()\n    ).subList(0, actualLimit);\n}\n```", "```java\npublic static int sufferScoreFor(List<Journey> route) {\n    return sufferScore(\n        longestJourneysIn(route, 3),\n        getDepartsFrom(route));\n}\n```", "```java\npublic static List<List<Journey>> routesToShowFor(String itineraryId) {\n    var routes = routesFor(itineraryId);\n    removeUnbearableRoutes(routes);\n    return routes;\n}\n\nprivate static void removeUnbearableRoutes(List<List<Journey>> routes) {\n    routes.removeIf(route -> sufferScoreFor(route) > 10);\n}\n```", "```java\npublic static List<List<Journey>> routesToShowFor(String itineraryId) {\n    var routes = routesFor(itineraryId);\n    routes = removeUnbearableRoutes(routes);\n    return routes;\n}\n\nprivate static List<List<Journey>> removeUnbearableRoutes\n    (List<List<Journey>> routes\n) {\n    routes.removeIf(route -> sufferScoreFor(route) > 10);\n    return routes;\n}\n```", "```java\npublic static List<List<Journey>> routesToShowFor(String itineraryId) {\n    var routes = routesFor(itineraryId);\n    routes = bearable(routes);\n    return routes;\n}\n\nprivate static List<List<Journey>> bearable\n    (List<List<Journey>> routes\n) {\n    return routes.stream()\n        .filter(route -> sufferScoreFor(route) <= 10)\n        .collect(toUnmodifiableList());\n}\n```", "```java\npublic static List<List<Journey>> routesToShowFor(String itineraryId) {\n    return bearable(routesFor(itineraryId));\n}\n\nprivate static List<List<Journey>> bearable\n    (List<List<Journey>> routes\n) {\n    return routes.stream()\n        .filter(route -> sufferScoreFor(route) <= 10)\n        .collect(toUnmodifiableList());\n}\n```", "```java\nobject Suffering {\n    @JvmStatic\n    fun sufferScoreFor(route: List<Journey>): Int {\n        return sufferScore(\n            longestJourneysIn(route, 3),\n            Routes.getDepartsFrom(route)\n        )\n    }\n\n    @JvmStatic\n    fun longestJourneysIn(\n        journeys: List<Journey>,\n        limit: Int\n    ): List<Journey> {\n        val actualLimit = Math.min(journeys.size, limit)\n        return sorted(\n            journeys,\n            comparing { obj: Journey -> obj.duration }.reversed()\n        ).subList(0, actualLimit)\n    }\n\n    fun routesToShowFor(itineraryId: String?): List<List<Journey>> {\n        return bearable(Other.routesFor(itineraryId))\n    }\n\n    private fun bearable(routes: List<List<Journey>>): List<List<Journey>> {\n        return routes.stream()\n            .filter { route -> sufferScoreFor(route) <= 10 }\n            .collect(Collectors.toUnmodifiableList())\n    }\n\n    private fun sufferScore(\n        longestJourneys: List<Journey>,\n        start: Location\n    ): Int {\n        return SOME_COMPLICATED_RESULT()\n    }\n}\n```", "```java\n@Test public void returns_limit_results() {\n    assertEquals(\n        List.of(longJourney, mediumJourney),\n        longestJourneysIn(List.of(shortJourney, mediumJourney, longJourney), 2)\n    );\n}\n```", "```java\n@JvmStatic\nfun longestJourneysIn(\n    journeys: List<Journey>,\n    limit: Int\n): List<Journey> {\n    val actualLimit = Math.min(journeys.size, limit)\n    return sorted(\n        journeys,\n        comparing { obj: Journey -> obj.duration }.reversed()\n    ).subList(0, actualLimit)\n}\n```", "```java\n@JvmStatic\nfun longestJourneysIn(journeys: List<Journey>, limit: Int): List<Journey> =\n    journeys.sortedByDescending { it.duration }.take(limit)\n```", "```java\n@JvmStatic\nfun List<Journey>.longestJourneys(limit: Int): List<Journey> =\n    sortedByDescending { it.duration }.take(limit)\n```", "```java\n@JvmStatic\nfun sufferScoreFor(route: List<Journey>): Int {\n    return sufferScore(\n        route.longestJourneys(limit = 3), ![1](assets/1.png)\n        Routes.getDepartsFrom(route)\n    )\n}\n```", "```java\nprivate fun bearable(routes: List<List<Journey>>): List<List<Journey>> {\n    return routes.stream()\n        .filter { route -> sufferScoreFor(route) <= 10 }\n        .collect(Collectors.toUnmodifiableList())\n}\n```", "```java\nprivate fun bearable(routes: List<List<Journey>>): List<List<Journey>> =\n    routes.filter { sufferScoreFor(it) <= 10 }\n```", "```java\nobject Suffering {\n    @JvmStatic\n    fun sufferScoreFor(route: List<Journey>): Int =\n        sufferScore(\n            route.longestJourneys(limit = 3),\n            Routes.getDepartsFrom(route)\n        )\n\n    @JvmStatic\n    fun List<Journey>.longestJourneys(limit: Int): List<Journey> =\n        sortedByDescending { it.duration }.take(limit)\n\n    fun routesToShowFor(itineraryId: String?): List<List<Journey>> =\n        bearable(routesFor(itineraryId))\n\n    private fun bearable(routes: List<List<Journey>>): List<List<Journey>> =\n        routes.filter { sufferScoreFor(it) <= 10 }\n\n    private fun sufferScore(\n        longestJourneys: List<Journey>,\n        start: Location\n    ): Int = SOME_COMPLICATED_RESULT()\n}\n```"]