["```java\npublic void doTest() {\n    // Main Loop\n    double l;\n    for (int i = 0; i < nWarmups; i++) {\n        l = fibImpl1(50);\n    }\n    long then = System.currentTimeMillis();\n    for (int i = 0; i < nLoops; i++) {\n        l = fibImpl1(50);\n    }\n    long now = System.currentTimeMillis();\n    System.out.println(\"Elapsed time: \" + (now - then));\n}\n```", "```java\nfor (int i = 0; i < nLoops; i++) {\n    l = fibImpl1(random.nextInteger());\n}\n```", "```java\nint[] input = new int[nLoops];\nfor (int i = 0; i < nLoops; i++) {\n    input[i] = random.nextInt();\n}\nlong then = System.currentTimeMillis();\nfor (int i = 0; i < nLoops; i++) {\n    try {\n        l = fibImpl1(input[i]);\n    } catch (IllegalArgumentException iae) {\n    }\n}\nlong now = System.currentTimeMillis();\n```", "```java\npublic double fibImplSlow(int n) {\n    if (n < 0) throw new IllegalArgumentException(\"Must be > 0\");\n    if (n > 1476) throw new ArithmeticException(\"Must be < 1476\");\n    return recursiveFib(n);\n}\n```", "```java\n$ mvn archetype:generate \\\n      -DinteractiveMode=false \\\n      -DarchetypeGroupId=org.openjdk.jmh \\\n      -DarchetypeArtifactId=jmh-java-benchmark-archetype \\\n      -DgroupId=net.sdo \\\n      -DartifactId=string-intern-benchmark \\\n      -Dversion=1.0\n```", "```java\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.infra.Blackhole;\n\npublic class MyBenchmark {\n\n    @Benchmark\n    public void testIntern(Blackhole bh) {\n        for (int i = 0; i < 10000; i++) {\n            String s = new String(\"String to intern \" + i);\n            String t = s.intern();\n            bh.consume(t);\n        }\n    }\n}\n```", "```java\n$ mvn package\n... output from mvn...\n$ java -jar target/benchmarks.jar\n# Warmup: 5 iterations, 10 s each\n# Measurement: 5 iterations, 10 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: net.sdo.MyBenchmark.testIntern\n\n# Run progress: 0.00% complete, ETA 00:08:20\n# Fork: 1 of 5\n# Warmup Iteration   1: 189.999 ops/s\n# Warmup Iteration   2: 170.331 ops/s\n# Warmup Iteration   3: 195.393 ops/s\n# Warmup Iteration   4: 184.782 ops/s\n# Warmup Iteration   5: 158.762 ops/s\nIteration   1: 182.426 ops/s\nIteration   2: 172.446 ops/s\nIteration   3: 166.488 ops/s\nIteration   4: 182.737 ops/s\nIteration   5: 168.755 ops/s\n\n# Run progress: 20.00% complete, ETA 00:06:44\n# Fork: 2 of 5\n.... similar output until ...\n\nResult \"net.sdo.MyBenchmark.testIntern\":\n  177.219 ±(99.9%) 10.140 ops/s [Average]\n  (min, avg, max) = (155.286, 177.219, 207.970), stdev = 13.537\n  CI (99.9%): [167.078, 187.359] (assumes normal distribution)\n\nBenchmark                Mode  Cnt    Score    Error  Units\nMyBenchmark.testIntern  thrpt   25  177.219 ± 10.140  ops/s\n\n```", "```java\n@Param({\"1\",\"10000\"})\nprivate int nStrings;\n\n@Benchmark\npublic void testIntern(Blackhole bh) {\n    for (int i = 0; i < nStrings; i++) {\n        String s = new String(\"String to intern \" + i);\n        String t = s.intern();\n        bh.consume(t);\n    }\n}\n```", "```java\n$ java -jar target/benchmarks.jar\n...lots of output...\nBenchmark               (nStrings)   Mode  Cnt        Score        Error  Units\nMyBenchmark.testMethod           1  thrpt   25  2838957.158 ± 284042.905  ops/s\nMyBenchmark.testMethod       10000  thrpt   25      202.829 ±     15.396  ops/s\n\n```", "```java\n$ java -jar target/benchmarks.jar -p nStrings=1,1000000\n\n```", "```java\n$ java -jar target/benchmarks.jar\n... output from test 1 ...\n$ java -jar target/benchmarks.jar -jvmArg -XX:StringTableSize=10000000\n... output from test 2 ...\n\n```", "```java\nprivate static ConcurrentHashMap<String,String> map = new ConcurrentHashMap<>();\n@Benchmark\npublic void testMap(Blackhole bh) {\n    for (int i = 0; i < nStrings; i++) {\n        String s = new String(\"String to intern \" + i);\n        String t = map.putIfAbsent(s, s);\n        bh.consume(t);\n    }\n}\n```", "```java\nBenchmark               (nStrings)   Mode  Cnt    Score     Error  Units\nMyBenchmark.testIntern       10000  thrpt   25  212.301 ± 207.550  ops/s\nMyBenchmark.testMap          10000  thrpt   25  352.140 ±  84.397  ops/s\n```", "```java\nprivate static ConcurrentHashMap<String,String> map;\nprivate static String[] strings;\n\n@Setup(Level.Iteration)\npublic void setup() {\n    strings = new String[nStrings];\n    for (int i = 0; i < nStrings; i++) {\n        strings[i] = makeRandomString();\n    }\n    map = new ConcurrentHashMap<>();\n}\n\n@Benchmark\npublic void testIntern(Blackhole bh) {\n    for (int i = 0; i < nStrings; i++) {\n        String t = strings[i].intern();\n        bh.consume(t);\n    }\n}\n```", "```java\nBenchmark               (nStrings)   Mode  Cnt    Score     Error  Units\nMyBenchmark.testIntern       10000  thrpt    4  233.359 ±  95.304  ops/s\nMyBenchmark.testMap          10000  thrpt    4  354.341 ± 166.491  ops/s\n```", "```java\nMyBenchmark.testIntern       10000  thrpt   20  172.738 ± 29.058  ops/s\nMyBenchmark.testMap          10000  thrpt   20  305.618 ± 22.754  ops/s\n```", "```java\npublic interface StockPrice {\n    String getSymbol();\n    Date getDate();\n    BigDecimal getClosingPrice();\n    BigDecimal getHigh();\n    BigDecimal getLow();\n    BigDecimal getOpeningPrice();\n    boolean isYearHigh();\n    boolean isYearLow();\n    Collection<? extends StockOptionPrice> getOptions();\n}\n```", "```java\npublic interface StockPriceHistory {\n    StockPrice getPrice(Date d);\n    Collection<StockPrice> getPrices(Date startDate, Date endDate);\n    Map<Date, StockPrice> getAllEntries();\n    Map<BigDecimal,ArrayList<Date>> getHistogram();\n    BigDecimal getAveragePrice();\n    Date getFirstDate();\n    BigDecimal getHighPrice();\n    Date getLastDate();\n    BigDecimal getLowPrice();\n    BigDecimal getStdDev();\n    String getSymbol();\n}\n```", "```java\npublic class StockPriceHistoryImpl implements StockPriceHistory {\n    ...\n    public StockPriceHistoryImpl(String s, Date startDate,\n        Date endDate, EntityManager em) {\n        Date curDate = new Date(startDate.getTime());\n        symbol = s;\n        while (!curDate.after(endDate)) {\n            StockPriceImpl sp = em.find(StockPriceImpl.class,\n                         new StockPricePK(s, (Date) curDate.clone()));\n            if (sp != null) {\n                Date d = (Date) curDate.clone();\n                if (firstDate == null) {\n                    firstDate = d;\n                }\n                prices.put(d, sp);\n                lastDate = d;\n            }\n            curDate.setTime(curDate.getTime() + msPerDay);\n        }\n    }\n    ...\n}\n```", "```java\npublic static BigDecimal sqrtB(BigDecimal bd) {\n    BigDecimal initial = bd;\n    BigDecimal diff;\n    do {\n        BigDecimal sDivX = bd.divide(initial, 8, RoundingMode.FLOOR);\n        BigDecimal sum = sDivX.add(initial);\n        BigDecimal div = sum.divide(TWO, 8, RoundingMode.FLOOR);\n        diff = div.subtract(initial).abs();\n        diff.setScale(8, RoundingMode.FLOOR);\n        initial = div;\n    } while (diff.compareTo(error) > 0);\n    return initial;\n}\n```", "```java\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public JsonObject getStockInfo(\n        @DefaultValue(\"\" + StockPriceHistory.STANDARD)\n              @QueryParam(\"impl\") int impl,\n        @DefaultValue(\"true\") @QueryParam(\"doMock\") boolean doMock,\n        @DefaultValue(\"\") @QueryParam(\"symbol\") String symbol,\n        @DefaultValue(\"01/01/2019\") @QueryParam(\"start\") String start,\n        @DefaultValue(\"01/01/2034\") @QueryParam(\"end\") String end,\n        @DefaultValue(\"0\") @QueryParam(\"save\") int saveCount\n        ) throws ParseException {\n\n        StockPriceHistory sph;\n        EntityManager em;\n        DateFormat df = localDateFormatter.get();  // Thread-local\n        Date startDate = df.parse(start);\n        Date endDate = df.parse(end);\n\n        em = // ... get the entity manager based on the test permutation\n        sph = em.find(...based on arguments...);\n        return JSON.createObjectBuilder()\n                .add(\"symbol\", sph.getSymbol())\n                .add(\"high\", sph.getHighPrice())\n                .add(\"low\", sph.getLowPrice())\n                .add(\"average\", sph.getAveragePrice())\n                .add(\"stddev\", sph.getStdDev())\n                .build();\n    }\n```"]