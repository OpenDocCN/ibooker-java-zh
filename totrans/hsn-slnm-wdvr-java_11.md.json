["```java\n@RunWith(Parameterized.class) ![1](assets/1.png)\npublic class ParameterizedJUnit4Test {\n\n    WebDriver driver;\n\n    @Parameter(0) ![2](assets/2.png)\n    public String username;\n\n    @Parameter(1)\n    public String password;\n\n    @Parameter(2)\n    public String expectedText;\n\n    @Before\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @After\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Parameters(name = \"{index}: username={0} password={1} expectedText={2}\") ![3](assets/3.png)\n    public static Collection<Object[]> data() {\n        return Arrays\n                .asList(new Object[][] { { \"user\", \"user\", \"Login successful\" },\n                        { \"bad-user\", \"bad-passwd\", \"Invalid credentials\" } }); ![4](assets/4.png)\n    }\n\n    @Test\n    public void testParameterized() { ![5](assets/5.png)\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/login-form.html\");\n\n        driver.findElement(By.id(\"username\")).sendKeys(username);\n        driver.findElement(By.id(\"password\")).sendKeys(password);\n        driver.findElement(By.cssSelector(\"button\")).click();\n\n        String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n        assertThat(bodyText).contains(expectedText); ![6](assets/6.png)\n    }\n\n}\n```", "```java\npublic class ParameterizedNGTest {\n\n    WebDriver driver;\n\n    @BeforeMethod\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterMethod\n    public void teardown() {\n        driver.quit();\n    }\n\n    @DataProvider(name = \"loginData\") ![1](assets/1.png)\n    public static Object[][] data() {\n        return new Object[][] { { \"user\", \"user\", \"Login successful\" },\n                { \"bad-user\", \"bad-passwd\", \"Invalid credentials\" } };\n    }\n\n    @Test(dataProvider = \"loginData\") ![2](assets/2.png)\n    public void testParameterized(String username, String password,\n            String expectedText) { ![3](assets/3.png)\n        // Same test logic than the example before\n    }\n\n}\n```", "```java\n@ValueSource\n```", "```java\n@ParameterizedTest\n@ValueSource(strings = { \"Hi\", \"Bye\" })\nvoid test(String argument) {\n    log.debug(\"arg: {}\", argument);\n}\n```", "```java\narg: Hi\narg: Bye\n```", "```java\n@EnumSource\n```", "```java\n@ParameterizedTest\n@EnumSource(TimeUnit.class)\nvoid test(TimeUnit argument) {\n    log.debug(\"{}\", argument);\n}\n```", "```java\nNANOSECONDS\nMICROSECONDS\nMILLISECONDS\nSECONDS\nMINUTES\nHOURS\nDAYS\n```", "```java\n@MethodSource\n```", "```java\nstatic IntStream intProvider() {\n    return IntStream.of(0, 1);\n}\n\n@ParameterizedTest\n@MethodSource(\"intProvider\")\nvoid test(int argument) {\n    log.debug(\"arg: {}\", argument);\n    assertNotNull(argument);\n}\n```", "```java\narg: 0\narg: 1\n```", "```java\n@CsvSource\n```", "```java\n@ParameterizedTest\n@CsvSource({ \"hello, 1\", \"world, 2\"})\nvoid test(String first, int second) {\n    log.debug(\"{} and {} \", first,\n            second);\n}\n```", "```java\nhello and 1\nworld and 2\n```", "```java\n@CsvFileSource\n```", "```java\n@ParameterizedTest\n@CsvFileSource(resources =\n            \"/input.csv\")\nvoid test(String first, int second) {\n    log.debug(\"{} and {} \", first,\n            second);\n}\n```", "```java\nhi and 3\nthere and 4\n```", "```java\n@ArgumentsSource\n```", "```java\n@ParameterizedTest\n@ArgumentsSource(MyArgs.class)\nvoid test(String first, int second) {\n    log.debug(\"{} and {} \", first,\n            second);\n}\n\npublic class MyArgs implements\n            ArgumentsProvider {\n  @Override\n  public Stream<? extends\n        Arguments> provideArguments(\n        ExtensionContext context) {\n     return Stream.of(Arguments.\n        of(\"hi\", 5), Arguments.\n        of(\"there\", 6));\n  }\n}\n```", "```java\nhi and 5\nthere and 6\n```", "```java\n@NullSource\n```", "```java\n@ParameterizedTest\n@ValueSource(strings = { \"one\",\n            \"two\" })\n@NullSource\nvoid test(String argument) {\n    log.debug(\"arg: {}\", argument);\n}\n```", "```java\narg: one\narg: two\narg: null\n```", "```java\n@EmptySource\n```", "```java\n@ParameterizedTest\n@ValueSource(strings = { \"three\",\n            \"four\" })\n@EmptySource\nvoid test(String argument) {\n    log.debug(\"arg: {}\", argument);\n}\n```", "```java\narg: three\narg: four\narg:\n```", "```java\n@NullAndEmptySource\n```", "```java\n@ParameterizedTest\n@ValueSource(strings = { \"five\",\n            \"six\" })\n@NullAndEmptySource\nvoid test(String arg) {\n    log.debug(\"arg: {}\", arg);\n}\n```", "```java\narg: five\narg: six\narg: null\narg:\n```", "```java\nclass ParameterizedJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    static Stream<Arguments> loginData() { ![1](assets/1.png)\n        return Stream.of(Arguments.of(\"user\", \"user\", \"Login successful\"),\n                Arguments.of(\"bad-user\", \"bad-passwd\", \"Invalid credentials\"));\n    }\n\n    @ParameterizedTest ![2](assets/2.png)\n    @MethodSource(\"loginData\") ![3](assets/3.png)\n    void testParameterized(String username, String password,\n            String expectedText) { ![4](assets/4.png)\n        // Same test logic than the examples before\n    }\n\n}\n```", "```java\n@ExtendWith(SeleniumJupiter.class)\nclass ParameterizedSelJupTest {\n\n    static Stream<Arguments> loginData() {\n        return Stream.of(Arguments.of(\"user\", \"user\", \"Login successful\"),\n                Arguments.of(\"bad-user\", \"bad-passwd\", \"Invalid credentials\"));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"loginData\")\n    void testParameterized(String username, String password,\n            String expectedText, ChromeDriver driver) { ![1](assets/1.png)\n        // Same test logic than the examples before\n    }\n\n}\n```", "```java\n@RunWith(Parameterized.class)\npublic class CrossBrowserJUnit4Test {\n\n    WebDriver driver;\n\n    @Parameter(0)\n    public String browserName;\n\n    @Parameters(name = \"{index}: browser={0}\")\n    public static Collection<Object[]> data() {\n        return Arrays.asList(\n                new Object[][] { { \"chrome\" }, { \"edge\" }, { \"firefox\" } }); ![1](assets/1.png)\n    }\n\n    @Before\n    public void setup() {\n        driver = WebDriverManager.getInstance(browserName).create(); ![2](assets/2.png)\n    }\n\n    @After\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void testCrossBrowser() { ![3](assets/3.png)\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\npublic class CrossBrowserNGTest {\n\n    WebDriver driver;\n\n    @DataProvider(name = \"browsers\")\n    public static Object[][] data() {\n        return new Object[][] { { \"chrome\" }, { \"edge\" }, { \"firefox\" } };\n    }\n\n    @AfterMethod\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test(dataProvider = \"browsers\")\n    public void testCrossBrowser(String browserName) {\n        driver = WebDriverManager.getInstance(browserName).create(); ![1](assets/1.png)\n\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nclass CrossBrowserJupiterTest {\n\n    WebDriver driver;\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = { \"chrome\", \"edge\", \"firefox\" })\n    void testCrossBrowser(String browserName) {\n        driver = WebDriverManager.getInstance(browserName).create();  ![1](assets/1.png)\n\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\n{\n   \"browsers\": [\n      [\n         {\n            \"type\": \"chrome\" ![1](assets/1.png)\n         }\n      ],\n      [\n         {\n            \"type\": \"edge\", ![2](assets/2.png)\n             \"arguments\" : [\n                \"--headless\"\n             ]\n         }\n      ],\n      [\n         {\n            \"type\": \"firefox-in-docker\", ![3](assets/3.png)\n            \"version\": \"93\"\n         }\n      ]\n   ]\n}\n```", "```java\n@EnabledIfDockerAvailable ![1](assets/1.png)\n@ExtendWith(SeleniumJupiter.class)\nclass CrossBrowserJsonSelJupTest {\n\n    @TestTemplate ![2](assets/2.png)\n    void testCrossBrowser(WebDriver driver) { ![3](assets/3.png)\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nmvn -B test\n    -Dtest=Hello*\n```", "```java\ngradle test\n    --tests Hello*\n```", "```java\nmvn test\n    -Dtest=*Basic*,*Timeout*\n```", "```java\ngradle test\n    --tests *Basic* --tests *Timeout*\n```", "```java\nmvn test\n    -Dtest=!*Firefox*\n```", "```java\ngradle test\n    -PexcludeTests=**/*Firefox*\n```", "```java\nmvn test\n    -Dtest=!Docker*,!*Remote*\n```", "```java\ngradle test\n    -PexcludeTests=**/Docker*,**/*Remote*\n```", "```java\npublic class CategoriesJUnit4Test {\n\n    WebDriver driver;\n\n    @Before\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @After\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    @Category(WebForm.class) ![1](assets/1.png)\n    public void testCategoriesWebForm() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n        assertThat(driver.getCurrentUrl()).contains(\"web-form\");\n    }\n\n    @Test\n    @Category(HomePage.class) ![2](assets/2.png)\n    public void tesCategoriestHomePage() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getCurrentUrl()).doesNotContain(\"web-form\");\n    }\n\n}\n```", "```java\nmvn test -Dgroups=\n    io.github.bonigarcia.webdriver.junit4.ch08.categories.HomePage\ngradle test -Pgroups=\n    io.github.bonigarcia.webdriver.junit4.ch08.categories.HomePage\n```", "```java\nmvn test -Dtest=CategoriesJUnit4Test -DexcludedGroups=\n    io.github.bonigarcia.webdriver.junit4.ch08.categories.HomePage\ngradle test --tests CategoriesJUnit4Test -PexcludedGroups=\n    io.github.bonigarcia.webdriver.junit4.ch08.categories.HomePage\n```", "```java\npublic class CategoriesNGTest {\n\n    WebDriver driver;\n\n    @BeforeMethod(alwaysRun = true) ![1](assets/1.png)\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterMethod(alwaysRun = true)\n    public void teardown() {\n        driver.quit();\n    }\n\n    @Test(groups = { \"WebForm\" }) ![2](assets/2.png)\n    public void testCategoriesWebForm() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n        assertThat(driver.getCurrentUrl()).contains(\"web-form\");\n    }\n\n    @Test(groups = { \"HomePage\" }) ![3](assets/3.png)\n    public void tesCategoriestHomePage() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getCurrentUrl()).doesNotContain(\"web-form\");\n    }\n\n}\n```", "```java\nmvn test -Dgroups=HomePage\ngradle test -Pgroups=HomePage\n\nmvn test -Dtest=CategoriesNGTest -DexcludedGroups=HomePage\ngradle test --tests CategoriesNGTest -PexcludedGroups=HomePage\n```", "```java\nclass CategoriesJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterEach\n    void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    @Tag(\"WebForm\") ![1](assets/1.png)\n    void testCategoriesWebForm() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/web-form.html\");\n        assertThat(driver.getCurrentUrl()).contains(\"web-form\");\n    }\n\n    @Test\n    @Tag(\"HomePage\") ![2](assets/2.png)\n    void testCategoriesHomePage() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        assertThat(driver.getCurrentUrl()).doesNotContain(\"web-form\");\n    }\n\n}\n```", "```java\nmvn test -Dgroups=HomePage\ngradle test -Pgroups=HomePage\n\nmvn test -Dtest=CategoriesNGTest -DexcludedGroups=HomePage\ngradle test --tests CategoriesNGTest -PexcludedGroups=HomePage\n```", "```java\n@FixMethodOrder(MethodSorters.NAME_ASCENDING) ![1](assets/1.png)\npublic class OrderJUnit4Test {\n\n    static WebDriver driver;\n\n    @BeforeClass ![2](assets/2.png)\n    public static void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterClass ![3](assets/3.png)\n    public static void teardown() {\n        driver.quit();\n    }\n\n    @Test ![4](assets/4.png)\n    public void testA() {\n        driver.get(\n                \"https://bonigarcia.dev/selenium-webdriver-java/navigation1.html\");\n        assertBodyContains(\"Lorem ipsum\");\n    }\n\n    @Test\n    public void testB() {\n        driver.findElement(By.linkText(\"2\")).click();\n        assertBodyContains(\"Ut enim\");\n    }\n\n    @Test\n    public void testC() {\n        driver.findElement(By.linkText(\"3\")).click();\n        assertBodyContains(\"Excepteur sint\");\n    }\n\n    void assertBodyContains(String text) {\n        String bodyText = driver.findElement(By.tagName(\"body\")).getText();\n        assertThat(bodyText).contains(text);\n    }\n\n}\n```", "```java\npublic class OrderNGTest {\n\n    static WebDriver driver;\n\n    @BeforeClass\n    public static void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterClass\n    public static void teardown() {\n        driver.quit();\n    }\n\n    @Test(priority = 1)\n    public void testA() {\n        // Test logic\n    }\n\n    @Test(priority = 2)\n    public void testB() {\n        // Test logic\n    }\n\n    @Test(priority = 3)\n    public void testC() {\n        // Test logic\n    }\n\n}\n```", "```java\n@TestMethodOrder(OrderAnnotation.class)\nclass OrderJupiterTest {\n\n    static WebDriver driver;\n\n    @BeforeAll\n    static void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterAll\n    static void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    @Order(1)\n    void testA() {\n        // Test logic\n    }\n\n    @Test\n    @Order(2)\n    void testB() {\n        // Test logic\n    }\n\n    @Test\n    @Order(3)\n    void testC() {\n        // Test logic\n    }\n\n}\n```", "```java\n@ExtendWith(SeleniumJupiter.class)\n@TestMethodOrder(OrderAnnotation.class)\n@SingleSession\nclass OrderSelJupTest {\n\n    WebDriver driver;\n\n    OrderSelJupTest(ChromeDriver driver) {\n        this.driver = driver;\n    }\n\n    @Test\n    @Order(1)\n    void testA() {\n        // Test logic\n    }\n\n    @Test\n    @Order(2)\n    void testB() {\n        // Test logic\n    }\n\n    @Test\n    @Order(3)\n    void testC() {\n        // Test logic\n    }\n\n}\n```", "```java\nErrorCollector\n```", "```java\n@Rule\npublic ErrorCollector collector =\n        new ErrorCollector();\n\n@Ignore\n@Test\npublic void test() {\n    collector.checkThat(\"a\", equalTo(\"b\"));\n    collector.checkThat(1, equalTo(2));\n}\n```", "```java\nExternalResource\n```", "```java\nprivate Resource resource;\n\n@Rule\npublic ExternalResource rule =\n        new ExternalResource() {\n    @Override\n    protected void before() throws Throwable {\n        resource = new Resource();\n        resource.open();\n    }\n\n    @Override\n    protected void after() {\n        resource.close();\n    }\n};\n```", "```java\nTestName\n```", "```java\n@Rule\npublic TestName name = new TestName();\n\n@Test\npublic void testA() {\n    assertThat(\"testA\")\n        .isEqualTo(name.getMethodName());\n}\n```", "```java\nTemporaryFolder\n```", "```java\n@Rule\npublic TemporaryFolder folder =\n        new TemporaryFolder();\n\n@Test\npublic void test() throws IOException {\n    File file = folder.newFile(\"myfile.txt\");\n}\n```", "```java\nTimeout\n```", "```java\n@Rule\npublic Timeout timeout =\n        new Timeout(10, SECONDS);\n\n@Test\npublic void test() {\n    while (true);\n}\n```", "```java\nTestWatcher\n```", "```java\n@Rule\npublic TestWatcher watcher =\n        new TestWatcher() {\n    @Override\n    protected void succeeded(Description d) {\n        log.debug(\"Test succeeded: {}\",\n            d.getMethodName());\n    }\n\n    @Override\n    protected void failed(Throwable e,\n            Description d) {\n        log.debug(\"Test failed: {}\",\n            d.getMethodName());\n    }\n};\n```", "```java\npublic class FailureJUnit4Test {\n\n    static WebDriver driver;\n\n    @Rule\n    public TestRule testWatcher = new FailureWatcher(driver); ![1](assets/1.png)\n\n    @BeforeClass\n    public static void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterClass\n    public static void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void testFailure() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        fail(\"Forced error\"); ![2](assets/2.png)\n    }\n\n}\n```", "```java\npublic class FailureWatcher extends TestWatcher {\n\n    FailureManager failureManager;\n\n    public FailureWatcher(WebDriver driver) {\n        failureManager = new FailureManager(driver); ![1](assets/1.png)\n    }\n\n    @Override\n    public void failed(Throwable throwable, Description description) { ![2](assets/2.png)\n        failureManager.takePngScreenshot(description.getDisplayName());\n    }\n\n}\n```", "```java\npublic class FailureManager {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    WebDriver driver;\n\n    public FailureManager(WebDriver driver) {\n        this.driver = driver;\n    }\n\n    public void takePngScreenshot(String filename) { ![1](assets/1.png)\n        TakesScreenshot ts = (TakesScreenshot) driver;\n        File screenshot = ts.getScreenshotAs(OutputType.FILE);\n        Path destination = Paths.get(filename + \".png\");\n\n        try {\n            Files.move(screenshot.toPath(), destination);\n        } catch (IOException e) {\n            log.error(\"Exception moving screenshot from {} to {}\", screenshot,\n                    destination, e);\n        }\n    }\n\n}\n```", "```java\npublic class FailureNGTest {\n\n    WebDriver driver;\n\n    @BeforeMethod\n    public void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterMethod\n    public void teardown(ITestResult result) { ![1](assets/1.png)\n        if (result.getStatus() == ITestResult.FAILURE) { ![2](assets/2.png)\n            FailureManager failureManager = new FailureManager(driver); ![3](assets/3.png)\n            failureManager.takePngScreenshot(result.getName());\n        }\n\n        driver.quit();\n    }\n\n    @Test\n    public void testFailure() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        fail(\"Forced error\");\n    }\n\n}\n```", "```java\nBeforeAllCallback\nBeforeEachCallback\nBeforeTestExecutionCallback\nAfterTestExecutionCallback\nAfterEachCallback\nAfterAllCallback\n```", "```java\nParameterResolver\n```", "```java\nTestTemplateInvocationContextProvider\n```", "```java\nExecutionCondition\n```", "```java\nTestExecutionExceptionHandler\nLifecycleMethodExecutionExceptionHandler\n```", "```java\nTestInstanceFactory\nTestInstancePostProcessor\nTestInstancePreDestroyCallback\n```", "```java\nInvocationInterceptor\n```", "```java\nclass FailureJupiterTest {\n\n    static WebDriver driver;\n\n    @RegisterExtension\n    FailureWatcher failureWatcher = new FailureWatcher(driver); ![1](assets/1.png)\n\n    @BeforeAll\n    static void setup() {\n        driver = WebDriverManager.chromedriver().create();\n    }\n\n    @AfterAll\n    static void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    void testFailure() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        fail(\"Forced error\"); ![2](assets/2.png)\n    }\n\n}\n```", "```java\npublic class FailureWatcher implements AfterTestExecutionCallback { ![1](assets/1.png)\n\n    FailureManager failureManager;\n\n    public FailureWatcher(WebDriver driver) {\n        failureManager = new FailureManager(driver);\n    }\n\n    @Override\n    public void afterTestExecution(ExtensionContext context) throws Exception { ![2](assets/2.png)\n        if (context.getExecutionException().isPresent()) { ![3](assets/3.png)\n            failureManager.takePngScreenshot(context.getDisplayName()); ![4](assets/4.png)\n        }\n    }\n\n}\n```", "```java\nclass FailureSelJupTest {\n\n    @RegisterExtension\n    static SeleniumJupiter seleniumJupiter = new SeleniumJupiter();\n\n    @BeforeAll\n    static void setup() {\n        seleniumJupiter.getConfig().enableScreenshotWhenFailure(); ![1](assets/1.png)\n    }\n\n    @Test\n    void testFailure(ChromeDriver driver) {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\");\n        fail(\"Forced error\");\n    }\n\n}\n```", "```java\npublic class RandomCalculatorJUnit4Test {\n\n    static WebDriver driver;\n\n    @Rule\n    public RetryRule retryRule = new RetryRule(5); ![1](assets/1.png)\n\n    @BeforeClass\n    public static void setup() {\n        driver = WebDriverManager.chromedriver().create(); ![2](assets/2.png)\n    }\n\n    @AfterClass\n    public static void teardown() {\n        driver.quit();\n    }\n\n    @Test\n    public void testRandomCalculator() {\n        driver.get(\n         \"https://bonigarcia.dev/selenium-webdriver-java/random-calculator.html\"); ![3](assets/3.png)\n        // 1 + 3\n        driver.findElement(By.xpath(\"//span[text()='1']\")).click(); ![4](assets/4.png)\n        driver.findElement(By.xpath(\"//span[text()='+']\")).click();\n        driver.findElement(By.xpath(\"//span[text()='3']\")).click();\n        driver.findElement(By.xpath(\"//span[text()='=']\")).click();\n\n        // ... should be 4\n        String result = driver.findElement(By.className(\"screen\")).getText();\n        assertThat(result).isEqualTo(\"4\"); ![5](assets/5.png)\n    }\n\n}\n```", "```java\npublic class RetryRule implements TestRule { ![1](assets/1.png)\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    int maxRetries;\n\n    public RetryRule(int maxRetries) {\n        this.maxRetries = maxRetries; ![2](assets/2.png)\n    }\n\n    @Override\n    public Statement apply(Statement base, Description description) { ![3](assets/3.png)\n        return new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                Throwable throwable = null;\n                for (int i = 0; i < maxRetries; i++) { ![4](assets/4.png)\n                    try {\n                        base.evaluate();\n                        return;\n                    } catch (Throwable t) { ![5](assets/5.png)\n                        throwable = t;\n                        log.debug(\"{}: run {} failed\",\n                                description.getDisplayName(), i + 1);\n                    }\n                }\n                log.debug(\"{}: giving up after {} failures\",\n                        description.getDisplayName(), maxRetries);\n                throw throwable; ![6](assets/6.png)\n            }\n        };\n    }\n}\n```", "```java\n@Test(retryAnalyzer = RetryAnalyzer.class)\npublic void testRandomCalculator() {\n    // Same logic than the example before\n}\n```", "```java\npublic class RetryAnalyzer implements IRetryAnalyzer { ![1](assets/1.png)\n\n    static final int MAX_RETRIES = 5; ![2](assets/2.png)\n\n    int retryCount = 0;\n\n    @Override\n    public boolean retry(ITestResult result) { ![3](assets/3.png)\n        if (retryCount <= MAX_RETRIES) { ![4](assets/4.png)\n            retryCount++;\n            return true;\n        }\n        return false;\n    }\n}\n```", "```java\n@RepeatedIfExceptionsTest(repeats = 5) ![1](assets/1.png)\nvoid testRandomCalculator() {\n    // Same logic as the example before }\n```", "```java\n@SingleSession ![1](assets/1.png)\n@ExtendWith(SeleniumJupiter.class)\nclass RandomCalculatorSelJupTest {\n\n    @RepeatedIfExceptionsTest(repeats = 5)\n    void testRandomCalculator(ChromeDriver driver) {\n        // Same logic than the example before\n    }\n\n}\n```", "```java\nmvn test -T 4 ![1](assets/1.png)\nmvn test -T 1C ![2](assets/2.png)\n```", "```java\nmvn test -Dparallel=classesAndMethods -DthreadCount=4\n```", "```java\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${maven-surefire-plugin.version}</version>\n            <configuration>\n                <parallel>classesAndMethods</parallel>\n                <threadCount>4</threadCount>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\nmvn test -DforkCount=4\n```", "```java\ngradle test --parallel\n```", "```java\nmaxParallelForks = Runtime.runtime.availableProcessors()\n```", "```java\ngradle test -Pparallel\n```", "```java\npublic class ParallelJUnit4Suite {\n\n    @Test\n    public void runInParallel() {\n        Class<?>[] classes = { Parallel1JUnit4Test.class,\n                Parallel2JUnit4Test.class }; ![1](assets/1.png)\n        JUnitCore.runClasses(new ParallelComputer(true, true), classes); ![2](assets/2.png)\n    }\n\n}\n```", "```java\n<!DOCTYPE suite SYSTEM \"https://testng.org/testng-1.0.dtd\">\n<suite name=\"parallel-suite\" parallel=\"classes\" thread-count=\"2\">\n    <test name=\"parallel-tests\">\n        <classes>\n            <class name=\n              \"io.github.bonigarcia.webdriver.testng.ch08.parallel.Parallel1NGTest\"/>\n            <class name=\n              \"io.github.bonigarcia.webdriver.testng.ch08.parallel.Parallel2NGTest\"/>\n        </classes>\n    </test>\n</suite>\n```", "```java\nmvn test -Dsurefire.suiteXmlFiles=src/test/resources/testng.xml\ngradle test -Psuite=src/test/resources/testng.xml\n```", "```java\nmvn test -Djunit.jupiter.execution.parallel.enabled=true\ngradle test -Djunit.jupiter.execution.parallel.enabled=true\n```", "```java\njunit.jupiter.execution.parallel.enabled = true\njunit.jupiter.execution.parallel.mode.default = same_thread\njunit.jupiter.execution.parallel.mode.classes.default = same_thread\n```", "```java\n@Execution(ExecutionMode.CONCURRENT)\nclass Parallel1JupiterTest {\n\n    // Test logic\n\n}\n```", "```java\npublic class MyTestListener extends RunListener {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    @Override\n    public void testStarted(Description description) throws Exception {\n        super.testStarted(description);\n        log.debug(\"testStarted {}\", description.getDisplayName());\n    }\n\n    @Override\n    public void testFailure(Failure failure) throws Exception {\n        super.testFailure(failure);\n        log.debug(\"testFailure {} {}\", failure.getException(),\n                failure.getMessage());\n    }\n\n    // Other listeners\n\n}\n```", "```java\npublic class MyTestRunner extends BlockJUnit4ClassRunner { ![1](assets/1.png)\n\n    public MyTestRunner(Class<?> clazz) throws InitializationError {\n        super(clazz);\n    }\n\n    @Override\n    public void run(RunNotifier notifier) {\n        notifier.addListener(new MyTestListener()); ![2](assets/2.png)\n        super.run(notifier); ![3](assets/3.png)\n    }\n}\n```", "```java\n@RunWith(MyTestRunner.class) ![1](assets/1.png)\npublic class ListenersJUnit4Test {\n\n    // Test logic \n}\n```", "```java\npublic class MyTestListener implements ITestListener {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    @Override\n    public void onTestStart(ITestResult result) {\n        ITestListener.super.onTestStart(result);\n        log.debug(\"onTestStart {}\", result.getName());\n    }\n\n    @Override\n    public void onTestFailure(ITestResult result) {\n        ITestListener.super.onTestFailure(result);\n        log.debug(\"onTestFailure {}\", result.getThrowable());\n    }\n\n    // Other listeners\n\n}\n```", "```java\n@Listeners(MyTestListener.class) ![1](assets/1.png)\npublic class ListenersNGTest {\n\n    // Test logic \n}\n```", "```java\npublic class MyTestListener implements TestExecutionListener {\n\n    static final Logger log = getLogger(lookup().lookupClass());\n\n    @Override\n    public void executionStarted(TestIdentifier testIdentifier) {\n        TestExecutionListener.super.executionStarted(testIdentifier);\n        log.debug(\"Test execution started {}\", testIdentifier.getDisplayName());\n    }\n\n    @Override\n    public void executionSkipped(TestIdentifier testIdentifier, String reason) {\n        TestExecutionListener.super.executionSkipped(testIdentifier, reason);\n        log.debug(\"Test execution skipped: {}\", reason);\n    }\n\n    @Override\n    public void executionFinished(TestIdentifier testIdentifier,\n            TestExecutionResult testExecutionResult) {\n        TestExecutionListener.super.executionFinished(testIdentifier,\n                testExecutionResult);\n        log.debug(\"Test execution finished {}\",\n                testExecutionResult.getStatus());\n    }\n\n}\n```", "```java\n@Ignore(\"Optional reason for disabling\")\n@Test\npublic void testDisabled() {\n    // Test logic\n}\n```", "```java\n@Ignore(\"Optional reason for disabling\")\n@Test\npublic void testDisabled1() {\n    // Test logic\n}\n\n@Test(enabled = false)\npublic void testDisabled2() {\n    // Test logic\n}\n```", "```java\n@Disabled\n```", "```java\n@DisabledOnJre\n@EnabledOnJre\n```", "```java\n@DisabledOnJreRange\n@EnabledOnJreRange\n```", "```java\n@DisabledOnOs\n@EnabledOnOs\n```", "```java\n@DisabledIfSystemProperty\n@DisabledIfSystemProperties\n@EnabledIfSystemProperty\n@EnabledIfSystemProperties\n```", "```java\n@DisabledIfEnvironmentVariable\n@DisabledIfEnvironmentVariables\n@EnabledIfEnvironmentVariable\n@EnabledIfEnvironmentVariables\n```", "```java\n@DisabledIf\n@EnabledIf\n```", "```java\n@Disabled(\"Optional reason for disabling\") ![1](assets/1.png)\n@Test\npublic void testDisabled1() {\n    // Test logic }\n\n@DisabledOnJre(JAVA_8) ![2](assets/2.png)\n@Test\npublic void testDisabled2() {\n    // Test logic }\n\n@EnabledOnOs(MAC) ![3](assets/3.png)\n@Test\npublic void testDisabled3() {\n    // Test logic }\n```", "```java\n@EnabledIfBrowserAvailable(SAFARI) ![1](assets/1.png)\n@Test\nvoid testDisabled1(SafariDriver driver) {\n    // Test logic }\n\n@EnabledIfDockerAvailable ![2](assets/2.png)\n@Test\nvoid testDisabled2(@DockerBrowser(type = CHROME) WebDriver driver) {\n    // Test logic }\n\n@EnabledIfDriverUrlOnline(\"http://localhost:4444/\") ![3](assets/3.png)\n@Test\nvoid testDisabled3(\n        @DriverCapabilities(\"browserName=chrome\") WebDriver driver) {\n    // Test logic }\n```"]