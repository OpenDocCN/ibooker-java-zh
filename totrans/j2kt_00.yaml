- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'Hello, this is Duncan and Nat. As you’re reading this preface, you’re probably
    trying to decide whether to invest some hours into reading the rest of this book.
    So let’s cut to the chase:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，我是邓肯和纳特。当你阅读这篇前言时，你可能正在考虑是否值得投入时间来阅读本书的其余部分。那么让我们来直接谈谈：
- en: This book won’t teach you to program computers in Kotlin.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这本书不会教你如何在 Kotlin 中编写计算机程序。
- en: We started writing a book that would, but it soon became clear that Kotlin is
    a large language, and so the book was going to take longer to write than we wanted.
    There are also already some great books in that space, and we don’t like competing
    against great.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始写一本书，本来是打算的，但很快就明白 Kotlin 是一门庞大的语言，所以这本书将需要比我们期望的更长时间来写。在这个领域已经有一些很棒的书籍，我们不喜欢和这些优秀作品竞争。
- en: We decided instead to make our lives easier by concentrating on teaching Kotlin
    to Java developers, based on a workshop that we run called Refactoring to Kotlin.
    This teaches the Kotlin language by converting existing code and is (according
    to our marketing material) designed for Java teams wanting to leverage their existing
    knowledge to accelerate their Kotlin adoption.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们决定通过专注于将 Kotlin 教给 Java 开发人员来简化我们的生活，这基于我们开展的一个名为“重构到 Kotlin”的研讨会。这通过转换现有代码来教授
    Kotlin 语言，并且（根据我们的营销材料）专为希望利用现有知识加速 Kotlin 采用的 Java 团队设计。
- en: 'We started writing *that* book, but it soon became clear that Kotlin is *still*
    a large language, and so we would *still* be writing for a long time. We also
    found that motivated and experienced Java developers can pick up most of Kotlin
    very quickly. It felt patronizing to plow our way through language features that
    our target readers will probably just appreciate and adopt as soon as they see
    them. So we abandoned that idea, and as a result:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始写*那本*书，但很快就清楚 Kotlin *依然*是一门庞大的语言，所以我们会*仍然*花很长时间来写。我们还发现，有动力和经验丰富的 Java
    开发人员可以很快掌握 Kotlin 的大部分内容。对于我们的目标读者来说，逐个研究语言特性显得有些居高临下，他们可能一看就会欣然接受并采用。所以我们放弃了那个想法，结果是：
- en: This book won’t teach you the Kotlin language.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这本书不会教你 Kotlin 语言。
- en: So why should you read it? Because we have written the book we wish was available
    when we first adopted Kotlin. We are experienced programmers who know Java and
    the Java ecosystem well. We hope you are too. Like us, you probably have experience
    in a number of other languages. You’ve learned the basics of Kotlin, and you recognize
    that to get the best out of the language you will need to design your systems
    differently. You have found that some things that are cumbersome in Java are much
    easier in Kotlin, and that some features, such as checked exceptions, are not
    there at all. You don’t want to end up merely writing Java code in Kotlin syntax.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么你应该阅读它呢？因为我们写了这本书，这是我们在首次采用 Kotlin 时希望能使用的书籍。我们是经验丰富的程序员，深知 Java 和 Java
    生态系统。我们希望你也是。和我们一样，你可能在许多其他语言中有经验。你已经学会了 Kotlin 的基础知识，并且意识到要充分利用这门语言，你需要不同的系统设计方式。你已经发现在
    Java 中繁琐的一些事情在 Kotlin 中要简单得多，而一些特性，比如检查异常，在 Kotlin 中根本不存在。你不想最终只是用 Kotlin 语法写
    Java 代码。
- en: Perhaps you have skin in the game. Maybe you’re in a technical leadership position,
    or have successfully convinced your team to adopt Kotlin. You might have spent
    some political capital to get Kotlin into the project. Now you need to ensure
    that the transition goes smoothly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你对此非常关注。也许你在技术领导岗位上，或者已成功说服你的团队采用 Kotlin。你可能已经花了一些政治资本将 Kotlin 引入项目中。现在你需要确保过渡顺利进行。
- en: You may be responsible for a Java codebase and want to ensure that introducing
    Kotlin won’t destabilize its existing, business-critical code. Or you may be starting
    a Kotlin project from scratch but realize your design instincts turn more readily
    to Java and objects than to Kotlin and functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你负责一个 Java 代码库，并且希望确保引入 Kotlin 不会使其现有的关键业务代码不稳定。或者你正在从零开始启动一个 Kotlin 项目，但意识到你的设计直觉更容易转向
    Java 和对象，而不是 Kotlin 和函数。
- en: If this is you, as it was us, then you’ve come to the right place. This book
    will help you adapt your thinking and designs to take advantage of Kotlin. That’s
    not enough, though, because you have existing code that you need to maintain and
    enhance. So we also show how to migrate that code from Java to Kotlin syntax,
    and from Java to Kotlin thinking, incrementally and safely, using the automated
    refactoring tools built into the IntelliJ IDE.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您和我们一样，正处于这种情况，那么您来对地方了。本书将帮助您调整思维和设计，以利用Kotlin的优势。然而，仅此还不够，因为您有现有的代码需要维护和增强。因此，我们还展示了如何使用内置于IntelliJ
    IDE的自动重构工具，逐步安全地从Java迁移到Kotlin语法和Kotlin思维。
- en: How This Book Is Organized
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的组织方式
- en: This book is about how to transition from Java to Kotlin, mainly focused on
    code but touching on projects and organizations. Each chapter addresses an aspect
    of this transition, looking at some aspect of typical Java projects that can be
    improved on the journey. They are named in the pattern *Java Way* to *Kotlin Way*,
    where we recommend that you prefer the latter over the former. Maybe Kotlin makes
    easier an approach that was difficult in Java, or Kotlin discourages an approach
    that is common in Java to guide design in a direction that is less error-prone,
    more concise, and more tool-friendly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论的是如何从Java过渡到Kotlin，主要集中在代码上，但也涉及到项目和组织。每章都涉及此过渡的一个方面，探讨了一些典型Java项目的方面，在这个过程中可以改进。它们以*Java
    Way* to *Kotlin Way*的模式命名，我们建议您更喜欢后者而不是前者。也许Kotlin使得一种在Java中困难的方法更容易，或者Kotlin阻止了一个在Java中常见的方法，以指导设计朝着更少出错、更简洁和更易于工具处理的方向发展。
- en: We don’t just *recommend* you adopt the Kotlin way though; the chapters also
    show how to make the transformation. Not by just rewriting the Java, but by gradually
    refactoring it to Kotlin it in a way that is safe and allows us to maintain a
    mixed language codebase.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅*建议*您采用Kotlin的方式；章节还展示了如何进行转换。不是简单地重写Java，而是通过逐步重构它到Kotlin的方式，这样做是安全的，并且允许我们维护混合语言的代码库。
- en: How Did We Choose the Topics?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何选择这些主题的？
- en: We began by analyzing Java and Kotlin developers’ use of their respective languages
    and conducting interviews to identify areas of difference and confusion. This
    was backed by a machine learning analysis of 33,459 open source Java and Kotlin
    codebases. These identified candidates that we labeled in the thing-to-another-thing
    form before ranking them according to frequency and developer-pain-quotient in
    order to establish which should make the cut. Finally, we ordered the surviving
    topics by…
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先分析了Java和Kotlin开发者对各自语言的使用，并进行了采访，以确定差异和混淆的领域。这得到了对33,459个开源Java和Kotlin代码库的机器学习分析的支持。这些被标记为一种到另一种形式的候选项，然后根据频率和开发者痛苦指数对它们进行了排名，以确定哪些应该被选中。最后，我们按照…
- en: …it’s no good, we can’t lie to you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: …没错，我们不能对您说谎。
- en: The truth is that we started by choosing topics that we wanted to write about,
    and that we felt would be interesting and informative. [Chapter 15, *Encapsulated
    Collections to Type Aliases*](ch15.html#encapsulated-collections-to-typealiases),
    [Chapter 9, *Multi- to Single-Expression Functions*](ch09.html#multi-to-single-expression-functions),
    and [Chapter 20, *Performing I/O to Passing Data*](ch20.html#performing-io-to-passing-data)
    are typical of these chapters. We also looked for places where the grain of Kotlin
    and Java differ significantly, because those were the places where we found we
    learned most by asking why they were different. This led to chapters like [Chapter 4,
    *Optional to Nullable*](ch04.html#optional-to-nullable), [Chapter 6, *Java to
    Kotlin Collections*](ch06.html#java-to-kotlin-collections), and [Chapter 8, *Static
    Methods to Top-Level Functions*](ch08.html#static-methods-to-top-level-functions).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是我们开始选择我们想写的主题，并且我们认为这些主题将是有趣且富有信息的。[第15章，*封装集合到类型别名*](ch15.html#encapsulated-collections-to-typealiases)，[第9章，*多到单表达式函数*](ch09.html#multi-to-single-expression-functions)，和[第20章，*执行I/O到传递数据*](ch20.html#performing-io-to-passing-data)是这些章节的典型代表。我们还寻找Kotlin和Java的谷粒明显不同的地方，因为这些地方是我们通过问为什么学到最多的地方。这导致了像[第4章，*Optional到Nullable*](ch04.html#optional-to-nullable)，[第6章，*Java到Kotlin集合*](ch06.html#java-to-kotlin-collections)，和[第8章，*静态方法到顶层函数*](ch08.html#static-methods-to-top-level-functions)这样的章节的产生。
- en: As we wrote those chapters, other topics presented themselves and were added
    to the list. In particular, as we wrote the refactoring steps for a chapter, we
    often found ourselves making changes to code that we felt deserved their own chapter.
    [Chapter 13, *Streams to Iterables to Sequences*](ch13.html#streams-to-sequences),
    [Chapter 10, *Functions to Extension Functions*](ch10.html#functions-to-extension-functions),
    and [Chapter 11, *Methods to Properties*](ch11.html#methods-to-properties) are
    examples of these.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们写这些章节时，其他主题也呈现出来并被添加到列表中。特别是在为某章节写重构步骤时，我们经常发现自己在修改代码，觉得这些修改值得成为独立章节。[第13章，《从流到可迭代对象到序列》](ch13.html#streams-to-sequences)，[第10章，《函数到扩展函数》](ch10.html#functions-to-extension-functions)，以及[第11章，《方法到属性》](ch11.html#methods-to-properties)就是这些例子。
- en: 'The result of this process is by no means exhaustive. If you have already skimmed
    the table of contents or index, you will find important topics unaddressed. Take
    co-routines for example: this paragraph is the only reference to this huge subject,
    because we have found that they haven’t changed the way that we write server-side
    code, so we didn’t want to write about them. There are also topics that we would
    like to have covered if only we had space and time, including: builders, domain-specific
    languages, reflection, dependency injection frameworks, transactions…the list
    goes on!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的结果绝不是穷尽的。如果你已经浏览过目录或索引，会发现一些重要的主题未被涵盖。以协程为例：这段话是对这个重要主题唯一的提及，因为我们发现它们并没有改变我们编写服务器端代码的方式，所以我们不打算写它们。还有一些主题，如果有空间和时间的话，我们本来也想涵盖，包括：构建器、领域特定语言、反射、依赖注入框架、事务……清单可以继续列下去！
- en: We hope that what we *have* written about is interesting to you. It is largely
    a book of tactics rather than strategies, concentrating on the small battles that
    we can win from our place in the trenches, rather than what might be achieved
    by directing whole divisions. As larger themes emerge, we will try to connect
    them, though, and to bring things together in the final chapter, [Chapter 23,
    *Continuing the Journey*](ch23.html#continuing-the-journey), where we talk about
    what we have learned during the writing process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们所写的内容能够引起您的兴趣。这本书主要是战术书而非战略书，侧重于我们可以在战壕里赢得的小战役，而不是整个师的指挥下可能取得的成就。随着更大的主题逐渐显现，我们会尝试将它们联系起来，并在最终章节[第23章，《继续旅程》](ch23.html#continuing-the-journey)中汇聚一切，讨论我们在写作过程中学到的东西。
- en: Complexity
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂性
- en: How should we judge the internal quality of our software? Assuming that it does
    what our customers want or need it to do, how can we compare two potential implementations,
    or decide whether a change makes one better or worse? The answer that your authors
    choose is complexity. Other things being equal, we favor simple designs that yield
    predictable behavior.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该如何评价软件的内部质量呢？假设它做到了我们的客户希望或需要的功能，我们怎样比较两种潜在的实现，或者决定一个变更是使其更好还是更差？你们作者选择的答案是复杂性。其他条件相同的情况下，我们更青睐于能够产生可预测行为的简单设计。
- en: Of course to some extent, simplicity and complexity are in the eye of the beholder.
    Your authors do have slightly different personal preferences and so sometimes
    disagree over whether one implementation or another is better. Where that happens,
    we sometimes explore the alternatives in the relevant chapter. However, we do
    both have a shared belief in the power of functional programming to reduce the
    complexity of our systems, especially when combined with object-oriented (OO)
    message passing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在某种程度上，简单和复杂是取决于观察者的视角。我们的作者确实有稍微不同的个人偏好，因此有时会对某种实现方式的优劣持不同意见。在这种情况下，我们有时会在相关章节中探讨替代方案。然而，我们都坚信函数式编程结合面向对象的消息传递能够降低系统复杂性的强大威力。
- en: Java has been moving in this direction over the years. Scala ran toward functional
    programming but away from OO. We find that the grain of Kotlin lets us mix functional
    and object programming in a way that reduces complexity and brings out the best
    in mere mortal developers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Java一直朝这个方向发展。Scala朝着函数式编程迈进，但远离面向对象。我们发现Kotlin的特性让我们能够以一种方式混合函数式和面向对象编程，从而降低复杂性并发挥普通开发者的最佳潜力。
- en: Perfect Code
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完美代码
- en: On the subject of mere mortals, we should address code quality. It is sorely
    tempting to aim for perfection when committing code to a book. We know that you
    will be judging us by the code here, and like many developers, a great deal of
    our own self-worth is tied up in the quality of the work we produce.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we are engineers not artists. Our job is to balance scope,
    schedule, and cost for our customers. No one but us really cares about the quality
    of the code except when it affects one of these three higher values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: So in our examples, we have tried to show realistic production code. The starting
    points are sometimes not as good as we might like; we are, after all, trying to
    show ways of improving them. Often refactorings will make things worse before
    they get better, so definitely don’t judge us by code in the middle of a chapter.
    By the end of a chapter, our aim is to have code that is good enough, but not
    so perfect that we could be accused of wasting our clients’ money.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: That said, we have a policy of applying cost-effective changes to tidy up, even
    once we have covered the topic we set out to illustrate, and more than once we
    have invented a topic, and written a chapter just to leave the code in a state
    that we’re happy with. In the end, we are artists as well as engineers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Code Formatting
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our code follows (our interpretation of) the standard coding conventions of
    Java and Kotlin where possible.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The practical line length for printed code samples is much shorter than the
    120 characters we usually use in an IDE these days, so we have had to split lines
    more often than usual to make the code fit in the page width. Our production code
    might have four or five parameters or arguments on a line; in this book we will
    often only have one. Through formatting the examples for the page, we have come
    to like the more vertical style. We find that Kotlin naturally seems to want to
    take more vertical space than Java, but even Java readability seems improved by
    shorter lines, more breaks, and more visual alignment. Certainly scrolling sideways
    is almost as inconvenient in an IDE as in a book, and our pairing sessions are
    improved by less scrolling and more side-by-side windows. One line per parameter
    also greatly improves diffs between code versions. We hope that at the very least
    you don’t find it too painful to read, and if you don’t, then try it for your
    own code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'We will sometimes hide code that isn’t relevant to the discussion. A line that
    starts with an ellipsis of three dots indicates that we have omitted some code
    for clarity or brevity. For example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Conventions Used in This Book
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一个提示或建议。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: This element signifies a general note.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示一般说明。
- en: Warning
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: This element indicates a warning or caution.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: 'Most of the code examples in the book (the ones from the refactoring sections)
    can be accessed online on GitHub. The reference is immediately after the code,
    like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大部分代码示例（来自重构部分的示例）都可以在线访问GitHub。参考文献立即在代码后面，像这样：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Example 0.1 [table-reader.1:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=0.1&show=file)
    [(diff)](https://java-to-kotlin.dev/code.html?ref=0.1&show=diff)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 0.1 [table-reader.1:src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt]](https://java-to-kotlin.dev/code.html?ref=0.1&show=file)
    [(差异)](https://java-to-kotlin.dev/code.html?ref=0.1&show=diff)'
- en: If you are reading this on a device, the reference should be a hyperlink to
    that version of the file on GitHub. On real paper, you can click all you like;
    nothing will happen, sorry. But if you take the example number, in this case *0.1*,
    and type it into a [form on the book’s website](https://java-to-kotlin.dev/code.html),
    it will show you links that take you to the same place.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在设备上阅读本书，则引用应该是指向GitHub上该版本文件的超链接。在真正的纸张上，您可以随心所欲地点击；但是什么也不会发生，抱歉。但是，如果您取得示例编号，例如在这种情况下是*0.1*，并将其输入到[本书网站上的表单](https://java-to-kotlin.dev/code.html)，它会显示带您到同一位置的链接。
- en: In Git, the different code examples (these sometimes span multiple chapters)
    evolve in separate branches. The steps are tagged—*table-reader.1* is the tag
    in this case. The GitHub link is to code with that tag, so you can view the file
    shown (*src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt* here)
    and the others in the example at that version. You can also select other tags
    to see the different versions, and different branches to see different examples.
    For quicker navigation, you can clone the repository, open it in IntelliJ, and
    use the Git tool window to switch branches and versions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，不同的代码示例（有时跨越多个章节）会在单独的分支上演变。这些步骤都被标记了，*table-reader.1*就是这种情况下的标记。GitHub链接指向了具有该标记的代码，因此您可以查看显示的文件（此处为*src/test/java/travelator/tablereader/TableReaderAcceptanceTests.kt*）以及该版本中的其他示例。您还可以选择其他标签以查看不同的版本，以及选择不同的分支以查看不同的示例。为了更快地导航，您可以克隆存储库，打开它在IntelliJ中，并使用Git工具窗口切换分支和版本。
- en: Warning
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: The code examples are not real! The codebase builds and passes its tests, but
    it is fictional. There are places where the examples don’t join up properly, and
    others where if you peek behind the curtain you will see us wiggling the levers.
    We have tried to be honest, but prefer to ship!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例并不是真实的！代码库可以构建并通过测试，但它是虚构的。有些地方示例不正确地连接起来，有些地方如果您窥视幕后，您会看到我们在摇晃杆杆。我们试图保持诚实，但更愿意发货！
- en: If you have a technical question or a problem using the code examples, visit
    [the book’s website](https://java-to-kotlin.dev) or email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有技术问题或者在使用代码示例时遇到问题，请访问[本书网站](https://java-to-kotlin.dev)或发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作任务。一般情况下，如果本书提供了示例代码，您可以在自己的程序和文档中使用它。除非您复制了代码的大部分内容，否则您无需联系我们以获得许可。例如，编写一个使用本书中几个代码块的程序不需要许可。出售或分发O'Reilly图书的示例代码需要许可。通过引用本书并引用示例代码来回答问题不需要许可。将本书中大量示例代码合并到您产品的文档中需要许可。
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Java to Kotlin*
    by Duncan McGregor and Nat Pryce (O’Reilly). Copyright 2021 Duncan McGregor and
    Nat Pryce, 978-1-492-08227-9.”'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢，但通常不要求署名。署名通常包括标题、作者、出版商和ISBN号。例如：“*Java to Kotlin* by Duncan McGregor
    and Nat Pryce (O’Reilly). Copyright 2021 Duncan McGregor and Nat Pryce, 978-1-492-08227-9。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您使用的代码示例超出了公平使用范围或上述授权，请随时通过[*permissions@oreilly.com*](mailto:permissions@oreilly.com)联系我们。
- en: O’Reilly Online Learning
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly 在线学习
- en: Note
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年来，[*O’Reilly Media*](http://oreilly.com) 提供技术和商业培训、知识和洞察，帮助企业成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过图书、文章、会议和我们的在线学习平台分享他们的知识和专业知识。O’Reilly 的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境以及来自
    O’Reilly 和其他 200 多家出版商的大量文本和视频。有关更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送至出版商：
- en: O’Reilly Media, Inc.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sebastopol, CA 95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（在美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/java-to-kotlin*](https://oreil.ly/java-to-kotlin).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为本书设有一个网页，列出勘误、示例和任何额外信息。您可以访问此页面[*https://oreil.ly/java-to-kotlin*](https://oreil.ly/java-to-kotlin)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件 [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) 提出关于本书的评论或技术问题。
- en: For news and information about our books and courses, visit [*http://www.oreilly.com*](http://www.oreilly.com).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的图书和课程的新闻和信息，请访问[*http://www.oreilly.com*](http://www.oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Facebook 上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Twitter 上关注我们：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YouTube 上观看我们：[*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: Thank you to Hadi Hariri for suggesting to O’Reilly that we should write a book,
    and to Zan McQuade for believing him. Thank you to our editor Sarah Grey, who
    had to live with the consequences, and Kerin Forsyth and Kate Galloway for tidying
    everything up and actually getting it published.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 Hadi Hariri 建议 O’Reilly 我们应该写一本书，以及 Zan McQuade 相信他。感谢我们的编辑 Sarah Grey，她不得不忍受后果，以及
    Kerin Forsyth 和 Kate Galloway 整理一切并实际将其出版。
- en: Many friends and colleagues, and some lovely strangers, reviewed drafts ranging
    from early and uncoordinated to tantalizingly nearly complete. Thank you to Yana
    Afanasyeva, Jack Bolles, David Denton, Bruce Eckel, Dmitry Kandalov, Kevin Peel,
    James Richardson, Ivan Sanchez, Jordan Stewart, Robert Stoll, Christoph Sturm,
    Łukasz Wycisk, and Daniel Zappold and to our technical reviewers, Uberto Barbini,
    James Harmon, Mark Maynard, and Augusto Rodriguez. We really appreciate all your
    suggestions, encouragement, and candor.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 许多朋友和同事，以及一些可爱的陌生人，审阅了从早期的不协调到令人心驰神往的几乎完成的草稿。感谢 Yana Afanasyeva、Jack Bolles、David
    Denton、Bruce Eckel、Dmitry Kandalov、Kevin Peel、James Richardson、Ivan Sanchez、Jordan
    Stewart、Robert Stoll、Christoph Sturm、Łukasz Wycisk 和 Daniel Zappold，以及我们的技术审阅者
    Uberto Barbini、James Harmon、Mark Maynard 和 Augusto Rodriguez。我们非常感谢你们的建议、鼓励和坦率。
- en: Extreme Programming revolutionized the way that write software—we all owe a
    debt of gratitude to Ward Cunningham and Kent Beck. Thank you also to Martin Fowler,
    without whom this book might not have been written. In the UK the eXtreme Tuesday
    Club has been innovating on these ideas since 1999, and has attracted a cabal
    of developers. We are lucky to have worked with, and learned from, many talented
    members of this group. If you have a problem, if no one else can help, and if
    you can find them, maybe you can hire them.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Duncan’s Bit
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I don’t think my wife will ever understand what I do for a living, and there’s
    no chance that she will read the rest of this book, but she will probably get
    this far. So thank you, Jo McGregor, for putting up with me writing rather than
    spending time with you, and talking about writing when I was spending time with
    you. I couldn’t have done it without your support and encouragement. Thank you
    also to our two wonderful sons, Callum and Alistair, who make us so proud.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Thank you to Vickie Kennish for taking a keen interest in becoming the mother
    of an author, checking on progress during our COVID lockdown walks. My late father,
    John, would I’m sure have played it more casual, but be bragging about the book
    to his friends. Also gone but not forgotten is our beautiful cat Sweet Pea, who
    kept me company through most of the writing but died just before it was finished.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The friendship and support of Robin Helliwell has been a constant throughout
    my adult life. Likewise, my sister Lucy Seal, and many other family members too
    numerous to list individually. In my professional life, in addition to those who
    gave feedback, thank you to Alan Dyke, Richard Care, and Gareth Sylvester-Bradley,
    all influential and supportive beyond the call of duty.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Nat’s Bit
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When I told my wife, Lamaan, that I was planning to write another book, her
    immediate reaction was not one of horror. For that, and for her constant encouragement,
    I owe her many thanks.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Hat tip to my sister, Lois Pryce, and brother-in-law, Austin Vince, whose motorcycle
    journeys, books, and films inspired the overland travel planning application used
    in the worked example code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: And thanks to Oliver and Alex. Now that the book is finished, I am once again
    available for consultancy in music and games programming.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
