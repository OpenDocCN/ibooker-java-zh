["```java\n./mvnw quarkus:add-extension -Dextensions=\"jdbc-mariadb\"\n```", "```java\nquarkus.datasource.url=jdbc::mariadb://localhost:3306/test\nquarkus.datasource.driver=org.mariadb.jdbc.Driver\nquarkus.datasource.username=username-default\nquarkus.datasource.min-size=3\nquarkus.datasource.max-size=13\n```", "```java\n@Inject\nDataSource defaultDataSource;\n```", "```java\nquarkus.datasource.driver=org.h2.Driver\nquarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\nquarkus.datasource.username=username-default\nquarkus.datasource.min-size=3\nquarkus.datasource.max-size=13\n\nquarkus.datasource.users.driver=org.h2.Driver\nquarkus.datasource.users.url=jdbc:h2:tcp://localhost/mem:users\nquarkus.datasource.users.username=username1\nquarkus.datasource.users.min-size=1\nquarkus.datasource.users.max-size=11\n\nquarkus.datasource.inventory.driver=org.h2.Driver\nquarkus.datasource.inventory.url=jdbc:h2:tcp://localhost/mem:inventory\nquarkus.datasource.inventory.username=username2\nquarkus.datasource.inventory.min-size=2\nquarkus.datasource.inventory.max-size=12\n```", "```java\n@Inject\nAgroalDataSource defaultDataSource;\n\n@Inject\n@DataSource(\"users\")\nAgroalDataSource dataSource1;\n\n@Inject\n@DataSource(\"inventory\")\nAgroalDataSource dataSource2;\n```", "```java\npackage org.acme.transaction;\n\nimport javax.inject.Inject;\nimport javax.transaction.Transactional;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/tx\")\n@Transactional\npublic class Transact {\n}\n```", "```java\npackage org.acme.transaction;\n\nimport javax.inject.Inject;\nimport javax.transaction.Transactional;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/tx\")\n@Transactional\npublic class Transact {\n    @Inject\n    NoTransact noTx;\n\n    @GET\n    @Path(\"/no\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hi() {\n        return noTx.word();\n    }\n}\n```", "```java\npackage org.acme.transaction;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.transaction.Transactional;\n\nimport static javax.transaction.Transactional.TxType.NEVER;\n\n@ApplicationScoped\npublic class NoTransact {\n    @Transactional(NEVER)\n    public String word() {\n        return \"Hi\";\n    }\n}\n```", "```java\n    @POST\n    public Response newLibrary(Library library) {\n        library.persist();\n        return Response.created(URI.create(\"/library/\" + library.encodedName()))\n                .entity(library).build();\n    }\n```", "```java\npackage org.acme.panache;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\n\nimport io.quarkus.hibernate.orm.panache.PanacheEntity;\nimport io.quarkus.panache.common.Parameters;\n\n@Entity\npublic class Library extends PanacheEntity {\n    public String name;\n\n    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true,\n               mappedBy = \"library\")\n    public List<Inventory> inventory;\n    public String encodedName() {\n        String result;\n\n        try {\n            result = URLEncoder.encode(name, \"UTF-8\")\n                    .replaceAll(\"\\\\+\", \"%20\")\n                    .replaceAll(\"\\\\%21\", \"!\")\n                    .replaceAll(\"\\\\%27\", \"'\")\n                    .replaceAll(\"\\\\%28\", \"(\")\n                    .replaceAll(\"\\\\%29\", \")\")\n                    .replaceAll(\"\\\\%7E\", \"~\");\n        } catch (UnsupportedEncodingException e) {\n            result = name;\n        }\n\n        return result;\n    }\n}\n```", "```java\n    @GET\n    public List<Book> getAllBooks() {\n        return Book.listAll();\n    }\n```", "```java\n    @GET\n    @Path(\"/byId/{id}\")\n    public Book getBookById(@PathParam(value = \"id\") Long id) {\n        Book b = Book.findById(id);\n        return b;\n    }\n```", "```java\n    public static Book findByTitle(String title) {\n        return find(\"title\", title).firstResult();\n    }\n\n    public static List<Book> findByAuthor(String author) {\n        return list(\"author\", author);\n    }\n\n    public static List<Book> findByIsbn(String isbn) {\n        return list(\"isbn\", isbn);\n    }\n```", "```java\n    public static Library findByName(String name) {\n        return Library\n                .find(\"SELECT l FROM Library l \" +\n                      \"LEFT JOIN fetch l.inventory \" +\n                      \"WHERE l.name = :name \",\n                        Parameters.with(\"name\", name)).firstResult();\n    }\n```", "```java\nBook.count()\nBook.count(\"WHERE title = ?\", )\n```", "```java\nPanacheQuery<Book> authors = Book.find(\"author\", author);\nauthors.page(Page.of(3, 25)).list();                        ![1](Images/1.png)\n\nauthors.page(Page.sizeOf(10)).list();\n```", "```java\nBook.streamAll();\n...\nBook.stream(\"author\", \"Alex Soto\");\n```", "```java\npackage my.app.integrationtests.db;\n\nimport io.quarkus.test.common.QuarkusTestResource;\nimport io.quarkus.test.h2.H2DatabaseTestResource;\n\n@QuarkusTestResource(H2DatabaseTestResource.class)\npublic class TestResources {\n}\n```", "```java\nquarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test\nquarkus.datasource.driver=org.h2.Driver\n```", "```java\npackage org.acme.panache;\n\nimport java.util.Collections;\n\nimport javax.enterprise.context.ApplicationScoped;\n\nimport io.quarkus.hibernate.orm.panache.PanacheQuery;\nimport io.quarkus.hibernate.orm.panache.PanacheRepository;\nimport io.quarkus.panache.common.Parameters;\nimport io.quarkus.panache.common.Sort;\n\n@ApplicationScoped\npublic class LibraryRepository implements PanacheRepository<Library> {\n    public Library findByName(String name) {\n        return find(\"SELECT l FROM Library l \" +\n                    \"left join fetch l.inventory where l.name = :name \",\n                Parameters.with(\"name\", name)).firstResult();\n    }\n\n    @Override\n    public PanacheQuery<Library> findAll() {\n        return find(\"from Library l left join fetch l.inventory\");\n    }\n\n    @Override\n    public PanacheQuery<Library> findAll(Sort sort) {\n        return find(\"from Library l left join fetch l.inventory\",\n                sort, Collections.emptyMap());\n    }\n}\n```", "```java\n <dependency>\n     <groupId>software.amazon.awssdk</groupId>\n     <artifactId>url-connection-client</artifactId>\n </dependency>\n```", "```java\n <dependency>\n     <groupId>software.amazon.awssdk</groupId>\n     <artifactId>apache-client</artifactId>\n     <exclusions>    ![1](Images/1.png)\n         <exclusion>\n             <groupId>commons-logging</groupId>\n             <artifactId>commons-logging</artifactId>\n         </exclusion>\n     </exclusions>\n </dependency>\n```", "```java\n quarkus.dynamodb.sync-client.type=apache\n```", "```java\nquarkus.dynamodb.endpoint-override=http://localhost:8000 ![1](Images/1.png)\nquarkus.dynamodb.aws.region=eu-central-1 ![2](Images/2.png)\nquarkus.dynamodb.aws.credentials.type=static ![3](Images/3.png)\nquarkus.dynamodb.aws.credentials.static-provider.access-key-id=test-key\nquarkus.dynamodb.aws.credentials.static-provider.secret-access-key=test-secret\n```", "```java\npackage org.acme.dynamodb;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\nimport software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n\n@ApplicationScoped\npublic class BookSyncService extends AbstractBookService {\n    @Inject\n    DynamoDbClient dynamoDbClient;\n\n    public List<Book> findAll() {\n        return dynamoDbClient.scanPaginator(scanRequest()).items().stream()\n                .map(Book::from)\n                .collect(Collectors.toList());\n    }\n\n    public List<Book> add(Book b) {\n        dynamoDbClient.putItem(putRequest(b));\n        return findAll();\n    }\n\n    public Book get(String isbn) {\n        return Book.from(dynamoDbClient.getItem(getRequest(isbn)).item());\n    }\n}\n```", "```java\npackage org.acme.dynamodb;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\nimport software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\nimport software.amazon.awssdk.services.dynamodb.model.ScanRequest;\n\npublic abstract class AbstractBookService {\n\n    public final static String BOOK_TITLE = \"title\";\n    public final static String BOOK_ISBN = \"isbn\";\n    public final static String BOOK_AUTHOR = \"author\";\n\n    public String getTableName() {\n        return \"QuarkusBook\";\n    }\n\n    protected ScanRequest scanRequest() {\n        return ScanRequest.builder().tableName(getTableName()).build();\n    }\n\n    protected PutItemRequest putRequest(Book book) {\n        Map<String, AttributeValue> item = new HashMap<>();\n        item.put(BOOK_ISBN, AttributeValue.builder()\n                            .s(book.getIsbn()).build());\n        item.put(BOOK_AUTHOR, AttributeValue.builder()\n                              .s(book.getAuthor()).build());\n        item.put(BOOK_TITLE, AttributeValue.builder()\n                             .s(book.getTitle()).build());\n\n        return PutItemRequest.builder()\n                .tableName(getTableName())\n                .item(item)\n                .build();\n    }\n\n    protected GetItemRequest getRequest(String isbn) {\n        Map<String, AttributeValue> key = new HashMap<>();\n        key.put(BOOK_ISBN, AttributeValue.builder().s(isbn).build());\n\n        return GetItemRequest.builder()\n                .tableName(getTableName())\n                .key(key)\n                .build();\n    }\n}\n```", "```java\npackage org.acme.dynamodb;\n\nimport java.util.Map;\nimport java.util.Objects;\n\nimport io.quarkus.runtime.annotations.RegisterForReflection;\nimport software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n\n@RegisterForReflection      ![1](Images/1.png)\npublic class Book {\n    private String isbn;\n    private String author;\n    private String title;\n\n    public Book() {         ![2](Images/2.png)\n    }\n\n    public static Book from(Map<String, AttributeValue> item) {\n        Book b = new Book();\n        if (item != null && !item.isEmpty()) {\n            b.setAuthor(item.get(AbstractBookService.BOOK_AUTHOR).s());\n            b.setIsbn(item.get(AbstractBookService.BOOK_ISBN).s());\n            b.setTitle(item.get(AbstractBookService.BOOK_TITLE).s());\n        }\n        return b;\n    }\n\n    public String getIsbn() {\n        return isbn;\n    }\n\n    public void setIsbn(String isbn) {\n        this.isbn = isbn;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Book book = (Book) o;\n        return Objects.equals(isbn, book.isbn) &&\n                Objects.equals(author, book.author) &&\n                Objects.equals(title, book.title);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(isbn, author, title);\n    }\n}\n```", "```java\nquarkus.mongodb.connection-string = mongodb://localhost:27017\n```", "```java\npackage org.acme.mongodb;\n\nimport java.util.HashSet;\nimport java.util.Objects;\nimport java.util.Set;\n\nimport org.bson.Document;\n\npublic class Book {\n    public String id;\n    public String title;\n    public String isbn;\n    public Set<String> authors;\n\n    // Needed for JSON-B\n    public Book() {}\n\n    public Book(String title) {\n        this.title = title;\n    }\n\n    public Book(String title, String isbn) {\n        this.title = title;\n        this.isbn = isbn;\n    }\n\n    public Book(String title, String isbn, Set<String> authors) {\n        this.title = title;\n        this.isbn = isbn;\n        this.authors = authors;\n    }\n\n    public Book(String id, String title, String isbn, Set<String> authors) {\n        this.id = id;\n        this.title = title;\n        this.isbn = isbn;\n        this.authors = authors;\n    }\n\n    public static Book from(Document doc) {\n        return new Book(doc.getString(\"id\"),\n                        doc.getString(\"title\"),\n                        doc.getString(\"isbn\"),\n                        new HashSet<>(doc.getList(\"authors\", String.class)));\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Book book = (Book) o;\n        return Objects.equals(id, book.id) &&\n                Objects.equals(title, book.title) &&\n                Objects.equals(isbn, book.isbn) &&\n                Objects.equals(authors, book.authors);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, title, isbn, authors);\n    }\n}\n```", "```java\npackage org.acme.mongodb;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\n\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.MongoCursor;\nimport com.mongodb.client.model.Filters;\nimport org.bson.Document;\n\n@ApplicationScoped\npublic class BookService {\n\n    @Inject\n    MongoClient mongoClient;\n\n    public List<Book> list() {\n        List<Book> list = new ArrayList<>();\n\n        try (MongoCursor<Document> cursor = getCollection()\n                                            .find()\n                                            .iterator()) {\n            cursor.forEachRemaining(doc -> list.add(Book.from(doc)));\n        }\n\n        return list;\n    }\n\n    public Book findSingle(String isbn) {\n        Document document = Objects.requireNonNull(getCollection()\n                .find(Filters.eq(\"isbn\", isbn))\n                .limit(1).first());\n        return Book.from(document);\n    }\n\n    public void add(Book b) {\n        Document doc = new Document()\n                .append(\"isbn\", b.isbn)\n                .append(\"title\", b.title)\n                .append(\"authors\", b.authors);\n        getCollection().insertOne(doc);\n    }\n\n    private MongoCollection<Document> getCollection() {\n        return mongoClient.getDatabase(\"book\").getCollection(\"book\");\n    }\n}\n```", "```java\npackage org.acme.mongodb;\n\nimport java.util.List;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\n@Path(\"/book\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class BookResource {\n    @Inject\n    BookService service;\n\n    @GET\n    public List<Book> getAll() {\n        return service.list();\n    }\n\n    @GET\n    @Path(\"{isbn}\")\n    public Book getSingle(@PathParam(\"isbn\") String isbn) {\n        return service.findSingle(isbn);\n    }\n\n    @POST\n    public Response add(Book b) {\n        service.add(b);\n        return Response.status(Response.Status.CREATED)\n                .entity(service.list()).build();\n    }\n}\n```", "```java\npackage org.acme.mongodb.panache;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport io.quarkus.mongodb.panache.MongoEntity;\nimport io.quarkus.mongodb.panache.PanacheMongoEntity;\nimport org.bson.codecs.pojo.annotations.BsonProperty;\n\n@MongoEntity(collection = \"book\", database = \"book\")    ![1](Images/1.png)\npublic class Book extends PanacheMongoEntity {          ![2](Images/2.png)\n    public String title;\n    public String isbn;\n    public List<String> authors;\n\n    @BsonProperty(\"pubDate\")                            ![3](Images/3.png)\n    public LocalDate publishDate;\n\n    public static Book findByIsbn(String isbn) {\n        return find(\"isbn\", isbn).firstResult(); ![4](Images/4.png)\n    }\n\n    public static List<Book> findPublishedOn(LocalDate date) {\n        return list(\"pubDate\", date);\n    }\n\n}\n```", "```java\nimport io.quarkus.mongodb.panache.ProjectionFor;\n\n@ProjectionFor(Book.class)\npublic class BookTitle {\n    public String title;\n}\n\nPanacheQuery<BookTitle> query = Book.find(\"isbn\", \"978-1-492-06265-3\")\n                                    .project(BookTitle.class);\n```", "```java\npackage org.acme.neo4j;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.StringJoiner;\n\nimport org.neo4j.driver.Values;\nimport org.neo4j.driver.types.Node;\n\npublic class Book {\n  public Long id;\n  public String title;\n  public String isbn;\n  public Set<String> authors;\n\n  // Needed for JSON-B\n  public Book() {}\n\n  public Book(String title) {\n    this.title = title;\n  }\n\n  public Book(String title, String isbn) {\n    this.title = title;\n    this.isbn = isbn;\n  }\n\n  public Book(String title, String isbn, Set<String> authors) {\n    this.title = title;\n    this.isbn = isbn;\n    this.authors = authors;\n  }\n\n  public Book(Long id, String title, String isbn, Set<String> authors) {\n    this.id = id;\n    this.title = title;\n    this.isbn = isbn;\n    this.authors = authors;\n  }\n\n  public static Book from(Node node) {\n    return new Book(node.id(),\n        node.get(\"title\").asString(),\n        node.get(\"isbn\").asString(),\n        new HashSet<>(\n          node.get(\"authors\")\n          .asList(Values.ofString())\n          )\n        );\n  }\n\n  public String toJson() {\n    final StringJoiner authorString =\n      new StringJoiner(\"\\\",\\\"\", \"[\\\"\", \"\\\"]\");\n\n    authors.forEach(authorString::add);\n\n    return \"{\" +\n      \"\\\"title\\\":\\\"\" + this.title + \"\\\",\" +\n      \"\\\"isbn\\\":\\\"\" + this.isbn + \"\\\",\" +\n      \"\\\"authors\\\":\" + authorString.toString() +\n      \"}\";\n  }\n}\n```", "```java\n@Inject\nDriver driver;\n```", "```java\n@GET\npublic CompletionStage<Response> getAll() {\n    AsyncSession session = driver.asyncSession();   ![1](Images/1.png)\n\n    return session\n            .runAsync(\"MATCH (b:Book) RETURN b ORDER BY b.title\")   ![2](Images/2.png)\n            .thenCompose(cursor -> cursor.listAsync(record ->\n                    Book.from(record.get(\"b\").asNode()))) ![3](Images/3.png)\n            .thenCompose(books -> session.\n                    closeAsync().thenApply(signal -> books))  ![4](Images/4.png)\n            .thenApply(Response::ok)    ![5](Images/5.png)\n            .thenApply(Response.ResponseBuilder::build);\n}\n```", "```java\n@POST\npublic CompletionStage<Response> create(Book b) {\n    AsyncSession session = driver.asyncSession();\n    return session\n            .writeTransactionAsync(tx ->\n                    {\n                        String query = \"CREATE (b:Book \" +\n                        \"{title: $title, isbn: $isbn, authors: $authors})\" +\n                        \" RETURN b\";\n                        return tx.runAsync(query,\n                                Values.parameters(\"title\", b.title,\n                                        \"isbn\", b.isbn,\n                                        \"authors\", b.authors))\n                                .thenCompose(ResultCursor::singleAsync);\n                    }\n            )\n            .thenApply(record -> Book.from(record.get(\"b\").asNode()))\n            .thenCompose(persistedBook -> session.closeAsync()\n                    .thenApply(signal -> persistedBook))\n            .thenApply(persistedBook -> Response.created(\n                    URI.create(\"/book/\" + persistedBook.id)).build());\n}\n```", "```java\n@DELETE\n@Path(\"{id}\")\npublic CompletionStage<Response> delete(@PathParam(\"id\") Long id) {\n    AsyncSession session = driver.asyncSession();\n    return session\n            .writeTransactionAsync(tx -> tx\n                    .runAsync(\"MATCH (b:Book) WHERE id(b) = $id DELETE b\",\n                            Values.parameters(\"id\", id))\n                    .thenCompose(ResultCursor::consumeAsync))\n            .thenCompose(resp -> session.closeAsync())\n            .thenApply(signal -> Response.noContent().build());\n}\n```", "```java\n@GET\n@Path(\"{id}\")\npublic CompletionStage<Response> getById(@PathParam(\"id\") Long id) {\n    AsyncSession session = driver.asyncSession();\n    return session.readTransactionAsync(tx ->\n            tx.runAsync(\"MATCH (b:Book) WHERE id(b) = $id RETURN b\",\n                                Values.parameters(\"id\", id))\n                    .thenCompose(ResultCursor::singleAsync))\n            .handle(((record, err) -> {\n                if (err != null) {\n                    Throwable source = err;\n                    if (err instanceof CompletionException)\n                        source = ((CompletionException) err).getCause();\n                    Response.Status status = Response.Status.\n                                                INTERNAL_SERVER_ERROR;\n                    if (source instanceof NoSuchRecordException)\n                        status = Response.Status.NOT_FOUND;\n\n                    return Response.status(status).build();\n                } else {\n                    return Response.ok(Book.from(record.get(\"b\")\n                                        .asNode())).build();\n                }\n            }))\n            .thenCompose(response -> session.closeAsync()\n                                            .thenApply(signal -> response));\n}\n```", "```java\n@Inject\nFlyway flyway\n```", "```java\n@Inject\n@FlywayDataSource(\"books\")\nFlyway flywayBooks;\n\n@Inject\n@Named(\"flyway_users\")\nFlyway flywayUsers;\n```"]