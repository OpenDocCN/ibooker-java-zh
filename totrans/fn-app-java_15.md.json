["```java\nvar executor = Executors.newFixedThreadPool(10); ![1](assets/1.png)\n\nCallable<Integer> expensiveTask = () -> { ![2](assets/2.png)\n\n    System.out.println(\"(task) start\");\n\n    TimeUnit.SECONDS.sleep(2);\n\n    System.out.println(\"(task) done\");\n\n    return 42;\n};\n\nSystem.out.println(\"(main) before submitting the task\");\n\nvar future = executor.submit(expensiveTask); ![3](assets/3.png)\n\nSystem.out.println(\"(main) after submitting the task\");\n\nvar theAnswer = future.get(); ![4](assets/4.png)\n\nSystem.out.println(\"(main) after the blocking call future.get()\");\n\n// OUTPUT:\n// (main) before submitting the task\n// (task) start\n// (main) after submitting the task\n// ~~ 2 sec delay ~~\n// (task) done\n// (main) after the blocking call future.get()\n```", "```java\n// FUTURE<T>\n\nvar executorService = ForkJoinPool.commonPool();\n\nFuture<?> futureRunnable =\n  executorService.submit(() -> System.out.println(\"not returning a value\"));\n\nFuture<String> futureCallable =\n  executorService.submit(() -> \"Hello, Async World!\");\n\n// COMPLETABLEFUTURE<T>\n\nCompletableFuture<Void> completableFutureRunnable =\n  CompletableFuture.runAsync(() -> System.out.println(\"not returning a value\"));\n\nCompletableFuture<String> completableFutureSupplier =\n  CompletableFuture.supplyAsync(() -> \"Hello, Async World!\");\n```", "```java\n<operation>[Async](argument [, Executor])\n```", "```java\nvar task = CompletableFuture.supplyAsync(() -> this.downloadService.get(url))\n                            .thenApply(this.contentCleaner::clean)\n                            .thenRun(this.storage::save);\n```", "```java\n<operation><restriction>[Async](other, argument [, Executor])\n```", "```java\nCompletableFuture<Integer> future1 = CompletableFuture.supplyAsync(() -> 42); ![1](assets/1.png)\nCompletableFuture<Integer> future2 = CompletableFuture.supplyAsync(() -> 23); ![1](assets/1.png)\n\nBiFunction<Integer, Integer, CompletableFuture<Integer>> task = ![2](assets/2.png)\n  (lhs, rhs) -> CompletableFuture.supplyAsync(() -> lhs + rhs);\n\nCompletableFuture<Integer> combined =\n  future1.thenCombine(future2, task) ![3](assets/3.png)\n         .thenCompose(Function.identity()); ![4](assets/4.png)\n```", "```java\nCompletableFuture<String> notFailed =\n  CompletableFuture.supplyAsync(() -> \"Success!\");\n\nCompletableFuture<String> failed =\n  CompletableFuture.supplyAsync(() -> { throw new RuntimeException(); });\n\n// NO OUTPUT BECAUSE THE PREVIOUS STAGE FAILED\n\nvar rejected = failed.acceptEither(notFailed, System.out::println);\n\n// OUTPUT BECAUSE THE PREVIOUS STAGE COMPLETED NORMALLY\nvar resolved = notFailed.acceptEither(failed, System.out::println);\n// => Success!\n```", "```java\nstatic CompletableFuture<List<T>> eachOf(CompletableFuture<T> cfs...)\n```", "```java\npublic final class CompletableFutures {\n\n  private CompletableFutures() {\n    // SUPPRESS DEFAULT CONSTRUCTOR\n  }\n}\n```", "```java\npublic static <T> CompletableFuture<List<T>> eachOf(CompletableFuture<T>... cfs) {\n\n  return CompletableFuture.allOf(cfs)\n                          .thenApply(???);\n}\n```", "```java\nArrays.stream(cfs)\n```", "```java\nArrays.stream(cfs)\n      .filter(Predicate.not(CompletableFuture::isCompletedExceptionally))\n```", "```java\nArrays.stream(cfs)\n      .filter(Predicate.not(CompletableFuture::isCompletedExceptionally))\n      .map(CompletableFuture::join)\n```", "```java\nArrays.stream(cfs)\n      .filter(Predicate.not(CompletableFuture::isCompletedExceptionally))\n      .map(CompletableFuture::join)\n      .toList();\n```", "```java\npublic final class CompletableFutures {\n\n  private final static Predicate<CompletableFuture<?>> EXCEPTIONALLY = ![1](assets/1.png)\n    Predicate.not(CompletableFuture::isCompletedExceptionally);\n\n  public static <T> CompletableFuture<List<T>> eachOf(CompletableFuture<T>... cfs) {\n\n    Function<Void, List<T>> fn = unused -> ![2](assets/2.png)\n      Arrays.stream(cfs)\n            .filter(Predicate.not(EXCEPTIONALLY))\n            .map(CompletableFuture::join)\n            .toList();\n\n    return CompletableFuture.allOf(cfs) ![3](assets/3.png)\n                            .thenApply(fn);\n  }\n\n  private CompletableFutures() {\n    // SUPPRESS DEFAULT CONSTRUCTOR\n  }\n}\n```", "```java\npublic static\n<T> CompletableFuture<List<T>> bestEffort(CompletableFuture<T>... cfs) {\n\n  Function<Void, List<T>> fn = ...; // no changes to Stream pipeline\n\n  return CompletableFuture.allOf(cfs)\n                          .exceptionally(ex -> null)\n                          .thenApply(fn);\n}\n```", "```java\npublic final class CompletableFutures {\n\n  private final static Predicate<CompletableFuture<?>> EXCEPTIONALLY = ![1](assets/1.png)\n    Predicate.not(CompletableFuture::isCompletedExceptionally);\n\n  private static <T> Function<Void, List<T>>\n                     gatherResultsFn(CompletableFuture<T>... cfs) { ![2](assets/2.png)\n\n    return unused -> Arrays.stream(cfs)\n                      .filter(Predicate.not(EXCEPTIONALLY))\n                      .map(CompletableFuture::join)\n                      .toList();\n  }\n\n  public static <T> CompletableFuture<List<T>> eachOf(CompletableFuture<T>... cfs) { ![3](assets/3.png)\n    return CompletableFuture.allOf(cfs)\n                            .thenApply(gatherResultsFn(cfs));\n  }\n\n  public static <T> CompletableFuture<List<T>> bestEffort(CompletableFuture<T>... cfs) { ![3](assets/3.png)\n    return CompletableFuture.allOf(cfs)\n                            .exceptionally(ex -> null)\n                            .thenApply(gatherResultsFn(cfs));\n  }\n\n  private CompletableFutures() {\n    // SUPPRESS DEFAULT CONSTRUCTOR\n  }\n}\n```", "```java\nCompletableFuture<String> unsettled = new CompletableFuture<>();\n```", "```java\npublic class WeatherService {\n\n  public CompletableFuture<WeatherInfo> check(ZipCode zipCode) {\n    return CompletableFuture.supplyAsync(\n      () -> this.restAPI.getWeatherInfoFor(zipCode)\n    );\n  }\n}\n```", "```java\npublic class WeatherService {\n\n  private Optional<WeatherInfo> cached(ZipCode zipCode) {\n    // ...\n  }\n\n  private WeatherInfo storeInCache(WeatherInfo info) {\n    // ...\n  }\n\n  // ...\n}\n```", "```java\npublic class WeatherService {\n\n  private Optional<WeatherInfo> cacheLookup(ZipCode zipCode) {\n    // ...\n  }\n\n  private WeatherInfo storeInCache(WeatherInfo info) {\n    // ...\n  }\n\n  private CompletableFuture<WeatherInfo> restCall(ZipCode zipCode) {\n\n    Supplier<WeatherInfo> restCall = this.restAPI.getWeatherInfoFor(zipCode);\n\n    return CompletableFuture.supplyAsync(restCall)\n                            .thenApply(this::storeInCache);\n  }\n\n  public CompletableFuture<WeatherInfo> check(ZipCode zipCode) {\n    // ...\n  }\n}\n```", "```java\npublic class WeatherService {\n\n  private Optional<WeatherInfo> cacheLookup(ZipCode zipCode) { ![1](assets/1.png)\n    // ...\n  }\n\n  private WeatherInfo storeInCache(WeatherInfo info) { ![1](assets/1.png)\n    // ...\n  }\n\n  private CompletableFuture<WeatherInfo> restCall(ZipCode zipCode) { ![2](assets/2.png)\n\n    Supplier<WeatherInfo> restCall = () -> this.restAPI.getWeatherInfoFor(zipCode);\n\n    return CompletableFuture.supplyAsync(restCall)\n                            .thenApply(this::storeInCache);\n  }\n\n  public CompletableFuture<WeatherInfo> check(ZipCode zipCode) { ![3](assets/3.png)\n\n    return cacheLookup(zipCode).map(CompletableFuture::completedFuture) ![4](assets/4.png)\n                               .orElseGet(() -> restCall(zipCode)); ![5](assets/5.png)\n  }\n}\n```", "```java\npublic class ImageProcessor {\n\n  public record Task(CompletableFuture<Path> start, ![1](assets/1.png)\n                     CompletableFuture<InputStream> end) {\n    // NO BODY\n  }\n\n  public Task createTask(int maxHeight,\n                         int maxWidth,\n                         boolean keepAspectRatio,\n                         boolean trimWhitespace) {\n\n    var start = new CompletableFuture<Path>(); ![2](assets/2.png)\n\n    var end = unsettled.thenApply(...) ![3](assets/3.png)\n                       .exceptionally(...)\n                       .thenApply(...)\n                       .handle(...);\n\n    return new Task(start, end); ![4](assets/4.png)\n  }\n}\n```", "```java\n// CREATING LAZY TASK\nvar task = this.imageProcessor.createTask(800, 600, false, true);\n\n// RUNNING TASK\nvar path = Path.of(\"a-functional-approach-to-java/cover.png\");\ntask.start().complete(path);\n\n// ACCESSING THE RESULT\nvar processed = task.end().get();\n```"]