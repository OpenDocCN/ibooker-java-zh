["```java\npackage org.acme.quickstart;\n\nimport javax.annotation.security.DenyAll;\nimport javax.annotation.security.PermitAll;\nimport javax.annotation.security.RolesAllowed;\n\nimport io.quarkus.security.Authenticated;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n\n    @GET\n    @Path(\"/secured\")\n    @RolesAllowed(\"Tester\")  ![1](Images/1.png)\n    public String greetingSecured() {}\n\n    @GET\n    @Path(\"/unsecured\")\n    @PermitAll ![2](Images/2.png)\n    public String greetingUnsecured() {}\n\n    @GET\n    @Path(\"/denied\")\n    @DenyAll ![3](Images/3.png)\n    public String greetingDenied() {}\n\n    @GET\n    @Path(\"/authenticated\")\n    @Authenticated ![4](Images/4.png)\n    public String greetingAuthenticated() {}\n}\n```", "```java\n@GET\n@Path(\"/secured\")\n@RolesAllowed(\"Tester\")\npublic String greetingSecured(@Context SecurityContext sec) { ![1](Images/1.png)\n    Principal user = sec.getUserPrincipal(); ![2](Images/2.png)\n    String name = user != null ? user.getName() : \"anonymous\";\n    return name;\n}\n```", "```java\nquarkus.http.auth.policy.role-policy1.roles-allowed=Tester ![1](Images/1.png)\n\nquarkus.http.auth.permission.roles1.paths=/hello/secured ![2](Images/2.png)\nquarkus.http.auth.permission.roles1.policy=role-policy1 ![3](Images/3.png)\nquarkus.http.auth.permission.roles1.methods=GET ![4](Images/4.png)\n\nquarkus.http.auth.permission.deny1.paths=/hello/denied\nquarkus.http.auth.permission.deny1.policy=deny ![5](Images/5.png)\n\nquarkus.http.auth.permission.permit1.paths=/hello/unsecured\nquarkus.http.auth.permission.permit1.policy=permit ![6](Images/6.png)\nquarkus.http.auth.permission.permit1.methods=GET\n\nquarkus.http.auth.permission.roles2.paths=/hello/authenticated\nquarkus.http.auth.permission.roles2.policy=authenticated\nquarkus.http.auth.permission.roles2.methods=GET\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-elytron-security-properties-file\"\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\n@RolesAllowed(\"Tester\")\npublic String hello() {\n    return \"hello\";\n}\n```", "```java\nalex=soto\n```", "```java\nalex=Tester\n```", "```java\nquarkus.http.auth.basic=true ![1](Images/1.png)\n\nquarkus.security.users.file.enabled=true ![2](Images/2.png)\nquarkus.security.users.file.plain-text=true ![3](Images/3.png)\nquarkus.security.users.file.users=users.properties ![4](Images/4.png)\nquarkus.security.users.file.roles=roles.properties\n```", "```java\n./mvnw clean test\n\n...\nINFO  [io.quarkus] (main) Installed features:\n [cdi, resteasy, security, security-properties-file]\n[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 8.485 s\n <<< FAILURE! - in org.acme.quickstart.GreetingResourceTest\n[ERROR] testHelloEndpoint  Time elapsed: 0.076 s  <<< FAILURE!\njava.lang.AssertionError:\n1 expectation failed.\nExpected status code <200> but was <401>.\n at org.acme.quickstart.GreetingResourceTest.testHelloEndpoint\n (GreetingResourceTest.java:17)\n```", "```java\n@Test\npublic void testSecuredHelloEndpoint() {\n    given()\n            .auth() ![1](Images/1.png)\n            .basic(\"alex\", \"soto\") ![2](Images/2.png)\n            .when()\n            .get(\"/hello\")\n            .then()\n            .statusCode(200)\n            .body(is(\"hello\"));\n}\n```", "```java\nquarkus.security.users.embedded.enabled=true\nquarkus.security.users.embedded.plain-text=true\nquarkus.security.users.embedded.users.alex=soto\nquarkus.security.users.embedded.roles.alex=Admin,Tester\n```", "```java\n./mvnw quarkus:add-extension \\\n -Dextensions=\"quarkus-elytron-security-jdbc,quarkus-jdbc-h2,quarkus-flyway\"\n```", "```java\n@GET\n@RolesAllowed(\"Tester\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return \"hello\";\n}\n```", "```java\nCREATE TABLE test_user (\n  id INT,\n  username VARCHAR(255),\n  password VARCHAR(255),\n  role VARCHAR(255)\n);\n\nINSERT INTO test_user (id, username, password, role)\n  VALUES (1, 'alex', 'soto', 'Tester');\n```", "```java\nquarkus.datasource.url=jdbc:h2:mem:mydb\nquarkus.datasource.driver=org.h2.Driver\nquarkus.datasource.username=sa\nquarkus.datasource.password=\n\nquarkus.flyway.migrate-at-start=true\n\nquarkus.security.jdbc.enabled=true ![1](Images/1.png)\nquarkus.security.jdbc.principal-query.sql=\\\n  SELECT u.password, u.role FROM test_user u WHERE u.username=? ![2](Images/2.png)\nquarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true ![3](Images/3.png)\nquarkus.security.jdbc.principal-query.clear-password-mapper\\\n  .password-index=1![4](Images/4.png)\nquarkus.security.jdbc.principal-query.attribute-mappings.0.index=2 ![5](Images/5.png)\nquarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups\n```", "```java\n@Test\npublic void testSecuredHelloEndpoint() {\n    given()\n      .auth().basic(\"alex\", \"soto\")\n    .when()\n      .get(\"/hello\")\n    .then()\n      .statusCode(200)\n      .body(is(\"hello\"));\n}\n```", "```java\nquarkus.security.jdbc.enabled=true\nquarkus.security.jdbc.principal-query.sql=\\\n    SELECT u.password, u.role, u.salt, u.iteration \\\n    FROM test_user u WHERE u.username=?\n\nquarkus.security.jdbc.principal-query.clear-password-mapper.enabled=false\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.enabled=true ![1](Images/1.png)\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.password-index=\\\n    1 ![2](Images/2.png)\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.hash-encoding=\\\n    BASE64 ![3](Images/3.png)\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.salt-index=\\\n    3 ![4](Images/4.png)\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.salt-encoding=\\\n    BASE64 ![5](Images/5.png)\nquarkus.security.jdbc.principal-query.bcrypt-password-mapper.\\\n    iteration-count-index=4 ![6](Images/6.png)\n\nquarkus.security.jdbc.principal-query.attribute-mappings.0.index=2\nquarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups\n```", "```java\nquarkus.security.jdbc.enabled=true\n\nquarkus.security.jdbc.principal-query.sql=\\\n    SELECT u.password FROM test_user u WHERE u.username=? ![1](Images/1.png)\nquarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true\nquarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1\n\nquarkus.security.jdbc.principal-query.roles.sql=\\\n    SELECT r.role_name FROM test_role r, test_user_role ur \\\n    WHERE ur.username=? AND ur.role_id = r.id ![2](Images/2.png) ![3](Images/3.png)\nquarkus.security.jdbc.principal-query.roles.datasource=permissions ![4](Images/4.png)\nquarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1\nquarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups\n```", "```java\n{ ![1](Images/1.png)\n  \"kid\": \"/privateKey.pem\",\n  \"typ\": \"JWT\",\n  \"alg\": \"RS256\"\n},\n{ ![2](Images/2.png)\n  \"sub\": \"jdoe-using-jwt-rbac\",\n  \"aud\": \"using-jwt-rbac\",\n  \"upn\": \"jdoe@quarkus.io\",\n  \"birthdate\": \"2001-07-13\",\n  \"auth_time\": 1570094171,\n  \"iss\": \"https://quarkus.io/using-jwt-rbac\", ![3](Images/3.png)\n  \"roleMappings\": {\n    \"group2\": \"Group2MappedRole\",\n    \"group1\": \"Group1MappedRole\"\n  },\n  \"groups\": [ ![4](Images/4.png)\n    \"Echoer\",\n    \"Tester\",\n    \"Subscriber\",\n    \"group2\"\n  ],\n  \"preferred_username\": \"jdoe\",\n  \"exp\": 2200814171,\n  \"iat\": 1570094171,\n  \"jti\": \"a-123\"\n}\n```", "```java\neyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.\neyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ\n1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF\n90aW1lIjoxNTcwMDk0MTcxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmcta\nnd0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIs\nImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3R\nlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZS\nIsImV4cCI6MjIwMDgxNDE3MSwiaWF0IjoxNTcwMDk0MTcxLCJqdGkiOiJhLTEyMyJ9.\nHzr41h3_uewy-g2B-sonOiBObtcpkgzqmF4bT3cO58v45AIOiegl7HIx7QgEZHRO4PdUtR3\n4x9W23VJY7NJ545ucpCuKnEV1uRlspJyQevfI-mSRg1bHlMmdDt661-V3KmQES8WX2B2uqi\nrykO5fCeCp3womboilzCq4VtxbmM2qgf6ag8rUNnTCLuCgEoulGwTn0F5lCrom-7dJOTryW\n1KI0qUWHMMwl4TX5cLmqJLgBzJapzc5_yEfgQZ9qXzvsT8zeOWSKKPLm7LFVt2YihkXa80l\nWcjewwt61rfQkpmqSzAHL0QIs7CsM9GfnoYc0j9po83-P3GJiBMMFmn-vg\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-jwt\"\n```", "```java\n{\n    \"keys\": [\n        {\n            \"kty\": \"RSA\",\n            \"kid\": \"/privateKey.pem\",\n            \"e\": \"AQAB\",\n            \"n\": \"livFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm-ntyIv1\n p4kE1sPEQO73-HY8-Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRho\n r3kpM6ni2SPmNNhurEAHw7TaqszP5eUF_F9-KEBWkwVta-PZ37bwqSE4sCb\n 1soZFrVz_UT_LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQ\n ZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npf\n v_3Lw50bAkbT4HeLFxTx4flEoZLKO_g0bAoV2uqBhkA9xnQ\"\n        }\n    ]\n}\n```", "```java\nmp.jwt.verify.publickey.location=quarkus.pub.jwk.json ![1](Images/1.png)\nmp.jwt.verify.issuer=https://quarkus.io/using-jwt-rbac ![2](Images/2.png)\n```", "```java\njavax.ws.rs.core.SecurityContext.getUserPrincipal()\njavax.ws.rs.core.SecurityContext.isUserInRole(String)\njavax.servlet.http.HttpServletRequest.getUserPrincipal()\njavax.servlet.http.HttpServletRequest.isUserInRole(String)\njavax.ejb.SessionContext.getCallerPrincipal()\njavax.ejb.SessionContext.isCallerInRole(String)\njavax.security.jacc.PolicyContext\n  .getContext(\"javax.security.auth.Subject.container\")\njavax.security.enterprise.identitystore.IdentityStore\n  .getCallerGroups(CredentialValidationResult)\n@javax.annotation.security.RolesAllowed\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.annotation.security.RolesAllowed;\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\nimport org.eclipse.microprofile.jwt.Claim;\nimport org.eclipse.microprofile.jwt.Claims;\nimport org.eclipse.microprofile.jwt.JsonWebToken;\n\n@Path(\"/hello\")\n@RequestScoped ![1](Images/1.png)\npublic class GreetingResource {\n\n    @Inject\n    JsonWebToken callerPrincipal; ![2](Images/2.png)\n\n    @Claim(standard = Claims.preferred_username) ![3](Images/3.png)\n    String username;\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"hello \" + username;\n    }\n}\n```", "```java\n@Claim(standard = Claims.birthdate)\nOptional<String> birthdate;\n```", "```java\n@Test\npublic void testHelloEndpoint() {\n    given().header(\"Authorization\", \"Bearer \" + validToken) ![1](Images/1.png)\n            .when().get(\"/hello\").then().statusCode(200).body(is(\"hello jdoe\"));\n}\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\n@RolesAllowed(\"Tester\")\npublic String hello() {}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-oidc\"\n```", "```java\nquarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus ![1](Images/1.png)\nquarkus.oidc.client-id=backend-service ![2](Images/2.png)\n```", "```java\n@Inject\nio.quarkus.security.identity.SecurityIdentity securityIdentity; ![1](Images/1.png)\n\n@GET\n@RolesAllowed(\"user\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return \"hello \" + securityIdentity.getPrincipal().getName();\n}\n```", "```java\n@Test\npublic void testHelloEndpoint() {\n    System.out.println(accessToken);\n    given()\n      .auth().oauth2(accessToken)\n      .when().get(\"/hello\")\n      .then()\n         .statusCode(200)\n         .body(is(\"hello alice\"));\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\nimport io.restassured.RestAssured;\nimport io.restassured.builder.RequestSpecBuilder;\nimport io.restassured.response.Response;\nimport io.restassured.response.ResponseOptions;\nimport io.restassured.specification.RequestSpecification;\n\npublic class RestAssuredExtension {\n\n  public static ResponseOptions<Response> getAccessToken(String url,\n                                                         String clientId,\n                                                         String clientIdPwd,\n                                                         String username,\n                                                         String password) {\n    final RequestSpecification request = prepareRequest(url);\n    try {\n      return request\n        .auth()\n        .preemptive()\n        .basic(clientId, clientIdPwd)\n        .contentType(\"application/x-www-form-urlencoded; charset=UTF-8\")\n        .urlEncodingEnabled(true)\n        .formParam(\"username\", username)\n        .and()\n        .formParam(\"password\", password)\n        .and()\n        .formParam(\"grant_type\", \"password\")\n        .post(new URI(url));\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n  private static RequestSpecification prepareRequest(String url) {\n    final RequestSpecBuilder builder = new RequestSpecBuilder();\n    final RequestSpecification requestSpec = builder.build();\n    return RestAssured.given().spec(requestSpec);\n  }\n}\n```", "```java\ncurl -X POST \\\n    http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token \\\n    --user backend-service:secret \\\n    -H 'content-type: application/x-www-form-urlencoded' \\\n    -d 'username=alice&password=alice&grant_type=password'\n```", "```java\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"cfIADN_xxCJmVkWyN-PNXEEvMUWs2r68CxtmhEDNzXU\"\n},\n{\n  \"jti\": \"cc54b9db-5f2f-4609-8a6b-4f76026e63ae\",\n  \"exp\": 1578935775,\n  \"nbf\": 0,\n  \"iat\": 1578935475,\n  \"iss\": \"http://localhost:8180/auth/realms/quarkus\",\n  \"sub\": \"eb4123a3-b722-4798-9af5-8957f823657a\",\n  \"typ\": \"Bearer\",\n  \"azp\": \"backend-service\",\n  \"auth_time\": 0,\n  \"session_state\": \"5b674175-a2a9-4a45-a3da-394923125e55\",\n  \"acr\": \"1\",\n  \"realm_access\": {\n    \"roles\": [\n      \"user\"\n    ]\n  },\n  \"scope\": \"email profile\",\n  \"email_verified\": false,\n  \"preferred_username\": \"alice\"\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-oidc\"\n```", "```java\nquarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus ![1](Images/1.png)\nquarkus.oidc.client-id=frontend ![2](Images/2.png)\nquarkus.oidc.application-type=web-app ![3](Images/3.png)\nquarkus.http.auth.permission.authenticated.paths=/* ![4](Images/4.png)\nquarkus.http.auth.permission.authenticated.policy=authenticated\n```", "```java\n./mvnw clean compile quarkus:dev\n```"]