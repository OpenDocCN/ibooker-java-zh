["```java\n@Entity\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Aircraft {\n    @Id\n    private Long id;\n    private String callsign, squawk, reg, flightno, route, type, category;\n\n    private int altitude, heading, speed;\n    @JsonProperty(\"vert_rate\")\n    private int vertRate;\n    @JsonProperty(\"selected_altitude\")\n    private int selectedAltitude;\n\n    private double lat, lon, barometer;\n    @JsonProperty(\"polar_distance\")\n    private double polarDistance;\n    @JsonProperty(\"polar_bearing\")\n    private double polarBearing;\n\n    @JsonProperty(\"is_adsb\")\n    private boolean isADSB;\n    @JsonProperty(\"is_on_ground\")\n    private boolean isOnGround;\n\n    @JsonProperty(\"last_seen_time\")\n    private Instant lastSeenTime;\n    @JsonProperty(\"pos_update_time\")\n    private Instant posUpdateTime;\n    @JsonProperty(\"bds40_seen_time\")\n    private Instant bds40SeenTime;\n}\n```", "```java\npublic interface AircraftRepository extends CrudRepository<Aircraft, Long> {}\n```", "```java\n@RequiredArgsConstructor\n@Controller\npublic class PositionController {\n    @NonNull\n    private final AircraftRepository repository;\n    private WebClient client =\n            WebClient.create(\"http://localhost:7634/aircraft\");\n\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        repository.deleteAll();\n\n        client.get()\n                .retrieve()\n                .bodyToFlux(Aircraft.class)\n                .filter(plane -> !plane.getReg().isEmpty())\n                .toStream()\n                .forEach(repository::save);\n\n        model.addAttribute(\"currentPositions\", repository.findAll());\n        return \"positions\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Retrieve Aircraft Position Report</title>\n</head>\n<body>\n    <p><a href=\"/aircraft\">Click here</a>\n        to retrieve current aircraft positions in range of receiver.</p>\n</body>\n</html>\n```", "```java\n<!DOCTYPE HTML>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Position Report</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n</head>\n<body>\n<div class=\"positionlist\" th:unless=\"${#lists.isEmpty(currentPositions)}\">\n\n    <h2>Current Aircraft Positions</h2>\n\n    <table>\n        <thead>\n        <tr>\n            <th>Call Sign</th>\n            <th>Squawk</th>\n            <th>AC Reg</th>\n            <th>Flight #</th>\n            <th>Route</th>\n            <th>AC Type</th>\n            <th>Altitude</th>\n            <th>Heading</th>\n            <th>Speed</th>\n            <th>Vert Rate</th>\n            <th>Latitude</th>\n            <th>Longitude</th>\n            <th>Last Seen</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr th:each=\"ac : ${currentPositions}\">\n            <td th:text=\"${ac.callsign}\"></td>\n            <td th:text=\"${ac.squawk}\"></td>\n            <td th:text=\"${ac.reg}\"></td>\n            <td th:text=\"${ac.flightno}\"></td>\n            <td th:text=\"${ac.route}\"></td>\n            <td th:text=\"${ac.type}\"></td>\n            <td th:text=\"${ac.altitude}\"></td>\n            <td th:text=\"${ac.heading}\"></td>\n            <td th:text=\"${ac.speed}\"></td>\n            <td th:text=\"${ac.vertRate}\"></td>\n            <td th:text=\"${ac.lat}\"></td>\n            <td th:text=\"${ac.lon}\"></td>\n            <td th:text=\"${ac.lastSeenTime}\"></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n</body>\n</html>\n```", "```java\n<html lang=\"en\" >\n```", "```java\n<div class=\"positionlist\" th:unless=\"${#lists.isEmpty(currentPositions)}\">\n```", "```java\n<script type=\"text/javascript\">\n    window.onload = setupRefresh;\n\n    function setupRefresh() {\n        setTimeout(\"refreshPage();\", 5000); // refresh rate in milliseconds\n    }\n\n    function refreshPage() {\n        window.location = location.href;\n    }\n</script>\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream-binder-kafka</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n```", "```java\n<spring-cloud.version>2020.0.0-M5</spring-cloud.version>\n```", "```java\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```", "```java\n@AllArgsConstructor\n@Configuration\npublic class PositionReporter {\n    private final PlaneFinderService pfService;\n\n    @Bean\n    Supplier<Iterable<Aircraft>> reportPositions() {\n        return () -> {\n            try {\n                return pfService.getAircraft();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return List.of();\n        };\n    }\n}\n```", "```java\nserver.port=7634\n\nspring.cloud.stream.bindings.reportPositions-out-0.destination=aircraftpositions\nspring.cloud.stream.bindings.reportPositions-out-0.binder=rabbit\n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream-binder-kafka</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n</dependency>\n```", "```java\n<spring-cloud.version>2020.0.0-M5</spring-cloud.version>\n```", "```java\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```", "```java\n@AllArgsConstructor\n@Configuration\npublic class PositionRetriever {\n    private final AircraftRepository repo;\n\n    @Bean\n    Consumer<List<Aircraft>> retrieveAircraftPositions() {\n        return acList -> {\n            repo.deleteAll();\n\n            repo.saveAll(acList);\n\n            repo.findAll().forEach(System.out::println);\n        };\n    }\n}\n```", "```java\nspring.cloud.stream.bindings.retrieveAircraftPositions-in-0.destination=\n   aircraftpositions\nspring.cloud.stream.bindings.retrieveAircraftPositions-in-0.group=\n   aircraftpositions\nspring.cloud.stream.bindings.retrieveAircraftPositions-in-0.binder=\n   rabbit\n```", "```java\n@RequiredArgsConstructor\n@Controller\npublic class PositionController {\n    @NonNull\n    private final AircraftRepository repository;\n\n    @GetMapping(\"/aircraft\")\n    public String getCurrentAircraftPositions(Model model) {\n        model.addAttribute(\"currentPositions\", repository.findAll());\n        return \"positions\";\n    }\n}\n```", "```java\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n```", "```java\n@RequiredArgsConstructor\n@Component\npublic class WebSocketHandler extends TextWebSocketHandler {\n    private final List<WebSocketSession> sessionList = new ArrayList<>();\n    @NonNull\n    private final AircraftRepository repository;\n\n    public List<WebSocketSession> getSessionList() {\n        return sessionList;\n    }\n\n    @Override\n    public void afterConnectionEstablished(WebSocketSession session)\n            throws Exception {\n        sessionList.add(session);\n        System.out.println(\"Connection established from \" + session.toString() +\n            \" @ \" + Instant.now().toString());\n    }\n\n    @Override\n    protected void handleTextMessage(WebSocketSession session,\n            TextMessage message) throws Exception {\n        try {\n            System.out.println(\"Message received: '\" +\n                message + \"', from \" + session.toString());\n\n            for (WebSocketSession sessionInList : sessionList) {\n                if (sessionInList != session) {\n                    sessionInList.sendMessage(message);\n                    System.out.println(\"--> Sending message '\"\n                        + message + \"' to \" + sessionInList.toString());\n                }\n            }\n        } catch (Exception e) {\n                System.out.println(\"Exception handling message: \" +\n            e.getLocalizedMessage());\n        }\n    }\n\n    @Override\n    public void afterConnectionClosed(WebSocketSession session,\n            CloseStatus status) throws Exception {\n        sessionList.remove(session);\n        System.out.println(\"Connection closed by \" + session.toString() +\n            \" @ \" + Instant.now().toString());\n    }\n}\n```", "```java\n@AllArgsConstructor\n@Configuration\npublic class PositionRetriever {\n    private final AircraftRepository repository;\n    private final WebSocketHandler handler;\n\n    @Bean\n    Consumer<List<Aircraft>> retrieveAircraftPositions() {\n        return acList -> {\n            repository.deleteAll();\n\n            repository.saveAll(acList);\n\n            sendPositions();\n        };\n    }\n\n    private void sendPositions() {\n        if (repository.count() > 0) {\n            for (WebSocketSession sessionInList : handler.getSessionList()) {\n                try {\n                    sessionInList.sendMessage(\n                        new TextMessage(repository.findAll().toString())\n                    );\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSocket\npublic class WebSocketConfig implements WebSocketConfigurer {\n    private final WebSocketHandler handler;\n\n    WebSocketConfig(WebSocketHandler handler) {\n        this.handler = handler;\n    }\n\n    @Override\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\n        registry.addHandler(handler, \"/ws\");\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Aircraft Position Report (Live Updates)</title>\n    <script>\n        var socket = new WebSocket('ws://' + window.location.host + '/ws');\n\n        socket.onopen = function () {\n            console.log(\n              'WebSocket connection is open for business, bienvenidos!');\n        };\n\n        socket.onmessage = function (message) {\n            var text = \"\";\n            var arrAC = message.data.split(\"Aircraft\");\n            var ac = \"\";\n\n            for (i = 1; i < arrAC.length; i++) {\n                ac = (arrAC[i].endsWith(\", \"))\n                    ? arrAC[i].substring(0, arrAC[i].length - 2)\n                    : arrAC[i]\n\n                text += \"Aircraft\" + ac + \"\\n\\n\";\n            }\n\n            document.getElementById(\"positions\").innerText = text;\n        };\n\n        socket.onclose = function () {\n            console.log('WebSocket connection closed, hasta la próxima!');\n        };\n    </script>\n</head>\n<body>\n<h1>Current Aircraft Positions</h1>\n<div style=\"border-style: solid; border-width: 2px; margin-top: 15px;\n        margin-bottom: 15px; margin-left: 15px; margin-right: 15px;\">\n    <label id=\"positions\"></label>\n</div>\n</body>\n</html>\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Retrieve Aircraft Position Report</title>\n</head>\n<body>\n    <p><a href=\"/aircraft\">Click here</a> to retrieve current aircraft positions\n        in range of receiver.</p>\n    <p><a href=\"/wspositions.html\">Click here</a> to retrieve a livestream of\n        current aircraft positions in range of receiver.</p>\n</body>\n</html>\n```"]