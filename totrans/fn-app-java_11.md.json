["```java\nrecord User(long id, String firstname, String lastname) {\n\n  String fullname() {\n    return String.format(\"%s %s\", ![1](assets/1.png)\n                         firstname(),\n                         lastname());\n  }\n\n  String initials() {\n    return String.format(\"%s%s\",\n                         firstname().substring(0, 1), ![2](assets/2.png)\n                         lastname().substring(0, 1)); ![2](assets/2.png)\n  }\n}\n\nvar user = new User(42L, \"Ben\", null);\n\nvar fullname = user.fullname();\n// => Ben null ![1](assets/1.png)\n\nvar initials = user.initials();\n// => NullPointerException ![2](assets/2.png)\n```", "```java\n// \"TYPE-LESS\" NULL AS AN ARGUMENT\n\nmethodAcceptingString(null); ![1](assets/1.png)\n\n// ACCESSING A \"TYPED\" NULL\n\nString name = null;\n\nvar lowerCaseName = name.toLowerCase(); ![2](assets/2.png)\n// => NullPointerException\n\n// TEST TYPE OF NULL\n\nvar notString = name instanceof String; ![3](assets/3.png)\n// => false\n\nvar stillNotString = ((String) name) instanceof String; ![3](assets/3.png)\n// => false\n```", "```java\n// DON'T\n\nString value = null;\n\nif (condition) {\n  value = \"Condition is true\";\n} else {\n  value = \"Fallback if false\";\n}\n\n// DO\n\nString asTernary = condition ? \"Condition is true\"\n                             : \"Fallback if false\";\n\nString asRefactored = refactoredMethod(condition);\n```", "```java\npublic record User(long id, String firstname, String lastname) {\n\n  // DO: Additional constructor with default values to avoid null values\n  public User(long id) {\n    this(id, \"n/a\", \"n/a\");\n  }\n\n  // ...\n}\n```", "```java\npublic record User(long id, String firstname, String lastname) {\n\n  // DO: Validate arguments against null\n  public User {\n    Objects.requireNonNull(firstname);\n    Objects.requireNonNull(lastname);\n  }\n\n  // ...\n}\n```", "```java\ninterface Example {\n\n  @NonNull List<@Nullable String> getListOfNullableStrings(); ![1](assets/1.png)\n\n  @Nullable List<@NonNull String> getNullableListOfNonNullStrings(); ![2](assets/2.png)\n\n  void doWork(@Nullable String identifier); ![3](assets/3.png)\n}\n```", "```java\npublic Content loadFromDB(String contentId) {\n  // ...\n}\n\npublic Content get(String contentId) {\n\n  if (contentId == null) {\n    return null;\n  }\n\n  if (contentId.isBlank()) {\n    return null;\n  }\n\n  var cacheKey = contentId.toLowerCase();\n\n  var content = this.cache.get(cacheKey);\n  if (content == null) {\n    content = loadFromDB(contentId);\n  }\n\n  if (content == null) {\n    return null;\n  }\n\n  if (!content.isPublished()) {\n    return null;\n  }\n\n  return content;\n}\n```", "```java\npublic Optional<Content> loadFromDB(String contentId) {\n  // ...\n}\n\npublic Optional<Content> get(String contentId) {\n\n  return Optional.ofNullable(contentId) ![1](assets/1.png)\n                 .filter(Predicate.not(String::isBlank)) ![2](assets/2.png)\n                 .map(String::toLowerCase) ![3](assets/3.png)\n                 .map(this.cache::get); ![4](assets/4.png)\n                 .or(() -> loadFromDB(contentId)) ![5](assets/5.png)\n                 .filter(Content::isPublished); ![6](assets/6.png)\n}\n```", "```java\nString hasValue = \"Optionals are awesome!\";\nOptional<String> maybeValue = Optional.ofNullable(hasValue);\n\nString nullRef = null;\nOptional<String> emptyOptional = Optional.ofNullable(nullRef);\n```", "```java\nvar value = \"Optionals are awesome!\";\nOptional<String> mustHaveValue = Optional.of(value);\n\nvalue = null;\nOptional<String> emptyOptional = Optional.of(value);\n// => throws NullPointerException\n```", "```java\nOptional<String> noValue = Optional.empty();\n```", "```java\nOptional<String> maybeValue = ...;\n\n// VERBOSE VERSION\n\nif (maybeValue.isPresent()) {\n  var value = maybeValue.orElseThrow();\n  System.out.println(value);\n} else {\n  System.out.println(\"No value found!\");\n}\n\n// CONCISE VERSION\n\nmaybeValue.ifPresentOrElse(System.out::println,\n                           () -> System.out.println(\"No value found!\"));\n```", "```java\npublic record Permissions(List<String> permissions, Group group) {\n  public boolean isEmpty() {\n    return permissions.isEmpty();\n  }\n}\n\npublic record Group(Optional<User> admin) {\n  // NO BODY\n}\n\npublic record User(boolean isActive) {\n    // NO BODY\n}\n\nPermissions permissions = ...;\n\nboolean isActiveAdmin =\n  Optional.ofNullable(permissions) ![1](assets/1.png)\n          .filter(Predicate.not(Permissions::isEmpty)) ![2](assets/2.png)\n          .map(Permissions::group) ![3](assets/3.png)\n          .flatMap(Group::admin) ![4](assets/4.png)\n          .map(User::isActive) ![5](assets/5.png)\n          .orElse(Boolean.FALSE); ![6](assets/6.png)\n```", "```java\nboolean isActiveAdmin = false;\n\nif (permissions != null && !permissions.isEmpty()) {\n\n  if (permissions.group() != null) {\n    var group = permissions.group();\n    var maybeAdmin = group.admin();\n\n    if (maybeAdmin.isPresent()) {\n      var admin = maybeAdmin.orElseThrow();\n      isActiveAdmin = admin.isActive();\n    }\n  }\n}\n```", "```java\nList<Permissions> permissions = ...;\n\nList<User> activeUsers =\n  permissions.stream()\n             .filter(Predicate.not(Permissions::isEmpty))\n             .map(Permissions::group)\n             .map(Group::admin) ![1](assets/1.png)\n             .filter(Optional::isPresent) ![2](assets/2.png)\n             .map(Optional::orElseThrow) ![2](assets/2.png)\n             .filter(User::isActive)\n             .toList();\n```", "```java\nList<Permissions> permissions = ...;\n\nList<User> activeUsers =\n  permissions.stream()\n             .filter(Predicate.not(Permissions::isEmpty))\n             .map(Permissions::group)\n             .map(Group::admin)\n             .flatMap(Optional::stream)\n             .filter(User::isActive)\n             .toList();\n```", "```java\nOptional<T> pseudoReduce(BinaryOperator<T> accumulator) {\n  boolean foundAny = false;\n  T result = null;\n\n  for (T element : elements]) {\n    if (!foundAny) {\n      foundAny = true;\n      result = element;\n    } else {\n      result = accumulator.apply(result, element);\n    }\n  }\n\n  return foundAny ? Optional.of(result)\n                  : Optional.empty();\n}\n```", "```java\n// DON'T DO THIS\n\nString value = Optional.ofNullable(maybeNull)\n                       .orElse(fallbackValue);\n\n// DON'T DO THIS\n\nif (Optional.ofNullable(maybeNull).isPresent()) {\n  // ...\n}\n```", "```java\n// DO THIS INSTEAD\n\nString value = maybeNull != null ? maybeNull\n                                 : fallbackValue;\n\n// DO THIS INSTEAD\n\nif (maybeNull != null) {\n  // ...\n}\n```", "```java\npublic class User implements Serializable {\n\n  private UUID id;\n  private String username;\n  private LocalDateTime lastLogin;\n\n  // ... usual getter/setter for id and username\n\n  public Optional<LocalDateTime> getLastLogin() {\n    return Optional.ofNullable(this.lastLogin);\n  }\n\n  public void setLastLogin(LocalDateTime lastLogin) {\n    this.lastLogin = lastLogin;\n  }\n}\n```"]