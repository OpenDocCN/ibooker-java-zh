["```java\npublic interface UserRepository extends AutoCloseable {\n    boolean add(User user);\n\n    Optional<User> get(String userId);\n\n    void update(User user);\n\n    void clear();\n\n    FollowStatus follow(User follower, User userToFollow);\n}\n```", "```java\npublic interface TwootRepository {\n    Twoot add(String id, String userId, String content);\n\n    Optional<Twoot> get(String id);\n\n    void delete(Twoot twoot);\n\n    void query(TwootQuery twootQuery, Consumer<Twoot> callback);\n\n    void clear();\n}\n```", "```java\npublic interface AbstractRepository<T>\n{\n    void add(T value);\n\n    Optional<T> get(String id);\n\n    void update(T value);\n\n    void delete(T value);\n}\n```", "```java\nList<Twoot> twootsForLogon(User user);\n```", "```java\nList<Twoot> twootsFromUsersAfterPosition(Set<String> inUsers, Position lastSeenPosition);\n```", "```java\nList<Twoot> query(TwootQuery query);\n```", "```java\npublic class TwootQuery {\n    private Set<String> inUsers;\n    private Position lastSeenPosition;\n\n    public Set<String> getInUsers() {\n        return inUsers;\n    }\n\n    public Position getLastSeenPosition() {\n        return lastSeenPosition;\n    }\n\n    public TwootQuery inUsers(final Set<String> inUsers) {\n        this.inUsers = inUsers;\n\n        return this;\n    }\n\n    public TwootQuery inUsers(String... inUsers) {\n        return inUsers(new HashSet<>(Arrays.asList(inUsers)));\n    }\n\n    public TwootQuery lastSeenPosition(final Position lastSeenPosition) {\n        this.lastSeenPosition = lastSeenPosition;\n\n        return this;\n    }\n\n    public boolean hasUsers() {\n        return inUsers != null && !inUsers.isEmpty();\n    }\n}\n```", "```java\nvoid query(TwootQuery twootQuery, Consumer<Twoot> callback);\n```", "```java\ntwootRepository.query(\n    new TwootQuery()\n        .inUsers(user.getFollowing())\n        .lastSeenPosition(user.getLastSeenPosition()),\n    user::receiveTwoot);\n```", "```java\npublic interface ReceiverEndPoint {\n    void onTwoot(Twoot twoot);\n}\n```", "```java\npublic class PrintingEndPoint implements ReceiverEndPoint {\n    @Override\n    public void onTwoot(final Twoot twoot) {\n        System.out.println(twoot.getSenderId() + \": \" + twoot.getContent());\n    }\n}\n```", "```java\n        final ReceiverEndPoint anonymousClass = new ReceiverEndPoint() {\n            @Override\n            public void onTwoot(final Twoot twoot) {\n                System.out.println(twoot.getSenderId() + \": \" + twoot.getContent());\n            }\n        };\n```", "```java\n        final ReceiverEndPoint lambda =\n            twoot -> System.out.println(twoot.getSenderId() + \": \" + twoot.getContent());\n```", "```java\ntwoot -> twoot.getContent()\n```", "```java\nTwoot::getContent\n```", "```java\n(user, twootr) -> new SenderEndPoint(user, twootr)\n```", "```java\nSenderEndPoint::new\n```", "```java\n    <R> R extract(final String sql, final Extractor<R> extractor) {\n        try (var stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\n            stmt.clearParameters();\n            return extractor.run(stmt);\n        } catch (SQLException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n```", "```java\n    private String usersTupleLoop(final Set<String> following) {\n        List<String> quotedIds = new ArrayList<>();\n        for (String id : following) {\n            quotedIds.add(\"'\" + id + \"'\");\n        }\n        return '(' + String.join(\",\", quotedIds) + ')';\n    }\n```", "```java\n    private String usersTuple(final Set<String> following) {\n        return following\n            .stream()\n            .map(id -> \"'\" + id + \"'\")\n            .collect(Collectors.joining(\",\", \"(\", \")\"));\n    }\n```", "```java\n    public void queryLoop(final TwootQuery twootQuery, final Consumer<Twoot> callback) {\n        if (!twootQuery.hasUsers()) {\n            return;\n        }\n\n        var lastSeenPosition = twootQuery.getLastSeenPosition();\n        var inUsers = twootQuery.getInUsers();\n\n        for (Twoot twoot : twoots) {\n            if (inUsers.contains(twoot.getSenderId()) &&\n                twoot.isAfter(lastSeenPosition)) {\n                callback.accept(twoot);\n            }\n        }\n    }\n```", "```java\n    @Override\n    public void query(final TwootQuery twootQuery, final Consumer<Twoot> callback) {\n        if (!twootQuery.hasUsers()) {\n            return;\n        }\n\n        var lastSeenPosition = twootQuery.getLastSeenPosition();\n        var inUsers = twootQuery.getInUsers();\n\n        twoots\n            .stream()\n            .filter(twoot -> inUsers.contains(twoot.getSenderId()))\n            .filter(twoot -> twoot.isAfter(lastSeenPosition))\n            .forEach(callback);\n    }\n```", "```java\nObject accumulator = initialValue;\nfor (Object element : collection) {\n accumulator = combine(accumulator, element);\n}\n```", "```java\n    private final BinaryOperator<Position> maxPosition = maxBy(comparingInt(Position::getValue));\n\n    Twoot combineTwootsBy(final List<Twoot> twoots, final String senderId, final String newId) {\n        return twoots\n            .stream()\n            .reduce(\n                new Twoot(newId, senderId, \"\", INITIAL_POSITION),\n                (acc, twoot) -> new Twoot(\n                    newId,\n                    senderId,\n                    twoot.getContent() + acc.getContent(),\n                    maxPosition.apply(acc.getPosition(), twoot.getPosition())));\n    }\n```", "```java\n        user.followers()\n            .filter(User::isLoggedOn)\n            .forEach(follower ->\n            {\n                follower.receiveTwoot(twoot);\n                userRepository.update(follower);\n            });\n```", "```java\nOptional<String> a = Optional.of(\"a\");\n\nassertEquals(\"a\", a.get());\n```", "```java\nOptional emptyOptional = Optional.empty();\nOptional alsoEmpty = Optional.ofNullable(null);\n\nassertFalse(emptyOptional.isPresent());\n\n// a is defined above\nassertTrue(a.isPresent());\n```", "```java\nassertEquals(\"b\", emptyOptional.orElse(\"b\"));\nassertEquals(\"c\", emptyOptional.orElseGet(() -> \"c\"));\n```", "```java\n        var authenticatedUser = userRepository\n            .get(userId)\n            .filter(userOfSameId ->\n            {\n                var hashedPassword = KeyGenerator.hash(password, userOfSameId.getSalt());\n                return Arrays.equals(hashedPassword, userOfSameId.getPassword());\n            });\n\n        authenticatedUser.ifPresent(user ->\n        {\n            user.onLogon(receiverEndPoint);\n            twootRepository.query(\n                new TwootQuery()\n                    .inUsers(user.getFollowing())\n                    .lastSeenPosition(user.getLastSeenPosition()),\n                user::receiveTwoot);\n            userRepository.update(user);\n        });\n\n        return authenticatedUser.map(user -> new SenderEndPoint(user, this));\n```", "```java\npublic class Twootr\n{\n\n    private final TwootRepository twootRepository;\n    private final UserRepository userRepository;\n```", "```java\npublic Twootr()\n{\n    this.userRepository = new DatabaseUserRepository();\n    this.twootRepository = new DatabaseTwootRepository();\n}\n\n// How to start Twootr\nTwootr twootr = new Twootr();\n```", "```java\npublic Twootr()\n{\n    this.userRepository = UserRepository.getInstance();\n    this.twootRepository = TwootRepository.getInstance();\n}\n\n// How to start Twootr\nUserRepository.setInstance(new DatabaseUserRepository());\nTwootRepository.setInstance(new DatabaseTwootRepository());\nTwootr twootr = new Twootr();\n```", "```java\npublic Twootr(final UserRepository userRepository, final TwootRepository twootRepository)\n{\n    this.userRepository = userRepository;\n    this.twootRepository = twootRepository;\n}\n\n// How to start Twootr\nTwootr twootr = new Twootr(new DatabaseUserRepository(), new DatabaseTwootRepository());\n```"]