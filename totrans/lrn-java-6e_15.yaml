- en: Appendix B. Exercise Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix contains answers (and usually a bit of context) for the review
    questions at the end of each chapter. The code exercise answers are included with
    the source download for the example programs, in the *exercises* folder. [Appendix A](app01.html#learnjava6-APP-A)
    has details on obtaining the source and setting it up inside IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: A Modern Language'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which company currently maintains Java?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While Java was developed in the 1990s at Sun Microsystems, Oracle purchased
    Sun (and thus Java) in 2009\. Oracle maintains ownership and is an active partner
    in the development and distribution of its own commercial JDK and the open source
    OpenJDK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the name of the open source development kit for Java?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The open source version of the JDK is known as the OpenJDK.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Name the two main components that play a role in Java’s approach to securely
    running bytecode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java has many features that relate to security, but the main components at play
    in every Java application are the class loader and the bytecode verifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 2: A First Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What command should you use to compile a Java source file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are working in a terminal, the *javac* command compiles Java source files.
    While the details are often hidden when using an IDE like IntelliJ IDEA, the IDE
    is also using *javac* behind the scenes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How does the JVM know where to start when you run a Java application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any executable Java class must have a `main()` method defined. The JVM uses
    this method as the entry point.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can you extend more than one class when creating a new class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Java does not support direct multiple inheritance from multiple, separate
    classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can you implement more than one interface when creating a new class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. Java allows you to implement as many interfaces as needed. Using interfaces
    provides programmers with most of the useful features of multiple inheritance
    without many of the pitfalls.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which class represents the window in a graphical application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `JFrame` class represents the main window used in Java graphical applications,
    although later chapters will introduce you to some lower-level classes that can
    also create specialized windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We won’t generally list the code solutions in this appendix, but we want to
    make it easy to check your solution for this first program. The simple text version
    of “Goodbye, Java!” should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the graphical version, your code should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we added the extra `EXIT_ON_CLOSE` that we introduced in `HelloJava2`
    so that the app will quit correctly when you close it. If you are using IDEA,
    you can run either class using the green Play button right inside the IDE. If
    you are using a terminal, you can change to the directory where *GoodbyeJava.java*
    is located and type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 3: Tools of the Trade'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What statement gives you access to the Swing components in you application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `import` statement loads information the compiler needs from the specified
    class or package. For Swing components, you typically import the entire package
    with `import javax.swing.*;`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What environment variable determines where Java will look for class files when
    compiling or executing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `CLASSPATH` environment variable holds a list of directories containing
    the other classes or JAR files available for both compilation and execution. If
    you are using an IDE, the `CLASSPATH` is still defined, but it is not something
    you typically edit yourself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What options can you use to look at the contents of a JAR file without unpacking
    it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can run the following command to show the contents of a JAR file without
    actually unpacking it into the current directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `tvf` flags represent the table of contents (`t`), verbose (`v`), and file
    (`f` followed by a filename).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What entry is required in the *MANIFEST.MF* file to make a JAR file executable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must include an entry for `Main-Class` that gives the fully qualified name
    of a class with a valid `main()` method to make a given JAR file executable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What tool allows you to try out Java code interactively?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can run *jshell* from a terminal to try simple Java code interactively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will find our solutions to the code exercises in the *ch03/solutions* folder.
    ([Appendix A](app01.html#learnjava6-APP-A) has details on downloading the examples.)
    Our solutions are not the only—or even best—way to solve these problems. We try
    to present clean, maintainable code that follows best practices, but there are
    always other ways to approach a coding problem. Hopefully you are able to write
    and run your own answers, but here are a few hints if you are stuck.
  prefs: []
  type: TYPE_NORMAL
- en: To make the executable *hello.jar* file, we’ll do all of our work in the *ch03/exercises*
    folder in a terminal. (You can certainly do this type of work [inside IDEA](https://oreil.ly/l0akz)
    as well.) Go ahead and open a terminal and change into that folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we create the JAR file itself, we need to edit the *manifest.mf* file.
    Add the `Main-Class` entry. The final file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create and test your JAR file with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Recall that the `m` element in the flags is necessary to include our manifest.
    It’s also worth a reminder that the order of the `m` and `f` flags determines
    the order of the *manifest.mf* and *hello.jar* command-line arguments that follow.
    Do you remember how to look at the contents of your newly created JAR to verify
    the manifest is there?^([1](app02.html#id2590))
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: The Java Language'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What text encoding format does JAVA use by default by Java in compiled classes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Java uses the 8-bit Unicode Transformation Format (UTF-8) encoding.
    The 8-bit (or one byte) encoding can accommodate single and multibyte characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What characters are used to enclose a multiline comment? Can those comments
    be nested?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java borrows from C and C++ for its comment syntax. Single-line comments begin
    with two slashes (`//`), while multiline comments are enclosed in `/*` and `*/`
    pairs. The multiline style can also be used to embed small comments in the middle
    of a line of code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which looping constructs does Java support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java supports the `for` loop (both traditional C-style, and an enhanced form
    for iterating over collections), the `while` loop, and the `do/while` loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a chain of `if/else if/else` tests, what happens if multiple conditions are
    true?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The block associated with the first test that evaluates to `true` will be executed.
    After that block completes, control resumes after the entire chain—regardless
    of how many other tests would have also returned `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you wanted to store the US stock market’s total capitalization (roughly $31
    trillion at the close of fiscal year 2022) as whole dollars, what primitive data
    type could you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could use the `long` integer type; it can store numbers up to 9 quintillion
    (positive or negative). While you could also use the `double` type, as the numbers
    get larger, their precision falls off. And since “whole dollars” implies no fractions,
    an integer type makes more sense.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the expression `18 – 7 * 2` evaluate to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is an order-of-precedence question to make sure your high school algebra
    teacher finally gets some credit after all those “but when will I ever use this?”
    queries. The multiplication of 7 and 2 will occur first, then the subtraction.
    The final answer is 4\. (You might have come up with 22, which results from performing
    the operations from left to right. If you actually want that result, you could
    enclose the `18 – 7` portion inside parentheses…​just like this aside.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How would you create an array holding the names of the days of the week?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can create and initialize an array using curly braces. For the days of
    the week, we need an array of `String`s, like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The spacing around the names in the list is optional. You can list everything
    on one line, list each name on its own line, or some combination as we did here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of ways to print the original `a` and `b` to the screen along
    with the calculated greatest common denominator. You could use a `print()` statement
    (*not* `println()`) before you begin calculating, and then use a `println()` with
    the answer to finish the output. Or you could store a copy of `a` and `b` in a
    second set of variables before beginning the calculation. After you find the answer,
    you can print the copied values along with the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To output the triangular data in a simple row, you can use the same nested
    loops that you use to fill the triangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To present your output in a visual triangle, use a `print()` statement inside
    the inner `j` loop. (Be sure to print a space after each number as well.) After
    the inner loop finishes, you can use an empty `println()` to terminate the line
    and be ready for the next row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Objects in Java'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the primary organizing unit in Java?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main “unit” in Java is a class. Many other structures play important roles,
    of course, but you can’t use any of those other things without at least one class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What operator do you use to create an object (or instance) from a class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `new` operator instantiates an object from a class and calls the appropriate
    constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Java does not support classic multiple inheritance. What mechanisms does Java
    provide as alternatives?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java uses interfaces to accomplish most of the goals of multiple inheritance
    found in many other object-oriented languages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you organize multiple related classes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You place related classes in a package. In your filesystem, a package appears
    as nested folders. In your code, packages use dot-separated names.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How do you include classes from other packages for use in your own code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can `import` other individual classes or entire packages for your own use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do you call a class defined inside the scope of another class? What are
    some features that make such a class useful in some circumstances?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A simple class defined within the curly braces of another class (not just in
    the same file) is called an inner class. Inner classes have access to all the
    variables and methods of the outer class—including private members. They can be
    used to help break up your code into manageable and reusable pieces while providing
    good control over who else can use them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do you call a method designed to be overridden that has a name, return
    type, and argument list, but no body?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Methods defined with only their signatures are known as abstract methods. Including
    an abstract method in a class makes the class abstract as well. The abstract class
    cannot be instantiated. You must create a subclass and then provide a real body
    for the abstract method to use it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is an overloaded method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java allows you to use the same method name with different types or numbers
    of arguments. If two methods share the same name, they are said to be overloaded.
    Overloading makes it possible to create a batch of methods that do the same logical
    work on disparate arguments. The classic example of an overloaded method in Java
    is `System.out.println()` which can take several different types of arguments
    and convert them all to strings for printing to a terminal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to make sure no other class can use a variable you have defined,
    what access modifier should you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `private` access modifier for a variable (or a method, or indeed an entire
    inner class) restricts its use to the class where it is defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the first problem in our `Zoo`, you just need to add a `print()` statement
    to the empty `speak()` method in the inner `Gibbon` class. Hopefully the `Lion`
    example is straightforward to follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding another animal should also be straightforward; you can copy the entire
    `Lion` class. Rename the class and print an appropriate noise in the `speak()`
    method. You’ll also need to replicate a few lines in the `listen()` method so
    that your animal’s sound is added to the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To refactor the `listen()` method, we noted that the output for each animal
    is very similar, but the name of the animal obviously changes for each animal.
    If we move that name into the animals’ respective classes, we can create a loop
    whose body prints out the details (name and noise) for one animal. Then we iterate
    over our array of animals. If you make another animal, you only have to add an
    instance of your new inner class to the array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `AppleToss` class for this exercise is part of the `exercises.ch05` package.
    (The *game* folder contains the completed game, with all the features we’ll be
    building throughout the book. The classes in that folder are part of the `game`
    package. You’re welcome to compile and run that version, but it has several features
    we haven’t discussed yet.) To compile the game from a terminal, you can either
    change into the *ch05/exercises* directory and compile the Java classes there,
    or stay in the top-level folder where you unpacked the source code and give the
    path when compiling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To run the game, you need to be in that top-level folder. From there, you can
    run the `exercises.ch05.AppleToss` class with the *java* command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hopefully, adding a `Hedge` feels straightforward. You can start with a copy
    of the `Tree` class. Rename the file *Hedge.java*. Edit the class to reflect our
    new `Hedge` obstacle and update its `paintComponent()` method. Inside the `Field`
    class, you’ll need to add a member variable for the `Hedge`. Create a `setupHedge()`
    method similar to `setupTree()` and be sure to include your hedge in the `paintComponent()`
    method of `Field`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Last, but certainly not least, update the `setupFieldForOnePlayer()` method
    to call our `setupHedge()` method. Compile and run the game just like you did
    in the previous exercise. Your new hedge(s) should appear!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 6: Error Handling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What statement do you use to manage potential exceptions in your code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use a `try/catch` block around any statement or group of statements
    that might generate an exception.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which exceptions does the compiler require you to handle or throw?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Java, the term *checked exception* refers to a category of exceptions that
    the compiler understands and requires the programmer to acknowledge. You can use
    a `try/catch` block within a method where checked exceptions might occur, or you
    can add the exception to the method’s `throws` clause in its signature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Where do you place any “clean-up” code that you always want to run after using
    some resources in a `try` block?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `finally` clause will run at the end of a `try` block regardless of what
    happens. If there are no problems, the code in the `finally` clause runs. If there
    is an exception and a `catch` block handles it, `finally` still runs. If an exception
    occurs that is not handled, the `finally` clause still runs before control is
    transferred back to the calling method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do assertions have much of a performance penalty when they are disabled?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. This is by design. Assertions are meant to be used more during development
    or debugging. When you turn them off, they are skipped. Even in a production application,
    though, you might leave assertions in your code. If a user reports a problem,
    assertions could be turned on temporarily to allow your user to collect any output
    and help you find the cause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the *Pause.java* file to compile, you need to add a `try/catch` block
    around the call to `Thread.sleep()`. For this simple exercise, you only need to
    encapsulate the `Thread.sleep()` line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The assertions statements we need will have the following form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The bigger question is: where should we place them? We only need to check the
    starting position of our message, so we don’t want the assertions inside the `paintComponent()`
    method. A better place would be in the `HelloComponent0()` constructor, perhaps
    right after we store the supplied `message` argument.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To test the assertions, you’ll need to edit the source file to change the `x`
    or `y` values and recompile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your `GCDException` class will probably look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can test the result of your GCD calculation with a simple `if` statement.
    If the result is 1, you can throw your new `GCDException` with our original `a`
    and `b` as arguments to its constructor, like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 7: Collections and Generics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to store a contact list with names and phone numbers, which kind
    of collection would work best?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Map` would do the trick. The keys could be simple strings containing the
    contact’s name, and the values could be a simple (though wrapped) long number.
    Or you could create a `Person` class and a `PhoneNumber` class, and the map could
    use your custom classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What method do you use to get an iterator for the items in a `Set`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The imaginatively named `iterator()` method from the `Collection` interface
    will get your iterator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you turn a `List` into an array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `toArray()` method to turn a `List` into either an array of
    type `Object` or an array of the list’s parameterized type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you turn an array into a `List`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Arrays` helper class includes the handy `asList()` method that accepts
    an array and returns a parameterized list of the same type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What interface should you implement to sort a list using the `Collections.sort()`
    method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While there are many ways to sort collections, a list of `Comparable` objects
    (meaning objects whose class implements the `Comparable` interface) can use the
    standard `sort()` method provided by the `Collections` helper class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we mentioned in this chapter, you can’t directly sort a simple map in the
    same way you can sort a list or array. Even `Set`s are not typically sortable.^([2](app02.html#id2591))
    You can sort a list, though, so using the `keySet()` method to fill a list should
    give you what you need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Hopefully, the expansion to support multiple hedges feels straightforward to
    you. We mostly just duplicate any code we already have for the trees. And using
    `List`s allows us to use the enhanced `for` loop to quickly run through all of
    our hedges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the `values()` output to create and sort a list similar to the
    solution for Code Exercise 1\. The interesting part of this exercise is implementing
    the `Comparable` interface with the `Employee` class. (Actually, in the *ch07/solutions*
    folder, the sortable employee class is `Employee2`. We wanted to leave the original
    `Employee` class as a valid solution to the first exercise.) Here’s an example
    of doing string comparisons, using the employees’ names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Of course, you could perform other comparisons using the other `Employee` attributes.
    Try playing around with some other orderings and see if you get the results you
    expect. And if you want to dig even deeper, take a look at the `java.util.TreeMap`
    class as a way to store your employees in a sorted manner without needing the
    list-conversion detour.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 8: Text and Core Utilities'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which class contains the constant π? Do you need to import that class to use
    π?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `java.lang.Math` class contains the constant `PI`. All of the classes in
    the `java.lang` package are imported by default; no explicit `import` is required
    to use them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which package contains newer, better replacements for the original `java.util.Date`
    class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `java.time` package contains a wide variety of quality classes for handling
    dates, times, timestamps (or “instants” consisting of both a date and a time),
    and time spans or durations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which class do you use to format a date for user-friendly output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `DateFormat` class in the `java.text` package has a marvelously flexible
    (if occasionally opaque) formatting engine for rendering both dates and times.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What symbol do you use in a regular expression to help match the words “yes”
    and “yup”?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the alternation operator, `|` (vertical pipe), to create an expression
    such as `yes|yup` for use as a pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How would you convert the string “42” into the integer 42?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The various numeric wrappers all have string conversion methods. For an integer
    like 42, the `Integer.parseInt()` method would work. The wrapper classes are all
    part of the `java.lang` package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How would you compare two strings to see if they match, ignoring any capitalization,
    such as “yes” and “YES”?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `String` class has two main comparison methods: `equals()` and `equals``IgnoreCase()`.
    The latter would ignore capitalization, as its name suggests.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which operator allows for simple string concatenation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java does not generally support operator overloading, but the plus sign (`+`)
    performs addition when used with numeric base types, and concatenation when used
    with `String` objects. If you use `+` to “add” a string and a number, the result
    will be a string. (So `7 + "is lucky"` would result in the string “7is lucky.”
    Notice that concatenation does not insert any whitespace. If you are assembling
    a typical sentence, you must add your own spacing between the parts.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to accomplish the goals of this exercise. Testing the number
    of arguments should be straightforward. Then you can use some of the `String`
    class features to figure out whether you have the random keyword or a pair of
    coordinates. You can `split()` the coordinates, or craft a regular expression
    to separate the numeric values. When creating random coordinates, you can use
    `Math.random()`, similar to how we positioned the trees for our game in [“Math
    in action”](ch08.html#learnjava6-CHP-8-SECT-4.1.1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 9: Threads'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a thread?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A thread represents a “thread of execution” within a program. Threads have their
    own state and can run independently from other threads. Typically you use threads
    to handle long-running tasks that can be put in the background while more important
    tasks can continue to do their work. Java has both platform threads (tied one-to-one
    with native threads supplied by the operating system) and virtual threads (pure
    Java constructs that retain the semantics and benefits of native threads without
    the operating system overhead).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What keyword can you add to a method if you want threads to “take turns” when
    calling it? (Meaning no two threads should be executing the method at the same
    time to avoid corrupting shared data.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `synchronized` modifier on any method that reads or writes shared
    data. If two threads need to use the same method, the first thread sets a lock
    that blocks the second thread from calling the method. Once the first thread finishes,
    the lock is cleared and the second thread can proceed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What flags allow you to compile a Java program that includes preview feature
    code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When compiling a Java class that relies on a preview feature, you must supply
    the `--enable-preview` and either the `-source` or `--release` flags to *javac*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What flags allow you to run a Java program that includes preview feature code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When running a compile class that includes a preview feature, you only need
    to supply the `--enable-preview` flag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How many platform threads can one native thread support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just one. Creating a platform thread using the `Thread` class with a `Runnable`
    target or using something like the `ExecutorService` in the `java.util.concurrent`
    package requires the operating system to supply a thread as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How many virtual threads can one native thread support?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A single native thread will support many virtual threads. Project Loom set out
    to separate the threads used in Java programs from the threads managed by the
    operating system. For certain scenarios, lightweight virtual threads perform much
    better when Java is responsible for their scheduling. There is no fixed ratio
    of virtual to native, but the key insight with virtual threads is that the number
    of virtual threads is not tied to the number of native threads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Is the statement `x = x + 1;` an atomic action for the `int` variable `x`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. While it seems like such a small operation, there are several low-level
    steps involved. Any one of those low-level steps can be interrupted, and the value
    of `x` can be adversely affected. You could use an `AtomicInteger` or wrap the
    statement in a synchronized block if you need to guarantee a thread-safe increment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What package includes thread-safe versions of popular collection classes like
    `Queue` and `Map`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `java.util.concurrent` package contains several collection classes that
    Java defines as “concurrent,” such as `ConcurrentLinkedQueue` and `ConcurrentHashMap`.
    Concurrency implies a few other behaviors beyond pure thread-safe reads and writes,
    but thread safety is guaranteed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll do most of your work inside the `startClock()` method. (You will still
    have to import anything beyond the AWT and Swing packages that you use, of course.)
    You can create a separate class, an inner class or an anonymous inner class to
    handle the clock update loop. Recall that you can request a GUI element refresh
    by calling its `repaint()` method. Java supports a few mechanisms for “infinite”
    loops. You can use something like `while (true) { …​ }` or the cleverly named
    “forever” loop: `for (;;) { …​ }`. Don’t forget to start your thread once everything
    is in place!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hopefully, this exercise is fairly simple for you. As a testament to the overall
    compatibility of virtual threads with the existing codebase in Java, you should
    have to change only a few lines where the demo apple toss animation starts. In
    this iteration of the game, all of the setup and kickoff code happens in the `Field`
    class. Look for code like `new Thread()` or `new Runnable()`. You should be able
    to reuse the actual animation logic with no alterations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 10: File Input and Output'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How could you check to see if a given file already exists?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are a number of ways to see if a file exists, but two of the simplest
    rely on helper methods from either the `java.io` or `java.nio` package. An instance
    of `java.io.File` can use the `exists()` method. The static `java.nio.file.Files.exists()`
    method can test a `Path` object to see if a represented file exists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have to work with a legacy text file using an old encoding scheme, such
    as ISO 8859, how might you set up a reader to properly convert that content to
    UTF-8?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can supply an appropriate character set (`java.nio.charset.Charset`) to
    the constructor of `FileReader` to safely convert the file to Java strings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which package has the best classes for nonblocking file I/O?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the primary features of the `java.nio` package and its subpackages is
    support for nonblocking I/O.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which type of input stream might you use to parse a binary file, such as a JPEG-compressed
    image?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From `java.io`, you could use the `DataInputStream` class. For NIO, channels
    and buffers (like `ByteBuffer`) naturally support binary data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What are the three standard text streams built into the `System` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `System` class gives you access to two output streams, `System.out` and
    `System.err`, and one input stream, `System.in`. These streams are attached to
    the OS handles for `stdout`, `stderr`, and `stdin`, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Absolute paths begin at a root (*/* or *C:\*, for example). Where do relative
    paths begin? More specifically, where are relative paths relative to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Relative paths are relative to the “working directory,” which is typically where
    you started the program if you are using the command line to launch your application.
    In most IDEs, the working directory is something that can be configured.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How do you retrieve a NIO channel from an existing `FileInputStream`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you already have an instance of `FileInputStream`, you can use its `getChannel()`
    method to return a `FileChannel` associated with the input stream.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first iteration of our `Count` needs only one of the utilities discussed
    in the chapter. You’ll can use the `File` class with the path given as a command-line
    argument. From there, the `exists()` method will let you know if you can proceed
    or if you should print a friendly error message, and the `length()` method will
    give you the file’s size, in bytes. (The solution for this example is `Count1.java`
    in the *ch10/solutions* folder.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the second iteration that shows the line and word count in the given file,
    you’ll need to read and parse the contents of the file. One of the `Reader` classes
    would be great, but there are a variety of ways to read text files. However you
    open the file, you can count each line and then break that line up into words
    with something like `String.split()` or a regular expression. (The solution to
    this exercise is `Count2.java`.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There isn’t any new functionality in this third version, but we hope you’ll
    take this chance to try out some of the NIO classes and methods. Take a look at
    the methods of the `java.nio.file.Files` class. You’ll be surprised how much this
    helper class helps! (The solution to this exercise is `Count3.java`.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this final upgrade, you get to write to a file or channel. Depending on
    how you chose to read the contents in version 2 or 3, this may represent a fairly
    significant addition to our class. You’ll need to check to make sure the second
    argument (if it was given!) is writable. Then use one of the classes that allows
    appending, such as `RandomAccessFile`, or include the `APPEND` option for a `FileChannel`.
    (The solution to this exercise is `Count4.java`. We used the previous `Count3`
    with NIO, but you are welcome to start from `Count2` and use the standard I/O
    classes.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 11: Functional Approaches in Java'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which package contains the majority of functional interfaces?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While functional interfaces are scattered throughout the JDK, you will find
    the bulk of the “official” interfaces defined in the `java.util.function` package.
    We used qualifying quotes on “official” because any interface with a single abstract
    method (SAM) can be treated as a functional interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do you need to use any special flags when compiling or running Java applications
    that use functional features like lambdas?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. The many FP features currently available in Java are full members of the
    JDK. There are no preview or feature flags required to compile or execute Java
    code that uses them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How do you create lambda expressions with multiple statements in the body?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The body of a lambda expression follows the same rules as the body of something
    like a `while` loop: single statements do not require enclosing curly braces,
    but multiple statements do. You can use a curly brace block on the right side
    of the lambda if you have multiple statements. If your lambda returns a value,
    you can use the standard `return` statement as well.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can lambda expressions be void? Can they return values?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes on both counts. Lambda expressions run the same gamut of options as methods.
    You can have lambdas that take no arguments and return no values. You can have
    lambdas that consume arguments but produce no results. You can have lambda generators
    that don’t have arguments but do return values. Finally, you can have lambdas
    that accept one or more arguments and return a value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can you reuse a stream after you have processed it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Once you start processing a stream, that’s it. Attempting to reuse a stream
    will result in an exception. You can often reuse the original source to create
    an entirely new but identical stream, if needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How might you take a stream of objects and convert it to a stream of integers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You could use one of the `mapToInt()` variations from the `Stream` class: `mapToInt()`,
    `flatMapToInt()`, or `mapMultiToInt()`. The `IntStream` class, in turn, has a
    `mapToObj()` method to convert in the opposite direction.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have a stream that filters out empty lines from a file, what operation
    might you use to tell you how many lines had some content?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The easiest way to count the remaining lines would be to use the `count()` terminal
    operation. You could also create your own reducer, or use a collector and then
    query the length of the resulting list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hopefully the use of a more interesting formula for our adjustment feels straightforward.
    We don’t need any alternative syntax or extra methods; we just put the Celsius
    conversion, C = (F – 32) * 5 / 9, into the body of our lambda, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Not very dramatic, but we want to point out that lambdas can open up some really
    clever possibilities that extend beyond your initial plans.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have a number of choices available to accomplish this averaging task. You
    could write an averaging reducer. You could collect the salaries into a simpler
    container and then write your own averaging code. But if you look over the documentation
    on the different streams, you’ll notice that the numeric streams already have
    the perfect operation: `average()`. It returns an `OptionalDouble` object. You’ll
    still need to start the stream and then use something like `mapToInt()` to get
    your stream of numeric values.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `groupingBy()` collector needs a function that extracts a key from each
    element of the stream and returns a map of the keys paired with a list of all
    the elements that have matching keys. For our `PaidEmployee` example, you will
    probably have something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The type of the key in our map must match the type of object we extract in our
    `groupingBy()` operation. We used a method reference here, but any lambda that
    returns the role of the employee would also work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We didn’t want to complicate the previous solution, so we made copies of the
    report and employee classes named `Report2` and `PaidEmployee2`, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 12: Desktop Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which component would you use to display some text to the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While you could use a variety of text-based components, `JLabel` is the simplest
    way to show the user some (read-only) textual information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which component(s) would you use to allow the user to enter text?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on how much information you expect from the user, you could use either
    `JTextField` or `JTextArea`. (Other text components exist, but they serve more
    specialized purposes.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What event does clicking a button generate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking a button or any button-like component such as `JMenuItem` generates
    an `ActionEvent`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which listener should you attach to `JList` if you want to know when the user
    changes the selected item?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can implement the `ListSelectionListener` from the `javax.swing.event` package
    to receive list selection (and deselection) events from a `JList` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the default layout manager for `JPanel`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, `JPanel` uses the `FlowLayout` manager. One notable exception to
    this default is the content pane of `JFrame`. That pane is a `JPanel`, but the
    frame automatically changes the pane’s manager to `BorderLayout`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which thread is responsible for processing events in Java?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The event dispatch thread, sometimes called the event dispatch queue, manages
    delivery of events and updates to components on screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What method would you use to update a component like `JLabel` after a background
    task completes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could use `SwingUtilities.invokeAndWait()` if you want to wait for the label
    to be updated before processing any other events. You could use `Swing` `Utilities.invokeLater()`
    if it doesn’t matter exactly when the label gets updated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What container holds `JMenuItem` objects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `JMenu` object can hold `JMenuItem` objects as well as nested `JMenu` objects.
    The menus themselves are contained in a `JMenuBar`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can tackle the calculator layout one of two ways: you can use nested panels
    or you can use the `GridBagLayout`. (Our solution in *ch12/solutions/Calculator.java*
    uses a nested panel for the buttons.) Start simple. Add the text field to the
    top of the frame. Then add one button to the center. Now decide how you want to
    handle adding the remaining buttons. If your buttons use the `Calculator` instance
    (using the keyword `this` we discussed in [“Shadowing”](ch05.html#learnjava6-CHP-5-SECT-2.2))
    as their listener, you should see the label of any button you click printed to
    the terminal.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This exercise doesn’t require much new graphical code. But you do need to work
    within the UI event thread to safely alter the obstacles shown on the field. You
    can start slowly by simply printing a message or using a `JOptionPane` to show
    an alert any time an apple touches a tree or a hedge. Once you’re confident in
    your distance measuring, review how to remove an object from a list. After removing
    an obstacle, be sure to repaint the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logic for a calculator is relatively straightforward, but it certainly is
    not trivial. Start by getting the various digit buttons (1, 2, 3, and so on) hooked
    up to the display. You’ll need to append digits to create full numbers. Clicking
    the 1 button followed by the 2 button should display a 12\. When the user clicks
    on an operation button such as “–”, store whatever number is currently displayed
    as well as the operation to use later. Let the user type in a second number. Clicking
    the “=” should store this second number and then perform the actual calculation.
    Put the result in the display and then let the user start over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many (many!) subtleties in a full, professional calculator app. Don’t
    worry if your early attempts impose restrictions like working only with single-digit
    numbers. The point of this exercise is to practice responding to events. Even
    just getting a digit to show in the display field after the user clicks a button
    is worth celebrating!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 13: Network Programming in Java'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which networking protocols does the `URL` class support by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java’s `URL` class includes support for the HTTP, HTTPS, and FTP protocols.
    These three protocols cover a great deal of the resources available online, but
    you can create your own protocol handler if you deal with systems other than web
    or file servers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can you use Java to download binary data from an online source?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. Byte streams lie at the heart of all network data in Java. You can read
    the raw bytes, or you can chain some other higher-level stream. For example, `InputStreamReader`
    and `BufferedReader` work great for text. `DataInputStream` can handle binary
    data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How do you send form data to a web server using Java? (No need for a fully functional
    application, we just want you to think about the high-level steps you take and
    the Java classes involved.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `URL` class to open a connection to a web server. Before making
    any requests, you can configure the connection for bidirectional communication.
    The HTTP `POST` command allows you to send data to the server in the body of your
    request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What class do you use to listen for incoming network connections?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the `java.net.ServerSocket` class to create a network listener.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When creating your own server like we did for our game, are there any rules
    for picking a port number?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. Port numbers must be between 0 and 65,535 with ports below 1,024 typically
    reserved for well-known services that often require special permissions to use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Can a server application written in Java support multiple, simultaneous clients?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. While you can create only one `ServerSocket` on a given port, you can accept
    hundreds or even thousands of clients and process their requests in a thread.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How many simultaneous servers can a given client `Socket` instance talk to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One. A client socket communicates with one host on one port. A client application
    may allow multiple, distinct sockets for communicating with multiple servers at
    the same time, but each socket will still talk to a single server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Code Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding a feature to the protocol of our game requires updating both the server
    and client code. Fortunately we can reuse much of the `TREE` entry’s logic on
    both sides. Even more fortunately, all of our network communication code is in
    the `Multiplayer` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client and the server are inner classes, creatively named `Client` and `Server`,
    respectively. For the server, add a loop in the `run()` method to send hedge data
    right after you have sent the tree data. For the client, add a `HEDGE` segment
    to the `run()` method that accepts the location of the hedge and adds it to the
    field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the fields are set up for the two players, the in-game portion of the protocol
    only reports scores and disconnects. We don’t have to modify any of this code.
    Each player will have the same hedge obstacles and the same opportunity to remove
    them with a tossed apple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A human-readable date/time server should be fairly straightforward, but we want
    you to practice setting up your own sockets from scratch. You’ll need to decide
    on a port number for the server. 3283 spells “DATE” on a phone keypad if you need
    a little inspiration. We recommend processing the client request immediately after
    accepting the connection. (The advanced exercises give you a chance to try the
    more sophisticated approach of using threads.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the client, the only real piece of configurable data is the name of the
    server. You’re free to hardcode `“localhost”` if you plan to test your solution
    using two terminal windows on your local machine. Our solution takes an optional
    command-line argument, defaulting to `“localhost”` as well if you don’t provide
    an argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Advanced Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To handle clients using threads, you need to isolate the code responsible for
    communicating with the client. A helper class (inner, anonymous, or separate are
    all fine options) or a lambda will work. You still need to let the `ServerSocket`
    do its work and `accept()` a new connection, but you can hand off the accepted
    `Socket` object to your helper as soon as you get it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’ll be hard to really test this class, as you would need many clients all
    requesting the current date at the same moment. At a minimum, though, your current
    `FDClient` class should work with no changes, and you should still receive the
    correct date.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Working with online APIs can be fun, but it also requires paying attention
    to details. You typically need to answer a few questions as you begin to create
    your client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the base URL for the API?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the API use standard web form encoding or JSON? If not, is there a library
    with support for encoding and decoding?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there limits on how many requests you can make or how much data you can
    download?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the site have good documentation with common examples of sending and retrieving
    data?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you practice, you’ll develop your own sense of what information you need
    to start using new APIs. But you do need to practice. After you build your first
    client, look up another service. Write a client for that API and see if you can
    already spot common problems, or better, reusable code from your first client.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](app02.html#id2590-marker)) You can look at any JAR or ZIP file with `jar
    tvf <jarfile>`.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](app02.html#id2591-marker)) You could, however, use a `SortedSet` or a
    `TreeMap`, which both keep their entries sorted. For `TreeMap`, the keys are kept
    in order.
  prefs: []
  type: TYPE_NORMAL
