["```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-resteasy-jsonb\"\n\n[INFO] --- quarkus-maven-plugin:1.4.1.Final:add-extension (default-cli)\n @ custom-config ---\n✅ Adding extension io.quarkus:quarkus-resteasy-jsonb\n```", "```java\npackage org.acme.quickstart;\n\npublic class Developer {\n\n    private String name;\n    private String favoriteLanguage;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getFavoriteLanguage() {\n        return favoriteLanguage;\n    }\n\n    public void setFavoriteLanguage(String favoriteLanguage) {\n        this.favoriteLanguage = favoriteLanguage;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\n@Path(\"/developer\")\npublic class DeveloperResource {\n\n    private static final List<Developer> developers = new ArrayList<>();\n\n    @POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response addDeveloper(Developer developer) {\n        developers.add(developer);\n        return Response.ok().build();\n    }\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public List<Developer> getDevelopers() {\n        return developers;\n    }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -d '{\"name\":\"Alex\",\"age\":39, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\" -X POST http://localhost:8080/developer\n\ncurl localhost:8080/developer\n[{\"age\":39,\"favoriteLanguage\":\"java\",\"name\":\"Alex\"}]\n```", "```java\n@JsonbProperty(\"favorite-language\")\nString favoriteLanguage;\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-resteasy-jackson\"\n```", "```java\npackage org.acme.quickstart;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.quarkus.jackson.ObjectMapperCustomizer;\nimport javax.inject.Singleton;\n\n@Singleton\npublic class RegisterCustomModuleCustomizer\n    implements ObjectMapperCustomizer {\n\n    public void customize(ObjectMapper mapper) {\n        objectMapper.configure(\n            DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, false);\n    }\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-resteasy-jaxb\"\n\n[INFO] --- quarkus-maven-plugin:1.4.1.Final:add-extension (default-cli)\n @ custom-config ---\n✅ Adding extension io.quarkus:quarkus-resteasy-jaxb\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement ![1](Images/1.png)\npublic class Computer {\n\n    private String brand;\n    private String serialNumber;\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public String getSerialNumber() {\n        return serialNumber;\n    }\n\n    public void setSerialNumber(String serialNumber) {\n        this.serialNumber = serialNumber;\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\n@Path(\"/computer\")\npublic class ComputerResource {\n\n    private static final List<Computer> computers = new ArrayList<>();\n\n    @POST\n    @Consumes(MediaType.APPLICATION_XML)\n    public Response addComputer(Computer computer) {\n        computers.add(computer);\n        return Response.ok().build();\n    }\n\n    @GET\n    @Produces(MediaType.APPLICATION_XML)\n    public List<Computer> getComputers() {\n        return computers;\n    }\n\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl \\\n -d '<computer><brand>iMac</brand>\n <serialNumber>111-111-111</serialNumber></computer>'\n -H \"Content-Type: application/xml\" -X POST http://localhost:8080/computer\n\ncurl localhost:8080/computer\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><collection><computer>\n<brand>iMac</brand><serialNumber>111-111-111</serialNumber>\n</computer></collection>\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-hibernate-validator\"\n\n[INFO] --- quarkus-maven-plugin:1.4.1.Final:add-extension (default-cli)\n @ custom-config ---\n✅ Adding extension io.quarkus:quarkus-resteasy-jsonb\n```", "```java\n@Size(min = 4) ![1](Images/1.png)\nprivate String name;\n\n@NotBlank ![2](Images/2.png)\nprivate String favoriteLanguage;\n```", "```java\n@POST\n@Consumes(MediaType.APPLICATION_JSON)\npublic Response addDeveloper(@Valid Developer developer) { ![1](Images/1.png)\n    developers.add(developer);\n    return Response.ok().build();\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -d '{\"name\":\"Ada\",\"age\":7, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 400 Bad Request\n< Content-Length: 89\n< validation-exception: true\n< Content-Type: text/plain;charset=UTF-8\n\ncurl -d '{\"name\":\"Alexandra\",\"age\":5, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 200 OK\n< Content-Length: 0\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.json.Json;\nimport javax.json.JsonArray;\nimport javax.json.JsonArrayBuilder;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.ext.ExceptionMapper;\nimport javax.ws.rs.ext.Provider;\n\n@Provider ![1](Images/1.png)\npublic class BeanValidationExceptionMapper\n  implements ExceptionMapper<ConstraintViolationException> { ![2](Images/2.png)\n\n    @Override\n    public Response toResponse(ConstraintViolationException exception) {\n      return Response.status(Response.Status.BAD_REQUEST)\n        .entity(createErrorMessage(exception))\n        .type(MediaType.APPLICATION_JSON)\n        .build();\n    }\n\n    private JsonArray createErrorMessage(ConstraintViolationException exc) {\n      JsonArrayBuilder errors = Json.createArrayBuilder(); ![3](Images/3.png)\n      for (ConstraintViolation<?> violation : exc.getConstraintViolations()) { ![4](Images/4.png)\n        errors.add(\n            Json.createObjectBuilder() ![5](Images/5.png)\n            .add(\"path\", violation.getPropertyPath().toString())\n            .add(\"message\", violation.getMessage())\n            );\n      }\n      return errors.build();\n    }\n}\n```", "```java\ncurl -d '{\"name\":\"Ada\",\"age\":7, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 400 Bad Request\n< Content-Length: 90\n< Content-Type: application/json\n\n[{\"path\":\"addDeveloper.developer.name\",\n \"message\":\"size must be between 4 and 2147483647\"}]%\n```", "```java\n@GET\n@Produces(MediaType.APPLICATION_JSON)\npublic @Valid List<Developer> getDevelopers() {\n    return developers;\n}\n```", "```java\n@ApplicationScoped\npublic class DeveloperService {\n    public void promoteDeveloper(@Valid Developer developer) {\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\n\n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE,\n          ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE })\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Constraint(validatedBy = { JvmLanguageValidator.class}) ![1](Images/1.png)\npublic @interface JvmLanguage {\n    String message() default \"You need to provide a Jvm based-language\";\n    Class<?>[] groups() default { };\n    Class<? extends Payload>[] payload() default { };\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\n\npublic class JvmLanguageValidator\n    implements ConstraintValidator<JvmLanguage, String> { ![1](Images/1.png) ![2](Images/2.png)\n\n        private List<String> favoriteLanguages = Arrays.asList(\"java\",                                                             \"groovy\", \"kotlin\", \"scala\");\n\n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context) {\n        return favoriteLanguages.stream()\n            .anyMatch(l -> l.equalsIgnoreCase(value)); ![3](Images/3.png)\n    }\n}\n```", "```java\n@JvmLanguage\n@NotBlank\nprivate String favoriteLanguage;\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -d '{\"name\":\"Alexadra\",\"age\":7, \"favoriteLanguage\":\"python\"}' \\\n -H \"Content-Type: application/json\"\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 400 Bad Request\n< Content-Length: 89\n< validation-exception: true\n< Content-Type: text/plain;charset=UTF-8\n\ncurl -d '{\"name\":\"Alexandra\",\"age\":5, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\"\n -X POST http://localhost:8080/developer -v\n\n< HTTP/1.1 200 OK\n< Content-Length: 106\n< Content-Type: application/json\n<\n\n[{\"path\":\"addDeveloper.developer.favoriteLanguage\",\n \"message\":\"You need to provide a Jvm based-language\"}]\n```", "```java\nquarkus.default-locale=es-ES\n```", "```java\nquarkus.locales=en-US, es-ES\n```", "```java\n@Inject\nValidator validator; ![1](Images/1.png)\n\n@POST\n@Path(\"/programmaticvalidation\")\n@Consumes(MediaType.APPLICATION_JSON)\n@Produces(MediaType.APPLICATION_JSON)\npublic Response addProgrammaticValidation(Developer developer) { ![2](Images/2.png)\n    Set<ConstraintViolation<Developer>> violations =\n      validator.validate(developer); ![3](Images/3.png)\n\n    if (violations.isEmpty()) { ![4](Images/4.png)\n        developers.add(developer);\n        return Response.ok().build();\n    } else {\n        JsonArrayBuilder errors = Json.createArrayBuilder();\n        for (ConstraintViolation<Developer> violation : violations) { ![5](Images/5.png)\n            errors.add(\n                Json.createObjectBuilder()\n                .add(\"path\", violation.getPropertyPath().toString())\n                .add(\"message\", violation.getMessage())\n                );\n        }\n\n        return Response.status(Response.Status.BAD_REQUEST)\n                       .entity(errors.build())\n                       .build();\n    }\n}\n```", "```java\n./mvnw clean compile quarkus:dev\n\ncurl -d '{\"name\":\"Ada\",\"age\":7, \"favoriteLanguage\":\"java\"}' \\\n -H \"Content-Type: application/json\" \\\n -X POST http://localhost:8080/developer/programmaticvalidation -v\n\n< HTTP/1.1 400 Bad Request\n< Content-Length: 89\n< validation-exception: true\n< Content-Type: text/plain;charset=UTF-8\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n    @Inject                     ![1](Images/1.png)\n    GreetingService service;    ![2](Images/2.png)\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return service.getGreeting();\n    }\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Locale;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\n@ApplicationScoped                  ![1](Images/1.png)\npublic class GreetingService {\n    public String getGreeting() {\n        return \"Hello\";\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Locale;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Named;\n\n@ApplicationScoped\npublic class LocaleProducer {\n    @Produces\n    public Locale getDefaultLocale() {\n        return Locale.getDefault();\n    }\n}\n```", "```java\n@Dependent\npublic class TracerConfiguration {\n\n    @Produces\n    public Tracer tracer(Reporter reporter, Configuration configuration) {\n        return new Tracer(reporter, configuration);\n    }\n\n    @Produces\n    @DefaultBean\n    public Configuration configuration() {\n        // create a Configuration\n    }\n\n    @Produces\n    @DefaultBean\n    public Reporter reporter(){\n        // create a Reporter\n    }\n}\n```", "```java\n@Dependent\npublic class CustomTracerConfiguration {\n\n    @Produces\n    public Reporter reporter(){\n        // create a custom Reporter\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic class RecommendationService {\n    List<String> products;\n\n    @PostConstruct\n    public void init() {\n        products = Arrays.asList(\"Orange\", \"Apple\", \"Mango\");\n        System.out.println(\"Products initialized\");\n    }\n\n    @PreDestroy\n    public void cleanup() {\n        products = null;\n        System.out.println(\"Products cleaned up\");\n    }\n\n    public List<String> getProducts() {\n        return products;\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.event.Observes;\nimport io.quarkus.runtime.ShutdownEvent;\nimport io.quarkus.runtime.StartupEvent;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@ApplicationScoped                                  ![1](Images/1.png)\npublic class ApplicationEventListener {\n    private static final Logger LOGGER =\n            LoggerFactory.getLogger(ApplicationEventListener.class);\n\n    void onStart(@Observes StartupEvent event) {    ![2](Images/2.png)\n        LOGGER.info(\"Application starting...\");\n    }\n\n    void onStop(@Observes ShutdownEvent event) {    ![3](Images/3.png)\n        LOGGER.info(\"Application shutting down...\");\n    }\n\n}\n```", "```java\n    @Inject\n    @Named(\"en_US\")\n    Locale en_US;\n\n    @Inject\n    @Named(\"es_ES\")\n    Locale es_ES;\n\n    public String getGreeting(String locale) {\n        if (locale.startsWith(\"en\"))\n            return \"Hello from \" + en_US.getDisplayCountry();\n\n        if (locale.startsWith(\"es\"))\n            return \"Hola desde \" + es_ES.getDisplayCountry();\n\n        return \"Unknown locale\";\n    }\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Locale;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.enterprise.inject.Produces;\nimport javax.inject.Named;\n\n@ApplicationScoped\npublic class LocaleProducer {\n    @Produces\n    public Locale getDefaultLocale() {\n        return Locale.getDefault();\n    }\n    @Produces\n    @Named(\"en_US\")\n    public Locale getEnUSLocale() {\n        return Locale.US;\n    }\n\n    @Produces\n    @Named(\"es_ES\")\n    public Locale getEsESLocale() {\n        return new Locale(\"es\", \"ES\");\n    }\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\n\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE;\n\n@Qualifier\n@Retention(RetentionPolicy.RUNTIME)\n@Target({METHOD, FIELD, PARAMETER, TYPE})\npublic @interface SpainLocale {\n}\n```", "```java\n    @Produces\n    @SpainLocale\n    public Locale getSpainLocale() {\n        return new Locale(\"es\", \"ES\");\n    }\n```", "```java\n    @Inject\n    @SpainLocale\n    Locale spain;\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.enterprise.util.Nonbinding;\nimport javax.inject.Qualifier;\n\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Qualifier\n@Retention(RUNTIME)\n@Target({TYPE, METHOD, FIELD, PARAMETER})\npublic @interface Quote {\n    @Nonbinding String msg() default \"\";        ![1](Images/1.png)\n    @Nonbinding String source() default \"\";\n}\n```", "```java\n    @Produces\n    @Quote                                                          ![1](Images/1.png)\n    Message getQuote(InjectionPoint msg) {\n        Quote q = msg.getAnnotated().getAnnotation(Quote.class);    ![2](Images/2.png)\n        return new Message(q.msg(), q.source());                    ![3](Images/3.png)\n    }\n```", "```java\n    @Quote(msg = \"Good-bye and hello, as always.\", source = \"Roger Zelazny\")\n    Message myQuote;\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.Inherited;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.interceptor.InterceptorBinding;\n\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Inherited\n@InterceptorBinding\n@Retention(RUNTIME)\n@Target({METHOD, TYPE})\npublic @interface LogEvent {\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.Interceptor;\nimport javax.interceptor.InvocationContext;\n\n@LogEvent\n@Interceptor\npublic class LogEventInterceptor {\n    static List<Event> events = new ArrayList<>();\n\n    @AroundInvoke\n    public Object logEvent(InvocationContext ctx) throws Exception {\n        events.add(new Event(ctx.getMethod().getName(),\n                             Arrays.deepToString(ctx.getParameters())));\n        return ctx.proceed();\n    }\n}\n```", "```java\n@LogEvent\npublic void executeOrder(Order order) {\n    // ...\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.Test;\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest ![1](Images/1.png)\npublic class GreetingResourceTest {\n\n    @Test\n    public void testHelloEndpoint() {\n        given() ![2](Images/2.png)\n          .when()\n          .get(\"/hello\") ![3](Images/3.png)\n          .then() ![4](Images/4.png)\n             .statusCode(200)\n             .body(is(\"hello\"));\n    }\n}\n```", "```java\n./mvnw clean compile test \n[INFO] ------------------------------------------------------- [INFO]  T E S T S [INFO] ------------------------------------------------------- [INFO] Running org.acme.quickstart.GreetingResourceTest\n INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation INFO  [io.qua.resteasy] (build-13) Resteasy running without servlet container. INFO  [io.qua.resteasy] (build-13) - Add quarkus-undertow to run Resteasy within a servlet container INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 803ms INFO  [io.quarkus] (main) Quarkus 1.4.1.Final started in 0.427s. Listening on: http://0.0.0.0:8081 ![1](Images/1.png)\n INFO  [io.quarkus] (main) Profile test activated. ![2](Images/2.png)\n INFO  [io.quarkus] (main) Installed features: [cdi, resteasy] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.586 s\n - in org.acme.quickstart.GreetingResourceTest 2019-11-06 13:02:43,431 INFO  [io.quarkus] (main) Quarkus stopped in 0.053s [INFO] [INFO] Results: [INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n```", "```java\nquarkus.http.test-port=8083\n```", "```java\nquarkus.http.test-port=0\n```", "```java\n./mvnw clean compile test\n\nINFO  [io.quarkus] (main) Quarkus 1.4.1.Final started in 0.442s.\n Listening on: http://0.0.0.0:49661\nINFO  [io.quarkus] (main) Profile test activated.\nINFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.validation.constraints.Min;\n\n@ApplicationScoped ![1](Images/1.png)\npublic class GreetingService {\n\n    public String greetingMessage(@Min(value = 16) int age) { ![2](Images/2.png)\n        if (age < 19) {\n            return \"Hey boys and girls\";\n        } else {\n            return \"Hey ladies and gentlemen\";\n        }\n    }\n\n}\n```", "```java\n<dependency>\n  <groupId>org.assertj</groupId>\n  <artifactId>assertj-core</artifactId>\n  <version>3.14.0</version>\n  <scope>test</scope>\n</dependency>\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.inject.Inject;\nimport javax.validation.ConstraintViolationException;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport io.quarkus.test.junit.QuarkusTest;\n\n@QuarkusTest ![1](Images/1.png)\npublic class GreetingServiceTest {\n\n  @Inject ![2](Images/2.png)\n  GreetingService greetingService;\n\n  @Test ![3](Images/3.png)\n  public void testGreetingServiceForYoungers() {\n\n    Assertions.assertThatExceptionOfType(ConstraintViolationException.class) ![4](Images/4.png)\n      .isThrownBy(() -> greetingService.greetingMessage(15));\n  }\n\n  @Test\n  public void testGreetingServiceForTeenagers() {\n    String message = greetingService.greetingMessage(18);\n    Assertions.assertThat(message).isEqualTo(\"Hey boys and girls\");\n  }\n\n  @Test\n  public void testGreetingServiceForAdult() {\n    String message = greetingService.greetingMessage(21);\n    Assertions.assertThat(message).isEqualTo(\"Hey female and male\");\n  }\n\n}\n```", "```java\n./mvnw clean compile test\n\n[INFO] Running org.acme.quickstart.GreetingResourceTest\n INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\n INFO  [io.qua.resteasy] (build-3) Resteasy running without servlet container.\n INFO  [io.qua.resteasy] (build-3) - Add quarkus-undertow to run Resteasy\n within a servlet container\n INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed\n in 813ms\n INFO  [io.quarkus] (main) Quarkus 1.4.1.Final started in 0.715s.\n Listening on: http://0.0.0.0:51581\n INFO  [io.quarkus] (main) Profile test activated.\n INFO  [io.quarkus] (main) Installed features:\n [cdi, hibernate-validator, resteasy]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.614 s\n - in org.acme.quickstart.GreetingResourceTest\n[INFO] Running org.acme.quickstart.GreetingServiceTest\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.086 s\n - in org.acme.quickstart.GreetingServiceTest\n2019-11-06 16:16:11,503 INFO  [io.quarkus] (main) Quarkus stopped in 0.029s\n```", "```java\npackage org.acme.quickstart;\n\nimport io.quarkus.test.Mock;\n\n@Mock ![1](Images/1.png)\npublic class MockedGreetingService\n    extends GreetingService { ![2](Images/2.png)\n\n        @Override\n        public String greetingMessage(int age) {\n            return \"Hello World\"; ![3](Images/3.png)\n        }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-junit5-mockito</artifactId>\n  <scope>test</scope>\n</dependency>\n```", "```java\nimport io.quarkus.test.junit.mockito.InjectMock;\nimport org.junit.jupiter.api.BeforeEach;\nimport static org.mockito.Mockito.when;\n\n@QuarkusTest\npublic class GreetingResourceTest {\n\n    @InjectMock ![1](Images/1.png)\n    GreetingService greetingService;\n\n    @BeforeEach ![2](Images/2.png)\n    public void prepareMocks() {\n        when(greetingService.message())\n                .thenReturn(\"Aloha from Mockito\");\n    }\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/greeting\")\n          .then()\n             .statusCode(200)\n             .body(is(\"Aloha from Mockito\")); ![3](Images/3.png)\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport javax.enterprise.inject.Stereotype;\nimport javax.transaction.Transactional;\n\nimport io.quarkus.test.junit.QuarkusTest;\n\n@QuarkusTest ![1](Images/1.png)\n@Transactional\n@Stereotype ![2](Images/2.png)\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface TransactionalQuarkusTest {\n}\n```", "```java\n@TransactionalQuarkusTest\npublic class DeveloperDAO {\n}\n```", "```java\n@QuarkusTest\n@Transactional\npublic class DeveloperDAO {\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n\npublic class HelloWorldQuarkusTestResourceLifecycleManager\n    implements QuarkusTestResourceLifecycleManager { ![1](Images/1.png)\n\n    @Override\n    public Map<String, String> start() { ![2](Images/2.png)\n        System.out.println(\"Start Test Suite execution\");\n        return Collections.emptyMap(); ![3](Images/3.png)\n    }\n\n    @Override\n    public void stop() { ![4](Images/4.png)\n        System.out.println(\"Stop Test Suite execution\");\n    }\n\n    @Override\n    public void inject(Object testInstance) { ![5](Images/5.png)\n        System.out.println(\"Executing \" + testInstance.getClass().getName());\n    }\n\n    @Override\n    public int order() { ![6](Images/6.png)\n        return 0;\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport io.quarkus.test.common.QuarkusTestResource;\n\n@QuarkusTestResource(HelloWorldQuarkusTestResourceLifecycleManager.class) ![1](Images/1.png)\npublic class HelloWorldTestResource {\n}\n```", "```java\n./mvnw clean compile test \nINFO] ------------------------------------------------------- [INFO]  T E S T S [INFO] ------------------------------------------------------- [INFO] Running org.acme.quickstart.GreetingResourceTest Start Test Suite execution ![1](Images/1.png)\n INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 756ms INFO  [io.quarkus] (main) Quarkus 1.4.1.Final started in 0.381s. Listening on: http://0.0.0.0:8081 INFO  [io.quarkus] (main) Profile test activated. INFO  [io.quarkus] (main) Installed features: [cdi, resteasy] Executing org.acme.quickstart.GreetingResourceTest ![2](Images/2.png)\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.058 s\n - in org.acme.quickstart.GreetingResourceTest Stop Test Suite execution ![3](Images/3.png)\n2019-11-08 16:57:01,020 INFO  [io.quarkus] (main) Quarkus stopped in 0.027s\n```", "```java\n<dependency>\n  <groupId>org.testcontainers</groupId>\n  <artifactId>mariadb</artifactId>\n  <version>${testcontainers.version}</version>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-jdbc-mariadb</artifactId>\n</dependency>\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.acme.quickstart.MariaDbTestResource.Initializer;\nimport org.testcontainers.containers.MariaDBContainer;\n\nimport io.quarkus.test.common.QuarkusTestResource;\nimport io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n\n@QuarkusTestResource(Initializer.class) ![1](Images/1.png)\npublic class MariaDbTestResource {\n\n  public static class Initializer\n      implements QuarkusTestResourceLifecycleManager { ![2](Images/2.png)\n\n    private MariaDBContainer mariaDBContainer; ![3](Images/3.png)\n\n    @Override\n    public Map<String, String> start() {\n\n      this.mariaDBContainer = new MariaDBContainer<>(\"mariadb:10.4.4\"); ![4](Images/4.png)\n      this.mariaDBContainer.start();![5](Images/5.png)\n\n      return getConfigurationParameters();\n    }\n\n    private Map<String, String> getConfigurationParameters() { ![6](Images/6.png)\n      final Map<String, String> conf = new HashMap<>();\n\n      conf.put(\"quarkus.datasource.url\", this.mariaDBContainer.getJdbcUrl());\n      conf.put(\"quarkus.datsource.username\", this.mariaDBContainer\n                                                  .getUsername());\n      conf.put(\"quarkus.datasource.password\", this.mariaDBContainer\n                                                    .getPassword());\n      conf.put(\"quarkus.datasource.driver\", this.mariaDBContainer\n                                                  .getDriverClassName());\n\n      return conf;\n    }\n\n    @Override\n    public void stop() {\n      if (this.mariaDBContainer != null) {\n        this.mariaDBContainer.close(); ![7](Images/7.png)\n      }\n    }\n  }\n}\n```", "```java\n./mvnw clean test \n[INFO] ------------------------------------------------------- [INFO]  T E S T S [INFO] ------------------------------------------------------- [INFO] Running org.acme.quickstart.GreetingResourceTest\n ℹ︎ Checking the system... ✔ Docker version should be at least 1.6.0 ✔ Docker environment should have more than 2GB free disk space Start Test Suite execution\n INFO  [org.tes.doc.DockerClientProviderStrategy] (main) Loaded org.testcontainers.dockerclient .UnixSocketClientProviderStrategy from ~/.testcontainers.properties, will try it first ...\n INFO  [ߐ㠮4.4]] (main) Creating container for image: mariadb:10.4.4 ![1](Images/1.png)\n INFO  [ߐ㠮4.4]] (main) Starting container with ID: 0d07d45111b1103fd7e64ac2050320ee329ca14eb46a72d525f61bc5e433dc69 INFO  [ߐ㠮4.4]] (main) Container mariadb:10.4.4 is starting: 0d07d45111b1103fd7e64ac2050320ee329ca14eb46a72d525f61bc5e433dc69 INFO  [ߐ㠮4.4]] (main) Waiting for database connection to become available at jdbc:mariadb://localhost:32773/test using query 'SELECT 1' INFO  [ߐ㠮4.4]] (main) Container is started (JDBC URL: jdbc:mariadb://localhost:32773/test) INFO  [ߐ㠮4.4]] (main) Container mariadb:10.4.4 started ![2](Images/2.png)\n INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed in 1461ms INFO  [io.quarkus] (main) Quarkus 1.4.1.Final started in 0.909s. Listening on: http://0.0.0.0:8081 INFO  [io.quarkus] (main) Profile test activated. INFO  [io.quarkus] (main) Installed features: [cdi, jdbc-mariadb, resteasy] Executing org.acme.quickstart.GreetingResourceTest [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.666 s\n - in org.acme.quickstart.GreetingResourceTest Stop Test Suite execution 2019-11-12 11:57:27,758 INFO  [io.quarkus] (main) Quarkus stopped in 0.043s\n```", "```java\n<profile>\n  <id>native</id>\n  <activation>\n    <property>\n      <name>native</name>\n    </property>\n  </activation>\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-failsafe-plugin</artifactId>\n        <version>${surefire-plugin.version}</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>integration-test</goal>\n              <goal>verify</goal> ![1](Images/1.png)\n            </goals>\n            <configuration>\n              <systemProperties>\n                <native.image.path> ${project.build.directory}/\n                  ${project.build.finalName}-runner </native.image.path> ![2](Images/2.png)\n              </systemProperties>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <properties>\n    <quarkus.package.type> native </quarkus.package.type> ![3](Images/3.png)\n  </properties>\n</profile>\n```", "```java\npackage org.acme.quickstart;\n\nimport io.quarkus.test.junit.NativeImageTest;\n\n@NativeImageTest ![1](Images/1.png)\npublic class NativeGreetingResourceIT\n    extends GreetingResourceTest { ![2](Images/2.png)\n\n    // Execute the same tests but in native mode. }\n```"]