["```java\npackage org.acme;\n\nimport io.smallrye.common.annotation.NonBlocking;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello-resteasy-reactive\")\npublic class ReactiveGreetingResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    @NonBlocking\n    public String hello() {\n        return \"Hello RESTEasy Reactive\";\n    }\n}\n```", "```java\nHello RESTEasy Reactive\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\n@NonBlocking\npublic String hello() {\n    return \"Hello RESTEasy Reactive from \" + Thread.currentThread().getName();\n}\n```", "```java\nHello RESTEasy Reactive vert.x-eventloop-thread-5\n```", "```java\n@GET\n@Produces(MediaType.TEXT_PLAIN)\n@Path(\"/blocking\")\npublic String helloBlocking() {\n    return \"Hello RESTEasy Reactive from \" + Thread.currentThread().getName();\n}\n```", "```java\nHello RESTEasy Reactive executor-thread-198\n```", "```java\n> wrk -t 10 -c50 -d40s http://localhost:8080/hello\nRunning 40s test @ http://localhost:8080/hello\n```", "```java\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    49.35ms   83.26ms 643.82ms   84.52%\n    Req/Sec     2.97k     1.81k   10.66k    64.59%\n  1167359 requests in 40.07s, 92.40MB read\nRequests/sec:  29132.34\nTransfer/sec:      2.31MB\n```", "```java\n> cd chapter-8/simple-benchmark/reactive\n> mvn package\n> java -jar target/quarkus-app/quarkus-run.jar\n```", "```java\n> wrk -t 10 -c50 -d40s http://localhost:8080/hello\nRunning 40s test @ http://localhost:8080/hello\n  10 threads and 50 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   600.42us  357.14us  26.17ms   98.24%\n    Req/Sec     8.44k   606.47    15.90k    93.71%\n  3364365 requests in 40.10s, 221.39MB read\nRequests/sec:  83895.54\nTransfer/sec:      5.52MB\n```", "```java\n> cd chapter-8/simple-benchmark/reactive-blocking\n> mvn package\n> java -jar target/quarkus-app/quarkus-run.jar\n```", "```java\n> wrk -t 10 -c50 -d40s http://localhost:8080/hello\nRunning 40s test @ http://localhost:8080/hello\n  10 threads and 50 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    35.99ms   66.23ms 783.62ms   85.87%\n    Req/Sec     5.22k     3.53k   22.22k    71.81%\n  2016035 requests in 40.05s, 132.66MB read\nRequests/sec:  50339.41\nTransfer/sec:      3.31MB\n```", "```java\n@Inject Vertx vertx;\n```", "```java\nUni<String> uni = vertx.fileSystem().readFile(path)\n        .onItem().transform(buffer -> buffer.toString(\"UTF-8\"));\n```", "```java\npackage org.acme.reactive;\n\nimport io.smallrye.mutiny.Uni;\nimport io.vertx.core.file.FileSystemException;\nimport io.vertx.mutiny.core.Vertx;\nimport org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\nimport java.time.Duration;\n\n@Path(\"/\")\npublic class MutinyExampleResource {\n\n    @Inject\n    Vertx vertx;\n\n    @GET\n    @Path(\"/lorem\")\n    public Uni<String> getLoremIpsum() {\n        return vertx.fileSystem().readFile(\"lorem.txt\")\n                .onItem().transform(buffer -> buffer.toString(\"UTF-8\"));\n    }\n\n}\n```", "```java\n> curl http://localhost:8080/lorem\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\neu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident,\nsunt in culpa qui officia deserunt mollit anim id est laborum.\n```", "```java\n@GET\n@Path(\"/missing\")\npublic Uni<String> getMissingFile() {\n    return vertx.fileSystem().readFile(\"Oops.txt\")\n            .onItem().transform(buffer -> buffer.toString(\"UTF-8\"));\n}\n```", "```java\n> curl -f -v http://localhost:8080/missing\n*   Trying ::1...\n* TCP_NODELAY set\n* Connection failed\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /missing HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n* The requested URL returned error: 500 Internal Server Error\n* Closing connection 0\ncurl: (22) The requested URL returned error: 500 Internal Server Error\n```", "```java\n@GET\n@Path(\"/recover\")\npublic Uni<String> getMissingFileAndRecover() {\n    return vertx.fileSystem().readFile(\"Oops.txt\")\n            .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n            .onFailure().recoverWithItem(\"Oops!\");\n}\n```", "```java\n> curl http://localhost:8080/recover\noops!\n```", "```java\n@GET\n@Path(\"/404\")\npublic Uni<Response> get404() {\n    return vertx.fileSystem().readFile(\"Oops.txt\")\n            .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n            .onItem().transform(content -> Response.ok(content).build())\n            .onFailure().recoverWithItem(\n                    Response.status(Response.Status.NOT_FOUND).build());\n}\n```", "```java\n curl -v http://localhost:8080/404\n*   Trying ::1...\n* TCP_NODELAY set\n* Connection failed\n* connect to ::1 port 8080 failed: Connection refused\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /404 HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n< HTTP/1.1 404 Not Found\n< content-length: 0\n<\n* Connection #0 to host localhost left intact\n* Closing connection 0\n```", "```java\n@ServerExceptionMapper\npublic Response mapFileSystemException(FileSystemException ex) {\n    return Response.status(Response.Status.NOT_FOUND)\n            .entity(ex.getMessage())\n            .build();\n}\n```", "```java\nreturn vertx.fileSystem().readFile(\"slow.txt\")\n        .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n        .ifNoItem().after(Duration.ofSeconds(1)).fail();\n```", "```java\n@GET\n@Path(\"/book\")\n@Produces(MediaType.TEXT_PLAIN)\npublic Multi<String> book() {\n    return vertx.fileSystem().open(\"war-and-peace.txt\",\n                new OpenOptions().setRead(true))\n            .onItem().transformToMulti(AsyncFile::toMulti)\n            .onItem().transform(b -> b.toString(\"UTF-8\"));\n}\n```", "```java\n> curl http://localhost:8080/book -N ![1](assets/1.png)\n```", "```java\n@GET\n@Path(\"/book\")\n@Produces(MediaType.TEXT_PLAIN)\npublic Multi<String> bookWithTicks() {\n    Multi<Long> ticks = Multi.createFrom().ticks().every(Duration.ofSeconds(1));\n    Multi<String> book = vertx.fileSystem().open(\"war-and-peace.txt\",\n        new OpenOptions().setRead(true))\n            .onItem().transformToMulti(AsyncFile::toMulti)\n            .onItem().transform(b -> b.toString(\"UTF-8\"));\n    return\n            Multi.createBy().combining().streams(ticks, book).asTuple()\n                    .onItem().transform(Tuple2::getItem2);\n}\n```", "```java\npublic static class Book {\n    public final long id;\n    public final String title;\n    public final List<String> authors;\n\n    public Book(long id, String title, List<String> authors) {\n        this.id = id;\n        this.title = title;\n        this.authors = authors;\n    }\n}\n```", "```java\nMulti<Book> getBooks();\n```", "```java\n@Inject BookService service;\n\n@GET\n@Path(\"/books\")\n@Produces(MediaType.APPLICATION_JSON)\npublic Multi<Book> books() {\n    return service.getBooks();\n}\n```", "```java\n>  curl -N http://localhost:8080/books\n[{\"id\":0,\"title\":\"Fundamentals of Software Architecture\",\"authors\":[\"Mark\nRichards\",\"Neal Ford\"]},{\"id\":1,\"title\":\"Domain-Driven Design\",\"authors\":\n[\"Eric Evans\"]},{\"id\":2,\"title\":\"Designing Distributed Systems\",\n\"authors\":[\"Brendan Burns\"]},{\"id\":3,\"title\":\"Building Evolutionary\nArchitectures\",\"authors\":[\"Neal Ford\",\"Rebecca Parsons\",\"Patrick Kua\"]},\n{\"id\":4,\"title\":\"Principles of Concurrent and Distributed Programming\",\n\"authors\":[\"M. Ben-Ari\"]},{\"id\":5,\"title\":\"Distributed Systems Observability\",\n\"authors\":[\"Cindy Sridharan\"]},{\"id\":6,\"title\":\"Event Streams in Action\",\n\"authors\":[\"Alexander Dean\",\"Valentin Crettaz\"]},{\"id\":7,\"title\":\"Designing\nData-Intensive Applications\",\"authors\":[\"Martin Kleppman\"]},{\"id\":8,\n\"title\":\"Building Microservices\",\"authors\":[\"Sam Newman\"]},{\"id\":9,\n\"title\":\"Kubernetes in Action\",\"authors\":[\"Marko Luksa\"]},{\"id\":10,\n\"title\":\"Kafka - the definitive guide\",\"authors\":[\"Gwenn Shapira\",\"Todd Palino\",\n\"Rajini Sivaram\",\"Krit Petty\"]},{\"id\":11,\"title\":\"Effective Java\",\n\"authors\":[\"Joshua Bloch\"]},{\"id\":12,\"title\":\"Building Event-Driven\nMicroservices\",\"authors\":[\"Adam Bellemare\"]}]\n```", "```java\n@GET\n@Path(\"/books\")\n@Produces(MediaType.APPLICATION_JSON)\npublic Multi<Book> booksWithTicks() {\n    Multi<Long> ticks = Multi.createFrom().ticks().every(Duration.ofSeconds(1));\n    Multi<Book> books = service.getBooks();\n\n    return\n            Multi.createBy().combining().streams(ticks, books).asTuple()\n                    .onItem().transform(Tuple2::getItem2);\n}\n```", "```java\npublic static class Quote {\n    public final String company;\n    public final double value;\n\n    public Quote(String company, double value) {\n        this.company = company;\n        this.value = value;\n    }\n}\n```", "```java\n@Inject Market market;\n\n@GET\n@Path(\"/market\")\n@Produces(MediaType.SERVER_SENT_EVENTS)\npublic Multi<Quote> market() {\n    return market.getEventStream();\n}\n```", "```java\n> curl -N http://localhost:8080/market\ndata:{\"company\":\"MacroHard\",\"value\":0.9920107877590033}\n\ndata:{\"company\":\"Divinator\",\"value\":16.086577691515345}\n\ndata:{\"company\":\"Divinator\",\"value\":6.739227006693276}\n\ndata:{\"company\":\"MacroHard\",\"value\":1.9383421237456742}\n\ndata:{\"company\":\"MacroHard\",\"value\":38.723702725212156}\n\ndata:{\"company\":\"Divinator\",\"value\":44.23789420202483}\n\ndata:{\"company\":\"Black Coat\",\"value\":171.42142746079418}\n\ndata:{\"company\":\"MacroHard\",\"value\":44.37699080288775}\n\ndata:{\"company\":\"Black Coat\",\"value\":37.33849006264873}\n...\n```"]