["```java\napple = (\"apple\", \"green\")\nbanana = (\"banana\", \"yellow\")\ncherry = (\"cherry\", \"red\")\n\nfruits = [apple, banana, cherry]\n\nfor fruit in fruits:\n  print \"The\", fruit[0], \"is\", fruit[1]\n```", "```java\ntypealias Fruit = (name: String, color: String)\n\nlet fruits: [Fruit] = [\n  (name: \"apple\", color: \"green\"),\n  (name: \"banana\", color: \"yellow\"),\n  (name: \"cherry\", color: \"red\")]\n\nfor fruit in fruits {\n  println(\"The \\(fruit.name) is \\(fruit.color)\")\n}\n```", "```java\npublic final class User {\n\n  private String        username;\n  private boolean       active;\n  private LocalDateTime lastLogin;\n\n  public User() { } ![1](assets/1.png)\n\n  public User(String username,\n              boolean active,\n              LocalDateTime lastLogin) { ![1](assets/1.png)\n    this.username = username;\n    this.active = active;\n    this.lastLogin = lastLogin;\n  }\n\n  public String getUsername() { ![2](assets/2.png)\n    return this.username;\n  }\n\n  public void setUsername(String username) { ![3](assets/3.png)\n    this.username = username;\n  }\n\n  public boolean isActive() { ![2](assets/2.png)\n    return this.active;\n  }\n\n  public void setActive(boolean active) { ![3](assets/3.png)\n    this.active = active;\n  }\n\n  public LocalDateTime getLastLogin() { ![2](assets/2.png)\n    return this.lastLogin;\n  }\n\n  public void setLastLogin(LocalDateTime lastLogin) { ![3](assets/3.png)\n    this.lastLogin = lastLogin;\n  }\n\n  @Override\n  public int hashCode() { ![4](assets/4.png)\n    return Objects.hash(this.username,\n                        this.active,\n                        this.lastLogin);\n  }\n\n  @Override\n  public boolean equals(Object obj) { ![5](assets/5.png)\n    if (this == obj) {\n      return true;\n    }\n\n    if (obj == null || getClass() != obj.getClass()) {\n      return false;\n    }\n\n    User other = (User) obj;\n    return Objects.equals(this.username, other.username)\n           && this.active == other.active\n           && Objects.equals(this.lastLogin, other.lastLogin);\n  }\n\n  @Override\n  public String toString() { ![5](assets/5.png)\n    return new StringBuilder().append(\"User [username=\")\n                              .append(this.username)\n                              .append(\", active=\")\n                              .append(this.active)\n                              .append(\", lastLogin=\")\n                              .append(this.lastLogin)\n                              .append(\"]\")\n                              .toString();\n  }\n}\n```", "```java\npublic final class User {\n\n  private final String username; ![1](assets/1.png)\n  private final boolean active;\n  private final LocalDateTime lastLogin;\n\n  public User(String username,\n              boolean active,\n              LocalDateTime lastLogin) { ![2](assets/2.png)\n    this.username = username;\n    this.active = active;\n    this.lastLogin = lastLogin;\n  }\n\n  public String getUsername() { ![3](assets/3.png)\n    return this.username;\n  }\n\n  public boolean isActive() { ![3](assets/3.png)\n    return this.active;\n  }\n\n  public LocalDateTime getLastLogin() { ![3](assets/3.png)\n    return this.lastLogin;\n  }\n\n  @Override\n  public int hashCode() { ![4](assets/4.png)\n    // UNCHANGED\n  }\n\n  @Override\n  public boolean equals(Object obj) { ![4](assets/4.png)\n    // UNCHANGED\n  }\n\n  @Override\n  public String toString() { ![4](assets/4.png)\n    // UNCHANGED\n  }\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n  // NO BODY\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n  // NO BODY\n}\n```", "```java\n// HEADER\n[visibility] record [Name][<optional generic types>]([data components]) {\n  // BODY\n}\n```", "```java\n// IMMUTABLE POJO\n\npublic final class User {\n  public User(java.lang.String, boolean, java.time.LocalDateTime);\n  public java.lang.String getUsername();\n  public boolean isActive();\n  public java.time.LocalDateTime getLastLogin();\n\n  public int hashCode();\n  public boolean equals(java.lang.Object);\n  public java.lang.String toString();\n}\n\n// RECORD\n\npublic final class User extends java.lang.Record {\n  public User(java.lang.String, boolean, java.time.LocalDateTime);\n  public java.lang.String username();\n  public boolean active();\n  public java.time.LocalDateTime lastLogin();\n\n  public final int hashCode();\n  public final boolean equals(java.lang.Object);\n  public final java.lang.String toString();\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n  // NO BODY\n}\n\nvar user = new User(\"ben\", true, LocalDateTime.now());\n\nvar username = user.username();\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n\n  @Override\n  public String username() {\n    if (this.username == null) {\n      return \"n/a\";\n    }\n\n    return this.username;\n  }\n}\n\nvar user = new User(null, true, LocalDateTime.now());\n\nvar username = user.username();\n// => n/a\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n\n  public User(String username,\n              boolean active,\n              LocalDateTime lastLogin) {\n\n    Objects.requireNonNull(username);\n    Objects.requireNonNull(lastLogin);\n\n    this.username = username;\n    this.active = active;\n    this.lastLogin = lastLogin;\n  }\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n\n  public User { ![1](assets/1.png)\n\n    Objects.requireNonNull(username);\n    Objects.requireNonNull(lastLogin);\n\n    username = username.toLowerCase(); ![2](assets/2.png)\n\n    ![3](assets/3.png)\n  }\n}\n```", "```java\nUser[username=ben, active=true, lastLogin=2023-01-11T13:32:16.727249646]\n```", "```java\npublic record Container<T>(T content,\n                           String identifier) {\n  // NO BODY\n}\n\nContainer<String> stringContainer = new Container<>(\"hello, String!\",\n                                                    \"a String container\");\n\nString content = stringContainer.content();\n```", "```java\npublic record User(@NonNull String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n  // NO BODY\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   LocalDateTime lastLogin) {\n\n  public boolean hasLoggedInAtLeastOnce() {\n    return this.lastLogin != null;\n  }\n}\n```", "```java\npublic interface Origin {\n\n  int x(); ![1](assets/1.png)\n  int y(); ![1](assets/1.png)\n\n  default String origin() { ![2](assets/2.png)\n    return String.format(\"(%d/%d)\", x(), y());\n  }\n}\n\npublic interface Area {\n\n  float area(); ![3](assets/3.png)\n}\n\n// DIFFERENT RECORDS IMPLEMENTING INTERFACES\n\npublic record Point(int x, int y) implements Origin {\n  // NO BODY\n}\n\npublic record Rectangle(int x, int y, int width, int height)\n  implements Origin, Area {\n\n  public float area() { ![3](assets/3.png)\n    return (float) (width() * height());\n  }\n}\n\npublic record Circle(int x, int y, int radius)\n  implements Origin, Area {\n\n  public float area() { ![3](assets/3.png)\n    return (float) Math.PI * radius() * radius();\n  }\n}\n```", "```java\npublic record Origin(int x, int y) {\n  // NO BODY\n}\n\npublic record Rectangle(Origin origin, int width, int height) {\n  // NO BODY\n}\n\nvar rectangle = new Rectangle(new Origin(23, 42), 300, 400);\n```", "```java\npublic record Origin(int x, int y) {\n\n  public Origin() {\n    this(0, 0);\n  }\n}\n\npublic record Rectangle(Origin origin, int width, int height) {\n\n  public Rectangle(int x, int y, int width, int height) { ![1](assets/1.png)\n    this(new Origin(x, y), width, height);\n\n  }\n\n  public Rectangle(int width, int height) { ![2](assets/2.png)\n    this(new Origin(), width, height);\n  }\n\n  // ...\n}\n\nvar rectangle = new Rectangle(23, 42, 300, 400);\n// => Rectangle[origin=Origin[x=23, y=42], width=300, height=400]\n```", "```java\npublic record Rectangle(Origin origin, int width, int height) {\n\n  public static Rectangle atX(int x, int width, int height) {\n    return new Rectangle(x, 0, width, height);\n  }\n\n  public static Rectangle atY(int y, int width, int height) {\n    return new Rectangle(0, y, width, height);\n  }\n\n  // ...\n}\n\nvar xOnlyRectangle = Rectangle.atX(23, 300, 400);\n// => Rectangle[origin=Origin[x=23, y=0], width=300, height=400]\n```", "```java\npublic record Origin(int x, int y) {\n\n    public static Origin ZERO = new Origin(0, 0);\n}\n```", "```java\npublic final class UserBuilder {\n\n  private final String username;\n\n  private boolean       active;\n  private LocalDateTime lastLogin;\n\n  public UserBuilder(String username) {\n    this.username = username;\n    this.active = true; ![1](assets/1.png)\n  }\n\n  public UserBuilder active(boolean isActive) { ![2](assets/2.png)\n    if (this.active == false) { ![3](assets/3.png)\n      throw new IllegalArgumentException(\"...\");\n    }\n\n    this.active = isActive;\n    return this; ![4](assets/4.png)\n  }\n\n  public UserBuilder lastLogin(LocalDateTime lastLogin) { ![5](assets/5.png)\n    this.lastLogin = lastLogin;\n    return this;\n  }\n\n  public User build() { ![6](assets/6.png)\n    return new User(this.username, this.active, this.lastLogin);\n  }\n}\n\nvar builder = new UserBuilder(\"ben\").active(false) ![7](assets/7.png)\n                                    .lastLogin(LocalDateTime.now());\n\n// ...\n\nvar user = builder.build(); ![8](assets/8.png)\n```", "```java\npublic record User(long id,\n                   String username,\n                   boolean active,\n                   Optional<LocalDateTime> lastLogin) {\n\n  public static final class Builder {\n    // ...\n  }\n}\n\nvar builder = new User.Builder(\"ben\");\n```", "```java\npublic record NeedsValidation(int x, int y) {\n\n  public NeedsValidation {\n    if (x < y) {\n      throw new IllegalArgumentException(\"x must be equal or greater than y\");\n    }\n  }\n}\n```", "```java\npublic record Time(int minutes, int seconds) {\n\n  public Time {\n    if (seconds >= 60) {\n      int additionalMinutes = seconds / 60;\n      minutes += additionalMinutes;\n      seconds -= additionalMinutes * 60;\n    }\n  }\n}\n\nvar time = new Time(12, 67);\n// => Time[minutes=13, seconds=7]\n```", "```java\npublic record IncreaseImmutability(List<String> values) {\n\n  public IncreaseImmutability {\n    values = Collections.unmodifiableList(values);\n  }\n}\n```", "```java\npublic record Point(int x, int y) {\n\n  public Point withX(int newX) {\n    return new Point(newX, y());\n  }\n\n  public Point withY(int newY) {\n    return new Point(x(), newY);\n  }\n}\n\nvar point = new Point(23, 42);\n// => Point[x=23, y=42]\n\nvar newPoint = point.withX(5);\n// => Point[x=5, y=42]\n```", "```java\npublic record Point(int x, int y) {\n\n  public With with() {\n    return new With(this);\n  }\n\n  public record With(Point source) {\n\n    public Point x(int x) {\n      return new Point(x, source.y());\n    }\n\n    public Point y(int y) {\n      return new Point(source.x(), y);\n    }\n  }\n}\n\nvar sourcePoint = new Point(23, 42);\n\nvar modifiedPoint = sourcePoint.with().x(5);\n```", "```java\npublic record Point(int x, int y) {\n\n  public static final class Builder {\n\n    private int x;\n    private int y;\n\n    public Builder(Point point) {\n      this.x = point.x();\n      this.y = point.y();\n    }\n\n    public Builder x(int x) {\n      this.x = x;\n      return this;\n    }\n\n    public Builder y(int y) {\n      this.y = y;\n      return this;\n    }\n\n    public Point build() {\n      return new Point(this.x, this.y);\n    }\n  }\n}\n\nvar original = new Point(23, 42);\n\nvar updated = new Point.Builder(original)\n                       .x(5)\n                       .build();\n```", "```java\n@RecordBuilder\npublic record Point(int x, int y) {\n  // NO BODY\n}\n\n// GENERAL BUILDER\nvar original = PointBuilder.builder()\n                           .x(5)\n                           .y(23)\n                           .build();\n\n// COPY BUILDER\nvar modified = PointBuilder.builder(original)\n                           .x(12)\n                           .build();\n```", "```java\n@RecordBuilder\npublic record Point(int x, int y) implements PointBuilder.With {\n  // NO BODY\n}\n\nvar original = new Point(5, 23);\n\n// SINGLE CHANGE\nvar modified1 = original.withX(12);\n\n// MULTI-CHANGE VIA BUILDER\nvar modified2 = original.with()\n                        .x(12)\n                        .y(21)\n                        .build()\n\n// MULTI-CHANGE VIA CONSUMER (doesn't require calling build())\nvar modified3 = original.with(builder -> builder.x(12)\n                                                .y(21));\n```", "```java\nMap<Integer, List<String>> albumns =\n  Map.of(1990, List.of(\"Bossanova\", \" Listen Without Prejudice\"),\n         1991, List.of(\"Nevermind\", \"Ten\", \"Blue lines\"),\n         1992, List.of(\"The Chronic\", \"Rage Against the Machine\"),\n         1993, List.of(\"Enter the Wu-Tang (36 Chambers)\"),\n         ...\n         1999, List.of(\"The Slim Shady LP\", \"Californication\", \"Play\"));\n```", "```java\npublic List<String> filterAlbums(Map<Integer, List<String>> albums,\n                                 int minimumYear) {\n\n  return albums.entrySet()\n               .stream()\n               .filter(entry -> entry.getKey() >= minimumYear) ![1](assets/1.png)\n               .sorted(Comparator.comparing(Map.Entry::getKey)) ![2](assets/2.png)\n               .map(Map.Entry::getValue) ![3](assets/3.png)\n               .flatMap(List::stream) ![4](assets/4.png)\n               .toList(); ![5](assets/5.png)\n}\n```", "```java\npublic record AlbumsPerYear(int year, List<String> titles) { ![1](assets/1.png)\n\n  public AlbumsPerYear(Map.Entry<Integer, List<String>> entry) { ![2](assets/2.png)\n    this(entry.getKey(), entry.getValue());\n  }\n\n  public static Predicate<AlbumsPerYear> minimumYear(int year) { ![3](assets/3.png)\n    return albumsPerYear -> albumsPerYear.year() >= year;\n  }\n\n  public static Comparator<AlbumsPerYear> sortByYear() { ![4](assets/4.png)\n    return Comparator.comparing(AlbumsPerYear::year);\n  }\n}\n```", "```java\npublic List<String> filterAlbums(Map<Integer, List<String>> albums,\n                                 int minimumYear) {\n\n  record AlbumsPerYear(int year, List<String> titles) { ![1](assets/1.png)\n    // ...\n  }\n\n  return albums.entrySet()\n               .stream()\n               .map(AlbumsPerYear::new) ![2](assets/2.png)\n               .filter(AlbumsPerYear.minimumYear(minimumYear)) ![3](assets/3.png)\n               .sorted(AlbumsPerYear.sortByYear()) ![3](assets/3.png)\n               .map(AlbumsPerYear::titles) ![3](assets/3.png)\n               .flatMap(List::stream) ![4](assets/4.png)\n               .toList();\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   Optional<String> group,\n                   LocalDateTime lastLogin) {\n  // NO BODY\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   Optional<String> group,\n                   LocalDateTime lastLogin) {\n\n  public User {\n    Objects.requireNonNull(group, \"Optional<String> group must not be null\");\n  }\n}\n```", "```java\npublic record User(String username,\n                   boolean active,\n                   Optional<String> group,\n                   LocalDateTime lastLogin) {\n\n  public User(String username,\n              boolean active,\n              String group,\n              LocalDateTime lastLogin) {\n    this(username,\n         active,\n         Optional.ofNullable(group),\n         lastLogin);\n  }\n\n  // ...\n}\n```", "```java\npublic record Point(int x, int y) implements Serializable {\n  // NO BODY\n}\n\nvar point = new Point(23, 42);\n// => Point[x=23, y=42]\n\ntry (var out = new ObjectOutputStream(new FileOutputStream(\"point.data\"))) {\n  out.writeObject(point);\n}\n```", "```java\npublic record Point(int x, int y, int z) implements Serializable {\n  // NO BODY\n}\n```", "```java\nvar in = new ObjectInputStream(new FileInputStream(\"point.data\"));\n\nvar point = in.readObject();\n// => Point[x=23, y=42, z=0]\n```", "```java\npublic record Point(int z, int y, int x) implements Serializable {\n  // NO BODY\n}\n\nvar in = new ObjectInputStream(new FileInputStream(\"point.data\"));\n\nvar point = in.readObject();\n// => Point[z=0, y=42, x=23]\n```", "```java\npublic record Point(int x, int y) implements Serializable {\n  // NO BODY\n}\n\ntry (var out = new ObjectOutputStream(new FileOutputStream(\"point.data\"))) {\n  out.writeObject(new Point(23, 42));\n}\n\npublic record IdenticalPoint(int x, int y) implements Serializable {\n  // NO BODY\n}\n\nvar in = new ObjectInputStream(new FileInputStream(\"point.data\"));\nIdenticalPoint point = in.readObject();\n// Error:\n// incompatible types: java.lang.Object cannot be converted to IdenticalPoint\n```", "```java\n// PREVIOUSLY\n\nif (obj instanceof String) {\n  String str = (String) obj;\n  // ...\n}\n\n// JAVA 16+\n\nif (obj instanceof String str) {\n    // ...\n}\n```", "```java\n// WITHOUT SWITCH PATTERN MACTHING\n\nString formatted = \"unknown\";\nif (obj instanceof Integer i) {\n  formatted = String.format(\"int %d\", i);\n} else if (obj instanceof Long l) {\n  formatted = String.format(\"long %d\", l);\n} else if (obj instanceof String str) {\n  formatted = String.format(\"String %s\", str);\n}\n\n// WITH SWITCH PATTERN MATCHING\n\nString formatted = switch (obj) {\n  case Integer i -> String.format(\"int %d\", i);\n  case Long l    -> String.format(\"long %d\", l);\n  case String s  -> String.format(\"String %s\", s);\n  default        -> \"unknown\";\n};\n```", "```java\nrecord Point(int x, int y) {\n  // NO BODY\n};\n\nvar point = new Point(23, 42);\n\nif (point instanceof Point(int x, int y)) {\n  System.out.println(x + y);\n  // => 65\n}\n\nint result = switch (anyObject) {\n  case Point(var x, var y) -> x + y;\n  case Point3D(var x, var y, var z) -> x + y + z;\n  default -> 0.0;\n};\n```"]