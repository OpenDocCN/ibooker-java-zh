["```java\nfun fullName(customer: Customer) = \"${customer.givenName} ${customer.familyName}\"\n```", "```java\ndata class Customer(\n    val givenName: String,\n    val familyName: String\n) {\n    fun upperCaseGivenName() = givenName.toUpperCase()\n\n    val fullName get() = \"$givenName $familyName\"\n}\n```", "```java\nfun Customer.fullName() = \"$givenName $familyName\"\n\nval Customer.fullName get() = \"$givenName $familyName\"\n```", "```java\nprintln(\"hello\")\n```", "```java\nclass Customers {\n    fun save(data: CustomerData): Customer {\n        ...\n    }\n    fun find(id: String): Customer? {\n        ...\n    }\n}\n```", "```java\nfun requestRate(): Double {\n    ...\n}\n```", "```java\nclass Metrics(\n   ...\n) {\n\n    fun requestRate(): Double {\n        ...\n    }\n}\n```", "```java\npublic class CurrentTripsHandler {\n\n    private final ITrackTrips tracking;\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    public CurrentTripsHandler(ITrackTrips tracking) {\n        this.tracking = tracking;\n    }\n\n    public Response handle(Request request) {\n        try {\n            var customerId = request.getQueryParam(\"customerId\").stream()\n                .findFirst();\n            if (customerId.isEmpty())\n                return new Response(HTTP_BAD_REQUEST);\n            var currentTrip = tracking.currentTripFor(customerId.get());\n            return currentTrip.isPresent() ?\n                new Response(HTTP_OK,\n                    objectMapper.writeValueAsString(currentTrip)) :\n                new Response(HTTP_NOT_FOUND);\n        } catch (Exception x) {\n            return new Response(HTTP_INTERNAL_ERROR);\n        }\n    }\n}\n```", "```java\nclass Tracking implements ITrackTrips {\n\n    private final Trips trips;\n\n    public Tracking(Trips trips) {\n        this.trips = trips;\n    }\n\n    @Override\n    public Optional<Trip> currentTripFor(String customerId) {\n        var candidates = trips.currentTripsFor(customerId).stream()\n            .filter((trip) -> trip.getBookingStatus() == BOOKED)\n            .collect(toList());\n        if (candidates.size() == 1)\n            return Optional.of(candidates.get(0));\n        else if (candidates.size() == 0)\n            return Optional.empty();\n        else\n            throw new IllegalStateException(\n                \"Unexpectedly more than one current trip for \" + customerId\n            );\n    }\n}\n```", "```java\npublic class InMemoryTrips implements Trips {\n\n    ...\n    @Override\n    public Set<Trip> currentTripsFor(String customerId) {\n        return tripsFor(customerId).stream()\n            .filter(trip -> trip.isPlannedToBeActiveAt(clock.instant()))\n            .collect(toSet());\n    }\n}\n```", "```java\n@Override\npublic Set<Trip> currentTripsFor(String customerId) {\n    return tripsFor(customerId).stream()\n        .filter(trip -> {\n            Instant now = clock.instant();\n            return trip.isPlannedToBeActiveAt(now);\n        })\n        .collect(toSet());\n}\n```", "```java\n@Override\npublic Set<Trip> currentTripsFor(String customerId) {\n    var now = clock.instant();\n    return tripsFor(customerId).stream()\n        .filter(trip -> trip.isPlannedToBeActiveAt(now))\n        .collect(toSet());\n}\n```", "```java\npublic class TrackingTests {\n\n    final StoppedClock clock = new StoppedClock();\n\n    final InMemoryTrips trips = new InMemoryTrips(clock);\n    final Tracking tracking = new Tracking(trips);\n\n    @Test\n    public void returns_empty_when_no_trip_planned_to_happen_now() {\n        clock.now = anInstant();\n        assertEquals(\n            Optional.empty(),\n            tracking.currentTripFor(\"aCustomer\")\n        );\n    }\n\n    @Test\n    public void returns_single_active_booked_trip() {\n        var diwaliTrip = givenATrip(\"cust1\", \"Diwali\",\n            \"2020-11-13\", \"2020-11-15\", BOOKED);\n        givenATrip(\"cust1\", \"Christmas\",\n            \"2020-12-24\", \"2020-11-26\", BOOKED);\n\n        clock.now = diwaliTrip.getPlannedStartTime().toInstant();\n        assertEquals(\n            Optional.of(diwaliTrip),\n            tracking.currentTripFor(\"cust1\")\n        );\n    }\n\n    ...\n}\n```", "```java\npublic interface Trips {\n    ...\n    Set<Trip> currentTripsFor(String customerId);\n}\n```", "```java\npublic interface Trips {\n    ...\n    Set<Trip> currentTripsFor(String customerId, Instant at);\n}\n```", "```java\nclass Tracking implements ITrackTrips {\n    ...\n\n    @Override\n    public Optional<Trip> currentTripFor(String customerId) {\n        var candidates = trips.currentTripsFor(customerId, null) ![1](assets/1.png)\n            .stream()\n            .filter((trip) -> trip.getBookingStatus() == BOOKED)\n            .collect(toList());\n        if (candidates.size() == 1)\n            return Optional.of(candidates.get(0));\n        else if (candidates.size() == 0)\n            return Optional.empty();\n        else\n            throw new IllegalStateException(\n                \"Unexpectedly more than one current trip for \" + customerId\n            );\n    }\n}\n```", "```java\n@Override\npublic Optional<Trip> currentTripFor(String customerId, Instant at) { ![1](assets/1.png)\n    var candidates = trips.currentTripsFor(customerId, at) ![1](assets/1.png)\n        .stream()\n        .filter((trip) -> trip.getBookingStatus() == BOOKED)\n        .collect(toList());\n        ...\n}\n```", "```java\npublic Response handle(Request request) {\n    try {\n        var customerId = request.getQueryParam(\"customerId\").stream()\n            .findFirst();\n        if (customerId.isEmpty())\n            return new Response(HTTP_BAD_REQUEST);\n        var currentTrip = tracking.currentTripFor(customerId.get(), null); ![1](assets/1.png)\n        return currentTrip.isPresent() ?\n            new Response(HTTP_OK,\n                objectMapper.writeValueAsString(currentTrip)) :\n            new Response(HTTP_NOT_FOUND);\n    } catch (Exception x) {\n        return new Response(HTTP_INTERNAL_ERROR);\n    }\n}\n```", "```java\n@Test\npublic void returns_empty_when_no_trip_planned_to_happen_now() {\n    clock.now = anInstant();\n    assertEquals(\n        Optional.empty(),\n        tracking.currentTripFor(\"cust1\", null) ![1](assets/1.png)\n    );\n}\n\n@Test\npublic void returns_single_active_booked_trip() {\n    var diwaliTrip = givenATrip(\"cust1\", \"Diwali\",\n        \"2020-11-13\", \"2020-11-15\", BOOKED);\n    givenATrip(\"cust1\", \"Christmas\",\n        \"2020-12-24\", \"2020-11-26\", BOOKED);\n\n    clock.now = diwaliTrip.getPlannedStartTime().toInstant();\n    assertEquals(\n        Optional.of(diwaliTrip),\n        tracking.currentTripFor(\"cust1\", null) ![1](assets/1.png)\n    );\n}\n```", "```java\npublic class InMemoryTrips implements Trips {\n\n    ...\n    @Override\n    public Set<Trip> currentTripsFor(String customerId, Instant at) {\n        var now = clock.instant();\n        return tripsFor(customerId).stream()\n            .filter(trip -> trip.isPlannedToBeActiveAt(now))\n            .collect(toSet());\n    }\n}\n```", "```java\npublic class InMemoryTrips implements Trips {\n\n    ...\n    @Override\n    public Set<Trip> currentTripsFor(String customerId, Instant at) {\n        return tripsFor(customerId).stream()\n            .filter(trip -> trip.isPlannedToBeActiveAt(at))\n            .collect(toSet());\n    }\n}\n```", "```java\n@Test\npublic void returns_empty_when_no_trip_planned_to_happen_now() {\n    clock.now = anInstant();\n    assertEquals(\n        Optional.empty(),\n        tracking.currentTripFor(\"cust1\", null) ![1](assets/1.png)\n    );\n}\n\n@Test\npublic void returns_single_active_booked_trip() {\n    var diwaliTrip = givenATrip(\"cust1\", \"Diwali\",\n        \"2020-11-13\", \"2020-11-15\", BOOKED);\n    givenATrip(\"cust1\", \"Christmas\",\n        \"2020-12-24\", \"2020-11-26\", BOOKED);\n\n    clock.now = diwaliTrip.getPlannedStartTime().toInstant();\n    assertEquals(\n        Optional.of(diwaliTrip),\n        tracking.currentTripFor(\"cust1\", null) ![1](assets/1.png)\n    );\n}\n```", "```java\n@Test\npublic void returns_empty_when_no_trip_planned_to_happen_now() {\n    clock.now = anInstant();\n    assertEquals(\n        Optional.empty(),\n        tracking.currentTripFor(\"cust1\", clock.now)\n    );\n}\n\n@Test\npublic void returns_single_active_booked_trip() {\n    var diwaliTrip = givenATrip(\"cust1\", \"Diwali\",\n        \"2020-11-13\", \"2020-11-15\", BOOKED);\n    givenATrip(\"cust1\", \"Christmas\",\n        \"2020-12-24\", \"2020-11-26\", BOOKED);\n\n    clock.now = diwaliTrip.getPlannedStartTime().toInstant();\n    assertEquals(\n        Optional.of(diwaliTrip),\n        tracking.currentTripFor(\"cust1\", clock.now)\n    );\n}\n```", "```java\npublic class TrackingTests {\n\n    final InMemoryTrips trips = new InMemoryTrips();\n    final Tracking tracking = new Tracking(trips);\n\n    @Test\n    public void returns_empty_when_no_trip_planned_to_happen_now() {\n        assertEquals(\n            Optional.empty(),\n            tracking.currentTripFor(\"cust1\", anInstant())\n        );\n    }\n\n    @Test\n    public void returns_single_active_booked_trip() {\n        var diwaliTrip = givenATrip(\"cust1\", \"Diwali\",\n            \"2020-11-13\", \"2020-11-15\", BOOKED);\n        givenATrip(\"cust1\", \"Christmas\",\n            \"2020-12-24\", \"2020-11-26\", BOOKED);\n\n        assertEquals(\n            Optional.of(diwaliTrip),\n            tracking.currentTripFor(\"cust1\",\n                diwaliTrip.getPlannedStartTime().toInstant())\n        );\n    }\n\n    ...\n}\n```", "```java\npublic Response handle(Request request) {\n    try {\n        var customerId = request.getQueryParam(\"customerId\").stream()\n            .findFirst();\n        if (customerId.isEmpty())\n            return new Response(HTTP_BAD_REQUEST);\n        var currentTrip = tracking.currentTripFor(customerId.get(), null); ![1](assets/1.png)\n        return currentTrip.isPresent() ?\n            new Response(HTTP_OK,\n                objectMapper.writeValueAsString(currentTrip)) :\n            new Response(HTTP_NOT_FOUND);\n    } catch (Exception x) {\n        return new Response(HTTP_INTERNAL_ERROR);\n    }\n}\n```", "```java\npublic class CurrentTripsHandler {\n    private final ITrackTrips tracking;\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    public CurrentTripsHandler(ITrackTrips tracking) {\n        this.tracking = tracking;\n    }\n\n    public Response handle(Request request) {\n        try {\n            var customerId = request.getQueryParam(\"customerId\").stream()\n                .findFirst();\n            if (customerId.isEmpty())\n                return new Response(HTTP_BAD_REQUEST);\n            var currentTrip = tracking.currentTripFor(\n                customerId.get(),\n                Instant.now() ![1](assets/1.png)\n            );\n            return currentTrip.isPresent() ?\n                new Response(HTTP_OK,\n                    objectMapper.writeValueAsString(currentTrip)) :\n                new Response(HTTP_NOT_FOUND);\n        } catch (Exception x) {\n            return new Response(HTTP_INTERNAL_ERROR);\n        }\n    }\n}\n```", "```java\nclass InMemoryTrips : Trips {\n    private val trips: MutableMap<String, MutableSet<Trip>> = mutableMapOf()\n\n    fun addTrip(trip: Trip) {\n        val existingTrips = trips.getOrDefault(trip.customerId, mutableSetOf())\n        existingTrips.add(trip)\n        trips[trip.customerId] = existingTrips\n    }\n\n    override fun tripsFor(customerId: String) =\n        trips.getOrDefault(customerId, emptySet<Trip>())\n\n    override fun currentTripsFor(customerId: String, at: Instant): Set<Trip> =\n        tripsFor(customerId)\n            .filter { it.isPlannedToBeActiveAt(at) }\n            .toSet()\n}\n```"]