- en: Chapter 9\. Testing Spring Boot Applications for Increased Production Readiness
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。测试Spring Boot应用程序以提高生产就绪性
- en: This chapter discusses and demonstrates core aspects of testing Spring Boot
    applications. While the subject of testing has numerous facets, I focus upon the
    fundamental elements of testing Spring Boot applications that dramatically improve
    the production readiness of each application. Topics include unit testing, holistic
    application testing using `@SpringBootTest`, how to write effective unit tests
    using JUnit, and using Spring Boot testing slices to isolate test subjects and
    streamline testing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论和演示了测试Spring Boot应用程序的核心方面。尽管测试的主题有许多方面，但我专注于测试Spring Boot应用程序的基本元素，这些元素显著提高了每个应用程序的生产就绪性。主题包括单元测试，使用
    `@SpringBootTest` 编写有效单元测试的方法，以及使用Spring Boot测试切片来隔离测试对象并简化测试。
- en: Code Checkout Checkup
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检出检查
- en: Please check out branch *chapter9begin* from the code repository to begin.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看代码库中的分支 *chapter9begin* 以开始。
- en: Unit Testing
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Unit testing serves as a precursor to other types of application testing for
    good reason: unit testing enables a developer to find and fix bugs at the earliest
    possible stages of the develop+deploy cycle and as a result, to fix them at the
    lowest possible cost.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试作为其他类型应用程序测试的前导，是有充分理由的：单元测试使开发人员能够在开发+部署周期的最早阶段发现和修复错误，并因此以最低的成本修复它们。
- en: Simply put, *unit testing* involves validating a defined unit of code isolated
    to the maximum possible and sensible extent. A test’s number of outcomes increases
    exponentially with size and complexity; reducing the amount of functionality within
    each unit test makes each one more manageable, thus increasing the likelihood
    that all likely and/or possible outcomes are considered.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，*单元测试* 包括验证一个定义的代码单元，尽可能和合理地隔离。随着大小和复杂性的增加，测试的结果数量呈指数增长；减少每个单元测试中的功能量使得每个测试更加可管理，从而增加考虑所有可能结果的可能性。
- en: Only once unit testing is implemented successfully and sufficiently should integration
    testing, UI/UX testing, and so on be added to the mix. Fortunately Spring Boot
    incorporates features to simplify and streamline unit testing and includes those
    capabilities in every project built using the Spring Initializr by default, making
    it easy for developers to get started quickly and “do the right thing”.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在成功且足够地实现了单元测试后，才应将集成测试、UI/UX测试等加入混合中。幸运的是，Spring Boot集成了简化和优化单元测试的功能，并默认在每个使用Spring
    Initializr构建的项目中包含这些功能，使得开发人员能够快速入门并“做正确的事情”。
- en: Introducing @SpringBootTest
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 @SpringBootTest
- en: So far I’ve primarily focused on the code under *src/main/java* in projects
    created using the Spring Initializr, beginning with the main application class.
    In every Initializr-spawned Spring Boot application, however, there is a corresponding
    *src/**test**/java* directory structure with a single pre-created (but as yet
    empty) test.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我主要关注了使用Spring Initializr创建的项目中 *src/main/java* 下的代码，从主应用程序类开始。然而，在每个Initializr生成的Spring
    Boot应用程序中，还有一个相应的 *src/**test**/java* 目录结构，并且有一个预先创建的（但尚空）测试文件。
- en: Named to correspond with the main application class as well — for example, if
    the main app class is named `MyApplication`, the main test class will be `MyApplicationTest` — this
    default 1:1 correlation helps with both organization and consistency. Within the
    test class, the Initializr creates a single test method, empty to provide a clean
    start and so that development begins with a clean build. You can add more test
    methods, or more typically create additional test classes to parallel other application
    classes and create 1+ test methods within each.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 也命名为与主应用程序类相对应 - 例如，如果主应用程序类命名为 `MyApplication`，则主测试类将是 `MyApplicationTest`
    - 这种默认的1：1对应有助于组织和保持一致性。在测试类内部，Initializr创建一个单一的测试方法，为空以提供清洁的起点，以便开发从干净的构建开始。您可以添加更多的测试方法，或者更通常地创建其他测试类以并行其他应用程序类，并在每个类中创建1个或多个测试方法。
- en: Normally I would encourage Test Driven Development (TDD) in which tests are
    written first and code is written to (and only to) make tests pass. Since I firmly
    believe key aspects of Spring Boot are important to understand prior to the introduction
    of how Boot handles testing, I trust the reader will indulge my delay in introducing
    this chapter’s material until foundational topics were addressed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我会鼓励测试驱动开发（TDD），即先编写测试，然后编写代码使测试通过。由于我坚信在介绍Spring Boot如何处理测试之前，先理解Spring
    Boot的关键方面非常重要，所以我相信读者会容许我在介绍本章材料之前延迟的做法。
- en: With that in mind, let’s return to the Aircraft Positions application and write
    some tests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们回到飞机位置应用程序并编写一些测试。
- en: In order to demonstrate the broadest swath of testing features enabled by Spring
    Boot in the clearest and most concise manner, I return to the JPA version of AircraftPositions
    and use it as the foundation for this chapter’s focus on testing. There are a
    few other testing-related topics that offer variations on a theme, complementary
    to this chapter’s content without being represented within its project; these
    related topics will be covered in an upcoming chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以最清晰、最简洁的方式展示Spring Boot提供的广泛的测试功能，我回到了使用JPA版本的AircraftPositions，并将其作为本章测试重点的基础。还有一些其他与测试相关的主题，它们在本项目中没有被完全体现，但会在接下来的章节中进行介绍。
- en: Important Unit Tests for the Aircraft Positions Application
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 飞机位置应用的重要单元测试
- en: 'Within AircraftPositions there is currently only one class with what might
    be considered interesting behavior. `PositionController` exposes an API to provide
    current aircraft positions to the end user directly or via web interface and within
    that API may perform actions including:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在AircraftPositions中，目前只有一个类具有可以被视为有趣行为的类。`PositionController`公开了一个API，直接或通过Web界面向最终用户提供当前飞机位置，并且该API可能执行包括以下操作的动作：
- en: Fetching current aircraft positions from PlaneFinder
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从PlaneFinder获取当前飞机位置
- en: Storing the positions in a local database
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将位置存储在本地数据库中
- en: Retrieving the positions from the local database
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地数据库检索位置
- en: Returning current positions directly or by adding them to the document `Model`
    for a web page
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接返回当前位置或通过将它们添加到文档的`Model`以供网页使用
- en: Ignoring for the moment the fact that this functionality interacts with an external
    service, it also touches every layer of the application stack from user interface
    to data storage and retrieval. Recalling that a good testing approach should isolate
    and test small, cohesive bits of functionality, it’s clear that an iterative approach
    to testing is in order, moving stepwise from the current state of code and no
    tests toward an eventual endstate of optimized application organization and testing.
    In this way, it accurately reflects typical production-targeted projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 暂且忽略该功能与外部服务交互的事实，它还触及从用户界面到数据存储和检索的应用程序堆栈的每一层。回顾一个良好的测试方法应该隔离和测试小而紧密功能块的原则，很明显，需要采取迭代的测试方法，从当前代码状态和没有测试的状态向最终优化应用程序组织和测试的状态迈进。这种方法准确反映了典型的面向生产的项目。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Since applications in use are never really *done*, neither is testing. As an
    application’s code evolves, tests must also be reviewed and potentially revised,
    removed, or added to maintain testing effectiveness.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于正在使用的应用程序实际上从未真正“完成”，因此测试也永远不会“完成”。随着应用程序代码的演变，必须审查测试并可能进行修订、删除或添加，以保持测试效果。
- en: I begin by creating a test class that parallels the `PositionController` class.
    The mechanism for creating a test class differs between IDEs, and of course it’s
    possible to manually create one as well. Since I primarily use IntelliJ IDEA for
    development, I use the `CMD+N` keyboard shortcut or click the right mouse button
    and then “Generate” to open the Generate menu, then select the “Test…” option
    to create a test class. IntelliJ then presents the popup shown in [Figure 9-1](#create_test_popup_init_from_PositionController_Class).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先创建了一个与`PositionController`类相似的测试类。不同的IDE之间创建测试类的机制不同，当然也可以手动创建。由于我主要使用IntelliJ
    IDEA进行开发，我使用`CMD+N`键盘快捷键或右键单击，然后选择“Generate”打开Generate菜单，然后选择“Test…”选项来创建测试类。IntelliJ随后显示如[图9-1](#create_test_popup_init_from_PositionController_Class)所示的弹出窗口。
- en: '![sbur 0901](Images/sbur_0901.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0901](Images/sbur_0901.png)'
- en: Figure 9-1\. Create Test popup initiated from PositionController Class
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-1\. 从PositionController类发起的创建测试弹出窗口
- en: 'From the *Create Test* popup, I keep the default “Testing library” option setting
    of JUnit 5\. Since Spring Boot version 2.2 became generally available (GA), JUnit
    version 5 has been the default for Spring Boot application unit tests. Many other
    options are supported — including JUnit 3 and 4, Spock, and TestNG among others — but
    JUnit 5 with its Jupiter engine is a powerful option that offers several capabilities:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从*创建测试*弹出窗口中，我保留了默认的“测试库”选项设置为JUnit 5。自从Spring Boot版本2.2正式发布以来，JUnit版本5一直是Spring
    Boot应用程序单元测试的默认选项。还支持许多其他选项，包括JUnit 3和4、Spock和TestNG等，但是JUnit 5及其Jupiter引擎是一个强大的选项，提供了几种功能：
- en: Better testing of Kotlin code (compared to previous versions)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地测试Kotlin代码（与以前的版本相比）
- en: More efficient once-only instantiation/configuration/cleanup of a test class
    for all contained tests, using `@BeforeAll` and `@AfterAll` method annotations
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有包含的测试进行一次性实例化/配置/清理测试类更加高效，使用`@BeforeAll`和`@AfterAll`方法注解。
- en: Support for both JUnit 4 and 5 tests (unless JUnit 4 is specifically excluded
    from dependencies)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持JUnit 4和5测试（除非明确排除了JUnit 4的依赖项）
- en: JUnit 5’s Jupiter engine is the default, with the vintage engine provided for
    backward compatibility with JUnit 4 unit tests.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 5的Jupiter引擎是默认的，提供了旧版引擎以向后兼容JUnit 4单元测试。
- en: I keep the suggested class name of `PositionControllerTest`, check the boxes
    to generate `setup/@Before` and `tearDown/@After` methods, and check the box to
    generate a test method for the `getCurrentAircraftPositions()` method as shown
    in [Figure 9-2](#create_test_popup_with_desired_options_selected).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我保留了建议的类名`PositionControllerTest`，选中了生成`setup/@Before`和`tearDown/@After`方法的复选框，并选中了在[Figure 9-2](#create_test_popup_with_desired_options_selected)中显示的生成`getCurrentAircraftPositions()`方法的测试方法的复选框。
- en: '![sbur 0902](Images/sbur_0902.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0902](Images/sbur_0902.png)'
- en: Figure 9-2\. Create Test popup with Desired Options Selected
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9-2\. 选择所需选项创建测试弹出窗口
- en: 'Once I click the OK button, IntelliJ creates the `PositionControllerTest` class
    with the chosen methods and opens it in the IDE, as shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击OK按钮，IntelliJ将创建`PositionControllerTest`类，并打开IDE，如下所示：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To get a running start on building a test suite after-the-fact, I begin by
    simply reproducing to the extent possible the existing operation of the `PositionController`
    method `getCurrentAircraftPositions()` within the same (literal) context it already
    successfully runs: the Spring Boot `ApplicationContext`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在事后尽快构建测试套件，我首先仅仅尽可能地复制了`PositionController`方法`getCurrentAircraftPositions()`的现有操作，其上下文与其已成功运行的相同（字面上的）上下文：Spring
    Boot `ApplicationContext`。
- en: 'I begin by adding the `@SpringBootTest` annotation at the class level. Since
    the initial goal is to reproduce as closely as possible the behavior present when
    the application executes, I specify the option to start an embedded server and
    have it listen on a random port. To test the web API, I plan to use the `WebTestClient`,
    which is similar to the `WebClient` used in the application but with a focus on
    testing:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先在类级别添加了`@SpringBootTest`注解。由于最初的目标是尽可能地重现应用程序执行时存在的行为，我指定了一个选项来启动一个嵌入式服务器，并让其监听一个随机端口。为了测试Web
    API，我计划使用`WebTestClient`，它类似于应用程序中使用的`WebClient`，但专注于测试：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With only one unit test so far and no setup/teardown yet required, I turn attention
    to the test method for `getCurrentAircraftPositions()`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前只有一个单元测试，还没有设置/拆卸所需的内容，我把注意力转向了`getCurrentAircraftPositions()`测试方法：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first thing of note is that I autowire a `WebTestClient` bean for use within
    the method. This minimal effort on my part is all that is required to inject a
    `WebTestClient` bean from the `ApplicationContext`, due to the `@AutoConfigureWebTestClient`
    annotation I placed at the class level instructing Spring Boot to create and automatically
    configure a `WebTestClient`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的第一件事是，我为方法内部自动装配了一个`WebTestClient` bean。我所做的这点极少，仅需使用`@AutoConfigureWebTestClient`注解即可，该注解放置在类级别，指示Spring
    Boot创建并自动配置`WebTestClient`。
- en: The single statement that is the entirety of the `@Test` method is an assertion
    that evaluates the expression that immediately follows. For the first iteration
    of this test, I use Java’s `assert` to verify that final result of the chain of
    operations on the client is a `boolean` true value, thus resulting in a passing
    test.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`@Test`方法的全部内容是评估紧随其后的表达式的断言语句。对于这个测试的第一次迭代，我使用Java的`assert`来验证客户端操作链的最终结果是一个`boolean`
    true值，因此测试通过。
- en: The expression itself uses the injected `WebTestClient` bean, issuing a `GET`
    on the local endpoint */aircraft* serviced by the `PositionController`’s `getCurrentAircraftPositions()`
    method. Once the request/response exchange takes place, the HTTP status code is
    checked for a response of “OK” (200), the response body is verified to contain
    an `Iterable`, and the response is retrieved. Since the response consists of an
    `Iterable`, I use an `Iterator` to determine if there is at least one value contained
    within the `Iterable`. If so, the test passes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式本身使用了注入的 `WebTestClient` bean，在 `PositionController` 的 `getCurrentAircraftPositions()`
    方法上发出 `GET` 请求到本地端点 */aircraft*。一旦请求/响应交换完成，将检查 HTTP 状态码以确保响应是“OK”（200），验证响应体是否包含一个
    `Iterable`，并获取响应。由于响应包含一个 `Iterable`，因此我使用 `Iterator` 来确定 `Iterable` 中是否至少包含一个值。如果是，测试通过。
- en: Warning
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: There are at least a couple small compromises in the current test. First, the
    test as currently written will fail if the external service that supplies aircraft
    positions (PlaneFinder) is unavailable, even if all code being tested in AircraftPositions
    is correct. This means that the test is not testing only the functionality it
    targets, but much more. Second, the extent of the test is somewhat limited since
    I test only that an Iterable is returned with 1+ element(s) and perform no examination
    of the element(s) themselves. This means that returning one element of any kind
    in an `Iterable`, or valid element(s) with invalid values, will result in a passing
    test. I’ll remedy all of these shortcomings in iterations to follow.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当前测试中至少有几个小的妥协。首先，按照当前的编写方式，如果供应飞机位置的外部服务（PlaneFinder）不可用，测试将失败，即使 AircraftPositions
    中被测试的所有代码都是正确的。这意味着测试不仅仅是测试其目标功能，而是测试了更多内容。其次，由于我仅测试返回带有 1 个或多个元素的可迭代对象，并未检查元素本身，因此测试的范围有些有限。这意味着在
    `Iterable` 中返回任何一种类型的元素，或者是带有无效值的有效元素，都将导致测试通过。我将在接下来的迭代中解决所有这些缺点。
- en: Executing the test provides results similar to those shown in [Figure 9-3](#first_test_passed_fig),
    indicating that the test passed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 执行测试会提供与[图 9-3](#first_test_passed_fig)类似的结果，表明测试已通过。
- en: '![sbur 0903](Images/sbur_0903.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0903](Images/sbur_0903.png)'
- en: Figure 9-3\. First test passed
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-3\. 第一个测试通过
- en: This is a good start, but even this single test can be improved significantly.
    Let’s clean up this test before further expanding our unit testing mandate.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始，但是甚至这一个单一的测试也可以显著改进。在扩展我们的单元测试授权之前，让我们清理一下这个测试。
- en: Refactoring for Better Testing
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为了更好的测试重构
- en: In the vast majority of cases, loading an entire `ApplicationContext` with embedded
    server and all capabilities present in the application to run a handful of tests
    is overkill. As mentioned before, unit tests should be focused and to the extent
    possible, self-contained. The smaller the surface area and fewer the external
    dependencies, the more targeted the tests can be. This laserlike focus offers
    several benefits, including fewer overlooked scenarios/outcomes, greater potential
    specificity and rigor in testing, more readable and thus understandable tests,
    and no less importantly speed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，为了运行少量测试而加载带有嵌入式服务器和应用程序中所有功能的`ApplicationContext`是不合适的。正如前面提到的，单元测试应该专注于并在可能的范围内尽可能自包含。表面积越小，外部依赖越少，测试的目标性就越强。这种激光般的关注带来了几个好处，包括更少的被忽视的场景/结果，更高的测试特异性和严谨性，更可读因此更易理解的测试，以及同样重要的速度。
- en: I mentioned earlier that it’s counterproductive to write low- and no-value tests,
    although what that means is dependent upon context. One thing that can discourage
    developers from adding useful tests, however, is the amount of time it can take
    to execute the test suite. Once a certain threshold is reached — and such boundary
    is also context dependent — a developer may hesitate to add to the already significant
    time burden required to get a clean build. Fortunately Spring Boot has several
    means to simultaneously increase test quality and decrease test execution times.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过写低价值和无价值的测试是适得其反的，尽管这意味着什么是依赖于上下文的。然而，有一件事可能会阻止开发人员添加有用的测试，那就是执行测试套件所需的时间。一旦达到某个阈值，这种边界也与上下文有关，开发人员可能会因为增加已经显著的构建时间负担而犹豫不前。幸运的是，Spring
    Boot 有几种方法可以同时提高测试质量和减少测试执行时间。
- en: 'If no calls using `WebClient` or `WebTestClient` were required to fulfill the
    demands of AircraftPosition’s API, the next logical step would likely be to remove
    the `webEnvironment` parameter within the class-level `@SpringBootTest` annotation.
    This would result in a basic `ApplicationContext` being loaded for the `PositionControllerTest`
    class’s tests using a `MOCK` web environment, reducing the footprint and load
    time required. Since `WebClient` is a key part of the API and thus `WebTestClient`
    becomes the best way to test it, I instead replace the `@SpringBootTest` and `@AutoConfigureWebTestClient`
    class-level annotations with `@WebFluxTest` to streamline the `ApplicationContext`
    while autoconfiguring and providing access to the `WebTestClient`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要使用 `WebClient` 或 `WebTestClient` 来满足 `AircraftPosition` API 的需求，下一个合乎逻辑的步骤可能是移除类级别
    `@SpringBootTest` 注解中的 `webEnvironment` 参数。这将导致在 `PositionControllerTest` 类的测试中加载一个基本的
    `ApplicationContext`，使用 `MOCK` web 环境，从而减少所需的占用空间和加载时间。由于 `WebClient` 是 API 的关键部分，因此
    `WebTestClient` 成为测试它的最佳方式，我将用 `@WebFluxTest` 替换类级别的 `@SpringBootTest` 和 `@AutoConfigureWebTestClient`
    注解，以简化 `ApplicationContext` 的同时自动配置并提供 `WebTestClient` 访问：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One other thing of note with the `@WebFluxTest` annotation: among other things,
    it can accept a parameter of `controllers` pointing to an array of `@Controller`
    bean types to be instantiated for use by the annotated test class. The actual
    `controllers =` portion can be omitted, as I have, leaving only the array of `@Controller`
    classes — in this case only the one, `PositionController`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点需要注意的是 `@WebFluxTest` 注解：除其他事项外，它还可以接受一个 `controllers` 参数，指向要为注解测试类实例化的
    `@Controller` bean 类型数组。实际上可以省略 `controllers =` 部分，正如我所做的那样，只留下 `@Controller`
    类型的数组，本例中仅有一个 `PositionController`。
- en: Revisiting the code to isolate behavior
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新审视代码以隔离行为
- en: 'As mentioned earlier, the code for `PositionController` does several things,
    including making multiple database calls and directly using `WebClient` to access
    an external service. In order to better isolate the API from underlying actions
    so mocking becomes more granular and thus both easier and clearer, I refactor
    `PositionController` to remove direct definition and use of a `WebClient` and
    move the entirety of the `getCurrentAircraftPositions()` method’s logic to a `PositionRetriever`
    class, which is then injected into and used by `PositionController`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，`PositionController` 的代码涉及多次数据库调用，并直接使用 `WebClient` 访问外部服务。为了更好地隔离 API
    和底层操作，使 mocking 更精细、更容易和更清晰，我重构了 `PositionController`，移除了直接定义和使用 `WebClient` 的部分，并将
    `getCurrentAircraftPositions()` 方法的整体逻辑移到 `PositionRetriever` 类中，然后注入到并由 `PositionController`
    使用：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first mock-ready version of `PositionRetriever` largely consists of the
    code that had previously been in `PositionController`. The primary goal for this
    step is to facilitate mocking of the `retrieveAircraftPositions()` method; by
    removing this logic from the `getCurrentAircraftPositions()` method in `PositionController`,
    an upstream call can be mocked instead of the web API, thus enabling testing of
    the `PositionController`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个可模拟版本的 `PositionRetriever` 主要由先前在 `PositionController` 中的代码组成。这一步的主要目标是便于模拟
    `retrieveAircraftPositions()` 方法；通过将这段逻辑从 `PositionController` 的 `getCurrentAircraftPositions()`
    方法中移除，可以模拟上游调用而不是 web API，从而实现对 `PositionController` 的测试：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With these changes to the code, the existing testing can be revised to isolate
    the Aircraft Positions application’s functionality from external services and
    focus specifically upon the web API by mocking other components/functionality
    accessed by the web API, thus streamlining and speeding test execution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对代码进行这些更改，可以修订现有的测试，将飞机位置应用程序的功能与外部服务隔离开来，并专注于通过 mocking 访问 web API 所涉及的其他组件/功能，从而简化和加速测试执行。
- en: Refining the test
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完善测试
- en: 'Since the focus is on testing the web API, the more logic that isn’t an actual
    web interaction that can be mocked, the better. `PositionController::getCurrentAircraftPositions`
    now calls on `PositionRetriever` to provide it with current aircraft positions
    upon request, so `PositionRetriever` is the first component to mock. Mockito’s
    `@MockBean` annotation — Mockito is included automatically with the Spring Boot
    testing dependency — replaces the `PositionRetriever` bean that normally would
    be created on application startup with a mocked stand-in, which is then automatically
    injected:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于重点是测试Web API，所以最好尽可能多地模拟非实际Web交互的逻辑。现在`PositionController::getCurrentAircraftPositions`调用`PositionRetriever`来在请求时提供当前飞机位置，因此`PositionRetriever`是要模拟的第一个组件。Mockito的`@MockBean`注解——Mockito已经自动包含在Spring
    Boot测试依赖中——用模拟的替身替换了通常在应用程序启动时创建的`PositionRetriever` bean，然后自动注入：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Mock beans are automatically reset after each test method is executed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的bean在每次执行测试方法后会自动重置。
- en: I then turn my attention to the method that provides aircraft positions, `PositionRetriever::retrieveAircraftPositions`.
    Since I now inject a `PositionRetriever` mock for testing instead of the real
    thing, I must provide an implementation for the `retrieveAircraftPositions()`
    method so that it responds in a predictable and testable manner when it is called
    by the `PositionController`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我转向提供飞机位置的方法`PositionRetriever::retrieveAircraftPositions`。由于我现在注入了用于测试而不是真实对象的`PositionRetriever`模拟对象，因此我必须为`retrieveAircraftPositions()`方法提供一个实现，以便在被`PositionController`调用时以可预测且可测试的方式响应。
- en: 'I create a couple aircraft positions to use as sample data for tests within
    the `PositionControllerTest` class, declaring the `Aircraft` variables at the
    class level and assigning representative values to them within the `setUp()` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一对飞机位置，以用作`PositionControllerTest`类中测试的样本数据，并在`setUp()`方法中声明`Aircraft`变量并为其分配代表性值。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The number of aircraft positions retrieved in actual operation of the applications
    under development is nearly always more than one, often significantly more. Bearing
    that in mind, a sample data set used in testing should *at a minimum* return a
    number of positions of two. Edge cases involving zero, one, or very large numbers
    of positions should be considered for additional tests in subsequent iterations
    for similar production applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序的实际操作中，检索的飞机位置数量几乎总是超过一个，通常远远超过一个。请记住，在测试中使用的样本数据集应至少返回两个位置。在后续迭代中，应考虑为类似生产应用程序的额外测试考虑涉及零、一个或非常大量位置的边缘情况。
- en: 'Now, back to the `retrieveAircraftPositions()` method. Mockito’s `when...thenReturn`
    combination returns a specified response when a specified condition is met. With
    sample data now defined, I can provide both the condition and the response to
    return to calls to `PositionRetriever::retrieveAircraftPositions`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到`retrieveAircraftPositions()`方法。Mockito的`when...thenReturn`组合在满足指定条件时返回指定的响应。现在已定义了示例数据，我可以提供条件和响应，以便调用`PositionRetriever::retrieveAircraftPositions`时返回：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With the relevant method mocked, it’s time to return attention to the unit test
    located in `PositionControllerTest::getCurrentAircraftPositions`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有了相关的方法模拟后，现在是时候将注意力转回`PositionControllerTest::getCurrentAircraftPositions`中的单元测试。
- en: 'Since I’ve instructed the test instance to load the `PositionController` bean
    with the class-level annotation `@WebFluxTest(controllers = {PositionController.class})`
    and have created a mock `PositionRetriever` bean and defined its behavior, I can
    now refactor the portion of the test that retrieves positions with some certainty
    of what will be returned:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我已指示测试实例加载了带有类级注释`@WebFluxTest(controllers = {PositionController.class})`的`PositionController`
    bean，并创建了模拟的`PositionRetriever` bean并定义了其行为，因此现在可以重构检索位置的测试部分，并对将返回的内容有一定的把握：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The chain of operators shown should retrieve a `List<Aircraft>` consisting
    of `ac1` and `ac2`. In order to confirm the correct results, I need to compare
    `acPositions` — the actual outcome — with that expected outcome. One way of doing
    so is with a simple comparison such as this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所示的操作链应检索由`ac1`和`ac2`组成的`List<Aircraft>`。为了确认正确的结果，我需要将实际结果`acPositions`与预期结果进行比较。其中一种简单的比较方法是：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This works correctly and the test will pass. I could also have taken things
    a bit further in this intermediate step by comparing the actual results with results
    obtained via a mocked call to `AircraftRepository`. Adding the following bits
    of code to the class, the `setUp()` method, and the `getCurrentAircraftPositions()`
    test method produces similar (passing) test results:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This variant also results in a passing test, but it somewhat contradicts the
    principle of focused testing, since I now mix the concepts of testing the repository
    with testing the web API. Since it doesn’t actually use the `CrudRepository::findAll`
    method but simply mocks it, the value of testing it doesn’t add any discernible
    value, either. However, you may encounter tests of this nature at some point,
    so I thought it worthwhile to show and discuss.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'The current working version of `PlaneControllerTest` should now look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running it once again produces a passing test, with results similar to those
    shown in [Figure 9-4](#new_improved_test_for_AircraftRepository).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![sbur 0904](Images/sbur_0904.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4\. New, improved test for AircraftRepository::getCurrentAircraftPositions
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As the web API required to meet application/user requirements expands, unit
    tests should be specified first (before creating the actual code to fulfill those
    requirements) to ensure correct outcomes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Testing Slices
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I’ve already mentioned a few times the importance of focused testing, and Spring
    has another mechanism that helps developers accomplish that quickly and painlessly:
    test slices.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Several annotations are built into Spring Boot’s testing dependency `spring-boot-starter-test`
    that automatically configure these slices of functionality. All of these test
    slice annotations work in similar fashion, loading an `ApplicationContext` and
    select components that make sense for the specified slice. Examples include:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`@JsonTest`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@WebMvcTest`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@WebFluxText` (previously introduced)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataJpaTest`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@JdbcTest`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataJdbcTest`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@JooqTest`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataMongoTest`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataNeo4jTest`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataRedisTest`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@DataLdapTest`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@RestClientTest`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@AutoConfigureRestDocs`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@WebServiceClientTest`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During an earlier section leveraging `@WebFluxTest` to exercise and validate
    the web API, I mentioned testing datastore interactions and excluded doing so
    from the test, since it was focused on testing web interactions. To better demonstrate
    data testing and how test slices facilitate targeting specific functionality,
    I explore that next.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the current iteration of Aircraft Positions uses JPA and H2 to store
    and retrieve current positions, `@DataJpaTest` is a perfect fit. I begin by creating
    a new class for testing using IntelliJ IDEA, opening the `AircraftRepository`
    class and using the same approach to create a test class as before: CMD+N, “Test…”,
    leaving JUnit5 as the “Testing Library” and other default values in place, and
    selecting *setUp/@Before* and *tearDown/@After* options as shown in [Figure 9-5](#create_test_popup_for_AircraftRepository).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当前的 Aircraft Positions 使用 JPA 和 H2 来存储和检索当前位置，因此 `@DataJpaTest` 完全适用。我开始使用
    IntelliJ IDEA 为测试创建一个新类，打开 `AircraftRepository` 类，并使用与之前相同的方法创建测试类：CMD+N，选择“Test…”，将
    JUnit5 作为“Testing Library”，保留其他默认值，并选择 *setUp/@Before* 和 *tearDown/@After* 选项，如
    [图 9-5](#create_test_popup_for_AircraftRepository) 所示。
- en: '![sbur 0905](Images/sbur_0905.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0905](Images/sbur_0905.png)'
- en: Figure 9-5\. Create Test popup for AircraftRepository
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-5\. 为 AircraftRepository 创建测试弹出窗口
- en: Note
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: No methods are shown because Spring Data `Repository` beans provide common methods
    to Spring Boot applications via autoconfiguration. I will add test methods to
    exercise these as an example next, and if you create custom repository methods,
    these can (and should be) tested as well.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Spring Data `Repository` bean 通过自动配置向 Spring Boot 应用程序提供通用方法，因此不显示任何方法。下面，我将添加测试方法来演示这些方法的使用，如果您创建自定义
    repository 方法，则也可以（并且应该）对其进行测试。
- en: 'Clicking the OK button generates the test class `AircraftRepositoryTest`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“OK”按钮生成测试类 `AircraftRepositoryTest`：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first order of business is, of course, to add the test slice annotation
    `@DataJpaTest` to the `AircraftRepositoryTest` class:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首要任务当然是向 `AircraftRepositoryTest` 类添加测试切片注解 `@DataJpaTest`：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As a result of adding this single annotation, upon execution the test will scan
    for `@Entity` classes and configure Spring Data JPA repositories — in the Aircraft
    Positions application, `Aircraft` and `AircraftRepository` respectively. If an
    embedded database is in the classpath (as H2 is here), the test engine will configure
    it as well. Typical `@Component` annotated classes are not scanned for bean creation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此单个注解后，执行测试将扫描 `@Entity` 类并配置 Spring Data JPA repository — 在 Aircraft Positions
    应用程序中分别是 `Aircraft` 和 `AircraftRepository`。如果类路径中存在嵌入式数据库（如此处的 H2），测试引擎也会对其进行配置。通常不会扫描用
    `@Component` 注解标记的类以进行 bean 创建。
- en: 'In order to test actual repository operations, the repository mustn’t be mocked;
    and since the `@DataJpaTest` annotation loads and configures an `AircraftRepository`
    bean, there is no need to mock it anyway. I inject the repository bean using `@Autowire`
    and just as in the `PositionController` test earlier, declare `Aircraft` variables
    to ultimately serve as test data:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试实际的 repository 操作，repository 不能被模拟；由于 `@DataJpaTest` 注解加载和配置了一个 `AircraftRepository`
    bean，因此无需模拟它。我使用 `@Autowire` 注入 repository bean，并像之前的 `PositionController` 测试中一样，声明
    `Aircraft` 变量最终作为测试数据：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To setup the proper environment for the tests that will exist within this `AircraftRepositoryTest`
    class, I create two `Aircraft` objects, assign each to one of the declared member
    variables, and then save them to the repository within the `setUp()` method using
    `Repository::saveAll`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置这个 `AircraftRepositoryTest` 类中将存在的测试的适当环境，我创建两个 `Aircraft` 对象，将每个分配给已声明的成员变量，并在
    `setUp()` 方法中使用 `Repository::saveAll` 将它们保存到 repository 中。
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, I create a test method to verify that what is returned as a result of
    executing a `findAll()` on the `AircraftRepository` bean is exactly what should
    be returned: an `Iterable<Aircraft>` containing the two aircraft positions saved
    in the test’s `setUp()` method:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我创建一个测试方法来验证在执行 `AircraftRepository` bean 上的 `findAll()` 后返回的结果确实是预期的内容：一个包含在测试的
    `setUp()` 方法中保存的两个飞机位置的 `Iterable<Aircraft>`：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '`List` extends `Collection` which in turn extends `Iterable`.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`List` 扩展 `Collection`，而 `Collection` 又扩展 `Iterable`。'
- en: Running this test provides a passing result that looks something like that shown
    in [Figure 9-6](#test_results_for_findAll).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此测试将提供一个通过的结果，类似于在 [图 9-6](#test_results_for_findAll) 中显示的内容。
- en: '![sbur 0906](Images/sbur_0906.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![sbur 0906](Images/sbur_0906.png)'
- en: Figure 9-6\. Test results for `findAll()`
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-6\. `findAll()` 的测试结果
- en: Similarly, I create a test for the `AircraftRepository` method to find a particular
    record by its ID field, `findById()`. Since there should be two records stored
    due to the `Repository::saveAll` method called in the test class’s `setUp()`,
    I query for both and verify the results against expected values.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Running the `testFindById()` test yields a passing as well, as shown in [Figure 9-7](#test_results_for_findbyID).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![sbur 0907](Images/sbur_0907.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7\. Test results for `findById()`
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, a bit of cleanup is in order once all tests have run. To the `tearDown()`
    method I add a single statement to delete all records in the `AircraftRepository`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that it really isn’t necessary in this case to erase all records from the
    repository, since it’s an in-memory instance of the H2 database that is reinitialized
    before each test. This is however representative of the type of operation that
    would typically be placed in a test class’s `tearDown()` method.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Executing all tests within `AircraftRepositoryTest` produces passing results
    similar to those shown in [Figure 9-8](#test_results_for_all_tests_in_aircraftrepotest).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![sbur 0908](Images/sbur_0908.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Figure 9-8\. Test results for all tests in AircraftRepositoryTest
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Testing is never complete for an application that is still evolving. For the
    functionality currently present in Aircraft Positions, however, the tests written
    in this chapter provide a good starting point for code validation and continued
    expansion as functionality is added to the application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Code Checkout Checkup
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For complete chapter code, please check out branch *chapter9end* from the code
    repository.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed and demonstrated core aspects of testing Spring Boot
    applications, focusing on the fundamental aspects of testing Spring Boot applications
    that most improve the production readiness of each application. Topics covered
    included unit testing, holistic application testing using `@SpringBootTest`, how
    to write effective unit tests using JUnit, and using Spring Boot testing slices
    to isolate test subjects and streamline testing.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter explores security concepts like Authentication and Authorization.
    I then demonstrate how to implement forms-based authentication for self-contained
    applications and for the most demanding requirements, how to leverage OpenID Connect
    and OAuth2 for maximum security and flexibility, all using Spring Security.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
