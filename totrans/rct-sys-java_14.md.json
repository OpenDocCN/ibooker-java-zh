["```java\n@Channel(\"my-channel\")\nMutinyEmitter<Person> personEmitter;\n\npublic Uni<Void> send(Person p) {\n    return personEmitter.send(p);\n}\n```", "```java\n@Channel(\"my-second-channel\")\nMutinyEmitter<Person> messageEmitter;\n\npublic void sendMessage(Person p) {\n    messageEmitter.send(\n            Message.of(p,\n                    () -> {\n                        // Acknowledgment callback\n                        return CompletableFuture.completedFuture(null);\n                    },\n                    failure -> {\n                        // Negative-acknowledgment callback\n                        return CompletableFuture.completedFuture(null);\n                    })\n    );\n}\n```", "```java\n@Outgoing(\"my-channel\")\nMulti<Person> produceAStreamOfPersons() {\n    return Multi.createFrom().items(\n            new Person(\"Luke\"),\n            new Person(\"Leia\"),\n            new Person(\"Obiwan\")\n    );\n}\n```", "```java\n@Outgoing(\"ticks\")\nMulti<Long> ticks() {\n    return Multi.createFrom().ticks()\n            .every(Duration.ofSeconds(1))\n            .onOverflow().drop();\n}\n```", "```java\n@Outgoing(\"my-channel\")\nMulti<Message<Person>> produceAStreamOfMessagesOfPersons() {\n    return Multi.createFrom().items(\n            Message.of(new Person(\"Luke\")),\n            Message.of(new Person(\"Leia\")),\n            Message.of(new Person(\"Obiwan\"))\n    );\n}\n```", "```java\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 100)\nMutinyEmitter<Person> emitterUsingABufferOnOverflow;\n\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.UNBOUNDED_BUFFER)\nMutinyEmitter<Person> emitterUsingAnUnboundedOnOverflow;\n\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.DROP)\nMutinyEmitter<Person> emitterDroppingMessageOnOverflow;\n\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.LATEST)\nMutinyEmitter<Person> emitterDroppingOlderMessagesOnOverflow;\n\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.FAIL)\nMutinyEmitter<Person> emitterSendingAFailureDownstreamOnOverflow;\n\n@Channel(\"channel\")\n@OnOverflow(value = OnOverflow.Strategy.THROW_EXCEPTION)\nMutinyEmitter<Person> emitterThrowingExceptionUpstreamOnOverflow;\n```", "```java\n@Channel(\"my-channel\")\nMulti<Person> streamOfPersons;\n\n// ...\n\nvoid init() {\n    streamOfPersons\n            .subscribe().with(\n                    person -> { /* ... */ },\n                    failure -> { /* ... */ }\n    );\n}\n```", "```java\n@Channel(\"my-channel\")\nMulti<Message<Person>> streamOfPersons;\n\n// ...\n\nvoid init() {\n    streamOfPersons\n            .subscribe().with(\n                    message -> {\n                        Person person = message.getPayload();\n                        try {\n                            // do something\n                            // acknowledge\n                            message.ack();\n                        } catch (Exception e) {\n                            message.nack(e);\n                        }\n                    },\n                    failure -> { /* ... */ }\n    );\n}\n```", "```java\n@Incoming(\"my-channel\")\nvoid consume(Person person) {\n    // ...\n}\n```", "```java\n@Incoming(\"my-channel\")\nCompletionStage<Void> consume(Message<Person> person) {\n    // ...\n    return person.ack();\n}\n```", "```java\n@Incoming(\"from\")\n@Outgoing(\"to\")\nPerson process(String name) {\n    return new Person(name);\n}\n```", "```java\n@Incoming(\"from\")\n@Outgoing(\"to\")\nMulti<Person> processStream(Multi<String> inputStream) {\n    return inputStream\n            .onItem().transform(Person::new);\n}\n```", "```java\n@Incoming(\"from\")\n@Outgoing(\"to\")\nMessage<Person> processMessage(Message<String> msg) {\n    return msg.withPayload(new Person(msg.getPayload()));\n}\n```", "```java\n[(a) message from broker] -> [(b) message with the transformed content]\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n</dependency>\n```", "```java\npackage org.acme;\n\nimport io.smallrye.mutiny.Multi;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport java.time.Duration;\n\n@ApplicationScoped\npublic class HelloMessaging {\n\n    @Outgoing(\"ticks\")\n    public Multi<Long> ticks() {\n        return Multi.createFrom().ticks()\n                .every(Duration.ofSeconds(1))\n                .onOverflow().drop();\n    }\n\n    @Incoming(\"ticks\")\n    @Outgoing(\"hello\")\n    public String hello(long tick) {\n        return \"Hello - \" + tick;\n    }\n\n    @Incoming(\"hello\")\n    public void print(String msg) {\n        System.out.println(msg);\n    }\n\n}\n```", "```java\nticks() ---> [ticks] ---> hello() ----> [hello] ----> print()\n```", "```java\nHello - 1\nHello - 2\nHello - 3\n```", "```java\npublic class MyMessage implements Message<String> {\n\n    private final String payload;\n\n    public MyMessage(String payload) {\n        this.payload = payload;\n    }\n\n    public MyMessage(long l) {\n        this(Long.toString(l));\n    }\n\n    @Override\n    public String getPayload() {\n        return payload;\n    }\n\n    @Override\n    public Supplier<CompletionStage<Void>> getAck() {\n        return () -> {\n            System.out.println(\"Acknowledgment for \" + payload);\n            return CompletableFuture.completedFuture(null);\n        };\n    }\n\n    @Override\n    public Function<Throwable, CompletionStage<Void>> getNack() {\n        return reason -> {\n            System.out.println(\"Negative acknowledgment for \"\n                    + payload + \", the reason is \" + reason);\n            return CompletableFuture.completedFuture(null);\n        };\n    }\n}\n```", "```java\n@Outgoing(\"ticks\")\npublic Multi<MyMessage> ticks() {\n    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n            .onOverflow().drop()\n            .onItem().transform(MyMessage::new);\n}\n\n@Incoming(\"ticks\")\n@Outgoing(\"hello\")\npublic Message<String> hello(Message<String> tick) {\n    return tick.withPayload(\"Hello \" + tick.getPayload());\n}\n\n@Incoming(\"hello\")\npublic void print(String msg) {\n    System.out.println(msg);\n}\n```", "```java\nHello 1\nAcknowledgment for 1\nHello 2\nAcknowledgment for 2\nHello 3\nAcknowledgment for 3\n```", "```java\n@Incoming(\"hello\")\npublic void print(String msg) {\n    if (msg.contains(\"3\")) {\n        throw new IllegalArgumentException(\"boom\");\n    }\n    System.out.println(msg);\n}\n```", "```java\nHello 0\nAcknowledgment for 0\nHello 1\nAcknowledgment for 1\nHello 2\nAcknowledgment for 2\n2021-05-14 14:49:54,052 ERROR [io.sma.rea.mes.provider]\n(executor-thread-1) SRMSG00200:\nThe method HelloMessaging#print has thrown an exception:\njava.lang.IllegalArgumentException: boom\n\tat HelloMessaging.print(HelloMessaging.java:28)\n\t// ....\nNegative acknowledgment for 3,\nthe reason is java.lang.IllegalArgumentException: boom\nHello 4\nAcknowledgment for 4\n```", "```java\n@ApplicationScoped\npublic class StreamingExample {\n\n    @Outgoing(\"ticks\")\n    public Multi<Long> ticks() {\n        return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n                .onOverflow().drop();\n    }\n\n    @Incoming(\"ticks\")\n    @Outgoing(\"groups\")\n    public Multi<List<String>> group(Multi<Long> stream) {\n        // Group the incoming messages into groups of 5.\n        return stream\n                .onItem().transform(l -> Long.toString(l))\n                .group().intoLists().of(5);\n    }\n\n    @Incoming(\"groups\")\n    @Outgoing(\"hello\")\n    public String processGroup(List<String> list) {\n        return \"Hello \" + String.join(\",\", list);\n    }\n\n    @Incoming(\"hello\")\n    public void print(String msg) {\n        System.out.println(msg);\n    }\n\n}\n```", "```java\nHello 0,1,2,3,4\nHello 5,6,7,8,9\nHello 10,11,12,13,14\n...\n```", "```java\n@Incoming(\"ticks\")\n@Outgoing(\"hello\")\n@Blocking\npublic String hello(long tick) {\n    // Simulate a long operation\n    try {\n        Thread.sleep(1000);\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n    }\n    return \"Hello - \" + tick;\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-fault-tolerance</artifactId>\n</dependency>\n```", "```java\n@Incoming(\"ticks\")\n@Outgoing(\"hello\")\n@Retry(maxRetries = 10, delay = 1, delayUnit = ChronoUnit.SECONDS)\npublic String hello(long tick) {\n    maybeFaulty(); // Randomly throws an exception\n    return \"Hello - \" + tick;\n}\n```", "```java\npackage org.acme;\n\nimport io.quarkus.hibernate.reactive.panache.PanacheEntity;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\n\n@Entity\npublic class Person extends PanacheEntity {\n\n    @Column(unique = true)\n    public String name;\n\n    public int age;\n\n}\n```", "```java\npackage org.acme;\n\nimport io.smallrye.mutiny.Uni;\nimport io.smallrye.reactive.messaging.MutinyEmitter;\nimport org.eclipse.microprofile.reactive.messaging.Channel;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\nimport java.util.List;\n\n@Path(\"/\")\npublic class HttpEndpoint {\n\n    @Channel(\"upload\")\n    MutinyEmitter<Person> emitter;\n\n    @POST\n    public Uni<Response> upload(Person person) {\n        return emitter.send(person)\n                .replaceWith(Response.accepted().build())\n                .onFailure()\n                .recoverWithItem(t ->\n                        Response.status(Response.Status.BAD_REQUEST)\n                                .entity(t.getMessage()).build());\n    }\n\n    @GET\n    public Uni<List<Person>> getAll() {\n        return Person.listAll();\n    }\n\n}\n```", "```java\npackage org.acme;\n\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\n\nimport javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic class Processing {\n\n    @Incoming(\"upload\")\n    @Outgoing(\"database\")\n    public Person validate(Person person) {\n        if (person.age <= 0) {\n            throw new IllegalArgumentException(\"Invalid age\");\n        }\n\n        person.name = capitalize(person.name);\n\n        return person;\n    }\n\n    public static String capitalize(String name) {\n        char[] chars = name.toLowerCase().toCharArray();\n        boolean found = false;\n        for (int i = 0; i < chars.length; i++) {\n            if (!found && Character.isLetter(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n                found = true;\n            } else if (Character.isWhitespace(chars[i])) {\n                found = false;\n            }\n        }\n        return String.valueOf(chars);\n    }\n\n}\n```", "```java\npackage org.acme;\n\nimport io.quarkus.hibernate.reactive.panache.Panache;\nimport io.smallrye.mutiny.Uni;\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\n\nimport javax.enterprise.context.ApplicationScoped;\n\n@ApplicationScoped\npublic class Database {\n\n    @Incoming(\"database\")\n    public Uni<Void> write(Person person) {\n        return Panache.withTransaction(person::persist)\n                .replaceWithVoid();\n    }\n\n}\n```", "```java\n>  curl -v --header \"Content-Type: application/json\"  \\\n  POST --data '{\"name\":\"Luke\", \"age\":19}' \\\n  http://localhost:8080\n```", "```java\n>  curl -v --header \"Content-Type: application/json\" \\\n  POST --data '{\"name\":\"Leia\"}' \\\n  http://localhost:8080\n```"]