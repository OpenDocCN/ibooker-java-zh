- en: Chapter 14\. Developing Quarkus Applications Using Spring APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章 开发 Quarkus 应用程序使用 Spring API
- en: Up to this point, you’ve seen that every example was developed using CDI annotations
    such as `@Inject` or `@Produces`, JAX-RS annotations, or Java EE Security annotations.
    But Quarkus also offers a compatibility layer for some of the most-used Spring
    libraries, so you can use all your knowledge about Spring Framework to develop
    Quarkus applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经看到每个示例都是使用 CDI 注解（如 `@Inject` 或 `@Produces`）、JAX-RS 注解或 Java EE 安全性注解开发的。但是
    Quarkus 也为一些最常用的 Spring 库提供了兼容层，因此您可以使用关于 Spring Framework 的所有知识来开发 Quarkus 应用程序。
- en: 'This chapter will include recipes for the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包括以下几种方法：
- en: Spring Dependency Injection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 依赖注入
- en: Spring REST Web
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring REST Web
- en: Spring Data JPA
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: Spring Security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security
- en: Spring Boot Configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 配置
- en: 14.1 Using Spring Dependency Injection
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.1 使用 Spring 依赖注入
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use the Spring Dependency Injection (DI) API to develop with Quarkus.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用 Spring 依赖注入（DI）API 来开发 Quarkus 应用程序。
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    DI annotations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 提供了一个 API 兼容层（使用扩展）来使用 Spring DI 注解。
- en: Although we encourage you to use CDI annotations, you are free to use the Spring
    annotations as well because the final application will behave in exactly the same
    way.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们鼓励您使用 CDI 注解，但您也可以自由使用 Spring 注解，因为最终应用程序的行为方式完全相同。
- en: A greeting service is developed, as it was at the beginning of the book. If
    you are familiar with the Spring Framework, a lot of things will look familiar
    to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发了一个问候服务，就像书的开头一样。如果您熟悉 Spring Framework，很多东西看起来会很眼熟。
- en: 'To add the Spring DI extension, run the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Spring DI 扩展，请运行以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or, you can create a project with the Spring DI extension by running the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过以下方式创建一个带有 Spring DI 扩展的项目：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the *application.properties* file and add a new property:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 *application.properties* 文件并添加一个新的属性：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To inject this configuration value to any class, use the `@org.springframework.beans.factory.annotation.Value`
    Spring annotation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此配置值注入到任何类中，请使用 `@org.springframework.beans.factory.annotation.Value` Spring
    注解：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-1)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-1)'
- en: Uses the `@Configuration` annotation to define the class as a configuration
    object
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@Configuration` 注解将类定义为配置对象
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-2)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-2)'
- en: Creates a bean that adds the suffix to the given message
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个向给定消息添加后缀的 bean
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-3)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-3)'
- en: Implements the service
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实现服务
- en: It is important to notice that in both cases the Spring annotations are used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这两种情况下都使用了 Spring 注解。
- en: 'The bean can be injected using the `@org.springframework.beans.factory.annotation.Autowired`
    and `@org.springframework.beans.factory.annotation.Qualifier` annotations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `@org.springframework.beans.factory.annotation.Autowired` 和 `@org.springframework.beans.factory.annotation.Qualifier`
    注解来注入 bean：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO2-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO2-1)'
- en: Sets this class as a service
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将此类设置为服务
- en: 'And it can be injected using the constructor instead of `@Autowired`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 并且可以使用构造函数而不是 `@Autowired` 进行注入：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO3-1)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO3-1)'
- en: Injects the instance using the constructor; notice that `@Autowired` is not
    required
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构造函数注入实例；请注意，不需要 `@Autowired`
- en: 'Finally, all these operations can be combined to produce the following output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以将所有这些操作结合起来产生以下输出：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you run the project, you’ll be able to see that all the objects are created
    and injected correctly, even though the Spring DI annotations are used:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行项目，您将能够看到所有对象都正确创建和注入，即使使用了 Spring DI 注解：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discussion
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'It is important to note that Quarkus does not start a Spring Application Context
    instance. That’s because its integration is only at the API level (annotations,
    return types, etc.), which means the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Quarkus 不会启动一个 Spring 应用上下文实例。这是因为它的集成仅在 API 层面（注解、返回类型等），这意味着以下内容：
- en: Using any other Spring library will not have any effect. You’ll see later that
    Quarkus offers integrations to other Spring libraries.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用任何其他 Spring 库将没有任何效果。稍后你会看到 Quarkus 提供了对其他 Spring 库的集成。
- en: '`org.springframework.beans.factory.config.BeanPostProcessor` will not be executed.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.beans.factory.config.BeanPostProcessor` 将不会被执行。'
- en: '[Table 14-1](#microprofile-cdi-spring-equivalant-annotations) shows the equivalent
    annotations between MicroProfile/CDI and Spring.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 14-1](#microprofile-cdi-spring-equivalant-annotations) 显示了 MicroProfile/CDI
    与 Spring 之间的等效注解。'
- en: Table 14-1\. Equivalent annotations in MicroProfile/CDI and Spring
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表 14-1\. MicroProfile/CDI 与 Spring 的等效注解
- en: '| Spring | CDI / MicroProfile |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Spring | CDI / MicroProfile |'
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Autowired`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Autowired`'
- en: '|'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Injecct`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Injecct`'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Qualifier`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Qualifier`'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Named`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Named`'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Value`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Value`'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@ConfigProperty`. The expression language of typical use cases is supported.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ConfigProperty`。典型用例的表达式语言是支持的。'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Component`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Component`'
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Singleton`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Singleton`'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Service`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Service`'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Singleton`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Singleton`'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Repository`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Repository`'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Singleton`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Singleton`'
- en: '|'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Configuration`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Configuration`'
- en: '|'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@ApplicationScoped`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ApplicationScoped`'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Bean`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Bean`'
- en: '|'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`@Produces`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Produces`'
- en: '|'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 14.2 Using Spring Web
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.2 使用 Spring Web
- en: Problem
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to use the Spring Web API to develop with Quarkus.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望使用 Spring Web API 在 Quarkus 中进行开发。
- en: Solution
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Web annotations/classes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 提供了一个 API 兼容层（使用扩展）来使用 Spring Web 注解/类。
- en: 'To add the Spring Web extension, run the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Spring Web 扩展，运行以下命令：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new resource using only Spring Web annotations:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用 Spring Web 注解创建一个新的资源：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-1)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-1)'
- en: REST resource definition
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: REST 资源定义
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-2)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-2)'
- en: Maps the root path
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 映射根路径
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-3)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-3)'
- en: Sets `GET` HTTP method
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `GET` HTTP 方法
- en: '[![4](Images/4.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-4)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-4)'
- en: Returns Spring’s `ResponseEntity`
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 Spring 的 `ResponseEntity`
- en: '[![5](Images/5.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-5)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-5)'
- en: Gets path information
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 获取路径信息
- en: Only Spring annotations and classes are used to implement the resource. There
    are no traces of the JAX-RS API.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用 Spring 注解和类来实现资源。没有 JAX-RS API 的痕迹。
- en: Discussion
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: You’ve seen how to use Spring Dependency Injection annotations in a Quarkus
    application. Quarkus integrates with Spring Web via an extension.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到如何在 Quarkus 应用中使用 Spring 依赖注入注解。Quarkus 通过扩展与 Spring Web 集成。
- en: Although we encourage you to use JAX_RS annotations, you are free to use the
    Spring Web classes and annotations. Regardless of which is used, the final application
    will behave the same way.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们鼓励你使用 JAX_RS 注解，但你可以自由使用 Spring Web 类和注解。无论使用哪种，最终应用的行为都会是一样的。
- en: Quarkus supports only the REST-related features of Spring Web. In summary, all
    `@RestController` features are supported except the ones related to the generic
    `@Controller`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus 仅支持 Spring Web 的与 REST 相关的特性。总之，所有 `@RestController` 的特性都得到了支持，除了与通用
    `@Controller` 相关的那些特性。
- en: 'The following Spring Web annotations are supported: `@RestController`, `@RequestMapping`,
    `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, `@PatchMapping`,
    `@RequestParam`, `@RequestHeader`, `@MatrixVariable`, `@PathVariable`, `@CookieValue`,
    `@RequestBody`, `@ResponseStatus`, `@ExceptionHandler` (only to be used in a `@RestControllerAdvice`
    class), and `@RestControllerAdvice` (only the `@ExceptionHandler` capability is
    supported).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are return types that are supported out of the box for REST controllers:
    primitives, `String` (as a literal, not as an MVC support), POJO, and `org.springframework.http.ResponseEntity`.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are method parameters that are supported out of the box, for
    REST controllers: primitives, `String`, POJO, `javax.servlet.http.HttpServletRequest`,
    and `javax.servlet.http.HttpServletResponse`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are return types that are supported out of the box for exception
    handlers: `org.springframework.http.ResponseEntity` and `java.util.Map`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are method parameters that are supported out of the box for exception
    handlers: `java.lang.Exception` or any other subtype, `javax.servlet.http.HttpServletRequest`,
    and `javax.servlet.http.HttpServletResponse`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Important
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To use the `javax.servlet` classes you need to register the `quarkus-undertow`
    dependency.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 14-2](#jax-rs-spring-web-equivalant-annotations) shows the equivalent
    annotations between JAX-RS and Spring Web.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-2\. Equivalent annotations in JAX-RS and Spring Web
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '| Spring | JAX-RS |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestController`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(path="/api")`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`@Path("/api")`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(consumes="application/json")`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '`@Consumes("application/json")`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(produces="application/json")`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`@Produces("application/json")`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestParam`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '`@QueryParam`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '`@PathVariable`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '`@PathParam`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestBody`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`@RestControllerAdvice`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '`@ResponseStatus`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Use `javax.ws.rs.core.Response` class
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`@ExceptionHandler`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Implements `javax.ws.rs.ext.ExceptionMapper` interface
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Using Spring Data JPA
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Data JPA API to develop the persistent layer in Quarkus.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Data JPA classes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Web extension, run the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The big difference between using Panache or the Spring Data JPA is that your
    repository class must implement the Spring Data `org.springframework.data.repository.CrudRepository`
    class instead of `io.quarkus.hibernate.orm.panache.PanacheRepository`. But the
    rest of the parts, like defining the entity or configuring the data source in
    *application.properties*, are exactly the same.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class with the name `org.acme.quickstart.DeveloperRepository`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO5-1)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Defines a Spring Data JPA CRUD repository
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO5-2)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Derived query method
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project and send some requests to validate that the objects are persisted
    using the Spring Data interface. To do so, run the following in a terminal:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discussion
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.xhtml#persistence_chapter), you learned how to develop persistent
    code with Quarkus, and in particular, using the Panache framework. Quarkus also
    integrates with Spring Data JPA via an extension.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Although we encourage you to use the Panache framework, you are free to use
    the Spring Data JPA classes as well because the final application will behave
    in exactly the same way.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus supports a subset of Spring Data JPA’s features, which are basically
    the most commonly used features.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'The following interfaces are supported to define a repository:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.Repository`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.CrudRepository`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.CrudRepository`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.PagingAndSortingRepository`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.jpa.repository.JpaRepository`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The methods that update the database are automatically annotated with `@Transactional`.
    If you are using `@org.springframework.data.jpa.repository.Query`, then you need
    to annotate the method with `@org.springframework.data.jpa.repository.Modifying`
    to make it transactional.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the following features are unsupported:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Methods of the `org.springframework.data.repository.query.QueryByExampleExecutor`
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QueryDSL support
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the base repository for all repository interfaces in the codebase
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.util.concurrent.Future` or classes extending it as return types of repository
    methods'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native and named queries when using `@Query`
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These limitations might be fixed in the near future.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 14.4 Using Spring Security
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Security API to protect resources.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Security classes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Security extension (and the identity provider), run the following
    command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From this point, the code can be protected using the Spring Security annotations
    (`org.springframework.security.access.annotation.Secured` and `org.springframework.security.access.prepost.PreAuthorize`)
    instead of the Java EE ones (`@javax.annotation.security.RolesAllowed`):'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO6-1)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`@Secured` annotation'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO6-2)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '`@PreAuthorize` annotation to add expression support'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Register valid users and roles in the *application.properties* file because
    the Elytron file properties extension is registered as identity provider:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Only `alexandra` can access both endpoints, while `ada` can access only the
    user one.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 11](ch11.xhtml#authentication_authorization), you learned how to
    protect RESTful web services using the Java EE security annotations (`@RolwsAllowed`).
    Quarkus integrates with Spring Security via an extension, allowing Spring Security
    annotations to be used as well.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the Spring Security integration happens at the
    API level and that an identity provider implementation like Elytron file properties
    is still required.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarkus supports a subset of Spring Security `@PreAuthorze` expression language,
    which is basically a collection of the most commonly used features:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO7-1)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Where `roles` is a bean defined with the `@Component` annotation and `USER`
    is a public field of the class
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional expressions are also supported:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 14.5 Using Spring Boot Properties
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use Spring Boot to map configuration properties into Java objects.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Boot configuration properties.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus is integrated with Spring Boot in the form of an extension, so the `@org.springframework.boot.context.properties.ConfigurationProperties`
    annotation can be used to map configuration properties into a Java object.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Boot extension (and the other Spring integrations), run the
    following command:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add some configuration properties to be bound into a Java object:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is to create the POJOs with getters/setters to bind the configuration
    properties from file to Java object. It is important to note that the property
    `uppercase` is defined in a subcategory named `configuration`, and this affects
    how the POJO classes are created because each subcategory must be added into its
    own class:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-1)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Annotate the parent class with `ConfigurationProperties`, and set the prefix
    of the configuration properties
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-2)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Bean Validation annotations are supported
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-3)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Subcategory `configuration` is mapped in a field with the same name
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Subcategory POJO is just a Java class with the `uppercase` attribute.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The configuration object is injected in any class, as is any other bean using
    `@Inject` or `@Autowired`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO9-1)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Injects configuration object with data bound to it
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO9-2)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Configuration properties are populated automatically to the Java object
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
