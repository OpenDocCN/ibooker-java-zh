- en: Chapter 14\. Developing Quarkus Applications Using Spring APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, you’ve seen that every example was developed using CDI annotations
    such as `@Inject` or `@Produces`, JAX-RS annotations, or Java EE Security annotations.
    But Quarkus also offers a compatibility layer for some of the most-used Spring
    libraries, so you can use all your knowledge about Spring Framework to develop
    Quarkus applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will include recipes for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Dependency Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring REST Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data JPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14.1 Using Spring Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Dependency Injection (DI) API to develop with Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    DI annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Although we encourage you to use CDI annotations, you are free to use the Spring
    annotations as well because the final application will behave in exactly the same
    way.
  prefs: []
  type: TYPE_NORMAL
- en: A greeting service is developed, as it was at the beginning of the book. If
    you are familiar with the Spring Framework, a lot of things will look familiar
    to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring DI extension, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can create a project with the Spring DI extension by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the *application.properties* file and add a new property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To inject this configuration value to any class, use the `@org.springframework.beans.factory.annotation.Value`
    Spring annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `@Configuration` annotation to define the class as a configuration
    object
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a bean that adds the suffix to the given message
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Implements the service
  prefs: []
  type: TYPE_NORMAL
- en: It is important to notice that in both cases the Spring annotations are used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bean can be injected using the `@org.springframework.beans.factory.annotation.Autowired`
    and `@org.springframework.beans.factory.annotation.Qualifier` annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets this class as a service
  prefs: []
  type: TYPE_NORMAL
- en: 'And it can be injected using the constructor instead of `@Autowired`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Injects the instance using the constructor; notice that `@Autowired` is not
    required
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, all these operations can be combined to produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the project, you’ll be able to see that all the objects are created
    and injected correctly, even though the Spring DI annotations are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is important to note that Quarkus does not start a Spring Application Context
    instance. That’s because its integration is only at the API level (annotations,
    return types, etc.), which means the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using any other Spring library will not have any effect. You’ll see later that
    Quarkus offers integrations to other Spring libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.beans.factory.config.BeanPostProcessor` will not be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Table 14-1](#microprofile-cdi-spring-equivalant-annotations) shows the equivalent
    annotations between MicroProfile/CDI and Spring.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-1\. Equivalent annotations in MicroProfile/CDI and Spring
  prefs: []
  type: TYPE_NORMAL
- en: '| Spring | CDI / MicroProfile |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Autowired`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Injecct`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Qualifier`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Named`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Value`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ConfigProperty`. The expression language of typical use cases is supported.'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Component`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Singleton`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Service`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Singleton`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Repository`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Singleton`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Configuration`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ApplicationScoped`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Bean`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Produces`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 14.2 Using Spring Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Web API to develop with Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Web annotations/classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Web extension, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new resource using only Spring Web annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: REST resource definition
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Maps the root path
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets `GET` HTTP method
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Returns Spring’s `ResponseEntity`
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO4-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets path information
  prefs: []
  type: TYPE_NORMAL
- en: Only Spring annotations and classes are used to implement the resource. There
    are no traces of the JAX-RS API.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ve seen how to use Spring Dependency Injection annotations in a Quarkus
    application. Quarkus integrates with Spring Web via an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Although we encourage you to use JAX_RS annotations, you are free to use the
    Spring Web classes and annotations. Regardless of which is used, the final application
    will behave the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus supports only the REST-related features of Spring Web. In summary, all
    `@RestController` features are supported except the ones related to the generic
    `@Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Spring Web annotations are supported: `@RestController`, `@RequestMapping`,
    `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`, `@PatchMapping`,
    `@RequestParam`, `@RequestHeader`, `@MatrixVariable`, `@PathVariable`, `@CookieValue`,
    `@RequestBody`, `@ResponseStatus`, `@ExceptionHandler` (only to be used in a `@RestControllerAdvice`
    class), and `@RestControllerAdvice` (only the `@ExceptionHandler` capability is
    supported).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are return types that are supported out of the box for REST controllers:
    primitives, `String` (as a literal, not as an MVC support), POJO, and `org.springframework.http.ResponseEntity`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are method parameters that are supported out of the box, for
    REST controllers: primitives, `String`, POJO, `javax.servlet.http.HttpServletRequest`,
    and `javax.servlet.http.HttpServletResponse`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are return types that are supported out of the box for exception
    handlers: `org.springframework.http.ResponseEntity` and `java.util.Map`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are method parameters that are supported out of the box for exception
    handlers: `java.lang.Exception` or any other subtype, `javax.servlet.http.HttpServletRequest`,
    and `javax.servlet.http.HttpServletResponse`.'
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To use the `javax.servlet` classes you need to register the `quarkus-undertow`
    dependency.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 14-2](#jax-rs-spring-web-equivalant-annotations) shows the equivalent
    annotations between JAX-RS and Spring Web.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 14-2\. Equivalent annotations in JAX-RS and Spring Web
  prefs: []
  type: TYPE_NORMAL
- en: '| Spring | JAX-RS |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestController`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(path="/api")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Path("/api")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(consumes="application/json")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Consumes("application/json")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping(produces="application/json")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Produces("application/json")`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestParam`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@QueryParam`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@PathVariable`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@PathParam`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestBody`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@RestControllerAdvice`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ResponseStatus`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Use `javax.ws.rs.core.Response` class
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ExceptionHandler`'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Implements `javax.ws.rs.ext.ExceptionMapper` interface
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 14.3 Using Spring Data JPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Data JPA API to develop the persistent layer in Quarkus.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Data JPA classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Web extension, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The big difference between using Panache or the Spring Data JPA is that your
    repository class must implement the Spring Data `org.springframework.data.repository.CrudRepository`
    class instead of `io.quarkus.hibernate.orm.panache.PanacheRepository`. But the
    rest of the parts, like defining the entity or configuring the data source in
    *application.properties*, are exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class with the name `org.acme.quickstart.DeveloperRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a Spring Data JPA CRUD repository
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Derived query method
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the project and send some requests to validate that the objects are persisted
    using the Spring Data interface. To do so, run the following in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 7](ch07.xhtml#persistence_chapter), you learned how to develop persistent
    code with Quarkus, and in particular, using the Panache framework. Quarkus also
    integrates with Spring Data JPA via an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Although we encourage you to use the Panache framework, you are free to use
    the Spring Data JPA classes as well because the final application will behave
    in exactly the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus supports a subset of Spring Data JPA’s features, which are basically
    the most commonly used features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following interfaces are supported to define a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.Repository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.CrudRepository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.CrudRepository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.repository.PagingAndSortingRepository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.springframework.data.jpa.repository.JpaRepository`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The methods that update the database are automatically annotated with `@Transactional`.
    If you are using `@org.springframework.data.jpa.repository.Query`, then you need
    to annotate the method with `@org.springframework.data.jpa.repository.Modifying`
    to make it transactional.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the following features are unsupported:'
  prefs: []
  type: TYPE_NORMAL
- en: Methods of the `org.springframework.data.repository.query.QueryByExampleExecutor`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QueryDSL support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the base repository for all repository interfaces in the codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.util.concurrent.Future` or classes extending it as return types of repository
    methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native and named queries when using `@Query`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These limitations might be fixed in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 14.4 Using Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use the Spring Security API to protect resources.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Security classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Security extension (and the identity provider), run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'From this point, the code can be protected using the Spring Security annotations
    (`org.springframework.security.access.annotation.Secured` and `org.springframework.security.access.prepost.PreAuthorize`)
    instead of the Java EE ones (`@javax.annotation.security.RolesAllowed`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Secured` annotation'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '`@PreAuthorize` annotation to add expression support'
  prefs: []
  type: TYPE_NORMAL
- en: 'Register valid users and roles in the *application.properties* file because
    the Elytron file properties extension is registered as identity provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Only `alexandra` can access both endpoints, while `ada` can access only the
    user one.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 11](ch11.xhtml#authentication_authorization), you learned how to
    protect RESTful web services using the Java EE security annotations (`@RolwsAllowed`).
    Quarkus integrates with Spring Security via an extension, allowing Spring Security
    annotations to be used as well.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the Spring Security integration happens at the
    API level and that an identity provider implementation like Elytron file properties
    is still required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quarkus supports a subset of Spring Security `@PreAuthorze` expression language,
    which is basically a collection of the most commonly used features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Where `roles` is a bean defined with the `@Component` annotation and `USER`
    is a public field of the class
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional expressions are also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 14.5 Using Spring Boot Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to use Spring Boot to map configuration properties into Java objects.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quarkus offers an API compatibility layer (using an extension) to use Spring
    Boot configuration properties.
  prefs: []
  type: TYPE_NORMAL
- en: Quarkus is integrated with Spring Boot in the form of an extension, so the `@org.springframework.boot.context.properties.ConfigurationProperties`
    annotation can be used to map configuration properties into a Java object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Spring Boot extension (and the other Spring integrations), run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some configuration properties to be bound into a Java object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create the POJOs with getters/setters to bind the configuration
    properties from file to Java object. It is important to note that the property
    `uppercase` is defined in a subcategory named `configuration`, and this affects
    how the POJO classes are created because each subcategory must be added into its
    own class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Annotate the parent class with `ConfigurationProperties`, and set the prefix
    of the configuration properties
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Bean Validation annotations are supported
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Subcategory `configuration` is mapped in a field with the same name
  prefs: []
  type: TYPE_NORMAL
- en: Subcategory POJO is just a Java class with the `uppercase` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration object is injected in any class, as is any other bean using
    `@Inject` or `@Autowired`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Injects configuration object with data bound to it
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_developing_quarkus_applications___span_class__keep_together__using_spring_apis__span__CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration properties are populated automatically to the Java object
  prefs: []
  type: TYPE_NORMAL
