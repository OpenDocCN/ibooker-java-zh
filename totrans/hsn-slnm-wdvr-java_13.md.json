["```java\nnpm install -g appium@next ![1](assets/1.png)\nappium driver install uiautomator2 ![2](assets/2.png)\nappium --allow-insecure chromedriver_autodownload ![3](assets/3.png)\n```", "```java\nclass AppiumJupiterTest {\n\n    WebDriver driver;\n\n    @BeforeEach\n    void setup() throws MalformedURLException {\n        URL appiumServerUrl = new URL(\"http://localhost:4723\"); ![1](assets/1.png)\n        assumeThat(isOnline(new URL(appiumServerUrl, \"/status\"))).isTrue(); ![2](assets/2.png)\n\n        ChromeOptions options = new ChromeOptions(); ![3](assets/3.png)\n        options.setCapability(MobileCapabilityType.PLATFORM_NAME, \"Android\"); ![4](assets/4.png)\n        options.setCapability(MobileCapabilityType.DEVICE_NAME,\n                \"Nexus 5 API 30\"); ![5](assets/5.png)\n        options.setCapability(MobileCapabilityType.AUTOMATION_NAME,\n                \"UiAutomator2\"); ![6](assets/6.png)\n\n        driver = new AppiumDriver(appiumServerUrl, options); ![7](assets/7.png)\n    }\n\n    @AfterEach\n    void teardown() {\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n\n    @Test\n    void testAppium() {\n        driver.get(\"https://bonigarcia.dev/selenium-webdriver-java/\"); ![8](assets/8.png)\n        assertThat(driver.getTitle()).contains(\"Selenium WebDriver\");\n    }\n\n}\n```", "```java\nclass RestJupiterTest {\n\n    @Test\n    void testRest() {\n        HttpBinGet get = RestAssured.get(\"https://httpbin.org/get\").then()\n                .assertThat().statusCode(200).extract().as(HttpBinGet.class); ![1](assets/1.png)\n\n        assertThat(get.getHeaders()).containsKey(\"Accept-Encoding\"); ![2](assets/2.png)\n        assertThat(get.getOrigin()).isNotBlank(); ![3](assets/3.png)\n    }\n\n}\n```", "```java\npublic class HttpBinGet {\n\n    public Map<String, String> args; ![1](assets/1.png)\n    public Map<String, String> headers;\n    public String origin;\n    public String url;\n\n    // Getters and setters ![2](assets/2.png)\n\n}\n```", "```java\nnpm install cypress ![1](assets/1.png)\nnpx cypress open ![2](assets/2.png)\n```", "```java\ndescribe('Hello World with Cypress', () => {\n   it('Login in the practice site', () => {\n      cy.visit('https://bonigarcia.dev/selenium-webdriver-java/login-form.html') ![1](assets/1.png)\n\n      cy.get('#username').type('user') ![2](assets/2.png)\n      cy.get('#password').type('user')\n      cy.contains('Submit').click() ![3](assets/3.png)\n      cy.contains('Login successful') ![4](assets/4.png)\n\n      cy.screenshot(\"hello-world-cypress\") ![5](assets/5.png)\n  })\n})\n```", "```java\nnpm init wdio .\n```", "```java\nnpx wdio run ./wdio.conf.js\n```", "```java\ndescribe('Hello World with WebDriverIO', () => {\n   it('Login in the practice site', async () => {\n      await browser.url(\n            `https://bonigarcia.dev/selenium-webdriver-java/login-form.html`);\n\n      await $('#username').setValue('user');\n      await $('#password').setValue('user');\n      await $('button[type=\"submit\"]').click();\n      await expect($('#success')).toHaveTextContaining('Login successful');\n      await browser.saveScreenshot('hello-world-webdriverio.png');\n    });\n});\n```", "```java\nnpm install -g testcafe ![1](assets/1.png)\ntestcafe chrome helloworld-testcafe.js ![2](assets/2.png)\n```", "```java\nimport { Selector } from 'testcafe';\n\nfixture`Hello World with TestCafe`\n   .page`https://bonigarcia.dev/selenium-webdriver-java/login-form.html`;\ntest('Login in the practice site', async t => {\n   await t\n      .typeText('#username', 'user')\n      .typeText('#password', 'user')\n      .click('button[type=\"submit\"]')\n      .expect(Selector('#success').innerText).eql('Login successful')\n      .takeScreenshot();\n});\n```", "```java\nnpm install puppeteer\nnode helloword-puppeteer.js\n```", "```java\nconst puppeteer = require('puppeteer');\n\n(async () => {\n   const browser = await puppeteer.launch(); ![1](assets/1.png)\n   const page = await browser.newPage();\n\n   await page.goto('https://bonigarcia.dev/selenium-webdriver-java/login-form.html');\n   await page.type('#username', 'user');\n   await page.type('#password', 'user');\n   await page.click('button[type=\"submit\"]');\n   await page.waitForXPath('//*[contains(text(), \"Login successful\")]');\n   await page.screenshot({ path: 'helloword-puppeteer.png' });\n\n   await browser.close();\n})();\n```", "```java\nconst browser = await puppeteer.launch({ headless: false });\n```", "```java\nnpm install -D playwright\n```", "```java\nnpm install -D @playwright/test\n```", "```java\nnpx playwright test\n```", "```java\nconst { test, expect } = require('@playwright/test');\n\ntest('Hello World with Playwright', async ({ page }) => {\n   await page.goto('https://bonigarcia.dev/selenium-webdriver-java/login-form.html');\n\n   await page.type('#username', 'user');\n   await page.type('#password', 'user');\n   await page.click('button[type=\"submit\"]');\n   await expect(page.locator('#success')).toHaveText('Login successful');\n\n   await page.screenshot({ path: 'helloworld-playwright.png' });\n});\n```"]