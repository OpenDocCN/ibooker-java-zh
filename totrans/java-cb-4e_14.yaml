- en: Chapter 14\. Processing JSON Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 14.0 Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JSON, or JavaScript Object Notation, is all of the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: A simple, lightweight data interchange format.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simpler, lighter alternative to XML.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to generate with `println()` or with one of several APIs.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognized directly by the JavaScript parser in all web browsers.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supported with add-on frameworks for all common languages (Java, C/C++, Perl,
    Ruby, Python, Lua, Erlang, Haskell, to name a few); a ridiculously long list of
    supported languages (including two dozen parsers for Java alone) is right on the
    [home page](http://json.org).
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A simple JSON message might look like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '*json/src/main/resources/json/softwareinfo.json/*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the syntax is simple, nestable, and amenable to human inspection.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[The JSON home page](http://json.org) provides a concise summary of JSON syntax.
    There are two kinds of structure: JSON objects (maps) and JSON arrays (lists).
    JSON objects are sets of name and value pairs, which can be represented either
    as a `java.util.Map` *or* as the properties of a Java object. For example, the
    fields of a `LocalDate` (see [Recipe 6.1](ch06.html#javacook-dates-SECT-1)) object
    for April 1, 2019, might be represented like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'JSON arrays are ordered lists, represented in Java either as arrays or as `java.util.List`s.
    A list of two dates might look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'JSON is free-format, so the preceding could also be written, with some loss
    of human readability but no loss of information or functionality, as this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Hundreds of parsers have, I’m sure, been written for JSON. A few that come
    to mind in the Java world include the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '`stringtree.org`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Very small and lightweight
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`json.org parser`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Widely used because it’s free and has a good domain name
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`jackson.org parser`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Widely used because it’s very powerful and used with Spring Framework and with
    JBoss RESTEasy and Wildfly
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '`javax.json`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Oracle’s official but currently EE-only standard
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows several ways of processing JSON data using some of the various
    APIs just listed. The official `javax.json` API is only included in the Java EE,
    not the Java SE, so it is unlikely to see very much use on the client side. This
    API uses some names in common with the `org.json` API, but not enough to be considered
    compatible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Because this is a book for client-side Java developers, nothing will be made
    of the ability to process JSON directly in server-generated, browser-based JavaScript,
    though this can be very useful in building enterprise applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 14.1 Generating JSON Directly
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to generate JSON without bothering to use an API.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get the data you want, and use `println()` or `String.format()` as appropriate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are careful, you can generate JSON data yourself. For the utterly trivial
    cases, you can just use `PrintWriter.println()` or `String.format()`. For significant
    volumes, however, it’s usually better to use one of the APIs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'This code prints the year, month, and date from a `LocalTime` object (see [Recipe
    6.1](ch06.html#javacook-dates-SECT-1)). Some of the JSON formatting is delegated
    to the `toJson()` method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码打印了`LocalTime`对象的年份、月份和日期（请参阅 [Recipe 6.1](ch06.html#javacook-dates-SECT-1)）。
    一些 JSON 格式化被委托给 `toJson()` 方法：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Of course, this is an extremely trivial example. For anything more involved,
    or for the common case of having to parse JSON objects, using one of the frameworks
    will be easier on your nerves.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个极端琐碎的例子。 对于任何更复杂的情况，或者对于必须解析 JSON 对象的常见情况，使用其中一个框架将更容易使您的神经放松。
- en: 14.2 Parsing and Writing JSON with Jackson
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.2 使用 Jackson 解析和写入 JSON
- en: Problem
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read and/or write JSON using a full-function JSON API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用完整功能的 JSON API 读取和/或写入 JSON。
- en: Solution
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use Jackson, the full-blown JSON API.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jackson，完整的 JSON API。
- en: Discussion
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Jackson provides many ways of working. For simple cases, you can have POJO (Plain
    Old Java Objects) converted to/from JSON more or less automatically, as is illustrated
    in [Example 14-1](#javacook-json-jackson-readwrite).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Jackson 提供了许多工作方式。 对于简单情况，可以将 POJO（Plain Old Java Objects）几乎自动转换为/从 JSON，如 [Example 14-1](#javacook-json-jackson-readwrite)
    所示。
- en: Example 14-1\. json/src/main/java/json/ReadWriteJackson.java (reading and writing
    POJOs with Jackson)
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-1\. json/src/main/java/json/ReadWriteJackson.java（使用 Jackson 读写 POJOs）
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO1-1)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO1-1)'
- en: Create a Jackson `ObjectMapper` that can map POJOs to/from JSON.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Jackson `ObjectMapper`，可以将 POJOs 映射到/从 JSON。
- en: '[![2](assets/2.png)](#co_processing_json_data_CO1-2)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_processing_json_data_CO1-2)'
- en: Map the string `jsonInput` into a `Person` object with one call to `readValue()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串 `jsonInput` 映射为 `Person` 对象，一次调用 `readValue()`。
- en: '[![3](assets/3.png)](#co_processing_json_data_CO1-3)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_processing_json_data_CO1-3)'
- en: Convert the `Person` object `p` into JSON with one call to `writeValue()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一次 `writeValue()` 调用将 `Person` 对象 `p` 转换为 JSON。
- en: 'Running this example produces the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例会产生以下输出：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As another example, this code reads the example file that opened this chapter
    (which happens to have been a description of a JSON parser). Notice the declaration
    `List<String>` for the array of contributors:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，这段代码读取了打开本章的示例文件（碰巧是一个 JSON 解析器的描述）。 请注意，贡献者数组的声明为 `List<String>`：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO2-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO2-1)'
- en: The `ObjectMapper` does the actual parsing of the JSON input.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectMapper` 执行 JSON 输入的实际解析。'
- en: 'Running this example produces the following output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例会产生以下输出：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of course there are cases where the mapping gets more involved; for this purpose,
    Jackson provides a set of annotations to control the mapping. But the default
    mapping is pretty good!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有些情况下映射会变得更加复杂； 为此，Jackson 提供了一组注解来控制映射。 但默认映射非常不错！
- en: There is also a streaming API for Jackson; refer to the website for details.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Jackson 还提供了一个流式 API；请参考网站了解详情。
- en: 14.3 Parsing and Writing JSON with org.json
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.3 使用 org.json 解析和写入 JSON
- en: Problem
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read/write JSON using a midsized, widely used JSON API.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用中等规模、广泛使用的 JSON API 读取/写入 JSON。
- en: Solution
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Consider using the org.json API , also known as JSON-Java; it’s widely used
    and is also used in Android.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用 org.json API，也称为 JSON-Java； 它被广泛使用，也用于 Android。
- en: Discussion
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'The *org.json* package is not as advanced as Jackson, nor as high level; it
    makes you think and work in terms of the underlying JSON abstractions instead
    of at the Java code level. For example, here is the *org.json* version of reading
    the software description from the opening of this chapter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*org.json* 包不如 Jackson 高级，也不如高级；它让你以 JSON 抽象层次而不是 Java 代码层次思考和工作。 例如，这是从本章开头读取软件描述的
    *org.json* 版本：'
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO3-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO3-1)'
- en: Create the `JSONObject` from the input.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从输入创建 `JSONObject`。
- en: '[![2](assets/2.png)](#co_processing_json_data_CO3-2)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_processing_json_data_CO3-2)'
- en: Retrieve individual `String` fields.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 检索单个 `String` 字段。
- en: '[![3](assets/3.png)](#co_processing_json_data_CO3-3)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_processing_json_data_CO3-3)'
- en: Retrieve the `JSONArray` of contributor names.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 检索贡献者名称的 `JSONArray`。
- en: '[![4](assets/4.png)](#co_processing_json_data_CO3-4)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_processing_json_data_CO3-4)'
- en: '`org.json.JSONArray` doesn’t implement `Iterable`, so you can’t use a `forEach`
    loop.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.json.JSONArray` 不实现 `Iterable`，因此无法使用 `forEach` 循环。'
- en: 'Running it produces the expected output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它会产生预期的输出：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`JSONObject` and `JSONArray` use their `toString()` method to produce (correctly
    formatted) JSON strings, like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject` 和 `JSONArray` 使用它们的 `toString()` 方法生成（正确格式化的）JSON 字符串，如下所示：'
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO4-1)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO4-1)'
- en: Nice that it offers a fluent API to allow chaining of method calls.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了流畅 API，允许方法调用的链式操作。
- en: '[![2](assets/2.png)](#co_processing_json_data_CO4-2)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_processing_json_data_CO4-2)'
- en: '`toString()` converts to textual JSON representation.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString()` 将转换为文本JSON表示形式。'
- en: 'Running this produces the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个程序会产生以下结果：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See Also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The org.json library code including its javadoc documentation is online at [*https://github.com/stleary/JSON-java*](https://github.com/stleary/JSON-java).
    (under the name JSON-java to differentiate it from the other packages).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: org.json 库的代码，包括其 javadoc 文档，都可以在 [*https://github.com/stleary/JSON-java*](https://github.com/stleary/JSON-java)（在名称上使用
    JSON-java 以区分它与其他包）在线查看。
- en: 14.4 Parsing and Writing JSON with JSON-B
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.4 使用 JSON-B 解析和写入 JSON
- en: Problem
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to read/write JSON using a midsized, standards-conforming JSON API.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用中型、符合标准的 JSON API 进行读写 JSON。
- en: Solution
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Consider using JSON-B, the new Java standard (JSR-367).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用 JSON-B，这是新的 Java 标准（JSR-367）。
- en: Discussion
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: The JSON-B (JSON Binding) API is designed to make it simple to read/write Java
    POJOs. This is neatly illustrated by the code in [Example 14-2](#javacook-json-jsonb-code1).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-B（JSON Binding）API 旨在简化读写 Java POJOs。这在代码示例 [Example 14-2](#javacook-json-jsonb-code1)
    中得到了清晰的展示。
- en: Example 14-2\. json/src/main/java/json/ReadWriteJsonB.java (reading/writing
    JSON with JSON-B)
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-2\. json/src/main/java/json/ReadWriteJsonB.java（使用 JSON-B 读写 JSON）
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO5-1)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO5-1)'
- en: Create a `Jsonb` object, your gateway to JSON-B services.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `Jsonb` 对象，这是你使用 JSON-B 服务的入口。
- en: '[![2](assets/2.png)](#co_processing_json_data_CO5-2)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_processing_json_data_CO5-2)'
- en: Obtain a JSON string, and convert it to a Java object using `jsonb.fromJson()`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个 JSON 字符串，并使用 `jsonb.fromJson()` 将其转换为 Java 对象。
- en: '[![3](assets/3.png)](#co_processing_json_data_CO5-3)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_processing_json_data_CO5-3)'
- en: Convert a `Person` object back to a JSON string using the inverse `jsonb.toJson()`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反向 `jsonb.toJson()` 将 `Person` 对象转换回 JSON 字符串。
- en: 'Note that the methods are sensibly named and that no annotations are needed
    on the Java entity class to make this work. However, there is an API that allows
    us to customize it. For example, the `fullName` property is really just a convenience
    for concatenating the first name and last name with a space between. As such,
    it’s completely redundant and does not need to be transmitted over a JSON network
    stream. However, running the program produces this output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意方法命名合理，不需要在 Java 实体类上使用任何注解即可实现功能。然而，我们有一个API允许我们自定义。例如，`fullName` 属性只是一个便利，用于在名字和姓氏之间添加一个空格。因此，它完全是多余的，不需要在
    JSON 网络流上传输。然而，运行程序会产生以下输出：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need only add the `@JsonbTransient` annotation to the `getFullName()` accessor
    in the `Person` class to eliminate the redundancy; running the program now produces
    this smaller output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在 `Person` 类的 `getFullName()` 访问器中添加 `@JsonbTransient` 注解即可消除冗余；现在运行程序会产生较小的输出：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See Also
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: As with most other JSON APIs, there is full support for customization, ranging
    from the simple annotation shown here up to writing complete custom serializer/deserializer
    helpers. See [the JSON-B spec page](https://javaee.github.io/jsonb-spec), the
    [JSON-B home page](http://json-b.net), and [this longer tutorial online](https://www.baeldung.com/java-json-binding-api).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他 JSON API 一样，从简单注解到编写完整自定义序列化器/反序列化器助手，都有全面的支持。请参阅 [JSON-B 规范页面](https://javaee.github.io/jsonb-spec)，[JSON-B
    主页](http://json-b.net) 和 [这个更长的在线教程](https://www.baeldung.com/java-json-binding-api)。
- en: 14.5 Finding JSON Elements with JSON Pointer
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.5 使用 JSON 指针查找 JSON 元素
- en: Problem
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You have a JSON document and want to extract only selected values from it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个 JSON 文档并且只想从中提取选定的值时。
- en: Solution
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use `javax.json`’s implementation of *JSON Pointer*, the standard API for extracting
    selected elements from JSON.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `javax.json` 的 *JSON Pointer* 实现，这是从 JSON 中提取选定元素的标准API。
- en: Discussion
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: '[The Internet Standard RFC 6901](https://tools.ietf.org/html/rfc6901) spells
    out in detail the syntax for JSON Pointer, a language-independent syntax for matching
    elements in JSON documents. Obviously inspired by the XML syntax XPath, JSON Pointer
    is a bit simpler than XPath because of JSON’s inherent simpllicity. Basically
    a JSON Pointer is a string that identifies an element (either simple or array)
    within a JSON document. The `javax.json` package provides an object model API
    somewhat similar to the XML DOM API for Java, letting you create immutable objects
    to represent objects (via `JsonObjectBuilder` and `JsonArrayBuilder`) or to read
    them from JSON string format via a `Reader` or `InputStream`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[互联网标准 RFC 6901](https://tools.ietf.org/html/rfc6901) 详细说明了 JSON Pointer 的语法，这是一种独立于语言的语法，用于匹配
    JSON 文档中的元素。显然受到 XML 语法 XPath 的启发，JSON Pointer 比 XPath 简单一些，因为 JSON 本身的简单性。基本上，JSON
    Pointer 是一个字符串，用于标识 JSON 文档中的元素（简单或数组）。`javax.json` 包提供了一种对象模型 API，与 Java 的 XML
    DOM API 类似，允许您创建不可变对象来表示对象（通过 `JsonObjectBuilder` 和 `JsonArrayBuilder`）或通过 `Reader`
    或 `InputStream` 从 JSON 字符串格式中读取它们。'
- en: 'JSON Pointers begin with a “/” (inherited from XPath), followed by the name
    of the element or subelement we want to look for. Suppose we extend our `Person`
    example from [Example 14-2](#javacook-json-jsonb-code1) to add an array of roles
    the comedian played, looking like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 指针以 “/” 开始（继承自 XPath），后跟我们要查找的元素或子元素的名称。假设我们扩展了示例 [14-2](#javacook-json-jsonb-code1)
    中的 `Person` 示例，以添加喜剧演员扮演的角色数组，看起来像这样：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then the following JSON Pointers should generate the given matches:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，以下 JSON 指针应生成给定的匹配：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The program in [Example 14-3](#javacook-json-jsonpointer-1) demonstrates this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 [14-3](#javacook-json-jsonpointer-1) 中的程序演示了这一点。
- en: Example 14-3\. json/src/main/java/json/JsonPointerDemo.java
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 14-3\. json/src/main/java/json/JsonPointerDemo.java
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_processing_json_data_CO6-1)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_processing_json_data_CO6-1)'
- en: Create the `JsonStructure`, the gateway into this API, from a `JsonReader`,
    using a `StringReader`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `JsonReader` 从 `StringReader` 创建 `JsonStructure`，这是进入此 API 的入口。
- en: '[![2](assets/2.png)](#co_processing_json_data_CO6-2)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_processing_json_data_CO6-2)'
- en: Create a JSON Pointer for the `firstName` element, and get the `JsonString`
    from the element’s value. Since `getValue()` will throw an exception if the element
    is not found, use `jsonPointer.containsValue(jsonStr)` to check first, if not
    sure if the element will be found.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `firstName` 元素的 JSON Pointer，并从元素的值获取 `JsonString`。如果不确定元素是否会被找到，则使用 `jsonPointer.containsValue(jsonStr)`
    先检查，因为 `getValue()` 如果未找到元素将抛出异常。
- en: '[![3](assets/3.png)](#co_processing_json_data_CO6-3)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_processing_json_data_CO6-3)'
- en: Same for `age`, but using more fluent syntax. If you print the class name for
    the match in `/age`, it will report an implementation-specific implementation
    class, such as `org.glassfish.json.JsonNumberImpl$JsonIntNumber`. Change the age
    in the XML from 63 to 63.5 and it will print a class with `BigDecimal` in its
    name. Either way, `toString()` on this object will return just the numeric value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `age` 也是一样，但使用更流畅的语法。如果打印匹配 `/age` 的类名称，它将报告一个特定于实现的实现类，例如 `org.glassfish.json.JsonNumberImpl$JsonIntNumber`。将
    XML 中的年龄从 63 更改为 63.5，它将打印一个带有 `BigDecimal` 的类名。无论哪种方式，该对象的 `toString()` 将只返回数值。
- en: '[![4](assets/4.png)](#co_processing_json_data_CO6-4)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_processing_json_data_CO6-4)'
- en: In the JSON file, `roles` is an array. Thus, getting it using a JSON Pointer
    should return a `JsonArray` object, so we cast it to a reference of that type.
    This behaves somewhat like an immutable `List` implementation, so we call `get()`.
    JSON array indices start at zero, as in Java.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JSON 文件中，`roles` 是一个数组。因此，使用 JSON 指针获取它应返回一个 `JsonArray` 对象，因此我们将其转换为该类型的引用。这类似于不可变的
    `List` 实现，因此我们调用 `get()`。JSON 数组索引从零开始，与 Java 相同。
- en: '[![5](assets/5.png)](#co_processing_json_data_CO6-5)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_processing_json_data_CO6-5)'
- en: Retrieve the same array element directly, using a pattern with “/1” to mean
    the numbered element in the array.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 直接检索相同的数组元素，使用带有“/1”的模式表示数组中的编号元素。
- en: It is possible (but fortunately not common) for a JSON element name to contain
    special characters such as a slash. Most characters are not special to JSON Pointer,
    but to match a name containing a slash (*/*), the slash must be entered as *~1*,
    and since that makes the tilde (*~*) special, tilde characters must be entered
    as *~0*. Thus if the Person JSON file had an element like `"ft/pt/~"`, you would
    look for it with `Json.createPointer("/ft~1pt~1~0");`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能（但幸运的是不常见）JSON 元素名称包含特殊字符，如斜杠。大多数字符对于 JSON Pointer 不是特殊的，但要匹配包含斜杠（*/）的名称，斜杠必须输入为
    *~1*，而因为这使得波浪号（*~*）变成特殊字符，所以波浪号必须输入为 *~0*。因此，如果 Person JSON 文件有一个像 `"ft/pt/~"`
    的元素，你需要使用 `Json.createPointer("/ft~1pt~1~0")` 来查找它。
- en: See Also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The JSON Pointer API has additional methods that let you modify values and add/remove
    elements. The offical home page for `javax.json`, which includes JSON Pointer,
    is at [*jakarta.ee*](https://jakarta.ee/specifications/jsonp/1.1). The javadoc
    for `javax.json` is linked to from that page.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Pointer API 提供了额外的方法，让你可以修改数值和添加/移除元素。官方主页为 `javax.json`，其中包括 JSON Pointer，位于
    [*jakarta.ee*](https://jakarta.ee/specifications/jsonp/1.1)。`javax.json` 的 javadoc
    可从该页面链接获取。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: Many APIs exist for Java. Jackson is the biggest and most powerful; org.json,
    javax.json, and JSON-B are in the middle and StringTree (which I didn’t give an
    example of because it doesn’t have a Maven Artifact available) is the smallest.
    For a list of these and other JSON APIs, consult [*https://www.json.org/json-en.html*](https://www.json.org/json-en.html)
    and scroll past the syntax summary.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Java 有很多 API。Jackson 是最大最强大的；org.json、javax.json 和 JSON-B 处于中间地带，StringTree（我没有给出示例因为它没有
    Maven Artifact）最小。要查看这些及其他 JSON API 的列表，请参阅 [*https://www.json.org/json-en.html*](https://www.json.org/json-en.html)，并滚动到语法总结之后。
