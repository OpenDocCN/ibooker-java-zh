["```java\nlong factorialHead(long n) { ![1](assets/1.png)\n\n  if (n == 1L) { ![2](assets/2.png)\n    return 1L;\n  }\n\n  var nextN = n - 1L;\n\n  return n * factorialHead(nextN); ![3](assets/3.png)\n}\n\nvar result = factorialHead(4L);\n// => 24\n```", "```java\nlong factorialTail(long n, long accumulator) { ![1](assets/1.png)\n\n  if (n == 1L) { ![2](assets/2.png)\n    return accumulator;\n  }\n\n  var nextN = n - 1L;\n  var nextAccumulator = n * accumulator;\n\n  return factorialTail(nextN, nextAccumulator); ![3](assets/3.png)\n}\n\nvar result = factorialTail(4L, 1L); ![4](assets/4.png)\n// => 24\n```", "```java\npublic record Node<T>(T value, Node<T> left, Node<T> right) {\n\n  public static <T> Node<T> of(T value, Node<T> left, Node<T> right) {\n    return new Node<>(value, left, right);\n  }\n\n  public static <T> Node<T> of(T value) {\n    return new Node<>(value, null, null);\n  }\n\n  public static <T> Node<T> left(T value, Node<T> left) {\n    return new Node<>(value, left, null);\n  }\n\n  public static <T> Node<T> right(T value, Node<T> right) {\n    return new Node<>(value, null, right);\n  }\n}\n\nvar root = Node.of(\"1\",\n                   Node.of(\"2\",\n                           Node.of(\"4\",\n                                   Node.of(\"7\"),\n                                   Node.of(\"8\")),\n                           Node.of(\"5\")),\n                   Node.right(\"3\",\n                              Node.left(\"6\",\n                                        Node.of(\"9\"))));\n```", "```java\nvoid traverseIterative(Node<String> root) {\n  var tmpNodes = new Stack<Node<String>>(); ![1](assets/1.png)\n  var current = root;\n\n  while(!tmpNodes.isEmpty() || current != null) { ![2](assets/2.png)\n\n    if (current != null) { ![3](assets/3.png)\n      tmpNodes.push(current);\n      current = current.left();\n      continue;\n    }\n\n    current = tmpNodes.pop(); ![4](assets/4.png)\n\n    System.out.print(current.value()); ![5](assets/5.png)\n\n    current = current.right(); ![6](assets/6.png)\n  }\n}\n```", "```java\nvoid traverseRecursion(Node<String> node) {\n  if (node == null) { ![1](assets/1.png)\n    return;\n  }\n\n  traverseRecursion(node.left()); ![2](assets/2.png)\n\n  System.out.print(node.value()); ![3](assets/3.png)\n\n  traverseRecursion(node.right()); ![4](assets/4.png)\n}\n```", "```java\nrecord Node<T>(T value, Node<T> left, Node<T> right) {\n\n  // ...\n\n  private static <T> void traverse(Node<T> node, ![1](assets/1.png)\n                                   Consumer<T> fn) { ![2](assets/2.png)\n    if (node == null) {\n      return;\n    }\n\n    traverse(node.left(), fn);\n\n    fn.accept(node.value());\n\n    traverse(node.right(), fn);\n  }\n\n  public void traverse(Consumer<T> fn) { ![3](assets/3.png)\n    Node.traverse(this, fn);\n  }\n}\n\nroot.traverse(System.out::print);\n```"]