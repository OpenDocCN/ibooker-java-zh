["```java\nmvn clean package\n```", "```java\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-failsafe-plugin</artifactId>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>integration-test</goal>\n                        <goal>verify</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\n<properties>\n    <java.version>1.8</java.version> ![1](assets/1.png)\n    <maven.compiler.target>${java.version}</maven.compiler.target>\n    <maven.compiler.source>${java.version}</maven.compiler.source>\n</properties>\n\n<dependencies> ![2](assets/2.png)\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>${slf4j.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>ch.qos.logback</groupId>\n        <artifactId>logback-classic</artifactId>\n        <version>${logback.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.seleniumhq.selenium</groupId>\n        <artifactId>selenium-java</artifactId>\n        <version>${selenium.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.assertj</groupId>\n        <artifactId>assertj-core</artifactId>\n        <version>${assertj.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>io.github.bonigarcia</groupId>\n        <artifactId>webdrivermanager</artifactId>\n        <version>${wdm.version}</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin> ![3](assets/3.png)\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${maven-surefire-plugin.version}</version>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>${junit4.version}</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <version>${junit5.version}</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```", "```java\n<dependency>\n    <groupId>io.github.bonigarcia</groupId>\n    <artifactId>selenium-jupiter</artifactId>\n    <version>${selenium-jupiter.version}</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>org.testng</groupId>\n    <artifactId>testng</artifactId>\n    <version>${testng.version}</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${maven-surefire-plugin.version}</version>\n            <!-- The following setup is required only when using Allure --> ![1](assets/1.png)\n            <configuration>\n                <properties>\n                    <property>\n                        <name>listener</name>\n                        <value>io.qameta.allure.junit4.AllureJunit4</value> ![2](assets/2.png)\n                    </property>\n                </properties>\n            </configuration>\n            <!-- /Allure -->\n        </plugin>\n        <plugin> ![3](assets/3.png)\n            <groupId>io.qameta.allure</groupId>\n            <artifactId>allure-maven</artifactId>\n            <version>${allure-maven.version}</version>\n        </plugin>\n        <plugin> ![4](assets/4.png)\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <version>${spring-boot.version}</version>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\nplugins {\n    id \"java\" ![1](assets/1.png)\n}\n\ncompileTestJava { ![2](assets/2.png)\n    sourceCompatibility = 1.8\n    targetCompatibility = 1.8\n    options.compilerArgs += \"-parameters\"\n}\n\ntest {\n    testLogging { ![3](assets/3.png)\n        events \"passed\", \"skipped\", \"failed\"\n        showStandardStreams = true\n    }\n\n    systemProperties System.properties ![4](assets/4.png)\n\n    if (project.hasProperty(\"excludeTests\")) { ![5](assets/5.png)\n        \"$excludeTests\".split(\",\").each { excludeTests ->\n            exclude excludeTests\n        }\n    }\n\n    if (project.hasProperty(\"parallel\")) { ![6](assets/6.png)\n        maxParallelForks = Runtime.runtime.availableProcessors()\n    }\n\n    ext.failedTests = [] ![7](assets/7.png)\n\n    tasks.withType(Test) {\n        afterTest { TestDescriptor descriptor, TestResult result ->\n            if(result.resultType ==\n                  org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {\n                failedTests << [\"${descriptor.className}::${descriptor.name}\"]\n            }\n        }\n    }\n\n    gradle.buildFinished {\n        if(!failedTests.empty){\n            println \"Failed test(s) for ${project.name}:\"\n            failedTests.each { failedTest ->\n                println failedTest\n            }\n        }\n    }\n}\n\nrepositories {\n    mavenCentral() ![8](assets/8.png)\n}\n\ndependencies { ![9](assets/9.png)\n    implementation(\"org.slf4j:slf4j-api:${slf4jVersion}\")\n    implementation(\"ch.qos.logback:logback-classic:${logbackVersion}\")\n\n    testImplementation(\"org.seleniumhq.selenium:selenium-java:${seleniumVersion}\")\n    testImplementation(\"org.assertj:assertj-core:${assertjVersion}\")\n    testImplementation(\"io.github.bonigarcia:webdrivermanager:${wdmVersion}\")\n}\n```", "```java\ntest {\n    useJUnit() { ![1](assets/1.png)\n        if (project.hasProperty(\"groups\")) {\n            includeCategories \"$groups\"\n        }\n        if (project.hasProperty(\"excludedGroups\")) {\n            excludeCategories \"$excludedGroups\"\n        }\n    }\n}\n\ndependencies { ![2](assets/2.png)\n    testImplementation(\"junit:junit:${junit4Version}\")\n}\n```", "```java\ntest {\n    useJUnitPlatform() {\n        if (project.hasProperty(\"groups\")) {\n            includeTags \"$groups\"\n        }\n        if (project.hasProperty(\"excludedGroups\")) {\n            excludeTags \"$excludedGroups\"\n        }\n    }\n}\n\ndependencies {\n    testImplementation(\"org.junit.jupiter:junit-jupiter:${junit5Version}\")\n}\n```", "```java\ndependencies {\n    testImplementation(\"io.github.bonigarcia:selenium-jupiter:${selJupVersion}\")\n}\n```", "```java\ntest {\n    useTestNG() {\n        if (project.hasProperty(\"groups\")) { ![1](assets/1.png)\n            includeGroups \"$groups\"\n        }\n        if (project.hasProperty(\"excludedGroups\")) {\n            excludeGroups \"$excludedGroups\"\n        }\n    }\n\n    scanForTestClasses = false ![2](assets/2.png)\n}\n\ndependencies { ![3](assets/3.png)\n    testImplementation(\"org.testng:testng:${testNgVersion}\")\n}\n```", "```java\nplugins {\n    id \"io.qameta.allure\"\n    id \"org.springframework.boot\"\n}\n\nrepositories {\n    maven {\n       url \"https://plugins.gradle.org/m2/\"\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n   <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n      <encoder>\n         <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}.%M\\(%line\\)\n                  - %msg%n</pattern>\n      </encoder>\n   </appender>\n\n   <logger name=\"io.github.bonigarcia\" level=\"DEBUG\" />\n\n   <root level=\"INFO\">\n      <appender-ref ref=\"STDOUT\" />\n   </root>\n\n</configuration>\n```", "```java\nstatic final Logger log = getLogger(lookup().lookupClass());\n\nlog.info(\"This is an informative message\");\nlog.debug(\"This is a debugging message\");\n```", "```java\nname: build\n\non: ![1](assets/1.png)\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv: ![2](assets/2.png)\n  DISPLAY: :99\n  WDM_GITHUBTOKEN: ${{ secrets.WDM_GITHUBTOKEN }}\n\njobs:\n  tests: ![3](assets/3.png)\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ ubuntu-latest, windows-latest, macos-latest ]\n        java: [ 8 ]\n\n    steps: ![4](assets/4.png)\n    - name: Checkout GitHub repo\n      uses: actions/checkout@v2\n    - name: Set up Java\n      uses: actions/setup-java@v2\n      with:\n        distribution: 'temurin'\n        java-version: ${{ matrix.java }}\n    - name: Start Xvfb\n      run: Xvfb :99 &\n    - name: Test with Maven\n      run: mvn -B test\n    - name: Test with Gradle\n      run: ./gradlew test\n```", "```java\nversion: 2\nupdates:\n- package-ecosystem: maven ![1](assets/1.png)\n  directory: \"/\"\n  schedule:\n    interval: daily\n    time: '06:00'\n  open-pull-requests-limit: 99\n\n- package-ecosystem: gradle ![2](assets/2.png)\n  directory: \"/\"\n  schedule:\n    interval: daily\n    time: '06:00'\n  open-pull-requests-limit: 99\n\n- package-ecosystem: github-actions ![3](assets/3.png)\n  directory: \"/\"\n  schedule:\n    interval: daily\n    time: '06:00'\n  open-pull-requests-limit: 99\n```"]