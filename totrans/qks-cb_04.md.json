["```java\ngreeting.message=Hello World\n```", "```java\n@ConfigProperty(name = \"greeting.message\") ![1](Images/1.png)\nString message; ![2](Images/2.png)\n\n@GET\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\n    return message; ![3](Images/3.png)\n}\n```", "```java\ncurl http://localhost:8080/hello\n\nHello World\n```", "```java\n@ConfigProperty(name = \"greeting.upper-case\",\n                defaultValue = \"true\") ![1](Images/1.png)\nboolean upperCase;\n@GET\n@Path(\"/optional\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloOptional() {\n    return upperCase ? message.toUpperCase() : message;\n}\n```", "```java\ncurl http://localhost:8080/hello/optional\n\nHELLO WORLD\n```", "```java\ngreeting.suffix=!!, How are you???\n```", "```java\n@ConfigProperty(name = \"greeting.suffix\")\nList<String> suffixes;\n@GET\n@Path(\"/list\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloList() {\n    return message + suffixes.get(1);\n}\n```", "```java\ncurl http://localhost:8080/hello/list\n\nHello World How are you?\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"config-yaml\"\n```", "```java\ngreeting.message=Hello World\n\n%staging.quarkus.http.port=8182\n\nquarkus.http.cors=true\nquarkus.http.cors.methods=GET,PUT,POST\n```", "```java\ngreeting:\n  message: Hello World ![1](Images/1.png)\n\"%staging\": ![2](Images/2.png)\n  quarkus:\n    http:\n      port: 8182\nquarkus:\n  http:\n    cors:\n      ~: true ![3](Images/3.png)\n      methods: GET,PUT,POST\n```", "```java\n@Inject ![1](Images/1.png)\nConfig config;\n@GET\n@Path(\"/config\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloConfig() {\n    config.getPropertyNames().forEach( p -> System.out.println(p)); ![2](Images/2.png)\n\n    return config.getValue(\"greeting.message\", String.class); ![3](Images/3.png)\n}\n```", "```java\n./mvnw clean package -DskipTests\n\njava -Dgreeting.message=Aloha -jar target/getting-started-1.0-SNAPSHOT-runner.jar\n```", "```java\ncurl localhost:8080/hello\n\nAloha\n```", "```java\ngreeting.message=Hello World\n```", "```java\nexport greeting.message=Aloha\nexport greeting_message=Aloha\nexport GREETING_MESSAGE=Aloha\n```", "```java\n%dev.quarkus.http.port=8181\n```", "```java\n./mvnw compile quarkus:dev\n\nINFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\nINFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed\n in 671ms\nINFO  [io.quarkus] (main) Quarkus 1.4.1 started in 1.385s. Listening on:\n http://0.0.0.0:8181\nINFO  [io.quarkus] (main) Profile dev activated. Live Coding activated.\nINFO  [io.quarkus] (main) Installed features:\n [cdi, hibernate-validator, resteasy]\n```", "```java\nquarkus.log.level=DEBUG\n```", "```java\n./mvnw compile quarkus:dev\n\n...\n[INFO] --- quarkus-maven-plugin:0.22.0:dev (default-cli) @ getting-started ---\nListening for transport dt_socket at address: 5005\nDEBUG [org.jbo.logging] (main) Logging Provider: \\\n org.jboss.logging.JBossLogManagerProvider\nINFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\nDEBUG [io.qua.run.con.ConverterSupport] (main) Populate SmallRye config builder\n with converter for class java.net.InetSocketAddress of priority 200\nDEBUG [io.qua.run.con.ConverterSupport] (main) Populate SmallRye config builder\n with converter for class org.wildfly.common.net.CidrAddress of priority 200\n```", "```java\nquarkus.log.file.enable=true\n```", "```java\nprivate static org.jboss.logging.Logger logger =\n                org.jboss.logging.Logger.getLogger(GreetingResource.class); ![1](Images/1.png)\n\n@GET\n@Path(\"/log\") ![2](Images/2.png)\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloLog() {\n    logger.info(\"I said Hello\"); ![3](Images/3.png)\n    return \"hello\";\n}\n```", "```java\n./mvnw compile quarkus:dev\n```", "```java\ncurl http://localhost:8080/hello/log\n```", "```java\nINFO  [org.acm.qui.GreetingResource] (executor-thread-1) I said Hello\n```", "```java\nquarkus.log.category.\"org.acme.quickstart\".level=WARNING ![1](Images/1.png)\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"logging-json\"\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"logging-gelf\"\n```", "```java\nprivate static org.jboss.logging.Logger logger =\n                org.jboss.logging.Logger.getLogger(GreetingResource.class); ![1](Images/1.png)\n\n@GET\n@Path(\"/log\") ![2](Images/2.png)\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloLog() {\n    logger.info(\"I said Hello\"); ![3](Images/3.png)\n    return \"hello\";\n}\n```", "```java\nquarkus.log.handler.gelf.enabled=true ![1](Images/1.png)\nquarkus.log.handler.gelf.host=localhost ![2](Images/2.png)\nquarkus.log.handler.gelf.port=12201 ![3](Images/3.png)\n```", "```java\ninput {\n  gelf {\n    port => 12201\n  }\n}\noutput {\n  stdout {}\n  elasticsearch {\n    hosts => [\"http://elasticsearch:9200\"]\n  }\n}\n```", "```java\n<source>\n  type gelf\n  tag example.gelf\n  bind 0.0.0.0\n  port 12201\n</source>\n\n<match example.gelf>\n  @type elasticsearch\n  host elasticsearch\n  port 9200\n  logstash_format true\n</match>\n```", "```java\nquarkus.log.syslog.enable=true\nquarkus.log.syslog.endpoint=localhost:5140\nquarkus.log.syslog.protocol=udp\nquarkus.log.syslog.app-name=quarkus\nquarkus.log.syslog.hostname=quarkus-test\n```", "```java\n<source>\n  @type syslog\n  port 5140\n  bind 0.0.0.0\n  message_format rfc5424\n  tag system\n</source>\n\n<match **>\n  @type elasticsearch\n  host elasticsearch\n  port 9200\n  logstash_format true\n</match>\n```", "```java\n%staging.quarkus.http.port=8182\n```", "```java\n./mvnw -Dquarkus.profile=staging compile quarkus:dev\n\nINFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning quarkus augmentation\nINFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus augmentation completed\n in 640ms\nINFO  [io.quarkus] (main) Quarkus 0.23.2 started in 1.300s. Listening on:\n http://0.0.0.0:8182\nINFO  [io.quarkus] (main) Profile staging activated. Live Coding activated.\nINFO  [io.quarkus] (main) Installed features: [cdi, hibernate-validator,\n resteasy]\n```", "```java\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>${surefire-plugin.version}</version>\n<configuration>\n    <systemPropertyVariables>\n        <quarkus.test.profile>foo</quarkus.test.profile>\n        <buildDirectory>${project.build.directory}</buildDirectory>\n    </systemPropertyVariables>\n</configuration>\n```", "```java\ntest {\n    useJUnitPlatform()\n    systemProperty \"quarkus.test.profile\", \"foo\"\n}\n```", "```java\n./mvnw package -Pnative -Dquarkus.profile=prod-kubernetes` ./target/getting-started-1.0-runner ![1](Images/1.png)\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.microprofile.config.spi.ConfigSource;\n\npublic class InMemoryConfigSource implements ConfigSource {\n\n    private Map<String, String> prop = new HashMap<>();\n\n    public InMemoryConfigSource() { ![1](Images/1.png)\n        prop.put(\"greeting.color\", \"red\");\n    }\n\n    @Override\n    public int getOrdinal() { ![2](Images/2.png)\n        return 500;\n    }\n\n    @Override\n    public Map<String, String> getProperties() { ![3](Images/3.png)\n        return prop;\n    }\n\n    @Override\n    public String getValue(String propertyName) { ![4](Images/4.png)\n        return prop.get(propertyName);\n    }\n\n    @Override\n    public String getName() { ![5](Images/5.png)\n        return \"MemoryConfigSource\";\n    }\n\n}\n```", "```java\norg.acme.quickstart.InMemoryConfigSource\n```", "```java\n@ConfigProperty(name = \"greeting.color\") ![1](Images/1.png)\nString color;\n\n@GET\n@Path(\"/color\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String color() {\n    return color;\n}\n```", "```java\ncurl http://localhost:8080/hello/color\n\nred\n```", "```java\npackage org.acme.quickstart;\n\npublic class Percentage {\n\n    private double percentage;\n\n    public Percentage(double percentage) {\n        this.percentage = percentage;\n    }\n\n    public double getPercentage() {\n        return percentage;\n    }\n\n}\n```", "```java\npackage org.acme.quickstart;\n\nimport javax.annotation.Priority;\n\nimport org.eclipse.microprofile.config.spi.Converter;\n\n@Priority(300) ![1](Images/1.png)\npublic class PercentageConverter implements Converter<Percentage> { ![2](Images/2.png)\n\n    @Override\n    public Percentage convert(String value) {\n\n        String numeric = value.substring(0, value.length() - 1);\n        return new Percentage (Double.parseDouble(numeric) / 100);\n\n    }\n\n}\n```", "```java\norg.acme.quickstart.PercentageConverter\n```", "```java\n@ConfigProperty(name = \"greeting.vat\")\nPercentage vat;\n\n@GET\n@Path(\"/vat\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String vat() {\n    return Double.toString(vat.getPercentage());\n}\n```", "```java\ngreeting.vat = 21%\n```", "```java\ncurl http://localhost:8080/hello/vat\n\n0.21\n```", "```java\ngreeting.message=Hello World\ngreeting.suffix=!!, How are you???\n```", "```java\npackage org.acme.quickstart;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport javax.validation.constraints.Max;\nimport javax.validation.constraints.Min;\n\nimport io.quarkus.arc.config.ConfigProperties;\n\n@ConfigProperties(prefix = \"greeting\") ![1](Images/1.png)\npublic class GreetingConfiguration {\n\n    public String message; ![2](Images/2.png)\n    public String suffix = \"!\"; ![3](Images/3.png)\n}\n```", "```java\n@Inject ![1](Images/1.png)\nGreetingConfiguration greetingConfiguration;\n\n@GET\n@Path(\"/configurations\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String helloConfigurations() {\n    return greetingConfiguration.message + greetingConfiguration.suffix;\n}\n```", "```java\ncurl http://localhost:8080/hello/configurations\n\nHello World!!, How are you???\n```", "```java\ngreeting.output.recipients=Ada,Alexandra\n```", "```java\npublic OutputConfiguration output; ![1](Images/1.png)\n\npublic static class OutputConfiguration {\n    public List<String> recipients;\n}\n```", "```java\n./mvnw quarkus:add-extension -Dextensions=\"quarkus-hibernate-validator\"\n```", "```java\n@Min(1) ![1](Images/1.png)\n@Max(3) ![2](Images/2.png)\npublic Integer repeat;\n```", "```java\ngreeting.repeat=7\n```", "```java\n./mvnw compile quarkus:dev\n```"]