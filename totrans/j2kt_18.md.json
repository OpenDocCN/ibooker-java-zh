["```java\ndata class Itinerary(\n    val id: Id<Itinerary>,\n    val route: Route,\n    val accommodations: List<Accommodation> = emptyList()\n) {\n    ...\n}\n```", "```java\ndata class Itinerary(\n    val id: Id<Itinerary>,\n    val items: List<ItineraryItem>\n) : Iterable<ItineraryItem> by items\n```", "```java\ninterface ItineraryItem {\n    val id: Id<ItineraryItem>\n    val description: String\n    val costs: List<Money>\n    val mapOverlay: MapOverlay\n    ... and other methods\n}\n```", "```java\nval Itinerary.mapOverlay\n    get() = OverlayGroup(\n        id = id,\n        elements = items.map { it.mapOverlay })\n```", "```java\nif (item instanceof Journey) {\n    var journey = (Journey) item;\n    return ...\n} else if (item instanceof Accommodation) {\n    var accommodation = (Accommodation) item;\n    return ...\n} else if (item instanceof RestaurantBooking) {\n    var restaurant = (RestaurantBooking) item;\n    return ...\n} else {\n    throw new IllegalStateException(\"should never happen\");\n}\n```", "```java\nval <T> T.exhaustive get() = this\n```", "```java\nwhen (instanceOfSealedClass) {\n    is SubclassA -> println(\"A\")\n    is SubclassB -> println(\"B\")\n}.exhaustive\n```", "```java\nsealed class ItineraryItem { ![1](assets/1.png)\n    abstract val id: Id<ItineraryItem> ![2](assets/2.png)\n    abstract val description: String\n    abstract val costs: List<Money>\n    abstract val mapOverlay: MapOverlay\n    ... and other methods\n}\n\ndata class Accommodation(\n    override val id: Id<Accommodation>,\n    val location: Location,\n    val checkInFrom: ZonedDateTime,\n    val checkOutBefore: ZonedDateTime,\n    val pricePerNight: Money\n) : ItineraryItem() { ![3](assets/3.png)\n    val nights = Period.between(\n        checkInFrom.toLocalDate(),\n        checkOutBefore.toLocalDate()\n    ).days\n    val totalPrice: Money = pricePerNight * nights\n\n    override val description\n        get() = \"$nights nights at ${location.userReadableName}\"\n    override val costs\n        get() = listOf(totalPrice)\n    override val mapOverlay\n        get() = PointOverlay(\n            id = id,\n            position = location.position,\n            text = location.userReadableName,\n            icon = StandardIcons.HOTEL\n        )\n\n    ... and other methods\n}\n\n... and other subclasses\n```", "```java\nfun ItineraryItem.toCalendarEvent(): CalendarEvent? = when (this) {\n    is Accommodation -> CalendarEvent(\n        start = checkInFrom,\n        end = checkOutBefore,\n        description = description,\n        alarms = listOf(\n            Alarm(checkInFrom, \"Check in open\"),\n            Alarm(checkOutBefore.minusHours(1), \"Check out\")\n        )\n    )\n    is Attraction -> null\n    is Journey -> CalendarEvent(\n        start = departureTime,\n        end = arrivalTime,\n        description = description,\n        location = departsFrom,\n        alarms = listOf(\n            Alarm(departureTime.minusHours(1)))\n    )\n    is RestaurantBooking -> CalendarEvent(\n        start = time,\n        description= description,\n        location = location,\n        alarms = listOf(\n            Alarm(time.minusHours(1)))\n    )\n}\n```", "```java\nsealed class ItineraryItem {\n    abstract val id: Id<ItineraryItem>\n    abstract val description: String\n    abstract val costs: List<Money> ![1](assets/1.png)\n    ... and other methods\n}\n\nval ItineraryItem.mapOverlay: MapOverlay ![2](assets/2.png)\n    get() = TODO(\"Not yet implemented\")\n\ndata class Accommodation(\n    override val id: Id<Accommodation>,\n    val location: Location,\n    val checkInFrom: ZonedDateTime,\n    val checkOutBefore: ZonedDateTime,\n    val pricePerNight: Money\n) : ItineraryItem() {\n    val nights = Period.between(\n        checkInFrom.toLocalDate(),\n        checkOutBefore.toLocalDate()\n    ).days\n    val totalPrice: Money = pricePerNight * nights\n\n    override val description\n        get() = \"$nights nights at ${location.userReadableName}\"\n    override val costs\n        get() = listOf(totalPrice)\n    override val mapOverlay ![3](assets/3.png)\n        get() = PointOverlay(\n            id = id,\n            position = location.position,\n            text = location.userReadableName,\n            icon = StandardIcons.HOTEL\n        )\n\n    ... and other methods\n}\n```", "```java\nval ItineraryItem.mapOverlay: MapOverlay get() = when (this) {\n    is Accommodation -> mapOverlay\n    is Attraction -> mapOverlay\n    is Journey -> mapOverlay\n    is RestaurantBooking -> mapOverlay\n}\n```", "```java\ndata class Accommodation(\n...\n) : ItineraryItem() {\n    ...\n    val mapOverlay\n        get() = PointOverlay(\n            id = id,\n            position = location.position,\n            text = location.userReadableName,\n            icon = StandardIcons.HOTEL\n        )\n    ...\n```", "```java\ndata class Accommodation(\n...\n) : ItineraryItem() {\n    ...\n}\n\nval Accommodation.mapOverlay\n    get() = PointOverlay(\n        id = id,\n        position = location.position,\n        text = location.userReadableName,\n        icon = StandardIcons.HOTEL\n    )\n```", "```java\nval ItineraryItem.mapOverlay: MapOverlay get() = when (this) {\n    is Accommodation -> mapOverlay\n    is Attraction -> mapOverlay\n    is Journey -> mapOverlay\n    is RestaurantBooking -> mapOverlay\n}\n```", "```java\npackage travelator.geo\n\nimport travelator.itinerary.*\n\nval ItineraryItem.mapOverlay: MapOverlay get() = when (this) {\n    is Accommodation -> mapOverlay\n    is Attraction -> mapOverlay\n    is Journey -> mapOverlay\n    is RestaurantBooking -> mapOverlay\n}\n\nprivate val Accommodation.mapOverlay\n    get() = PointOverlay(\n        id = id,\n        position = location.position,\n        text = location.userReadableName,\n        icon = StandardIcons.HOTEL\n    )\n\n ... Attraction.mapOverlay etc\n```", "```java\nval ItineraryItem.description: String\n    get() = when (this) {\n        is Accommodation ->\n            \"$nights nights at ${location.userReadableName}\"\n        is Attraction ->\n            location.userReadableName\n        is Journey ->\n            \"${departsFrom.userReadableName} \" +\n                \"to ${arrivesAt.userReadableName} \" +\n                \"by ${travelMethod.userReadableName}\"\n        is RestaurantBooking -> location.userReadableName\n    }\n```", "```java\nsealed class ItineraryItem {\n    abstract val id: Id<ItineraryItem>\n}\n\ndata class Accommodation(\n    override val id: Id<Accommodation>,\n    val location: Location,\n    val checkInFrom: ZonedDateTime,\n    val checkOutBefore: ZonedDateTime,\n    val pricePerNight: Money\n) : ItineraryItem() {\n    val nights = Period.between(\n        checkInFrom.toLocalDate(),\n        checkOutBefore.toLocalDate()\n    ).days\n    val totalPrice: Money = pricePerNight * nights\n}\n\ndata class Attraction(\n    override val id: Id<Attraction>,\n    val location: Location,\n    val notes: String\n) : ItineraryItem()\n\ndata class Journey(\n    override val id: Id<Journey>,\n    val travelMethod: TravelMethod,\n    val departsFrom: Location,\n    val departureTime: ZonedDateTime,\n    val arrivesAt: Location,\n    val arrivalTime: ZonedDateTime,\n    val price: Money,\n    val path: List<Position>,\n    ... and other fields\n) : ItineraryItem()\n\ndata class RestaurantBooking(\n    override val id: Id<RestaurantBooking>,\n    val location: Location,\n    val time: ZonedDateTime\n) : ItineraryItem()\n```"]