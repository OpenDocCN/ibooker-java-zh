["```java\n@Outgoing(\"my-channel\")\nMulti<Message<Person>> produceAStreamOfMessagesOfPersons() {\n    return Multi.createFrom().items(\n            Message.of(new Person(\"Luke\"))\n                .addMetadata(OutgoingKafkaRecordMetadata.builder()\n                        .withKey(\"light\").build()),\n            Message.of(new Person(\"Leia\"))\n                .addMetadata(OutgoingKafkaRecordMetadata.builder()\n                        .withKey(\"light\").build()),\n            Message.of(new Person(\"Obiwan\"))\n                .addMetadata(OutgoingKafkaRecordMetadata.builder()\n                        .withKey(\"light\").build()),\n            Message.of(new Person(\"Palpatine\"))\n                .addMetadata(OutgoingKafkaRecordMetadata.builder()\n                        .withKey(\"dark\").build())\n    );\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n</dependency>\n```", "```java\nmp.messaging.outgoing.my-channel.connector=smallrye-kafka\nmp.messaging.outgoing.my-channel.topic=starwars\nmp.messaging.outgoing.my-channel.value.serializer=\\\n org.apache.kafka.common.serialization.StringSerializer\n```", "```java\n@Incoming(\"my-channel\")\nCompletionStage<Void> consume(Message<Person> person) {\n    String msgKey = (String) person\n            .getMetadata(IncomingKafkaRecordMetadata.class).get()\n            .getKey();\n    // ...\n    return person.ack();\n}\n```", "```java\nmp.messaging.incoming.my-channel.connector=smallrye-kafka\nmp.messaging.incoming.my-channel.topic=starwars\nmp.messaging.incoming.my-channel.value.deserializer=\\\n org.apache.kafka.common.serialization.StringDeserializer\n```", "```java\nmp.messaging.incoming.my-channel.connector=smallrye-kafka\nmp.messaging.incoming.my-channel.enable.auto.commit=false\nmp.messaging.incoming.my-channel.commit-strategy=ignore\n```", "```java\nmp.messaging.incoming.my-channel.failure-strategy=dead-letter-queue\nmp.messaging.incoming.my-channel.dead-letter-queue.topic=my-dlq\n```", "```java\n@Incoming(\"my-dlq\")\npublic CompletionStage<Void> dlq(Message<String> rejected) {\n  IncomingKafkaRecordMetadata<String, String> metadata =\n      rejected.getMetadata(IncomingKafkaRecordMetadata.class);\n  String reason = new String(metadata.getHeaders()\n    .lastHeader(\"dead-letter-reason\").value());\n}\n```", "```java\nminikube start --memory=4096\n```", "```java\nkubectl create ns strimzi             ![1](assets/1.png)\nkubectl create ns kafka               ![2](assets/2.png)\n\nhelm repo add strimzi https://strimzi.io/charts            ![3](assets/3.png)\nhelm install strimzi strimzi/strimzi-kafka-operator -n strimzi \\\n    --set watchNamespaces={kafka} --wait --timeout 300s      ![4](assets/4.png)\n```", "```java\nkubectl get pods -n strimzi\nNAME                                        READY   STATUS    RESTARTS   AGE\nstrimzi-cluster-operator-58fcdbfc8f-mjdxg   1/1     Running   0          46s\n```", "```java\napiVersion: kafka.strimzi.io/v1beta2\nkind: Kafka\nmetadata:\n  name: my-cluster                      ![1](assets/1.png)\nspec:\n  kafka:\n    replicas: 1                         ![2](assets/2.png)\n    listeners:\n      - name: plain\n        port: 9092\n        type: internal\n        tls: false\n      - name: tls\n        port: 9093\n        type: internal\n        tls: true config:\n      offsets.topic.replication.factor: 1\n      transaction.state.log.replication.factor: 1\n      transaction.state.log.min.isr: 1\n    storage:\n      type: ephemeral                  ![3](assets/3.png)\n  zookeeper:\n    replicas: 1\n    storage:\n      type: ephemeral\n  entityOperator:\n    topicOperator: {}\n    userOperator: {}\n```", "```java\nkubectl apply -f deploy/kafka/kafka-cluster.yaml -n kafka\n```", "```java\nkubectl get pods -n kafka\nNAME                                          READY   STATUS    RESTARTS   AGE\nmy-cluster-entity-operator-765f64f4fd-2t8mk   3/3     Running   0          90s\nmy-cluster-kafka-0                            1/1     Running   0          113s\nmy-cluster-zookeeper-0                        1/1     Running   0          2m12s\n```", "```java\nkubectl apply -f deploy/kafka/ticks.yaml\nkubectl apply -f deploy/kafka/processed.yaml\n```", "```java\ndata:1 consumed in pod (processor-d44564db5-48n97)\ndata:2 consumed in pod (processor-d44564db5-48n97)\ndata:3 consumed in pod (processor-d44564db5-48n97)\ndata:4 consumed in pod (processor-d44564db5-48n97)\ndata:5 consumed in pod (processor-d44564db5-48n97)\n```", "```java\nkubectl scale deployment/processor -n event-bus --replicas=3\n```", "```java\ndata:11 consumed in pod (processor-d44564db5-2cklg)\ndata:12 consumed in pod (processor-d44564db5-48n97)\ndata:13 consumed in pod (processor-d44564db5-s6rx9)\ndata:14 consumed in pod (processor-d44564db5-2cklg)\ndata:15 consumed in pod (processor-d44564db5-s6rx9)\ndata:16 consumed in pod (processor-d44564db5-48n97)\ndata:17 consumed in pod (processor-d44564db5-2cklg)\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-reactive-messaging-amqp</artifactId>\n</dependency>\n```", "```java\namqp-host=amqp\namqp-port=5672\namqp-username=username\namqp-password=password\n\nmp.messaging.outgoing.data.connector=smallrye-amqp\n```", "```java\n@Outgoing(\"data\")\nMulti<Message<Person>> produceAStreamOfMessagesOfPersons() {\n  return Multi.createFrom().items(\n      Message.of(new Person(\"Luke\"))\n          .addMetadata(OutgoingAmqpMetadata.builder().withDurable(false).build()),\n      Message.of(new Person(\"Leia\"))\n          .addMetadata(OutgoingAmqpMetadata.builder().withDurable(false).build()),\n      Message.of(new Person(\"Obiwan\"))\n          .addMetadata(OutgoingAmqpMetadata.builder().withDurable(false).build()),\n      Message.of(new Person(\"Palpatine\"))\n          .addMetadata(OutgoingAmqpMetadata.builder().withDurable(false).build())\n  );\n}\n```", "```java\n@Incoming(\"data\")\nCompletionStage<Void> consume(Message<Person> person) {\n    Optional<IncomingAmqpMetadata> metadata = person\n            .getMetadata(IncomingAmqpMetadata.class);\n    metadata.ifPresent(meta -> {\n        String address = meta.getAddress();\n        String subject = meta.getSubject();\n        });\n    // ...\n    return person.ack();\n}\n```", "```java\nkubectl run amqp --image=quay.io/artemiscloud/activemq-artemis-broker \\\n    --port=5672 --env=\"AMQ_USER=admin\" --env=\"AMQ_PASSWORD=admin\" \\\n    -n event-bus\n```", "```java\nkubectl expose pod amqp --port=5672 -n event-bus\n```", "```java\ndata:2 consumed in pod (processor-7558d76994-mq624)\ndata:3 consumed in pod (processor-7558d76994-mq624)\ndata:4 consumed in pod (processor-7558d76994-mq624)\n```", "```java\nkubectl scale deployment/processor -n event-bus --replicas=3\n```", "```java\ndata:187 consumed in pod (processor-7558d76994-mq624)\ndata:187 consumed in pod (processor-7558d76994-hbp6j)\ndata:187 consumed in pod (processor-7558d76994-q2vcc)\ndata:188 consumed in pod (processor-7558d76994-q2vcc)\ndata:188 consumed in pod (processor-7558d76994-hbp6j)\ndata:188 consumed in pod (processor-7558d76994-mq624)\ndata:189 consumed in pod (processor-7558d76994-mq624)\ndata:189 consumed in pod (processor-7558d76994-hbp6j)\ndata:189 consumed in pod (processor-7558d76994-q2vcc)\n```"]