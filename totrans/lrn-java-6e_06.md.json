["```java\n    try {\n      readFromFile(\"foo\");\n      // do other file things ...\n    } catch (Exception e) {\n      // Handle error\n      System.out.println(\"Exception while reading file: \" + e);\n    }\n```", "```java\npublic class Euclid2 {\n  public static void main(String args[]) {\n    int a = 2701;\n    int b = 222;\n    // Only try to parse arguments if we have exactly 2\n    if (args.length == 2) {\n      try {\n        a = Integer.parseInt(args[0]);\n        b = Integer.parseInt(args[1]);\n      } catch (NumberFormatException nfe) {\n        System.err.println(\"Arguments were not both numbers.\");\n        System.err.println(\"Using defaults.\");\n      }\n    } else {\n      System.err.print(\"Wrong number of arguments\");\n      System.err.println(\" expected 2).\");\n      System.err.println(\"Using defaults.\");\n    }\n    System.out.print(\"The GCD of \" + a + \" and \" + b + \" is \");\n    while (b != 0) {\n      if (a > b) {\n        a = a - b;\n      } else {\n        b = b - a;\n      }\n    }\n    System.out.println(a);\n  }\n}\n```", "```java\n$ javac ch06/examples/Euclid2.java\n$ java ch06.examples.Euclid2\nThe GCD of 18 and 6 is 6\n\n$ java ch06.examples.Euclid2 547832 2798\nThe GCD of 547832 and 2798 is 2\n```", "```java\n$ java ch06.examples.Euclid2 apples oranges\nArguments were not both numbers.\nUsing defaults.\nThe GCD of 2701 and 222 is 37\n```", "```java\n    try {\n      readFromFile(\"foo\");\n      // do any other file things\n    } catch (FileNotFoundException e) {\n      // Handle file not found\n    } catch (IOException e) {\n      // Handle read error\n    } catch (Exception e) {\n      // Handle all other errors\n    }\n```", "```java\n    try {\n      // read from network...\n      // write to file..\n    } catch (ZipException | SSLException e) {\n      logException(e);\n    }\n```", "```java\n    try {\n      // complex, deeply nested task\n    } catch (Exception e) {\n      // dump information about where the exception occurred\n      e.printStackTrace(System.err);\n    }\n```", "```java\njava.io.FileNotFoundException: myfile.xml\n      at java.io.FileInputStream.<init>(FileInputStream.java)\n      at java.io.FileInputStream.<init>(FileInputStream.java)\n      at MyApplication.loadFile(MyApplication.java:137)\n      at MyApplication.main(MyApplication.java:5)\n```", "```java\n  void readFile(String s) throws IOException, InterruptedException {\n    // do some I/O work, maybe using threads for background processing\n  }\n```", "```java\n    throw new IOException();\n```", "```java\n    throw new IOException(\"Sunspots!\");\n```", "```java\n  public void checkRead(String s) throws SecurityException {\n    // ...\n    if (new File(s).isAbsolute() || (s.indexOf(\"..\") != -1))\n      throw new SecurityException(\n          \"Access to file : \"+ s +\" denied.\");\n    // ...\n  }\n```", "```java\nclass ParseException extends Exception {\n  private int lineNumber;\n\n  ParseException() {\n    super();\n    this.lineNumber = -1;\n  }\n\n  ParseException(String desc, int lineNumber) {\n    super(desc);\n    this.lineNumber = lineNumber;\n  }\n\n  public int getLineNumber() {\n    return lineNumber;\n  }\n}\n```", "```java\n    // Get some input from a file and parse it\n    try {\n      parseStream(input);\n    } catch (ParseException pe) {\n      // Bad input... We can even tell them which line was bad!\n      System.err.println(\"Bad input on line \" + pe.getLineNumber());\n    } catch (IOException ioe) {\n      // Other, low-level communications problem\n    }\n```", "```java\n    throw new Exception(\"Here's the story...\", causalException);\n```", "```java\n    try {\n      // ...\n    } catch (IOException cause) {\n      Exception e =\n        new IOException(\"What we have here is a failure to communicate...\");\n      e.initCause(cause);\n      throw e;\n    }\n```", "```java\n    try {\n      // ...\n    } catch (IOException cause) {\n      log(cause); // Log it\n      throw cause;  // re-throw it\n    }\n```", "```java\n  void myMethod() {\n    int foo;\n\n    try {\n      foo = getResults();\n    }\n    catch (Exception e) {\n      // handle our exception ...\n    }\n\n    int bar = foo; // Compile-time error: foo may not have been initialized\n  }\n```", "```java\n    try {\n      foo = getResults();\n      int bar = foo;  // Okay because we get here only\n                      // if previous assignment succeeds\n    }\n    catch (Exception e) {\n      // handle our exception ...\n    }\n```", "```java\n    try {\n      foo = getResults();\n    }\n    catch (Exception e) {\n      // log our exception or show the user a warning message\n      return;\n    }\n    int bar = foo;  // Okay because we get here only\n                    // if previous try block succeeds\n```", "```java\n    try {\n      // Do something here\n    }\n    catch (FileNotFoundException e) {\n      // handle a missing file ...\n    }\n    catch (IOException e) {\n      // handle other file problems ...\n    }\n    catch (Exception e) {\n      // eek, handle even bigger problems ...\n    }\n    finally {\n      // Any cleanup here is always executed\n    }\n```", "```java\n    try {\n      // Do something here that might cause an exception\n      return;\n    } finally {\n      System.out.println(\"Whoo-hoo!\");\n    }\n```", "```java\n    try {\n      Socket sock = new Socket(...);\n      // work with the socket\n    } catch(IOException e) {\n      // handle our network problem ...\n    } finally {\n      if (sock != null) { sock.close(); }\n    }\n```", "```java\n    try (\n      Socket sock = new Socket(\"192.168.100.1\", 80);\n      FileWriter file = new FileWriter(\"foo\");\n    )\n    {\n      // work with sock and file\n    } catch (IOException e) {\n      // ...\n    }\n    // Both sock and file have been cleaned up by this point\n```", "```java\n    try (\n      // potential exception #3\n      Socket sock = new Socket(\"192.168.100.1\", 80);\n      // potential exception #2\n      FileWriter file = new FileWriter(\"foo\");\n    )\n    {\n      // work with sock and file // potential exception #1\n    }\n```", "```java\n    if (!condition)\n      throw new AssertionError(\"fatal error: 42\");\n```", "```java\n    assert false;\n    assert (array.length > min);\n    assert a > 0 : a  // shows value of a to the user\n    assert foo != null :  \"foo is null!\" // shows message \"foo is null!\" to user\n```", "```java\n% java -ea MyApplication\n```", "```java\n% java -ea:com.oreilly.examples.Myclass MyApplication\n```", "```java\n% java -ea:com.oreilly.examples... MyApplication\n```", "```java\n% java -ea:com.oreilly.examples... \\\n    -da:com.oreilly.examples.text \\\n    -ea:com.oreilly.examples.text.MonkeyTypewriters \\\n    MyApplication\n```", "```java\n    if (direction == LEFT)\n      goLeft();\n    else if (direction == RIGHT)\n      goRight()\n    else\n      assert false : \"bad direction\";\n```", "```java\n    switch (direction) {\n      case LEFT:\n        goLeft();\n        break;\n      case RIGHT:\n        goRight();\n        break;\n      default:\n        assert false;\n    }\n```"]