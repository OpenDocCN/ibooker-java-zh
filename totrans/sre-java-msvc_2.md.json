["```java\nMeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\n```", "```java\nMeterRegistry registry = InfluxMeterRegistry.builder(InfluxConfig.DEFAULT)\n  .httpClient(myCustomizedHttpClient)\n  .build();\n```", "```java\nMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(\n  PrometheusConfig.DEFAULT);\nMeterRegistry atlasMeterRegistry = new AtlasMeterRegistry(AtlasConfig.DEFAULT);\n\nMeterRegistry registry = new CompositeMeterRegistry();\nregistry.add(prometheusMeterRegistry);\nregistry.add(atlasMeterRegistry);\n\n// Create meters like counters against the composite,\n// not the individual registries that make up the composite\nregistry.counter(\"my.counter\");\n```", "```java\nclass MyComponent {\n  Timer timer = Timer.builder(\"time.something\")\n    .description(\"time some operation\")\n    .register(Metrics.globalRegistry);\n\n  Logger logger = LoggerFactory.getLogger(MyComponent.class);\n\n  public void something() {\n    timer.record(() -> {\n      // Do something\n      logger.info(\"I did something\");\n    });\n  }\n}\n```", "```java\nCounter counter = Counter.builder(\"requests\") // Name\n  .tag(\"status\", \"200\")\n  .tags(\"method\", \"GET\", \"outcome\", \"SUCCESS\") // Multiple tags\n  .description(\"http requests\")\n  .baseUnit(\"requests\")\n  .register(registry);\n```", "```java\nCounter counter = registry.counter(\"requests\",\n  \"status\", \"200\", \"method\", \"GET\", \"outcome\", \"SUCCESS\");\n```", "```java\nregistry.counter(\"database.queries\", \"db\", \"users\")\nregistry.counter(\"http.requests\", \"uri\", \"/api/users\")\n```", "```java\nregistry.counter(\"calls\",\n    \"type\", \"database\",\n    \"db\", \"users\");\n\nregistry.counter(\"calls\",\n    \"type\", \"http\",\n    \"uri\", \"/api/users\");\n```", "```java\njvm.gc.live.data.size\njvm.gc.memory.promoted\njvm.gc.memory.allocated\n```", "```java\nMeterRegistry registry = ...;\nregistry.config().meterFilter(MeterFilter.denyNameStartsWith(\"jvm.gc\"));\n```", "```java\nregistry.timer(\"requests.millis\")\n  .record(responseTime, TimeUnit.MILLISECONDS);\n```", "```java\nregistry.config()\n  .namingConvention(new NamingConvention() { ![1](../images/00112.png)\n      @Override\n      public String name(String name, Meter.Type type, String baseUnit) {\n          String camelCased = NamingConvention.snakeCase.name(name, type, baseUnit);\n          return baseUnit == null ? camelCased :\n                  camelCased + \"_\" + baseUnit;\n      }\n  });\n```", "```java\nmanagement.metrics.tags:\n  application: ${spring.application.name}\n  region: us-east-1\n  stack: prod\n```", "```java\n@Configuration\npublic class MetricsConfiguration {\n  @Bean\n  MeterFilter commonTags(@Value(\"${spring.application.name}\") String appName) {\n    return MeterFilter.commonTags(\n      \"application\", appName,\n      \"region\", \"us-east-1\", ![1](../images/00112.png)\n      \"stack\", \"prod\"\n    )\n  }\n}\n```", "```java\nList<String> list = registry.gauge(\n  \"listGauge\", Collections.emptyList(),\n  new ArrayList<>(), List::size);\n\nList<String> list2 = registry.gaugeCollectionSize(\n  \"listSize2\", Tags.empty(),\n  new ArrayList<>());\n\nMap<String, Integer> map = registry.gaugeMapSize(\n  \"mapGauge\", Tags.empty(), new HashMap<>());\n```", "```java\nGauge gauge = Gauge\n    .builder(\"gauge\", myObj, myObj::gaugeValue)\n    .description(\"a description of what this gauge does\") // Optional\n    .baseUnit(\"speed\")\n    .tags(\"region\", \"test\") // Optional\n    .strongReference(IS_STRONG) // Optional\n    .register(registry);\n```", "```java\n// SELECT count(*), city from customers group by city WHERE country = 'US'\nMultiGauge statuses = MultiGauge.builder(\"customers\")\n        .tag(\"country\", \"US\")\n        .description(\"The number of customers by city\")\n        .baseUnit(\"customers\")\n        .register(registry);\n\n...\n\n// Run this periodically whenever you rerun your query\nstatuses.register(\n  resultSet.stream().map(result ->\n    Row.of(\n      Tags.of(\"city\", result.getAsString(\"city\")),\n      result.getAsInt(\"count\")\n    )\n  )\n);\n```", "```java\n// No tags Counter counter = registry.counter(\"bean.counter\");\n\n// Adding tags in key-value pairs with varargs Counter counter = registry.counter(\"bean.counter\", \"region\", \"us-east-1\");\n\n// Explicit tag list creation ![1](../images/00112.png)\nCounter counter = registry.counter(\"bean.counter\", Tags.of(\"region\", \"us-east-1\"));\n\n// Adding tags to some other precreated set of tags. Iterable<Tag> predeterminedTags = Tags.of(\"region\", \"us-east-1\");\nCounter counter = registry.counter(\"bean.counter\",\n  Tags.concat(\n    predeterminedTags,\n    \"stack\", \"prod\"\n  )\n);\n```", "```java\nCounter counter = Counter\n    .builder(\"bean.counter\")\n    .description(\"a description of what this counter does\") // Optional\n    .baseUnit(\"beans\")\n    .tags(\"region\", \"us-east-1\") // Optional\n    .register(registry);\n```", "```java\nname,queue.insert,:eq\n```", "```java\nrate(queue_insert_sum[2m])\n```", "```java\n// No tags\nTimer  timer = registry.timer(\"execution.time\");\n\n// Adding tags in key-value pairs with varargs\nTimer timer = registry.timer(\"execution.time\", \"region\", \"us-east-1\");\n\n// Explicit tag list creation\nTimer timer = registry.timer(\"execution.time\", Tags.of(\"region\", \"us-east-1\"));\n```", "```java\nTimer timer = Timer\n    .builder(\"execution.time\")\n    .description(\"a description of what this timer does\")\n    .distributionStatisticExpiry(Duration.ofMinutes(2))\n    .distributionStatisticBufferLength(3)\n    .serviceLevelObjectives(Duration.ofMillis(100), Duration.ofSeconds(1))\n    .publishPercentiles(0.95, 0.99)\n    .publishPercentileHistogram()\n    .tags(\"region\", \"us-east-1\")\n    .register(registry);\n```", "```java\ntimer.record(() -> dontCareAboutReturnValue());\ntimer.recordCallable(() -> returnValue());\n\nRunnable r = timer.wrap(() -> dontCareAboutReturnValue());\nCallable c = timer.wrap(() -> returnValue());\n```", "```java\nclass JooqExecuteListener extends DefaultExecuteListener {\n  private final Map<ExecuteContext, Timer.Sample> sampleByExecuteContext =\n    new ConcurrentHashMap<>();\n\n  @Override\n  public void start(ExecuteContext ctx) {\n    Timer.Sample sample = Timer.start(registry);\n    sampleByExecuteContext.put(ctx, sample);\n  }\n\n  @Override\n  public void end(ExecuteContext ctx) {\n    Timer.Sample sample = sampleByExecuteContext.remove(sample);\n\n    sample.stop(registry.timer(\"jooq.query\", ...)); ![1](../images/00112.png)\n  }\n}\n```", "```java\ntry (Timer.ResourceSample sample = Timer.resource(registry, \"requests\")\n        .tag(\"method\", request.getMethod()) ![1](../images/00112.png)\n        .description(\"This is an operation\")\n        .publishPercentileHistogram()) {\n    try { ![2](../images/00059.png)\n        if (outcome.equals(\"error\")) {\n            throw new IllegalArgumentException(\"boom\");\n        }\n        sample.tag(\"outcome\", \"success\"); ![3](../images/00067.png)\n    } catch (Throwable t) {\n        sample.tag(\"outcome\", \"error\");\n    }\n}\n```", "```java\n// Start a new trace ScopedSpan span = tracer.startScopedSpan(\"encode\"); ![1](../images/00112.png)\ntry (Timer.ResourceSample sample = Timer.resource(registry, \"encode\")) {\n    try {\n      encoder.encode();\n      sample.stop(registry.timer(\"encode\", \"result\", \"success\"));\n    } catch (RuntimeException | Error e) {\n      span.error(e);\n      sample.stop(registry.timer(\"encode\", \"result\", \"failure\"));\n      throw e;\n    } finally {\n      span.finish();\n    }\n}\n```", "```java\nTimer requestsTimer = Timer.builder(\"requests\")\n  .publishPercentiles(0.99, 0.999)\n  .register(registry);\n```", "```java\nregistry.config().meterFilter(new MeterFilter() {\n  @Override\n  public DistributionStatisticConfig configure(Meter.Id id,\n      DistributionStatisticConfig config) {\n    if (id.getName().equals(\"requests\")) {\n      DistributionStatisticConfig.builder()\n        .publishPercentiles(0.99, 0.999)\n        .build()\n        .merge(config);\n    }\n    return config;\n  }\n});\n\n...\n\n// The filter will apply to this timer as it is created\nTimer requestsTimer = registry.timer(\"requests\");\n```", "```java\nmanagement.metrics.distribution.percentiles.requests=0.99,0.999\n```", "```java\nTimer requestsTimer = Timer.builder(\"requests\")\n  .publishPercentileHistogram()\n  .register(registry);\n```", "```java\nregistry.config().meterFilter(new MeterFilter() {\n  @Override\n  public DistributionStatisticConfig configure(Meter.Id id,\n      DistributionStatisticConfig config) {\n    if (id.getName().equals(\"requests\")) {\n      DistributionStatisticConfig.builder()\n        .publishPercentileHistogram()\n        .build()\n        .merge(config); ![1](../images/00112.png)\n    }\n    return config;\n  }\n});\n\n...\n\n// The filter will apply to this timer as it is created Timer requestsTimer = registry.timer(\"requests\");\n```", "```java\nmanagement.metrics.distribution.percentiles-histogram.requests=true\n```", "```java\nname,http.server.requests,:eq,\n(,99,99.9,),:percentiles\n```", "```java\nhistogram_quantile(\n  0.99,\n  rate(http_server_requests_seconds_bucket[2m])\n)\n```", "```java\nQ: What are your service level objectives?\nA: We need an average response of 10 milliseconds ![1](../images/00112.png)\nQ: What is the worst-case requirement?\nA: We don't have one.\nQ: So itâ€™s OK for some things to take more than 5 hours?\nA: No!\nQ: So we think that the worst-case requirement is 5 hours.\nA: No! Let's make it 100 milliseconds.\nQ: Are you sure? Even if the worst case only happens two times a day?\nA: OK, make it 2 seconds.\nQ: How often is it OK to have a 1-second response?\nA: (Annoyed) I thought you said only a couple of times a day!\nQ: That was for the worst case. If half the results are better than\n   10 milliseconds, is it OK for every other request other than max\n   to be just shy of 2 seconds?\nA: (More specific requirements...)\n```", "```java\nname,http.server.requests,:eq,\n:dup,\nslo,0.(0\\d+|1),:re,\n:div,\n0.99,:lt,\nuri,_API_ENDPOINT,:eq,:cq\n```", "```java\nhttp_server_requests_seconds_bucket{le=\"0.1\", uri=\"/API_ENDPOINT\"}\n/ ![1](../images/00112.png)\nhttp_server_requests_seconds_count{uri=\"/API_ENDPOINT\"} < 0.99\n```", "```java\nTimer requestsTimer = Timer.builder(\"requests\")\n  .slo(Duration.ofMillis(100), Duration.ofSeconds(1))\n  .register(registry);\n```", "```java\nregistry.config().meterFilter(new MeterFilter() {\n  @Override\n  public DistributionStatisticConfig configure(Meter.Id id,\n      DistributionStatisticConfig config) {\n    if (id.getName().equals(\"requests\")) {\n      DistributionStatisticConfig.builder()\n        .slo(Duration.ofMillis(100), Duration.ofSeconds(1))\n        .build()\n        .merge(config);\n    }\n    return config;\n  }\n});\n\n...\n\nTimer requestsTimer = registry.timer(\"requests\"); ![1](../images/00112.png)\n```", "```java\nDistributionSummary summary = registry.summary(\"response.size\");\n```", "```java\nDistributionSummary summary = DistributionSummary\n    .builder(\"response.size\")\n    .description(\"a description of what this summary does\")\n    .baseUnit(\"bytes\")\n    .tags(\"region\", \"test\")\n    .scale(100)\n    .register(registry);\n```", "```java\n// No tags\nLongTaskTimer  timer = registry.more()\n  .longTaskTimer(\"execution.time\");\n\n// Adding tags in key-value pairs with varargs\nLongTaskTimer timer = registry.more()\n  .longTaskTimer(\"execution.time\", \"region\", \"us-east-1\");\n\n// Explicit tag list creation\nLongTaskTimer timer = registry.more()\n  .longTaskTimer(\"execution.time\", Tags.of(\"region\", \"us-east-1\"));\n```", "```java\nLongTaskTimer timer = LongTaskTimer\n    .builder(\"execution.time\")\n    .description(\"a description of what this timer does\") // Optional\n    .tags(\"region\", \"us-east-1\") // Optional\n    .register(registry);\n```", "```java\nlongTaskTimer.record(() -> dontCareAboutReturnValue());\nlongTaskTimer.recordCallable(() -> returnValue());\n\nLongTaskTimer.Sample sample = longTaskTimer.start();\n// Do something...\nsample.stop(longTaskTimer);\n```", "```java\n@Scheduled(fixedDelay = 360000)\nvoid scrapeResources() {\n  LongTaskTimer.builder(\"aws.scrape\")\n    .description(\"Time it takes to find instances, volumes, etc.\")\n    .register(registry)\n    .record(() => {\n      // Find instances, volumes, autoscaling groups, etc...\n    });\n}\n```", "```java\n@Timed(name = \"aws.scrape\", longTask = true)\n@Scheduled(fixedDelay = 360000)\nvoid scrapeResources() {\n  // Find instances, volumes, autoscaling groups, etc...\n}\n```", "```java\nRequest post = httpClient.POST(\"https://customerservice/api/customer/\" + customerId);\npost.content(new StringContentProvider(\"{\\\\\"detail\\\\\": \\\\\"all\\\\\"}\"));\nContentResponse response = post.send();\n```", "```java\nHttpClient httpClient = new HttpClient();\nhttpClient.getRequestListeners().add(\n  JettyClientMetrics\n    .builder(\n      registry,\n      result -> {\n        String path = result.getRequest().getURI().getPath();\n        if(path.startsWith(\"/api/customer/\")) {\n          return \"/api/customer/{id}\";\n        }\n        ...\n      }\n    )\n    .build()\n);\n```", "```java\npublic class LoadTest {\n  public static void main(String[] args) {\n    MeterRegistry meterRegistry = ...; ![1](../images/00112.png)\n    Counter counter = meterRegistry.counter(\"load.test.requests\");\n\n    WebClient client = WebClient.builder()\n      .baseUrl(\"http://\" + args[0])\n      .build();\n\n    Flux\n      .generate(AtomicLong::new, (state, sink) -> { ![2](../images/00059.png)\n        long i = state.getAndIncrement();\n        sink.next(i);\n        return state;\n      })\n      .limitRate(1) ![3](../images/00067.png)\n      .flatMap(n -> client.get().uri(\"/api/endpoint\").exchange())\n      .doOnNext(resp -> {\n        if (resp.statusCode().is2xxSuccessful())\n          counter.increment();\n      })\n      .blockLast();\n  }\n}\n```", "```java\nregistry.config()\n    .meterFilter(MeterFilter.ignoreTags(\"too.much.information\"))\n    .meterFilter(MeterFilter.denyNameStartsWith(\"jvm\"));\n```", "```java\nMeterFilter filter = new MeterFilter() {\n  @Override\n  public MeterFilterReply accept(Meter.Id id) {\n    if(id.getName().contains(\"test\")) {\n       return MeterFilterReply.DENY;\n    }\n    return MeterFilterReply.NEUTRAL;\n  }\n}\n```", "```java\nregistry.config()\n    .meterFilter(MeterFilter.acceptNameStartsWith(\"http\"))\n    .meterFilter(MeterFilter.deny());\n```", "```java\nMeterFilter filter = new MeterFilter() {\n    @Override\n    public Meter.Id map(Meter.Id id) {\n       if(id.getName().startsWith(\"test\")) {\n          return id.withName(\"extra.\" + id.getName()).withTag(\"extra.tag\", \"value\");\n       }\n       return id;\n    }\n}\n```", "```java\nnew MeterFilter() {\n    @Override\n    public DistributionStatisticConfig configure(Meter.Id id,\n          DistributionStatisticConfig config) {\n        if (id.getName().startsWith(prefix)) {\n            return DistributionStatisticConfig.builder()\n                    .publishPercentiles(0.9, 0.95)\n                    .build()\n                    .merge(config);\n        }\n        return config;\n    }\n};\n```", "```java\n@Configuration\npublic class PlatformMetricsAutoConfiguration {\n  private final Logger logger = LoggerFactory.getLogger(\n    PlatformMetricsAutoConfiguration.class);\n\n  private final PrometheusMeterRegistry prometheusMeterRegistry =\n    new PrometheusMeterRegistry(PrometheusConfig.DEFAULT); ![1](../images/00112.png)\n\n  @Value(\"${spring.application.name:unknown}\")\n  private String appName;\n\n  @Value(\"${HOSTNAME:unknown}\")\n  private String host;\n\n  public PlatformMetricsAutoConfiguration() { ![2](../images/00059.png)\n    new JvmGcMetrics().bindTo(prometheusMeterRegistry);\n    new JvmHeapPressureMetrics().bindTo(prometheusMeterRegistry);\n    new JvmMemoryMetrics().bindTo(prometheusMeterRegistry);\n    new ProcessorMetrics().bindTo(prometheusMeterRegistry);\n    new FileDescriptorMetrics().bindTo(prometheusMeterRegistry);\n  }\n\n  @Bean\n  @ConditionalOnBean(KubernetesClient.class)\n  MeterFilter kubernetesMeterFilter(KubernetesClient k8sClient) { ![3](../images/00067.png)\n    MeterFilter k8sMeterFilter = new KubernetesCommonTags();\n    prometheusMeterRegistry.config().meterFilter(k8sMeterFilter);\n    return k8sMeterFilter;\n  }\n\n  @Bean\n  @ConditionalOnMissingBean(KubernetesClient.class)\n  MeterFilter appAndHostTagsMeterFilter() {\n    MeterFilter appAndHostMeterFilter = MeterFilter.commonTags(\n      Tags.of(\"app\", appName, \"host\", host));\n    prometheusMeterRegistry.config().meterFilter(appAndHostMeterFilter);\n    return appAndHostMeterFilter;\n  }\n\n  @RestController\n  class PlatformMetricsEndpoint {\n    @GetMapping(path = \"/platform/metrics\", produces = TextFormat.CONTENT_TYPE_004)\n    String platformMetrics() { ![4](../images/00016.png)\n      return prometheusMeterRegistry.scrape();\n    }\n  }\n}\n```", "```java\npublic class KubernetesCommonTags implements MeterFilter {\n  private final Function<Meter.Id, Meter.Id> idMapper;\n\n  public KubernetesCommonTags(KubernetesClient k8sClient) {\n    try {\n      Map<String, String> annotations = k8sClient.pods()\n        .withName(host)\n        .get()\n        .getMetadata()\n        .getAnnotations();\n\n      for (Map.Entry<String, String> annotation : annotations.entrySet()) {\n        logger.info(\"Kubernetes pod annotation <\" + annotation.getKey() +\n          \"=\" + annotation.getValue() + \">\");\n      }\n\n      idMapper = id -> id.withTags(Tags.of(\n        \"revision\",\n          annotations.getOrDefault(\"deployment.kubernetes.io/revision\", \"unknown\"),\n        \"app\",\n          annotations.getOrDefault(\"moniker.spinnaker.io/application\", appName),\n        \"cluster\",\n          stream(annotations\n            .getOrDefault(\"moniker.spinnaker.io/cluster\", \"unknown\")\n            .split(\" \")\n          ).reduce((first, second) -> second).orElse(\"unknown\"),\n        \"location\",\n          annotations.getOrDefault(\"artifact.spinnaker.io/location\", \"unknown\"),\n        \"host\", host\n      ));\n    } catch (KubernetesClientException e) {\n      logger.warn(\"Unable to apply kubernetes tags\", e);\n      idMapper = id -> id.withTags(Tags.of(\n        \"app\", appName,\n        \"host\", host,\n        \"cluster\", \"unknown\")\n      );\n    }\n  }\n\n  @Override\n  public Meter.Id map(Meter.Id id) {\n    return idMapper.apply(id);\n  }\n}\n```", "```java\n@Bean\nMeterRegistryCustomizer<CloudwatchMeterRegistry> cloudwatchCustomizations() {\n    return registry -> registry.config()\n            .meterFilter(MeterFilter.acceptNameStartsWith(\"prometheus\"))\n            .meterFilter(MeterFilter.deny());\n}\n```", "```java\npublic class VehicleMeterBinder implements MeterBinder {\n  private final Vehicle vehicle;\n\n  public VehicleMeterBinder(Vehicle vehicle) {\n    this.vehicle = vehicle;\n  }\n\n  @Override\n  public void bindTo(MeterRegistry registry) {\n    Gauge.builder(\"vehicle.speed\", vehicle, Vehicle::getSpeed)\n      .baseUnit(\"km/h\")\n      .description(\"Current vehicle speed\")\n      .register(registry);\n\n    FunctionCounter.builder(\"vehicle.odometer\", vehicle, Vehicle::readOdometer())\n      .baseUnit(\"kilometers\")\n      .description(\"The amount of distance this vehicle has traveled\")\n      .register(registry);\n  }\n}\n```", "```java\nmanagement.metrics.enable.vehicle: false\n```"]