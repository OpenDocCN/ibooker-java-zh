- en: Chapter 2\. Scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn about creating the project structure of Quarkus.
    Quarkus comes with some different ways to scaffold a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll learn how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaffold a project in different ways, from Maven to VSCode IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve developer experience with the live reloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serve static resources with Quarkus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.1 Scaffolding a Quarkus Project with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to start quickly in Quarkus by generating a simple project.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Quarkus Maven plug-in.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Quarkus Maven plug-in creates a simple project that is ready to be
    deployed and contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A *pom.xml* file with minimal Quarkus dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test for the JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A native test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerfiles to generate a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assume you’ve already installed [Apache Maven](http://maven.apache.org).
    Open a terminal and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The project has this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_scaffolding_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfiles
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_scaffolding_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: JAX-RS resource
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_scaffolding_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Static resource
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_scaffolding_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration file
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_scaffolding_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Auto-generated tests for JAX-RS resource
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Scaffolding a Quarkus Project with Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to get started quickly in Quarkus by generating a simple project, and
    you are a Gradle user.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Quarkus Maven plug-in (yes, the Maven plug-in).
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can scaffold a simple Quarkus project by using the Quarkus Maven plug-in;
    you just set the output as a Gradle project. The resulting project is ready to
    be deployed and contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A *build.gradle* file with minimal Quarkus dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test for the JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A native test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerfiles to generate a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We assume you’ve already installed [Apache Maven](http://maven.apache.org).
    Open a terminal and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Unlike in Apache Maven, this command will create the structure in the *current*
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting project has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 2.3 Scaffolding a Quarkus Project with the Quarkus Start Coding Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to start quickly in Quarkus by generating a simple project without
    having to install Maven or Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Quarkus Start Coding website by visiting [*https://code.quarkus.io*](https://code.quarkus.io)
    to generate a simple Quarkus project.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, the home page looks like what’s shown in [Figure 2-1](#quarkusio).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0201](Images/qucb_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. [*https://code.quarkus.io*](https://code.quarkus.io) homepage
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When the page is loaded, push the “Generate your application” button to download
    a ZIP file with the generated project inside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal and uncompress the generated project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The scaffolded project is the same as the one you generated in [Recipe 2.1](#scaffold-with-maven),
    with the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A *pom.xml* file with minimal Quarkus dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A test for the JAX-RS resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A native test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerfiles to generate a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have not yet discussed Quarkus extensions, but notice that you can generate
    a project with any of the Quarkus extensions registered. You’ll see more about
    extensions in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are added either by selecting them in the checkbox that contains
    every extension in the page or by using the search box.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Scaffolding a Quarkus Project with Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to start quickly in Quarkus by generating a simple project in Visual
    Studio (VS) Code.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the Quarkus VS Code extension.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Quarkus extension is developed for Visual Studio Code IDE to integrate some
    of the features of Quarkus into the IDE. The following are some of these features:'
  prefs: []
  type: TYPE_NORMAL
- en: Commands to scaffold a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A command to add extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-completion for configuration file (properties and YAML formats) Snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install the plug-in, open VS Code, and push the “Extensions” button, as seen
    in [Figure 2-2](#Extension-button).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0202](Images/qucb_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. Clicking on the extension button in VS Code allows you to install
    the Quarkus Extension
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Then search for `quarkus` and select the `Quarkus Tools for Visual Studio Code`
    by Red Hat. Your search should populate similar to [Figure 2-3](#Quarkus-Extension).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0203](Images/qucb_0203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. The Quarkus extension is available for free from the VS Code marketplace
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After the installation process, restart the IDE, and you can start using the
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: To generate a new Quarkus project, open the Command Palette and select “Generate
    a Quarkus Project.” The available options at the time of writing are shown in
    [Figure 2-4](#Quarkus-Generate-New-Project).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0204](Images/qucb_0204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. Generate a new Quarkus project from the Command Palette
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The next step, shown in [Figure 2-5](#Quarkus-Selecting-Building-Tool), will
    ask you about which build tool you will be using. There are also some questions
    about `groupId`, `artifactId`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0205](Images/qucb_0205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Selecting your building tool
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Extensions can be added by using the `Add Extension` command from the console,
    as shown in [Figure 2-6](#Add-Extension-Command).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0206](Images/qucb_0206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-6\. The `Add extension` command
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: And select any Quarkus extension that you might want to add to the project.
    A sample of available extensions can been seen in [Figure 2-7](#List-of-Extensions).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0207](Images/qucb_0207.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-7\. You can see a list of available extensions for your application
    that could be installed
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the following figures, you can see some of the features that are provided
    by the Quarkus extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2-8](#config-properties) shows the auto-completion of configuration
    properties that help you correctly configure the application.'
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0208](Images/qucb_0208.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-8\. Auto-completion and type information of configuration property
    keys
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 2-9](#config-properties-desc) shows the description of a configuration
    property when you mouse over it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0209](Images/qucb_0209.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-9\. Hovering over a configuration property gives you more information
    about that property
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 2-10](#unused-config-prop) demonstrates how to detect unused properties
    in your application.'
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0210](Images/qucb_0210.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-10\. Detect unused configuration properties
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 2-11](#clickable-url) shows the URL representing the endpoint. If you
    click it, a new browser window is opened, pointing to the given URL.'
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0211](Images/qucb_0211.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-11\. A clickable URL endpoint is generated by the VS Code extension
    for each endpoint method
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Quarkus extension is available for several IDEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Visual Studio Code](https://oreil.ly/rL1Md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Eclipse](https://oreil.ly/3Ais_)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IntelliJ](https://oreil.ly/Whvdj)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.5 Live Reloading with Dev Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to review the result of a change in the project without having to repackage
    and redeploy the full application.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use *development mode*, which enables hot deployment with background compilation,
    which means that when you modify your Java files and/or your resource files and
    refresh your browser, these changes will automatically take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Each of the scaffolding methods default to Java 11. You will need a Java 11
    VM, or you will need to modify the project to use a different version of the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start an application in development mode, run the `quarkus:dev` command
    in the root of your project. For this example, you are using the project created
    in [Recipe 2.1](#scaffold-with-maven):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When the application is up and running, open a new terminal window and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now *without* stopping the `quarkus:dev` mode, do this next modification in
    `org.acme.quickstart.GreetingResource.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run this again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It is really important to note that you’ve done a change in your source code
    and that without any recompilation, repackaging, or redeployment, the change has
    been automatically populated in your running instance out of the box—without any
    special setup.
  prefs: []
  type: TYPE_NORMAL
- en: Now, instead of *write code* → *compile* → *deploy* → *refresh* → *repeat*,
    you are simplifying your development workflow to *write code* → *refresh* → *repeat*.
  prefs: []
  type: TYPE_NORMAL
- en: Development mode detects changes for Java files, application configs, and static
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: To stop development mode, go to `quarkus:dev` terminal and push Ctrl+C.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run development mode in Gradle projects, you can run a `quarkusDev` task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 2.6 Serving Static Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You want to serve static resources such as HTML, JavaScript, CSS, and images.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Quarkus, any resource copied into *src/main/resources/META-INF/resources*
    is served from the root path.
  prefs: []
  type: TYPE_NORMAL
- en: In some situations, you might want to serve static resources to your callers.
    These could be static downloadable content or an HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Quarkus comes with an *index.html* file as a static resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a browser and enter the following URL: [*http://localhost:8080/index.html*](http://localhost:8080/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: And you’ll see something like what’s shown in [Figure 2-12](#indexpage).
  prefs: []
  type: TYPE_NORMAL
- en: '![qucb 0212](Images/qucb_0212.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-12\. Quarkus creates a placeholder index for your application with
    basic information and next steps to help you after scaffolding
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Live reloading also works with static resources.
  prefs: []
  type: TYPE_NORMAL
