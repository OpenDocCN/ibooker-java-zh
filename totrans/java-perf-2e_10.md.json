["```java\n    @GET\n    @Path(\"/sleep\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public String sleepEndpoint(\n        @DefaultValue(\"100\") @QueryParam(\"delay\") long delay\n        ) throws ParseException {\n        try { Thread.sleep(delay); } catch (InterruptedException ie) {}\n        return \"{\\\"sleepTime\\\": \\\"\" + delay + \"\\\"}\";\n    }\n```", "```java\n    ThreadPoolExecutor tpe = Executors.newFixedThreadPool(64);\n    @GET\n    @Path(\"/asyncsleep\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public void sleepAsyncEndpoint(\n        @DefaultValue(\"100\") @QueryParam(\"delay\") long delay,\n        @Suspended final AsyncResponse ar\n        ) throws ParseException {\n        tpe.execute(() -> {\n            try { Thread.sleep(delay); } catch (InterruptedException ie) {}\n            ar.resume(\"{\\\"sleepTime\\\": \\\"\" + delay + \"\\\"}\");\n        });\n    }\n```", "```java\n    @GET\n    @Path(\"/asyncreject\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public void sleepAsyncRejectEndpoint(\n        @DefaultValue(\"100\") @QueryParam(\"delay\") long delay,\n        @Suspended final AsyncResponse ar\n        ) throws ParseException {\n        if (tpe.getActiveCount() == 64) {\n            ar.cancel();\n            return;\n        }\n        tpe.execute(() -> {\n            // Simulate processing delay using sleep\n            try { Thread.sleep(delay); } catch (InterruptedException ie) {}\n            ar.resume(\"{\\\"sleepTime\\\": \\\"\" + delay + \"\\\"}\");\n        });\n    }\n```", "```java\nprivate static Client client;\nstatic {\n    ClientConfig cc = new ClientConfig();\n    cc.connectorProvider(new JettyConnectorProvider());\n    client = ClientBuilder.newClient(cc);\n}\n\npublic Message getMessage() {\n    Message m = client.target(URI.create(url)\n                  .request(MediaType.APPLICATION_JSON)\n                  .get(Message.class);\n    return m;\n}\n```", "```java\npublic class TestResource {\n    public static class MultiCallback extends InvocationCallback<Message> {\n        private AsyncResponse ar;\n        private AtomicDouble total = new AtomicDouble(0);\n        private AtomicInteger pendingResponses;\n        public MultiCallback(AsyncResponse ar, int targetCount) {\n            this.ar = ar;\n            pendingResponse = new AtomicInteger(targetCount);\n        }\n        public void completed(Message m) {\n            double d = total.getAndIncrement(Message.getValue());\n            if (targetCount.decrementAndGet() == 0) {\n                ar.resume(\"{\\\"total\\\": \\\"\" + d + \"\\\"}\");\n            }\n        }\n    }\n\n    @GET\n    @Path(\"/aggregate\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public void aggregate(@Suspended final AsyncResponse ar)\n                    throws ParseException {\n        MultiCallback callback = new MultiCallback(ar, 3);\n        target1.request().async().get(callback);\n        target2.request().async().get(callback);\n        target3.request().async().get(callback);\n    }\n}\n```", "```java\n    ClientConfig cc = new ClientConfig();\n    cc.property(ClientProperties.ASYNC_THREADPOOL_SIZE, 128);\n    client = ClientBuilder.newClient(cc);\n```", "```java\nJsonObject jo;\nString title = jo.getString(\"title\");\n```", "```java\nItem i;\nString title = i.getTitle();\n```", "```java\nJsonb jsonb = JsonbBuilder.create();\nFindItemsByKeywordsResponse f =\n    jsonb.fromJson(inputStream, FindItemsByKeywordsResponse.class);\n```", "```java\nObjectMapper mapper = new ObjectMapper();\nFindItemsByKeywordsResponse f =\n    mapper.readValue(inputStream, FindItemsByKeywordsResponse.class);\n```", "```java\nparser = factory.createParser(inputStream);\nint idCount = 0;\nwhile (parser.hasNext()) {\n    Event event = parser.next();\n    switch (event) {\n        case KEY_NAME:\n            String s = parser.getString();\n            if (ID.equals(s)) {\n                isID = true;\n            }\n            break;\n        case VALUE_STRING:\n            if (isID) {\n                if (addId(parser.getString())) {\n                    idCount++;\n                    return;\n                }\n                isID = false;\n            }\n            continue;\n        default:\n            continue;\n    }\n}\n```"]