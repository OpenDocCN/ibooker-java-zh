["```java\nJava HotSpot(TM) 64-Bit Server VM warning: CodeCache is full.\n         Compiler has been disabled.\nJava HotSpot(TM) 64-Bit Server VM warning: Try increasing the\n         code cache size using -XX:ReservedCodeCacheSize=\n```", "```java\ntimestamp compilation_id attributes (tiered_level) method_name size deopt\n```", "```java\ntimestamp compile_id COMPILE SKIPPED: reason\n```", "```java\n  28015  850       4     net.sdo.StockPrice::getClosingPrice (5 bytes)\n  28179  905  s    3     net.sdo.StockPriceHistoryImpl::process (248 bytes)\n  28226   25 %     3     net.sdo.StockPriceHistoryImpl::<init> @ 48 (156 bytes)\n  28244  935       3     net.sdo.MockStockPriceEntityManagerFactory$\\\n                             MockStockPriceEntityManager::find (507 bytes)\n  29929  939       3     net.sdo.StockPriceHistoryImpl::<init> (156 bytes)\n 106805 1568   !   4     net.sdo.StockServlet::processRequest (197 bytes)\n```", "```java\npublic StockPriceHistoryImpl(String s, Date startDate, Date endDate) {\n    EntityManager em = emf.createEntityManager();\n    Date curDate = new Date(startDate.getTime());\n    symbol = s;\n    while (!curDate.after(endDate)) {\n         StockPrice sp = em.find(StockPrice.class, new StockPricePK(s, curDate));\n         if (sp != null) {\n            if (firstDate == null) {\n                firstDate = (Date) curDate.clone();\n            }\n            prices.put((Date) curDate.clone(), sp);\n            lastDate = (Date) curDate.clone();\n        }\n        curDate.setTime(curDate.getTime() + msPerDay);\n    }\n}\n```", "```java\nStockPriceHistory sph;\nString log = request.getParameter(\"log\");\nif (log != null && log.equals(\"true\")) {\n    sph = new StockPriceHistoryLogger(...);\n}\nelse {\n    sph = new StockPriceHistoryImpl(...);\n}\n// Then the JSP makes calls to:\nsph.getHighPrice();\nsph.getStdDev();\n// and so on\n```", "```java\n 841113   25 %           net.sdo.StockPriceHistoryImpl::<init> @ -2 (156 bytes)\n                                 made not entrant\n 841113  937  s          net.sdo.StockPriceHistoryImpl::process (248 bytes)\n                                 made not entrant\n1322722   25 %           net.sdo.StockPriceHistoryImpl::<init> @ -2 (156 bytes)\n                                 made zombie\n1322722  937  s          net.sdo.StockPriceHistoryImpl::process (248 bytes)\n                                 made zombie\n```", "```java\n  40915   84 %     3       net.sdo.StockPriceHistoryImpl::<init> @ 48 (156 bytes)\n  40923 3697       3       net.sdo.StockPriceHistoryImpl::<init> (156 bytes)\n  41418   87 %     4       net.sdo.StockPriceHistoryImpl::<init> @ 48 (156 bytes)\n  41434   84 %     3       net.sdo.StockPriceHistoryImpl::<init> @ -2 (156 bytes)\n                                      made not entrant\n  41458 3749       4       net.sdo.StockPriceHistoryImpl::<init> (156 bytes)\n  41469 3697       3       net.sdo.StockPriceHistoryImpl::<init> (156 bytes)\n                                      made not entrant\n  42772 3697       3       net.sdo.StockPriceHistoryImpl::<init> (156 bytes)\n                                      made zombie\n  42861   84 %     3       net.sdo.StockPriceHistoryImpl::<init> @ -2 (156 bytes)\n                                      made zombie\n```", "```java\npublic class Point {\n    private int x, y;\n\n    public void getX() { return x; }\n    public void setX(int i)  { x = i; }\n}\n```", "```java\nPoint p = getPoint();\np.setX(p.getX() * 2);\n```", "```java\nPoint p = getPoint();\np.x = p.x * 2;\n```", "```java\npublic class Factorial {\n    private BigInteger factorial;\n    private int n;\n    public Factorial(int n) {\n        this.n = n;\n    }\n    public synchronized BigInteger getFactorial() {\n        if (factorial == null)\n            factorial = ...;\n        return factorial;\n    }\n}\n```", "```java\nArrayList<BigInteger> list = new ArrayList<BigInteger>();\nfor (int i = 0; i < 100; i++) {\n    Factorial factorial = new Factorial(i);\n    list.add(factorial.getFactorial());\n}\n```", "```java\n$ jaotc --compile-commands=/tmp/methods.txt \\\n    --output JavaBaseFilteredMethods.so \\\n    --compile-for-tiered \\\n    --module java.base\n```", "```java\ncompileOnly java.net.URI.getHost()Ljava/lang/String;\n```", "```java\n$ java -XX:+UnlockDiagnosticVMOptions -XX:+LogTouchedMethods \\\n      -XX:+PrintTouchedMethodsAtExit <other arguments>\n```", "```java\njava/net/URI.getHost:()Ljava/lang/String;\n```", "```java\n$ java -XX:AOTLibrary=/path/to/JavaBaseFilteredMethods.so <other args>\n```", "```java\n    373  105     aot[ 1]   java.util.HashSet.<init>(I)V\n```", "```java\n18    1     loaded    /path/to/JavaBaseFilteredMethods.so  aot library\n```"]