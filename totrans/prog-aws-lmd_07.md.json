["```java\nRecorded a temperature of 78 F from Brooklyn, NY\n```", "```java\nSTART RequestId: 6127fe67-a406-11e8-9030-69649c02a345\n  Version: $LATEST\nRecorded a temperature of 78 F from Brooklyn, NY\nEND RequestId: 6127fe67-a406-11e8-9030-69649c02a345\nREPORT RequestId: 6127fe67-a406-11e8-9030-69649c02a345\n  Duration: 2001.52 ms\n  Billed Duration: 2000 ms\n  Memory Size: 512 MB\n  Max Memory Used: 51 MB\n```", "```java\npublic class WeatherEventLambda {\n  …\n  public APIGatewayProxyResponseEvent handler(\n      APIGatewayProxyRequestEvent request,\n      Context context\n       ) throws IOException {\n\n    context.getLogger().log(\"Request received\");\n    …\n  }\n}\n```", "```java\nSTART RequestId: 4f40a12b-1112-4b3a-94a9-89031d57defa Version: $LATEST\nRequest received\nEND RequestId: 4f40a12b-1112-4b3a-94a9-89031d57defa\n```", "```java\npublic class WeatherEventLambda {\n  …\n  public APIGatewayProxyResponseEvent handler(\n      APIGatewayProxyRequestEvent request,\n      Context context\n       ) throws IOException {\n\n    StringWriter stringWriter = new StringWriter();\n    Exception e = new Exception();\n    e.printStackTrace(new PrintWriter(stringWriter));\n\n    context.getLogger().log(stringWriter);\n    …\n  }\n}\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-lambda-java-log4j2</artifactId>\n    <version>1.1.0</version>\n  </dependency>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.12.1</version>\n    </dependency>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>2.12.1</version>\n  </dependency>\n</dependencies>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration packages=\"com.amazonaws.services.lambda.runtime.log4j2\">\n  <Appenders>\n    <Lambda name=\"Lambda\">\n      <PatternLayout>\n        <pattern>\n          %d{yyyy-MM-dd HH:mm:ss} %X{AWSRequestId} %-5p %c{1}:%L—%m%n\n        </pattern>\n      </PatternLayout>\n    </Lambda>\n  </Appenders>\n  <Loggers>\n    <Root level=\"info\">\n      <AppenderRef ref=\"Lambda\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n```", "```java\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class WeatherEventLambda {\n  private static Logger logger = LogManager.getLogger();\n  …\n  public APIGatewayProxyResponseEvent handler(\n    APIGatewayProxyRequestEvent request, Context context)\n    throws IOException {\n\n    Exception e = new Exception(\"Test exception\");\n    logger.error(\"Log4J logger\", e);\n    ...\n  }\n}\n```", "```java\n<dependency>\n  <groupId>org.apache.logging.log4j</groupId>\n  <artifactId>log4j-jcl</artifactId>\n  <version>2.12.1</version>\n</dependency>\n```", "```java\n<Loggers>\n  <Root level=\"debug\">\n    <AppenderRef ref=\"Lambda\"/>\n  </Root>\n</Loggers>\n```", "```java\n{\n  \"thread\": \"main\",\n  \"level\": \"INFO\",\n  \"loggerName\": \"book.api.WeatherEventLambda\",\n  \"message\": {\n    \"locationName\": \"Brooklyn, NY\",\n    \"action\": \"record\",\n    \"temperature\": 78,\n    \"timestamp\": 1564506117\n  },\n  \"endOfBatch\": false,\n  \"loggerFqcn\": \"org.apache.logging.log4j.spi.AbstractLogger\",\n  \"instant\": {\n    \"epochSecond\": 1564506117,\n    \"nanoOfSecond\": 400000000\n  },\n  \"contextMap\": {\n    \"AWSRequestId\": \"d814bbbe-559b-4798-aee0-31ddf9235a76\"\n  },\n  \"threadId\": 1,\n  \"threadPriority\": 5\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration packages=\"com.amazonaws.services.lambda.runtime.log4j2\">\n  <Appenders>\n    <Lambda name=\"Lambda\">\n      <JsonLayout\n        compact=\"true\"\n        eventEol=\"true\"\n        objectMessageAsJsonObject=\"true\"\n        properties=\"true\"/>\n    </Lambda>\n  </Appenders>\n  <Loggers>\n    <Root level=\"info\">\n      <AppenderRef ref=\"Lambda\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n```", "```java\n...\nprivate static Logger logger = LogManager.getLogger();\n...\n```", "```java\nHashMap<Object, Object> message = new HashMap<>();\nmessage.put(\"action\", \"record\");\nmessage.put(\"locationName\", weatherEvent.locationName);\nmessage.put(\"temperature\", weatherEvent.temperature);\nmessage.put(\"timestamp\", weatherEvent.timestamp);\n\nlogger.info(new ObjectMessage(message));\n```", "```java\n{\n  \"thread\": \"main\",\n  \"level\": \"INFO\",\n  \"loggerName\": \"book.api.WeatherEventLambda\",\n  \"message\": {\n    \"locationName\": \"Brooklyn, NY\",\n    \"action\": \"record\",\n    \"temperature\": 78,\n    \"timestamp\": 1564506117\n  },\n  \"endOfBatch\": false,\n  \"loggerFqcn\": \"org.apache.logging.log4j.spi.AbstractLogger\",\n  \"instant\": {\n    \"epochSecond\": 1564506117,\n    \"nanoOfSecond\": 400000000\n  },\n  \"contextMap\": {\n    \"AWSRequestId\": \"d814bbbe-559b-4798-aee0-31ddf9235a76\"\n  },\n  \"threadId\": 1,\n  \"threadPriority\": 5\n}\n```", "```java\nfilter message.action = \"record\"\n    and message.locationName = \"Brooklyn, NY\"\n| fields date_floor(concat(message.timestamp, \"000\"), 1d) as Day,\n    message.temperature\n| stats min(message.temperature) as Low,\n    avg(message.temperature) as Average,\n    max(message.temperature) as High by Day\n| order by Day asc\n```", "```java\nBrooklynWeatherMetricFilter:\n  Type: AWS::Logs::MetricFilter\n  Properties:\n    LogGroupName: !Sub \"/aws/lambda/${WeatherEventLambda}\"\n    FilterPattern: '{$.message.locationName = \"Brooklyn, NY\"}'\n    MetricTransformations:\n      — MetricValue: \"1\"\n    MetricNamespace: WeatherApi\n    MetricName: BrooklynWeatherEventCount\n    DefaultValue: \"0\"\n```", "```java\nBrooklynWeatherAlarm:\n  Type: AWS::CloudWatch::Alarm\n  Properties:\n    Namespace: WeatherApi\n    MetricName: BrooklynWeatherEventCount\n    Statistic: Sum\n    ComparisonOperator: LessThanThreshold\n    Threshold: 1\n    Period: 60\n    EvaluationPeriods: 1\n    TreatMissingData: breaching\n    ActionsEnabled: True\n    AlarmActions:\n      — !Ref BrooklynWeatherAlarmTopic\n\nBrooklynWeatherAlarmTopic:\n  Type: AWS::SNS::Topic\n```", "```java\nGlobals:\n  Function:\n    Runtime: java8\n    MemorySize: 512\n    Timeout: 25\n    Environment:\n      Variables:\n        LOCATIONS_TABLE: !Ref LocationsTable\n    Tracing: PassThrough\n  Api:\n    OpenApiVersion: '3.0.1'\n    TracingEnabled: true\n```", "```java\n<dependency>\n  <groupId>com.amazonaws</groupId>\n  <artifactId>aws-xray-recorder-sdk-bom</artifactId>\n  <version>2.3.0</version>\n  <type>pom</type>\n  <scope>import</scope>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>com.amazonaws</groupId>\n  <artifactId>aws-xray-recorder-sdk-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>com.amazonaws</groupId>\n  <artifactId>aws-xray-recorder-sdk-aws-sdk</artifactId>\n</dependency>\n<dependency>\n  <groupId>com.amazonaws</groupId>\n  <artifactId>aws-xray-recorder-sdk-aws-sdk-instrumentor</artifactId>\n</dependency>\n```", "```java\n  WeatherEventLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: target/lambda.zip\n      Handler: book.api.WeatherEventLambda::handler\n #      Policies:\n #        — DynamoDBCrudPolicy:\n #            TableName: !Ref LocationsTable\n      Events:\n        ApiEvents:\n          Type: Api\n          Properties:\n            Path: /events\n            Method: POST\n```"]