["```java\nvar location = Paths.get(\"war-and-peace-text.txt\");\n\n// CLEANUP PATTERNS ![1](assets/1.png)\nvar punctuation = Pattern.compile(\"\\\\p{Punct}\");\nvar whitespace  = Pattern.compile(\"\\\\s+\");\nvar words       = Pattern.compile(\"\\\\w+\");\n\ntry {\n  // LOAD CONTENT ![2](assets/2.png)\n  var content = Files.readString(location);\n\n  Map<String, Integer> wordCount =\n    Stream.of(content)\n          // CLEAN CONTENT ![3](assets/3.png)\n          .map(punctuation::matcher)\n          .map(matcher -> matcher.replaceAll(\"\"))\n          // SPLIT TO WORDS ![4](assets/4.png)\n          .map(whitespace::split)\n          .flatMap(Arrays::stream)\n          .filter(word -> words.matcher(word).matches())\n          // COUNTING ![5](assets/5.png)\n          .map(String::toLowerCase)\n          .collect(Collectors.toMap(Function.identity(),\n                                    word -> 1,\n                                    Integer::sum));\n} (IOException e) {\n  // ...\n}\n```", "```java\n// ...\n\n// LOAD CONTENT ![1](assets/1.png)\ntry (Stream<String> stream = Files.lines(location)) {\n\n  Map<String, Integer> wordCount =\n    stream.parallel()\n          // CLEAN LINES ![2](assets/2.png)\n          .map(punctionaction::matcher)\n          .map(matcher -> matcher.replaceAll(\"\"))\n          .map(whitespace::split)\n          // SPLIT TO WORDS ![2](assets/2.png)\n          .flatMap(Arrays::stream)\n          .filter(word -> words.matcher(word).matches())\n          // COUNTING ![3](assets/3.png)\n          .map(String::toLowerCase)\n          .collect(Collectors.toConcurrentMap(Function.identity(),\n                                              word -> 1,\n                                              Integer::sum));\n}\n```", "```java\nvar numbers = List.of(1, 2, 3, 4, 5, 6, ...);\n\nint total = 0;\n\nfor (int value : numbers) {\n  total += value;\n}\n```", "```java\nint total = Stream.of(1, 2, 3, 4, 5, 6, ...)\n                  .parallel()\n                  .reduce(0, ![1](assets/1.png)\n                          Integer::sum); ![2](assets/2.png)\n```", "```java\nvar elementsCount = 100_000_000; ![1](assets/1.png)\n\nIntUnaryOperator multiplyByTwo = in -> in * 2; ![2](assets/2.png)\n\nvar rnd = new Random(); ![3](assets/3.png)\n\n// FOR-LOOP ![4](assets/4.png)\n\nvar loopStats = new IntSummaryStatistics();\n\nfor(int idx = 0; idx < elementsCount; idx++) {\n  var value = rnd.nextInt();\n  var subResult = multiplyByTwo.applyAsInt(value);\n  var finalResult = multiplyByTwo.applyAsInt(subResult);\n  loopStats.accept(finalResult);\n}\n\n// SEQUENTIAL IntStream ![5](assets/5.png)\n\nvar seqStats = rnd.ints(elementsCount)\n                  .map(multiplyByTwo)\n                  .map(multiplyByTwo)\n                  .summaryStatistics();\n\n// PARALLEL IntStream ![6](assets/6.png)\n\nvar parallelStats = rnd.ints(elementsCount)\n                       .parallel()\n                       .map(multiplyByTwo)\n                       .map(multiplyByTwo)\n                       .summaryStatistics();\n```"]