- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When O’Reilly first approached me about writing a book on Java performance tuning,
    I was unsure. Java performance, I thought—aren’t we done with that? Yes, I still
    work on improving the performance of Java (and other) applications on a daily
    basis, but I like to think that I spend most of my time dealing with algorithmic
    inefficiencies and external system bottlenecks rather than on anything directly
    related to Java tuning.
  prefs: []
  type: TYPE_NORMAL
- en: A moment’s reflection convinced me that I was (as usual) kidding myself. It
    is certainly true that end-to-end system performance takes up a lot of my time,
    and that I sometimes come across code that uses an <math alttext="upper O left-parenthesis
    n squared right-parenthesis"><mrow><mi>O</mi> <mo>(</mo> <msup><mrow><mi>n</mi></mrow>
    <mn>2</mn></msup> <mo>)</mo></mrow></math> algorithm when it could use one with
    *O(logN)* performance. Still, it turns out that every day I think about garbage
    collection (GC) performance, or the performance of the JVM compiler, or how to
    get the best performance from Java APIs.
  prefs: []
  type: TYPE_NORMAL
- en: That is not to minimize the enormous progress that has been made in the performance
    of Java and JVMs over the past 20-plus years. When I was a Java evangelist at
    Sun during the late 1990s, the only real “benchmark” available was CaffeineMark
    2.0 from Pendragon software. For a variety of reasons, the design of that benchmark
    quickly limited its value; yet in its day, we were fond of telling everyone that
    Java 1.1.8 performance was eight times faster than Java 1.0 performance based
    on that benchmark. And that was true—Java 1.1.8 had an actual just-in-time compiler,
    whereas Java 1.0 was pretty much completely interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: Then standards committees began to develop more rigorous benchmarks, and Java
    performance began to be centered around them. The result was a continuous improvement
    in all areas of the JVM—garbage collection, compilations, and within the APIs.
    That process continues today, of course, but one of the interesting facts about
    performance work is that it gets successively harder. Achieving an eightfold increase
    in performance by introducing a just-in-time compiler was a straightforward matter
    of engineering, and even though the compiler continues to improve, we’re not going
    to see an improvement like that again. Parallelizing the garbage collector was
    a huge performance improvement, but more recent changes have been more incremental.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a typical process for applications (and the JVM itself is just another
    application): in the beginning of a project, it’s easy enough to find architectural
    changes (or code bugs) that, when addressed, yield huge performance improvements.
    In a mature application, finding such performance improvements is rare.'
  prefs: []
  type: TYPE_NORMAL
- en: That precept was behind my original concern that, to a large extent, the engineering
    world might be done with Java performance. A few things convinced me I was wrong.
    First is the number of questions I see daily about how this or that aspect of
    the JVM performs under certain circumstances. New engineers come to Java all the
    time, and JVM behavior remains complex enough in certain areas that a guide to
    its operation is still beneficial. Second is that environmental changes in computing
    seem to have altered the performance concerns that engineers face today.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past few years, performance concerns have become bifurcated. On the
    one hand, very large machines capable of running JVMs with very large heaps are
    now commonplace. The JVM has moved to address those concerns with a new garbage
    collector (G1), which—as a new technology—requires a little more hand-tuning than
    traditional collectors. At the same time, cloud computing has renewed the importance
    of small, single-CPU machines: you can go to Oracle or Amazon or a host of other
    companies and cheaply rent a single CPU machine to run a small application server.
    (You’re not actually getting a single-CPU machine: you’re getting a virtual OS
    image on a very large machine, but the virtual OS is limited to using a single
    CPU. From the perspective of Java, that turns out to be the same as a single-CPU
    machine.) In those environments, correctly managing small amounts of memory turns
    out to be quite important.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Java platform also continues to evolve. Each new edition of Java provides
    new language features and new APIs that improve the productivity of developers—if
    not always the performance of their applications. Best practice use of these language
    features can help differentiate between an application that sizzles and one that
    plods along. And the evolution of the platform brings up interesting performance
    questions: there is no question that using JSON to exchange information between
    two programs is much simpler than coming up with a highly optimized proprietary
    protocol. Saving time for developers is a big win—but making sure that productivity
    win comes with a performance win (or at least breaks even) is the real goal.'
  prefs: []
  type: TYPE_NORMAL
- en: Who Should (and Shouldn’t) Read This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is designed for performance engineers and developers who are looking
    to understand how various aspects of the JVM and the Java APIs impact performance.
  prefs: []
  type: TYPE_NORMAL
- en: If it is late Sunday night, your site is going live Monday morning, and you’re
    looking for a quick fix for performance issues, this is not the book for you.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to performance analysis and are starting that analysis in Java,
    this book can help you. Certainly my goal is to provide enough information and
    context that novice engineers can understand how to apply basic tuning and performance
    principles to a Java application. However, system analysis is a broad field. There
    are a number of excellent resources for system analysis in general (and those
    principles, of course, apply to Java), and in that sense, this book will ideally
    be a useful companion to those texts.
  prefs: []
  type: TYPE_NORMAL
- en: At a fundamental level, though, making Java go really fast requires a deep understanding
    of how the JVM (and Java APIs) actually work. Hundreds of Java tuning flags exist,
    and tuning the JVM has to be more than an approach of blindly trying them and
    seeing what works. Instead, my goal is to provide detailed knowledge about what
    the JVM and APIs are doing, with the hope that if you understand how those things
    work, you’ll be able to look at the specific behavior of an application and understand
    *why* it is performing badly. Understanding that, it becomes a simple (or at least
    simpler) task to get rid of undesirable (badly performing) behavior.
  prefs: []
  type: TYPE_NORMAL
- en: One interesting aspect to Java performance work is that developers often have
    a very different background than engineers in a performance or QA group. I know
    developers who can remember thousands of obscure method signatures on little-used
    Java APIs but who have no idea what the flag `-Xmn` means. And I know testing
    engineers who can get every last ounce of performance from setting various flags
    for the garbage collector but who can barely write a suitable “Hello, World” program
    in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Java performance covers both of these areas: tuning flags for the compiler
    and garbage collector and so on, and best-practice uses of the APIs. So I assume
    that you have a good understanding of how to write programs in Java. Even if your
    primary interest is not in the programming aspects of Java, I do spend a fair
    amount of time discussing programs, including the sample programs used to provide
    a lot of the data points in the examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Still, if your primary interest is in the performance of the JVM itself—meaning
    how to alter the behavior of the JVM without any coding—then large sections of
    this book should still be beneficial to you. Feel free to skip over the coding
    parts and focus on the areas that interest you. And maybe along the way, you’ll
    pick up some insight into how Java applications can affect JVM performance and
    start to suggest changes to developers so they can make your performance-testing
    life easier.
  prefs: []
  type: TYPE_NORMAL
- en: What’s New in the Second Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the first edition, Java has adopted a six-month release cycle with periodic
    long-term releases; that means the current supported releases that coincide with
    publication are Java 8 and Java 11\. Although the first edition covered Java 8,
    it was quite new at the time. This edition focuses on a much more mature Java
    8 and Java 11, with major updates to the G1 garbage collector and Java Flight
    Recorder. Attention is also given to changes in the way Java behaves in containerized
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: This edition covers new features of the Java platform, including a new microbenchmarking
    harness (`jmh`), new just-in-time compilers, application class data sharing, and
    new performance tools—as well as coverage of new Java 11 features like compact
    strings and string concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: This element signifies a summary of main points.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/ScottOaks/JavaPerformanceTuning*](https://github.com/ScottOaks/JavaPerformanceTuning).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Java Performance* by Scott
    Oaks (O’Reilly). Copyright 2020 Scott Oaks, 978-1-492-05611-9.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, conferences, and our online learning platform. O’Reilly’s
    online learning platform gives you on-demand access to live training courses,
    in-depth learning paths, interactive coding environments, and a vast collection
    of text and video from O’Reilly and 200+ other publishers. For more information,
    please visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/java-performance-2e*](https://oreil.ly/java-performance-2e).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [*http://www.oreilly.com*](http://www.oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would like to thank everyone who helped me as I worked on this book. In many
    ways, this book is an accumulation of knowledge gained over my past 20 years in
    the Java Performance Group and other engineering groups at Sun Microsystems and
    Oracle, so the list of people who have provided positive input into this book
    is quite broad. To all the engineers I have worked with during that time, and
    particularly to those who patiently answered my random questions over the past
    year, thank you!
  prefs: []
  type: TYPE_NORMAL
- en: I would especially like to thank Stanley Guan, Azeem Jiva, Kim LiChong, Deep
    Singh, Martijn Verburg, and Edward Yue Shung Wong for their time reviewing draft
    copies and providing valuable feedback. I am sure that they were unable to find
    all my errors, though the material here is greatly improved by their input. The
    second edition was improved greatly by the thorough and thoughtful help offered
    by Ben Evans, Rod Hilton, and Michael Hunger. My colleagues Eric Caspole, Charlie
    Hunt, and Robert Strout in the Oracle HotSpot performance group patiently helped
    me with a variety of issues in the second edition as well.
  prefs: []
  type: TYPE_NORMAL
- en: The production staff at O’Reilly was, as always, very helpful. I was privileged
    to work with editor Meg Blanchette on the first edition, and Amelia Blevins thoughtfully
    and carefully guided the second edition. Thanks for all your encouragement during
    the process! Finally, I must thank my husband, James, for putting up with the
    long nights and those weekend dinners where I was in a continual state of distraction.
  prefs: []
  type: TYPE_NORMAL
