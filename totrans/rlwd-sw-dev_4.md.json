["```java\nswitch(extension) {\n    case \"letter\":\n        // code for importing letters.\n        break;\n\n    case \"report\":\n        // code for importing reports.\n        break;\n\n    case \"jpg\":\n        // code for importing images.\n        break;\n\n    default:\n        throw new UnknownFileTypeException(\"For file: \" + path);\n}\n```", "```java\ninterface Importer {\n    Document importFile(File file) throws IOException;\n}\n```", "```java\npublic class Document {\n    private final Map<String, String> attributes;\n\n    Document(final Map<String, String> attributes) {\n        this.attributes = attributes;\n    }\n\n    public String getAttribute(final String attributeName) {\n        return attributes.get(attributeName);\n    }\n}\n```", "```java\nimport static com.iteratrlearning.shu_book.chapter_04.Attributes.*;\n\nclass ImageImporter implements Importer {\n    @Override\n    public Document importFile(final File file) throws IOException {\n        final Map<String, String> attributes = new HashMap<>();\n        attributes.put(PATH, file.getPath());\n\n        final BufferedImage image = ImageIO.read(file);\n        attributes.put(WIDTH, String.valueOf(image.getWidth()));\n        attributes.put(HEIGHT, String.valueOf(image.getHeight()));\n        attributes.put(TYPE, \"IMAGE\");\n\n        return new Document(attributes);\n    }\n}\n```", "```java\npublic static final String PATH = \"path\";\n```", "```java\n    private final Map<String, Importer> extensionToImporter = new HashMap<>();\n\n    public DocumentManagementSystem() {\n        extensionToImporter.put(\"letter\", new LetterImporter());\n        extensionToImporter.put(\"report\", new ReportImporter());\n        extensionToImporter.put(\"jpg\", new ImageImporter());\n    }\n```", "```java\n    public void importFile(final String path) throws IOException {\n        final File file = new File(path);\n        if (!file.exists()) {\n            throw new FileNotFoundException(path);\n        }\n\n        final int separatorIndex = path.lastIndexOf('.');\n        if (separatorIndex != -1) {\n            if (separatorIndex == path.length()) {\n                throw new UnknownFileTypeException(\"No extension found For file: \" + path);\n            }\n            final String extension = path.substring(separatorIndex + 1);\n            final Importer importer = extensionToImporter.get(extension);\n            if (importer == null) {\n                throw new UnknownFileTypeException(\"For file: \" + path);\n            }\n\n            final Document document = importer.importFile(file);\n            documents.add(document);\n        } else {\n            throw new UnknownFileTypeException(\"No extension found For file: \" + path);\n        }\n    }\n```", "```java\nDear Joe Bloggs\n\nHere is your invoice for the dental treatment that you received.\n\nAmount: $100\n\nregards,\n\n  Dr Avaj\n  Awesome Dentist\n```", "```java\n    void addLineSuffix(final String prefix, final String attributeName) {\n        for(final String line: lines) {\n            if (line.startsWith(prefix)) {\n                attributes.put(attributeName, line.substring(prefix.length()));\n                break;\n            }\n        }\n    }\n```", "```java\nDear Joe Bloggs\n\n123 Fake Street\nWestminster\nLondon\nUnited Kingdom\n\nWe are writing to you to confirm the re-scheduling of your appointment\nwith Dr. Avaj from 29th December 2016 to 5th January 2017.\n\nregards,\n\n  Dr Avaj\n  Awesome Dentist\n```", "```java\nPatient: Joe Bloggs\n\nOn 5th January 2017 I examined Joe's teeth.\nWe discussed his switch from drinking Coke to Diet Coke.\nNo new problems were noted with his teeth.\n```", "```java\nclass TextFile {\n    private final Map<String, String> attributes;\n    private final List<String> lines;\n\n    // class continues ...\n```", "```java\n    @Override\n    public Document importFile(final File file) throws IOException {\n        final TextFile textFile = new TextFile(file);\n\n        textFile.addLineSuffix(NAME_PREFIX, PATIENT);\n        textFile.addLineSuffix(AMOUNT_PREFIX, AMOUNT);\n\n        final Map<String, String> attributes = textFile.getAttributes();\n        attributes.put(TYPE, \"INVOICE\");\n        return new Document(attributes);\n    }\n```", "```java\n    @Override\n    public Document importFile(final File file) throws IOException {\n        final TextFile textFile = new TextFile(file);\n\n        textFile.addLineSuffix(NAME_PREFIX, PATIENT);\n\n        final int lineNumber = textFile.addLines(2, String::isEmpty, ADDRESS);\n        textFile.addLines(lineNumber + 1, (line) -> line.startsWith(\"regards,\"), BODY);\n\n        final Map<String, String> attributes = textFile.getAttributes();\n        attributes.put(TYPE, \"LETTER\");\n        return new Document(attributes);\n    }\n```", "```java\n    int addLines(\n        final int start,\n        final Predicate<String> isEnd,\n        final String attributeName) {\n\n        final StringBuilder accumulator = new StringBuilder();\n        int lineNumber;\n        for (lineNumber = start; lineNumber < lines.size(); lineNumber++) {\n            final String line = lines.get(lineNumber);\n            if (isEnd.test(line)) {\n                break;\n            }\n\n            accumulator.append(line);\n            accumulator.append(\"\\n\");\n        }\n        attributes.put(attributeName, accumulator.toString().trim());\n        return lineNumber;\n    }\n```", "```java\n    @Test\n    public void shouldImportFile() throws Exception\n    {\n        system.importFile(LETTER);\n\n        final Document document = onlyDocument();\n\n        assertAttributeEquals(document, Attributes.PATH, LETTER);\n    }\n```", "```java\npublic class DocumentManagementSystem\n{\n    public void importFile(final String path) {\n        ...\n    }\n\n    public List<Document> contents() {\n        ...\n    }\n\n    public List<Document> search(final String query) {\n        ...\n    }\n}\n```", "```java\n    @Test\n    public void shouldImportLetterAttributes() throws Exception\n    {\n        system.importFile(LETTER);\n\n        final Document document = onlyDocument();\n\n        assertAttributeEquals(document, PATIENT, JOE_BLOGGS);\n        assertAttributeEquals(document, ADDRESS,\n            \"123 Fake Street\\n\" +\n                \"Westminster\\n\" +\n                \"London\\n\" +\n                \"United Kingdom\");\n        assertAttributeEquals(document, BODY,\n            \"We are writing to you to confirm the re-scheduling of your appointment\\n\" +\n            \"with Dr. Avaj from 29th December 2016 to 5th January 2017.\");\n        assertTypeIs(\"LETTER\", document);\n    }\n```", "```java\n    @Test\n    public void shouldImportImageAttributes() throws Exception\n    {\n        system.importFile(XRAY);\n\n        final Document document = onlyDocument();\n\n        assertAttributeEquals(document, WIDTH, \"320\");\n        assertAttributeEquals(document, HEIGHT, \"179\");\n        assertTypeIs(\"IMAGE\", document);\n    }\n```", "```java\n    private void assertAttributeEquals(\n        final Document document,\n        final String attributeName,\n        final String expectedValue)\n    {\n        assertEquals(\n            \"Document has the wrong value for \" + attributeName,\n            expectedValue,\n            document.getAttribute(attributeName));\n    }\n```", "```java\n    private Document onlyDocument()\n    {\n        final List<Document> documents = system.contents();\n        assertThat(documents, hasSize(1));\n        return documents.get(0);\n    }\n```", "```java\nassertTrue(documents.size() == 0);\n```", "```java\nassertEquals(0, documents.size());\n```", "```java\nassertThat(documents, hasSize(0));\n```", "```java\n    @Test(expected = FileNotFoundException.class)\n    public void shouldNotImportMissingFile() throws Exception\n    {\n        system.importFile(\"gobbledygook.txt\");\n    }\n\n    @Test(expected = UnknownFileTypeException.class)\n    public void shouldNotImportUnknownFile() throws Exception\n    {\n        system.importFile(RESOURCES + \"unknown.txt\");\n    }\n```", "```java\npublic class DocumentManagementSystemTest\n{\n    private static final String RESOURCES =\n        \"src\" + File.separator + \"test\" + File.separator + \"resources\" + File.separator;\n    private static final String LETTER = RESOURCES + \"patient.letter\";\n    private static final String REPORT = RESOURCES + \"patient.report\";\n    private static final String XRAY = RESOURCES + \"xray.jpg\";\n    private static final String INVOICE = RESOURCES + \"patient.invoice\";\n    private static final String JOE_BLOGGS = \"Joe Bloggs\";\n```"]