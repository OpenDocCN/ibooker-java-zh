["```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n  R apply(T t);\n}\n```", "```java\nFunction<String, Integer> stringLength = str -> str != null ? str.length() : 0;\n\nInteger result = stringLength.apply(\"Hello, Function!\");\n```", "```java\n@FunctionalInterface\npublic interface Consumer<T> {\n\n  void accept(T t);\n}\n```", "```java\nConsumer<String> println = str -> System.out.println(str);\n\nprintln.accept(\"Hello, Consumer!\");\n```", "```java\n@FunctionalInterface\npublic interface Supplier<T> {\n\n  T get();\n}\n```", "```java\nSupplier<Double> random = () -> Math.random();\n\nDouble result = random.get();\n```", "```java\n@FunctionalInterface\npublic interface Predicate<T> {\n\n  boolean test(T t);\n}\n```", "```java\nPredciate<Integer> over9000 = i -> i > 9_000;\n\nInteger result = over9000.test(1_234);\n```", "```java\nFunction<String, String> greeterFn = name -> \"Hello \" + name;\n```", "```java\n@FunctionalInterface\npublic interface TriFunction<T, U, V, R> {\n\n  R accept(T t, U u, V, v);\n}\n```", "```java\n@FunctionalInteface\ninterface BinaryOperator<T> extends BiFunction<T, T, T> {\n  // ...\n}\n```", "```java\nUnaryOperator<String> unaryOp = String::toUpperCase;\n\nFunction<String, String> func = String::toUpperCase;\n\nvoid acceptsUnary(UnaryOperator<String> unaryOp) { ... };\n\nvoid acceptsFunction(Function<String, String> func) { ... };\n\nacceptsUnary(unaryOp); // OK\nacceptsUnary(func); // COMPILE-ERROR\n\nacceptsFunction(func); // OK\nacceptsFunction(unaryOp); // OK\n```", "```java\ninterface LikePredicate<T> {\n  boolean test(T value); ![1](assets/1.png)\n}\n\nLikePredicate<String> isNull = str -> str == null;\n\nPredicate<String> wontCompile = isNull;\n// Error:\n// incompatible types: LikePredicate<java.lang.String> cannot be\n// converted to java.util.function.Predicate<java.lang.String>\n\nPredicate<String> wontCompileEither = (Predicate<String>) isNull;\n// Exception java.lang.ClassCastException: class LikePredicate\n// cannot be cast to class java.util.function.Predicate\n```", "```java\nPredicate<String> thisIsFine = isNull::test;\n```", "```java\nFunction<String, String> removeLowerCaseA = str -> str.replace(\"a\", \"\");\nFunction<String, String> upperCase = String::toUpperCase;\n\nvar input = \"abcd\";\n\nremoveLowerCaseA.andThen(upperCase)\n                .apply(input);\n// => \"BCD\"\n\nupperCase.compose(removeLowerCaseA)\n         .apply(input);\n// => \"BCD\"\n```", "```java\npublic interface Collection<E> extends Iterable<E> {\n\n  default Stream<E> stream() {\n    return StreamSupport.stream(spliterator(), false);\n  }\n\n  default Stream<E> parallelStream() {\n    return StreamSupport.stream(spliterator(), true);\n  }\n\n  // ...\n}\n```", "```java\npublic interface Iterable<T> { ![1](assets/1.png)\n\n  default Spliterator<T> spliterator() {\n    return Spliterators.spliteratorUnknownSize(iterator(), 0); ![1](assets/1.png)\n  }\n\n  // ...\n}\n\npublic interface Collection<E> extends Iterable<E> {\n\n  @Override\n  default Spliterator<E> spliterator() {\n    return Spliterators.spliterator(this, 0); ![2](assets/2.png)\n  }\n\n  // ...\n}\n\npublic class ArrayList<E> extends AbstractList<E>\n  implements List<E>, ... {\n\n  @Override\n  public Spliterator<E> spliterator() {\n      return new ArrayListSpliterator(0, -1, 0); ![3](assets/3.png)\n  }\n\n  // ...\n}\n```", "```java\npublic interface TextEditorCommand {\n\n  String execute();\n}\n```", "```java\npublic interface TextEditorCommand\n  extends Supplier<T> {\n\n  String execute();\n\n  default String get() {\n    return execute();\n  }\n}\n```", "```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n    default <V> Function<V, R> compose(Function<V, T> before) { ![1](assets/1.png)\n        Objects.requireNonNull(before); ![2](assets/2.png)\n\n        return (V v) -> { ![3](assets/3.png)\n          T result = before.apply(v); ![4](assets/4.png)\n          return apply(result); ![5](assets/5.png)\n        };\n    }\n\n    // ...\n}\n```", "```java\npublic final class Compositor {\n\n  public static <T, R> Supplier<R> compose(Supplier<T> before,\n                                           Function<T, R> fn) {\n    Objects.requireNonNull(before);\n    Objects.requireNonNull(fn);\n\n    return () -> {\n      T result = before.get();\n      return fn.apply(result);\n    };\n  }\n\n  public static <T, R> Consumer<T> compose(Function<T, R> fn,\n                                           Consumer<R> after) {\n    Objects.requireNonNull(fn);\n    Objects.requireNonNull(after);\n\n    return (T t) -> {\n      R result = fn.apply(t);\n      after.accept(result);\n    };\n  }\n\n  private Compositor() {\n    // disallows direct instantiation\n  }\n}\n```", "```java\n// SINGULAR STRING FUNCTIONS\n\nFunction<String, String> removeLowerCaseA = str -> str.replace(\"a\", \"\");\nFunction<String, String> upperCase = String::toUpperCase;\n\n// COMPOSED STRING FUNCTIONS\n\nFunction<String, String> stringOperations =\n  removeLowerCaseA.andThen(upperCase);\n\n// COMPOSED STRING FUNCTIONS AND CONSUMER\n\nConsumer<String> task = Compositor.compose(stringOperations,\n                                           System.out::println);\n\n// RUNNING TASK\n\ntask.accept(\"abcd\");\n// => BCD\n```", "```java\npublic final class Compositor {\n\n  public static Consumer<T> acceptIf(Predicate<T> predicate,\n                                     Consumer<T> consumer) {\n    Objects.requireNonNull(predicate);\n    Objects.requireNonNull(consumer);\n\n    return (T t) -> {\n      if (!predicate.test(t)) {\n        return;\n      }\n      consumer.accept(t);\n    }\n  }\n\n  // ...\n}\n```"]