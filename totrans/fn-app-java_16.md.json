["```java\npublic interface Shape {\n  int corners();\n  Color color();\n  ShapeType type();\n}\n\npublic enum ShapeType {\n  CIRCLE,\n  TRIANGLE,\n  SQUARE,\n  PENTAGON;\n}\n```", "```java\npublic record Circle(Color color) implements Shape {\n\n  public int corners() {\n    return 0;\n  }\n\n  public ShapeType type() {\n    return ShapeType.CIRCLE;\n  }\n}\n```", "```java\npublic class ShapeFactory {\n\n  public static Shape newShape(ShapeType type,\n                               Color color) {\n    Objects.requireNonNull(color);\n\n    return switch (type) {\n      case CIRCLE -> new Circle(color);\n      case TRIANGLE -> new Triangle(color);\n      case SQUARE -> new Square(color);\n      case PENTAGON -> new Pentagon(color);\n      default -> throw new IllegalArgumentException(\"Unknown type: \" + type);\n    };\n  }\n}\n```", "```java\npublic enum ShapeType {\n  CIRCLE,\n  TRIANGLE,\n  SQUARE,\n  PENTAGON;\n\n  public final Function<Color, Shape> factory;\n\n  ShapeType(Function<Color, Shape> factory) {\n    this.factory = factory;\n  }\n}\n```", "```java\npublic enum ShapeType {\n  CIRCLE(Circle::new),\n  TRIANGLE(Triangle::new),\n  SQUARE(Square::new),\n  PENTAGON(Pentagon::new);\n\n  // ...\n}\n```", "```java\npublic enum ShapeType {\n\n  // ...\n\n  public Shape newInstance(Color color) {\n    Objects.requireNonNull(color);\n    return this.factory.apply(color);\n  }\n}\n```", "```java\nvar redCircle = ShapeType.CIRCLE.newInstance(Color.RED);\n```", "```java\nFunction<Shape, Shape> cornerPrint =\n  shape -> {\n    System.out.println(\"Shape created with \" + shape.corners() + \" corners.\");\n  };\n\nShapeType.CIRCLE.factory.andThen(cornerPrint)\n                        .apply(Color.RED);\n```", "```java\npublic interface CoffeeMaker {\n  List<String> getIngredients();\n  Coffee prepare();\n}\n\npublic class BlackCoffeeMaker implements CoffeeMaker {\n\n  @Override\n  public List<String> getIngredients() {\n    return List.of(\"Robusta Beans\", \"Water\");\n  }\n\n  @Override\n  public Coffee prepare() {\n    return new BlackCoffee();\n  }\n}\n```", "```java\npublic abstract class Decorator implements CoffeeMaker { ![1](assets/1.png)\n\n  private final CoffeeMaker target;\n\n  public Decorator(CoffeeMaker target) { ![2](assets/2.png)\n    this.target = target;\n  }\n\n  @Override\n  public List<String> getIngredients() { ![3](assets/3.png)\n    return this.target.getIngredients();\n  }\n\n  @Override\n  public Coffee prepare() { ![3](assets/3.png)\n    return this.target.prepare();\n  }\n}\n```", "```java\npublic class AddMilkDecorator extends Decorator {\n\n  private final MilkCarton milkCarton;\n\n  public AddMilkDecorator(CoffeeMaker target,\n                          MilkCarton milkCarton) { ![1](assets/1.png)\n    super(target);\n\n    this.milkCarton = milkCarton;\n  }\n\n  @Override\n  public List<String> getIngredients() { ![2](assets/2.png)\n    var newIngredients = new ArrayList<>(super.getIngredients());\n    newIngredients.add(\"Milk\");\n    return newIngredients;\n  }\n\n  @Override\n  public Coffee prepare() { ![3](assets/3.png)\n    var coffee = super.prepare();\n    coffee = this.milkCarton.pourInto(coffee);\n    return coffee;\n  }\n}\n```", "```java\nCoffeeMaker coffeeMaker = new BlackCoffeeMaker();\n\nCoffeeMaker decoratedCoffeeMaker =\n  new AddMilkDecorator(coffeeMaker,\n                       new MilkCarton());\n\nCoffee cafeConLeche = decoratedCoffeeMaker.prepare();\n```", "```java\nCoffeeMaker coffeeMaker = new BlackCoffeeMaker();\n\nCoffeeMaker firstDecoratedCoffeeMaker =\n  new AddMilkDecorator(coffeeMaker,\n                       new MilkCarton());\n\nCoffeeMaker lastDecoratedCoffeeMaker =\n  new AddSugarDecorator(firstDecoratedCoffeeMaker);\n\nCoffee lastDecoratedCoffeeMaker = coffeeMaker.prepare();\n```", "```java\npublic final class Barista {\n\n  public static CoffeeMaker decorate(CoffeeMaker coffeeMaker,\n                                     Function<CoffeeMaker, CoffeeMaker> decorator) {\n\n    return decorator.apply(coffeeMaker);\n  }\n\n  private Barista() {\n    // Suppress default constructor.\n    // Ensures non-instantiability and non-extendability.\n  }\n}\n```", "```java\nCoffeeMaker decoratedCoffeeMaker =\n  Barista.decorate(new BlackCoffeeMaker(),\n                   coffeeMaker -> new AddMilkDecorator(coffeeMaker,\n                                                       new MilkCarton()));\n\nCoffeeMaker finalCoffeeMaker =\n  Barista.decorate(decoratedCoffeeMaker,\n                   AddSugarDecorator::new);\n```", "```java\npublic final class Barista {\n\n public static\n CoffeeMaker decorate(CoffeeMaker coffeeMaker, ![1](assets/1.png)\n                      Function<CoffeeMaker, CoffeeMaker>... decorators) {\n\n    Function<CoffeeMaker, CoffeeMaker> reducedDecorations = ![2](assets/2.png)\n      Arrays.stream(decorators)\n            .reduce(Function.identity(),\n                    Function::andThen);\n\n    return reducedDecorations.apply(coffeeMaker); ![3](assets/3.png)\n  }\n}\n```", "```java\nCoffeeMaker decoratedCoffeeMaker =\n  Barista.decorate(new BlackCoffeeMaker(),\n                   coffeeMaker -> new AddMilkDecorator(coffeeMaker,\n                                                       new MilkCarton()),\n                   AddSugarDecorator::new);\n```", "```java\npublic final class Decorations {\n\n  public static Function<CoffeeMaker, CoffeeMaker> addMilk(MilkCarton milkCarton) {\n    return coffeeMaker -> new AddMilkDecorator(coffeeMaker, milkCarton);\n  }\n\n  public static Function<CoffeeMaker, CoffeeMaker> addSugar() {\n    return AddSugarCoffeeMaker::new;\n  }\n\n  // ...\n}\n```", "```java\nCoffeeMaker maker = Barista.decorate(new BlackCoffeeMaker(),\n                                     Decorations.addMilk(milkCarton),\n                                     Decorations.addSugar());\nvar coffee = maker.prepare();\n```", "```java\npublic interface ShippingStrategy {\n  void ship(Parcel parcel);\n}\n\npublic interface ShippingService {\n  void ship(Parcel parcel,\n            ShippingStrategy strategy);\n}\n```", "```java\npublic class StandardShipping implements ShippingStrategy {\n  // ...\n}\n\npublic class ExpeditedShipping implements ShippingStrategy {\n\n  public ExpeditedShipping(boolean signatureRequired) {\n    //...\n  }\n\n  // ...\n}\n```", "```java\npublic final class ShippingStrategies {\n\n  public static ShippingStrategy standardShipping() {\n    return parcel -> ...;\n  }\n}\n\n// HOW TO USE\nshippingService.ship(parcel,\n                     ShippingStrategies::standardShipping);\n```", "```java\npublic final class ShippingStrategies {\n\n  public static ShippingStrategy expedited(boolean requiresSignature) {\n\n    return parcel -> {\n      if (requiresSignature) {\n        // ...\n      }\n    };\n  }\n}\n\n// HOW TO USE\nshippingService.ship(parcel,\n                     ShippingStrategies.expedited(true));\n```", "```java\npublic record User(String email, String name, List<String> permissions) {\n\n  public User {\n    if (email == null || email.isBlank()) {\n      throw new IllegalArgumentException(\"'email' must be set.\");\n    }\n\n    if (permissions == null) {\n      permissions = Collections.emptyList();\n    }\n  }\n}\n```", "```java\npublic record User(String email, String name, List<String> permissions) {\n\n  // ... shorthand constructor omitted\n\n  public static class Builder { ![1](assets/1.png)\n\n    private String email;\n    private String name;\n    private final List<String> permissions = new ArrayList<>();\n\n    public Builder email(String email) { ![2](assets/2.png)\n      this.email = email;\n      return this;\n    }\n\n    public Builder name(String name) { ![2](assets/2.png)\n      this.name = name;\n      return this;\n    }\n\n    public Builder addPermission(String permission) { ![3](assets/3.png)\n      this.permissions.add(permission);\n      return this;\n    }\n\n    public User build() { ![4](assets/4.png)\n      return new User(this.email, this.name, this.permissions);\n    }\n  }\n\n  public static Builder builder() { ![5](assets/5.png)\n    return new Builder();\n  }\n}\n```", "```java\nvar builder = User.builder()\n                  .email(\"ben@example.com\")\n                  .name(\"Ben Weidig\");\n\n// DO SOMETHING ELSE, PASS BUILDER ALONG\n\nvar user = builder.addPermission(\"create\")\n                  .addPermission(\"edit\")\n                  .build();\n```", "```java\npublic record User(String email, String name, List<String> permissions) {\n\n  // ...\n\n  private Supplier<String> emailSupplier;\n\n  public Builder email(Supplier<String> emailSupplier) {\n    this.emailSupplier = emailSupplier;\n    return this;\n  }\n\n  // ...\n\n  User build() {\n    var email = this.emailSupplier.get();\n    // ...\n  }\n}\n```", "```java\npublic record User(String email, String name, List<String> permissions) {\n\n  // ...\n\n  private Supplier<String> emailSupplier;\n\n  public Builder email(String email) {\n    this.emailSupplier = () -> email;\n    return this;\n  }\n\n  // ...\n}\n```", "```java\nvar user = User.builder()\n               .with(builder -> {\n                 builder.email = \"ben@example.com\";\n                 builder.name = \"Ben Weidig\";\n               })\n               .withPermissions(permissions -> {\n                 permissions.add(\"create\");\n                 permissions.add(\"view\");\n               })\n               .build();\n```", "```java\npublic record User(String email, String name, List<String> permissions) {\n\n  // ...\n\n  public static class Builder {\n\n    public String email; ![1](assets/1.png)\n    public String name;\n\n    private List<String> permissions = new ArrayList<>(); ![2](assets/2.png)\n\n    public Builder with(Consumer<Builder> builderFn) { ![3](assets/3.png)\n      builderFn.accept(this);\n      return this;\n    }\n\n    public Builder withPermissions(Consumer<List<String>> permissionsFn) { ![3](assets/3.png)\n      permissionsFn.accept(this.permissions);\n      return this;\n    }\n\n    // ...\n  }\n\n  // ...\n}\n```"]