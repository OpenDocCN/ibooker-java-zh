["```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```", "```java\ninterface CoffeeRepository extends CrudRepository<Coffee, String> {}\n```", "```java\nprivate final CoffeeRepository coffeeRepository;\n```", "```java\npublic RestApiDemoController(CoffeeRepository coffeeRepository){}\n```", "```java\n@GetMapping\nIterable<Coffee> getCoffees() {\n    return coffeeRepository.findAll();\n}\n```", "```java\n@GetMapping(\"/{id}\")\nOptional<Coffee> getCoffeeById(@PathVariable String id) {\n    return coffeeRepository.findById(id);\n}\n```", "```java\n@PostMapping\nCoffee postCoffee(@RequestBody Coffee coffee) {\n    return coffeeRepository.save(coffee);\n}\n```", "```java\n@PutMapping(\"/{id}\")\nResponseEntity<Coffee> putCoffee(@PathVariable String id,\n                                 @RequestBody Coffee coffee) {\n\n    return (!coffeeRepository.existsById(id))\n            ? new ResponseEntity<>(coffeeRepository.save(coffee),\n                  HttpStatus.CREATED)\n            : new ResponseEntity<>(coffeeRepository.save(coffee), HttpStatus.OK);\n}\n```", "```java\n@DeleteMapping(\"/{id}\")\nvoid deleteCoffee(@PathVariable String id) {\n    coffeeRepository.deleteById(id);\n}\n```", "```java\n@RestController\n@RequestMapping(\"/coffees\")\nclass RestApiDemoController {\n    private final CoffeeRepository coffeeRepository;\n\n    public RestApiDemoController(CoffeeRepository coffeeRepository) {\n        this.coffeeRepository = coffeeRepository;\n\n        this.coffeeRepository.saveAll(List.of(\n                new Coffee(\"Café Cereza\"),\n                new Coffee(\"Café Ganador\"),\n                new Coffee(\"Café Lareño\"),\n                new Coffee(\"Café Três Pontas\")\n        ));\n    }\n\n    @GetMapping\n    Iterable<Coffee> getCoffees() {\n        return coffeeRepository.findAll();\n    }\n\n    @GetMapping(\"/{id}\")\n    Optional<Coffee> getCoffeeById(@PathVariable String id) {\n        return coffeeRepository.findById(id);\n    }\n\n    @PostMapping\n    Coffee postCoffee(@RequestBody Coffee coffee) {\n        return coffeeRepository.save(coffee);\n    }\n\n    @PutMapping(\"/{id}\")\n    ResponseEntity<Coffee> putCoffee(@PathVariable String id,\n                                     @RequestBody Coffee coffee) {\n\n        return (!coffeeRepository.existsById(id))\n                ? new ResponseEntity<>(coffeeRepository.save(coffee),\n                HttpStatus.CREATED)\n                : new ResponseEntity<>(coffeeRepository.save(coffee), HttpStatus.OK);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    void deleteCoffee(@PathVariable String id) {\n        coffeeRepository.deleteById(id);\n    }\n}\n```", "```java\n@Component\nclass DataLoader {\n    private final CoffeeRepository coffeeRepository;\n\n    public DataLoader(CoffeeRepository coffeeRepository) {\n        this.coffeeRepository = coffeeRepository;\n    }\n\n    @PostConstruct\n    private void loadData() {\n        coffeeRepository.saveAll(List.of(\n                new Coffee(\"Café Cereza\"),\n                new Coffee(\"Café Ganador\"),\n                new Coffee(\"Café Lareño\"),\n                new Coffee(\"Café Três Pontas\")\n        ));\n    }\n}\n```", "```java\n@PutMapping(\"/{id}\")\nResponseEntity<Coffee> putCoffee(@PathVariable String id,\n                                 @RequestBody Coffee coffee) {\n\n    return (coffeeRepository.existsById(id))\n            ? new ResponseEntity<>(coffeeRepository.save(coffee),\n                HttpStatus.OK)\n            : new ResponseEntity<>(coffeeRepository.save(coffee),\n                HttpStatus.CREATED);\n}\n```"]