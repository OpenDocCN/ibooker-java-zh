- en: Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have come to the end of this book. We have covered the principles behind
    reactive architectures and the technical practices to implement them with Quarkus.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经来到本书的尾声。我们介绍了反应式架构的原则以及使用Quarkus实现这些原则的技术实践。
- en: A Brief Summary
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简短总结
- en: In [Part II](part02.html#reactive-part), we explored reactive architectures.
    Reactive systems ([Chapter 4](ch04.html#reactive-systems)) propose a different
    way to build distributed systems ([Chapter 3](ch03.html#distributed-system)).
    The use of message passing between the various components forming the system enables
    elasticity and resilience, two characteristics essential for modern applications
    deployed in the cloud or running in containers. But that’s not all. Reactive applications
    must also handle the workload in a timely fashion and use resources efficiently.
    This last point pushes reactive applications to use nonblocking I/O and avoids
    creating too many OS threads ([“The Role of Nonblocking Input/Output”](ch04.html#reactive-system::non-blocking)).
    The resulting execution model provides better response time and improves memory
    consumption. However, it does not come for free. To write such an application,
    you must change the way you write code. You must never block the I/O threads and
    so must write your code using a continuation-passing style. In this book, we have
    looked at reactive programming and Mutiny ([Chapter 5](ch05.html#reactive-programming),
    [Chapter 7](ch07.html#mutiny)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二部分](part02.html#reactive-part)，我们探讨了反应式架构。反应式系统（[第4章](ch04.html#reactive-systems)）提出了一种不同的构建分布式系统（[第3章](ch03.html#distributed-system)）的方式。系统中各个组件之间的消息传递实现了弹性和韧性，这是现代应用在云端或容器中部署的两个关键特性。但这还不是全部。反应式应用还必须及时处理工作负载并有效使用资源。最后一点推动反应式应用使用非阻塞I/O，并避免创建过多的操作系统线程（[“非阻塞输入/输出的角色”](ch04.html#reactive-system::non-blocking)）。由此产生的执行模型提供了更好的响应时间并改善了内存消耗。然而，这并非免费的。要编写这样的应用程序，您必须改变编码方式。您不能阻塞I/O线程，因此必须使用延续传递风格编写代码。在本书中，我们研究了反应式编程和Mutiny（[第5章](ch05.html#reactive-programming)，[第7章](ch07.html#mutiny)）。
- en: We also covered Quarkus, a stack to write applications in Java tailored for
    the cloud and containers ([Chapter 2](ch02.html#quarkus)). Quarkus runs on top
    of a reactive engine dealing with the network and nonblocking I/O. In addition,
    Quarkus offers a large set of reactive APIs. The combination of the engine and
    the API creates a breeding ground to build reactive applications ([Chapter 6](ch06.html#quarkus-reactive)).
    Quarkus provides reactive APIs to serve HTTP endpoints ([Chapter 8](ch08.html#http)),
    as well as to interact with data sources ([Chapter 9](ch09.html#data)) and consume
    HTTP services ([Chapter 12](ch12.html#http-client)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了Quarkus，这是一个专为云和容器中的Java应用程序设计的堆栈（[第2章](ch02.html#quarkus)）。Quarkus运行在处理网络和非阻塞I/O的反应式引擎之上。此外，Quarkus提供了大量的反应式API。引擎和API的结合为构建反应式应用程序提供了肥沃的土壤（[第6章](ch06.html#quarkus-reactive)）。Quarkus提供了用于服务HTTP端点（[第8章](ch08.html#http)），以及与数据源交互（[第9章](ch09.html#data)）和消费HTTP服务（[第12章](ch12.html#http-client)）的反应式API。
- en: Quarkus also provides the connective tissue for building reactive systems ([Chapter 10](ch10.html#messaging)).
    This book covered Kafka and AMQP 1.0, but many more possibilities are available
    ([Chapter 11](ch11.html#event-bus)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus还提供了构建反应式系统的连贯性基础（[第10章](ch10.html#messaging)）。本书涵盖了Kafka和AMQP 1.0，但还有更多可能性可供选择（[第11章](ch11.html#event-bus)）。
- en: Quarkus lets you design, build, and operate reactive systems. Observability
    is a key component for distributed systems and not a feature to be tacked on at
    the end of development ([Chapter 13](ch13.html#observability)). Reactive systems
    are distributed systems, and failures are inevitable. Being able to observe, detect
    issues, emit alerts, and react is essential to keep the system running and serve
    its purpose.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Quarkus让您设计、构建和操作反应式系统。可观察性是分布式系统的关键组成部分，而不是开发结束时要添加的功能（[第13章](ch13.html#observability)）。反应式系统是分布式系统，故障是不可避免的。能够观察、检测问题、发出警报并做出反应对于保持系统运行并发挥其作用至关重要。
- en: Is That All?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这就是全部吗？
- en: This book did not offer a silver-bullet solution to build reactive systems.
    We have covered the principles and the building blocks to build them. But, as
    with everything in software, the ideal solutions always depend on the problem.
    We’ve showed you a toolbox, but it’s up to you to select the best tool for your
    application, assemble your system following the reactive principles, and profit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书没有提供构建响应式系统的灵丹妙药。我们涵盖了构建它们的原则和构建块。但是，就像软件中的一切一样，理想的解决方案总是取决于问题本身。我们向您展示了一个工具箱，但选择最适合您的应用程序的最佳工具、按照响应式原则组装系统并获利，还需您自行决定。
- en: Throughout this book, we have shown many features to implement reactive applications
    and systems with Quarkus, but we’ve only scratched the surface. Quarkus offers
    a lot more reactive features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们展示了许多使用 Quarkus 实现响应式应用和系统的特性，但我们只是浅尝辄止。Quarkus 提供了许多更多的响应式特性。
- en: We explained how you can deal with HTTP in a reactive fashion. But there are
    alternatives to HTTP. gRPC, for example, is a secure, polyglot, and performant
    RPC protocol that can replace most HTTP interactions. It uses a contract-first
    approach (written using Protobuf), and supports unidirectional and bidirectional
    streams. Quarkus lets you implement gRPC services and consume them. It relies
    on the reactive engine and therefore offers excellent performance and resource
    utilization. In addition, it integrates with the Mutiny API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了如何以响应式方式处理 HTTP。但 HTTP 也有替代方案。例如，gRPC 是一种安全、多语言且高性能的 RPC 协议，可以替代大多数 HTTP
    交互。它采用基于合同的方法（使用 Protobuf 编写），支持单向和双向流。Quarkus 允许您实现 gRPC 服务并消费它们。它依赖于响应式引擎，因此提供了优秀的性能和资源利用率。此外，它还集成了
    Mutiny API。
- en: We have also covered the data space, explaining how you can interact with various
    databases from within your Quarkus application. Quarkus offers reactive access
    to databases such as PostgreSQL, MySQL, Db2, SQL Server, and Oracle. Quarkus also
    provides reactive APIs to interact with many NoSQL databases such as Neo4j, Cassandra,
    Redis, and MongoDB.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还涵盖了数据空间，解释了如何在 Quarkus 应用程序中与各种数据库进行交互。Quarkus 提供了对诸如 PostgreSQL、MySQL、Db2、SQL
    Server 和 Oracle 等数据库的响应式访问。Quarkus 还提供了与许多 NoSQL 数据库（如 Neo4j、Cassandra、Redis 和
    MongoDB）进行交互的响应式 API。
- en: Finally, to build reactive systems, you often need a message broker, or a way
    to exchange messages asynchronously. In this book, we used Apache Kafka and Apache
    ActiveMQ. Quarkus offers a lot more. You can integrate with MQTT, RabbitMQ, or
    JMS. Quarkus can be combined with Apache Camel to interact with virtually any
    existing system without preventing *reactiveness*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要构建响应式系统，通常需要消息代理或异步消息交换方式。在本书中，我们使用了 Apache Kafka 和 Apache ActiveMQ。Quarkus
    提供了更多选择。你可以集成 MQTT、RabbitMQ 或 JMS。Quarkus 还可以与 Apache Camel 结合，与几乎所有现有系统进行交互，而不影响*响应性*。
- en: In other words, Quarkus offers a complete toolbox that lets you build reactive
    applications for many contexts and use cases. You have endless possibilities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Quarkus 提供了一个完整的工具箱，让您可以为多种环境和用例构建响应式应用程序。您有无尽的可能性。
- en: The Future of Reactive Systems
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式系统的未来
- en: It’s impossible to predict the future with a high degree of certainty. The best
    we can do is track meaningful trends and prepare for change. The following are
    some trends that we think are important to track.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 高度确定未来是不可能的。我们能做的最好的事情是追踪有意义的趋势并为变化做好准备。以下是一些我们认为值得关注的趋势。
- en: HTTP is evolving. HTTP/3 comes with a better flow-control approach and parallel
    request transmission, improving overall communication across the system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 正在发展。HTTP/3 引入了更好的流控制方法和并行请求传输，改善了系统间的整体通信。
- en: The use of message brokers is growing tremendously. New brokers are emerging,
    such as Apache Pulsar, NATS, and KubeMQ. The last two are built with Kubernetes
    in mind and integrate well in such an environment. Several revolutionizing projects
    are changing how to process messages and derive knowledge from event streams.
    Apache Pinot, to cite one, allows querying data coming from event streams such
    as Apache Kafka.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用消息代理的情况正在迅速增长。新的代理正在出现，如 Apache Pulsar、NATS 和 KubeMQ。最后两个是以 Kubernetes 为核心构建的，并在这样的环境中很好地集成。一些革新性的项目正在改变如何处理消息并从事件流中获取知识。以
    Apache Pinot 为例，允许查询来自事件流（如 Apache Kafka）的数据。
- en: As in many other domains, the rise of machine learning and AI also influence
    the construction of reactive systems. Machine learning algorithms can help understand
    the system and adapt it to handle failures or peaks of demands. Already today,
    you can see Kubernetes operators collecting metrics about a system and adapting
    it to face the current workload.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在许多其他领域一样，机器学习和人工智能的兴起也影响了反应式系统的构建。机器学习算法可以帮助理解系统并使其适应处理故障或需求高峰。今天，您已经可以看到
    Kubernetes 运算符收集系统的指标并使其适应当前的工作负载。
- en: At the code level, Project Loom is promising. It will drastically reduce the
    complexity of writing efficient reactive applications. Approaches to express structured
    concurrency such as Ballerina and Joli are still niched but may become more popular
    shortly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码层面，Project Loom 很有前景。它将大大简化编写高效反应式应用程序的复杂性。像 Ballerina 和 Joli 这样表达结构化并发的方法仍然是小众的，但可能很快会变得更流行。
- en: There are many more trends. Keep an eye on the technologies that embrace the
    reactive principles we explained in this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有许多趋势。请关注那些采纳了我们在本书中解释的反应式原理的技术。
- en: The End of the Beginning
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开端的结束
- en: You now have all the tools to build *better* distributed systems that are more
    robust and more efficient. Quarkus, a Java stack tailored for the cloud, will
    let you embrace the reactive system paradigm smoothly, one step at a time. Go
    ahead!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有构建*更好*的分布式系统所需的所有工具，这些系统更加健壮和高效。Quarkus，一个专为云环境量身定制的 Java 栈，将让您顺利采纳反应式系统的范式，一步一步来吧！
- en: We hope you enjoyed this journey. Now it’s time for you to start a new one by
    using what you’ve learned.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您享受了这段旅程。现在是时候利用所学开始新的旅程了。
